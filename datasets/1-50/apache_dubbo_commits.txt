File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/managemode/WrappedChannelHandlerTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dubbo.remoting.exchange.support.DefaultFuture;
 import org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import java.lang.reflect.Field;
 import java.util.concurrent.ExecutorService;
@@ -135,6 +136,8 @@ void testGetExecutor() {
         preferredExecutorService = handler.getPreferredExecutorService(response);
         Assertions.assertEquals(preferredExecutorService, executor);
         future.cancel();
+
+        FrameworkModel.destroyAll();
     }
 
     class BizChannelHandler extends MockedChannelHandler {

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/codec/TelnetCodecTest.java
Patch:
@@ -247,7 +247,7 @@ void testDecode_Backspace() throws IOException {
         testDecode_assertEquals(new byte[] {'\b'}, Codec2.DecodeResult.NEED_MORE_INPUT, new String(new byte[] {32, 8}));
 
         // test chinese
-        byte[] chineseBytes = "中".getBytes();
+        byte[] chineseBytes = "中".getBytes(StandardCharsets.UTF_8);
         byte[] request = join(chineseBytes, new byte[] {'\b'});
         testDecode_assertEquals(request, Codec2.DecodeResult.NEED_MORE_INPUT, new String(new byte[] {32, 32, 8, 8}));
         // There may be some problem handling chinese (negative number recognition). Ignoring this problem, the

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalanceTest.java
Patch:
@@ -102,7 +102,7 @@ void testSelectByWeight() {
     @Test
     void testNodeCacheShouldNotRecycle() {
         int loop = 10000;
-        // tmperately add a new invoker
+        // temperately add a new invoker
         weightInvokers.add(weightInvokerTmp);
         try {
             Map<Invoker, InvokeResult> resultMap = getWeightedInvokeResult(loop, RoundRobinLoadBalance.NAME);
@@ -143,7 +143,7 @@ void testNodeCacheShouldRecycle() {
         }
 
         int loop = 10000;
-        // tmperately add a new invoker
+        // temperately add a new invoker
         weightInvokers.add(weightInvokerTmp);
         try {
             Map<Invoker, InvokeResult> resultMap = getWeightedInvokeResult(loop, RoundRobinLoadBalance.NAME);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -883,7 +883,7 @@ private void postProcessConfig() {
 
     /**
      * Return if ReferenceConfig has been initialized
-     * Note: Cannot use `isInitilized` as it may be treated as a Java Bean property
+     * Note: Cannot use `isInitialized` as it may be treated as a Java Bean property
      *
      * @return initialized
      */

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/AbstractInterfaceBuilder.java
Patch:
@@ -53,7 +53,7 @@ public abstract class AbstractInterfaceBuilder<
     protected MonitorConfig monitor;
 
     /**
-     * Strategies for generating dynamic agents，there are two strategies can be choosed: jdk and javassist
+     * Strategies for generating dynamic agents，there are two strategies can be chosen: jdk and javassist
      */
     protected String proxy;
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/issues/issue6000/Issue6000Test.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * The test-case for https://github.com/apache/dubbo/issues/6000
- * Autowired a ReferenceBean failed in some situation in Spring enviroment
+ * Autowired a ReferenceBean failed in some situation in Spring environment
  */
 @Configuration
 @EnableDubbo

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/codec/TelnetCodecTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -75,7 +76,7 @@ protected byte[] join(byte[] in1, byte[] in2) {
     protected byte[] objectToByte(Object obj) {
         byte[] bytes;
         if (obj instanceof String) {
-            bytes = ((String) obj).getBytes();
+            bytes = ((String) obj).getBytes(StandardCharsets.UTF_8);
         } else if (obj instanceof byte[]) {
             bytes = (byte[]) obj;
         } else {

File: dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStreamTest.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -72,7 +73,7 @@ void testExtendLengthForBuffer() throws IOException {
     @Test
     void testToStringWithCharset() throws IOException {
         UnsafeByteArrayOutputStream outputStream = new UnsafeByteArrayOutputStream();
-        outputStream.write("Hòa Bình".getBytes());
+        outputStream.write("Hòa Bình".getBytes(StandardCharsets.UTF_8));
 
         assertThat(outputStream.toString("UTF-8"), is("Hòa Bình"));
     }

File: dubbo-demo/dubbo-demo-spring-boot/dubbo-demo-spring-boot-servlet/src/main/java/org/apache/dubbo/springboot/demo/servlet/GreeterService.java
Patch:
@@ -37,6 +37,8 @@ public interface GreeterService {
      */
     void sayHelloServerStream(HelloRequest request, StreamObserver<HelloReply> responseObserver);
 
+    void sayHelloServerStreamNoParameter(StreamObserver<HelloReply> responseObserver);
+
     /**
      * Sends greetings with bi streaming
      */

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
Patch:
@@ -137,13 +137,15 @@ public static void beforeAll() {
     @BeforeEach
     public void setUp() throws Exception {
         DubboBootstrap.reset();
+        FrameworkModel.destroyAll();
         ApplicationModel.defaultModel().getApplicationConfigManager();
         DubboBootstrap.getInstance();
     }
 
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
+        FrameworkModel.destroyAll();
         Mockito.framework().clearInlineMocks();
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractEndpoint.java
Patch:
@@ -36,7 +36,7 @@
  */
 public abstract class AbstractEndpoint extends AbstractPeer implements Resetable {
 
-    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(AbstractEndpoint.class);
+    protected final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
 
     private Codec2 codec;
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractServer.java
Patch:
@@ -17,8 +17,6 @@
 package org.apache.dubbo.remoting.transport;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
-import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
 import org.apache.dubbo.common.utils.ExecutorUtil;
@@ -45,7 +43,7 @@
  * AbstractServer
  */
 public abstract class AbstractServer extends AbstractEndpoint implements RemotingServer {
-    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(AbstractServer.class);
+
     private Set<ExecutorService> executors = new ConcurrentHashSet<>();
     private InetSocketAddress localAddress;
     private InetSocketAddress bindAddress;

File: dubbo-remoting/dubbo-remoting-http3/src/main/java/org/apache/dubbo/remoting/transport/netty4/Http3Helper.java
Patch:
@@ -25,7 +25,7 @@
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 
-final class Helper {
+final class Http3Helper {
 
     @SuppressWarnings("unchecked")
     static <T extends QuicCodecBuilder<T>> T configCodec(QuicCodecBuilder<T> builder, URL url) {

File: dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyHandler.java
Patch:
@@ -78,7 +78,7 @@ public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) thr
             NettyChannel.removeChannelIfDisconnected(ctx.getChannel());
         }
 
-        if (logger.isInfoEnabled()) {
+        if (logger.isInfoEnabled() && channel != null) {
             logger.info("The connection between " + channel.getRemoteAddress() + " and " + channel.getLocalAddress()
                     + " is established");
         }

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java
Patch:
@@ -18,8 +18,6 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.ConfigurationUtils;
-import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
-import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ClassUtils;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.NetUtils;
@@ -64,7 +62,6 @@
  */
 public class NettyServer extends AbstractServer {
 
-    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(NettyServer.class);
     /**
      * the cache for alive worker channel.
      * <ip:port, dubbo channel>

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp3ProtocolTest.java
Patch:
@@ -108,7 +108,7 @@ void testDemoProtocol() throws Exception {
         MockStreamObserver outboundMessageSubscriber1 = new MockStreamObserver();
         greeterProxy.serverStream(REQUEST_MSG, outboundMessageSubscriber1);
         outboundMessageSubscriber1.getLatch().await(3000, TimeUnit.MILLISECONDS);
-        Assertions.assertEquals(outboundMessageSubscriber1.getOnNextData(), REQUEST_MSG);
+        Assertions.assertEquals(REQUEST_MSG, outboundMessageSubscriber1.getOnNextData());
         Assertions.assertTrue(outboundMessageSubscriber1.isOnCompleted());
 
         // 3. test bidirectionalStream
@@ -118,7 +118,7 @@ void testDemoProtocol() throws Exception {
         inboundMessageObserver.onCompleted();
         outboundMessageSubscriber2.getLatch().await(3000, TimeUnit.MILLISECONDS);
         // verify client
-        Assertions.assertEquals(outboundMessageSubscriber2.getOnNextData(), IGreeter.SERVER_MSG);
+        Assertions.assertEquals(IGreeter.SERVER_MSG, outboundMessageSubscriber2.getOnNextData());
         Assertions.assertTrue(outboundMessageSubscriber2.isOnCompleted());
         // verify server
         MockStreamObserver serverOutboundMessageSubscriber = (MockStreamObserver) serviceImpl.getMockStreamObserver();

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/HttpUtils.java
Patch:
@@ -94,7 +94,7 @@ public static String encodeCookie(HttpCookie cookie) {
 
     public static List<String> parseAccept(String header) {
         if (header == null) {
-            return Collections.emptyList();
+            return new ArrayList<>();
         }
         List<Item<String>> mediaTypes = new ArrayList<>();
         for (String item : StringUtils.tokenize(header, ',')) {
@@ -126,7 +126,7 @@ public static float parseQuality(String expr, int index) {
     public static List<Locale> parseAcceptLanguage(String header) {
         List<Item<Locale>> locales = new ArrayList<>();
         if (header == null) {
-            return Collections.emptyList();
+            return new ArrayList<>();
         }
         for (String item : StringUtils.tokenize(header, ',')) {
             String[] pair = StringUtils.tokenize(item, ';');
@@ -138,7 +138,7 @@ public static List<Locale> parseAcceptLanguage(String header) {
     public static List<Locale> parseContentLanguage(String header) {
         List<Locale> locales = new ArrayList<>();
         if (header == null) {
-            return Collections.emptyList();
+            return new ArrayList<>();
         }
         for (String item : StringUtils.tokenize(header, ',')) {
             locales.add(parseLocale(item));

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/HttpHeaderNames.java
Patch:
@@ -24,6 +24,8 @@ public enum HttpHeaderNames {
 
     PATH(PseudoHeaderName.PATH.value()),
 
+    METHOD(PseudoHeaderName.METHOD.value()),
+
     ACCEPT(io.netty.handler.codec.http.HttpHeaderNames.ACCEPT),
 
     CONTENT_TYPE(io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE),

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Constants.java
Patch:
@@ -103,6 +103,8 @@ public interface Constants {
 
     String HTTP3_KEY = "http3";
 
+    String TRIPLE_SERVLET_KEY = "triple.servlet";
+
     String H2_SETTINGS_SUPPORT_NO_LOWER_HEADER_KEY = "dubbo.rpc.tri.support-no-lower-header";
     String H2_SETTINGS_IGNORE_1_0_0_KEY = "dubbo.rpc.tri.ignore-1.0.0-version";
     String H2_SETTINGS_RESOLVE_FALLBACK_TO_DEFAULT_KEY = "dubbo.rpc.tri.resolve-fallback-to-default";

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleConstants.java
Patch:
@@ -40,5 +40,7 @@ public final class TripleConstants {
     public static final String TRIPLE_HANDLER_TYPE_REST = "rest";
     public static final String TRIPLE_HANDLER_TYPE_GRPC = "grpc";
 
+    public static final String UPGRADE_HEADER_KEY = "Upgrade";
+
     private TripleConstants() {}
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/mapping/meta/MethodMeta.java
Patch:
@@ -153,7 +153,7 @@ public String toShortString() {
         return MethodUtils.toShortString(method);
     }
 
-    private static final class StreamParameterMeta extends ParameterMeta {
+    public static final class StreamParameterMeta extends ParameterMeta {
 
         private final Class<?> type;
         private final Type genericType;

File: dubbo-plugin/dubbo-rest-jaxrs/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/jaxrs/HeaderParamArgumentResolver.java
Patch:
@@ -43,6 +43,6 @@ protected Object resolveCollectionValue(NamedValueMeta meta, HttpRequest request
 
     @Override
     protected Object resolveMapValue(NamedValueMeta meta, HttpRequest request, HttpResponse response) {
-        return request.headers();
+        return request.headers().asMap();
     }
 }

File: dubbo-plugin/dubbo-rest-spring/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/spring/RequestHeaderArgumentResolver.java
Patch:
@@ -43,6 +43,6 @@ protected Object resolveCollectionValue(NamedValueMeta meta, HttpRequest request
 
     @Override
     protected Object resolveMapValue(NamedValueMeta meta, HttpRequest request, HttpResponse response) {
-        return request.headers();
+        return request.headers().asMap();
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/HttpContextCallbackFilter.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.protocol.tri.TripleConstants;
 
-@Activate(group = CommonConstants.PROVIDER, order = 29000)
+@Activate(group = CommonConstants.PROVIDER, order = 10)
 public class HttpContextCallbackFilter implements Filter, BaseFilter.Listener {
 
     @Override

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/basic/ParamArgumentResolver.java
Patch:
@@ -151,7 +151,7 @@ protected Object resolveMapValue(NamedValueMeta meta, HttpRequest request, HttpR
             case Param:
                 return RequestUtils.getParametersMap(request);
             case Header:
-                return request.headers();
+                return request.headers().asMap();
             case Cookie:
                 Collection<HttpCookie> cookies = request.cookies();
                 if (cookies.isEmpty()) {

File: dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/AccessKeyAuthenticator.java
Patch:
@@ -62,7 +62,7 @@ public void authenticate(Invocation invocation, URL url) throws RpcAuthenticatio
         try {
             accessKeyPair = getAccessKeyPair(invocation, url);
         } catch (Exception e) {
-            throw new RpcAuthenticationException("Failed to authenticate , can't load the accessKeyPair", e);
+            throw new RpcAuthenticationException("Failed to authenticate , can't load the accessKeyPair");
         }
 
         String computeSignature = getSignature(url, invocation, accessKeyPair.getSecretKey(), requestTimestamp);
@@ -85,7 +85,7 @@ AccessKeyPair getAccessKeyPair(Invocation invocation, URL url) {
                 throw new AccessKeyNotFoundException("AccessKeyId or secretAccessKey not found");
             }
         } catch (Exception e) {
-            throw new RuntimeException("Can't load the AccessKeyPair from accessKeyStorage", e);
+            throw new RuntimeException("Can't load the AccessKeyPair from accessKeyStorage");
         }
         return accessKeyPair;
     }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/message/DefaultHttpResponse.java
Patch:
@@ -266,8 +266,8 @@ public boolean isContentEmpty() {
         if (body != null) {
             return false;
         }
-        if (outputStream != null && outputStream instanceof ByteArrayOutputStream) {
-            return ((ByteArrayOutputStream) outputStream).size() == 0;
+        if (outputStream != null) {
+            return outputStream instanceof ByteArrayOutputStream && ((ByteArrayOutputStream) outputStream).size() == 0;
         }
         return true;
     }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/message/DefaultHttpResult.java
Patch:
@@ -123,7 +123,7 @@ public Builder<T> headers(HttpHeaders headers) {
             }
             Map<String, List<String>> hrs = this.headers;
             if (hrs == null) {
-                hrs = new LinkedHashMap<>(headers.size());
+                this.headers = hrs = new LinkedHashMap<>(headers.size());
             }
             for (Entry<CharSequence, String> entry : headers) {
                 CharSequence key = entry.getKey();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMapping.java
Patch:
@@ -130,7 +130,7 @@ public boolean map(URL url) {
                                 + waitTime + ". " + "Service Interface: "
                                 + serviceInterface + ". " + "Origin Content: "
                                 + oldConfigContent + ". " + "Ticket: "
-                                + configItem.getTicket() + ". " + "Excepted context: "
+                                + configItem.getTicket() + ". " + "Expected Content: "
                                 + newConfigContent);
                         Thread.sleep(waitTime);
                     }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/HttpUtils.java
Patch:
@@ -32,7 +32,6 @@
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.ByteBufInputStream;
 import io.netty.buffer.ByteBufOutputStream;
-import io.netty.buffer.Unpooled;
 import io.netty.buffer.UnpooledByteBufAllocator;
 import io.netty.handler.codec.http.DefaultFullHttpRequest;
 import io.netty.handler.codec.http.DefaultHttpHeaders;
@@ -169,7 +168,7 @@ public static HttpPostRequestDecoder createPostRequestDecoder(
                 inputStream.mark(Integer.MAX_VALUE);
             }
             if (inputStream.available() == 0) {
-                data = Unpooled.EMPTY_BUFFER;
+                return null;
             } else {
                 data = HEAP_ALLOC.buffer();
                 ByteBufOutputStream os = new ByteBufOutputStream(data);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -456,6 +456,7 @@ public synchronized void onEvent(MappingChangedEvent event) {
                                 oldListener.removeListener(url.getServiceKey(), listener);
                                 if (!oldListener.hasListeners()) {
                                     oldListener.destroy();
+                                    serviceListeners.remove(appKey);
                                     removeAppSubscriptionLock(appKey);
                                 }
                             } finally {

File: dubbo-plugin/dubbo-rest-spring/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/spring/SpringRestToolKit.java
Patch:
@@ -79,7 +79,7 @@ public SpringRestToolKit(FrameworkModel frameworkModel) {
             configuration = new ConfigurationWrapper(applicationModel);
         }
         if (context != null && context.containsBean("mvcConversionService")) {
-            conversionService = context.getBean(ConversionService.class, "mvcConversionService");
+            conversionService = context.getBean("mvcConversionService", ConversionService.class);
         } else {
             conversionService = DefaultConversionService.getSharedInstance();
         }

File: dubbo-spring-boot/dubbo-spring-boot-actuator/src/main/java/org/apache/dubbo/spring/boot/actuate/autoconfigure/DubboEndpointAnnotationAutoConfiguration.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.spring.boot.actuate.autoconfigure;
 
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboConfigsMetadataEndpoint;
-import org.apache.dubbo.spring.boot.actuate.endpoint.DubboMetadataEndpoint;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint;
+import org.apache.dubbo.spring.boot.actuate.endpoint.DubboQosEndpoints;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboShutdownEndpoint;
@@ -52,8 +52,8 @@ public class DubboEndpointAnnotationAutoConfiguration {
     @ConditionalOnMissingBean
     @ConditionalOnAvailableEndpoint
     @CompatibleConditionalOnEnabledEndpoint
-    public DubboMetadataEndpoint dubboEndpoint() {
-        return new DubboMetadataEndpoint();
+    public DubboQosEndpoints dubboQosEndpoints() {
+        return new DubboQosEndpoints();
     }
 
     @Bean

File: dubbo-spring-boot/dubbo-spring-boot-actuator/src/test/java/org/apache/dubbo/spring/boot/actuate/autoconfigure/DubboEndpointAnnotationAutoConfigurationTest.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.dubbo.config.annotation.DubboService;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboConfigsMetadataEndpoint;
-import org.apache.dubbo.spring.boot.actuate.endpoint.DubboMetadataEndpoint;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint;
+import org.apache.dubbo.spring.boot.actuate.endpoint.DubboQosEndpoints;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboShutdownEndpoint;
@@ -86,7 +86,7 @@
 class DubboEndpointAnnotationAutoConfigurationTest {
 
     @Autowired
-    private DubboMetadataEndpoint dubboEndpoint;
+    private DubboQosEndpoints dubboQosEndpoints;
 
     @Autowired
     private DubboConfigsMetadataEndpoint dubboConfigsMetadataEndpoint;
@@ -225,7 +225,7 @@ void testProperties() {
 
     @Test
     void testHttpEndpoints() throws JsonProcessingException {
-        //        testHttpEndpoint("/dubbo", dubboEndpoint::invoke);
+        //        testHttpEndpoint("/dubbo", dubboQosEndpoints::invoke);
         testHttpEndpoint("/dubbo/configs", dubboConfigsMetadataEndpoint::configs);
         testHttpEndpoint("/dubbo/services", dubboServicesMetadataEndpoint::services);
         testHttpEndpoint("/dubbo/references", dubboReferencesMetadataEndpoint::references);

File: dubbo-plugin/dubbo-triple-servlet/src/main/java/org/apache/dubbo/rpc/protocol/tri/servlet/TripleFilter.java
Patch:
@@ -125,8 +125,10 @@ private void handleHttp1(HttpServletRequest request, HttpServletResponse respons
                     channel, ServletExchanger.getUrl(), FrameworkModel.defaultModel());
             channel.setGrpc(false);
             context.setTimeout(resolveTimeout(request, false));
-            listener.onMetadata(new HttpMetadataAdapter(request));
             ServletInputStream is = request.getInputStream();
+            response.getOutputStream().setWriteListener(new TripleWriteListener(channel));
+
+            listener.onMetadata(new HttpMetadataAdapter(request));
             listener.onData(new Http1InputMessage(
                     is.available() == 0 ? StreamUtils.EMPTY : new ByteArrayInputStream(StreamUtils.readBytes(is))));
         } catch (Throwable t) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Constants.java
Patch:
@@ -109,6 +109,7 @@ public interface Constants {
     String H2_SETTINGS_BUILTIN_SERVICE_INIT = "dubbo.tri.builtin.service.init";
 
     String H2_SETTINGS_JSON_FRAMEWORK_NAME = "dubbo.protocol.triple.rest.json-framework";
+    String H2_SETTINGS_DISALLOWED_CONTENT_TYPES = "dubbo.protocol.triple.rest.disallowed-content-types";
 
     String H2_SETTINGS_VERBOSE_ENABLED = "dubbo.protocol.triple.verbose";
     String H2_SETTINGS_SERVLET_ENABLED = "dubbo.protocol.triple.servlet.enabled";

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/param/parse/provider/BodyProviderParamParser.java
Patch:
@@ -41,8 +41,7 @@ protected void doParse(ProviderParseContext parseContext, ArgInfo argInfo) {
         try {
             String contentType = parseContext.getRequestFacade().getHeader(RestHeaderEnum.CONTENT_TYPE.getHeader());
             MediaType mediaType = MediaTypeUtil.convertMediaType(argInfo.getParamType(), contentType);
-            Object param = HttpMessageCodecManager.httpMessageDecode(
-                    request.getInputStream(), argInfo.getParamType(), argInfo.actualReflectType(), mediaType);
+            Object param = HttpMessageCodecManager.httpMessageDecode(request.getInputStream(), argInfo, mediaType);
             parseContext.setValueByIndex(argInfo.getIndex(), param);
         } catch (Throwable e) {
             throw new ParamParseException("dubbo rest protocol provider body param parser  error: " + e.getMessage());

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/param/parse/provider/ParamProviderParamParser.java
Patch:
@@ -53,7 +53,9 @@ protected void doParse(ProviderParseContext parseContext, ArgInfo argInfo) {
         String param = request.getParameter(argInfo.getAnnotationNameAttribute());
 
         Object paramValue = paramTypeConvert(argInfo.getParamType(), param);
-        parseContext.setValueByIndex(argInfo.getIndex(), paramValue);
+        if (paramValue != null) {
+            parseContext.setValueByIndex(argInfo.getIndex(), paramValue);
+        }
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/HttpMessageDecode.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.dubbo.rpc.protocol.rest.message;
 
-import java.lang.reflect.Type;
+import org.apache.dubbo.metadata.rest.ArgInfo;
 
 public interface HttpMessageDecode<InputStream> {
 
-    Object decode(InputStream body, Class<?> targetType, Type actualTYpe) throws Exception;
+    Object decode(InputStream body, ArgInfo argInfo) throws Exception;
 }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/ByteArrayCodec.java
Patch:
@@ -18,11 +18,11 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.metadata.rest.ArgInfo;
 import org.apache.dubbo.metadata.rest.media.MediaType;
 import org.apache.dubbo.rpc.protocol.rest.message.HttpMessageCodec;
 
 import java.io.OutputStream;
-import java.lang.reflect.Type;
 
 /**
  *  body type is byte array
@@ -31,7 +31,7 @@
 public class ByteArrayCodec implements HttpMessageCodec<byte[], OutputStream> {
 
     @Override
-    public Object decode(byte[] body, Class<?> targetType, Type type) throws Exception {
+    public Object decode(byte[] body, ArgInfo argInfo) throws Exception {
         return body;
     }
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/JsonCodec.java
Patch:
@@ -19,13 +19,13 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.utils.JsonUtils;
+import org.apache.dubbo.metadata.rest.ArgInfo;
 import org.apache.dubbo.metadata.rest.media.MediaType;
 import org.apache.dubbo.rpc.protocol.rest.message.HttpMessageCodec;
 import org.apache.dubbo.rpc.protocol.rest.message.MediaTypeMatcher;
 import org.apache.dubbo.rpc.protocol.rest.util.DataParseUtils;
 
 import java.io.OutputStream;
-import java.lang.reflect.Type;
 import java.nio.charset.StandardCharsets;
 import java.util.HashSet;
 import java.util.Set;
@@ -46,8 +46,8 @@ public static void addUnSupportClass(Class<?> unSupportClass) {
     }
 
     @Override
-    public Object decode(byte[] body, Class<?> targetType, Type actualType) throws Exception {
-        return DataParseUtils.jsonConvert(actualType, body);
+    public Object decode(byte[] body, ArgInfo argInfo) throws Exception {
+        return DataParseUtils.jsonConvert(argInfo.actualReflectType(), body);
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/ResteasyResponseCodec.java
Patch:
@@ -20,12 +20,12 @@
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.utils.ClassUtils;
 import org.apache.dubbo.common.utils.JsonUtils;
+import org.apache.dubbo.metadata.rest.ArgInfo;
 import org.apache.dubbo.metadata.rest.media.MediaType;
 import org.apache.dubbo.rpc.protocol.rest.message.HttpMessageCodec;
 
 import java.io.OutputStream;
 import java.lang.reflect.Method;
-import java.lang.reflect.Type;
 import java.nio.charset.StandardCharsets;
 
 @Activate(onClass = "javax.ws.rs.core.Response")
@@ -58,7 +58,7 @@ public MediaType contentType() {
     }
 
     @Override
-    public Object decode(byte[] body, Class<?> targetType, Type type) throws Exception {
+    public Object decode(byte[] body, ArgInfo argInfo) throws Exception {
         if (null == body || body.length == 0) {
             return null;
         }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/StringCodec.java
Patch:
@@ -18,11 +18,11 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.metadata.rest.ArgInfo;
 import org.apache.dubbo.metadata.rest.media.MediaType;
 import org.apache.dubbo.rpc.protocol.rest.message.HttpMessageCodec;
 
 import java.io.OutputStream;
-import java.lang.reflect.Type;
 import java.nio.charset.StandardCharsets;
 
 /**
@@ -32,7 +32,7 @@
 public class StringCodec implements HttpMessageCodec<byte[], OutputStream> {
 
     @Override
-    public Object decode(byte[] body, Class<?> targetType, Type type) throws Exception {
+    public Object decode(byte[] body, ArgInfo argInfo) throws Exception {
         if (body == null || body.length == 0) {
             return null;
         }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/TextCodec.java
Patch:
@@ -18,13 +18,13 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.metadata.rest.ArgInfo;
 import org.apache.dubbo.metadata.rest.media.MediaType;
 import org.apache.dubbo.rpc.protocol.rest.message.HttpMessageCodec;
 import org.apache.dubbo.rpc.protocol.rest.message.MediaTypeMatcher;
 import org.apache.dubbo.rpc.protocol.rest.util.DataParseUtils;
 
 import java.io.OutputStream;
-import java.lang.reflect.Type;
 import java.nio.charset.StandardCharsets;
 
 /**
@@ -34,8 +34,8 @@
 public class TextCodec implements HttpMessageCodec<byte[], OutputStream> {
 
     @Override
-    public Object decode(byte[] body, Class<?> targetType, Type type) throws Exception {
-        return DataParseUtils.stringTypeConvert(targetType, new String(body, StandardCharsets.UTF_8));
+    public Object decode(byte[] body, ArgInfo argInfo) throws Exception {
+        return DataParseUtils.stringTypeConvert(argInfo.getParamType(), new String(body, StandardCharsets.UTF_8));
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/XMLCodec.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.metadata.rest.ArgInfo;
 import org.apache.dubbo.metadata.rest.media.MediaType;
 import org.apache.dubbo.rpc.protocol.rest.message.HttpMessageCodec;
 import org.apache.dubbo.rpc.protocol.rest.message.MediaTypeMatcher;
@@ -31,7 +32,6 @@
 
 import java.io.OutputStream;
 import java.io.StringReader;
-import java.lang.reflect.Type;
 
 import org.xml.sax.InputSource;
 
@@ -42,7 +42,7 @@
 public class XMLCodec implements HttpMessageCodec<byte[], OutputStream> {
 
     @Override
-    public Object decode(byte[] body, Class<?> targetType, Type type) throws Exception {
+    public Object decode(byte[] body, ArgInfo argInfo) throws Exception {
 
         SAXParserFactory spf = SAXParserFactory.newInstance();
         spf.setFeature("http://xml.org/sax/features/external-general-entities", false);
@@ -53,7 +53,7 @@ public Object decode(byte[] body, Class<?> targetType, Type type) throws Excepti
         Source xmlSource =
                 new SAXSource(spf.newSAXParser().getXMLReader(), new InputSource(new StringReader(new String(body))));
 
-        JAXBContext context = JAXBContext.newInstance(targetType);
+        JAXBContext context = JAXBContext.newInstance(argInfo.getParamType());
         Unmarshaller unmarshaller = context.createUnmarshaller();
         return unmarshaller.unmarshal(xmlSource);
     }

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/PerformanceClientTest.java
Patch:
@@ -237,12 +237,12 @@ public PeformanceTestHandler() {
 
         @Override
         public void connected(Channel channel) throws RemotingException {
-            System.out.println("connected event,chanel;" + channel);
+            System.out.println("connected event,channel;" + channel);
         }
 
         @Override
         public void disconnected(Channel channel) throws RemotingException {
-            System.out.println("disconnected event,chanel;" + channel);
+            System.out.println("disconnected event,channel;" + channel);
         }
     }
 }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
Patch:
@@ -318,7 +318,7 @@ private static boolean isInstancesOverLimit(
             // client side error
             throw new IllegalStateException("interface " + interfaceClass
                     + " `s callback instances num exceed providers limit :" + limit + " ,current num: " + (count + 1)
-                    + ". The new callback service will not work !!! you can cancle the callback service which exported before. channel :"
+                    + ". The new callback service will not work !!! you can cancel the callback service which exported before. channel :"
                     + channel);
         } else {
             return false;

File: dubbo-rpc/dubbo-rpc-injvm/src/test/java/org/apache/dubbo/rpc/protocol/injvm/InjvmClassLoaderTest.java
Patch:
@@ -133,7 +133,7 @@ void testDifferentClassLoaderRequest() throws Exception {
         Assertions.assertEquals(resultClazzCustom3, result1.getClass());
         Assertions.assertNotEquals(classLoader2, result1.getClass().getClassLoader());
 
-        // invoke reqeust param should load from classLoader1 ( provider side classLoader )
+        // invoke request param should load from classLoader1 ( provider side classLoader )
         Assertions.assertEquals(
                 classLoader1, innerRequestReference.get().getClass().getClassLoader());
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/DubboBootstrapTest.java
Patch:
@@ -514,6 +514,7 @@ void testDefaultTriple() {
         Assertions.assertFalse(tripleConfig.getEnablePushOrDefault());
         Assertions.assertEquals(Integer.MAX_VALUE, tripleConfig.getMaxConcurrentStreamsOrDefault());
         Assertions.assertEquals(1 << 23, tripleConfig.getInitialWindowSizeOrDefault());
+        Assertions.assertEquals(1 << 16, tripleConfig.getConnectionInitialWindowSizeOrDefault());
         Assertions.assertEquals(1 << 23, tripleConfig.getMaxFrameSizeOrDefault());
         Assertions.assertEquals(1 << 15, tripleConfig.getMaxHeaderListSizeOrDefault());
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Constants.java
Patch:
@@ -102,6 +102,7 @@ public interface Constants {
     String H2_SETTINGS_ENABLE_PUSH_KEY = "dubbo.rpc.tri.enable-push";
     String H2_SETTINGS_MAX_CONCURRENT_STREAMS_KEY = "dubbo.rpc.tri.max-concurrent-streams";
     String H2_SETTINGS_INITIAL_WINDOW_SIZE_KEY = "dubbo.rpc.tri.initial-window-size";
+    String H2_SETTINGS_CONNECTION_INITIAL_WINDOW_SIZE_KEY = "dubbo.rpc.tri.connection-initial-window-size";
     String H2_SETTINGS_MAX_FRAME_SIZE_KEY = "dubbo.rpc.tri.max-frame-size";
     String H2_SETTINGS_MAX_HEADER_LIST_SIZE_KEY = "dubbo.rpc.tri.max-header-list-size";
 

File: dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/spi/AccessKeyStorage.java
Patch:
@@ -18,14 +18,15 @@
 
 import org.apache.dubbo.auth.model.AccessKeyPair;
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.rpc.Invocation;
 
 /**
  * This SPI Extension support us to store our {@link AccessKeyPair} or load {@link AccessKeyPair} from other
  * storage, such as filesystem.
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface AccessKeyStorage {
 
     /**

File: dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/spi/Authenticator.java
Patch:
@@ -18,10 +18,11 @@
 
 import org.apache.dubbo.auth.exception.RpcAuthenticationException;
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.rpc.Invocation;
 
-@SPI("accessKey")
+@SPI(scope = ExtensionScope.FRAMEWORK, value = "basic")
 public interface Authenticator {
 
     /**

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -50,7 +50,6 @@
 import static org.apache.dubbo.config.Constants.CLIENT_THREAD_POOL_NAME;
 import static org.apache.dubbo.config.Constants.SERVER_THREAD_POOL_NAME;
 import static org.apache.dubbo.rpc.Constants.H2_SETTINGS_IGNORE_1_0_0_KEY;
-import static org.apache.dubbo.rpc.Constants.H2_SETTINGS_PASS_THROUGH_STANDARD_HTTP_HEADERS;
 import static org.apache.dubbo.rpc.Constants.H2_SETTINGS_RESOLVE_FALLBACK_TO_DEFAULT_KEY;
 import static org.apache.dubbo.rpc.Constants.H2_SETTINGS_SUPPORT_NO_LOWER_HEADER_KEY;
 import static org.apache.dubbo.rpc.Constants.H2_SETTINGS_VERBOSE_ENABLED;
@@ -65,7 +64,6 @@ public class TripleProtocol extends AbstractProtocol {
     public static boolean CONVERT_NO_LOWER_HEADER = false;
     public static boolean IGNORE_1_0_0_VERSION = false;
     public static boolean RESOLVE_FALLBACK_TO_DEFAULT = true;
-    public static boolean PASS_THROUGH_STANDARD_HTTP_HEADERS = false;
     public static boolean VERBOSE_ENABLED = false;
 
     public TripleProtocol(FrameworkModel frameworkModel) {
@@ -80,7 +78,6 @@ public TripleProtocol(FrameworkModel frameworkModel) {
         CONVERT_NO_LOWER_HEADER = conf.getBoolean(H2_SETTINGS_SUPPORT_NO_LOWER_HEADER_KEY, true);
         IGNORE_1_0_0_VERSION = conf.getBoolean(H2_SETTINGS_IGNORE_1_0_0_KEY, false);
         RESOLVE_FALLBACK_TO_DEFAULT = conf.getBoolean(H2_SETTINGS_RESOLVE_FALLBACK_TO_DEFAULT_KEY, true);
-        PASS_THROUGH_STANDARD_HTTP_HEADERS = conf.getBoolean(H2_SETTINGS_PASS_THROUGH_STANDARD_HTTP_HEADERS, false);
 
         // init global settings
         Configuration globalConf = ConfigurationUtils.getGlobalConfiguration(frameworkModel.defaultApplication());

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -629,6 +629,8 @@ public interface CommonConstants {
 
     String EXT_PROTOCOL = "ext.protocol";
 
+    String PREFERRED_PROTOCOL = "preferred.protocol";
+
     String IS_EXTRA = "isExtra";
 
     String ZOOKEEPER_ENSEMBLE_TRACKER_KEY = "zookeeper.ensemble.tracker";

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/AbstractConfigManager.java
Patch:
@@ -558,7 +558,7 @@ public <T extends AbstractConfig> List<T> loadConfigsOfTypeFromProps(Class<T> cl
                     config.refresh();
                 } catch (Exception e) {
                     throw new IllegalStateException(
-                            "create default config instance failed, type:" + cls.getSimpleName());
+                            "create default config instance failed, type:" + cls.getSimpleName(), e);
                 }
 
                 this.addConfig(config);

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/HttpHeaderNames.java
Patch:
@@ -46,7 +46,7 @@ public enum HttpHeaderNames {
 
     TE(io.netty.handler.codec.http.HttpHeaderNames.TE),
 
-    ALT_SVC(io.netty.handler.codec.http.HttpHeaderNames.ALT_SVC);
+    ALT_SVC("alt-svc");
 
     private final String name;
     private final CharSequence key;

File: dubbo-maven-plugin/src/main/java/org/apache/dubbo/maven/plugin/protoc/WinDubboProtocPluginWrapper.java
Patch:
@@ -56,7 +56,7 @@ public File createProtocPlugin(DubboProtocPlugin dubboProtocPlugin, Log log) {
                 "jre/bin/client/jvm.dll",
                 "bin/client/jvm.dll");
         final File winRun4JIniFile =
-                new File(dubboProtocPlugin.getPluginDirectory(), dubboProtocPlugin.getId() + ".ini");
+                new File(dubboProtocPlugin.getPluginDirectory(), "protoc-gen-" + dubboProtocPlugin.getId() + ".ini");
 
         if (winJvmDataModel != null) {
             if (!(winJvmDataModel.equals(WIN_JVM_DATA_MODEL_32) || winJvmDataModel.equals(WIN_JVM_DATA_MODEL_64))) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultMetricsServiceExporter.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.concurrent.ExecutorService;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_METRICS_COLLECTOR_EXCEPTION;
+import static org.apache.dubbo.common.constants.MetricsConstants.PROTOCOL_DEFAULT;
 import static org.apache.dubbo.common.constants.MetricsConstants.PROTOCOL_PROMETHEUS;
 
 /**
@@ -56,7 +57,7 @@ private void initialize() {
         // TODO compatible with old usage of metrics, remove protocol check after new metrics is ready for use.
         if (metricsConfig != null && metricsService == null) {
             String protocol = Optional.ofNullable(metricsConfig.getProtocol()).orElse(PROTOCOL_PROMETHEUS);
-            if (PROTOCOL_PROMETHEUS.equals(protocol)) {
+            if (PROTOCOL_DEFAULT.equals(protocol) || PROTOCOL_PROMETHEUS.equals(protocol)) {
                 this.metricsService = applicationModel
                         .getExtensionLoader(MetricsService.class)
                         .getDefaultExtension();

File: dubbo-metrics/dubbo-metrics-config-center/src/main/java/org/apache/dubbo/metrics/config/collector/ConfigCenterMetricsCollector.java
Patch:
@@ -68,7 +68,7 @@ public boolean isCollectEnabled() {
             ConfigManager configManager = applicationModel.getApplicationConfigManager();
             configManager.getMetrics().ifPresent(metricsConfig -> setCollectEnabled(metricsConfig.getEnableMetadata()));
         }
-        return Optional.ofNullable(collectEnabled).orElse(true);
+        return Optional.ofNullable(collectEnabled).orElse(false);
     }
 
     public void increase(String key, String group, String protocol, String changeTypeName, int size) {

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/AggregateMetricsCollector.java
Patch:
@@ -121,7 +121,7 @@ public boolean isCollectEnabled() {
                     .ifPresent(metricsConfig ->
                             setCollectEnabled(metricsConfig.getAggregation().getEnabled()));
         }
-        return Optional.ofNullable(collectEnabled).orElse(true);
+        return Optional.ofNullable(collectEnabled).orElse(false);
     }
 
     @Override

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/collector/AggregateMetricsCollectorTest.java
Patch:
@@ -110,6 +110,7 @@ public void setup() {
         aggregationConfig.setBucketNum(12);
         aggregationConfig.setTimeWindowSeconds(120);
         metricsConfig.setAggregation(aggregationConfig);
+        metricsConfig.setEnableRpc(true);
         applicationModel.getApplicationConfigManager().setMetrics(metricsConfig);
         metricsDispatcher = applicationModel.getBeanFactory().getOrRegisterBean(MetricsDispatcher.class);
         defaultCollector = applicationModel.getBeanFactory().getBean(DefaultMetricsCollector.class);

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/collector/MetadataMetricsCollector.java
Patch:
@@ -84,7 +84,7 @@ public boolean isCollectEnabled() {
             ConfigManager configManager = applicationModel.getApplicationConfigManager();
             configManager.getMetrics().ifPresent(metricsConfig -> setCollectEnabled(metricsConfig.getEnableMetadata()));
         }
-        return Optional.ofNullable(collectEnabled).orElse(true);
+        return Optional.ofNullable(collectEnabled).orElse(false);
     }
 
     @Override

File: dubbo-metrics/dubbo-metrics-netty/src/main/java/org/apache/dubbo/metrics/registry/collector/NettyMetricsCollector.java
Patch:
@@ -78,7 +78,7 @@ public boolean isCollectEnabled() {
             ConfigManager configManager = applicationModel.getApplicationConfigManager();
             configManager.getMetrics().ifPresent(metricsConfig -> setCollectEnabled(metricsConfig.getEnableNetty()));
         }
-        return Optional.ofNullable(collectEnabled).orElse(true);
+        return Optional.ofNullable(collectEnabled).orElse(false);
     }
 
     @Override

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/collector/RegistryMetricsCollector.java
Patch:
@@ -100,7 +100,7 @@ public boolean isCollectEnabled() {
             ConfigManager configManager = applicationModel.getApplicationConfigManager();
             configManager.getMetrics().ifPresent(metricsConfig -> setCollectEnabled(metricsConfig.getEnableRegistry()));
         }
-        return Optional.ofNullable(collectEnabled).orElse(true);
+        return Optional.ofNullable(collectEnabled).orElse(false);
     }
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -70,9 +70,8 @@ public class MetadataUtils {
     public static void publishServiceDefinition(
             URL url, ServiceDescriptor serviceDescriptor, ApplicationModel applicationModel) {
         if (getMetadataReports(applicationModel).isEmpty()) {
-            String msg =
-                    "Remote Metadata Report Server is not provided or unavailable, will stop registering service definition to remote center!";
-            logger.warn(REGISTRY_FAILED_LOAD_METADATA, "", "", msg);
+            logger.info("Remote Metadata Report Server is not provided or unavailable, "
+                    + "will stop registering service definition to remote center!");
             return;
         }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/grpc/GrpcHttp2ServerTransportListenerFactory.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.remoting.http12.h2.Http2ServerTransportListenerFactory;
 import org.apache.dubbo.remoting.http12.h2.Http2TransportListener;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-import org.apache.dubbo.rpc.protocol.tri.TripleHeaderEnum;
 
 public class GrpcHttp2ServerTransportListenerFactory implements Http2ServerTransportListenerFactory {
 
@@ -32,6 +31,6 @@ public Http2TransportListener newInstance(H2StreamChannel streamChannel, URL url
 
     @Override
     public boolean supportContentType(String contentType) {
-        return contentType != null && contentType.startsWith(TripleHeaderEnum.APPLICATION_GRPC.getHeader());
+        return GrpcUtils.isGrpcRequest(contentType);
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/grpc/GrpcRequestHandlerMapping.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dubbo.remoting.http12.HttpStatus;
 import org.apache.dubbo.remoting.http12.exception.HttpStatusException;
 import org.apache.dubbo.remoting.http12.message.HttpMessageCodec;
-import org.apache.dubbo.remoting.http12.message.MediaType;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.PathResolver;
 import org.apache.dubbo.rpc.model.FrameworkModel;
@@ -49,8 +48,7 @@ public GrpcRequestHandlerMapping(FrameworkModel frameworkModel) {
 
     @Override
     public RequestHandler getRequestHandler(URL url, HttpRequest request, HttpResponse response) {
-        String contentType = request.contentType();
-        if (contentType == null || !contentType.startsWith(MediaType.APPLICATION_GRPC.getName())) {
+        if (!GrpcUtils.isGrpcRequest(request.contentType())) {
             return null;
         }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h3/negotiation/Helper.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.api.connection.AbstractConnectionClient;
 import org.apache.dubbo.remoting.exchange.PortUnificationExchanger;
-import org.apache.dubbo.remoting.transport.netty4.AbstractNettyConnectionClient;
 import org.apache.dubbo.remoting.transport.netty4.NettyHttp3ConnectionClient;
 import org.apache.dubbo.rpc.protocol.tri.ExceptionUtils;
 
@@ -33,7 +32,7 @@ public static AbstractConnectionClient createAutoSwitchClient(URL url, ChannelHa
         return new AutoSwitchConnectionClient(url, PortUnificationExchanger.connect(url, handler));
     }
 
-    public static AbstractNettyConnectionClient createHttp3Client(URL url, ChannelHandler handler) {
+    public static AbstractConnectionClient createHttp3Client(URL url, ChannelHandler handler) {
         try {
             return new NettyHttp3ConnectionClient(url, handler);
         } catch (RemotingException e) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/util/RequestUtils.java
Patch:
@@ -42,6 +42,8 @@
 
 public final class RequestUtils {
 
+    public static final String EMPTY_BODY = "";
+
     private RequestUtils() {}
 
     public static boolean isMultiPart(HttpRequest request) {
@@ -185,7 +187,7 @@ public static Object decodeBody(HttpRequest request, Type type) {
                 if (type instanceof Class) {
                     Class<?> clazz = (Class<?>) type;
                     if (clazz == String.class) {
-                        return StringUtils.EMPTY_STRING;
+                        return EMPTY_BODY;
                     }
                     if (clazz == byte[].class) {
                         return new byte[0];

File: dubbo-spring-boot/dubbo-spring-boot-3-autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/DubboTriple3AutoConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public class DubboTriple3AutoConfiguration {
     @Configuration(proxyBeanMethods = false)
     @ConditionalOnClass(Filter.class)
     @ConditionalOnWebApplication(type = Type.SERVLET)
-    @ConditionalOnProperty(prefix = PREFIX, name = "enable")
+    @ConditionalOnProperty(prefix = PREFIX, name = "enabled")
     public static class TripleServletConfiguration {
 
         @Bean

File: dubbo-spring-boot/dubbo-spring-boot-autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/DubboTripleAutoConfiguration.java
Patch:
@@ -40,7 +40,7 @@ public class DubboTripleAutoConfiguration {
     @Configuration(proxyBeanMethods = false)
     @ConditionalOnClass(Filter.class)
     @ConditionalOnWebApplication(type = Type.SERVLET)
-    @ConditionalOnProperty(prefix = PREFIX, name = "enable")
+    @ConditionalOnProperty(prefix = PREFIX, name = "enabled")
     public static class TripleServletConfiguration {
 
         @Bean

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -635,6 +635,8 @@ public interface CommonConstants {
 
     String DUBBO_VERSIONS_KEY = "META-INF/dubbo-versions";
 
+    String TRIPLE_PREFIX = "triple.";
+
     /**
      * System-related VM properties
      */

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/netty4/h1/NettyHttp1Channel.java
Patch:
@@ -56,8 +56,8 @@ public CompletableFuture<Void> writeMessage(HttpOutputMessage httpOutputMessage)
 
     @Override
     public HttpOutputMessage newOutputMessage() {
-        return new Http1OutputMessage(
-                new LimitedByteBufOutputStream(channel.alloc().buffer(), tripleConfig.getMaxResponseBodySize()));
+        return new Http1OutputMessage(new LimitedByteBufOutputStream(
+                channel.alloc().buffer(), tripleConfig.getMaxResponseBodySizeOrDefault()));
     }
 
     @Override

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/netty4/h2/NettyH2StreamChannel.java
Patch:
@@ -63,7 +63,7 @@ public CompletableFuture<Void> writeMessage(HttpOutputMessage httpOutputMessage)
     public Http2OutputMessage newOutputMessage(boolean endStream) {
         ByteBuf buffer = http2StreamChannel.alloc().buffer();
         ByteBufOutputStream outputStream =
-                new LimitedByteBufOutputStream(buffer, tripleConfig.getMaxResponseBodySize());
+                new LimitedByteBufOutputStream(buffer, tripleConfig.getMaxResponseBodySizeOrDefault());
         return new Http2OutputMessageFrame(outputStream, endStream);
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TriHttp2RemoteFlowController.java
Patch:
@@ -82,7 +82,7 @@ public TriHttp2RemoteFlowController(
             TripleConfig config) {
         this.connection = checkNotNull(connection, "connection");
         this.streamByteDistributor = checkNotNull(streamByteDistributor, "streamWriteDistributor");
-        this.initialWindowSize = config.getInitialWindowSize();
+        this.initialWindowSize = config.getInitialWindowSizeOrDefault();
 
         // Add a flow state for the connection.
         stateKey = connection.newKey();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/mapping/ContentNegotiator.java
Patch:
@@ -30,6 +30,8 @@
 import java.util.List;
 import java.util.Map;
 
+import static org.apache.dubbo.config.nested.RestConfig.DEFAULT_FORMAT_PARAMETER_NAME;
+
 public class ContentNegotiator {
 
     private final FrameworkModel frameworkModel;
@@ -119,7 +121,7 @@ public String getParameterName() {
         String parameterName = this.parameterName;
         if (parameterName == null) {
             Configuration conf = ConfigurationUtils.getGlobalConfiguration(frameworkModel.defaultApplication());
-            parameterName = conf.getString(RestConstants.FORMAT_PARAMETER_NAME_KEY, "format");
+            parameterName = conf.getString(RestConstants.FORMAT_PARAMETER_NAME_KEY, DEFAULT_FORMAT_PARAMETER_NAME);
             this.parameterName = parameterName;
         }
         return parameterName;

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/util/CuratorFrameworkUtils.java
Patch:
@@ -43,7 +43,6 @@
 
 import static org.apache.curator.x.discovery.ServiceInstance.builder;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_SEPARATOR;
-import static org.apache.dubbo.common.constants.CommonConstants.ZOOKEEPER_ENSEMBLE_TRACKER_KEY;
 import static org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery.DEFAULT_GROUP;
 import static org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams.BASE_SLEEP_TIME;
 import static org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams.BLOCK_UNTIL_CONNECTED_UNIT;
@@ -70,10 +69,8 @@ public static ServiceDiscovery<ZookeeperInstance> buildServiceDiscovery(
 
     public static CuratorFramework buildCuratorFramework(URL connectionURL, ZookeeperServiceDiscovery serviceDiscovery)
             throws Exception {
-        boolean ensembleTracker = connectionURL.getParameter(ZOOKEEPER_ENSEMBLE_TRACKER_KEY, true);
         CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()
                 .connectString(connectionURL.getBackupAddress())
-                .ensembleTracker(ensembleTracker)
                 .retryPolicy(buildRetryPolicy(connectionURL));
         String userInformation = connectionURL.getUserInformation();
         if (StringUtils.isNotEmpty(userInformation)) {

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/netty/RestHttpRequestDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageDecoder;
-import io.netty.handler.codec.http.HttpHeaders;
+import io.netty.handler.codec.http.HttpUtil;
 
 import static org.apache.dubbo.config.Constants.SERVER_THREAD_POOL_NAME;
 
@@ -56,8 +56,7 @@ public RestHttpRequestDecoder(URL url, ServiceDeployer serviceDeployer) {
     protected void decode(
             ChannelHandlerContext ctx, io.netty.handler.codec.http.FullHttpRequest request, List<Object> out)
             throws Exception {
-        boolean keepAlive = HttpHeaders.isKeepAlive(request);
-
+        boolean keepAlive = HttpUtil.isKeepAlive(request);
         NettyHttpResponse nettyHttpResponse = new NettyHttpResponse(ctx, keepAlive, url);
         NettyRequestFacade requestFacade = new NettyRequestFacade(request, ctx, serviceDeployer);
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/Pair.java
Patch:
@@ -32,8 +32,8 @@ public final class Pair<L, R> implements Map.Entry<L, R>, Comparable<Pair<L, R>>
     @SuppressWarnings("rawtypes")
     private static final Pair NULL = new Pair<>(null, null);
 
-    public final L left;
-    public final R right;
+    private final L left;
+    private final R right;
 
     public static <L, R> Pair<L, R> of(L left, R right) {
         return left == null && right == null ? nullPair() : new Pair<>(left, right);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractEndpoint.java
Patch:
@@ -49,6 +49,8 @@ public AbstractEndpoint(URL url, ChannelHandler handler) {
                 url.getPositiveParameter(Constants.CONNECT_TIMEOUT_KEY, Constants.DEFAULT_CONNECT_TIMEOUT);
     }
 
+    protected AbstractEndpoint() {}
+
     protected static Codec2 getChannelCodec(URL url) {
         String codecName = url.getParameter(Constants.CODEC_KEY);
         if (StringUtils.isEmpty(codecName)) {

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/AbstractServerHttpChannelObserver.java
Patch:
@@ -225,7 +225,7 @@ protected final HttpOutputMessage buildMessage(Object data) throws Throwable {
         }
         if (LOGGER.isDebugEnabled()) {
             try {
-                LOGGER.debug("Http response body is: '{}'", JsonUtils.toJson(data));
+                LOGGER.debug("Http response body sent: '{}' by [{}]", JsonUtils.toJson(data), httpChannel);
             } catch (Throwable ignored) {
             }
         }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/CompositeInputStream.java
Patch:
@@ -32,9 +32,9 @@ public class CompositeInputStream extends InputStream {
     private int readIndex = 0;
 
     public void addInputStream(InputStream inputStream) {
-        this.inputStreams.offer(inputStream);
+        inputStreams.offer(inputStream);
         try {
-            this.totalAvailable += inputStream.available();
+            totalAvailable += inputStream.available();
         } catch (IOException e) {
             throw new DecodeException(e);
         }

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyConnectionClient.java
Patch:
@@ -71,7 +71,7 @@ protected void initBootstrap() {
             @Override
             protected void initChannel(SocketChannel ch) {
                 NettyChannel nettyChannel = NettyChannel.getOrAddChannel(ch, getUrl(), getChannelHandler());
-                final ChannelPipeline pipeline = ch.pipeline();
+                ChannelPipeline pipeline = ch.pipeline();
                 NettySslContextOperator nettySslContextOperator = new NettySslContextOperator();
 
                 if (sslContext != null) {

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyPortUnificationServerHandler.java
Patch:
@@ -183,8 +183,7 @@ private void detectProtocol(ChannelHandlerContext ctx, URL url, NettyChannel cha
         }
         byte[] preface = new byte[in.readableBytes()];
         in.readBytes(preface);
-        Set<String> supported =
-                url.getApplicationModel().getExtensionLoader(WireProtocol.class).getSupportedExtensions();
+        Set<String> supported = url.getApplicationModel().getSupportedExtensions(WireProtocol.class);
         LOGGER.error(
                 INTERNAL_ERROR,
                 "unknown error in remoting module",

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Constants.java
Patch:
@@ -108,6 +108,7 @@ public interface Constants {
     String H2_SETTINGS_VERBOSE_ENABLED = "dubbo.protocol.triple.verbose";
     String H2_SETTINGS_SERVLET_ENABLED = "dubbo.protocol.triple.servlet.enabled";
     String H3_SETTINGS_HTTP3_ENABLED = "dubbo.protocol.triple.http3.enabled";
+    String H3_SETTINGS_HTTP3_NEGOTIATION = "dubbo.protocol.triple.http3.negotiation";
 
     String ADAPTIVE_LOADBALANCE_ATTACHMENT_KEY = "lb_adaptive";
     String ADAPTIVE_LOADBALANCE_START_TIME = "adaptive_startTime";

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleConstant.java
Patch:
@@ -23,7 +23,6 @@ public class TripleConstant {
     public static final String DEFAULT_VERSION = "1.0.0";
 
     public static final String SERIALIZATION_KEY = "serialization";
-    public static final String TE_KEY = "te";
 
     public static final String HESSIAN4 = "hessian4";
     public static final String HESSIAN2 = "hessian2";

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/http1/DefaultHttp11ServerTransportListener.java
Patch:
@@ -37,8 +37,8 @@
 import org.apache.dubbo.rpc.executor.ExecutorSupport;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.MethodDescriptor;
+import org.apache.dubbo.rpc.protocol.tri.Http3Exchanger;
 import org.apache.dubbo.rpc.protocol.tri.RpcInvocationBuildContext;
-import org.apache.dubbo.rpc.protocol.tri.TripleProtocol;
 import org.apache.dubbo.rpc.protocol.tri.h12.AbstractServerTransportListener;
 import org.apache.dubbo.rpc.protocol.tri.h12.DefaultHttpMessageListener;
 import org.apache.dubbo.rpc.protocol.tri.h12.HttpMessageListener;
@@ -113,7 +113,7 @@ protected void onError(Throwable throwable) {
 
     @Override
     protected void initializeAltSvc(URL url) {
-        String protocolId = TripleProtocol.isHttp3Enabled(url) ? "h3" : "h2";
+        String protocolId = Http3Exchanger.isEnabled(url) ? "h3" : "h2";
         int bindPort = url.getParameter(Constants.BIND_PORT_KEY, url.getPort());
         serverChannelObserver.setAltSvc(protocolId + "=\":" + bindPort + "\"");
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/http2/GenericHttp2ServerTransportListener.java
Patch:
@@ -38,8 +38,8 @@
 import org.apache.dubbo.rpc.executor.ExecutorSupport;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.MethodDescriptor;
+import org.apache.dubbo.rpc.protocol.tri.Http3Exchanger;
 import org.apache.dubbo.rpc.protocol.tri.RpcInvocationBuildContext;
-import org.apache.dubbo.rpc.protocol.tri.TripleProtocol;
 import org.apache.dubbo.rpc.protocol.tri.h12.AbstractServerTransportListener;
 import org.apache.dubbo.rpc.protocol.tri.h12.BiStreamServerCallListener;
 import org.apache.dubbo.rpc.protocol.tri.h12.HttpMessageListener;
@@ -150,7 +150,7 @@ private BiStreamServerCallListener startBiStreaming(
 
     @Override
     protected void initializeAltSvc(URL url) {
-        if (TripleProtocol.isHttp3Enabled(url)) {
+        if (Http3Exchanger.isEnabled(url)) {
             int bindPort = url.getParameter(Constants.BIND_PORT_KEY, url.getPort());
             serverChannelObserver.setAltSvc("h3=\":" + bindPort + "\"");
         }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h3/Http3ClientStreamFactory.java
Patch:
@@ -27,8 +27,6 @@
 
 import java.util.concurrent.Executor;
 
-import io.netty.channel.Channel;
-
 @Activate(order = -100, onClass = "io.netty.incubator.codec.quic.QuicChannel")
 public class Http3ClientStreamFactory implements ClientStreamFactory {
 
@@ -41,7 +39,7 @@ public ClientStream createClientStream(
             TripleWriteQueue writeQueue) {
         if (client instanceof NettyHttp3ConnectionClient) {
             return new Http3TripleClientStream(
-                    frameworkModel, executor, (Channel) client.getChannel(true), clientCall, writeQueue);
+                    frameworkModel, executor, client.getChannel(true), clientCall, writeQueue);
         }
         return null;
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/argument/GeneralTypeConverter.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.io.StreamUtils;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.utils.ClassUtils;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.DateUtils;
 import org.apache.dubbo.common.utils.JsonUtils;
@@ -260,7 +261,7 @@ private <T> Object doConvert(Object source, Class<T> targetClass) throws Excepti
                 case "java.util.regex.Pattern":
                     return Pattern.compile(str);
                 case "java.lang.Class":
-                    return TypeUtils.loadClass(str);
+                    return ClassUtils.loadClass(str);
                 case "[B":
                     return str.getBytes(UTF_8);
                 case "[C":

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/filter/RestExtensionExecutionFilter.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ArrayUtils;
+import org.apache.dubbo.common.utils.ClassUtils;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.remoting.http12.HttpRequest;
@@ -42,7 +43,6 @@
 import org.apache.dubbo.rpc.protocol.tri.rest.mapping.RadixTree;
 import org.apache.dubbo.rpc.protocol.tri.rest.mapping.RadixTree.Match;
 import org.apache.dubbo.rpc.protocol.tri.rest.util.RestUtils;
-import org.apache.dubbo.rpc.protocol.tri.rest.util.TypeUtils;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -207,7 +207,7 @@ private RestFilter[] loadFilters(URL url) {
         InstantiationStrategy strategy = new InstantiationStrategy(() -> applicationModel);
         for (String className : StringUtils.tokenize(extensionConfig)) {
             try {
-                Object extension = strategy.instantiate(TypeUtils.loadClass(className));
+                Object extension = strategy.instantiate(ClassUtils.loadClass(className));
                 if (extension instanceof ExtensionAccessorAware) {
                     ((ExtensionAccessorAware) extension).setExtensionAccessor(applicationModel);
                 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/mapping/RadixTree.java
Patch:
@@ -56,7 +56,7 @@ public T addPath(PathExpression path, T value) {
         if (path.isDirect()) {
             KeyString key = new KeyString(path.getPath(), caseSensitive);
             List<Match<T>> matches = directPathMap.computeIfAbsent(key, k -> new ArrayList<>());
-            for (int i = 0, len = matches.size(); i < len; i++) {
+            for (int i = 0, size = matches.size(); i < size; i++) {
                 Match<T> match = matches.get(i);
                 if (match.getValue().equals(value)) {
                     return match.getValue();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/mapping/meta/AnnotationEnum.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.rpc.protocol.tri.rest.mapping.meta;
 
-import org.apache.dubbo.rpc.protocol.tri.rest.util.TypeUtils;
+import org.apache.dubbo.common.utils.ClassUtils;
 
 import java.lang.annotation.Annotation;
 
@@ -29,7 +29,7 @@ public interface AnnotationEnum {
 
     default Class<Annotation> loadType() {
         try {
-            return (Class) TypeUtils.loadClass(className());
+            return (Class) ClassUtils.loadClass(className());
         } catch (Throwable t) {
             return (Class) NotFound.class;
         }

File: dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/restclient/URLConnectionRestClient.java
Patch:
@@ -47,7 +47,6 @@ public CompletableFuture<RestResult> send(RequestTemplate requestTemplate) {
 
         try {
             HttpURLConnection connection = (HttpURLConnection) new URL(requestTemplate.getURL()).openConnection();
-            requestTemplate.addHeader("connection", "close");
             connection.setConnectTimeout(clientConfig.getConnectTimeout());
             connection.setReadTimeout(clientConfig.getReadTimeout());
             connection.setRequestMethod(requestTemplate.getHttpMethod());

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/netty/RestHttpRequestDecoder.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
 import org.apache.dubbo.common.utils.ExecutorUtil;
-import org.apache.dubbo.rpc.protocol.rest.RestHeaderEnum;
 import org.apache.dubbo.rpc.protocol.rest.deploy.ServiceDeployer;
 import org.apache.dubbo.rpc.protocol.rest.handler.NettyHttpHandler;
 import org.apache.dubbo.rpc.protocol.rest.request.NettyRequestFacade;
@@ -74,7 +73,6 @@ protected void decode(
             } finally {
                 // write response
                 try {
-                    nettyHttpResponse.addOutputHeaders(RestHeaderEnum.CONNECTION.getHeader(), "close");
                     nettyHttpResponse.finish();
                 } catch (IOException e) {
                     logger.error(

File: dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/restclient/URLConnectionRestClient.java
Patch:
@@ -47,6 +47,7 @@ public CompletableFuture<RestResult> send(RequestTemplate requestTemplate) {
 
         try {
             HttpURLConnection connection = (HttpURLConnection) new URL(requestTemplate.getURL()).openConnection();
+            requestTemplate.addHeader("connection", "close");
             connection.setConnectTimeout(clientConfig.getConnectTimeout());
             connection.setReadTimeout(clientConfig.getReadTimeout());
             connection.setRequestMethod(requestTemplate.getHttpMethod());

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/netty/ChunkOutputStream.java
Patch:
@@ -80,7 +80,7 @@ public void flush() throws IOException {
         int readable = buffer.readableBytes();
         if (readable == 0) return;
         if (!response.isCommitted()) response.prepareChunkStream();
-        ctx.writeAndFlush(new DefaultHttpContent(buffer.copy()));
+        ctx.write(new DefaultHttpContent(buffer.copy()));
         buffer.clear();
         super.flush();
     }

File: dubbo-plugin/dubbo-triple-servlet/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/servlet/FilterAdapter.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dubbo.rpc.protocol.tri.rest.util.RestUtils;
 
 import javax.servlet.Filter;
+import javax.servlet.FilterConfig;
 import javax.servlet.ServletException;
 import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
@@ -53,7 +54,7 @@ public boolean accept(Object extension) {
     public RestFilter adapt(Filter extension) {
         try {
             String filterName = extension.getClass().getSimpleName();
-            extension.init(adapterFactory.adaptFilterConfig(filterName));
+            extension.init((FilterConfig) adapterFactory.adaptFilterConfig(filterName));
         } catch (ServletException e) {
             throw new RestException(e);
         }

File: dubbo-plugin/dubbo-triple-servlet/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/servlet/ServletHttpRequestAdapter.java
Patch:
@@ -236,7 +236,7 @@ public Collection<Part> getParts() {
     }
 
     @Override
-    public Part getPart(String name) {
+    public FileUploadPart getPart(String name) {
         return Helper.convert(part(name));
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/CancelableStreamObserver.java
Patch:
@@ -36,7 +36,7 @@ public void cancel(Throwable throwable) {
         cancellationContext.cancel(throwable);
     }
 
-    public void beforeStart(final ClientCallToObserverAdapter<T> clientCallToObserverAdapter) {
+    public void beforeStart(ClientCallToObserverAdapter<T> clientCallToObserverAdapter) {
         // do nothing
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/DescriptorUtils.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dubbo.rpc.model.MethodDescriptor;
 import org.apache.dubbo.rpc.model.ProviderModel;
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
-import org.apache.dubbo.rpc.protocol.tri.TripleCustomerProtocolWapper.TripleRequestWrapper;
+import org.apache.dubbo.rpc.protocol.tri.TripleCustomerProtocolWrapper.TripleRequestWrapper;
 import org.apache.dubbo.rpc.service.ServiceDescriptorInternalCache;
 import org.apache.dubbo.rpc.stub.StubSuppliers;
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleCustomerProtocolWrapper.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.List;
 import java.util.Objects;
 
-public class TripleCustomerProtocolWapper {
+public class TripleCustomerProtocolWrapper {
 
     static int makeTag(int fieldNumber, int wireType) {
         return fieldNumber << 3 | wireType;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/TripleClientCall.java
Patch:
@@ -81,7 +81,7 @@ public void onMessage(byte[] message, boolean isReturnTriException) {
             return;
         }
         try {
-            final Object unpacked = requestMetadata.packableMethod.parseResponse(message, isReturnTriException);
+            Object unpacked = requestMetadata.packableMethod.parseResponse(message, isReturnTriException);
             listener.onMessage(unpacked, message.length);
         } catch (Throwable t) {
             TriRpcStatus status = TriRpcStatus.INTERNAL
@@ -95,7 +95,7 @@ public void onMessage(byte[] message, boolean isReturnTriException) {
                     "",
                     String.format(
                             "Failed to deserialize triple response, service=%s, method=%s,connection=%s",
-                            connectionClient, requestMetadata.service, requestMetadata.method.getMethodName()),
+                            requestMetadata.service, requestMetadata.service, requestMetadata.method.getMethodName()),
                     t);
         }
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/RestException.java
Patch:
@@ -47,13 +47,13 @@ public RestException(String message, Throwable cause) {
     public RestException(Messages message, Object... arguments) {
         super(message.statusCode(), message.format(arguments));
         this.message = message;
-        displayMessage = message.formatLocalized(arguments);
+        displayMessage = message.formatDisplay(arguments);
     }
 
     public RestException(Throwable cause, Messages message, Object... arguments) {
         super(message.statusCode(), message.format(arguments), ExceptionUtils.unwrap(cause));
         this.message = message;
-        displayMessage = message.formatLocalized(arguments);
+        displayMessage = message.formatDisplay(arguments);
     }
 
     public String getErrorCode() {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/argument/NamedValueArgumentResolverSupport.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.protocol.tri.rest.argument;
 
 import org.apache.dubbo.common.utils.CollectionUtils;
-import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.remoting.http12.HttpRequest;
 import org.apache.dubbo.remoting.http12.HttpResponse;
 import org.apache.dubbo.rpc.protocol.tri.rest.Messages;
@@ -58,8 +57,8 @@ protected final Object resolve(NamedValueMeta meta, HttpRequest request, HttpRes
     }
 
     protected final NamedValueMeta updateNamedValueMeta(ParameterMeta parameterMeta, NamedValueMeta meta) {
-        if (StringUtils.isEmpty(meta.name())) {
-            meta.setName(parameterMeta.getRequiredName());
+        if (meta.isNameEmpty()) {
+            meta.setName(parameterMeta.getName());
         }
 
         Class<?> type = parameterMeta.getActualType();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/mapping/meta/AnnotationSupport.java
Patch:
@@ -129,7 +129,7 @@ public final AnnotationMeta[] findAnnotations() {
         return arrayCache.computeIfAbsent(FIND_KEY, k -> {
             List<? extends AnnotatedElement> elements = getAnnotatedElements();
             List<AnnotationMeta> metas = new ArrayList<>();
-            for (int i = 0, len = elements.size(); i < len; i++) {
+            for (int i = 0, size = elements.size(); i < size; i++) {
                 AnnotatedElement element = elements.get(i);
                 Annotation[] annotations = element.getAnnotations();
                 for (Annotation annotation : annotations) {
@@ -146,7 +146,7 @@ public final AnnotationMeta[] findAnnotations() {
     public final <A extends Annotation> AnnotationMeta<A> findAnnotation(Class<A> annotationType) {
         return cache.computeIfAbsent(Pair.of(annotationType, FIND_KEY), k -> {
                     List<? extends AnnotatedElement> elements = getAnnotatedElements();
-                    for (int i = 0, len = elements.size(); i < len; i++) {
+                    for (int i = 0, size = elements.size(); i < size; i++) {
                         AnnotatedElement element = elements.get(i);
                         Annotation annotation = element.getDeclaredAnnotation(annotationType);
                         if (annotation != null) {
@@ -173,7 +173,7 @@ public final boolean isHierarchyAnnotated(AnnotationEnum annotationEnum) {
     public final <A extends Annotation> AnnotationMeta<A> findMergedAnnotation(Class<A> annotationType) {
         return cache.computeIfAbsent(Pair.of(annotationType, FIND_MERGED_KEY), k -> {
                     List<? extends AnnotatedElement> elements = getAnnotatedElements();
-                    for (int i = 0, len = elements.size(); i < len; i++) {
+                    for (int i = 0, size = elements.size(); i < size; i++) {
                         AnnotatedElement element = elements.get(i);
                         Annotation[] annotations = element.getDeclaredAnnotations();
                         for (Annotation annotation : annotations) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/mapping/meta/MethodMeta.java
Patch:
@@ -63,13 +63,13 @@ public void initParameters() {
 
         int count = rpcType == RpcType.SERVER_STREAM ? 1 : method.getParameterCount();
         List<List<Parameter>> parameterHierarchies = new ArrayList<>(count);
-        for (int i = 0, len = hierarchy.size(); i < len; i++) {
+        for (int i = 0, size = hierarchy.size(); i < size; i++) {
             Method m = hierarchy.get(i);
             Parameter[] mps = m.getParameters();
             for (int j = 0; j < count; j++) {
                 List<Parameter> parameterHierarchy;
                 if (parameterHierarchies.size() <= j) {
-                    parameterHierarchy = new ArrayList<>(len);
+                    parameterHierarchy = new ArrayList<>(size);
                     parameterHierarchies.add(parameterHierarchy);
                 } else {
                     parameterHierarchy = parameterHierarchies.get(j);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/basic/FallbackArgumentResolver.java
Patch:
@@ -122,7 +122,7 @@ protected Object resolveMapValue(NamedValueMeta meta, HttpRequest request, HttpR
         return resolveValue(meta, request, response);
     }
 
-    private static class FallbackNamedValueMeta extends NamedValueMeta {
+    private static final class FallbackNamedValueMeta extends NamedValueMeta {
 
         private final boolean noBodyParam;
         private final int paramCount;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/basic/ParamArgumentResolver.java
Patch:
@@ -205,7 +205,7 @@ private static List<String> resolveMatrixVariable(NamedValueMeta meta, HttpReque
         return RequestUtils.parseMatrixVariableValues(variableMap, meta.name());
     }
 
-    private static class ParamNamedValueMeta extends NamedValueMeta {
+    private static final class ParamNamedValueMeta extends NamedValueMeta {
 
         private final ParamType paramType;
 

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/test/TestRunnerImpl.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.dubbo.remoting.http12.message.HttpMessageEncoder;
 import org.apache.dubbo.remoting.http12.message.MediaType;
 import org.apache.dubbo.remoting.http12.message.codec.JsonCodec;
-import org.apache.dubbo.remoting.http12.message.codec.UrlEncodeFormCodec;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -172,7 +171,7 @@ public TestResponse run(TestRequest request) {
             HttpMessageEncoder encoder;
             Object coder;
             if (isForm) {
-                encoder = new UrlEncodeFormCodec(null);
+                encoder = UrlEncodeFormEncoder.INSTANCE;
                 coder = context.getHttpMessageDecoder();
             } else {
                 encoder = context.getHttpMessageEncoder();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/TripleClientCall.java
Patch:
@@ -191,7 +191,7 @@ public void sendMessage(Object message) {
             data = requestMetadata.packableMethod.packRequest(message);
             int compressed = Identity.MESSAGE_ENCODING.equals(requestMetadata.compressor.getMessageEncoding()) ? 0 : 1;
             final byte[] compress = requestMetadata.compressor.compress(data);
-            stream.sendMessage(compress, compressed, false).addListener(f -> {
+            stream.sendMessage(compress, compressed).addListener(f -> {
                 if (!f.isSuccess()) {
                     cancelByLocal(f.cause());
                 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/AbstractTripleClientStream.java
Patch:
@@ -146,7 +146,7 @@ public SocketAddress remoteAddress() {
     }
 
     @Override
-    public ChannelFuture sendMessage(byte[] message, int compressFlag, boolean eos) {
+    public ChannelFuture sendMessage(byte[] message, int compressFlag) {
         ChannelFuture checkResult = preCheck();
         if (!checkResult.isSuccess()) {
             return checkResult;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/ClientStream.java
Patch:
@@ -62,10 +62,9 @@ default void onComplete(
      * Send message to remote peer.
      *
      * @param message message to send to remote peer
-     * @param eos     whether this is the last message
      * @return future to callback when send message is done
      */
-    Future<?> sendMessage(byte[] message, int compressFlag, boolean eos);
+    Future<?> sendMessage(byte[] message, int compressFlag);
 
     /**
      * No more data will be sent, half close this stream to wait server response.

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/stream/TripleClientStreamTest.java
Patch:
@@ -100,7 +100,7 @@ void progress() {
         verify(writeQueue).enqueueFuture(any(HeaderQueueCommand.class), any(Executor.class));
         // no other commands
         verify(writeQueue).enqueue(any(QueuedCommand.class));
-        stream.sendMessage(new byte[0], 0, false);
+        stream.sendMessage(new byte[0], 0);
         verify(writeQueue).enqueueFuture(any(DataQueueCommand.class), any(Executor.class));
         verify(writeQueue, times(2)).enqueueFuture(any(QueuedCommand.class), any(Executor.class));
         stream.halfClose();

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/pu/DubboDetectorTest.java
Patch:
@@ -28,20 +28,20 @@ class DubboDetectorTest {
     void testDetect_Recognized() {
         DubboDetector detector = new DubboDetector();
         ChannelBuffer in = ChannelBuffers.wrappedBuffer(new byte[] {(byte) 0xda, (byte) 0xbb});
-        assertEquals(DubboDetector.Result.RECOGNIZED, detector.detect(in));
+        assertEquals(DubboDetector.Result.recognized(), detector.detect(in));
     }
 
     @Test
     void testDetect_Unrecognized() {
         DubboDetector detector = new DubboDetector();
         ChannelBuffer in = ChannelBuffers.wrappedBuffer(new byte[] {(byte) 0x00, (byte) 0x00});
-        assertEquals(DubboDetector.Result.UNRECOGNIZED, detector.detect(in));
+        assertEquals(DubboDetector.Result.unrecognized(), detector.detect(in));
     }
 
     @Test
     void testDetect_NeedMoreData() {
         DubboDetector detector = new DubboDetector();
         ChannelBuffer in = ChannelBuffers.wrappedBuffer(new byte[] {(byte) 0xda});
-        assertEquals(DubboDetector.Result.NEED_MORE_DATA, detector.detect(in));
+        assertEquals(DubboDetector.Result.needMoreData(), detector.detect(in));
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/RestConstants.java
Patch:
@@ -23,8 +23,6 @@
 
 public final class RestConstants {
 
-    public static final String REST = "rest";
-
     public static final String REST_FILTER_KEY = "rest.filter";
     public static final String EXTENSION_KEY = "extension";
     public static final String EXTENSIONS_ATTRIBUTE_KEY = "restExtensionsAttributeKey";

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/filter/AbstractRestFilter.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.rpc.protocol.tri.rest.filter;
 
+import org.apache.dubbo.common.utils.ArrayUtils;
 import org.apache.dubbo.rpc.protocol.tri.rest.util.RestUtils;
 
 import java.util.Arrays;
@@ -47,7 +48,7 @@ public String toString() {
             sb.append(", priority=").append(priority);
         }
         String[] patterns = getPatterns();
-        if (patterns != null) {
+        if (ArrayUtils.isNotEmpty(patterns)) {
             sb.append(", patterns=").append(Arrays.toString(patterns));
         }
         return sb.append('}').toString();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/util/KeyString.java
Patch:
@@ -96,12 +96,12 @@ public boolean equals(Object obj) {
 
     @Override
     public String toString() {
-        return value.substring(offset, length - offset);
+        return value.substring(offset, offset + length);
     }
 
     public int indexOf(char ch, int start) {
         int index = value.indexOf(ch, offset + start);
-        return index == -1 ? -1 : index - offset;
+        return index == -1 || index >= offset + length ? -1 : index - offset;
     }
 
     public boolean regionMatches(int start, String value, int i, int length) {

File: dubbo-plugin/dubbo-rest-spring/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/spring/RequestPartArgumentResolver.java
Patch:
@@ -50,7 +50,7 @@ protected Object resolveValue(NamedValueMeta meta, HttpRequest request, HttpResp
 
     @Override
     protected Object resolveCollectionValue(NamedValueMeta meta, HttpRequest request, HttpResponse response) {
-        return request.parts();
+        return meta.type() == byte[].class ? request.part(meta.name()) : request.parts();
     }
 
     @Override

File: dubbo-plugin/dubbo-triple-servlet/src/main/java/org/apache/dubbo/rpc/protocol/tri/servlet/TripleFilter.java
Patch:
@@ -60,7 +60,7 @@
 
 public class TripleFilter implements Filter {
 
-    private static final Logger LOG = LoggerFactory.getLogger(TripleFilter.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(TripleFilter.class);
 
     private PathResolver pathResolver;
     private RequestMappingRegistry mappingRegistry;
@@ -99,7 +99,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
 
             listener.onMetadata(new HttpMetadataAdapter(hRequest));
         } catch (Throwable t) {
-            LOG.info("Failed to process request", t);
+            LOGGER.info("Failed to process request", t);
             channel.writeError(Code.UNKNOWN.code, t);
         }
     }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/CustomizableHttpChannelObserver.java
Patch:
@@ -24,5 +24,5 @@ public interface CustomizableHttpChannelObserver<T> extends HttpChannelObserver<
 
     void setErrorResponseCustomizer(ErrorResponseCustomizer errorResponseCustomizer);
 
-    void setExceptionHandler(ExceptionHandler<?, ?> exceptionHandler);
+    void setExceptionHandler(ExceptionHandler<Throwable, ?> exceptionHandler);
 }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/exception/DecodeException.java
Patch:
@@ -18,6 +18,8 @@
 
 public class DecodeException extends HttpStatusException {
 
+    private static final long serialVersionUID = 1L;
+
     public DecodeException() {
         super(500);
     }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/exception/EncodeException.java
Patch:
@@ -18,6 +18,8 @@
 
 public class EncodeException extends HttpStatusException {
 
+    private static final long serialVersionUID = 1L;
+
     public EncodeException(String message) {
         super(500, message);
     }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/exception/HttpOverPayloadException.java
Patch:
@@ -18,6 +18,8 @@
 
 public class HttpOverPayloadException extends HttpStatusException {
 
+    private static final long serialVersionUID = 1L;
+
     public HttpOverPayloadException(String message) {
         super(500, message);
     }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/exception/HttpRequestTimeout.java
Patch:
@@ -20,6 +20,8 @@
 
 public class HttpRequestTimeout extends HttpStatusException {
 
+    private static final long serialVersionUID = 1L;
+
     private final String side;
 
     private HttpRequestTimeout(String side) {

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/exception/UnimplementedException.java
Patch:
@@ -18,6 +18,8 @@
 
 public class UnimplementedException extends HttpStatusException {
 
+    private static final long serialVersionUID = 1L;
+
     private final String unimplemented;
 
     public UnimplementedException(String unimplemented) {

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/exception/UnsupportedMediaTypeException.java
Patch:
@@ -18,6 +18,8 @@
 
 public class UnsupportedMediaTypeException extends HttpStatusException {
 
+    private static final long serialVersionUID = 1L;
+
     private final String mediaType;
 
     public UnsupportedMediaTypeException(String mediaType) {

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/h2/CancelStreamException.java
Patch:
@@ -20,8 +20,9 @@
 
 public class CancelStreamException extends RuntimeException implements ErrorCodeHolder {
 
-    private final boolean cancelByRemote;
+    private static final long serialVersionUID = 1L;
 
+    private final boolean cancelByRemote;
     private final long errorCode;
 
     private CancelStreamException(boolean cancelByRemote, long errorCode) {

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/rest/Mapping.java
Patch:
@@ -43,5 +43,5 @@
 
     String[] produces() default {};
 
-    boolean disabled() default false;
+    boolean enabled() default true;
 }

File: dubbo-remoting/dubbo-remoting-http3/src/main/java/org/apache/dubbo/remoting/exchange/Http3Exchanger.java
Patch:
@@ -34,7 +34,7 @@
 
 public final class Http3Exchanger {
 
-    private static final ErrorTypeAwareLogger LOG = LoggerFactory.getErrorTypeAwareLogger(Http3Exchanger.class);
+    private static final ErrorTypeAwareLogger LOGGER = LoggerFactory.getErrorTypeAwareLogger(Http3Exchanger.class);
     private static final Map<String, RemotingServer> SERVERS = new ConcurrentHashMap<>();
     private static final Map<String, AbstractConnectionClient> CLIENTS = new ConcurrentHashMap<>(16);
     private static final ChannelHandler HANDLER = new ChannelHandlerAdapter();
@@ -78,7 +78,7 @@ public static void close() {
             try {
                 server.close();
             } catch (Throwable t) {
-                LOG.error(LoggerCodeConstants.PROTOCOL_ERROR_CLOSE_SERVER, "", "", "Close Http3 server failed", t);
+                LOGGER.error(LoggerCodeConstants.PROTOCOL_ERROR_CLOSE_SERVER, "", "", "Close Http3 server failed", t);
             }
         }
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/http2/Http2ServerUnaryChannelObserver.java
Patch:
@@ -27,14 +27,14 @@ public Http2ServerUnaryChannelObserver(FrameworkModel frameworkModel, H2StreamCh
     }
 
     @Override
-    public void doOnNext(Object data) throws Throwable {
+    protected void doOnNext(Object data) throws Throwable {
         HttpOutputMessage httpOutputMessage = buildMessage(data);
         sendHeader(buildMetadata(resolveStatusCode(data), data, httpOutputMessage));
         sendMessage(httpOutputMessage);
     }
 
     @Override
-    public void doOnError(Throwable throwable) throws Throwable {
+    protected void doOnError(Throwable throwable) throws Throwable {
         String statusCode = resolveStatusCode(throwable);
         Object data = buildErrorResponse(statusCode, throwable);
         HttpOutputMessage httpOutputMessage = buildMessage(data);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/basic/FallbackArgumentResolver.java
Patch:
@@ -104,6 +104,9 @@ protected Object doResolveValue(NamedValueMeta meta, boolean single, HttpRequest
         }
 
         if (single) {
+            if (Map.class.isAssignableFrom(meta.type())) {
+                return RequestUtils.getParametersMap(request);
+            }
             String value = request.parameter(meta.name());
             if (meta.parameterMeta().isSimple() || RestUtils.isMaybeJSONObject(value)) {
                 return value;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/basic/ParamArgumentResolver.java
Patch:
@@ -122,7 +122,7 @@ protected Object resolveCollectionValue(NamedValueMeta meta, HttpRequest request
             case Attribute:
                 return request.attribute(meta.name());
             case Part:
-                return request.parts();
+                return meta.type() == byte[].class ? request.part(meta.name()) : request.parts();
             case Body:
                 Class<?> type = meta.type();
                 if (type == byte[].class) {

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/test/TestResponse.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dubbo.remoting.http12.HttpHeaderNames;
 import org.apache.dubbo.remoting.http12.HttpHeaders;
+import org.apache.dubbo.remoting.http12.exception.HttpStatusException;
 import org.apache.dubbo.remoting.http12.h2.Http2Headers;
 import org.apache.dubbo.remoting.http12.message.HttpMessageDecoder;
-import org.apache.dubbo.rpc.protocol.tri.rest.RestException;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -69,7 +69,7 @@ public <T> T getBody(Class<T> type) {
             if (status >= 400) {
                 List<String> bodies = getBodies(String.class);
                 String message = bodies.isEmpty() ? null : bodies.get(0);
-                throw new RestException(status, "status: " + status + ", body: " + message);
+                throw new HttpStatusException(status, "body=" + message);
             }
         }
         List<T> bodies = getBodies(type);

File: dubbo-plugin/dubbo-rest-jaxrs/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/jaxrs/BodyArgumentResolver.java
Patch:
@@ -51,6 +51,6 @@ public Object resolve(
                 throw new RestException(e);
             }
         }
-        return RequestUtils.decodeBody(request, type);
+        return RequestUtils.decodeBody(request, parameter.getActualGenericType());
     }
 }

File: dubbo-plugin/dubbo-rest-jaxrs/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/jaxrs/FallbackArgumentResolver.java
Patch:
@@ -45,7 +45,7 @@ protected NamedValueMeta createNamedValueMeta(ParameterMeta param) {
 
     @Override
     protected Object resolveValue(NamedValueMeta meta, HttpRequest request, HttpResponse response) {
-        Object value = RequestUtils.decodeBody(request, meta.type());
+        Object value = RequestUtils.decodeBody(request, meta.genericType());
         if (value != null) {
             return value;
         }
@@ -65,7 +65,7 @@ protected Object resolveCollectionValue(NamedValueMeta meta, HttpRequest request
                 throw new RestException(e);
             }
         }
-        Object value = RequestUtils.decodeBody(request, meta.type());
+        Object value = RequestUtils.decodeBody(request, meta.genericType());
         if (value != null) {
             return value;
         }
@@ -77,7 +77,7 @@ protected Object resolveCollectionValue(NamedValueMeta meta, HttpRequest request
 
     @Override
     protected Object resolveMapValue(NamedValueMeta meta, HttpRequest request, HttpResponse response) {
-        Object value = RequestUtils.decodeBody(request, meta.type());
+        Object value = RequestUtils.decodeBody(request, meta.genericType());
         if (value != null) {
             return value;
         }

File: dubbo-plugin/dubbo-rest-jaxrs/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/jaxrs/JaxrsRequestMappingResolver.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.rpc.protocol.tri.rest.mapping.RequestMapping;
 import org.apache.dubbo.rpc.protocol.tri.rest.mapping.RequestMapping.Builder;
 import org.apache.dubbo.rpc.protocol.tri.rest.mapping.RequestMappingResolver;
-import org.apache.dubbo.rpc.protocol.tri.rest.mapping.condition.ServiceVersionCondition;
 import org.apache.dubbo.rpc.protocol.tri.rest.mapping.meta.AnnotationMeta;
 import org.apache.dubbo.rpc.protocol.tri.rest.mapping.meta.AnnotationSupport;
 import org.apache.dubbo.rpc.protocol.tri.rest.mapping.meta.CorsMeta;
@@ -76,7 +75,7 @@ public RequestMapping resolve(MethodMeta methodMeta) {
         return builder(methodMeta, path, httpMethod)
                 .name(methodMeta.getMethod().getName())
                 .contextPath(methodMeta.getServiceMeta().getContextPath())
-                .custom(new ServiceVersionCondition(serviceMeta.getServiceGroup(), serviceMeta.getServiceVersion()))
+                .service(serviceMeta.getServiceGroup(), serviceMeta.getServiceVersion())
                 .cors(globalCorsMeta)
                 .build();
     }

File: dubbo-plugin/dubbo-rest-jaxrs/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/jaxrs/JaxrsRestToolKit.java
Patch:
@@ -54,7 +54,7 @@ public Object convert(Object value, ParameterMeta parameter) {
         }
 
         ParamConverter converter = paramConverterFactory.getParamConverter(
-                parameter.getType(), parameter.getGenericType(), parameter.getRealAnnotations());
+                parameter.getType(), parameter.getGenericType(), parameter.getRawAnnotations());
         if (converter != null) {
             return value instanceof String ? converter.fromString((String) value) : converter.toString(value);
         }

File: dubbo-plugin/dubbo-rest-jaxrs/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/jaxrs/filter/InterceptorContextImpl.java
Patch:
@@ -56,7 +56,7 @@ public void removeProperty(String name) {
 
     @Override
     public Annotation[] getAnnotations() {
-        return getHandler().getMethod().getRealAnnotations();
+        return getHandler().getMethod().getRawAnnotations();
     }
 
     @Override

File: dubbo-plugin/dubbo-rest-spring/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/spring/MatrixVariableArgumentResolver.java
Patch:
@@ -117,7 +117,7 @@ private static class MatrixNamedValueMeta extends NamedValueMeta {
 
         private final String pathVar;
 
-        public MatrixNamedValueMeta(String name, boolean required, String defaultValue, String pathVar) {
+        MatrixNamedValueMeta(String name, boolean required, String defaultValue, String pathVar) {
             super(name, required, defaultValue);
             this.pathVar = pathVar;
         }

File: dubbo-plugin/dubbo-rest-spring/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/spring/RequestBodyArgumentResolver.java
Patch:
@@ -50,7 +50,7 @@ protected Object resolveValue(NamedValueMeta meta, HttpRequest request, HttpResp
             }
             return meta.parameterMeta().bind(request, response);
         }
-        return RequestUtils.decodeBody(request, meta.type());
+        return RequestUtils.decodeBody(request, meta.genericType());
     }
 
     @Override
@@ -66,14 +66,14 @@ protected Object resolveCollectionValue(NamedValueMeta meta, HttpRequest request
         if (RequestUtils.isFormOrMultiPart(request)) {
             return request.formParameterValues(meta.name());
         }
-        return RequestUtils.decodeBody(request, meta.type());
+        return RequestUtils.decodeBody(request, meta.genericType());
     }
 
     @Override
     protected Object resolveMapValue(NamedValueMeta meta, HttpRequest request, HttpResponse response) {
         if (RequestUtils.isFormOrMultiPart(request)) {
             return RequestUtils.getFormParametersMap(request);
         }
-        return RequestUtils.decodeBody(request, meta.type());
+        return RequestUtils.decodeBody(request, meta.genericType());
     }
 }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/HttpMethods.java
Patch:
@@ -20,12 +20,12 @@
 
 public enum HttpMethods {
     GET,
+    HEAD,
     POST,
     PUT,
+    PATCH,
     DELETE,
-    HEAD,
     OPTIONS,
-    PATCH,
     TRACE;
 
     public static final byte[][] HTTP_METHODS_BYTES;

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/rest/Mapping.java
Patch:
@@ -42,4 +42,6 @@
     String[] consumes() default {};
 
     String[] produces() default {};
+
+    boolean disabled() default false;
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/Messages.java
Patch:
@@ -34,9 +34,9 @@ public enum Messages {
     AMBIGUOUS_MAPPING("Ambiguous mapping for ''{0}'': [{1}, {2}]"),
     EXTENSION_INIT_FAILED("Rest extension: ''{0}'' initialization failed for invoker: ''{1}''"),
     ARGUMENT_NAME_MISSING("Name for argument of type [{0}] not specified, and parameter name information not "
-            + "available via reflection. Ensure that the compiler uses the '-parameters' flag."),
+            + "available via reflection. Ensure that the compiler uses the '-parameters' flag"),
     ARGUMENT_VALUE_MISSING("Missing argument ''{0}'' for method parameter of type [{1}]", 412),
-    ARGUMENT_CONVERT_ERROR("Convert argument ''{0}'' value [{1}] from type [{2}] to type [{3}] error", 412),
+    ARGUMENT_CONVERT_ERROR("Could not convert argument ''{0}'' value ''{1}'' from type [{2}] to type [{3}]", 412),
     ARGUMENT_COULD_NOT_RESOLVED("Could not resolve ''{0}'', no suitable resolver", 400),
     ARGUMENT_BIND_ERROR("Bind argument ''{0}'' of type [{1}] error", 400),
     INTERNAL_ERROR("Rest internal error");

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/mapping/condition/ServiceVersionCondition.java
Patch:
@@ -51,10 +51,10 @@ public ServiceVersionCondition match(HttpRequest request) {
         if (version == null) {
             version = request.header(RestConstants.HEADER_SERVICE_VERSION);
         }
-
         if (version != null && !version.equals(this.version)) {
             return null;
         }
+
         return this;
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/mapping/meta/AnnotationSupport.java
Patch:
@@ -61,7 +61,7 @@ public final AnnotationMeta[] getAnnotations() {
         });
     }
 
-    public final Annotation[] getRealAnnotations() {
+    public final Annotation[] getRawAnnotations() {
         AnnotationMeta[] annotations = getAnnotations();
         int len = annotations.length;
         Annotation[] result = new Annotation[len];

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/mapping/meta/BeanMeta.java
Patch:
@@ -352,7 +352,7 @@ public String getDescription() {
         }
     }
 
-    public static final class NestedMeta extends NestableParameterMeta {
+    private static final class NestedMeta extends NestableParameterMeta {
 
         private final Class<?> type;
         private final Type genericType;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/util/MethodWalker.java
Patch:
@@ -54,9 +54,6 @@ private void walkHierarchy(Class<?> clazz) {
         for (Method method : clazz.getDeclaredMethods()) {
             int modifiers = method.getModifiers();
             if ((modifiers & (Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC) {
-                if (Modifier.isAbstract(modifiers) && method.getDeclaredAnnotations().length == 0) {
-                    continue;
-                }
                 methodsMap
                         .computeIfAbsent(Key.of(method), k -> new ArrayList<>())
                         .add(method);

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReport.java
Patch:
@@ -184,10 +184,9 @@ private void dumpJStack() {
                     jstack(jStackStream);
                 } catch (Exception t) {
                     logger.error(COMMON_UNEXPECTED_CREATE_DUMP, "", "", "dump jStack error", t);
-                } finally {
-                    lastPrintTime = System.currentTimeMillis();
                 }
             });
+            lastPrintTime = System.currentTimeMillis();
         } finally {
             guard.release();
             // must shut down thread pool ,if not will lead to OOM

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.PropertySource;
 
-import static com.alibaba.spring.util.BeanRegistrar.hasAlias;
+import static org.apache.dubbo.config.spring.util.BeanRegistrar.hasAlias;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 
 /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java
Patch:
@@ -30,8 +30,6 @@
 import org.apache.dubbo.config.TracingConfig;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
 
-import com.alibaba.spring.beans.factory.annotation.EnableConfigurationBeanBinding;
-import com.alibaba.spring.beans.factory.annotation.EnableConfigurationBeanBindings;
 import org.springframework.context.annotation.Configuration;
 
 /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java
Patch:
@@ -31,7 +31,6 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import com.alibaba.spring.beans.factory.annotation.EnableConfigurationBeanBinding;
 import org.springframework.context.annotation.Import;
 
 /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/config/DubboConfigBeanCustomizer.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.config.AbstractConfig;
 import org.apache.dubbo.config.spring.context.properties.DubboConfigBinder;
 
-import com.alibaba.spring.context.config.ConfigurationBeanCustomizer;
 import org.springframework.context.ApplicationContext;
 import org.springframework.core.Ordered;
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceCreatorTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.dubbo.config.spring.api.HelloService;
 import org.apache.dubbo.config.spring.impl.NotifyService;
 import org.apache.dubbo.config.spring.reference.ReferenceCreator;
+import org.apache.dubbo.config.spring.util.AnnotationUtils;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
 
@@ -38,7 +39,6 @@
 import java.util.List;
 import java.util.Map;
 
-import com.alibaba.spring.util.AnnotationUtils;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.PropertySource;
 
-import static com.alibaba.spring.util.BeanRegistrar.hasAlias;
+import static org.apache.dubbo.config.spring.util.BeanRegistrar.hasAlias;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 
 /**

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/reference/ReferenceKeyTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dubbo.config.spring.api.ProvidedByDemoService3;
 import org.apache.dubbo.config.spring.impl.DemoServiceImpl;
 import org.apache.dubbo.config.spring.impl.HelloServiceImpl;
+import org.apache.dubbo.config.spring.util.AnnotationUtils;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -36,7 +37,6 @@
 import java.util.List;
 import java.util.Map;
 
-import com.alibaba.spring.util.AnnotationUtils;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;

File: dubbo-spring-boot/dubbo-spring-boot-autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/BinderDubboConfigBinder.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.dubbo.spring.boot.autoconfigure;
 
+import org.apache.dubbo.config.spring.context.config.ConfigurationBeanBinder;
 import org.apache.dubbo.config.spring.context.properties.DubboConfigBinder;
 
 import java.util.Map;
 
-import com.alibaba.spring.context.config.ConfigurationBeanBinder;
 import org.springframework.boot.context.properties.bind.BindHandler;
 import org.springframework.boot.context.properties.bind.Bindable;
 import org.springframework.boot.context.properties.bind.Binder;

File: dubbo-spring-boot/dubbo-spring-boot-autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/DubboRelaxedBinding2AutoConfiguration.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.dubbo.spring.boot.autoconfigure;
 
+import org.apache.dubbo.config.spring.context.config.ConfigurationBeanBinder;
 import org.apache.dubbo.config.spring.util.PropertySourcesUtils;
 
 import java.util.Map;
 import java.util.Set;
 
-import com.alibaba.spring.context.config.ConfigurationBeanBinder;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: dubbo-spring-boot/dubbo-spring-boot-autoconfigure/src/test/java/org/apache/dubbo/spring/boot/autoconfigure/BinderDubboConfigBinderTest.java
Patch:
@@ -19,10 +19,10 @@
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
+import org.apache.dubbo.config.spring.context.config.ConfigurationBeanBinder;
 
 import java.util.Map;
 
-import com.alibaba.spring.context.config.ConfigurationBeanBinder;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -32,7 +32,7 @@
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import static com.alibaba.spring.util.PropertySourcesUtils.getSubProperties;
+import static org.apache.dubbo.config.spring.util.PropertySourcesUtils.getSubProperties;
 
 /**
  * {@link BinderDubboConfigBinder} Test

File: dubbo-spring-boot/dubbo-spring-boot-autoconfigure/src/test/java/org/apache/dubbo/spring/boot/autoconfigure/DubboRelaxedBinding2AutoConfigurationTest.java
Patch:
@@ -18,12 +18,12 @@
 
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor;
+import org.apache.dubbo.config.spring.context.config.ConfigurationBeanBinder;
 import org.apache.dubbo.config.spring.util.DubboBeanUtils;
 
 import java.util.Map;
 import java.util.Set;
 
-import com.alibaba.spring.context.config.ConfigurationBeanBinder;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.ObjectProvider;

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/DubboRelaxedBindingAutoConfiguration.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.dubbo.spring.boot.autoconfigure;
 
+import org.apache.dubbo.config.spring.context.config.ConfigurationBeanBinder;
+
 import java.util.Set;
 
-import com.alibaba.spring.context.config.ConfigurationBeanBinder;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/RelaxedDubboConfigBinder.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.dubbo.spring.boot.autoconfigure;
 
+import org.apache.dubbo.config.spring.context.config.ConfigurationBeanBinder;
 import org.apache.dubbo.config.spring.context.properties.DubboConfigBinder;
 
 import java.util.Map;
 
-import com.alibaba.spring.context.config.ConfigurationBeanBinder;
 import org.springframework.beans.MutablePropertyValues;
 import org.springframework.boot.bind.RelaxedDataBinder;
 

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/test/java/org/apache/dubbo/spring/boot/autoconfigure/RelaxedDubboConfigBinderTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
+import org.apache.dubbo.config.spring.context.config.ConfigurationBeanBinder;
 
 import java.util.Map;
 
-import com.alibaba.spring.context.config.ConfigurationBeanBinder;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -35,7 +35,7 @@
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import static com.alibaba.spring.util.PropertySourcesUtils.getSubProperties;
+import static org.apache.dubbo.config.spring.util.PropertySourcesUtils.getSubProperties;
 
 /**
  * {@link RelaxedDubboConfigBinder} Test

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/MetadataReportInstance.java
Patch:
@@ -115,6 +115,9 @@ private void init(MetadataReportConfig config, MetadataReportFactory metadataRep
 
     private String getRelatedRegistryId(MetadataReportConfig config, URL url) {
         String relatedRegistryId = config.getRegistry();
+        if (isEmpty(relatedRegistryId)) {
+            relatedRegistryId = config.getId();
+        }
         if (isEmpty(relatedRegistryId)) {
             relatedRegistryId = DEFAULT_KEY;
         }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboConfigApplicationListener.java
Patch:
@@ -60,7 +60,7 @@ public void onApplicationEvent(DubboConfigInitEvent event) {
         }
     }
 
-    public void init() {
+    public synchronized void init() {
         // It's expected to be notified at
         // org.springframework.context.support.AbstractApplicationContext.registerListeners(),
         // before loading non-lazy singleton beans. At this moment, all BeanFactoryPostProcessor have been processed,

File: dubbo-common/src/main/java/org/apache/dubbo/common/store/DataStore.java
Patch:
@@ -34,4 +34,6 @@ public interface DataStore {
     void put(String componentName, String key, Object value);
 
     void remove(String componentName, String key);
+
+    default void addListener(DataStoreUpdateListener dataStoreUpdateListener) {}
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java
Patch:
@@ -261,7 +261,7 @@ public static byte[] readBytes(InputStream in) throws IOException {
         if (in.getClass() == ByteArrayInputStream.class) {
             return readBytes((ByteArrayInputStream) in);
         }
-        ByteArrayOutputStream out = new ByteArrayOutputStream();
+        ByteArrayOutputStream out = new ByteArrayOutputStream(1024);
         byte[] buffer = new byte[4096];
         int bytesRead;
         while ((bytesRead = in.read(buffer)) != -1) {

File: dubbo-plugin/dubbo-rest-servlet/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/support/servlet/ServletHttpRequestAdaptee.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.remoting.http12.HttpChannel;
 import org.apache.dubbo.remoting.http12.HttpMetadata;
+import org.apache.dubbo.remoting.http12.HttpVersion;
 import org.apache.dubbo.remoting.http12.message.DefaultHttpRequest;
 
 import javax.servlet.AsyncContext;
@@ -319,7 +320,7 @@ public Map<String, String[]> getParameterMap() {
 
     @Override
     public String getProtocol() {
-        return isHttp2() ? "HTTP/2.0" : "HTTP/1.1";
+        return isHttp2() ? HttpVersion.HTTP2.getProtocol() : HttpVersion.HTTP1.getProtocol();
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Constants.java
Patch:
@@ -106,6 +106,7 @@ public interface Constants {
     String H2_SETTINGS_PASS_THROUGH_STANDARD_HTTP_HEADERS = "dubbo.rpc.tri.pass-through-standard-http-headers";
 
     String H3_SETTINGS_HTTP3_ENABLE = "dubbo.protocol.triple.enable-http3";
+    String H3_SETTINGS_SERVLET_ENABLE = "dubbo.protocol.triple.enable-servlet";
 
     String ADAPTIVE_LOADBALANCE_ATTACHMENT_KEY = "lb_adaptive";
     String ADAPTIVE_LOADBALANCE_START_TIME = "adaptive_startTime";

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2Protocol.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.remoting.api.pu.ChannelHandlerPretender;
 import org.apache.dubbo.remoting.api.pu.ChannelOperator;
 import org.apache.dubbo.remoting.api.ssl.ContextOperator;
+import org.apache.dubbo.remoting.http12.HttpVersion;
 import org.apache.dubbo.remoting.http12.netty4.HttpWriteQueueHandler;
 import org.apache.dubbo.remoting.http12.netty4.h1.NettyHttp1Codec;
 import org.apache.dubbo.remoting.http12.netty4.h1.NettyHttp1ConnectionHandler;
@@ -116,13 +117,13 @@ public void configServerProtocolHandler(URL url, ChannelOperator operator) {
         List<ChannelHandler> channelHandlerPretenders = new ArrayList<>();
         try {
             // h1
-            if (TripleProtocolDetector.HttpVersion.HTTP1.getVersion().equals(httpVersion)) {
+            if (HttpVersion.HTTP1.getVersion().equals(httpVersion)) {
                 configurerHttp1Handlers(url, channelHandlerPretenders);
                 return;
             }
 
             // h2
-            if (TripleProtocolDetector.HttpVersion.HTTP2.getVersion().equals(httpVersion)) {
+            if (HttpVersion.HTTP2.getVersion().equals(httpVersion)) {
                 configurerHttp2Handlers(url, channelHandlerPretenders);
             }
         } finally {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/mapping/RequestMappingRegistry.java
Patch:
@@ -31,5 +31,7 @@ public interface RequestMappingRegistry {
 
     HandlerMeta lookup(HttpRequest request);
 
+    boolean exists(String path, String method);
+
     void destroy();
 }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/HttpChannelObserver.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.stream.StreamObserver;
 
-public interface HttpChannelObserver<T> extends StreamObserver<T> {
+public interface HttpChannelObserver<T> extends StreamObserver<T>, AutoCloseable {
 
     HttpChannel getHttpChannel();
 }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/HttpTransportListener.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.dubbo.remoting.http12;
 
-public interface HttpTransportListener<HEADER extends HttpMetadata, MESSAGE extends HttpInputMessage> {
+public interface HttpTransportListener<HEADER extends HttpMetadata, MESSAGE extends HttpInputMessage>
+        extends AutoCloseable {
 
     void onMetadata(HEADER metadata);
 

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/HttpUtils.java
Patch:
@@ -185,14 +185,14 @@ public static String readPostValue(InterfaceHttpData item) {
     }
 
     public static HttpRequest.FileUpload readUpload(InterfaceHttpData item) {
-        return new DefaultFileUploadAdaptee((FileUpload) item);
+        return new DefaultFileUploadAdapter((FileUpload) item);
     }
 
-    private static class DefaultFileUploadAdaptee implements HttpRequest.FileUpload {
+    private static class DefaultFileUploadAdapter implements HttpRequest.FileUpload {
         private final FileUpload fu;
         private InputStream inputStream;
 
-        DefaultFileUploadAdaptee(FileUpload fu) {
+        DefaultFileUploadAdapter(FileUpload fu) {
             this.fu = fu;
         }
 

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/message/codec/BinaryCodec.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.io.StreamUtils;
 import org.apache.dubbo.remoting.http12.exception.DecodeException;
 import org.apache.dubbo.remoting.http12.exception.EncodeException;
+import org.apache.dubbo.remoting.http12.exception.HttpStatusException;
 import org.apache.dubbo.remoting.http12.message.HttpMessageCodec;
 import org.apache.dubbo.remoting.http12.message.MediaType;
 
@@ -49,6 +50,8 @@ public void encode(OutputStream os, Object data, Charset charset) throws EncodeE
     public Object decode(InputStream is, Class<?> targetType, Charset charset) throws DecodeException {
         try {
             return StreamUtils.readBytes(is);
+        } catch (HttpStatusException e) {
+            throw e;
         } catch (Exception e) {
             throw new DecodeException(e);
         }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/message/codec/HtmlCodec.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.io.StreamUtils;
 import org.apache.dubbo.remoting.http12.exception.DecodeException;
 import org.apache.dubbo.remoting.http12.exception.EncodeException;
+import org.apache.dubbo.remoting.http12.exception.HttpStatusException;
 import org.apache.dubbo.remoting.http12.message.HttpMessageCodec;
 import org.apache.dubbo.remoting.http12.message.MediaType;
 
@@ -48,6 +49,8 @@ public Object decode(InputStream is, Class<?> targetType, Charset charset) throw
             if (targetType == String.class) {
                 return StreamUtils.toString(is, charset);
             }
+        } catch (HttpStatusException e) {
+            throw e;
         } catch (Exception e) {
             throw new DecodeException(e);
         }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/message/codec/PlainTextCodec.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.io.StreamUtils;
 import org.apache.dubbo.remoting.http12.exception.DecodeException;
 import org.apache.dubbo.remoting.http12.exception.EncodeException;
+import org.apache.dubbo.remoting.http12.exception.HttpStatusException;
 import org.apache.dubbo.remoting.http12.message.HttpMessageCodec;
 import org.apache.dubbo.remoting.http12.message.MediaType;
 
@@ -51,6 +52,8 @@ public Object decode(InputStream is, Class<?> targetType, Charset charset) throw
             if (targetType == String.class) {
                 return StreamUtils.toString(is, charset);
             }
+        } catch (HttpStatusException e) {
+            throw e;
         } catch (Exception e) {
             throw new DecodeException(e);
         }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/netty4/h2/NettyHttp2FrameCodec.java
Patch:
@@ -91,7 +91,7 @@ private Http2InputMessage onHttp2DataFrame(Http2DataFrame dataFrame) {
 
     private Http2HeadersFrame encodeHttp2HeadersFrame(Http2Header http2Header) {
         HttpHeaders headers = http2Header.headers();
-        DefaultHttp2Headers http2Headers = new DefaultHttp2Headers();
+        DefaultHttp2Headers http2Headers = new DefaultHttp2Headers(false);
         for (Map.Entry<String, List<String>> entry : headers.entrySet()) {
             String name = entry.getKey();
             List<String> value = entry.getValue();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHeaderEnum.java
Patch:
@@ -45,8 +45,7 @@ public enum TripleHeaderEnum {
     SERVICE_GROUP("tri-service-group"),
     SERVICE_TIMEOUT("tri-service-timeout"),
     TRI_HEADER_CONVERT("tri-header-convert"),
-    TRI_EXCEPTION_CODE("tri-exception-code"),
-    ;
+    TRI_EXCEPTION_CODE("tri-exception-code");
 
     static final Map<String, TripleHeaderEnum> enumMap = new HashMap<>();
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/rest/RestHttpMessageCodec.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.remoting.http12.HttpResponse;
 import org.apache.dubbo.remoting.http12.exception.DecodeException;
 import org.apache.dubbo.remoting.http12.exception.EncodeException;
+import org.apache.dubbo.remoting.http12.exception.HttpStatusException;
 import org.apache.dubbo.remoting.http12.message.HttpMessageDecoder;
 import org.apache.dubbo.remoting.http12.message.HttpMessageEncoder;
 import org.apache.dubbo.remoting.http12.message.MediaType;
@@ -108,6 +109,8 @@ public void encode(OutputStream os, Object data) throws EncodeException {
                 if (messageEncoder.mediaType().isPureText() && type != String.class) {
                     data = typeConverter.convert(data, String.class);
                 }
+            } catch (HttpStatusException e) {
+                throw e;
             } catch (Exception e) {
                 throw new EncodeException(e);
             }

File: dubbo-spring-boot/dubbo-spring-boot-autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/DubboRelaxedBinding2AutoConfiguration.java
Patch:
@@ -51,7 +51,7 @@
  * @see DubboRelaxedBindingAutoConfiguration
  * @since 2.7.0
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(prefix = DUBBO_PREFIX, name = "enabled", matchIfMissing = true)
 @ConditionalOnClass(name = "org.springframework.boot.context.properties.bind.Binder")
 @AutoConfigureBefore(DubboRelaxedBindingAutoConfiguration.class)

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/DubboAutoConfiguration.java
Patch:
@@ -62,7 +62,7 @@ public class DubboAutoConfiguration {
     @ConditionalOnProperty(prefix = DUBBO_SCAN_PREFIX, name = BASE_PACKAGES_PROPERTY_NAME)
     @ConditionalOnBean(name = BASE_PACKAGES_BEAN_NAME)
     @Bean
-    public ServiceAnnotationPostProcessor serviceAnnotationBeanProcessor(
+    public static ServiceAnnotationPostProcessor serviceAnnotationBeanProcessor(
             @Qualifier(BASE_PACKAGES_BEAN_NAME) Set<String> packagesToScan) {
         return new ServiceAnnotationPostProcessor(packagesToScan);
     }

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/util/CuratorFrameworkUtils.java
Patch:
@@ -43,6 +43,7 @@
 
 import static org.apache.curator.x.discovery.ServiceInstance.builder;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_SEPARATOR;
+import static org.apache.dubbo.common.constants.CommonConstants.ZOOKEEPER_ENSEMBLE_TRACKER_KEY;
 import static org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery.DEFAULT_GROUP;
 import static org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams.BASE_SLEEP_TIME;
 import static org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams.BLOCK_UNTIL_CONNECTED_UNIT;
@@ -69,8 +70,10 @@ public static ServiceDiscovery<ZookeeperInstance> buildServiceDiscovery(
 
     public static CuratorFramework buildCuratorFramework(URL connectionURL, ZookeeperServiceDiscovery serviceDiscovery)
             throws Exception {
+        boolean ensembleTracker = connectionURL.getParameter(ZOOKEEPER_ENSEMBLE_TRACKER_KEY, true);
         CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()
                 .connectString(connectionURL.getBackupAddress())
+                .ensembleTracker(ensembleTracker)
                 .retryPolicy(buildRetryPolicy(connectionURL));
         String userInformation = connectionURL.getUserInformation();
         if (StringUtils.isNotEmpty(userInformation)) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -646,4 +646,6 @@ public interface CommonConstants {
     String DUBBO_MANUAL_REGISTER_KEY = "dubbo.application.manual-register";
 
     String DUBBO2_COMPACT_ENABLE = "dubbo.compact.enable";
+
+    String ZOOKEEPER_ENSEMBLE_TRACKER_KEY = "zookeeper.ensemble.tracker";
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/zookeeper/AbstractZookeeperClient.java
Patch:
@@ -40,6 +40,7 @@ public abstract class AbstractZookeeperClient<TargetDataListener, TargetChildLis
     // may hang up to wait name resolution up to 10s
     protected int DEFAULT_CONNECTION_TIMEOUT_MS = 30 * 1000;
     protected int DEFAULT_SESSION_TIMEOUT_MS = 60 * 1000;
+    protected boolean DEFAULT_ENSEMBLE_TRACKER = true;
 
     private final URL url;
 

File: dubbo-remoting/dubbo-remoting-zookeeper-curator5/src/main/java/org/apache/dubbo/remoting/zookeeper/curator5/Curator5ZookeeperClient.java
Patch:
@@ -55,6 +55,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.SESSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.ZOOKEEPER_ENSEMBLE_TRACKER_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_CONNECT_REGISTRY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_ZOOKEEPER_EXCEPTION;
 
@@ -74,10 +75,12 @@ public Curator5ZookeeperClient(URL url) {
         try {
             int timeout = url.getParameter(TIMEOUT_KEY, DEFAULT_CONNECTION_TIMEOUT_MS);
             int sessionExpireMs = url.getParameter(SESSION_KEY, DEFAULT_SESSION_TIMEOUT_MS);
+            boolean ensembleTracker = url.getParameter(ZOOKEEPER_ENSEMBLE_TRACKER_KEY, DEFAULT_ENSEMBLE_TRACKER);
             CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()
                     .connectString(url.getBackupAddress())
                     .retryPolicy(new RetryNTimes(1, 1000))
                     .connectionTimeoutMs(timeout)
+                    .ensembleTracker(ensembleTracker)
                     .sessionTimeoutMs(sessionExpireMs);
             String userInformation = url.getUserInformation();
             if (userInformation != null && userInformation.length() > 0) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java
Patch:
@@ -108,7 +108,7 @@ public AccessLogFilter() {}
     public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {
         String accessLogKey = invoker.getUrl().getParameter(Constants.ACCESS_LOG_KEY);
         boolean isFixedPath = invoker.getUrl().getParameter(ACCESS_LOG_FIXED_PATH_KEY, true);
-        if (StringUtils.isEmpty(accessLogKey)) {
+        if (StringUtils.isEmpty(accessLogKey) || "false".equalsIgnoreCase(accessLogKey)) {
             // Notice that disable accesslog of one service may cause the whole application to stop collecting
             // accesslog.
             // It's recommended to use application level configuration to enable or disable accesslog if dynamically

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/support/AbstractMetadataReport.java
Patch:
@@ -85,7 +85,7 @@ public abstract class AbstractMetadataReport implements MetadataReport {
 
     protected static final String DEFAULT_ROOT = "dubbo";
 
-    private static final int ONE_DAY_IN_MILLISECONDS = 60 * 24 * 60 * 1000;
+    protected static final int ONE_DAY_IN_MILLISECONDS = 60 * 24 * 60 * 1000;
     private static final int FOUR_HOURS_IN_MILLISECONDS = 60 * 4 * 60 * 1000;
     // Log output
     protected final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());

File: dubbo-metadata/dubbo-metadata-report-redis/src/test/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReportTest.java
Patch:
@@ -253,7 +253,6 @@ void testAuthRedisMetadata() throws ClassNotFoundException {
 
     @Test
     void testWrongAuthRedisMetadata() throws ClassNotFoundException {
-        registryUrl = registryUrl.setPassword("123456");
         redisMetadataReport = (RedisMetadataReport) new RedisMetadataReportFactory().createMetadataReport(registryUrl);
         try {
             testStoreProvider(redisMetadataReport, "1.0.0.redis.md.p1", 3000);

File: dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/exporter/zipkin/HttpSender.java
Patch:
@@ -25,11 +25,11 @@
 
 import org.springframework.http.HttpHeaders;
 import org.springframework.util.unit.DataSize;
-import zipkin2.Call;
-import zipkin2.CheckResult;
-import zipkin2.codec.Encoding;
 import zipkin2.reporter.BytesMessageEncoder;
+import zipkin2.reporter.Call;
+import zipkin2.reporter.CheckResult;
 import zipkin2.reporter.ClosedSenderException;
+import zipkin2.reporter.Encoding;
 import zipkin2.reporter.Sender;
 
 /**

File: dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/exporter/zipkin/ZipkinConfigurations.java
Patch:
@@ -134,7 +134,7 @@ static class ReporterConfiguration {
         @ConditionalOnMissingBean
         @ConditionalOnBean(Sender.class)
         AsyncReporter<Span> spanReporter(Sender sender, BytesEncoder<Span> encoder) {
-            return AsyncReporter.builder(sender).build(encoder);
+            return AsyncReporter.builder(sender).build((zipkin2.reporter.BytesEncoder<Span>) encoder);
         }
     }
 

File: dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/exporter/zipkin/ZipkinRestTemplateSender.java
Patch:
@@ -19,8 +19,8 @@
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpMethod;
 import org.springframework.web.client.RestTemplate;
-import zipkin2.Call;
-import zipkin2.Callback;
+import zipkin2.reporter.Call;
+import zipkin2.reporter.Callback;
 
 class ZipkinRestTemplateSender extends HttpSender {
     private final String endpoint;

File: dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/exporter/zipkin/ZipkinWebClientSender.java
Patch:
@@ -20,8 +20,8 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.reactive.function.client.WebClient;
 import reactor.core.publisher.Mono;
-import zipkin2.Call;
-import zipkin2.Callback;
+import zipkin2.reporter.Call;
+import zipkin2.reporter.Callback;
 
 class ZipkinWebClientSender extends HttpSender {
     private final String endpoint;

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/param/parse/provider/ProviderParseContext.java
Patch:
@@ -57,7 +57,6 @@ public void setRequest(Object request) {
     public String getPathVariable(int urlSplitIndex) {
 
         String[] split = getRequestFacade().getRequestURI().split("/");
-
-        return split[urlSplitIndex];
+        return split[urlSplitIndex].split("\\?")[0];
     }
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/Activate.java
Patch:
@@ -86,7 +86,7 @@
     /**
      * Absolute ordering info, optional
      *
-     * Ascending order, smaller values will be in the front o the list.
+     * Ascending order, smaller values will be in the front of the list.
      *
      * @return absolute ordering info
      */

File: dubbo-metadata/dubbo-metadata-report-redis/src/test/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReportTest.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.Map;
 import java.util.Random;
 
-import org.apache.commons.lang3.SystemUtils;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -69,7 +68,7 @@ public void constructor(final TestInfo testInfo) {
                 redisServer = newRedisServer()
                         .port(redisPort)
                         // set maxheap to fix Windows error 0x70 while starting redis
-                        .settingIf(SystemUtils.IS_OS_WINDOWS, "maxheap 128mb")
+                        // .settingIf(SystemUtils.IS_OS_WINDOWS, "maxheap 128mb")
                         .settingIf(usesAuthentication, "requirepass " + REDIS_PASSWORD)
                         .build();
                 this.redisServer.start();

File: dubbo-metadata/dubbo-metadata-report-redis/src/test/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReportTest.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 
-import org.apache.commons.lang3.SystemUtils;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -78,7 +77,7 @@ public void constructor(final TestInfo testInfo) {
                 redisServer = newRedisServer()
                         .port(redisPort)
                         // set maxheap to fix Windows error 0x70 while starting redis
-                        .settingIf(SystemUtils.IS_OS_WINDOWS, "maxheap 128mb")
+                        // .settingIf(SystemUtils.IS_OS_WINDOWS, "maxheap 128mb")
                         .settingIf(usesAuthentication, "requirepass " + REDIS_PASSWORD)
                         .build();
                 this.redisServer.start();

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/FastJson2Impl.java
Patch:
@@ -29,6 +29,7 @@ public boolean isJson(String json) {
         JSONValidator validator = JSONValidator.from(json);
         return validator.validate();
     }
+
     @Override
     public <T> T toJavaObject(String json, Type type) {
         return com.alibaba.fastjson2.JSON.parseObject(json, type);

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployerTest.java
Patch:
@@ -36,8 +36,8 @@ void isSupportPrometheus() {
     void isImportPrometheus() {
         MetricsConfig metricsConfig = new MetricsConfig();
         metricsConfig.setProtocol("prometheus");
-        boolean importPrometheus = PROTOCOL_PROMETHEUS.equals(metricsConfig.getProtocol())
-                && !MetricsSupportUtil.isSupportPrometheus();
+        boolean importPrometheus =
+                PROTOCOL_PROMETHEUS.equals(metricsConfig.getProtocol()) && !MetricsSupportUtil.isSupportPrometheus();
         Assert.assertTrue(!importPrometheus, " should return false");
     }
 }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployerTest.java
Patch:
@@ -37,7 +37,7 @@ void isImportPrometheus() {
         MetricsConfig metricsConfig = new MetricsConfig();
         metricsConfig.setProtocol("prometheus");
         boolean importPrometheus = PROTOCOL_PROMETHEUS.equals(metricsConfig.getProtocol())
-                && !DefaultApplicationDeployer.isSupportPrometheus();
+                && !MetricsSupportUtil.isSupportPrometheus();
         Assert.assertTrue(!importPrometheus, " should return false");
     }
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -389,7 +389,7 @@ private void initMetricsReporter() {
         Optional<MetricsConfig> configOptional = configManager.getMetrics();
         // If no specific metrics type is configured and there is no Prometheus dependency in the dependencies.
         MetricsConfig metricsConfig = configOptional.orElse(new MetricsConfig(applicationModel));
-        if (PROTOCOL_PROMETHEUS.equals(metricsConfig.getProtocol()) && !isSupportPrometheus()) {
+        if (PROTOCOL_PROMETHEUS.equals(metricsConfig.getProtocol()) && !MetricsSupportUtil.isSupportPrometheus()) {
             return;
         }
         if (StringUtils.isBlank(metricsConfig.getProtocol())) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JsonUtil.java
Patch:
@@ -26,6 +26,8 @@
 public interface JsonUtil {
     boolean isSupport();
 
+    boolean isJson(String json);
+
     <T> T toJavaObject(String json, Type type);
 
     <T> List<T> toJavaList(String json, Class<T> clazz);

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionDirectorTest.java
Patch:
@@ -45,8 +45,7 @@ void testInheritanceAndScope() {
         // 2. Child ExtensionDirector can get extension instance from parent
         // 3. Parent ExtensionDirector can't get extension instance from child
 
-        ExtensionDirector fwExtensionDirector =
-                new ExtensionDirector(null, ExtensionScope.FRAMEWORK, FrameworkModel.defaultModel());
+        ExtensionDirector fwExtensionDirector = FrameworkModel.defaultModel().getExtensionDirector();
         ExtensionDirector appExtensionDirector =
                 new ExtensionDirector(fwExtensionDirector, ExtensionScope.APPLICATION, ApplicationModel.defaultModel());
         ExtensionDirector moduleExtensionDirector = new ExtensionDirector(

File: dubbo-common/src/test/java/org/apache/dubbo/common/json/GsonUtilsTest.java
Patch:
@@ -36,7 +36,8 @@ void test1() {
             Assertions.fail();
         } catch (RuntimeException ex) {
             Assertions.assertEquals(
-                    "Generic serialization [gson] Json syntax exception thrown when parsing (message:{'name':'Tom','age':} type:class org.apache.dubbo.common.json.GsonUtilsTest$User) error:com.google.gson.stream.MalformedJsonException: Expected value at line 1 column 21 path $.age",
+                    "Generic serialization [gson] Json syntax exception thrown when parsing (message:{'name':'Tom','age':} type:class org.apache.dubbo.common.json.GsonUtilsTest$User) error:com.google.gson.stream.MalformedJsonException: Expected value at line 1 column 21 path $.age\n"
+                            + "See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json",
                     ex.getMessage());
         }
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -389,6 +389,9 @@ private void initMetricsReporter() {
         Optional<MetricsConfig> configOptional = configManager.getMetrics();
         // If no specific metrics type is configured and there is no Prometheus dependency in the dependencies.
         MetricsConfig metricsConfig = configOptional.orElse(new MetricsConfig(applicationModel));
+        if (PROTOCOL_PROMETHEUS.equals(metricsConfig.getProtocol()) && !isSupportPrometheus()) {
+            return;
+        }
         if (StringUtils.isBlank(metricsConfig.getProtocol())) {
             metricsConfig.setProtocol(
                     MetricsSupportUtil.isSupportPrometheus() ? PROTOCOL_PROMETHEUS : PROTOCOL_DEFAULT);

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/ExceptionUtilsTest.java
Patch:
@@ -91,7 +91,6 @@ void testSelfDefineException() throws Exception {
 
         URL providerUrl = URL.valueOf("tri://127.0.0.1:" + availablePort + "/" + IGreeter2.class.getName())
                 .addParameter(CommonConstants.TIMEOUT_KEY, 10000);
-        ;
 
         ModuleServiceRepository serviceRepository =
                 applicationModel.getDefaultModule().getServiceRepository();

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/DubboConfigurationProperties.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.dubbo.config.RestConfig;
 import org.apache.dubbo.config.SslConfig;
 import org.apache.dubbo.config.TracingConfig;
-import org.apache.dubbo.config.TripleConfig;
+import org.apache.dubbo.config.nested.TripleConfig;
 
 import java.util.LinkedHashMap;
 import java.util.Map;

File: dubbo-plugin/dubbo-rest-spring/src/test/java/org/apache/dubbo/rpc/protocol/tri/rest/support/spring/compatible/SpringDemoServiceImpl.java
Patch:
@@ -23,8 +23,10 @@
 import java.util.Map;
 
 import org.springframework.util.LinkedMultiValueMap;
+import org.springframework.web.bind.annotation.CrossOrigin;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 
+@CrossOrigin
 public class SpringDemoServiceImpl implements SpringRestDemoService {
     private static Map<String, Object> context;
     private boolean called;

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/AbstractServerHttpChannelObserver.java
Patch:
@@ -87,6 +87,7 @@ protected void doOnNext(Object data) throws Throwable {
     public final void onError(Throwable throwable) {
         if (throwable instanceof HttpResultPayloadException) {
             onNext(((HttpResultPayloadException) throwable).getResult());
+            doOnCompleted(null);
             return;
         }
         try {

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/HttpStatus.java
Patch:
@@ -20,6 +20,7 @@ public enum HttpStatus {
     OK(200),
     CREATED(201),
     ACCEPTED(202),
+    NO_CONTENT(204),
     FOUND(302),
     BAD_REQUEST(400),
     UNAUTHORIZED(401),

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/AbstractServerTransportListener.java
Patch:
@@ -162,10 +162,10 @@ protected void onDataCompletion(MESSAGE message) {
     protected void logError(Throwable t) {
         if (t instanceof HttpStatusException) {
             HttpStatusException e = (HttpStatusException) t;
-            if (e.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR.getCode()) {
+            if (e.getStatusCode() >= HttpStatus.BAD_REQUEST.getCode()) {
                 LOGGER.debug("http status exception", e);
-                return;
             }
+            return;
         }
         LOGGER.error(INTERNAL_ERROR, "", "", "server internal error", t);
     }

File: dubbo-metadata/dubbo-metadata-report-redis/src/test/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReportTest.java
Patch:
@@ -250,7 +250,8 @@ void testWrongAuthRedisMetadata() throws ClassNotFoundException {
             if (e.getCause() instanceof JedisConnectionException
                     && e.getCause().getCause() instanceof JedisDataException) {
                 Assertions.assertEquals(
-                        "ERR invalid password", e.getCause().getCause().getMessage());
+                        "WRONGPASS invalid username-password pair or user is disabled.",
+                        e.getCause().getCause().getMessage());
             } else {
                 Assertions.fail("no invalid password exception!");
             }

File: dubbo-plugin/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/Validator.java
Patch:
@@ -23,4 +23,6 @@
 public interface Validator {
 
     void validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) throws Exception;
+
+    boolean isSupport();
 }

File: dubbo-plugin/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/filter/ValidationFilter.java
Patch:
@@ -105,6 +105,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
     private boolean needValidate(URL url, String methodName) {
         return validation != null
                 && !methodName.startsWith("$")
-                && ConfigUtils.isNotEmpty(url.getMethodParameter(methodName, VALIDATION_KEY));
+                && ConfigUtils.isNotEmpty(url.getMethodParameter(methodName, VALIDATION_KEY))
+                && !"false".equalsIgnoreCase(url.getParameter(VALIDATION_KEY));
     }
 }

File: dubbo-plugin/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/jvalidation/JValidation.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.validation.support.jvalidation;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.validation.Validator;
 import org.apache.dubbo.validation.support.AbstractValidation;
 
@@ -25,6 +26,7 @@
  * @see AbstractValidation
  * @see Validator
  */
+@Activate(onClass = "javax.validation.Validation")
 public class JValidation extends AbstractValidation {
 
     /**

File: dubbo-plugin/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/jvalidation/JValidationNew.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.validation.support.jvalidation;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.validation.Validator;
 import org.apache.dubbo.validation.support.AbstractValidation;
 
@@ -25,6 +26,7 @@
  * @see AbstractValidation
  * @see Validator
  */
+@Activate(onClass = "jakarta.validation.Validation")
 public class JValidationNew extends AbstractValidation {
 
     /**

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -382,6 +382,9 @@ private void initMetricsReporter() {
         Optional<MetricsConfig> configOptional = configManager.getMetrics();
         // If no specific metrics type is configured and there is no Prometheus dependency in the dependencies.
         MetricsConfig metricsConfig = configOptional.orElse(new MetricsConfig(applicationModel));
+        if (PROTOCOL_PROMETHEUS.equals(metricsConfig.getProtocol()) && !isSupportPrometheus()) {
+            return;
+        }
         if (StringUtils.isBlank(metricsConfig.getProtocol())) {
             metricsConfig.setProtocol(isSupportPrometheus() ? PROTOCOL_PROMETHEUS : PROTOCOL_DEFAULT);
         }

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionDirectorTest.java
Patch:
@@ -45,8 +45,7 @@ void testInheritanceAndScope() {
         // 2. Child ExtensionDirector can get extension instance from parent
         // 3. Parent ExtensionDirector can't get extension instance from child
 
-        ExtensionDirector fwExtensionDirector =
-                new ExtensionDirector(null, ExtensionScope.FRAMEWORK, FrameworkModel.defaultModel());
+        ExtensionDirector fwExtensionDirector = FrameworkModel.defaultModel().getExtensionDirector();
         ExtensionDirector appExtensionDirector =
                 new ExtensionDirector(fwExtensionDirector, ExtensionScope.APPLICATION, ApplicationModel.defaultModel());
         ExtensionDirector moduleExtensionDirector = new ExtensionDirector(

File: dubbo-common/src/test/java/org/apache/dubbo/common/json/GsonUtilsTest.java
Patch:
@@ -36,7 +36,8 @@ void test1() {
             Assertions.fail();
         } catch (RuntimeException ex) {
             Assertions.assertEquals(
-                    "Generic serialization [gson] Json syntax exception thrown when parsing (message:{'name':'Tom','age':} type:class org.apache.dubbo.common.json.GsonUtilsTest$User) error:com.google.gson.stream.MalformedJsonException: Expected value at line 1 column 21 path $.age",
+                    "Generic serialization [gson] Json syntax exception thrown when parsing (message:{'name':'Tom','age':} type:class org.apache.dubbo.common.json.GsonUtilsTest$User) error:com.google.gson.stream.MalformedJsonException: Expected value at line 1 column 21 path $.age\n"
+                            + "See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json",
                     ex.getMessage());
         }
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2Protocol.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ScopeModelAware;
-import org.apache.dubbo.rpc.protocol.tri.h12.HttpServerAfterUpgradeHandler;
 import org.apache.dubbo.rpc.protocol.tri.h12.TripleProtocolDetector;
 import org.apache.dubbo.rpc.protocol.tri.h12.http1.DefaultHttp11ServerTransportListenerFactory;
 import org.apache.dubbo.rpc.protocol.tri.h12.http2.GenericHttp2ServerTransportListenerFactory;
@@ -160,7 +159,6 @@ private void configurerHttp1Handlers(URL url, List<ChannelHandler> handlers) {
                                 ConfigurationUtils.getGlobalConfiguration(url.getOrDefaultApplicationModel());
                         return new Http2ServerUpgradeCodec(
                                 buildHttp2FrameCodec(config, url.getOrDefaultApplicationModel()),
-                                new HttpServerAfterUpgradeHandler(),
                                 new HttpWriteQueueHandler(),
                                 new FlushConsolidationHandler(64, true),
                                 new TripleServerConnectionHandler(),

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java
Patch:
@@ -23,6 +23,8 @@
 public interface JSON {
     boolean isSupport();
 
+    boolean isJson(String json);
+
     <T> T toJavaObject(String json, Type type);
 
     <T> List<T> toJavaList(String json, Class<T> clazz);

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/message/LengthFieldStreamingDecoder.java
Patch:
@@ -95,6 +95,9 @@ private void deliver() {
         if (inDelivery) {
             return;
         }
+        if (closed) {
+            return;
+        }
         inDelivery = true;
         try {
             // Process the uncompressed bytes.

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/calls/ReactorServerCalls.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.rpc.StatusRpcException;
 import org.apache.dubbo.rpc.TriRpcStatus;
 import org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver;
-import org.apache.dubbo.rpc.protocol.tri.observer.ServerCallToObserverAdapter;
 
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
@@ -70,8 +69,7 @@ public static <T, R> void oneToOne(T request, StreamObserver<R> responseObserver
     public static <T, R> CompletableFuture<List<R>> oneToMany(
             T request, StreamObserver<R> responseObserver, Function<Mono<T>, Flux<R>> func) {
         try {
-            CallStreamObserver<R> callStreamObserver =
-                    (CallStreamObserver<R>) responseObserver;
+            CallStreamObserver<R> callStreamObserver = (CallStreamObserver<R>) responseObserver;
             Flux<R> response = func.apply(Mono.just(request));
             ServerTripleReactorSubscriber<R> reactorSubscriber =
                     new ServerTripleReactorSubscriber<>(callStreamObserver);

File: dubbo-common/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -28,7 +28,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.ENABLE_EMPTY_PROTECTION_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTER_MODE_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_CLUSTER_KEY;
 import static org.apache.dubbo.common.constants.RemotingConstants.BACKUP_KEY;
 import static org.apache.dubbo.common.utils.PojoUtils.updatePropertyIfAbsent;
 
@@ -241,7 +240,6 @@ public RegistryConfig(ApplicationModel applicationModel, String address, String
     }
 
     @Override
-    @Parameter(key = REGISTRY_CLUSTER_KEY)
     public String getId() {
         return super.getId();
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -336,7 +336,7 @@ private void startMetadataCenter() {
             }
         }
         metadataReportInstance.init(validMetadataReportConfigs);
-        if (!metadataReportInstance.inited()) {
+        if (!metadataReportInstance.isInitialized()) {
             throw new IllegalStateException(String.format(
                     "%s MetadataConfigs found, but none of them is valid.", metadataReportConfigs.size()));
         }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/exportmetadata/MultipleRegistryCenterExportMetadataIntegrationTest.java
Patch:
@@ -168,7 +168,6 @@ private void afterExport() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/exportprovider/MultipleRegistryCenterExportProviderIntegrationTest.java
Patch:
@@ -239,7 +239,6 @@ private void afterInvoke() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/injvm/MultipleRegistryCenterInjvmIntegrationTest.java
Patch:
@@ -185,7 +185,6 @@ private void afterInvoke() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/servicediscoveryregistry/MultipleRegistryCenterServiceDiscoveryRegistryIntegrationTest.java
Patch:
@@ -201,7 +201,6 @@ private void afterInvoke() {}
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // TODO: we need to check whether this scenario is normal
         // TODO: the Exporter and ServiceDiscoveryRegistry are same in multiple registry center

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/single/exportmetadata/SingleRegistryCenterExportMetadataIntegrationTest.java
Patch:
@@ -165,7 +165,6 @@ private void afterExport() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/single/exportprovider/SingleRegistryCenterExportProviderIntegrationTest.java
Patch:
@@ -240,7 +240,6 @@ private void afterInvoke() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/single/injvm/SingleRegistryCenterInjvmIntegrationTest.java
Patch:
@@ -185,7 +185,6 @@ private void afterInvoke() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/ReferenceCacheTest.java
Patch:
@@ -35,6 +35,7 @@ class ReferenceCacheTest {
     public void setUp() throws Exception {
         DubboBootstrap.reset();
         MockReferenceConfig.setCounter(0);
+        XxxMockReferenceConfig.setCounter(0);
         SimpleReferenceCache.CACHE_HOLDER.clear();
     }
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/LiveTest.java
Patch:
@@ -35,6 +35,7 @@ public void setUp() {
     @AfterEach
     public void reset() {
         frameworkModel.destroy();
+        MockLivenessProbe.setCheckReturnValue(false);
     }
 
     @Test

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/AbstractTripleReactorSubscriber.java
Patch:
@@ -53,7 +53,7 @@ public void subscribe(final CallStreamObserver<T> downstream) {
         if (downstream == null) {
             throw new NullPointerException();
         }
-        if (this.downstream == null && SUBSCRIBED.compareAndSet(false, true)) {
+        if (SUBSCRIBED.compareAndSet(false, true)) {
             this.downstream = downstream;
             subscription.request(1);
         }

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/handler/OneToManyMethodHandler.java
Patch:
@@ -42,7 +42,6 @@ public OneToManyMethodHandler(Function<Mono<T>, Flux<R>> func) {
     public CompletableFuture<?> invoke(Object[] arguments) {
         T request = (T) arguments[0];
         StreamObserver<R> responseObserver = (StreamObserver<R>) arguments[1];
-        ReactorServerCalls.oneToMany(request, responseObserver, func);
-        return CompletableFuture.completedFuture(null);
+        return ReactorServerCalls.oneToMany(request, responseObserver, func);
     }
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/AbstractServiceDiscovery.java
Patch:
@@ -84,7 +84,7 @@ public AbstractServiceDiscovery(ApplicationModel applicationModel, URL registryU
         this(applicationModel, applicationModel.getApplicationName(), registryURL);
         MetadataReportInstance metadataReportInstance =
                 applicationModel.getBeanFactory().getBean(MetadataReportInstance.class);
-        metadataType = metadataReportInstance.getMetadataType();
+        this.metadataType = metadataReportInstance.getMetadataType();
         this.metadataReport = metadataReportInstance.getMetadataReport(registryURL.getParameter(REGISTRY_CLUSTER_KEY));
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMapping.java
Patch:
@@ -109,7 +109,7 @@ public boolean map(URL url) {
                         String[] oldAppNames = oldConfigContent.split(",");
                         if (oldAppNames.length > 0) {
                             for (String oldAppName : oldAppNames) {
-                                if (oldAppName.equals(appName)) {
+                                if (StringUtils.trim(oldAppName).equals(appName)) {
                                     succeeded = true;
                                     break;
                                 }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java
Patch:
@@ -317,7 +317,7 @@ public static Long convertToNumber(Object obj) {
                 timeout = Long.parseLong((String) obj);
             } else if (obj instanceof Number) {
                 timeout = ((Number) obj).longValue();
-            } else {
+            } else if (obj != null) {
                 timeout = Long.parseLong(obj.toString());
             }
         } catch (Exception e) {

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/AbstractTripleReactorSubscriber.java
Patch:
@@ -53,7 +53,7 @@ public void subscribe(final CallStreamObserver<T> downstream) {
         if (downstream == null) {
             throw new NullPointerException();
         }
-        if (this.downstream == null && SUBSCRIBED.compareAndSet(false, true)) {
+        if (SUBSCRIBED.compareAndSet(false, true)) {
             this.downstream = downstream;
             subscription.request(1);
         }

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/handler/OneToManyMethodHandler.java
Patch:
@@ -42,7 +42,6 @@ public OneToManyMethodHandler(Function<Mono<T>, Flux<R>> func) {
     public CompletableFuture<?> invoke(Object[] arguments) {
         T request = (T) arguments[0];
         StreamObserver<R> responseObserver = (StreamObserver<R>) arguments[1];
-        ReactorServerCalls.oneToMany(request, responseObserver, func);
-        return CompletableFuture.completedFuture(null);
+        return ReactorServerCalls.oneToMany(request, responseObserver, func);
     }
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ClassGeneratorTest.java
Patch:
@@ -57,7 +57,8 @@ void test() throws Exception {
         ClassGenerator cg = ClassGenerator.newInstance();
 
         // add className, interface, superClass
-        String className = BaseClass.class.getPackage().getName() + ".TestClass";
+        String className = BaseClass.class.getPackage().getName() + ".TestClass"
+                + UUID.randomUUID().toString().replace("-", "");
         cg.setClassName(className);
         cg.addInterface(BaseInterface.class);
         cg.setSuperClass(BaseClass.class);
@@ -212,7 +213,7 @@ void testMain0() throws Exception {
         fname.setAccessible(true);
 
         ClassGenerator cg = ClassGenerator.newInstance();
-        cg.setClassName(Bean.class.getName() + "$Builder2");
+        cg.setClassName(Bean.class.getName() + "$Builder2" + UUID.randomUUID().toString());
         cg.addInterface(Builder.class);
 
         cg.addField("FNAME", Modifier.PUBLIC | Modifier.STATIC, java.lang.reflect.Field.class);

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/exportmetadata/MultipleRegistryCenterExportMetadataIntegrationTest.java
Patch:
@@ -172,7 +172,6 @@ private void afterExport() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/exportprovider/MultipleRegistryCenterExportProviderIntegrationTest.java
Patch:
@@ -239,7 +239,6 @@ private void afterInvoke() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/injvm/MultipleRegistryCenterInjvmIntegrationTest.java
Patch:
@@ -185,7 +185,6 @@ private void afterInvoke() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/servicediscoveryregistry/MultipleRegistryCenterServiceDiscoveryRegistryIntegrationTest.java
Patch:
@@ -201,7 +201,6 @@ private void afterInvoke() {}
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // TODO: we need to check whether this scenario is normal
         // TODO: the Exporter and ServiceDiscoveryRegistry are same in multiple registry center

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/single/exportmetadata/SingleRegistryCenterExportMetadataIntegrationTest.java
Patch:
@@ -169,7 +169,6 @@ private void afterExport() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/single/exportprovider/SingleRegistryCenterExportProviderIntegrationTest.java
Patch:
@@ -240,7 +240,6 @@ private void afterInvoke() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/single/injvm/SingleRegistryCenterInjvmIntegrationTest.java
Patch:
@@ -185,7 +185,6 @@ private void afterInvoke() {
     @AfterEach
     public void tearDown() throws IOException {
         DubboBootstrap.reset();
-        PROVIDER_APPLICATION_NAME = null;
         serviceConfig = null;
         // The exported service has been unexported
         Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/ReferenceCacheTest.java
Patch:
@@ -35,6 +35,7 @@ class ReferenceCacheTest {
     public void setUp() throws Exception {
         DubboBootstrap.reset();
         MockReferenceConfig.setCounter(0);
+        XxxMockReferenceConfig.setCounter(0);
         SimpleReferenceCache.CACHE_HOLDER.clear();
     }
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/LiveTest.java
Patch:
@@ -35,6 +35,7 @@ public void setUp() {
     @AfterEach
     public void reset() {
         frameworkModel.destroy();
+        MockLivenessProbe.setCheckReturnValue(false);
     }
 
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ClassGeneratorTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
 import java.util.concurrent.CountDownLatch;
 import javassist.ClassPool;
 
@@ -184,7 +185,7 @@ void testMain() throws Exception {
         fname.setAccessible(true);
 
         ClassGenerator cg = ClassGenerator.newInstance();
-        cg.setClassName(Bean.class.getName() + "$Builder");
+        cg.setClassName(Bean.class.getName() + "$Builder" + UUID.randomUUID().toString());
         cg.addInterface(Builder.class);
 
         cg.addField("public static java.lang.reflect.Field FNAME;");

File: dubbo-common/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -28,7 +28,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.ENABLE_EMPTY_PROTECTION_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTER_MODE_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_CLUSTER_KEY;
 import static org.apache.dubbo.common.constants.RemotingConstants.BACKUP_KEY;
 import static org.apache.dubbo.common.utils.PojoUtils.updatePropertyIfAbsent;
 
@@ -221,7 +220,6 @@ public RegistryConfig(ApplicationModel applicationModel, String address, String
     }
 
     @Override
-    @Parameter(key = REGISTRY_CLUSTER_KEY)
     public String getId() {
         return super.getId();
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -329,7 +329,7 @@ private void startMetadataCenter() {
             }
         }
         metadataReportInstance.init(validMetadataReportConfigs);
-        if (!metadataReportInstance.inited()) {
+        if (!metadataReportInstance.isInitialized()) {
             throw new IllegalStateException(String.format(
                     "%s MetadataConfigs found, but none of them is valid.", metadataReportConfigs.size()));
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/AbstractServiceDiscovery.java
Patch:
@@ -84,7 +84,7 @@ public AbstractServiceDiscovery(ApplicationModel applicationModel, URL registryU
         this(applicationModel, applicationModel.getApplicationName(), registryURL);
         MetadataReportInstance metadataReportInstance =
                 applicationModel.getBeanFactory().getBean(MetadataReportInstance.class);
-        metadataType = metadataReportInstance.getMetadataType();
+        this.metadataType = metadataReportInstance.getMetadataType();
         this.metadataReport = metadataReportInstance.getMetadataReport(registryURL.getParameter(REGISTRY_CLUSTER_KEY));
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/http2/GenericHttp2ServerTransportListener.java
Patch:
@@ -86,6 +86,7 @@ protected Executor initializeExecutor(Http2Header metadata) {
         return new SerializingExecutor(executorSupport.getExecutor(metadata));
     }
 
+    @Override
     protected void doOnMetadata(Http2Header metadata) {
         if (metadata.isEndStream()) {
             if (!HttpMethods.supportBody(metadata.method())) {
@@ -164,7 +165,7 @@ protected void onMetadataCompletion(Http2Header metadata) {
     @Override
     protected void onDataCompletion(Http2InputMessage message) {
         if (message.isEndStream()) {
-            serverCallListener.onComplete();
+            getStreamingDecoder().close();
         }
     }
 

File: dubbo-metadata/dubbo-metadata-report-redis/src/test/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReportTest.java
Patch:
@@ -259,7 +259,8 @@ void testWrongAuthRedisMetadata() throws ClassNotFoundException {
             if (e.getCause() instanceof JedisConnectionException
                     && e.getCause().getCause() instanceof JedisDataException) {
                 Assertions.assertEquals(
-                        "ERR invalid password", e.getCause().getCause().getMessage());
+                        "WRONGPASS invalid username-password pair or user is disabled.",
+                        e.getCause().getCause().getMessage());
             } else {
                 Assertions.fail("no invalid password exception!");
             }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/TripleServerStream.java
Patch:
@@ -461,6 +461,7 @@ public void onData(ByteBuf data, boolean endStream) {
 
         private void doOnData(ByteBuf data, boolean endStream) {
             if (deframer == null) {
+                ReferenceCountUtil.release(data);
                 return;
             }
             deframer.deframe(data);

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/h1/Http1ServerChannelObserver.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.remoting.http12.AbstractServerHttpChannelObserver;
 import org.apache.dubbo.remoting.http12.HttpChannel;
 import org.apache.dubbo.remoting.http12.HttpChannelObserver;
-import org.apache.dubbo.remoting.http12.HttpHeaderNames;
 import org.apache.dubbo.remoting.http12.HttpHeaders;
 import org.apache.dubbo.remoting.http12.HttpMetadata;
 import org.apache.dubbo.remoting.http12.HttpOutputMessage;
@@ -34,7 +33,6 @@ public Http1ServerChannelObserver(HttpChannel httpChannel) {
     @Override
     protected HttpMetadata encodeHttpMetadata() {
         HttpHeaders httpHeaders = new HttpHeaders();
-        httpHeaders.set(HttpHeaderNames.TRANSFER_ENCODING.getName(), "chunked");
         return new Http1Metadata(httpHeaders);
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/http1/DefaultHttp11ServerTransportListener.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dubbo.remoting.http12.h1.Http1ServerChannelObserver;
 import org.apache.dubbo.remoting.http12.h1.Http1ServerStreamChannelObserver;
 import org.apache.dubbo.remoting.http12.h1.Http1ServerTransportListener;
+import org.apache.dubbo.remoting.http12.h1.Http1ServerUnaryChannelObserver;
 import org.apache.dubbo.remoting.http12.message.DefaultListeningDecoder;
 import org.apache.dubbo.remoting.http12.message.MediaType;
 import org.apache.dubbo.remoting.http12.message.codec.JsonCodec;
@@ -58,7 +59,7 @@ public DefaultHttp11ServerTransportListener(HttpChannel httpChannel, URL url, Fr
         executorSupport = ExecutorRepository.getInstance(url.getOrDefaultApplicationModel())
                 .getExecutorSupport(url);
         this.httpChannel = httpChannel;
-        serverChannelObserver = new Http1ServerChannelObserver(httpChannel);
+        serverChannelObserver = new Http1ServerUnaryChannelObserver(httpChannel);
         serverChannelObserver.setResponseEncoder(JsonCodec.INSTANCE);
     }
 

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/ConnectionTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
 
+import java.time.Duration;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -39,6 +40,7 @@
 import org.junit.jupiter.api.Test;
 
 import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_MANAGEMENT_MODE_DEFAULT;
+import static org.awaitility.Awaitility.await;
 
 public class ConnectionTest {
 
@@ -138,6 +140,7 @@ void connectSyncTest() throws Throwable {
 
         nettyPortUnificationServer.bind();
         // auto reconnect
+        await().atMost(Duration.ofSeconds(100)).until(() -> connectionClient.isAvailable());
         Assertions.assertTrue(connectionClient.isAvailable());
 
         connectionClient.close();

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -346,6 +346,7 @@ protected synchronized void init(boolean check) {
             if (CommonConstants.NATIVE_STUB.equals(getProxy())) {
                 serviceDescriptor = StubSuppliers.getServiceDescriptor(interfaceName);
                 repository.registerService(serviceDescriptor);
+                setInterface(serviceDescriptor.getInterfaceName());
             } else {
                 serviceDescriptor = repository.registerService(interfaceClass);
             }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/SingleRouterChain.java
Patch:
@@ -212,7 +212,7 @@ private void printRouterSnapshot(URL url, BitList<Invoker<T>> availableInvokers,
     public RouterSnapshotNode<T> buildRouterSnapshot(
             URL url, BitList<Invoker<T>> availableInvokers, Invocation invocation) {
         BitList<Invoker<T>> resultInvokers = availableInvokers.clone();
-        RouterSnapshotNode<T> parentNode = new RouterSnapshotNode<T>("Parent", resultInvokers.clone());
+        RouterSnapshotNode<T> parentNode = new RouterSnapshotNode<>("Parent", resultInvokers.clone());
         parentNode.setNodeOutputInvokers(resultInvokers.clone());
 
         // 1. route state router
@@ -227,7 +227,7 @@ public RouterSnapshotNode<T> buildRouterSnapshot(
             return parentNode;
         }
 
-        RouterSnapshotNode<T> commonRouterNode = new RouterSnapshotNode<T>("CommonRouter", resultInvokers.clone());
+        RouterSnapshotNode<T> commonRouterNode = new RouterSnapshotNode<>("CommonRouter", resultInvokers.clone());
         parentNode.appendNode(commonRouterNode);
         List<Invoker<T>> commonRouterResult = resultInvokers;
 
@@ -237,7 +237,7 @@ public RouterSnapshotNode<T> buildRouterSnapshot(
             List<Invoker<T>> inputInvokers = new ArrayList<>(commonRouterResult);
 
             RouterSnapshotNode<T> currentNode =
-                    new RouterSnapshotNode<T>(router.getClass().getSimpleName(), inputInvokers);
+                    new RouterSnapshotNode<>(router.getClass().getSimpleName(), inputInvokers);
 
             // append to router node chain
             commonRouterNode.appendNode(currentNode);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/AbstractConfigurator.java
Patch:
@@ -223,7 +223,7 @@ private boolean isDeprecatedConditionMatch(Set<String> conditionKeys, URL url) {
     }
 
     private Set<String> genConditionKeys() {
-        Set<String> conditionKeys = new HashSet<String>();
+        Set<String> conditionKeys = new HashSet<>();
         conditionKeys.add(CATEGORY_KEY);
         conditionKeys.add(Constants.CHECK_KEY);
         conditionKeys.add(DYNAMIC_KEY);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalance.java
Patch:
@@ -46,8 +46,7 @@ public class ConsistentHashLoadBalance extends AbstractLoadBalance {
      */
     public static final String HASH_ARGUMENTS = "hash.arguments";
 
-    private final ConcurrentMap<String, ConsistentHashSelector<?>> selectors =
-            new ConcurrentHashMap<String, ConsistentHashSelector<?>>();
+    private final ConcurrentMap<String, ConsistentHashSelector<?>> selectors = new ConcurrentHashMap<>();
 
     @SuppressWarnings("unchecked")
     @Override
@@ -75,7 +74,7 @@ private static final class ConsistentHashSelector<T> {
         private final int[] argumentIndex;
 
         ConsistentHashSelector(List<Invoker<T>> invokers, String methodName, int identityHashCode) {
-            this.virtualInvokers = new TreeMap<Long, Invoker<T>>();
+            this.virtualInvokers = new TreeMap<>();
             this.identityHashCode = identityHashCode;
             URL url = invokers.get(0).getUrl();
             this.replicaNumber = url.getMethodParameter(methodName, HASH_NODES, 160);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/MapMerger.java
Patch:
@@ -32,7 +32,7 @@ public class MapMerger implements Merger<Map<?, ?>> {
         if (ArrayUtils.isEmpty(items)) {
             return Collections.emptyMap();
         }
-        Map<Object, Object> result = new HashMap<Object, Object>();
+        Map<Object, Object> result = new HashMap<>();
         Stream.of(items).filter(Objects::nonNull).forEach(result::putAll);
         return result;
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/MergerFactory.java
Patch:
@@ -36,7 +36,7 @@ public class MergerFactory implements ScopeModelAware {
 
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(MergerFactory.class);
 
-    private ConcurrentMap<Class<?>, Merger<?>> MERGER_CACHE = new ConcurrentHashMap<Class<?>, Merger<?>>();
+    private ConcurrentMap<Class<?>, Merger<?>> MERGER_CACHE = new ConcurrentHashMap<>();
     private ScopeModel scopeModel;
 
     @Override

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/SetMerger.java
Patch:
@@ -32,7 +32,7 @@ public Set<Object> merge(Set<?>... items) {
         if (ArrayUtils.isEmpty(items)) {
             return Collections.emptySet();
         }
-        Set<Object> result = new HashSet<Object>();
+        Set<Object> result = new HashSet<>();
         Stream.of(items).filter(Objects::nonNull).forEach(result::addAll);
         return result;
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionStateRouterFactory.java
Patch:
@@ -30,6 +30,6 @@ public class ConditionStateRouterFactory extends CacheableStateRouterFactory {
 
     @Override
     protected <T> StateRouter<T> createRouter(Class<T> interfaceClass, URL url) {
-        return new ConditionStateRouter<T>(url);
+        return new ConditionStateRouter<>(url);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ServiceStateRouterFactory.java
Patch:
@@ -32,6 +32,6 @@ public class ServiceStateRouterFactory extends CacheableStateRouterFactory {
 
     @Override
     protected <T> StateRouter<T> createRouter(Class<T> interfaceClass, URL url) {
-        return new ServiceStateRouter<T>(url);
+        return new ServiceStateRouter<>(url);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleCache.java
Patch:
@@ -136,7 +136,7 @@ public static <T> MeshRuleCache<T> build(
                     Collections.unmodifiableMap(totalSubsetMap),
                     unmatchedInvokers);
         } else {
-            return new MeshRuleCache<T>(
+            return new MeshRuleCache<>(
                     Collections.emptyList(), Collections.emptyMap(), Collections.emptyMap(), invokers);
         }
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockStateRouterFactory.java
Patch:
@@ -30,6 +30,6 @@ public class MockStateRouterFactory implements StateRouterFactory {
 
     @Override
     public <T> StateRouter<T> getRouter(Class<T> interfaceClass, URL url) {
-        return new MockInvokersSelector<T>(url);
+        return new MockInvokersSelector<>(url);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStateRouterFactory.java
Patch:
@@ -31,6 +31,6 @@ public class TagStateRouterFactory extends CacheableStateRouterFactory {
 
     @Override
     protected <T> StateRouter<T> createRouter(Class<T> interfaceClass, URL url) {
-        return new TagStateRouter<T>(url);
+        return new TagStateRouter<>(url);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvoker.java
Patch:
@@ -63,8 +63,8 @@ public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, L
         int len = calculateInvokeTimes(methodName);
         // retry loop.
         RpcException le = null; // last exception.
-        List<Invoker<T>> invoked = new ArrayList<Invoker<T>>(copyInvokers.size()); // invoked invokers.
-        Set<String> providers = new HashSet<String>(len);
+        List<Invoker<T>> invoked = new ArrayList<>(copyInvokers.size()); // invoked invokers.
+        Set<String> providers = new HashSet<>(len);
         for (int i = 0; i < len; i++) {
             // Reselect before retry to avoid a change of candidate `invokers`.
             // NOTE: if `invokers` changed, then `invoked` also lose accuracy.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableCluster.java
Patch:
@@ -26,6 +26,6 @@ public class MergeableCluster extends AbstractCluster {
 
     @Override
     public <T> AbstractClusterInvoker<T> doJoin(Directory<T> directory) throws RpcException {
-        return new MergeableClusterInvoker<T>(directory);
+        return new MergeableClusterInvoker<>(directory);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/registry/ZoneAwareCluster.java
Patch:
@@ -27,6 +27,6 @@ public class ZoneAwareCluster extends AbstractCluster {
 
     @Override
     protected <T> AbstractClusterInvoker<T> doJoin(Directory<T> directory) throws RpcException {
-        return new ZoneAwareClusterInvoker<T>(directory);
+        return new ZoneAwareClusterInvoker<>(directory);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterWrapper.java
Patch:
@@ -35,7 +35,7 @@ public MockClusterWrapper(Cluster cluster) {
 
     @Override
     public <T> Invoker<T> join(Directory<T> directory, boolean buildFilterChain) throws RpcException {
-        return new MockClusterInvoker<T>(directory, this.cluster.join(directory, buildFilterChain));
+        return new MockClusterInvoker<>(directory, this.cluster.join(directory, buildFilterChain));
     }
 
     public Cluster getCluster() {

File: dubbo-common/src/main/java/org/apache/dubbo/common/Version.java
Patch:
@@ -60,7 +60,7 @@ public final class Version {
     public static final int LOWEST_VERSION_FOR_RESPONSE_ATTACHMENT = 2000200; // 2.0.2
 
     public static final int HIGHEST_PROTOCOL_VERSION = 2009900; // 2.0.99
-    private static final Map<String, Integer> VERSION2INT = new HashMap<String, Integer>();
+    private static final Map<String, Integer> VERSION2INT = new HashMap<>();
 
     static {
         // get dubbo version and last commit id

File: dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java
Patch:
@@ -35,7 +35,7 @@
 public final class JavaBeanSerializeUtil {
 
     private static final Logger logger = LoggerFactory.getLogger(JavaBeanSerializeUtil.class);
-    private static final Map<String, Class<?>> TYPES = new HashMap<String, Class<?>>();
+    private static final Map<String, Class<?>> TYPES = new HashMap<>();
     private static final String ARRAY_PREFIX = "[";
     private static final String REFERENCE_TYPE_PREFIX = "L";
     private static final String REFERENCE_TYPE_SUFFIX = ";";
@@ -72,7 +72,7 @@ public static JavaBeanDescriptor serialize(Object obj, JavaBeanAccessor accessor
         if (obj instanceof JavaBeanDescriptor) {
             return (JavaBeanDescriptor) obj;
         }
-        IdentityHashMap<Object, JavaBeanDescriptor> cache = new IdentityHashMap<Object, JavaBeanDescriptor>();
+        IdentityHashMap<Object, JavaBeanDescriptor> cache = new IdentityHashMap<>();
         return createDescriptorIfAbsent(obj, accessor, cache);
     }
 
@@ -209,7 +209,7 @@ public static Object deserialize(JavaBeanDescriptor beanDescriptor, ClassLoader
         if (beanDescriptor == null) {
             return null;
         }
-        IdentityHashMap<JavaBeanDescriptor, Object> cache = new IdentityHashMap<JavaBeanDescriptor, Object>();
+        IdentityHashMap<JavaBeanDescriptor, Object> cache = new IdentityHashMap<>();
         Object result = instantiateForDeserialize(beanDescriptor, loader, cache);
         deserializeInternal(result, beanDescriptor, loader, cache);
         return result;

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java
Patch:
@@ -120,7 +120,7 @@ public static Mixin mixin(Class<?>[] ics, Class<?>[] dcs, ClassLoader cl) {
 
             Class<?> neighbor = null;
             // impl methods.
-            Set<String> worked = new HashSet<String>();
+            Set<String> worked = new HashSet<>();
             for (int i = 0; i < ics.length; i++) {
                 if (!Modifier.isPublic(ics[i].getModifiers())) {
                     String npkg = ics[i].getPackage().getName();

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java
Patch:
@@ -42,8 +42,8 @@
  * Wrapper.
  */
 public abstract class Wrapper {
-    private static final ConcurrentMap<Class<?>, Wrapper> WRAPPER_MAP =
-            new ConcurrentHashMap<Class<?>, Wrapper>(); // class wrapper map
+    // class wrapper map
+    private static final ConcurrentMap<Class<?>, Wrapper> WRAPPER_MAP = new ConcurrentHashMap<>();
     private static final String[] EMPTY_STRING_ARRAY = new String[0];
     private static final String[] OBJECT_METHODS = new String[] {"getClass", "hashCode", "toString", "equals"};
     private static final Wrapper OBJECT_WRAPPER = new Wrapper() {

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/ClassUtils.java
Patch:
@@ -392,7 +392,7 @@ public static String getInitCode(Class<?> type) {
     }
 
     public static <K, V> Map<K, V> toMap(Map.Entry<K, V>[] entries) {
-        Map<K, V> map = new HashMap<K, V>();
+        Map<K, V> map = new HashMap<>();
         if (entries != null && entries.length > 0) {
             for (Map.Entry<K, V> entry : entries) {
                 map.put(entry.getKey(), entry.getValue());

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalMap.java
Patch:
@@ -28,7 +28,7 @@ public final class InternalThreadLocalMap {
 
     private Object[] indexedVariables;
 
-    private static ThreadLocal<InternalThreadLocalMap> slowThreadLocalMap = new ThreadLocal<InternalThreadLocalMap>();
+    private static ThreadLocal<InternalThreadLocalMap> slowThreadLocalMap = new ThreadLocal<>();
 
     private static final AtomicInteger NEXT_INDEX = new AtomicInteger();
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/timer/HashedWheelTimer.java
Patch:
@@ -427,7 +427,7 @@ private static void reportTooManyInstances() {
     }
 
     private final class Worker implements Runnable {
-        private final Set<Timeout> unprocessedTimeouts = new HashSet<Timeout>();
+        private final Set<Timeout> unprocessedTimeouts = new HashSet<>();
 
         private long tick;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/CIDRUtils.java
Patch:
@@ -98,7 +98,7 @@ private void calculate() throws UnknownHostException {
 
     private byte[] toBytes(byte[] array, int targetSize) {
         int counter = 0;
-        List<Byte> newArr = new ArrayList<Byte>();
+        List<Byte> newArr = new ArrayList<>();
         while (counter < targetSize && (array.length - 1 - counter >= 0)) {
             newArr.add(0, array[array.length - 1 - counter]);
             counter++;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConfigUtils.java
Patch:
@@ -87,7 +87,7 @@ public static boolean isDefault(String value) {
      */
     public static List<String> mergeValues(
             ExtensionDirector extensionDirector, Class<?> type, String cfg, List<String> def) {
-        List<String> defaults = new ArrayList<String>();
+        List<String> defaults = new ArrayList<>();
         if (def != null) {
             for (String name : def) {
                 if (extensionDirector.getExtensionLoader(type).hasExtension(name)) {
@@ -96,7 +96,7 @@ public static List<String> mergeValues(
             }
         }
 
-        List<String> names = new ArrayList<String>();
+        List<String> names = new ArrayList<>();
 
         // add initial values
         String[] configs = (cfg == null || cfg.trim().length() == 0) ? new String[0] : COMMA_SPLIT_PATTERN.split(cfg);

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java
Patch:
@@ -179,7 +179,7 @@ public static String[] readLines(File file) throws IOException {
      * @throws IOException If an I/O error occurs
      */
     public static String[] readLines(InputStream is) throws IOException {
-        List<String> lines = new ArrayList<String>();
+        List<String> lines = new ArrayList<>();
         try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {
             String line;
             while ((line = reader.readLine()) != null) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/Stack.java
Patch:
@@ -26,7 +26,7 @@
 public class Stack<E> {
     private int mSize = 0;
 
-    private final List<E> mElements = new ArrayList<E>();
+    private final List<E> mElements = new ArrayList<>();
 
     public Stack() {}
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java
Patch:
@@ -861,7 +861,7 @@ public static String join(Collection<String> coll, String split) {
      */
     private static Map<String, String> parseKeyValuePair(String str, String itemSeparator) {
         String[] tmp = str.split(itemSeparator);
-        Map<String, String> map = new HashMap<String, String>(tmp.length);
+        Map<String, String> map = new HashMap<>(tmp.length);
         for (int i = 0; i < tmp.length; i++) {
             Matcher matcher = KVP_PATTERN.matcher(tmp[i]);
             if (!matcher.matches()) {
@@ -885,7 +885,7 @@ public static String getQueryStringValue(String qs, String key) {
      */
     public static Map<String, String> parseQueryString(String qs) {
         if (isEmpty(qs)) {
-            return new HashMap<String, String>();
+            return new HashMap<>();
         }
         return parseKeyValuePair(qs, "\\&");
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java
Patch:
@@ -181,7 +181,7 @@ public static List<URL> parseURLs(String address, Map<String, String> defaults)
             throw new IllegalArgumentException(
                     "Addresses is not allowed to be empty, please re-enter."); // here won't be empty
         }
-        List<URL> registries = new ArrayList<URL>();
+        List<URL> registries = new ArrayList<>();
         for (String addr : addresses) {
             registries.add(parseURL(addr, defaults));
         }

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -204,7 +204,7 @@ public AbstractInterfaceConfig(ModuleModel moduleModel) {
     /**
      * The url of the reference service
      */
-    protected final transient List<URL> urls = new ArrayList<URL>();
+    protected final transient List<URL> urls = new ArrayList<>();
 
     @Transient
     public List<URL> getExportedUrls() {

File: dubbo-common/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -361,7 +361,7 @@ public RegistryConfig getRegistry() {
     }
 
     public void setRegistry(RegistryConfig registry) {
-        List<RegistryConfig> registries = new ArrayList<RegistryConfig>(1);
+        List<RegistryConfig> registries = new ArrayList<>(1);
         registries.add(registry);
         this.registries = registries;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ModuleConfig.java
Patch:
@@ -186,7 +186,7 @@ public RegistryConfig getRegistry() {
     }
 
     public void setRegistry(RegistryConfig registry) {
-        List<RegistryConfig> registries = new ArrayList<RegistryConfig>(1);
+        List<RegistryConfig> registries = new ArrayList<>(1);
         registries.add(registry);
         this.registries = registries;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/metadata/definition/util/ClassUtils.java
Patch:
@@ -96,7 +96,7 @@ public static List<Field> getNonStaticFields(final Class<?> clazz) {
      * @return methods list
      */
     public static List<Method> getPublicNonStaticMethods(final Class<?> clazz) {
-        List<Method> result = new ArrayList<Method>();
+        List<Method> result = new ArrayList<>();
 
         Method[] methods = clazz.getMethods();
         for (Method method : methods) {

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ProviderModel.java
Patch:
@@ -135,7 +135,7 @@ public void setRegistryUrl(URL registryUrl) {
     }
 
     public List<ProviderMethodModel> getAllMethodModels() {
-        List<ProviderMethodModel> result = new ArrayList<ProviderMethodModel>();
+        List<ProviderMethodModel> result = new ArrayList<>();
         for (List<ProviderMethodModel> models : methods.values()) {
             result.addAll(models);
         }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/cache/support/AbstractCacheFactory.java
Patch:
@@ -30,7 +30,7 @@
 @Deprecated
 public abstract class AbstractCacheFactory implements CacheFactory {
 
-    private final ConcurrentMap<String, Cache> caches = new ConcurrentHashMap<String, Cache>();
+    private final ConcurrentMap<String, Cache> caches = new ConcurrentHashMap<>();
 
     @Override
     public Cache getCache(URL url, Invocation invocation) {

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/config/ServiceConfig.java
Patch:
@@ -86,7 +86,7 @@ private static List<ProtocolConfig> convertProviderToProtocol(List<ProviderConfi
         if (providers == null || providers.isEmpty()) {
             return null;
         }
-        List<ProtocolConfig> protocols = new ArrayList<ProtocolConfig>(providers.size());
+        List<ProtocolConfig> protocols = new ArrayList<>(providers.size());
         for (ProviderConfig provider : providers) {
             protocols.add(convertProviderToProtocol(provider));
         }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/container/page/Page.java
Patch:
@@ -57,8 +57,8 @@ public Page(String navigation, String title, List<String> columns, List<List<Str
     }
 
     private static List<List<String>> stringToList(String str) {
-        List<List<String>> rows = new ArrayList<List<String>>();
-        List<String> row = new ArrayList<String>();
+        List<List<String>> rows = new ArrayList<>();
+        List<String> row = new ArrayList<>();
         row.add(str);
         rows.add(row);
         return rows;

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/container/page/PageServlet.java
Patch:
@@ -49,8 +49,8 @@ public class PageServlet extends HttpServlet {
     private static final long serialVersionUID = -8370312705453328501L;
     private static PageServlet INSTANCE;
     protected final Random random = new Random();
-    protected final Map<String, PageHandler> pages = new ConcurrentHashMap<String, PageHandler>();
-    protected final List<PageHandler> menus = new ArrayList<PageHandler>();
+    protected final Map<String, PageHandler> pages = new ConcurrentHashMap<>();
+    protected final List<PageHandler> menus = new ArrayList<>();
 
     public static PageServlet getInstance() {
         return INSTANCE;

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/container/page/ResourceFilter.java
Patch:
@@ -46,7 +46,7 @@ public class ResourceFilter implements Filter {
 
     private final long start = System.currentTimeMillis();
 
-    private final List<String> resources = new ArrayList<String>();
+    private final List<String> resources = new ArrayList<>();
 
     public void init(FilterConfig filterConfig) throws ServletException {
         String config = filterConfig.getInitParameter("resources");

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/container/page/pages/HomePageHandler.java
Patch:
@@ -35,11 +35,11 @@ public class HomePageHandler implements PageHandler {
 
     @Override
     public Page handle(URL url) {
-        List<List<String>> rows = new ArrayList<List<String>>();
+        List<List<String>> rows = new ArrayList<>();
         for (PageHandler handler : PageServlet.getInstance().getMenus()) {
             String uri = ExtensionLoader.getExtensionLoader(PageHandler.class).getExtensionName(handler);
             Menu menu = handler.getClass().getAnnotation(Menu.class);
-            List<String> row = new ArrayList<String>();
+            List<String> row = new ArrayList<>();
             row.add("<a href=\"" + uri + ".html\">" + menu.name() + "</a>");
             row.add(menu.desc());
             rows.add(row);

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/container/page/pages/LogPageHandler.java
Patch:
@@ -97,8 +97,8 @@ public Page handle(URL url) {
             }
         }
         Level level = LogManager.getRootLogger().getLevel();
-        List<List<String>> rows = new ArrayList<List<String>>();
-        List<String> row = new ArrayList<String>();
+        List<List<String>> rows = new ArrayList<>();
+        List<String> row = new ArrayList<>();
         row.add(content);
         rows.add(row);
         return new Page(

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/RpcContext.java
Patch:
@@ -353,7 +353,7 @@ public <T> Future<T> asyncCall(Callable<T> callable) {
                 final T o = callable.call();
                 // local invoke will return directly
                 if (o != null) {
-                    FutureTask<T> f = new FutureTask<T>(new Callable<T>() {
+                    FutureTask<T> f = new FutureTask<>(new Callable<T>() {
                         @Override
                         public T call() throws Exception {
                             return o;

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/RpcInvocation.java
Patch:
@@ -162,14 +162,14 @@ public void setAttachments(Map<String, String> attachments) {
 
     public void setAttachment(String key, String value) {
         if (attachments == null) {
-            attachments = new HashMap<String, String>();
+            attachments = new HashMap<>();
         }
         attachments.put(key, value);
     }
 
     public void setAttachmentIfAbsent(String key, String value) {
         if (attachments == null) {
-            attachments = new HashMap<String, String>();
+            attachments = new HashMap<>();
         }
         if (!attachments.containsKey(key)) {
             attachments.put(key, value);
@@ -181,7 +181,7 @@ public void addAttachments(Map<String, String> attachments) {
             return;
         }
         if (this.attachments == null) {
-            this.attachments = new HashMap<String, String>();
+            this.attachments = new HashMap<>();
         }
         this.attachments.putAll(attachments);
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -128,7 +128,7 @@ public class ServiceConfig<T> extends ServiceConfigBase<T> {
     /**
      * A random port cache, the different protocols who have no port specified have different random port
      */
-    private static final Map<String, Integer> RANDOM_PORT_MAP = new HashMap<String, Integer>();
+    private static final Map<String, Integer> RANDOM_PORT_MAP = new HashMap<>();
 
     private Protocol protocolSPI;
 
@@ -651,7 +651,7 @@ private void processServiceExecutor(URL url) {
 
     private Map<String, String> buildAttributes(ProtocolConfig protocolConfig) {
 
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         map.put(SIDE_KEY, PROVIDER_SIDE);
 
         // append params with basic configs,

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigValidationUtils.java
Patch:
@@ -209,7 +209,7 @@ public static List<URL> loadRegistries(AbstractInterfaceConfig interfaceConfig,
                     address = ANYHOST_VALUE;
                 }
                 if (!RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(address)) {
-                    Map<String, String> map = new HashMap<String, String>();
+                    Map<String, String> map = new HashMap<>();
                     AbstractConfig.appendParameters(map, application);
                     AbstractConfig.appendParameters(map, config);
                     map.put(PATH_KEY, RegistryService.class.getName());
@@ -309,7 +309,7 @@ private static boolean registryNotExists(URL registryURL, List<URL> registryList
     }
 
     public static URL loadMonitor(AbstractInterfaceConfig interfaceConfig, URL registryURL) {
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         map.put(INTERFACE_KEY, MonitorService.class.getName());
         AbstractInterfaceConfig.appendRuntimeParameters(map);
         // set ip

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationBeanPostProcessor.java
Patch:
@@ -78,8 +78,7 @@ public abstract class AbstractAnnotationBeanPostProcessor
     private final Class<? extends Annotation>[] annotationTypes;
 
     private final ConcurrentMap<String, AbstractAnnotationBeanPostProcessor.AnnotatedInjectionMetadata>
-            injectionMetadataCache = new ConcurrentHashMap<
-                    String, AbstractAnnotationBeanPostProcessor.AnnotatedInjectionMetadata>(CACHE_SIZE);
+            injectionMetadataCache = new ConcurrentHashMap<>(CACHE_SIZE);
 
     private ConfigurableListableBeanFactory beanFactory;
 
@@ -98,7 +97,7 @@ public AbstractAnnotationBeanPostProcessor(Class<? extends Annotation>... annota
     }
 
     private static <T> Collection<T> combine(Collection<? extends T>... elements) {
-        List<T> allElements = new ArrayList<T>();
+        List<T> allElements = new ArrayList<>();
         for (Collection<? extends T> e : elements) {
             allElements.addAll(e);
         }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/AnnotationUtils.java
Patch:
@@ -87,7 +87,7 @@ public static Map<String, Object> getAttributes(
 
         Set<String> ignoreAttributeNamesSet = new HashSet<>(Arrays.asList(ignoreAttributeNames));
 
-        Map<String, Object> actualAttributes = new LinkedHashMap<String, Object>();
+        Map<String, Object> actualAttributes = new LinkedHashMap<>();
 
         for (Map.Entry<String, Object> annotationAttribute : annotationAttributes.entrySet()) {
 
@@ -143,7 +143,7 @@ public static Map<String, Object> getAttributes(
 
         if (ignoreDefaultValue && !isEmpty(annotationAttributes)) {
 
-            List<String> attributeNamesToIgnore = new LinkedList<String>(asList(ignoreAttributeNames));
+            List<String> attributeNamesToIgnore = new LinkedList<>(asList(ignoreAttributeNames));
 
             for (Map.Entry<String, Object> annotationAttribute : annotationAttributes.entrySet()) {
                 String attributeName = annotationAttribute.getKey();

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/PropertySourcesUtils.java
Patch:
@@ -103,7 +103,7 @@ public static Map<String, Object> getSubProperties(PropertySources propertySourc
     public static Map<String, Object> getSubProperties(
             PropertySources propertySources, PropertyResolver propertyResolver, String prefix) {
 
-        Map<String, Object> subProperties = new LinkedHashMap<String, Object>();
+        Map<String, Object> subProperties = new LinkedHashMap<>();
 
         String normalizedPrefix = normalizePrefix(prefix);
 

File: dubbo-container/dubbo-container-api/src/main/java/org/apache/dubbo/container/Main.java
Patch:
@@ -60,7 +60,7 @@ public static void main(String[] args) {
                 args = COMMA_SPLIT_PATTERN.split(config);
             }
 
-            final List<Container> containers = new ArrayList<Container>();
+            final List<Container> containers = new ArrayList<>();
             for (int i = 0; i < args.length; i++) {
                 containers.add(LOADER.getExtension(args[i]));
             }

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/support/AbstractCacheFactory.java
Patch:
@@ -42,7 +42,7 @@ public abstract class AbstractCacheFactory implements CacheFactory {
     /**
      * This is used to store factory level-1 cached data.
      */
-    private final ConcurrentMap<String, Cache> caches = new ConcurrentHashMap<String, Cache>();
+    private final ConcurrentMap<String, Cache> caches = new ConcurrentHashMap<>();
 
     private final Object MONITOR = new Object();
 

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/support/expiring/ExpiringMap.java
Patch:
@@ -158,7 +158,7 @@ public void putAll(Map<? extends K, ? extends V> inMap) {
 
     @Override
     public Collection<V> values() {
-        List<V> list = new ArrayList<V>();
+        List<V> list = new ArrayList<>();
         Set<Entry<K, ExpiryObject>> delegatedSet = delegateMap.entrySet();
         for (Entry<K, ExpiryObject> entry : delegatedSet) {
             ExpiryObject value = entry.getValue();

File: dubbo-metadata/dubbo-metadata-report-nacos/src/main/java/org/apache/dubbo/metadata/store/nacos/NacosMetadataReport.java
Patch:
@@ -258,7 +258,7 @@ protected List<String> doGetExportedURLs(ServiceMetadataIdentifier metadataIdent
         if (StringUtils.isEmpty(content)) {
             return Collections.emptyList();
         }
-        return new ArrayList<String>(Arrays.asList(URL.decode(content)));
+        return new ArrayList<>(Arrays.asList(URL.decode(content)));
     }
 
     @Override

File: dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/AbstractMonitorFactory.java
Patch:
@@ -53,9 +53,9 @@ public abstract class AbstractMonitorFactory implements MonitorFactory {
     /**
      * The monitor centers Map<RegistryAddress, Registry>
      */
-    private static final Map<String, Monitor> MONITORS = new ConcurrentHashMap<String, Monitor>();
+    private static final Map<String, Monitor> MONITORS = new ConcurrentHashMap<>();
 
-    private static final Map<String, Future<Monitor>> FUTURES = new ConcurrentHashMap<String, Future<Monitor>>();
+    private static final Map<String, Future<Monitor>> FUTURES = new ConcurrentHashMap<>();
 
     /**
      * The monitor create executor

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/decoder/HttpCommandDecoder.java
Patch:
@@ -46,7 +46,7 @@ public static CommandContext decode(HttpRequest request) {
                         commandContext = CommandContextFactory.newInstance(name);
                         commandContext.setHttp(true);
                     } else {
-                        List<String> valueList = new ArrayList<String>();
+                        List<String> valueList = new ArrayList<>();
                         for (List<String> values :
                                 queryStringDecoder.parameters().values()) {
                             valueList.addAll(values);
@@ -56,7 +56,7 @@ public static CommandContext decode(HttpRequest request) {
                     }
                 } else if (request.method() == HttpMethod.POST) {
                     HttpPostRequestDecoder httpPostRequestDecoder = new HttpPostRequestDecoder(request);
-                    List<String> valueList = new ArrayList<String>();
+                    List<String> valueList = new ArrayList<>();
                     for (InterfaceHttpData interfaceHttpData : httpPostRequestDecoder.getBodyHttpDatas()) {
                         if (interfaceHttpData.getHttpDataType() == InterfaceHttpData.HttpDataType.Attribute) {
                             Attribute attribute = (Attribute) interfaceHttpData;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/CountTelnet.java
Patch:
@@ -155,8 +155,8 @@ public void send(Channel channel, Object message) throws RemotingException {
 
     private String count(Invoker<?> invoker, String method) {
         URL url = invoker.getUrl();
-        List<List<String>> table = new ArrayList<List<String>>();
-        List<String> header = new ArrayList<String>();
+        List<List<String>> table = new ArrayList<>();
+        List<String> header = new ArrayList<>();
         header.add("method");
         header.add("total");
         header.add("failed");
@@ -188,7 +188,7 @@ private String count(Invoker<?> invoker, String method) {
     }
 
     private List<String> createRow(String methodName, RpcStatus count) {
-        List<String> row = new ArrayList<String>();
+        List<String> row = new ArrayList<>();
         row.add(methodName);
         row.add(String.valueOf(count.getTotal()));
         row.add(String.valueOf(count.getFailed()));

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/util/CommandHelper.java
Patch:
@@ -46,7 +46,7 @@ public boolean hasCommand(String commandName) {
     public List<Class<?>> getAllCommandClass() {
         final Set<String> commandList =
                 frameworkModel.getExtensionLoader(BaseCommand.class).getSupportedExtensions();
-        final List<Class<?>> classes = new ArrayList<Class<?>>();
+        final List<Class<?>> classes = new ArrayList<>();
 
         for (String commandName : commandList) {
             BaseCommand command =

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/textui/TLadder.java
Patch:
@@ -35,7 +35,7 @@ public class TLadder implements TComponent {
     // indent length
     private static final int INDENT_STEP = 2;
 
-    private final List<String> items = new LinkedList<String>();
+    private final List<String> items = new LinkedList<>();
 
     @Override
     public String rendering() {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/textui/TTable.java
Patch:
@@ -299,7 +299,7 @@ public static class ColumnDefine {
         private final Align align;
 
         // data rows
-        private final List<String> rows = new ArrayList<String>();
+        private final List<String> rows = new ArrayList<>();
 
         public ColumnDefine(int width, boolean isAutoResize, Align align) {
             this.width = width;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/textui/TTree.java
Patch:
@@ -181,7 +181,7 @@ private static class Node {
         /**
          * child nodes
          */
-        final List<Node> children = new ArrayList<Node>();
+        final List<Node> children = new ArrayList<>();
 
         /**
          * begin timestamp

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/calls/ReactorServerCalls.java
Patch:
@@ -83,7 +83,7 @@ public static <T, R> void oneToMany(
     public static <T, R> StreamObserver<T> manyToOne(
             StreamObserver<R> responseObserver, Function<Flux<T>, Mono<R>> func) {
         ServerTripleReactorPublisher<T> serverPublisher =
-                new ServerTripleReactorPublisher<T>((CallStreamObserver<R>) responseObserver);
+                new ServerTripleReactorPublisher<>((CallStreamObserver<R>) responseObserver);
         try {
             Mono<R> responseMono = func.apply(Flux.from(serverPublisher));
             responseMono.subscribe(
@@ -118,7 +118,7 @@ public static <T, R> StreamObserver<T> manyToMany(
             StreamObserver<R> responseObserver, Function<Flux<T>, Flux<R>> func) {
         // responseObserver is also a subscription of publisher, we can use it to request more data
         ServerTripleReactorPublisher<T> serverPublisher =
-                new ServerTripleReactorPublisher<T>((CallStreamObserver<R>) responseObserver);
+                new ServerTripleReactorPublisher<>((CallStreamObserver<R>) responseObserver);
         try {
             Flux<R> responseFlux = func.apply(Flux.from(serverPublisher));
             ServerTripleReactorSubscriber<R> serverSubscriber =

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/InterfaceCompatibleRegistryProtocol.java
Patch:
@@ -75,6 +75,6 @@ protected <T> ClusterInvoker<T> getMigrationInvoker(
             URL url,
             URL consumerUrl) {
         //        ClusterInvoker<T> invoker = getInvoker(cluster, registry, type, url);
-        return new MigrationInvoker<T>(registryProtocol, cluster, registry, type, url, consumerUrl);
+        return new MigrationInvoker<>(registryProtocol, cluster, registry, type, url, consumerUrl);
     }
 }

File: dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java
Patch:
@@ -82,7 +82,7 @@ public class MulticastRegistry extends FailbackRegistry {
 
     private final int multicastPort;
 
-    private final ConcurrentMap<URL, Set<URL>> received = new ConcurrentHashMap<URL, Set<URL>>();
+    private final ConcurrentMap<URL, Set<URL>> received = new ConcurrentHashMap<>();
 
     private final ScheduledExecutorService cleanExecutor =
             Executors.newScheduledThreadPool(1, new NamedThreadFactory("DubboMulticastRegistryCleanTimer", true));
@@ -361,7 +361,7 @@ protected void unregistered(URL url) {
                 }
                 if (urls == null || urls.isEmpty()) {
                     if (urls == null) {
-                        urls = new ConcurrentHashSet<URL>();
+                        urls = new ConcurrentHashSet<>();
                     }
                     URL empty = url.setProtocol(EMPTY_PROTOCOL);
                     urls.add(empty);
@@ -380,7 +380,7 @@ protected void subscribed(URL url, NotifyListener listener) {
     }
 
     private List<URL> toList(Set<URL> urls) {
-        List<URL> list = new ArrayList<URL>();
+        List<URL> list = new ArrayList<>();
         if (CollectionUtils.isNotEmpty(urls)) {
             list.addAll(urls);
         }

File: dubbo-registry/dubbo-registry-multiple/src/main/java/org/apache/dubbo/registry/multiple/MultipleRegistry.java
Patch:
@@ -268,7 +268,7 @@ public List<String> getEffectReferenceRegistryURLs() {
 
     protected static class MultipleNotifyListenerWrapper implements NotifyListener {
 
-        Map<URL, SingleNotifyListener> registryMap = new ConcurrentHashMap<URL, SingleNotifyListener>(4);
+        Map<URL, SingleNotifyListener> registryMap = new ConcurrentHashMap<>(4);
         NotifyListener sourceNotifyListener;
 
         public MultipleNotifyListenerWrapper(NotifyListener sourceNotifyListener) {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/ReplierDispatcher.java
Patch:
@@ -30,7 +30,7 @@ public class ReplierDispatcher implements Replier<Object> {
 
     private final Replier<?> defaultReplier;
 
-    private final Map<Class<?>, Replier<?>> repliers = new ConcurrentHashMap<Class<?>, Replier<?>>();
+    private final Map<Class<?>, Replier<?>> repliers = new ConcurrentHashMap<>();
 
     public ReplierDispatcher() {
         this(null, null);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeServer.java
Patch:
@@ -161,7 +161,7 @@ private void cancelCloseTask() {
 
     @Override
     public Collection<ExchangeChannel> getExchangeChannels() {
-        Collection<ExchangeChannel> exchangeChannels = new ArrayList<ExchangeChannel>();
+        Collection<ExchangeChannel> exchangeChannels = new ArrayList<>();
         Collection<Channel> channels = server.getChannels();
         if (CollectionUtils.isNotEmpty(channels)) {
             for (Channel channel : channels) {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/codec/TelnetCodec.java
Patch:
@@ -283,7 +283,7 @@ protected Object decode(Channel channel, ChannelBuffer buffer, int readable, byt
         String result = toString(message, getCharset(channel));
         if (result.trim().length() > 0) {
             if (history == null) {
-                history = new LinkedList<String>();
+                history = new LinkedList<>();
                 channel.setAttribute(HISTORY_LIST_KEY, history);
             }
             if (history.isEmpty()) {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/HelpTelnetHandler.java
Patch:
@@ -73,12 +73,12 @@ private String generateForOneCommand(String message) {
     }
 
     private String generateForAllCommand(Channel channel) {
-        List<List<String>> table = new ArrayList<List<String>>();
+        List<List<String>> table = new ArrayList<>();
         List<TelnetHandler> handlers = extensionLoader.getActivateExtension(channel.getUrl(), "telnet");
         if (CollectionUtils.isNotEmpty(handlers)) {
             for (TelnetHandler handler : handlers) {
                 Help help = handler.getClass().getAnnotation(Help.class);
-                List<String> row = new ArrayList<String>();
+                List<String> row = new ArrayList<>();
                 String parameter = " " + extensionLoader.getExtensionName(handler) + " "
                         + (help != null ? help.parameter().replace("\r\n", " ").replace("\n", " ") : "");
                 row.add(parameter.length() > 55 ? parameter.substring(0, 55) + "..." : parameter);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/CodecSupport.java
Patch:
@@ -42,9 +42,9 @@
 
 public class CodecSupport {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(CodecSupport.class);
-    private static Map<Byte, Serialization> ID_SERIALIZATION_MAP = new HashMap<Byte, Serialization>();
-    private static Map<Byte, String> ID_SERIALIZATIONNAME_MAP = new HashMap<Byte, String>();
-    private static Map<String, Byte> SERIALIZATIONNAME_ID_MAP = new HashMap<String, Byte>();
+    private static Map<Byte, Serialization> ID_SERIALIZATION_MAP = new HashMap<>();
+    private static Map<Byte, String> ID_SERIALIZATIONNAME_MAP = new HashMap<>();
+    private static Map<String, Byte> SERIALIZATIONNAME_ID_MAP = new HashMap<>();
     // Cache null object serialize results, for heartbeat request/response serialize use.
     private static ConcurrentMap<Byte, byte[]> ID_NULLBYTES_MAP = new ConcurrentHashMap<>();
 

File: dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/RequestTemplate.java
Patch:
@@ -35,8 +35,8 @@ public class RequestTemplate implements Serializable {
     public static final String ENCODING_DEFLATE = "deflate";
     private static final List<String> EMPTY_ARRAYLIST = new ArrayList<>();
 
-    private final Map<String, Collection<String>> queries = new LinkedHashMap<String, Collection<String>>();
-    private final Map<String, Collection<String>> headers = new LinkedHashMap<String, Collection<String>>();
+    private final Map<String, Collection<String>> queries = new LinkedHashMap<>();
+    private final Map<String, Collection<String>> headers = new LinkedHashMap<>();
     private String httpMethod;
     private String path;
     private String address;

File: dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/servlet/DispatcherServlet.java
Patch:
@@ -33,7 +33,7 @@
 public class DispatcherServlet extends HttpServlet {
 
     private static final long serialVersionUID = 5766349180380479888L;
-    private static final Map<Integer, HttpHandler> HANDLERS = new ConcurrentHashMap<Integer, HttpHandler>();
+    private static final Map<Integer, HttpHandler> HANDLERS = new ConcurrentHashMap<>();
     private static DispatcherServlet INSTANCE;
 
     public DispatcherServlet() {

File: dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/servlet/ServletManager.java
Patch:
@@ -30,7 +30,7 @@ public class ServletManager {
 
     private static final ServletManager INSTANCE = new ServletManager();
 
-    private final Map<Integer, ServletContext> contextMap = new ConcurrentHashMap<Integer, ServletContext>();
+    private final Map<Integer, ServletContext> contextMap = new ConcurrentHashMap<>();
 
     public static ServletManager getInstance() {
         return INSTANCE;

File: dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyChannel.java
Patch:
@@ -43,11 +43,11 @@ final class NettyChannel extends AbstractChannel {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(NettyChannel.class);
 
     private static final ConcurrentMap<org.jboss.netty.channel.Channel, NettyChannel> CHANNEL_MAP =
-            new ConcurrentHashMap<org.jboss.netty.channel.Channel, NettyChannel>();
+            new ConcurrentHashMap<>();
 
     private final org.jboss.netty.channel.Channel channel;
 
-    private final Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();
+    private final Map<String, Object> attributes = new ConcurrentHashMap<>();
 
     private NettyChannel(org.jboss.netty.channel.Channel channel, URL url, ChannelHandler handler) {
         super(url, handler);

File: dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyHandler.java
Patch:
@@ -42,7 +42,7 @@ public class NettyHandler extends SimpleChannelHandler {
 
     private static final Logger logger = LoggerFactory.getLogger(NettyHandler.class);
 
-    private final Map<String, Channel> channels = new ConcurrentHashMap<String, Channel>(); // <ip:port, channel>
+    private final Map<String, Channel> channels = new ConcurrentHashMap<>(); // <ip:port, channel>
 
     private final URL url;
 

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyChannel.java
Patch:
@@ -61,14 +61,13 @@ final class NettyChannel extends AbstractChannel {
     /**
      * the cache for netty channel and dubbo channel
      */
-    private static final ConcurrentMap<Channel, NettyChannel> CHANNEL_MAP =
-            new ConcurrentHashMap<Channel, NettyChannel>();
+    private static final ConcurrentMap<Channel, NettyChannel> CHANNEL_MAP = new ConcurrentHashMap<>();
     /**
      * netty channel
      */
     private final Channel channel;
 
-    private final Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();
+    private final Map<String, Object> attributes = new ConcurrentHashMap<>();
 
     private final AtomicBoolean active = new AtomicBoolean(false);
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcServiceContext.java
Patch:
@@ -459,7 +459,7 @@ public List<Invoker<?>> getInvokers() {
     public RpcServiceContext setInvokers(List<Invoker<?>> invokers) {
         this.invokers = invokers;
         if (CollectionUtils.isNotEmpty(invokers)) {
-            List<URL> urls = new ArrayList<URL>(invokers.size());
+            List<URL> urls = new ArrayList<>(invokers.size());
             for (Invoker<?> invoker : invokers) {
                 urls.add(invoker.getUrl());
             }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/DeprecatedFilter.java
Patch:
@@ -44,7 +44,7 @@ public class DeprecatedFilter implements Filter {
 
     private static final ErrorTypeAwareLogger LOGGER = LoggerFactory.getErrorTypeAwareLogger(DeprecatedFilter.class);
 
-    private static final Set<String> LOGGED = new ConcurrentHashSet<String>();
+    private static final Set<String> LOGGED = new ConcurrentHashSet<>();
 
     @Override
     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/tps/DefaultTPSLimiter.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class DefaultTPSLimiter implements TPSLimiter {
 
-    private final ConcurrentMap<String, StatItem> stats = new ConcurrentHashMap<String, StatItem>();
+    private final ConcurrentMap<String, StatItem> stats = new ConcurrentHashMap<>();
 
     @Override
     public boolean isAllowable(URL url, Invocation invocation) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractProxyProtocol.java
Patch:
@@ -50,7 +50,7 @@
  */
 public abstract class AbstractProxyProtocol extends AbstractProtocol {
 
-    private final List<Class<?>> rpcExceptions = new CopyOnWriteArrayList<Class<?>>();
+    private final List<Class<?>> rpcExceptions = new CopyOnWriteArrayList<>();
 
     protected ProxyFactory proxyFactory;
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/ProtocolListenerWrapper.java
Patch:
@@ -74,8 +74,7 @@ public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
                     .getBeanFactory()
                     .getBean(InjvmExporterListener.class));
         }
-        return new ListenerExporterWrapper<T>(
-                protocol.export(invoker), Collections.unmodifiableList(exporterListeners));
+        return new ListenerExporterWrapper<>(protocol.export(invoker), Collections.unmodifiableList(exporterListeners));
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockInvoker.java
Patch:
@@ -47,8 +47,8 @@
 
 public final class MockInvoker<T> implements Invoker<T> {
     private final ProxyFactory proxyFactory;
-    private static final Map<String, Invoker<?>> MOCK_MAP = new ConcurrentHashMap<String, Invoker<?>>();
-    private static final Map<String, Throwable> THROWABLE_MAP = new ConcurrentHashMap<String, Throwable>();
+    private static final Map<String, Invoker<?>> MOCK_MAP = new ConcurrentHashMap<>();
+    private static final Map<String, Throwable> THROWABLE_MAP = new ConcurrentHashMap<>();
 
     private final URL url;
     private final Class<T> type;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -339,7 +339,7 @@ public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
 
         // export service.
         String key = serviceKey(url);
-        DubboExporter<T> exporter = new DubboExporter<T>(invoker, key, exporterMap);
+        DubboExporter<T> exporter = new DubboExporter<>(invoker, key, exporterMap);
 
         // export a stub service for dispatching event
         boolean isStubSupportEvent = url.getParameter(STUB_EVENT_KEY, DEFAULT_STUB_EVENT);
@@ -443,7 +443,7 @@ public <T> Invoker<T> protocolBindingRefer(Class<T> serviceType, URL url) throws
         optimizeSerialization(url);
 
         // create rpc invoker.
-        DubboInvoker<T> invoker = new DubboInvoker<T>(serviceType, url, getClients(url), invokers);
+        DubboInvoker<T> invoker = new DubboInvoker<>(serviceType, url, getClients(url), invokers);
         invokers.add(invoker);
 
         return invoker;

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmProtocol.java
Patch:
@@ -75,12 +75,12 @@ public int getDefaultPort() {
 
     @Override
     public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
-        return new InjvmExporter<T>(invoker, invoker.getUrl().getServiceKey(), exporterMap);
+        return new InjvmExporter<>(invoker, invoker.getUrl().getServiceKey(), exporterMap);
     }
 
     @Override
     public <T> Invoker<T> protocolBindingRefer(Class<T> serviceType, URL url) throws RpcException {
-        return new InjvmInvoker<T>(serviceType, url, url.getServiceKey(), exporterMap);
+        return new InjvmInvoker<>(serviceType, url, url.getServiceKey(), exporterMap);
     }
 
     public boolean isInjvmRefer(URL url) {

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java
Patch:
@@ -134,7 +134,7 @@ protected <T> Invoker<T> protocolBindingRefer(final Class<T> type, final URL url
                 MetadataResolver.resolveConsumerServiceMetadata(type, url, contextPathFromUrl);
 
         Invoker<T> invoker =
-                new RestInvoker<T>(type, url, refClient, httpConnectionPreBuildIntercepts, serviceRestMetadata);
+                new RestInvoker<>(type, url, refClient, httpConnectionPreBuildIntercepts, serviceRestMetadata);
 
         invokers.add(invoker);
         return invoker;

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/ViolationReport.java
Patch:
@@ -42,7 +42,7 @@ public void setConstraintViolations(List<RestConstraintViolation> constraintViol
 
     public void addConstraintViolation(RestConstraintViolation constraintViolation) {
         if (constraintViolations == null) {
-            constraintViolations = new LinkedList<RestConstraintViolation>();
+            constraintViolations = new LinkedList<>();
         }
         constraintViolations.add(constraintViolation);
     }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/extension/resteasy/filter/DubboPreMatchContainerRequestContext.java
Patch:
@@ -82,7 +82,7 @@ public Object getProperty(String name) {
 
     @Override
     public Collection<String> getPropertyNames() {
-        ArrayList<String> names = new ArrayList<String>();
+        ArrayList<String> names = new ArrayList<>();
         Enumeration<String> enames = httpRequest.getAttributeNames();
         while (enames.hasMoreElements()) {
             names.add(enames.nextElement());

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/util/ReflectUtils.java
Patch:
@@ -115,7 +115,7 @@ public static List<Constructor<?>> getConstructList(Class clazz) {
         } catch (Exception e) {
 
         }
-        return new ArrayList<Constructor<?>>(methods);
+        return new ArrayList<>(methods);
     }
 
     private static void filterConstructMethod(Set<Constructor<?>> methods, Constructor<?>[] declaredMethods) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TriHttp2RemoteFlowController.java
Patch:
@@ -306,7 +306,7 @@ private final class FlowState implements StreamByteDistributor.StreamState {
 
         FlowState(Http2Stream stream) {
             this.stream = stream;
-            pendingWriteQueue = new ArrayDeque<FlowControlled>(2);
+            pendingWriteQueue = new ArrayDeque<>(2);
         }
 
         /**

File: dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/SysProps.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class SysProps {
 
-    private static Map<String, String> map = new LinkedHashMap<String, String>();
+    private static Map<String, String> map = new LinkedHashMap<>();
 
     public static void reset() {
         map.clear();

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java
Patch:
@@ -89,6 +89,7 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t
             p.addLast(new HttpProcessHandler(frameworkModel, qosConfiguration));
             p.remove(this);
         } else {
+            p.addLast(new CtrlCHandler());
             p.addLast(new LineBasedFrameDecoder(2048));
             p.addLast(new StringDecoder(CharsetUtil.UTF_8));
             p.addLast(new StringEncoder(CharsetUtil.UTF_8));

File: dubbo-serialization/dubbo-serialization-fastjson2/src/main/java/org/apache/dubbo/common/serialize/fastjson2/FastJson2ObjectInput.java
Patch:
@@ -91,7 +91,7 @@ public String readUTF() throws IOException {
 
     @Override
     public byte[] readBytes() throws IOException {
-        int length = is.read();
+        int length = readLength();
         byte[] bytes = new byte[length];
         int read = is.read(bytes, 0, length);
         if (read != length) {

File: dubbo-serialization/dubbo-serialization-fastjson2/src/main/java/org/apache/dubbo/common/serialize/fastjson2/FastJson2ObjectOutput.java
Patch:
@@ -89,13 +89,13 @@ public void writeUTF(String v) throws IOException {
 
     @Override
     public void writeBytes(byte[] b) throws IOException {
-        os.write(b.length);
+        writeLength(b.length);
         os.write(b);
     }
 
     @Override
     public void writeBytes(byte[] b, int off, int len) throws IOException {
-        os.write(len);
+        writeLength(len);
         os.write(b, off, len);
     }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.dubbo.rpc.InvokeMode;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
+import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.protocol.AbstractInvoker;
@@ -98,6 +99,7 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
         } else {
             currentClient = exchangeClients.get(index.getAndIncrement() % exchangeClients.size());
         }
+        RpcContext.getServiceContext().setLocalAddress(currentClient.getLocalAddress());
         try {
             boolean isOneway = RpcUtils.isOneway(getUrl(), invocation);
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -155,6 +155,7 @@ protected Result doInvoke(final Invocation invocation) {
                 isSync(methodDescriptor, invocation) ? new ThreadlessExecutor() : streamExecutor;
         ClientCall call = new TripleClientCall(
                 connectionClient, callbackExecutor, getUrl().getOrDefaultFrameworkModel(), writeQueue);
+        RpcContext.getServiceContext().setLocalAddress(connectionClient.getLocalAddress());
         AsyncRpcResult result;
         try {
             switch (methodDescriptor.getRpcType()) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/ModuleConfig.java
Patch:
@@ -218,7 +218,7 @@ public Boolean getBackground() {
 
     /**
      * Whether start module in background.
-     * If start in backgound, do not await finish on Spring ContextRefreshedEvent.
+     * If start in background, do not await finish on Spring ContextRefreshedEvent.
      *
      * @see org.apache.dubbo.config.spring.context.DubboDeployApplicationListener
      */

File: dubbo-container/dubbo-container-api/src/main/java/org/apache/dubbo/container/Main.java
Patch:
@@ -64,7 +64,7 @@ public static void main(String[] args) {
             for (int i = 0; i < args.length; i++) {
                 containers.add(LOADER.getExtension(args[i]));
             }
-            logger.info("Use container type(" + Arrays.toString(args) + ") to run dubbo serivce.");
+            logger.info("Use container type(" + Arrays.toString(args) + ") to run dubbo service.");
 
             if ("true".equals(System.getProperty(SHUTDOWN_HOOK_KEY))) {
                 Runtime.getRuntime().addShutdownHook(new Thread("dubbo-container-shutdown-hook") {

File: dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/builder/PrimitiveTypeDefinitionBuilder.java
Patch:
@@ -27,7 +27,7 @@
 import static org.apache.dubbo.metadata.annotation.processing.util.TypeUtils.isPrimitiveType;
 
 /**
- * {@link TypeBuilder} for Java {@link PrimitiveType primitve type}
+ * {@link TypeBuilder} for Java {@link PrimitiveType primitive type}
  *
  * @since 2.7.6
  */

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/codec/ExchangeCodecTest.java
Patch:
@@ -436,7 +436,7 @@ void test_Encode_Response() throws IOException {
         Assertions.assertEquals(response.getStatus(), obj.getStatus());
         Assertions.assertEquals(response.isHeartbeat(), obj.isHeartbeat());
         Assertions.assertEquals(person, obj.getResult());
-        // encode response verson ??
+        // encode response version ??
         //        Assertions.assertEquals(response.getProtocolVersion(), obj.getVersion());
 
         future.cancel();

File: dubbo-spring-boot/dubbo-spring-boot-compatible/actuator/src/main/java/org/apache/dubbo/spring/boot/actuate/endpoint/metadata/AbstractDubboMetadata.java
Patch:
@@ -43,7 +43,7 @@
 import static org.springframework.util.ClassUtils.isPrimitiveOrWrapper;
 
 /**
- * Abstract Dubbo Meatadata
+ * Abstract Dubbo Metadata
  *
  * @since 2.7.0
  */

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/AbstractServerCallListener.java
Patch:
@@ -31,6 +31,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_APPLICATION_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_TIMEOUT_SERVER;
+import static org.apache.dubbo.rpc.protocol.tri.TripleConstant.REMOTE_ADDRESS_KEY;
 
 public abstract class AbstractServerCallListener implements ServerCallListener {
 
@@ -56,7 +57,7 @@ public void invoke() {
                     ((Http2CancelableStreamObserver<Object>) responseObserver).getCancellationContext());
         }
         InetSocketAddress remoteAddress =
-                (InetSocketAddress) invocation.getAttributes().remove("tri.remote.address");
+                (InetSocketAddress) invocation.getAttributes().remove(REMOTE_ADDRESS_KEY);
         RpcContext.getServiceContext().setRemoteAddress(remoteAddress);
         String remoteApp = (String) invocation.getAttributes().remove(TripleHeaderEnum.CONSUMER_APP_NAME_KEY);
         if (null != remoteApp) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/AbstractServerTransportListener.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.dubbo.rpc.model.MethodDescriptor;
 import org.apache.dubbo.rpc.protocol.tri.DescriptorUtils;
 import org.apache.dubbo.rpc.protocol.tri.RpcInvocationBuildContext;
-import org.apache.dubbo.rpc.protocol.tri.TripleConstant;
 import org.apache.dubbo.rpc.protocol.tri.TripleHeaderEnum;
 import org.apache.dubbo.rpc.protocol.tri.route.DefaultRequestRouter;
 import org.apache.dubbo.rpc.protocol.tri.route.RequestRouter;
@@ -47,6 +46,7 @@
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_ERROR_USE_THREAD_POOL;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_FAILED_PARSE;
+import static org.apache.dubbo.rpc.protocol.tri.TripleConstant.REMOTE_ADDRESS_KEY;
 
 public abstract class AbstractServerTransportListener<HEADER extends RequestMetadata, MESSAGE extends HttpInputMessage>
         implements HttpTransportListener<HEADER, MESSAGE> {
@@ -209,7 +209,7 @@ protected RpcInvocation buildRpcInvocation(RpcInvocationBuildContext context) {
         inv.setTargetServiceUniqueName(url.getServiceKey());
         inv.setReturnTypes(methodDescriptor.getReturnTypes());
         inv.setObjectAttachments(StreamUtils.toAttachments(httpMetadata.headers()));
-        inv.put(TripleConstant.REMOTE_ADDRESS_KEY, httpChannel.remoteAddress());
+        inv.put(REMOTE_ADDRESS_KEY, httpChannel.remoteAddress());
         inv.getAttributes().putAll(context.getAttributes());
 
         // customizer RpcInvocation

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/grpc/GrpcHttp2ServerTransportListenerFactory.java
Patch:
@@ -21,18 +21,17 @@
 import org.apache.dubbo.remoting.http12.h2.Http2ServerTransportListenerFactory;
 import org.apache.dubbo.remoting.http12.h2.Http2TransportListener;
 import org.apache.dubbo.rpc.model.FrameworkModel;
+import org.apache.dubbo.rpc.protocol.tri.TripleHeaderEnum;
 
 public class GrpcHttp2ServerTransportListenerFactory implements Http2ServerTransportListenerFactory {
 
-    public static final String CONTENT_TYPE = "application/grpc";
-
     @Override
     public Http2TransportListener newInstance(H2StreamChannel streamChannel, URL url, FrameworkModel frameworkModel) {
         return new GrpcHttp2ServerTransportListener(streamChannel, url, frameworkModel);
     }
 
     @Override
     public boolean supportContentType(String contentType) {
-        return contentType != null && contentType.startsWith(CONTENT_TYPE);
+        return contentType != null && contentType.startsWith(TripleHeaderEnum.APPLICATION_GRPC.getHeader());
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/http1/DefaultHttp11ServerTransportListener.java
Patch:
@@ -88,7 +88,7 @@ private ServerCallListener startListener(
                 return new AutoCompleteUnaryServerCallListener(invocation, invoker, serverChannelObserver);
             case SERVER_STREAM:
                 serverChannelObserver = new Http1ServerStreamChannelObserver(httpChannel);
-                serverChannelObserver.setHeadersCustomizer((headers) ->
+                serverChannelObserver.setHeadersCustomizer(headers ->
                         headers.set(HttpHeaderNames.CONTENT_TYPE.getName(), MediaType.TEXT_EVENT_STREAM.getName()));
                 return new AutoCompleteServerStreamServerCallListener(invocation, invoker, serverChannelObserver);
             default:

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/http2/Http2ServerCallToObserverAdapter.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.remoting.http12.h2.H2StreamChannel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
+import org.apache.dubbo.rpc.protocol.tri.TripleHeaderEnum;
 import org.apache.dubbo.rpc.protocol.tri.h12.ServerCallToObserverAdapter;
 
 public class Http2ServerCallToObserverAdapter extends Http2ServerStreamObserver
@@ -27,9 +28,9 @@ public class Http2ServerCallToObserverAdapter extends Http2ServerStreamObserver
 
     public Http2ServerCallToObserverAdapter(FrameworkModel frameworkModel, H2StreamChannel h2StreamChannel) {
         super(frameworkModel, h2StreamChannel);
-        setHeadersCustomizer((headers) -> {
+        setHeadersCustomizer(headers -> {
             if (exceptionCode != 0) {
-                headers.set("tri-exception-code", String.valueOf(exceptionCode));
+                headers.set(TripleHeaderEnum.TRI_EXCEPTION_CODE.getHeader(), String.valueOf(exceptionCode));
             }
         });
     }

File: dubbo-metrics/dubbo-tracing/src/main/java/org/apache/dubbo/tracing/context/DubboClientContext.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.util.Objects;
 
+import io.micrometer.observation.transport.Kind;
 import io.micrometer.observation.transport.SenderContext;
 
 /**
@@ -33,7 +34,7 @@ public class DubboClientContext extends SenderContext<Invocation> {
     private final Invocation invocation;
 
     public DubboClientContext(Invoker<?> invoker, Invocation invocation) {
-        super((map, key, value) -> Objects.requireNonNull(map).setAttachment(key, value));
+        super((carrier, key, value) -> Objects.requireNonNull(carrier).setAttachment(key, value), Kind.CLIENT);
         this.invoker = invoker;
         this.invocation = invocation;
         setCarrier(invocation);

File: dubbo-metrics/dubbo-tracing/src/main/java/org/apache/dubbo/tracing/context/DubboServerContext.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 
+import io.micrometer.observation.transport.Kind;
 import io.micrometer.observation.transport.ReceiverContext;
 
 /**
@@ -31,7 +32,7 @@ public class DubboServerContext extends ReceiverContext<Invocation> {
     private final Invocation invocation;
 
     public DubboServerContext(Invoker<?> invoker, Invocation invocation) {
-        super((stringObjectMap, s) -> String.valueOf(stringObjectMap.getAttachment(s)));
+        super((carrier, s) -> String.valueOf(carrier.getAttachment(s)), Kind.SERVER);
         this.invoker = invoker;
         this.invocation = invocation;
         setCarrier(invocation);

File: dubbo-metrics/dubbo-tracing/src/main/java/org/apache/dubbo/tracing/filter/ObservationReceiverFilter.java
Patch:
@@ -44,9 +44,9 @@
         onClass = "io.micrometer.observation.NoopObservationRegistry")
 public class ObservationReceiverFilter implements Filter, BaseFilter.Listener, ScopeModelAware {
 
-    private ObservationRegistry observationRegistry;
+    private final ObservationRegistry observationRegistry;
 
-    private DubboServerObservationConvention serverObservationConvention;
+    private final DubboServerObservationConvention serverObservationConvention;
 
     public ObservationReceiverFilter(ApplicationModel applicationModel) {
         observationRegistry = applicationModel.getBeanFactory().getBean(ObservationRegistry.class);

File: dubbo-metrics/dubbo-tracing/src/main/java/org/apache/dubbo/tracing/filter/ObservationSenderFilter.java
Patch:
@@ -45,9 +45,9 @@
         onClass = "io.micrometer.observation.NoopObservationRegistry")
 public class ObservationSenderFilter implements ClusterFilter, BaseFilter.Listener, ScopeModelAware {
 
-    private ObservationRegistry observationRegistry;
+    private final ObservationRegistry observationRegistry;
 
-    private DubboClientObservationConvention clientObservationConvention;
+    private final DubboClientObservationConvention clientObservationConvention;
 
     public ObservationSenderFilter(ApplicationModel applicationModel) {
         observationRegistry = applicationModel.getBeanFactory().getBean(ObservationRegistry.class);

File: dubbo-config/dubbo-config-spring6/src/main/java/org/apache/dubbo/config/spring6/utils/AotUtils.java
Patch:
@@ -59,7 +59,9 @@ private static void registerSerializationType(
                     }
                 }));
 
-                registerSerializationType(registerType.getSuperclass(), hints, serializationTypeCache);
+                if (registerType.getSuperclass() != null) {
+                    registerSerializationType(registerType.getSuperclass(), hints, serializationTypeCache);
+                }
             }
         }
     }

File: dubbo-config/dubbo-config-spring6/src/test/java/org/apache/dubbo/config/spring6/utils/DemoService.java
Patch:
@@ -19,4 +19,6 @@
 public interface DemoService {
 
     HelloResponse sayHello(HelloRequest request);
+
+    String sayHelloForSerializable(java.io.Serializable name);
 }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/message/LengthFieldStreamingDecoder.java
Patch:
@@ -182,7 +182,7 @@ private boolean hasEnoughBytes() {
     }
 
     protected static int bytesToInt(byte[] bytes) {
-        return (bytes[0] << 24) & 0xFF | (bytes[1] << 16) & 0xFF | (bytes[2] << 8) & 0xFF | (bytes[3]) & 0xFF;
+        return ((bytes[0] & 0xFF) << 24) | ((bytes[1] & 0xFF) << 16) | ((bytes[2] & 0xFF) << 8) | (bytes[3]) & 0xFF;
     }
 
     private enum DecodeState {

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/ServiceConfigURL.java
Patch:
@@ -113,12 +113,12 @@ protected <T extends URL> T newURL(URLAddress urlAddress, URLParam urlParam) {
     }
 
     @Override
-    public URL addAttributes(Map<String, Object> attributes) {
+    public URL addAttributes(Map<String, Object> attributeMap) {
         Map<String, Object> newAttributes = new HashMap<>();
         if (this.attributes != null) {
             newAttributes.putAll(this.attributes);
         }
-        newAttributes.putAll(attributes);
+        newAttributes.putAll(attributeMap);
         return new ServiceConfigURL(getUrlAddress(), getUrlParam(), newAttributes);
     }
 

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/common/DelegateURL.java
Patch:
@@ -854,8 +854,8 @@ public Map<String, Object> getAttributes() {
     }
 
     @Override
-    public org.apache.dubbo.common.URL addAttributes(Map<String, Object> attributes) {
-        return apacheUrl.addAttributes(attributes);
+    public org.apache.dubbo.common.URL addAttributes(Map<String, Object> attributeMap) {
+        return apacheUrl.addAttributes(attributeMap);
     }
 
     @Override

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationPostProcessor.java
Patch:
@@ -528,6 +528,9 @@ private AbstractBeanDefinition buildServiceBeanDefinition(
             addPropertyReference(builder, "executor", executorBeanName);
         }
 
+        // service bean definition should not be lazy
+        builder.setLazyInit(false);
+
         return builder.getBeanDefinition();
     }
 

File: dubbo-demo/dubbo-demo-interface/src/main/java/org/apache/dubbo/demo/RestDemoService.java
Patch:
@@ -65,7 +65,7 @@ public interface RestDemoService {
     Boolean testBody2(Boolean b);
 
     @POST
-    @Path("/testBody3")
+    @Path("/testBody4")
     @Consumes({MediaType.TEXT_PLAIN})
     TestPO testBody2(TestPO b);
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/JsonCodec.java
Patch:
@@ -33,13 +33,12 @@
 /**
  * body is json
  */
-@Activate("json")
+@Activate(value = "json", order = 100)
 public class JsonCodec implements HttpMessageCodec<byte[], OutputStream> {
     private static final Set<Class> unSupportClasses = new HashSet<>();
 
     static {
         unSupportClasses.add(byte[].class);
-        unSupportClasses.add(String.class);
     }
 
     public static void addUnSupportClass(Class<?> unSupportClass) {

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/StringCodec.java
Patch:
@@ -28,7 +28,7 @@
 /**
  *  body is string
  */
-@Activate("string")
+@Activate(value = "string", order = 200)
 public class StringCodec implements HttpMessageCodec<byte[], OutputStream> {
 
     @Override

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/message/codec/YamlCodec.java
Patch:
@@ -36,12 +36,13 @@
 import org.yaml.snakeyaml.constructor.Constructor;
 import org.yaml.snakeyaml.representer.Representer;
 
+@SuppressWarnings({"unchecked", "rawtypes"})
 public class YamlCodec implements HttpMessageCodec {
 
     @Override
     public Object decode(InputStream is, Class<?> targetType, Charset charset) throws DecodeException {
         try (InputStreamReader reader = new InputStreamReader(is, charset)) {
-            return createYaml().loadAs(reader, targetType);
+            return createYaml().loadAs(reader, (Class) targetType);
         } catch (Throwable t) {
             throw new DecodeException("Error decoding yaml", t);
         }
@@ -57,7 +58,7 @@ public Object[] decode(InputStream is, Class<?>[] targetTypes, Charset charset)
             for (int i = 0; i < len; i++) {
                 if (iterator.hasNext()) {
                     Object result = iterator.next();
-                    Class<?> targetType = targetTypes[i];
+                    Class targetType = targetTypes[i];
                     if (targetType.isInstance(result)) {
                         results[i] = result;
                     } else {

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/api/EmptyWireProtocol.java
Patch:
@@ -17,11 +17,13 @@
 package org.apache.dubbo.remoting.transport.netty4.api;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.remoting.api.ProtocolDetector;
 import org.apache.dubbo.remoting.api.WireProtocol;
 import org.apache.dubbo.remoting.api.pu.ChannelOperator;
 import org.apache.dubbo.remoting.api.ssl.ContextOperator;
 
+@Activate
 public class EmptyWireProtocol implements WireProtocol {
     @Override
     public ProtocolDetector detector() {

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -55,7 +55,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.TAG_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMESTAMP_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_NO_METHOD_FOUND;
-import static org.apache.dubbo.common.constants.MetricsConstants.PROTOCOL_PROMETHEUS;
 import static org.apache.dubbo.config.Constants.DEFAULT_NATIVE_PROXY;
 
 /**

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -442,7 +442,6 @@ private Map<String, String> appendConfig() {
         AbstractConfig.appendParameters(map, getModule());
         AbstractConfig.appendParameters(map, consumer);
         AbstractConfig.appendParameters(map, this);
-        appendMetricsCompatible(map);
 
         String hostToRegistry = ConfigUtils.getSystemProperty(DUBBO_IP_TO_REGISTRY);
         if (StringUtils.isEmpty(hostToRegistry)) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -663,7 +663,6 @@ private Map<String, String> buildAttributes(ProtocolConfig protocolConfig) {
         AbstractConfig.appendParameters(map, provider);
         AbstractConfig.appendParameters(map, protocolConfig);
         AbstractConfig.appendParameters(map, this);
-        appendMetricsCompatible(map);
 
         // append params with method configs,
         if (CollectionUtils.isNotEmpty(getMethods())) {

File: dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyPortUnificationServer.java
Patch:
@@ -156,7 +156,7 @@ protected void doClose() {
         } catch (Throwable e) {
             logger.warn(TRANSPORT_FAILED_CLOSE, "", "", e.getMessage(), e);
         }
-        for (WireProtocol protocol : getProtocols()) {
+        for (WireProtocol protocol : getProtocols().values()) {
             protocol.close();
         }
 

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyPortUnificationServer.java
Patch:
@@ -200,7 +200,7 @@ public void doClose() {
             logger.warn(TRANSPORT_FAILED_CLOSE, "", "", e.getMessage(), e);
         }
 
-        for (WireProtocol protocol : getProtocols()) {
+        for (WireProtocol protocol : getProtocols().values()) {
             protocol.close();
         }
 

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/netty4/h1/NettyHttp1ConnectionHandler.java
Patch:
@@ -56,7 +56,7 @@ public NettyHttp1ConnectionHandler(URL url, FrameworkModel frameworkModel) {
                 .getExtensionLoader(ThreadPool.class)
                 .getAdaptiveExtension()
                 .getExecutor(url);
-        this.codecUtils = frameworkModel.getBeanFactory().getBean(CodecUtils.class);
+        this.codecUtils = frameworkModel.getBeanFactory().getOrRegisterBean(CodecUtils.class);
     }
 
     public NettyHttp1ConnectionHandler(
@@ -69,7 +69,7 @@ public NettyHttp1ConnectionHandler(
                 .getExtensionLoader(ThreadPool.class)
                 .getAdaptiveExtension()
                 .getExecutor(url);
-        this.codecUtils = frameworkModel.getBeanFactory().getBean(CodecUtils.class);
+        this.codecUtils = frameworkModel.getBeanFactory().getOrRegisterBean(CodecUtils.class);
         this.http1ServerTransportListenerFactory = http1ServerTransportListenerFactory;
     }
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/constans/RestConstant.java
Patch:
@@ -43,6 +43,8 @@ public interface RestConstant {
     String CONNECTION = "Connection";
     String CONTENT_TYPE = "Content-Type";
     String TEXT_PLAIN = "text/plain";
+    String ACCEPT_CHARSET = "Accept-Charset";
+    String WEIGHT_IDENTIFIER = ";q=";
     String ACCEPT = "Accept";
     String DEFAULT_ACCEPT = "*/*";
     String REST_HEADER_PREFIX = "rest-service-";
@@ -54,6 +56,7 @@ public interface RestConstant {
     String MAX_REQUEST_SIZE_PARAM = "max.request.size";
     String IDLE_TIMEOUT_PARAM = "idle.timeout";
     String KEEP_ALIVE_TIMEOUT_PARAM = "keep.alive.timeout";
+    String DEFAULT_CHARSET = "UTF-8";
 
     int MAX_REQUEST_SIZE = 1024 * 1024 * 10;
     int MAX_INITIAL_LINE_LENGTH = 4096;

File: dubbo-common/src/test/java/org/apache/dubbo/common/URLStrParserTest.java
Patch:
@@ -48,7 +48,6 @@ class URLStrParserTest {
         testCases.add("nacos://192.168.1.1:8848?username=&password=");
         testCases.add("dubbo://127.0.0.1?timeout=1234&default.timeout=5678");
         testCases.add("dubbo://127.0.0.1?default.timeout=5678");
-        testCases.add("zookeeper://test10.301.216.302:2181?username=t1#&password=t2#");
 
         errorDecodedCases.add("dubbo:192.168.1.1");
         errorDecodedCases.add("://192.168.1.1");

File: dubbo-common/src/test/java/org/apache/dubbo/common/URLStrParserTest.java
Patch:
@@ -48,6 +48,7 @@ class URLStrParserTest {
         testCases.add("nacos://192.168.1.1:8848?username=&password=");
         testCases.add("dubbo://127.0.0.1?timeout=1234&default.timeout=5678");
         testCases.add("dubbo://127.0.0.1?default.timeout=5678");
+        testCases.add("zookeeper://test10.301.216.302:2181?username=t1#&password=t2#");
 
         errorDecodedCases.add("dubbo:192.168.1.1");
         errorDecodedCases.add("://192.168.1.1");

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ExceptionFilter.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.common.extension.DisableInject;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ReflectUtils;
@@ -140,7 +141,8 @@ public void onError(Throwable e, Invoker<?> invoker, Invocation invocation) {
     }
 
     // For test purpose
-    public void setLogger(ErrorTypeAwareLogger logger) {
+    @DisableInject
+    public void mockLogger(ErrorTypeAwareLogger logger) {
         this.logger = logger;
     }
 }

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ExceptionFilterTest.java
Patch:
@@ -63,7 +63,7 @@ void testRpcException() {
             exceptionFilter.invoke(invoker, invocation);
         } catch (RpcException e) {
             assertEquals("TestRpcException", e.getMessage());
-            exceptionFilter.setLogger(failsafeLogger);
+            exceptionFilter.mockLogger(failsafeLogger);
             exceptionFilter.onError(e, invoker, invocation);
         }
 

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/collector/RegistryMetricsCollector.java
Patch:
@@ -54,7 +54,7 @@
 @Activate
 public class RegistryMetricsCollector extends CombMetricsCollector<RegistryEvent> {
 
-    private Boolean collectEnabled = false;
+    private Boolean collectEnabled = null;
     private final ApplicationModel applicationModel;
     private final RegistryStatComposite internalStat;
 

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java
Patch:
@@ -573,6 +573,7 @@ public void destroy() {
     }
 
     private List<URL> toUrlWithEmpty(URL consumerURL, Collection<Instance> instances) {
+        consumerURL = removeParamsFromConsumer(consumerURL);
         List<URL> urls = buildURLs(consumerURL, instances);
         // Nacos does not support configurators and routers from registry, so all notifications are of providers type.
         if (urls.size() == 0 && !getUrl().getParameter(ENABLE_EMPTY_PROTECTION_KEY, DEFAULT_ENABLE_EMPTY_PROTECTION)) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultModuleDeployer.java
Patch:
@@ -488,6 +488,9 @@ private void registerServiceInternal(ServiceConfigBase sc) {
         if (!sc.isExported()) {
             return;
         }
+        if (sc.shouldDelay()) {
+            return;
+        }
         sc.register(true);
     }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/data/RtStatComposite.java
Patch:
@@ -160,7 +160,9 @@ private List<Action> calServiceRtActions(Invocation invocation, String registryO
     public void calcMethodKeyRt(Invocation invocation, String registryOpType, Long responseTime) {
         List<Action> actions;
 
-        if (invocation.getServiceModel() != null && invocation.getServiceModel().getServiceMetadata() != null) {
+        if (getServiceLevel()
+                && invocation.getServiceModel() != null
+                && invocation.getServiceModel().getServiceMetadata() != null) {
             Map<String, Object> attributeMap =
                     invocation.getServiceModel().getServiceMetadata().getAttributeMap();
             Map<String, List<Action>> cache = (Map<String, List<Action>>) attributeMap.get("MethodKeyRt");

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyConnectionClient.java
Patch:
@@ -150,7 +150,9 @@ protected void doClose() {
                 current.close();
             }
             this.channel.set(null);
-            closePromise.setSuccess(null);
+            if (!closePromise.isDone()) {
+                closePromise.setSuccess(null);
+            }
         }
     }
 

File: dubbo-plugin/dubbo-native/src/main/java/org/apache/dubbo/aot/api/TypeDescriber.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.dubbo.aot.api;
 
-import org.apache.dubbo.aot.generate.ExecutableDescriber;
-
 import java.util.Set;
 
 /**

File: dubbo-plugin/dubbo-native/src/main/java/org/apache/dubbo/aot/generate/ReflectConfigMetadataRepository.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.aot.generate;
 
+import org.apache.dubbo.aot.api.ExecutableDescriber;
 import org.apache.dubbo.aot.api.MemberCategory;
 import org.apache.dubbo.aot.api.TypeDescriber;
 

File: dubbo-plugin/dubbo-native/src/main/java/org/apache/dubbo/aot/generate/ReflectionConfigWriter.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.aot.generate;
 
+import org.apache.dubbo.aot.api.ExecutableDescriber;
 import org.apache.dubbo.aot.api.ExecutableMode;
 import org.apache.dubbo.aot.api.FieldDescriber;
 import org.apache.dubbo.aot.api.MemberCategory;

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/extension/resteasy/filter/ResteasyRequestContainerFilterAdapter.java
Patch:
@@ -76,6 +76,8 @@ public void filter(RestFilterContext restFilterContext) throws Exception {
             restFilterContext.setComplete(true);
         } catch (Throwable e) {
             throw new RuntimeException("dubbo rest resteasy ContainerRequestFilter write response encode error", e);
+        } finally {
+            containerRequestContext.getHttpRequest().releaseContentBuffer();
         }
     }
 }

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/HttpHeaderNames.java
Patch:
@@ -25,7 +25,9 @@ public enum HttpHeaderNames {
 
     TRANSFER_ENCODING("transfer-encoding"),
 
-    TE("te");
+    TE("te"),
+
+    ACCEPT("accept");
 
     private final String name;
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/grpc/GrpcHeaderNames.java
Patch:
@@ -19,7 +19,8 @@
 public enum GrpcHeaderNames {
     GRPC_STATUS("grpc-status"),
     GRPC_MESSAGE("grpc-message"),
-    GRPC_ENCODING("grpc-encoding"),
+    GRPC_ENCODING("grpc-encoding"), // client request compress type
+    GRPC_ACCEPT_ENCODING("grpc-accept-encoding"), // client required response compress type
     GRPC_TIMEOUT("grpc-timeout"),
     ;
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/grpc/ProtobufHttpMessageCodec.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.rpc.protocol.tri.h12.grpc;
 
-import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.remoting.http12.exception.DecodeException;
 import org.apache.dubbo.remoting.http12.exception.EncodeException;
 import org.apache.dubbo.remoting.http12.message.HttpMessageCodec;
@@ -27,7 +26,6 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 
-@Activate(onClass = "com.google.protobuf.Message")
 public class ProtobufHttpMessageCodec implements HttpMessageCodec {
 
     private static final MediaType MEDIA_TYPE = new MediaType("application", "x-protobuf");
@@ -51,7 +49,7 @@ public Object decode(InputStream inputStream, Class<?> targetType) throws Decode
     }
 
     @Override
-    public MediaType contentType() {
+    public MediaType mediaType() {
         return MEDIA_TYPE;
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/grpc/WrapperHttpMessageCodec.java
Patch:
@@ -129,7 +129,7 @@ public Object[] decode(InputStream inputStream, Class<?>[] targetTypes) throws D
     }
 
     @Override
-    public MediaType contentType() {
+    public MediaType mediaType() {
         return MEDIA_TYPE;
     }
 

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/Hessian2FactoryManager.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
+import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
 
 import com.alibaba.com.caucho.hessian.io.SerializerFactory;
@@ -46,7 +47,7 @@ public Hessian2FactoryManager(FrameworkModel frameworkModel) {
 
     public SerializerFactory getSerializerFactory(ClassLoader classLoader) {
         SerializerFactory sticky = stickySerializerFactory;
-        if (sticky != null && sticky.getClassLoader().equals(classLoader)) {
+        if (sticky != null && Objects.equals(sticky.getClassLoader(), classLoader)) {
             return sticky;
         }
 

File: dubbo-spring-boot/dubbo-spring-boot-autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/DubboRelaxedBinding2AutoConfiguration.java
Patch:
@@ -51,7 +51,7 @@
  * @see DubboRelaxedBindingAutoConfiguration
  * @since 2.7.0
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(prefix = DUBBO_PREFIX, name = "enabled", matchIfMissing = true)
 @ConditionalOnClass(name = "org.springframework.boot.context.properties.bind.Binder")
 @AutoConfigureBefore(DubboRelaxedBindingAutoConfiguration.class)

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/DubboAutoConfiguration.java
Patch:
@@ -62,7 +62,7 @@ public class DubboAutoConfiguration {
     @ConditionalOnProperty(prefix = DUBBO_SCAN_PREFIX, name = BASE_PACKAGES_PROPERTY_NAME)
     @ConditionalOnBean(name = BASE_PACKAGES_BEAN_NAME)
     @Bean
-    public ServiceAnnotationPostProcessor serviceAnnotationBeanProcessor(
+    public static ServiceAnnotationPostProcessor serviceAnnotationBeanProcessor(
             @Qualifier(BASE_PACKAGES_BEAN_NAME) Set<String> packagesToScan) {
         ServiceAnnotationPostProcessor serviceAnnotationPostProcessor;
         try {

File: dubbo-common/src/main/java/org/apache/dubbo/config/MethodConfig.java
Patch:
@@ -217,9 +217,8 @@ public List<String> getPrefixes() {
             List<String> prefixes = new ArrayList<>();
             prefixes.add(parentPrefix + "." + this.getName());
             return prefixes;
-        } else {
-            throw new IllegalStateException("The parent prefix of MethodConfig is null");
         }
+        return null;
     }
 
     @Override

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import static org.apache.dubbo.common.constants.ProviderConstants.DEFAULT_PREFER_SERIALIZATION;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
@@ -43,6 +42,7 @@ class ProtocolConfigTest {
     @BeforeEach
     public void setUp() {
         DubboBootstrap.reset();
+        //        FrameworkModel.defaultModel().getBeanFactory().registerBean(TestPreferSerializationProvider.class);
     }
 
     @AfterEach
@@ -389,7 +389,7 @@ void testPreferSerializationDefault1() throws Exception {
         assertNull(protocolConfig.getPreferSerialization());
 
         protocolConfig.checkDefault();
-        assertThat(protocolConfig.getPreferSerialization(), equalTo(DEFAULT_PREFER_SERIALIZATION));
+        assertThat(protocolConfig.getPreferSerialization(), equalTo("fastjson2,hessian2"));
 
         protocolConfig = new ProtocolConfig();
         protocolConfig.setSerialization("x-serialization");
@@ -405,7 +405,7 @@ void testPreferSerializationDefault2() throws Exception {
         assertNull(protocolConfig.getPreferSerialization());
 
         protocolConfig.refresh();
-        assertThat(protocolConfig.getPreferSerialization(), equalTo(DEFAULT_PREFER_SERIALIZATION));
+        assertThat(protocolConfig.getPreferSerialization(), equalTo("fastjson2,hessian2"));
 
         protocolConfig = new ProtocolConfig();
         protocolConfig.setSerialization("x-serialization");

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/SpringMvcRestProtocolTest.java
Patch:
@@ -411,7 +411,7 @@ void testProxyDoubleCheck() {
         Object proxy = aopProxy.getProxy();
         SpringRestDemoService server = (SpringRestDemoService) proxy;
 
-        URL nettyUrl = this.registerProvider(exportUrl, server, SpringRestDemoService.class);
+        URL nettyUrl = this.registerProvider(getUrl(), server, SpringRestDemoService.class);
 
         Exporter<SpringRestDemoService> exporter = getExport(nettyUrl, server);
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/TriRpcStatus.java
Patch:
@@ -19,6 +19,8 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.remoting.TimeoutException;
 
+import java.io.Serializable;
+
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.QueryStringDecoder;
 import io.netty.handler.codec.http.QueryStringEncoder;
@@ -35,7 +37,7 @@
 /**
  * See https://github.com/grpc/grpc/blob/master/doc/statuscodes.md
  */
-public class TriRpcStatus {
+public class TriRpcStatus implements Serializable {
 
     public static final TriRpcStatus OK = fromCode(Code.OK);
     public static final TriRpcStatus UNKNOWN = fromCode(Code.UNKNOWN);

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/data/MethodStatComposite.java
Patch:
@@ -41,13 +41,11 @@
  * the key will not be displayed when exporting (to be optimized)
  */
 public class MethodStatComposite extends AbstractMetricsExport {
-    private boolean serviceLevel;
 
     private final AtomicBoolean samplesChanged = new AtomicBoolean(true);
 
     public MethodStatComposite(ApplicationModel applicationModel) {
         super(applicationModel);
-        this.serviceLevel = MethodMetric.isServiceLevel(getApplicationModel());
     }
 
     private final Map<MetricsKeyWrapper, Map<MethodMetric, AtomicLong>> methodNumStats = new ConcurrentHashMap<>();
@@ -70,7 +68,8 @@ public void initMethodKey(MetricsKeyWrapper wrapper, Invocation invocation) {
         methodNumStats
                 .get(wrapper)
                 .computeIfAbsent(
-                        new MethodMetric(getApplicationModel(), invocation, serviceLevel), k -> new AtomicLong(0L));
+                        new MethodMetric(getApplicationModel(), invocation, getServiceLevel()),
+                        k -> new AtomicLong(0L));
         samplesChanged.set(true);
     }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/data/RtStatComposite.java
Patch:
@@ -50,13 +50,11 @@
  */
 @SuppressWarnings({"rawtypes", "unchecked"})
 public class RtStatComposite extends AbstractMetricsExport {
-    private boolean serviceLevel;
 
     private final AtomicBoolean samplesChanged = new AtomicBoolean(true);
 
     public RtStatComposite(ApplicationModel applicationModel) {
         super(applicationModel);
-        this.serviceLevel = MethodMetric.isServiceLevel(getApplicationModel());
     }
 
     private final Map<String, List<LongContainer<? extends Number>>> rtStats = new ConcurrentHashMap<>();
@@ -190,7 +188,7 @@ private List<Action> calMethodRtActions(Invocation invocation, String registryOp
         List<Action> actions;
         actions = new LinkedList<>();
         for (LongContainer container : rtStats.get(registryOpType)) {
-            MethodMetric key = new MethodMetric(getApplicationModel(), invocation, serviceLevel);
+            MethodMetric key = new MethodMetric(getApplicationModel(), invocation, getServiceLevel());
             Number current = (Number) container.get(key);
             if (current == null) {
                 container.putIfAbsent(key, container.getInitFunc().apply(key));

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataConstants.java
Patch:
@@ -28,4 +28,6 @@ public interface MetadataConstants {
     String REPORT_CONSUMER_URL_KEY = "report-consumer-definition";
 
     String PATH_SEPARATOR = "/";
+
+    String NAMESPACE_KEY = "namespace";
 }

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosAggregateListener.java
Patch:
@@ -98,6 +98,6 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
-        return Objects.hash(notifyListener, serviceNames, serviceInstances);
+        return Objects.hash(notifyListener);
     }
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/DeployListenerAdapter.java
Patch:
@@ -28,6 +28,9 @@ public void onStarting(E scopeModel) {}
     @Override
     public void onStarted(E scopeModel) {}
 
+    @Override
+    public void onCompletion(E scopeModel) {}
+
     @Override
     public void onStopping(E scopeModel) {}
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/Deployer.java
Patch:
@@ -55,6 +55,8 @@ public interface Deployer<E extends ScopeModel> {
      */
     boolean isStarted();
 
+    boolean isCompletion();
+
     /**
      * @return true if the component is starting.
      * @see #isStarted()

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ExporterDeployListener.java
Patch:
@@ -39,6 +39,9 @@ public void onStarting(ApplicationModel scopeModel) {}
     @Override
     public synchronized void onStarted(ApplicationModel applicationModel) {}
 
+    @Override
+    public void onCompletion(ApplicationModel scopeModel) {}
+
     @Override
     public synchronized void onStopping(ApplicationModel scopeModel) {}
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/DubboBootstrapTest.java
Patch:
@@ -264,7 +264,7 @@ void testBootstrapStart() {
                 .start();
 
         Assertions.assertTrue(bootstrap.isInitialized());
-        Assertions.assertTrue(bootstrap.isStarted());
+        Assertions.assertTrue(bootstrap.isCompletion());
         Assertions.assertFalse(bootstrap.isStopped());
 
         ApplicationModel applicationModel = bootstrap.getApplicationModel();

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/probe/impl/DeployerReadinessProbe.java
Patch:
@@ -40,7 +40,7 @@ public boolean check() {
         List<ApplicationModel> applicationModels = frameworkModel.getApplicationModels();
         for (ApplicationModel applicationModel : applicationModels) {
             for (ModuleModel moduleModel : applicationModel.getModuleModels()) {
-                if (!moduleModel.getDeployer().isStarted()) {
+                if (!moduleModel.getDeployer().isCompletion()) {
                     return false;
                 }
             }

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/ReadyTest.java
Patch:
@@ -63,7 +63,7 @@ public void setUp() {
         Mockito.when(applicationModel.getModuleModels()).thenReturn(Arrays.asList(moduleModel));
         Mockito.when(applicationModel.getApplicationConfigManager()).thenReturn(manager);
         Mockito.when(moduleModel.getDeployer()).thenReturn(moduleDeployer);
-        Mockito.when(moduleDeployer.isStarted()).thenReturn(true);
+        Mockito.when(moduleDeployer.isCompletion()).thenReturn(true);
 
         ExtensionLoader loader = Mockito.mock(ExtensionLoader.class);
         Mockito.when(frameworkModel.getExtensionLoader(ReadinessProbe.class)).thenReturn(loader);
@@ -83,7 +83,7 @@ void testExecute() {
         Assertions.assertEquals("true", result);
         Assertions.assertEquals(commandContext.getHttpCode(), 200);
 
-        Mockito.when(moduleDeployer.isStarted()).thenReturn(false);
+        Mockito.when(moduleDeployer.isCompletion()).thenReturn(false);
         result = ready.execute(commandContext, new String[0]);
         Assertions.assertEquals("false", result);
         Assertions.assertEquals(commandContext.getHttpCode(), 503);

File: dubbo-plugin/dubbo-security/src/main/java/org/apache/dubbo/security/cert/CertDeployerListener.java
Patch:
@@ -49,6 +49,9 @@ public void onStarting(ApplicationModel scopeModel) {
     @Override
     public void onStarted(ApplicationModel scopeModel) {}
 
+    @Override
+    public void onCompletion(ApplicationModel scopeModel) {}
+
     @Override
     public void onStopping(ApplicationModel scopeModel) {
         if (dubboCertManager != null) {

File: dubbo-maven-plugin/src/main/java/org/apache/dubbo/maven/plugin/aot/DubboProcessAotMojo.java
Patch:
@@ -85,7 +85,7 @@ protected void executeAot() throws Exception {
 
     private String[] getAotArguments(String applicationClass) {
         List<String> aotArguments = new ArrayList<>();
-        aotArguments.add(applicationClass);
+        aotArguments.add(applicationClass != null ? applicationClass : "");
         aotArguments.add(this.generatedSources.toString());
         aotArguments.add(this.generatedResources.toString());
         aotArguments.add(this.generatedClasses.toString());

File: dubbo-common/src/main/java/org/apache/dubbo/common/cache/FileCacheStoreFactory.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 
 import java.io.File;
 import java.io.IOException;
@@ -34,6 +35,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
+import static org.apache.dubbo.common.constants.CommonConstants.SystemProperty.USER_HOME;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_CACHE_PATH_INACCESSIBLE;
 
 /**
@@ -81,7 +83,7 @@ public static FileCacheStore getInstance(String basePath, String cacheName) {
     public static FileCacheStore getInstance(String basePath, String cacheName, boolean enableFileCache) {
         if (basePath == null) {
             // default case: ~/.dubbo
-            basePath = System.getProperty("user.home") + File.separator + ".dubbo";
+            basePath = SystemPropertyConfigUtils.getSystemProperty(USER_HOME) + File.separator + ".dubbo";
         }
         if (basePath.endsWith(File.separator)) {
             basePath = basePath.substring(0, basePath.length() - 1);

File: dubbo-common/src/main/java/org/apache/dubbo/common/timer/HashedWheelTimer.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ClassUtils;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 
 import java.util.Collections;
 import java.util.HashSet;
@@ -36,7 +37,7 @@
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import java.util.concurrent.atomic.AtomicLong;
 
-import static org.apache.dubbo.common.constants.CommonConstants.OS_NAME_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SystemProperty.SYSTEM_OS_NAME;
 import static org.apache.dubbo.common.constants.CommonConstants.OS_WIN_PREFIX;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_ERROR_RUN_THREAD_TASK;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_ERROR_TOO_MANY_INSTANCES;
@@ -811,7 +812,7 @@ private HashedWheelTimeout pollTimeout() {
         }
     }
 
-    private static final boolean IS_OS_WINDOWS = System.getProperty(OS_NAME_KEY, "").toLowerCase(Locale.US).contains(OS_WIN_PREFIX);
+    private static final boolean IS_OS_WINDOWS = SystemPropertyConfigUtils.getSystemProperty(SYSTEM_OS_NAME, "").toLowerCase(Locale.US).contains(OS_WIN_PREFIX);
 
     private boolean isWindows() {
         return IS_OS_WINDOWS;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConfigUtils.java
Patch:
@@ -164,9 +164,9 @@ public static String replaceProperty(String expression, Configuration configurat
      * @return
      */
     public static Properties getProperties(Set<ClassLoader> classLoaders) {
-        String path = System.getProperty(CommonConstants.DUBBO_PROPERTIES_KEY);
+        String path = SystemPropertyConfigUtils.getSystemProperty(CommonConstants.DubboProperty.DUBBO_PROPERTIES_KEY);
         if (StringUtils.isEmpty(path)) {
-            path = System.getenv(CommonConstants.DUBBO_PROPERTIES_KEY);
+            path = System.getenv(CommonConstants.DubboProperty.DUBBO_PROPERTIES_KEY);
             if (StringUtils.isEmpty(path)) {
                 path = CommonConstants.DEFAULT_DUBBO_PROPERTIES;
             }

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/JRE.java
Patch:
@@ -19,6 +19,8 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 
+import static org.apache.dubbo.common.constants.CommonConstants.SystemProperty.SYSTEM_JAVA_VERSION;
+
 /**
  * JRE version
  */
@@ -81,7 +83,7 @@ public boolean isCurrentVersion() {
 
     private static JRE getJre() {
         // get java version from system property
-        String version = System.getProperty("java.version");
+        String version = SystemPropertyConfigUtils.getSystemProperty(SYSTEM_JAVA_VERSION);
         boolean isBlank = StringUtils.isBlank(version);
         if (isBlank) {
             logger.debug("java.version is blank");

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/JVMUtil.java
Patch:
@@ -56,7 +56,8 @@ private static String getThreadDumpString(ThreadInfo threadInfo) {
         int i = 0;
         // default is 32, means only print up to 32 lines
         int jstackMaxLine = 32;
-        String jstackMaxLineStr = System.getProperty(CommonConstants.DUBBO_JSTACK_MAXLINE);
+        String jstackMaxLineStr =
+                SystemPropertyConfigUtils.getSystemProperty(CommonConstants.DubboProperty.DUBBO_JSTACK_MAXLINE);
         if (StringUtils.isNotEmpty(jstackMaxLineStr)) {
             try {
                 jstackMaxLine = Integer.parseInt(jstackMaxLineStr);

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/JsonUtils.java
Patch:
@@ -35,7 +35,8 @@ protected static JsonUtil getJson() {
         if (jsonUtil == null) {
             synchronized (JsonUtils.class) {
                 if (jsonUtil == null) {
-                    String preferJsonFrameworkName = System.getProperty(CommonConstants.PREFER_JSON_FRAMEWORK_NAME);
+                    String preferJsonFrameworkName = SystemPropertyConfigUtils.getSystemProperty(
+                            CommonConstants.DubboProperty.DUBBO_PREFER_JSON_FRAMEWORK_NAME);
                     if (StringUtils.isNotEmpty(preferJsonFrameworkName)) {
                         try {
                             JsonUtil instance = null;

File: dubbo-common/src/main/java/org/apache/dubbo/config/Constants.java
Patch:
@@ -89,8 +89,6 @@ public interface Constants {
 
     String MULTICAST = "multicast";
 
-    String DUBBO_IP_TO_REGISTRY = "DUBBO_IP_TO_REGISTRY";
-
     String DUBBO_PORT_TO_REGISTRY = "DUBBO_PORT_TO_REGISTRY";
 
     String DUBBO_PORT_TO_BIND = "DUBBO_PORT_TO_BIND";

File: dubbo-common/src/test/java/org/apache/dubbo/common/URLTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.url.component.ServiceConfigURL;
 import org.apache.dubbo.common.utils.CollectionUtils;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 
 import java.io.File;
 import java.util.Arrays;
@@ -28,8 +29,8 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-import static org.apache.dubbo.common.constants.CommonConstants.OS_NAME_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.OS_WIN_PREFIX;
+import static org.apache.dubbo.common.constants.CommonConstants.SystemProperty.SYSTEM_OS_NAME;
 import static org.hamcrest.CoreMatchers.anyOf;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -720,7 +721,7 @@ void test_addParameterIfAbsent() throws Exception {
 
     @Test
     void test_windowAbsolutePathBeginWithSlashIsValid() throws Exception {
-        final String osProperty = System.getProperties().getProperty(OS_NAME_KEY);
+        final String osProperty = SystemPropertyConfigUtils.getSystemProperty(SYSTEM_OS_NAME);
         if (!osProperty.toLowerCase().contains(OS_WIN_PREFIX)) return;
 
         System.out.println("Test Windows valid path string.");

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/JRETest.java
Patch:
@@ -22,12 +22,14 @@
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
+import static org.apache.dubbo.common.constants.CommonConstants.SystemProperty.SYSTEM_JAVA_VERSION;
+
 class JRETest {
 
     @Test
     @Disabled
     void blankSystemVersion() {
-        System.setProperty("java.version", "");
+        SystemPropertyConfigUtils.setSystemProperty(SYSTEM_JAVA_VERSION, "");
         JRE jre = JRE.currentVersion();
         Assertions.assertEquals(JRE.JAVA_8, jre);
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -73,6 +73,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER_SIDE;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_CLUSTER_DOMAIN;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_MESH_PORT;
+import static org.apache.dubbo.common.constants.CommonConstants.DubboProperty.DUBBO_IP_TO_REGISTRY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.LOCALHOST_VALUE;
 import static org.apache.dubbo.common.constants.CommonConstants.MESH_ENABLE;
@@ -95,7 +96,6 @@
 import static org.apache.dubbo.common.constants.RegistryConstants.SUBSCRIBED_SERVICE_NAMES_KEY;
 import static org.apache.dubbo.common.utils.NetUtils.isInvalidLocalHost;
 import static org.apache.dubbo.common.utils.StringUtils.splitToSet;
-import static org.apache.dubbo.config.Constants.DUBBO_IP_TO_REGISTRY;
 import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
 import static org.apache.dubbo.registry.Constants.REGISTER_IP_KEY;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -79,6 +79,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_IP_TO_BIND;
+import static org.apache.dubbo.common.constants.CommonConstants.DubboProperty.DUBBO_IP_TO_REGISTRY;
 import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_MANAGEMENT_MODE_ISOLATION;
 import static org.apache.dubbo.common.constants.CommonConstants.EXPORTER_LISTENER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.EXT_PROTOCOL;
@@ -104,7 +105,6 @@
 import static org.apache.dubbo.common.utils.NetUtils.getLocalHost;
 import static org.apache.dubbo.common.utils.NetUtils.isInvalidLocalHost;
 import static org.apache.dubbo.common.utils.NetUtils.isInvalidPort;
-import static org.apache.dubbo.config.Constants.DUBBO_IP_TO_REGISTRY;
 import static org.apache.dubbo.config.Constants.DUBBO_PORT_TO_BIND;
 import static org.apache.dubbo.config.Constants.DUBBO_PORT_TO_REGISTRY;
 import static org.apache.dubbo.config.Constants.SCOPE_NONE;
@@ -336,7 +336,7 @@ public void export(RegisterTypeEnum registerType) {
                     doDelayExport();
                 } else if (Integer.valueOf(-1).equals(getDelay())
                         && Boolean.parseBoolean(ConfigurationUtils.getProperty(
-                                getScopeModel(), CommonConstants.DUBBO_MANUAL_REGISTER_KEY, "false"))) {
+                                getScopeModel(), CommonConstants.DubboProperty.DUBBO_MANUAL_REGISTER_KEY, "false"))) {
                     // should not register by default
                     doExport(RegisterTypeEnum.MANUAL_REGISTER);
                 } else {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/support/Constants.java
Patch:
@@ -25,8 +25,6 @@ public interface Constants {
 
     Boolean DEFAULT_METADATA_REPORT_CYCLE_REPORT = true;
 
-    String USER_HOME = "user.home";
-
     String CACHE = ".cache";
 
     String DUBBO_METADATA = "/.dubbo/dubbo-metadata-";

File: dubbo-plugin/dubbo-plugin-access-log/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 import org.apache.dubbo.rpc.Constants;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
@@ -49,6 +50,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER;
+import static org.apache.dubbo.common.constants.CommonConstants.SystemProperty.SYSTEM_LINE_SEPARATOR;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FILTER_VALIDATION_EXCEPTION;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.VULNERABILITY_WARNING;
 import static org.apache.dubbo.rpc.Constants.ACCESS_LOG_FIXED_PATH_KEY;
@@ -88,8 +90,6 @@ public class AccessLogFilter implements Filter {
     private final AtomicBoolean scheduled = new AtomicBoolean();
     private ScheduledFuture<?> future;
 
-    private static final String LINE_SEPARATOR = "line.separator";
-
     /**
      * Default constructor initialize demon thread for writing into access log file with names with access log key
      * defined in url <b>accesslog</b>
@@ -215,7 +215,7 @@ private void processWithAccessKeyLogger(Queue<AccessLogData> logQueue, File file
         try {
             while (!logQueue.isEmpty()) {
                 writer.write(logQueue.poll().getLogMessage());
-                writer.write(System.getProperty(LINE_SEPARATOR));
+                writer.write(SystemPropertyConfigUtils.getSystemProperty(SYSTEM_LINE_SEPARATOR));
             }
         } finally {
             writer.flush();

File: dubbo-plugin/dubbo-plugin-mock/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.InvokeMode;
@@ -47,8 +48,8 @@
 public class MockClusterInvoker<T> implements ClusterInvoker<T> {
 
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(MockClusterInvoker.class);
-    private static final boolean setFutureWhenSync =
-            Boolean.parseBoolean(System.getProperty(CommonConstants.SET_FUTURE_IN_SYNC_MODE, "true"));
+    private static final boolean setFutureWhenSync = Boolean.parseBoolean(SystemPropertyConfigUtils.getSystemProperty(
+            CommonConstants.ThirdPartyProperty.SET_FUTURE_IN_SYNC_MODE, "true"));
 
     private final Directory<T> directory;
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/Request.java
Patch:
@@ -17,13 +17,14 @@
 package org.apache.dubbo.remoting.exchange;
 
 import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 
 import java.security.SecureRandom;
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.concurrent.atomic.AtomicLong;
 
+import static org.apache.dubbo.common.constants.CommonConstants.DubboProperty.DUBBO_USE_SECURE_RANDOM_ID;
 import static org.apache.dubbo.common.constants.CommonConstants.HEARTBEAT_EVENT;
-import static org.apache.dubbo.remoting.Constants.USE_SECURE_RANDOM_ID;
 
 /**
  * Request.
@@ -56,7 +57,7 @@ public Request(long id) {
 
     static {
         long startID = ThreadLocalRandom.current().nextLong();
-        if (Boolean.parseBoolean(System.getProperty(USE_SECURE_RANDOM_ID, "false"))) {
+        if (Boolean.parseBoolean(SystemPropertyConfigUtils.getSystemProperty(DUBBO_USE_SECURE_RANDOM_ID, "false"))) {
             try {
                 SecureRandom rand = new SecureRandom(SecureRandom.getSeed(20));
                 startID = rand.nextLong();

File: dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/tomcat/TomcatHttpServer.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 import org.apache.dubbo.remoting.http.HttpHandler;
 import org.apache.dubbo.remoting.http.servlet.DispatcherServlet;
 import org.apache.dubbo.remoting.http.servlet.ServletManager;
@@ -32,6 +33,7 @@
 import org.apache.catalina.startup.Tomcat;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_THREADS;
+import static org.apache.dubbo.common.constants.CommonConstants.SystemProperty.SYSTEM_JAVA_IO_TMPDIR;
 import static org.apache.dubbo.common.constants.CommonConstants.THREADS_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_FAILED_STOP_HTTP_SERVER;
 import static org.apache.dubbo.remoting.Constants.ACCEPTS_KEY;
@@ -49,7 +51,7 @@ public TomcatHttpServer(URL url, final HttpHandler handler) {
 
         this.url = url;
         DispatcherServlet.addHttpHandler(url.getPort(), handler);
-        String baseDir = new File(System.getProperty("java.io.tmpdir")).getAbsolutePath();
+        String baseDir = new File(SystemPropertyConfigUtils.getSystemProperty(SYSTEM_JAVA_IO_TMPDIR)).getAbsolutePath();
         tomcat = new Tomcat();
 
         Connector connector = tomcat.getConnector();

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.ThreadlessExecutor;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 import org.apache.dubbo.rpc.model.ConsumerMethodModel;
 import org.apache.dubbo.rpc.protocol.dubbo.FutureAdapter;
 
@@ -69,8 +70,8 @@ public class AsyncRpcResult implements Result {
     /**
      * Whether set future to Thread Local when invocation mode is sync
      */
-    private static final boolean setFutureWhenSync =
-            Boolean.parseBoolean(System.getProperty(CommonConstants.SET_FUTURE_IN_SYNC_MODE, "true"));
+    private static final boolean setFutureWhenSync = Boolean.parseBoolean(SystemPropertyConfigUtils.getSystemProperty(
+            CommonConstants.ThirdPartyProperty.SET_FUTURE_IN_SYNC_MODE, "true"));
 
     public AsyncRpcResult(CompletableFuture<AppResponse> future, Invocation invocation) {
         this.responseFuture = future;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Constants.java
Patch:
@@ -94,7 +94,6 @@ public interface Constants {
     String CONSUMER_MODEL = "consumerModel";
     String METHOD_MODEL = "methodModel";
 
-    String SERIALIZATION_SECURITY_CHECK_KEY = "serialization.security.check";
     String INVOCATION_KEY = "invocation";
     String SERIALIZATION_ID_KEY = "serialization_id";
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dubbo.common.utils.ArrayUtils;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.NetUtils;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.TimeoutException;
 import org.apache.dubbo.remoting.utils.UrlUtils;
@@ -92,8 +93,8 @@ public abstract class AbstractInvoker<T> implements Invoker<T> {
     /**
      * Whether set future to Thread Local when invocation mode is sync
      */
-    private static final boolean setFutureWhenSync =
-            Boolean.parseBoolean(System.getProperty(CommonConstants.SET_FUTURE_IN_SYNC_MODE, "true"));
+    private static final boolean setFutureWhenSync = Boolean.parseBoolean(SystemPropertyConfigUtils.getSystemProperty(
+            CommonConstants.ThirdPartyProperty.SET_FUTURE_IN_SYNC_MODE, "true"));
 
     // -- Constructor
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.common.utils.CacheableSupplier;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.Codec;
 import org.apache.dubbo.remoting.Constants;
@@ -56,11 +57,11 @@
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PAYLOAD;
+import static org.apache.dubbo.common.constants.CommonConstants.SystemProperty.SERIALIZATION_SECURITY_CHECK_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_FAILED_DECODE;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_EXCEED_PAYLOAD_LIMIT;
 import static org.apache.dubbo.rpc.Constants.SERIALIZATION_ID_KEY;
-import static org.apache.dubbo.rpc.Constants.SERIALIZATION_SECURITY_CHECK_KEY;
 
 public class DecodeableRpcInvocation extends RpcInvocation implements Codec, Decodeable {
 
@@ -82,7 +83,7 @@ public class DecodeableRpcInvocation extends RpcInvocation implements Codec, Dec
     protected final transient Supplier<CallbackServiceCodec> callbackServiceCodecFactory;
 
     private static final boolean CHECK_SERIALIZATION =
-            Boolean.parseBoolean(System.getProperty(SERIALIZATION_SECURITY_CHECK_KEY, "true"));
+            Boolean.parseBoolean(SystemPropertyConfigUtils.getSystemProperty(SERIALIZATION_SECURITY_CHECK_KEY, "true"));
 
     public DecodeableRpcInvocation(
             FrameworkModel frameworkModel, Channel channel, Request request, InputStream is, byte id) {

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java
Patch:
@@ -40,9 +40,9 @@
 import java.io.OutputStream;
 import java.lang.reflect.Type;
 
+import static org.apache.dubbo.common.constants.CommonConstants.SystemProperty.SERIALIZATION_SECURITY_CHECK_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_FAILED_DECODE;
 import static org.apache.dubbo.rpc.Constants.SERIALIZATION_ID_KEY;
-import static org.apache.dubbo.rpc.Constants.SERIALIZATION_SECURITY_CHECK_KEY;
 
 public class DecodeableRpcResult extends AppResponse implements Codec, Decodeable {
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.common.serialize.Serialization;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
 import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.exchange.HeartBeatRequest;
 import org.apache.dubbo.remoting.exchange.HeartBeatResponse;
@@ -45,11 +46,11 @@
 import java.util.Optional;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static org.apache.dubbo.common.constants.CommonConstants.BYTE_ACCESSOR_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_MANAGEMENT_MODE_ISOLATION;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SystemProperty.SYSTEM_BYTE_ACCESSOR_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_FAILED_DECODE;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.DEFAULT_DECODE_IN_IO_THREAD;
@@ -80,7 +81,7 @@ public class DubboCodec extends ExchangeCodec {
     public DubboCodec(FrameworkModel frameworkModel) {
         this.frameworkModel = frameworkModel;
         callbackServiceCodec = new CallbackServiceCodec(frameworkModel);
-        customByteAccessor = Optional.ofNullable(System.getProperty(BYTE_ACCESSOR_KEY))
+        customByteAccessor = Optional.ofNullable(SystemPropertyConfigUtils.getSystemProperty(SYSTEM_BYTE_ACCESSOR_KEY))
                 .filter(StringUtils::isNotBlank)
                 .map(key ->
                         frameworkModel.getExtensionLoader(ByteAccessor.class).getExtension(key))

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.serialize.SerializationException;
 import org.apache.dubbo.common.utils.AtomicPositiveInteger;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.TimeoutException;
@@ -70,8 +71,8 @@ public class DubboInvoker<T> extends AbstractInvoker<T> {
 
     private final int serverShutdownTimeout;
 
-    private static final boolean setFutureWhenSync =
-            Boolean.parseBoolean(System.getProperty(CommonConstants.SET_FUTURE_IN_SYNC_MODE, "true"));
+    private static final boolean setFutureWhenSync = Boolean.parseBoolean(SystemPropertyConfigUtils.getSystemProperty(
+            CommonConstants.ThirdPartyProperty.SET_FUTURE_IN_SYNC_MODE, "true"));
 
     public DubboInvoker(Class<T> serviceType, URL url, ClientsProvider clientsProvider) {
         this(serviceType, url, clientsProvider, null);

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmInvoker.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.common.utils.ArrayUtils;
 import org.apache.dubbo.common.utils.ExecutorUtil;
 import org.apache.dubbo.common.utils.ReflectUtils;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Constants;
@@ -72,8 +73,8 @@ public class InjvmInvoker<T> extends AbstractInvoker<T> {
 
     private final boolean shouldIgnoreSameModule;
 
-    private static final boolean setFutureWhenSync =
-            Boolean.parseBoolean(System.getProperty(CommonConstants.SET_FUTURE_IN_SYNC_MODE, "true"));
+    private static final boolean setFutureWhenSync = Boolean.parseBoolean(SystemPropertyConfigUtils.getSystemProperty(
+            CommonConstants.ThirdPartyProperty.SET_FUTURE_IN_SYNC_MODE, "true"));
 
     InjvmInvoker(Class<T> type, URL url, String key, Map<String, Exporter<?>> exporterMap) {
         super(type, url);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.common.stream.StreamObserver;
 import org.apache.dubbo.common.threadpool.ThreadlessExecutor;
 import org.apache.dubbo.common.utils.ReflectUtils;
+import org.apache.dubbo.common.utils.SystemPropertyConfigUtils;
 import org.apache.dubbo.remoting.api.connection.AbstractConnectionClient;
 import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.AsyncRpcResult;
@@ -94,8 +95,8 @@ public class TripleInvoker<T> extends AbstractInvoker<T> {
     private final String acceptEncodings;
     private final TripleWriteQueue writeQueue = new TripleWriteQueue(256);
 
-    private static final boolean setFutureWhenSync =
-            Boolean.parseBoolean(System.getProperty(CommonConstants.SET_FUTURE_IN_SYNC_MODE, "true"));
+    private static final boolean setFutureWhenSync = Boolean.parseBoolean(SystemPropertyConfigUtils.getSystemProperty(
+            CommonConstants.ThirdPartyProperty.SET_FUTURE_IN_SYNC_MODE, "true"));
     private final PackableMethodFactory packableMethodFactory;
     private final Map<MethodDescriptor, PackableMethod> packableMethodCache = new ConcurrentHashMap<>();
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -801,6 +801,9 @@ public void refresh() {
         if (StringUtils.isEmpty(getName())) {
             this.setName(DEFAULT_APP_NAME);
             LOGGER.warn(
+                    COMMON_UNEXPECTED_EXCEPTION,
+                    "",
+                    "",
                     "No application name was set, '" + DEFAULT_APP_NAME
                             + "' will be used as the default application name,"
                             + " it's highly recommended to set a unique and customized name for it can be critical for some service governance features.");

File: dubbo-common/src/main/java/org/apache/dubbo/config/Constants.java
Patch:
@@ -156,4 +156,6 @@ public interface Constants {
     String DEFAULT_NATIVE_COMPILER = "jdk";
 
     String DEFAULT_NATIVE_PROXY = "jdk";
+
+    String DEFAULT_APP_NAME = "DEFAULT_DUBBO_APP";
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2Protocol.java
Patch:
@@ -167,8 +167,8 @@ public void configClientPipeline(URL url, ChannelOperator operator, ContextOpera
         List<ChannelHandler> handlers = new ArrayList<>();
         handlers.add(new ChannelHandlerPretender(codec));
         handlers.add(new ChannelHandlerPretender(new Http2MultiplexHandler(new ChannelDuplexHandler())));
-        handlers.add(new ChannelHandlerPretender(new TripleGoAwayHandler()));
         handlers.add(new ChannelHandlerPretender(new TriplePingPongHandler(UrlUtils.getCloseTimeout(url))));
+        handlers.add(new ChannelHandlerPretender(new TripleGoAwayHandler()));
         handlers.add(new ChannelHandlerPretender(new TripleTailHandler()));
         operator.configChannelHandler(handlers);
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/transport/TripleGoAwayHandler.java
Patch:
@@ -42,7 +42,9 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                         + ctx.channel().remoteAddress() + " and will reconnect later.");
             }
             connectionHandler.onGoAway(ctx.channel());
+            ReferenceCountUtil.release(msg);
+            return;
         }
-        ReferenceCountUtil.release(msg);
+        super.channelRead(ctx, msg);
     }
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalTest.java
Patch:
@@ -237,7 +237,7 @@ void testConstructionWithIndex() throws Exception {
         nextIndexField.setAccessible(true);
         AtomicInteger nextIndex = (AtomicInteger) nextIndexField.get(AtomicInteger.class);
         int arrayListCapacityMaxSize = InternalThreadLocalMap.ARRAY_LIST_CAPACITY_MAX_SIZE;
-        int nextIndex_before = nextIndex.get();
+        int nextIndex_before = nextIndex.incrementAndGet();
         nextIndex.set(0);
         final AtomicReference<Throwable> throwable = new AtomicReference<Throwable>();
         try {

File: dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/brave/BraveAutoConfiguration.java
Patch:
@@ -38,9 +38,12 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 
+import static org.apache.dubbo.spring.boot.util.DubboUtils.DUBBO_PREFIX;
+
 /**
  * provider Brave when you are using Boot <3.0 or you are not using spring-boot-starter-actuator
  */
+@ConditionalOnProperty(prefix = DUBBO_PREFIX, name = "enabled", matchIfMissing = true)
 @AutoConfiguration(
         before = DubboMicrometerTracingAutoConfiguration.class,
         afterName = "org.springframework.boot.actuate.autoconfigure.tracing.BraveAutoConfiguration")

File: dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/exporter/otlp/OtlpAutoConfiguration.java
Patch:
@@ -35,10 +35,12 @@
 import org.springframework.context.annotation.Bean;
 
 import static org.apache.dubbo.spring.boot.observability.autoconfigure.ObservabilityUtils.DUBBO_TRACING_OTLP_CONFIG_PREFIX;
+import static org.apache.dubbo.spring.boot.util.DubboUtils.DUBBO_PREFIX;
 
 /**
  * @since 3.2.2
  */
+@ConditionalOnProperty(prefix = DUBBO_PREFIX, name = "enabled", matchIfMissing = true)
 @AutoConfiguration
 @ConditionalOnClass({OtelTracer.class, SdkTracerProvider.class, OpenTelemetry.class, OtlpGrpcSpanExporter.class})
 @ConditionalOnDubboTracingEnable

File: dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/exporter/zipkin/ZipkinAutoConfiguration.java
Patch:
@@ -36,6 +36,7 @@
 import zipkin2.reporter.Sender;
 
 import static org.apache.dubbo.spring.boot.observability.autoconfigure.ObservabilityUtils.DUBBO_TRACING_ZIPKIN_CONFIG_PREFIX;
+import static org.apache.dubbo.spring.boot.util.DubboUtils.DUBBO_PREFIX;
 
 /**
  * {@link EnableAutoConfiguration Auto-configuration} for Zipkin.
@@ -46,6 +47,7 @@
  *
  * @since 3.2.1
  */
+@ConditionalOnProperty(prefix = DUBBO_PREFIX, name = "enabled", matchIfMissing = true)
 @AutoConfiguration(
         after = RestTemplateAutoConfiguration.class,
         afterName = "org.springframework.boot.actuate.autoconfigure.tracing.zipkin")

File: dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/otel/OpenTelemetryAutoConfiguration.java
Patch:
@@ -37,9 +37,12 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
+import static org.apache.dubbo.spring.boot.util.DubboUtils.DUBBO_PREFIX;
+
 /**
  * provider OpenTelemetry when you are using Boot <3.0 or you are not using spring-boot-starter-actuator
  */
+@ConditionalOnProperty(prefix = DUBBO_PREFIX, name = "enabled", matchIfMissing = true)
 @AutoConfiguration(
         before = DubboMicrometerTracingAutoConfiguration.class,
         afterName = "org.springframework.boot.actuate.autoconfigure.tracing.OpenTelemetryAutoConfiguration")

File: dubbo-plugin/dubbo-compiler/src/main/java/org/apache/dubbo/gen/AbstractGenerator.java
Patch:
@@ -99,6 +99,9 @@ private List<ServiceContext> findServices(List<FileDescriptorProto> protos, Prot
                 serviceContext.packageName = extractPackageName(fileProto);
                 if (!Strings.isNullOrEmpty(fileProto.getOptions().getJavaOuterClassname())) {
                     serviceContext.outerClassName = fileProto.getOptions().getJavaOuterClassname();
+                } else {
+                    serviceContext.outerClassName =
+                            ProtoTypeMap.getJavaOuterClassname(fileProto, fileProto.getOptions());
                 }
                 serviceContext.commonPackageName = extractCommonPackageName(fileProto);
                 serviceContext.multipleFiles = fileProto.getOptions().getJavaMultipleFiles();
@@ -128,7 +131,6 @@ private ServiceContext buildServiceContext(
         ServiceContext serviceContext = new ServiceContext();
         serviceContext.fileName = getClassPrefix() + serviceProto.getName() + getClassSuffix() + ".java";
         serviceContext.className = getClassPrefix() + serviceProto.getName() + getClassSuffix();
-        serviceContext.outerClassName = serviceProto.getName() + "OuterClass";
         serviceContext.interfaceFileName = serviceProto.getName() + ".java";
         serviceContext.interfaceClassName = serviceProto.getName();
         serviceContext.serviceName = serviceProto.getName();

File: dubbo-plugin/dubbo-compiler/src/main/java/org/apache/dubbo/gen/utils/ProtoTypeMap.java
Patch:
@@ -62,7 +62,7 @@ public String toJavaTypeName(@Nonnull String protoTypeName) {
         return (String)this.types.get(protoTypeName);
     }
 
-    private static String getJavaOuterClassname(DescriptorProtos.FileDescriptorProto fileDescriptor, DescriptorProtos.FileOptions fileOptions) {
+    public static String getJavaOuterClassname(DescriptorProtos.FileDescriptorProto fileDescriptor, DescriptorProtos.FileOptions fileOptions) {
         if (fileOptions.hasJavaOuterClassname()) {
             return fileOptions.getJavaOuterClassname();
         } else {

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/DubboConfigurationProperties.java
Patch:
@@ -37,13 +37,15 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
+import static org.apache.dubbo.spring.boot.util.DubboUtils.DUBBO_PREFIX;
+
 /**
  * Dubbo {@link ConfigurationProperties Config Properties} only used to generate JSON metadata (non-public class)
  *
  * @see ConfigKeys
  * @since 2.7.1
  */
-@ConfigurationProperties("dubbo")
+@ConfigurationProperties(DUBBO_PREFIX)
 public class DubboConfigurationProperties {
 
     /**

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Cluster.java
Patch:
@@ -55,6 +55,8 @@ static Cluster getCluster(ScopeModel scopeModel, String name, boolean wrap) {
         if (StringUtils.isEmpty(name)) {
             name = Cluster.DEFAULT;
         }
-        return ScopeModelUtil.getApplicationModel(scopeModel).getExtensionLoader(Cluster.class).getExtension(name, wrap);
+        return ScopeModelUtil.getApplicationModel(scopeModel)
+                .getExtensionLoader(Cluster.class)
+                .getExtension(name, wrap);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/ClusterScopeModelInitializer.java
Patch:
@@ -38,6 +38,5 @@ public void initializeApplicationModel(ApplicationModel applicationModel) {
     }
 
     @Override
-    public void initializeModuleModel(ModuleModel moduleModel) {
-    }
+    public void initializeModuleModel(ModuleModel moduleModel) {}
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/ConfiguratorFactory.java
Patch:
@@ -36,5 +36,4 @@ public interface ConfiguratorFactory {
      */
     @Adaptive(CommonConstants.PROTOCOL_KEY)
     Configurator getConfigurator(URL url);
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Constants.java
Patch:
@@ -100,7 +100,6 @@ public interface Constants {
 
     String OVERRIDE_PROVIDERS_KEY = "providerAddresses";
 
-
     /**
      * key for router type, for e.g., "script"/"file",  corresponding to ScriptRouterFactory.NAME, FileRouterFactory.NAME
      */

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/LoadBalance.java
Patch:
@@ -46,5 +46,4 @@ public interface LoadBalance {
      */
     @Adaptive("loadbalance")
     <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Merger.java
Patch:
@@ -22,5 +22,4 @@
 public interface Merger<T> {
 
     T merge(T... items);
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/ProviderURLMergeProcessor.java
Patch:
@@ -33,7 +33,9 @@ public interface ProviderURLMergeProcessor {
      */
     URL mergeUrl(URL remoteUrl, Map<String, String> localParametersMap);
 
-    default Map<String, String> mergeLocalParams(Map<String, String> localMap) { return localMap; }
+    default Map<String, String> mergeLocalParams(Map<String, String> localMap) {
+        return localMap;
+    }
 
     default boolean accept(URL providerUrl, Map<String, String> localParametersMap) {
         return true;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RuleConverter.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.rpc.cluster;
 
 import org.apache.dubbo.common.URL;
@@ -26,5 +25,4 @@
 public interface RuleConverter {
 
     List<URL> convert(URL subscribeUrl, Object source);
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/absent/AbsentConfigurator.java
Patch:
@@ -32,5 +32,4 @@ public AbsentConfigurator(URL url) {
     public URL doConfigure(URL currentUrl, URL configUrl) {
         return currentUrl.addParametersIfAbsent(configUrl.getParameters());
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/absent/AbsentConfiguratorFactory.java
Patch:
@@ -30,5 +30,4 @@ public class AbsentConfiguratorFactory implements ConfiguratorFactory {
     public Configurator getConfigurator(URL url) {
         return new AbsentConfigurator(url);
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfigurator.java
Patch:
@@ -36,5 +36,4 @@ public URL doConfigure(URL currentUrl, URL configUrl) {
         logger.info("Start overriding url " + currentUrl + " with override url " + configUrl);
         return currentUrl.addParameters(configUrl.getParameters());
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfiguratorFactory.java
Patch:
@@ -30,5 +30,4 @@ public class OverrideConfiguratorFactory implements ConfiguratorFactory {
     public Configurator getConfigurator(URL url) {
         return new OverrideConfigurator(url);
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/parser/model/ConfiguratorConfig.java
Patch:
@@ -52,8 +52,8 @@ public static ConfiguratorConfig parseFromMap(Map<String, Object> map) {
 
         Object configs = map.get(CONFIGS_KEY);
         if (configs != null && List.class.isAssignableFrom(configs.getClass())) {
-            configuratorConfig.setConfigs(((List<Map<String, Object>>) configs).stream()
-                    .map(ConfigItem::parseFromMap).collect(Collectors.toList()));
+            configuratorConfig.setConfigs(((List<Map<String, Object>>) configs)
+                    .stream().map(ConfigItem::parseFromMap).collect(Collectors.toList()));
         }
 
         return configuratorConfig;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/ProtocolFilterWrapper.java
Patch:
@@ -62,7 +62,8 @@ public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
     }
 
     private <T> FilterChainBuilder getFilterChainBuilder(URL url) {
-        return ScopeModelUtil.getExtensionLoader(FilterChainBuilder.class, url.getScopeModel()).getDefaultExtension();
+        return ScopeModelUtil.getExtensionLoader(FilterChainBuilder.class, url.getScopeModel())
+                .getDefaultExtension();
     }
 
     @Override
@@ -83,5 +84,4 @@ public void destroy() {
     public List<ProtocolServer> getServers() {
         return protocol.getServers();
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/governance/DefaultGovernanceRuleRepositoryImpl.java
Patch:
@@ -56,5 +56,4 @@ public String getRule(String key, String group, long timeout) throws IllegalStat
     private DynamicConfiguration getDynamicConfiguration() {
         return moduleModel.modelEnvironment().getDynamicConfiguration().orElse(null);
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/governance/GovernanceRuleRepository.java
Patch:
@@ -36,7 +36,6 @@ default void addListener(String key, ConfigurationListener listener) {
         addListener(key, DEFAULT_GROUP, listener);
     }
 
-
     /**
      * {@link #removeListener(String, String, ConfigurationListener)}
      *

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/AbstractLoadBalance.java
Patch:
@@ -47,7 +47,7 @@ public abstract class AbstractLoadBalance implements LoadBalance {
      * @return weight which takes warmup into account
      */
     static int calculateWarmupWeight(int uptime, int warmup, int weight) {
-        int ww = (int) ( uptime / ((float) warmup / weight));
+        int ww = (int) (uptime / ((float) warmup / weight));
         return ww < 1 ? 1 : (Math.min(ww, weight));
     }
 
@@ -64,7 +64,6 @@ public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invo
 
     protected abstract <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation);
 
-
     /**
      * Get the weight of the invoker's invocation which takes warmup time into account
      * if the uptime is within the warmup time, the weight will be reduce proportionally
@@ -94,7 +93,7 @@ protected int getWeight(Invoker<?> invoker, Invocation invocation) {
                     }
                     int warmup = invoker.getUrl().getParameter(WARMUP_KEY, DEFAULT_WARMUP);
                     if (uptime > 0 && uptime < warmup) {
-                        weight = calculateWarmupWeight((int)uptime, warmup, weight);
+                        weight = calculateWarmupWeight((int) uptime, warmup, weight);
                     }
                 }
             }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/RandomLoadBalance.java
Patch:
@@ -78,7 +78,8 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
             }
         }
         if (totalWeight > 0 && !sameWeight) {
-            // If (not every invoker has the same weight & at least one invoker's weight>0), select randomly based on totalWeight.
+            // If (not every invoker has the same weight & at least one invoker's weight>0), select randomly based on
+            // totalWeight.
             int offset = ThreadLocalRandom.current().nextInt(totalWeight);
             // Return an invoker based on the random value.
             if (length <= 4) {
@@ -92,7 +93,7 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
                 if (i < 0) {
                     i = -i - 1;
                 } else {
-                    while (weights[i+1] == offset) {
+                    while (weights[i + 1] == offset) {
                         i++;
                     }
                     i++;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/RouterSnapshotFilter.java
Patch:
@@ -34,7 +34,7 @@
 public class RouterSnapshotFilter implements ClusterFilter, BaseFilter.Listener {
 
     private final RouterSnapshotSwitcher switcher;
-    private final static Logger logger = LoggerFactory.getLogger(RouterSnapshotFilter.class);
+    private static final Logger logger = LoggerFactory.getLogger(RouterSnapshotFilter.class);
 
     public RouterSnapshotFilter(FrameworkModel frameworkModel) {
         this.switcher = frameworkModel.getBeanFactory().getBean(RouterSnapshotSwitcher.class);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/RouterSnapshotSwitcher.java
Patch:
@@ -26,7 +26,7 @@ public class RouterSnapshotSwitcher {
     private volatile boolean enable;
     private final Set<String> enabledService = new ConcurrentHashSet<>();
 
-    private final static int MAX_LENGTH = 1 << 5; // 2 ^ 5 = 31
+    private static final int MAX_LENGTH = 1 << 5; // 2 ^ 5 = 31
 
     private final AtomicInteger offset = new AtomicInteger(0);
     private volatile String[] recentSnapshot = new String[MAX_LENGTH];

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/DoubleMatch.java
Patch:
@@ -14,10 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match;
 
-
 public class DoubleMatch {
     private Double exact;
     private DoubleRangeMatch range;
@@ -47,7 +45,6 @@ public void setMod(Double mod) {
         this.mod = mod;
     }
 
-
     public boolean isMatch(Double input) {
         if (exact != null && mod == null) {
             return input.equals(exact);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/DoubleRangeMatch.java
Patch:
@@ -14,10 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match;
 
-
 public class DoubleRangeMatch {
     private Double start;
     private Double end;
@@ -38,7 +36,6 @@ public void setEnd(Double end) {
         this.end = end;
     }
 
-
     public boolean isMatch(Double input) {
         if (start != null && end != null) {
             return input.compareTo(start) >= 0 && input.compareTo(end) < 0;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListBoolMatch.java
Patch:
@@ -14,10 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match;
 
-
 import java.util.List;
 
 public class ListBoolMatch {
@@ -41,4 +39,3 @@ public boolean isMatch(boolean input) {
         return false;
     }
 }
-

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListDoubleMatch.java
Patch:
@@ -14,12 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match;
 
 import java.util.List;
 
-
 public class ListDoubleMatch {
     private List<DoubleMatch> oneof;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListStringMatch.java
Patch:
@@ -14,12 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match;
 
 import java.util.List;
 
-
 public class ListStringMatch {
     private List<StringMatch> oneof;
 
@@ -31,7 +29,6 @@ public void setOneof(List<StringMatch> oneof) {
         this.oneof = oneof;
     }
 
-
     public boolean isMatch(String input) {
 
         for (StringMatch stringMatch : oneof) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/CacheableStateRouterFactory.java
Patch:
@@ -32,7 +32,8 @@ public abstract class CacheableStateRouterFactory implements StateRouterFactory
 
     @Override
     public <T> StateRouter<T> getRouter(Class<T> interfaceClass, URL url) {
-        return ConcurrentHashMapUtils.computeIfAbsent(routerMap, url.getServiceKey(), k -> createRouter(interfaceClass, url));
+        return ConcurrentHashMapUtils.computeIfAbsent(
+                routerMap, url.getServiceKey(), k -> createRouter(interfaceClass, url));
     }
 
     protected abstract <T> StateRouter<T> createRouter(Class<T> interfaceClass, URL url);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AvailableClusterInvoker.java
Patch:
@@ -36,13 +36,13 @@ public AvailableClusterInvoker(Directory<T> directory) {
     }
 
     @Override
-    public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
+    public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance)
+            throws RpcException {
         for (Invoker<T> invoker : invokers) {
             if (invoker.isAvailable()) {
                 return invokeWithContext(invoker, invocation);
             }
         }
         throw new RpcException("No provider available in " + invokers);
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/BroadcastCluster.java
Patch:
@@ -30,5 +30,4 @@ public class BroadcastCluster extends AbstractCluster {
     public <T> AbstractClusterInvoker<T> doJoin(Directory<T> directory) throws RpcException {
         return new BroadcastClusterInvoker<>(directory);
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackCluster.java
Patch:
@@ -26,11 +26,10 @@
  */
 public class FailbackCluster extends AbstractCluster {
 
-    public final static String NAME = "failback";
+    public static final String NAME = "failback";
 
     @Override
     public <T> AbstractClusterInvoker<T> doJoin(Directory<T> directory) throws RpcException {
         return new FailbackClusterInvoker<>(directory);
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailfastCluster.java
Patch:
@@ -26,11 +26,10 @@
  */
 public class FailfastCluster extends AbstractCluster {
 
-    public final static String NAME = "failfast";
+    public static final String NAME = "failfast";
 
     @Override
     public <T> AbstractClusterInvoker<T> doJoin(Directory<T> directory) throws RpcException {
         return new FailfastClusterInvoker<>(directory);
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailoverCluster.java
Patch:
@@ -26,11 +26,10 @@
  */
 public class FailoverCluster extends AbstractCluster {
 
-    public final static String NAME = "failover";
+    public static final String NAME = "failover";
 
     @Override
     public <T> AbstractClusterInvoker<T> doJoin(Directory<T> directory) throws RpcException {
         return new FailoverClusterInvoker<>(directory);
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailsafeCluster.java
Patch:
@@ -26,11 +26,10 @@
  */
 public class FailsafeCluster extends AbstractCluster {
 
-    public final static String NAME = "failsafe";
+    public static final String NAME = "failsafe";
 
     @Override
     public <T> AbstractClusterInvoker<T> doJoin(Directory<T> directory) throws RpcException {
         return new FailsafeClusterInvoker<>(directory);
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ForkingCluster.java
Patch:
@@ -26,11 +26,10 @@
  */
 public class ForkingCluster extends AbstractCluster {
 
-    public final static String NAME = "forking";
+    public static final String NAME = "forking";
 
     @Override
     public <T> AbstractClusterInvoker<T> doJoin(Directory<T> directory) throws RpcException {
         return new ForkingClusterInvoker<>(directory);
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/registry/ZoneAwareCluster.java
Patch:
@@ -23,11 +23,10 @@
 
 public class ZoneAwareCluster extends AbstractCluster {
 
-    public final static String NAME = "zone-aware";
+    public static final String NAME = "zone-aware";
 
     @Override
     protected <T> AbstractClusterInvoker<T> doJoin(Directory<T> directory) throws RpcException {
         return new ZoneAwareClusterInvoker<T>(directory);
     }
-
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/ScopeClusterWrapper.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.rpc.cluster.support.wrapper;
 
 import org.apache.dubbo.common.extension.Wrapper;
@@ -36,8 +35,7 @@ public ScopeClusterWrapper(Cluster cluster) {
 
     @Override
     public <T> Invoker<T> join(Directory<T> directory, boolean buildFilterChain) throws RpcException {
-        return new ScopeClusterInvoker<>(directory,
-            this.cluster.join(directory, buildFilterChain));
+        return new ScopeClusterInvoker<>(directory, this.cluster.join(directory, buildFilterChain));
     }
 
     public Cluster getCluster() {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/filter/DemoService.java
Patch:
@@ -19,7 +19,6 @@
 /**
  * <code>TestService</code>
  */
-
 public interface DemoService {
     String sayHello(String name);
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/filter/DemoServiceImpl.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.apache.dubbo.rpc.cluster.filter;
 
-
-class DemoServiceImpl implements DemoService{
+class DemoServiceImpl implements DemoService {
 
     @Override
     public String sayHello(String name) {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/filter/DemoServiceStub.java
Patch:
@@ -19,11 +19,9 @@
 /**
  * <code>TestService</code>
  */
-
 class DemoServiceStub implements DemoService {
 
-    public DemoServiceStub(DemoService demoService) {
-    }
+    public DemoServiceStub(DemoService demoService) {}
 
     public String sayHello(String name) {
         return name;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/RouterSnapshotFilterTest.java
Patch:
@@ -37,7 +37,8 @@ static void setUp() {
     @Test
     void test() {
         FrameworkModel frameworkModel = new FrameworkModel();
-        RouterSnapshotSwitcher routerSnapshotSwitcher = frameworkModel.getBeanFactory().getBean(RouterSnapshotSwitcher.class);
+        RouterSnapshotSwitcher routerSnapshotSwitcher =
+                frameworkModel.getBeanFactory().getBean(RouterSnapshotSwitcher.class);
         RouterSnapshotFilter routerSnapshotFilter = new RouterSnapshotFilter(frameworkModel);
 
         Invoker invoker = Mockito.mock(Invoker.class);

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/TagProviderURLMergeProcessor.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.rpc.cluster.support;
 
-
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.rpc.cluster.ProviderURLMergeProcessor;
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/wrapper/DemoClusterFilter.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.rpc.cluster.support.wrapper;
 
-
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
@@ -26,7 +25,9 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER;
 
-@Activate(value = "demo",group = {CONSUMER})
+@Activate(
+        value = "demo",
+        group = {CONSUMER})
 public class DemoClusterFilter implements ClusterFilter {
     @Override
     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {

File: dubbo-common/src/main/java/org/apache/dubbo/common/Extension.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common;
 
 import java.lang.annotation.Documented;
@@ -64,5 +63,4 @@
      */
     @Deprecated
     String value() default "";
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/Node.java
Patch:
@@ -39,5 +39,4 @@ public interface Node {
      * destroy.
      */
     void destroy();
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/Parameters.java
Patch:
@@ -47,7 +47,8 @@ public Parameters(String... pairs) {
     }
 
     public Parameters(Map<String, String> parameters) {
-        this.parameters = Collections.unmodifiableMap(parameters != null ? new HashMap<>(parameters) : new HashMap<>(0));
+        this.parameters =
+                Collections.unmodifiableMap(parameters != null ? new HashMap<>(parameters) : new HashMap<>(0));
     }
 
     private static Map<String, String> toMap(String... pairs) {
@@ -276,5 +277,4 @@ public int hashCode() {
     public String toString() {
         return StringUtils.toQueryString(getParameters());
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/ProtocolServiceKey.java
Patch:
@@ -96,7 +96,7 @@ public static boolean isMatch(ProtocolServiceKey rule, ProtocolServiceKey target
                 if (StringUtils.isNotEmpty(rule.getProtocol())) {
                     // 4.3. if rule protocol contains ',', split and match each
                     if (rule.getProtocol().contains(CommonConstants.COMMA_SEPARATOR)) {
-                        String[] protocols = rule.getProtocol().split("\\" +CommonConstants.COMMA_SEPARATOR, -1);
+                        String[] protocols = rule.getProtocol().split("\\" + CommonConstants.COMMA_SEPARATOR, -1);
                         boolean match = false;
                         for (String protocol : protocols) {
                             protocol = protocol.trim();

File: dubbo-common/src/main/java/org/apache/dubbo/common/Resetable.java
Patch:
@@ -27,5 +27,4 @@ public interface Resetable {
      * @param url
      */
     void reset(URL url);
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/aot/NativeDetector.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.common.aot;
 
-
 public abstract class NativeDetector {
 
     /**
@@ -30,5 +29,4 @@ public abstract class NativeDetector {
     public static boolean inNativeImage() {
         return IMAGE_CODE;
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/beans/ScopeBeanExtensionInjector.java
Patch:
@@ -25,7 +25,7 @@
  * Inject scope bean to SPI extension instance
  */
 public class ScopeBeanExtensionInjector implements ExtensionInjector, ScopeModelAware {
-    
+
     private ScopeBeanFactory beanFactory;
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanAccessor.java
Patch:
@@ -38,5 +38,4 @@ public static boolean isAccessByMethod(JavaBeanAccessor accessor) {
     public static boolean isAccessByField(JavaBeanAccessor accessor) {
         return FIELD.equals(accessor) || ALL.equals(accessor);
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanDescriptor.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.beanutil;
 
 import java.io.Serializable;
@@ -35,6 +34,7 @@ public final class JavaBeanDescriptor implements Serializable, Iterable<Map.Entr
      * @see org.apache.dubbo.common.utils.ReflectUtils#isPrimitive(Class)
      */
     public static final int TYPE_PRIMITIVE = 6;
+
     public static final int TYPE_BEAN = 7;
 
     private static final String ENUM_PROPERTY_NAME = "name";

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/NoSuchMethodException.java
Patch:
@@ -19,7 +19,6 @@
 /**
  * NoSuchMethodException.
  */
-
 public class NoSuchMethodException extends RuntimeException {
     private static final long serialVersionUID = -2725364246023268766L;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/NoSuchPropertyException.java
Patch:
@@ -19,7 +19,6 @@
 /**
  * NoSuchPropertyException.
  */
-
 public class NoSuchPropertyException extends RuntimeException {
     private static final long serialVersionUID = -2725364246023268766L;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/compact/Dubbo2CompactUtils.java
Patch:
@@ -84,6 +84,7 @@ private static Class<? extends Annotation> loadAnnotation(String name) {
             return null;
         }
     }
+
     public static boolean isReferenceClassLoaded() {
         return REFERENCE_CLASS != null;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/Compiler.java
Patch:
@@ -50,5 +50,4 @@ default Class<?> compile(String code, ClassLoader classLoader) {
     default Class<?> compile(Class<?> neighbor, String code, ClassLoader classLoader) {
         return compile(code, classLoader);
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/AdaptiveCompiler.java
Patch:
@@ -52,5 +52,4 @@ public Class<?> compile(Class<?> neighbor, String code, ClassLoader classLoader)
         }
         return compiler.compile(neighbor, code, classLoader);
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/concurrent/AbortPolicy.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.concurrent;
 
 import java.util.Queue;
@@ -28,5 +27,4 @@ public class AbortPolicy<E> implements Rejector<E> {
     public void reject(final E e, final Queue<E> queue) {
         throw new RejectException("no more memory can be used !");
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/concurrent/CallableSafeInitializer.java
Patch:
@@ -31,8 +31,7 @@
  */
 public class CallableSafeInitializer<T> {
     /** A guard which ensures that initialize() is called only once. */
-    private final AtomicReference<CallableSafeInitializer<T>> factory =
-            new AtomicReference<>();
+    private final AtomicReference<CallableSafeInitializer<T>> factory = new AtomicReference<>();
 
     /** Holds the reference to the managed object. */
     private final AtomicReference<T> reference = new AtomicReference<>();
@@ -50,7 +49,7 @@ public CallableSafeInitializer(Callable<T> callable) {
      * @return lazily initialized object
      * exception
      */
-    //@Override
+    // @Override
     public final T get() {
         T result;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/concurrent/RejectException.java
Patch:
@@ -29,8 +29,7 @@ public class RejectException extends RuntimeException {
      * Constructs a {@code RejectException} with no detail message. The cause is not initialized, and may subsequently be initialized by a
      * call to {@link #initCause(Throwable) initCause}.
      */
-    public RejectException() {
-    }
+    public RejectException() {}
 
     /**
      * Constructs a {@code RejectException} with the specified detail message. The cause is not initialized, and may subsequently be

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/InmemoryConfiguration.java
Patch:
@@ -29,8 +29,7 @@ public class InmemoryConfiguration implements Configuration {
     // stores the configuration key-value pairs
     private Map<String, String> store = new LinkedHashMap<>();
 
-    public InmemoryConfiguration() {
-    }
+    public InmemoryConfiguration() {}
 
     public InmemoryConfiguration(String name) {
         this.name = name;
@@ -73,5 +72,4 @@ public void setProperties(Map<String, String> properties) {
     public Map<String, String> getProperties() {
         return store;
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/OrderedPropertiesProvider.java
Patch:
@@ -16,16 +16,15 @@
  */
 package org.apache.dubbo.common.config;
 
-
 import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.util.Properties;
 
 /**
- * 
+ *
  * The smaller value, the higher priority
- * 
+ *
  */
 @SPI(scope = ExtensionScope.MODULE)
 public interface OrderedPropertiesProvider {

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/PrefixedConfiguration.java
Patch:
@@ -41,5 +41,4 @@ public Object getInternalProperty(String key) {
         }
         return null;
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/SystemConfiguration.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.common.config;
 
-
 import java.util.Map;
 
 /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/DynamicConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.Configuration;
 
-
 /**
  * Dynamic Configuration
  * <br/>
@@ -48,7 +47,6 @@ default void addListener(String key, ConfigurationListener listener) {
         addListener(key, getDefaultGroup(), listener);
     }
 
-
     /**
      * {@link #removeListener(String, String, ConfigurationListener)}
      *
@@ -170,7 +168,8 @@ default boolean publishConfig(String key, String group, String content) throws U
      * @return
      * @throws UnsupportedOperationException
      */
-    default boolean publishConfigCas(String key, String group, String content, Object ticket) throws UnsupportedOperationException {
+    default boolean publishConfigCas(String key, String group, String content, Object ticket)
+            throws UnsupportedOperationException {
         return false;
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/DynamicConfigurationFactory.java
Patch:
@@ -27,5 +27,4 @@
 public interface DynamicConfigurationFactory {
 
     DynamicConfiguration getDynamicConfiguration(URL url);
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/ClusterRules.java
Patch:
@@ -52,12 +52,9 @@ public interface ClusterRules {
      **/
     String BROADCAST = "broadcast";
 
-
     String AVAILABLE = "available";
 
     String MERGEABLE = "mergeable";
 
     String EMPTY = "";
-
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/FilterConstants.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.constants;
 
 public interface FilterConstants {

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/LoadbalanceRules.java
Patch:
@@ -52,5 +52,4 @@ public interface LoadbalanceRules {
     String ADAPTIVE = "adaptive";
 
     String EMPTY = "";
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/LoggerCodeConstants.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.constants;
 
 /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/QosConstants.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.constants;
 
 /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/RegistryConstants.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.constants;
 
 public interface RegistryConstants {
@@ -143,5 +142,4 @@ public interface RegistryConstants {
     boolean DEFAULT_ENABLE_EMPTY_PROTECTION = false;
     String REGISTER_CONSUMER_URL_KEY = "register-consumer-url";
     String REGISTRY_PROTOCOL_TYPE = "registry-protocol-type";
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/RemotingConstants.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.constants;
 
 /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/context/ApplicationExt.java
Patch:
@@ -20,6 +20,4 @@
 import org.apache.dubbo.common.extension.SPI;
 
 @SPI(scope = ExtensionScope.APPLICATION)
-public interface ApplicationExt extends Lifecycle {
-
-}
+public interface ApplicationExt extends Lifecycle {}

File: dubbo-common/src/main/java/org/apache/dubbo/common/context/ModuleExt.java
Patch:
@@ -20,6 +20,4 @@
 import org.apache.dubbo.common.extension.SPI;
 
 @SPI(scope = ExtensionScope.MODULE)
-public interface ModuleExt extends Lifecycle {
-
-}
+public interface ModuleExt extends Lifecycle {}

File: dubbo-common/src/main/java/org/apache/dubbo/common/convert/StringConverter.java
Patch:
@@ -23,5 +23,4 @@
  * @since 2.7.6
  */
 @FunctionalInterface
-public interface StringConverter<T> extends Converter<String, T> {
-}
+public interface StringConverter<T> extends Converter<String, T> {}

File: dubbo-common/src/main/java/org/apache/dubbo/common/convert/StringToCharArrayConverter.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.common.convert;
 
-
 import static org.apache.dubbo.common.utils.StringUtils.isNotEmpty;
 
 /**
@@ -31,7 +30,6 @@ public char[] convert(String source) {
         return isNotEmpty(source) ? source.toCharArray() : null;
     }
 
-
     @Override
     public int getPriority() {
         return NORMAL_PRIORITY + 7;

File: dubbo-common/src/main/java/org/apache/dubbo/common/convert/StringToDoubleConverter.java
Patch:
@@ -31,7 +31,6 @@ public Double convert(String source) {
         return isNotEmpty(source) ? valueOf(source) : null;
     }
 
-
     @Override
     public int getPriority() {
         return NORMAL_PRIORITY + 3;

File: dubbo-common/src/main/java/org/apache/dubbo/common/convert/StringToLongConverter.java
Patch:
@@ -31,7 +31,6 @@ public Long convert(String source) {
         return isNotEmpty(source) ? valueOf(source) : null;
     }
 
-
     @Override
     public int getPriority() {
         return NORMAL_PRIORITY + 1;

File: dubbo-common/src/main/java/org/apache/dubbo/common/convert/StringToOptionalConverter.java
Patch:
@@ -32,7 +32,6 @@ public Optional convert(String source) {
         return ofNullable(source);
     }
 
-
     @Override
     public int getPriority() {
         return MIN_PRIORITY;

File: dubbo-common/src/main/java/org/apache/dubbo/common/convert/StringToShortConverter.java
Patch:
@@ -31,7 +31,6 @@ public Short convert(String source) {
         return isNotEmpty(source) ? valueOf(source) : null;
     }
 
-
     @Override
     public int getPriority() {
         return NORMAL_PRIORITY + 2;

File: dubbo-common/src/main/java/org/apache/dubbo/common/convert/multiple/StringToArrayConverter.java
Patch:
@@ -59,7 +59,6 @@ public Object convert(String[] segments, int size, Class<?> targetType, Class<?>
         return array;
     }
 
-
     @Override
     public int getPriority() {
         return MIN_PRIORITY;

File: dubbo-common/src/main/java/org/apache/dubbo/common/convert/multiple/StringToMultiValueConverter.java
Patch:
@@ -40,7 +40,7 @@ default Object convert(String source, Class<?> multiValueType, Class<?> elementT
         String[] segments = split(source, ',');
 
         if (ArrayUtils.isEmpty(segments)) { // If empty array, create an array with only one element
-            segments = new String[]{source};
+            segments = new String[] {source};
         }
 
         int size = segments.length;

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/ApplicationDeployListener.java
Patch:
@@ -26,7 +26,5 @@
 @SPI(scope = ExtensionScope.APPLICATION)
 public interface ApplicationDeployListener extends DeployListener<ApplicationModel> {
 
-    default void onModuleStarted(ApplicationModel applicationModel) {
-
-    }
+    default void onModuleStarted(ApplicationModel applicationModel) {}
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/DeployListener.java
Patch:
@@ -33,5 +33,4 @@ public interface DeployListener<E extends ScopeModel> {
     void onStopped(E scopeModel);
 
     void onFailure(E scopeModel, Throwable cause);
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/ModuleDeployListener.java
Patch:
@@ -24,6 +24,4 @@
  * Module deploy listener
  */
 @SPI(scope = ExtensionScope.MODULE)
-public interface ModuleDeployListener extends DeployListener<ModuleModel> {
-
-}
+public interface ModuleDeployListener extends DeployListener<ModuleModel> {}

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/Activate.java
Patch:
@@ -96,5 +96,5 @@
      * Activate loadClass when the current extension when the specified className all match
      * @return className names to all match
      */
-    String [] onClass() default {};
+    String[] onClass() default {};
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/Adaptive.java
Patch:
@@ -56,5 +56,4 @@
      * @return parameter names in URL
      */
     String[] value() default {};
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/DisableInject.java
Patch:
@@ -25,5 +25,4 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
-public @interface DisableInject {
-}
+public @interface DisableInject {}

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionAccessor.java
Patch:
@@ -41,5 +41,4 @@ default <T> T getDefaultExtension(Class<T> type) {
         ExtensionLoader<T> extensionLoader = getExtensionLoader(type);
         return extensionLoader != null ? extensionLoader.getDefaultExtension() : null;
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionAccessorAware.java
Patch:
@@ -22,5 +22,4 @@
 public interface ExtensionAccessorAware {
 
     void setExtensionAccessor(final ExtensionAccessor extensionAccessor);
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionInjector.java
Patch:
@@ -32,6 +32,5 @@ public interface ExtensionInjector extends ExtensionAccessorAware {
     <T> T getInstance(final Class<T> type, final String name);
 
     @Override
-    default void setExtensionAccessor(final ExtensionAccessor extensionAccessor) {
-    }
+    default void setExtensionAccessor(final ExtensionAccessor extensionAccessor) {}
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionPostProcessor.java
Patch:
@@ -28,5 +28,4 @@ default Object postProcessBeforeInitialization(Object instance, String name) thr
     default Object postProcessAfterInitialization(Object instance, String name) throws Exception {
         return instance;
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/LoadingStrategy.java
Patch:
@@ -64,7 +64,7 @@ default String[] includedPackagesInCompatibleType() {
      * @since 3.0.4
      */
     default String[] onlyExtensionClassLoaderPackages() {
-        return new String[]{};
+        return new String[] {};
     }
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/SPI.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.extension;
 
 import java.lang.annotation.Documented;

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/inject/SpiExtensionInjector.java
Patch:
@@ -25,7 +25,7 @@
  * SpiExtensionInjector
  */
 public class SpiExtensionInjector implements ExtensionInjector {
-    
+
     private ExtensionAccessor extensionAccessor;
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/common/function/Predicates.java
Patch:
@@ -70,5 +70,4 @@ static <T> Predicate<T> and(Predicate<T>... predicates) {
     static <T> Predicate<T> or(Predicate<T>... predicates) {
         return of(predicates).reduce(Predicate::or).orElse(e -> true);
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/function/Streams.java
Patch:
@@ -68,5 +68,3 @@ static <T> T filterFirst(Iterable<T> values, Predicate<T>... predicates) {
                 .orElse(null);
     }
 }
-
-

File: dubbo-common/src/main/java/org/apache/dubbo/common/infra/InfraAdapter.java
Patch:
@@ -26,7 +26,6 @@
  * 1. get extra attributes from underlying infrastructures related to the instance on which Dubbo is currently deploying.
  * 2. get configurations from third-party systems which maybe useful for a specific component.
  */
-
 @SPI(scope = ExtensionScope.APPLICATION)
 public interface InfraAdapter {
 
@@ -43,5 +42,4 @@ public interface InfraAdapter {
      * @return
      */
     String getAttribute(String key);
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java
Patch:
@@ -23,8 +23,7 @@
  * Stream utils.
  */
 public class StreamUtils {
-    private StreamUtils() {
-    }
+    private StreamUtils() {}
 
     public static InputStream limitedInputStream(final InputStream is, final int limit) throws IOException {
         return new InputStream() {

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java
Patch:
@@ -101,8 +101,7 @@ public void reset() {
     }
 
     @Override
-    public void close() throws IOException {
-    }
+    public void close() throws IOException {}
 
     public int position() {
         return mPosition;

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStream.java
Patch:
@@ -96,6 +96,5 @@ public String toString(String charset) throws UnsupportedEncodingException {
     }
 
     @Override
-    public void close() throws IOException {
-    }
+    public void close() throws IOException {}
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java
Patch:
@@ -46,8 +46,7 @@ public int read() throws IOException {
     @Override
     public int read(char[] cs, int off, int len) throws IOException {
         ensureOpen();
-        if ((off < 0) || (off > cs.length) || (len < 0) ||
-                ((off + len) > cs.length) || ((off + len) < 0)) {
+        if ((off < 0) || (off > cs.length) || (len < 0) || ((off + len) > cs.length) || ((off + len) < 0)) {
             throw new IndexOutOfBoundsException();
         }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/FastJson2Impl.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.dubbo.common.json.impl;
 
-import com.alibaba.fastjson2.JSONWriter;
-
 import java.lang.reflect.Type;
 import java.util.List;
 
+import com.alibaba.fastjson2.JSONWriter;
+
 public class FastJson2Impl extends AbstractJsonUtilImpl {
     @Override
     public <T> T toJavaObject(String json, Type type) {
@@ -37,4 +37,3 @@ public String toJson(Object obj) {
         return com.alibaba.fastjson2.JSON.toJSONString(obj, JSONWriter.Feature.WriteEnumsUsingName);
     }
 }
-

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/FastJsonImpl.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.dubbo.common.json.impl;
 
-import com.alibaba.fastjson.serializer.SerializerFeature;
-
 import java.lang.reflect.Type;
 import java.util.List;
 
+import com.alibaba.fastjson.serializer.SerializerFeature;
+
 public class FastJsonImpl extends AbstractJsonUtilImpl {
 
     @Override
@@ -37,5 +37,4 @@ public <T> List<T> toJavaList(String json, Class<T> clazz) {
     public String toJson(Object obj) {
         return com.alibaba.fastjson.JSON.toJSONString(obj, SerializerFeature.DisableCircularReferenceDetect);
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/lang/Prioritized.java
Patch:
@@ -34,13 +34,13 @@ public interface Prioritized extends Comparable<Prioritized> {
     Comparator<Object> COMPARATOR = (one, two) -> {
         boolean b1 = one instanceof Prioritized;
         boolean b2 = two instanceof Prioritized;
-        if (b1 && !b2) {        // one is Prioritized, two is not
+        if (b1 && !b2) { // one is Prioritized, two is not
             return -1;
         } else if (b2 && !b1) { // two is Prioritized, one is not
             return 1;
-        } else if (b1 && b2) {  //  one and two both are Prioritized
+        } else if (b1 && b2) { //  one and two both are Prioritized
             return ((Prioritized) one).compareTo((Prioritized) two);
-        } else {                // no different
+        } else { // no different
             return 0;
         }
     };

File: dubbo-common/src/main/java/org/apache/dubbo/common/lang/ShutdownHookCallbacks.java
Patch:
@@ -66,8 +66,7 @@ public void destroy() {
     }
 
     private void loadCallbacks() {
-        ExtensionLoader<ShutdownHookCallback> loader =
-            applicationModel.getExtensionLoader(ShutdownHookCallback.class);
+        ExtensionLoader<ShutdownHookCallback> loader = applicationModel.getExtensionLoader(ShutdownHookCallback.class);
         loader.getSupportedExtensionInstances().forEach(this::addCallback);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/ErrorTypeAwareLogger.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.logger;
 
 import org.apache.dubbo.common.constants.LoggerCodeConstants;

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/Level.java
Patch:
@@ -55,5 +55,4 @@ public enum Level {
      * OFF
      */
     OFF
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/ListenableLogger.java
Patch:
@@ -14,19 +14,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.logger;
 
 /**
  *  Loggers that can register to listen to log messages.
  */
-public interface ListenableLogger extends ErrorTypeAwareLogger{
+public interface ListenableLogger extends ErrorTypeAwareLogger {
 
     /**
      * Register a listener to this logger，and get notified when a log happens.
      *
      * @param listener log listener
      */
     void registerListen(LogListener listener);
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/LogListener.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.logger;
 
 /**
@@ -23,5 +22,4 @@
 public interface LogListener {
 
     void onMessage(String code, String msg);
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/Logger.java
Patch:
@@ -207,5 +207,4 @@ public interface Logger {
      * @return true if error is enabled
      */
     boolean isErrorEnabled();
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/jcl/JclLogger.java
Patch:
@@ -163,5 +163,4 @@ public boolean isWarnEnabled() {
     public boolean isErrorEnabled() {
         return logger.isErrorEnabled();
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/jcl/JclLoggerAdapter.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerAdapter;
 
-import org.apache.commons.logging.LogFactory;
-
 import java.io.File;
 
+import org.apache.commons.logging.LogFactory;
+
 public class JclLoggerAdapter implements LoggerAdapter {
     public static final String NAME = "jcl";
     private Level level;
@@ -58,5 +58,4 @@ public File getFile() {
     public void setFile(File file) {
         this.file = file;
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLogger.java
Patch:
@@ -17,11 +17,12 @@
 package org.apache.dubbo.common.logger.jdk;
 
 import org.apache.dubbo.common.logger.Logger;
-import org.slf4j.helpers.FormattingTuple;
-import org.slf4j.helpers.MessageFormatter;
 
 import java.util.logging.Level;
 
+import org.slf4j.helpers.FormattingTuple;
+import org.slf4j.helpers.MessageFormatter;
+
 public class JdkLogger implements Logger {
 
     private final java.util.logging.Logger logger;
@@ -159,5 +160,4 @@ public boolean isWarnEnabled() {
     public boolean isErrorEnabled() {
         return logger.isLoggable(Level.SEVERE);
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j/Log4jLoggerAdapter.java
Patch:
@@ -20,13 +20,13 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerAdapter;
 
+import java.io.File;
+import java.util.Enumeration;
+
 import org.apache.log4j.Appender;
 import org.apache.log4j.FileAppender;
 import org.apache.log4j.LogManager;
 
-import java.io.File;
-import java.util.Enumeration;
-
 public class Log4jLoggerAdapter implements LoggerAdapter {
 
     public static final String NAME = "log4j";

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j2/Log4j2LoggerAdapter.java
Patch:
@@ -20,11 +20,11 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerAdapter;
 
+import java.io.File;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.config.Configurator;
 
-import java.io.File;
-
 public class Log4j2LoggerAdapter implements LoggerAdapter {
     public static final String NAME = "log4j2";
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/support/FailsafeLogger.java
Patch:
@@ -47,7 +47,8 @@ public void setLogger(Logger logger) {
     }
 
     private String appendContextMessage(String msg) {
-        return " [DUBBO] " + msg + ", dubbo version: " + Version.getVersion() + ", current host: " + NetUtils.getLocalHost();
+        return " [DUBBO] " + msg + ", dubbo version: " + Version.getVersion() + ", current host: "
+                + NetUtils.getLocalHost();
     }
 
     @Override
@@ -329,5 +330,4 @@ public boolean isErrorEnabled() {
             return false;
         }
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/profiler/ProfilerSwitch.java
Patch:
@@ -23,11 +23,11 @@
  * TODO
  */
 public class ProfilerSwitch {
-    private final static AtomicBoolean enableDetailProfiler = new AtomicBoolean(false);
+    private static final AtomicBoolean enableDetailProfiler = new AtomicBoolean(false);
 
-    private final static AtomicBoolean enableSimpleProfiler = new AtomicBoolean(true);
+    private static final AtomicBoolean enableSimpleProfiler = new AtomicBoolean(true);
 
-    private final static AtomicReference<Double> warnPercent = new AtomicReference<>(0.75);
+    private static final AtomicReference<Double> warnPercent = new AtomicReference<>(0.75);
 
     public static void enableSimpleProfiler() {
         enableSimpleProfiler.set(true);

File: dubbo-common/src/main/java/org/apache/dubbo/common/resource/Disposable.java
Patch:
@@ -22,5 +22,4 @@
 public interface Disposable {
 
     void destroy();
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/resource/GlobalResourceInitializer.java
Patch:
@@ -58,5 +58,4 @@ protected T initialize() {
         }
         return value;
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/ssl/CertManager.java
Patch:
@@ -26,7 +26,8 @@ public class CertManager {
     private final List<CertProvider> certProviders;
 
     public CertManager(FrameworkModel frameworkModel) {
-        this.certProviders = frameworkModel.getExtensionLoader(CertProvider.class).getActivateExtensions();
+        this.certProviders =
+                frameworkModel.getExtensionLoader(CertProvider.class).getActivateExtensions();
     }
 
     public ProviderCert getProviderConnectionConfig(URL localAddress, SocketAddress remoteAddress) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/ssl/ProviderCert.java
Patch:
@@ -24,7 +24,8 @@ public ProviderCert(byte[] keyCertChain, byte[] privateKey, byte[] trustCert, Au
         this.authPolicy = authPolicy;
     }
 
-    public ProviderCert(byte[] keyCertChain, byte[] privateKey, byte[] trustCert, String password, AuthPolicy authPolicy) {
+    public ProviderCert(
+            byte[] keyCertChain, byte[] privateKey, byte[] trustCert, String password, AuthPolicy authPolicy) {
         super(keyCertChain, privateKey, trustCert, password);
         this.authPolicy = authPolicy;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/status/Status.java
Patch:
@@ -75,5 +75,4 @@ public enum Level {
          */
         UNKNOWN
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/status/StatusChecker.java
Patch:
@@ -31,5 +31,4 @@ public interface StatusChecker {
      * @return status
      */
     Status check();
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/status/reporter/FrameworkStatusReporter.java
Patch:
@@ -20,10 +20,8 @@
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.rpc.model.ScopeModelAware;
 
-
 @SPI(scope = ExtensionScope.APPLICATION)
 public interface FrameworkStatusReporter extends ScopeModelAware {
 
     void report(String type, Object obj);
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/status/support/LoadStatusChecker.java
Patch:
@@ -48,4 +48,3 @@ public Status check() {
         return new Status(level, message);
     }
 }
-

File: dubbo-common/src/main/java/org/apache/dubbo/common/status/support/StatusUtils.java
Patch:
@@ -51,5 +51,4 @@ public static Status getSummaryStatus(Map<String, Status> statuses) {
         }
         return new Status(level, msg.toString());
     }
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/store/DataStore.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.store;
 
 import org.apache.dubbo.common.extension.ExtensionScope;
@@ -35,5 +34,4 @@ public interface DataStore {
     void put(String componentName, String key, Object value);
 
     void remove(String componentName, String key);
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/stream/StreamObserver.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.stream;
 
 /**
@@ -25,7 +24,6 @@
  */
 public interface StreamObserver<T> {
 
-
     /**
      * onNext
      *

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadlocal/InternalThread.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.threadlocal;
 
 /**
@@ -24,8 +23,7 @@ public class InternalThread extends Thread {
 
     private InternalThreadLocalMap threadLocalMap;
 
-    public InternalThread() {
-    }
+    public InternalThread() {}
 
     public InternalThread(Runnable target) {
         super(target);

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadlocal/NamedInternalThreadFactory.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.threadlocal;
 
 import org.apache.dubbo.common.utils.NamedThreadFactory;

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/MemoryLimitedLinkedBlockingQueue.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.threadpool;
 
 import java.lang.instrument.Instrumentation;

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/MemoryLimiter.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.threadpool;
 
 import java.lang.instrument.Instrumentation;

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/ThreadPool.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * ThreadPool
  */
-//TODO which scope for ThreadPool? APPLICATION or FRAMEWORK
+// TODO which scope for ThreadPool? APPLICATION or FRAMEWORK
 @SPI(value = "fixed", scope = ExtensionScope.FRAMEWORK)
 public interface ThreadPool {
 
@@ -40,5 +40,4 @@ public interface ThreadPool {
      */
     @Adaptive({THREADPOOL_KEY})
     Executor getExecutor(URL url);
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/ThreadlessExecutor.java
Patch:
@@ -105,7 +105,6 @@ public void execute(Runnable runnable) {
     /**
      * The following methods are still not supported
      */
-
     @Override
     public void shutdown() {
         shutdownNow();

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/eager/TaskQueue.java
Patch:
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.dubbo.common.threadpool.support.eager;
 
 import java.util.concurrent.LinkedBlockingQueue;

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -649,6 +649,9 @@ public interface CommonConstants {
 
     String DUBBO_MANUAL_REGISTER_KEY = "dubbo.application.manual-register";
 
+    String DUBBO2_COMPACT_ENABLE = "dubbo.compact.enable";
+
+
     String POD_NAMESPACE = "POD_NAMESPACE";
 
     String CLUSTER_DOMAIN = "CLUSTER_DOMAIN";

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/JacksonImpl.java
Patch:
@@ -18,6 +18,7 @@
 
 
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
+import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.json.JsonMapper;
@@ -64,6 +65,7 @@ private JsonMapper getJackson() {
                 if (jacksonCache == null || !(jacksonCache instanceof JsonMapper)) {
                     jacksonCache = JsonMapper.builder()
                         .configure(MapperFeature.PROPAGATE_TRANSIENT_MARKER, true)
+                        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
                         .serializationInclusion(Include.NON_NULL)
                         .addModule(new JavaTimeModule())
                         .build();

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.compact.Dubbo2CompactUtils;
 import org.apache.dubbo.common.utils.ClassUtils;
 import org.apache.dubbo.common.utils.RegexProperties;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -227,7 +228,8 @@ public static Class<?> determineInterfaceClass(String generic, String interfaceN
 
     public static Class<?> determineInterfaceClass(String generic, String interfaceName, ClassLoader classLoader) {
         if (ProtocolUtils.isGeneric(generic)) {
-            return com.alibaba.dubbo.rpc.service.GenericService.class;
+            return Dubbo2CompactUtils.isEnabled() && Dubbo2CompactUtils.isGenericServiceClassLoaded() ?
+                Dubbo2CompactUtils.getGenericServiceClass() : GenericService.class;
         }
         try {
             if (StringUtils.isNotEmpty(interfaceName)) {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/DubboAnnotationUtils.java
Patch:
@@ -79,8 +79,8 @@ public static String resolveInterfaceName(Map<String, Object> attributes, Class<
         // 1. get from DubboService.interfaceName()
         String interfaceClassName = AnnotationUtils.getAttribute(attributes, "interfaceName");
         if (StringUtils.hasText(interfaceClassName)) {
-            if (GenericService.class.getName().equals(interfaceClassName) ||
-                com.alibaba.dubbo.rpc.service.GenericService.class.getName().equals(interfaceClassName)) {
+            if ("org.apache.dubbo.rpc.service.GenericService".equals(interfaceClassName) ||
+                "com.alibaba.dubbo.rpc.service.GenericService".equals(interfaceClassName)) {
                 throw new IllegalStateException("@Service interfaceName() cannot be GenericService: " + interfaceClassName);
             }
             return interfaceClassName;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/HelloServiceImpl.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.dubbo.config.spring.context.annotation.provider;
 
+import org.apache.dubbo.config.annotation.Service;
 import org.apache.dubbo.config.spring.api.HelloService;
 
-import com.alibaba.dubbo.config.annotation.Service;
 
 /**
  * {@link HelloService} Implementation just annotating Dubbo's {@link Service}

File: dubbo-metadata/dubbo-metadata-processor/src/test/java/org/apache/dubbo/metadata/annotation/processing/util/ServiceAnnotationUtilsTest.java
Patch:
@@ -91,8 +91,8 @@ void testGetAnnotation() {
         TypeElement type = getType(TestServiceImpl.class);
         assertEquals("org.apache.dubbo.config.annotation.Service", getAnnotation(type).getAnnotationType().toString());
 
-        type = getType(GenericTestService.class);
-        assertEquals("com.alibaba.dubbo.config.annotation.Service", getAnnotation(type).getAnnotationType().toString());
+//        type = getType(GenericTestService.class);
+//        assertEquals("com.alibaba.dubbo.config.annotation.Service", getAnnotation(type).getAnnotationType().toString());
 
         type = getType(DefaultTestService.class);
         assertEquals("org.apache.dubbo.config.annotation.Service", getAnnotation(type).getAnnotationType().toString());

File: dubbo-metadata/dubbo-metadata-processor/src/test/java/org/apache/dubbo/metadata/tools/GenericTestService.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.metadata.tools;
 
 
-import com.alibaba.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.Service;
 
 import java.util.EventListener;
 

File: dubbo-metadata/dubbo-metadata-rest/src/main/java/org/apache/dubbo/metadata/rest/ParamType.java
Patch:
@@ -37,12 +37,12 @@ public enum ParamType {
     PATH(addSupportTypes(JAXRSClassConstants.PATH_PARAM_ANNOTATION_CLASS,
         SpringMvcClassConstants.PATH_VARIABLE_ANNOTATION_CLASS)),
 
-    FORM(addSupportTypes(JAXRSClassConstants.FORM_PARAM_ANNOTATION_CLASS,
+    FORM(addSupportTypes(JAXRSClassConstants.FORM_PARAM_ANNOTATION_CLASS, JAXRSClassConstants.FORM_BODY_ANNOTATION_CLASS,
         SpringMvcClassConstants.REQUEST_BODY_ANNOTATION_CLASS)),
 
     PROVIDER_BODY(addSupportTypes(
         JAXRSClassConstants.REST_EASY_BODY_ANNOTATION_CLASS, JAXRSClassConstants.FORM_PARAM_ANNOTATION_CLASS,
-        SpringMvcClassConstants.REQUEST_BODY_ANNOTATION_CLASS, BodyTag.class)),
+        SpringMvcClassConstants.REQUEST_BODY_ANNOTATION_CLASS, BodyTag.class, JAXRSClassConstants.FORM_BODY_ANNOTATION_CLASS)),
 
     PROVIDER_NO_ANNOTATION(addSupportTypes(NoAnnotationTag.class)),
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/protocol/QosProtocolWrapper.java
Patch:
@@ -153,7 +153,9 @@ private void startQosServer(URL url, boolean isServer) throws RpcException {
     /*package*/ void stopServer() {
         if (hasStarted.compareAndSet(true, false)) {
             Server server = frameworkModel.getBeanFactory().getBean(Server.class);
-            server.stop();
+            if (server.isStarted()) {
+                server.stop();
+            }
         }
     }
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/model/MigrationRule.java
Patch:
@@ -166,9 +166,8 @@ public MigrationStep getStep(URL consumerURL) {
          */
         if (step == null) {
             // initial step : APPLICATION_FIRST
-            step = MigrationStep.APPLICATION_FIRST;
-            step = Enum.valueOf(MigrationStep.class,
-                consumerURL.getParameter(MIGRATION_STEP_KEY, getDefaultStep(consumerURL, step.name())));
+            return Enum.valueOf(MigrationStep.class,
+                consumerURL.getParameter(MIGRATION_STEP_KEY, getDefaultStep(consumerURL, MigrationStep.APPLICATION_FIRST.name())));
         }
 
         return step;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ReflectionPackableMethod.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
-import com.google.protobuf.Message;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.serialize.MultipleSerialization;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -258,7 +258,7 @@ public void doUnsubscribe(URL url, NotifyListener listener) {
                 appSubscriptionLock.lock();
                 ServiceInstancesChangedListener instancesChangedListener = serviceListeners.get(serviceNamesKey);
                 if (instancesChangedListener != null) {
-                    instancesChangedListener.removeListener(protocolServiceKey, listener);
+                    instancesChangedListener.removeListener(url.getServiceKey(), listener);
                     if (!instancesChangedListener.hasListeners()) {
                         instancesChangedListener.destroy();
                         serviceListeners.remove(serviceNamesKey);

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/JacksonImpl.java
Patch:
@@ -18,6 +18,7 @@
 
 
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
+import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.json.JsonMapper;
@@ -64,6 +65,7 @@ private JsonMapper getJackson() {
                 if (jacksonCache == null || !(jacksonCache instanceof JsonMapper)) {
                     jacksonCache = JsonMapper.builder()
                         .configure(MapperFeature.PROPAGATE_TRANSIENT_MARKER, true)
+                        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
                         .serializationInclusion(Include.NON_NULL)
                         .addModule(new JavaTimeModule())
                         .build();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/model/MigrationRule.java
Patch:
@@ -166,9 +166,8 @@ public MigrationStep getStep(URL consumerURL) {
          */
         if (step == null) {
             // initial step : APPLICATION_FIRST
-            step = MigrationStep.APPLICATION_FIRST;
-            step = Enum.valueOf(MigrationStep.class,
-                consumerURL.getParameter(MIGRATION_STEP_KEY, getDefaultStep(consumerURL, step.name())));
+            return Enum.valueOf(MigrationStep.class,
+                consumerURL.getParameter(MIGRATION_STEP_KEY, getDefaultStep(consumerURL, MigrationStep.APPLICATION_FIRST.name())));
         }
 
         return step;

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.compact.Dubbo2CompactUtils;
 import org.apache.dubbo.common.utils.ClassUtils;
 import org.apache.dubbo.common.utils.RegexProperties;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -227,7 +228,8 @@ public static Class<?> determineInterfaceClass(String generic, String interfaceN
 
     public static Class<?> determineInterfaceClass(String generic, String interfaceName, ClassLoader classLoader) {
         if (ProtocolUtils.isGeneric(generic)) {
-            return com.alibaba.dubbo.rpc.service.GenericService.class;
+            return Dubbo2CompactUtils.isEnabled() && Dubbo2CompactUtils.isGenericServiceClassLoaded() ?
+                Dubbo2CompactUtils.getGenericServiceClass() : GenericService.class;
         }
         try {
             if (StringUtils.isNotEmpty(interfaceName)) {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/DubboAnnotationUtils.java
Patch:
@@ -79,8 +79,8 @@ public static String resolveInterfaceName(Map<String, Object> attributes, Class<
         // 1. get from DubboService.interfaceName()
         String interfaceClassName = AnnotationUtils.getAttribute(attributes, "interfaceName");
         if (StringUtils.hasText(interfaceClassName)) {
-            if (GenericService.class.getName().equals(interfaceClassName) ||
-                com.alibaba.dubbo.rpc.service.GenericService.class.getName().equals(interfaceClassName)) {
+            if ("org.apache.dubbo.rpc.service.GenericService".equals(interfaceClassName) ||
+                "com.alibaba.dubbo.rpc.service.GenericService".equals(interfaceClassName)) {
                 throw new IllegalStateException("@Service interfaceName() cannot be GenericService: " + interfaceClassName);
             }
             return interfaceClassName;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/HelloServiceImpl.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.dubbo.config.spring.context.annotation.provider;
 
+import org.apache.dubbo.config.annotation.Service;
 import org.apache.dubbo.config.spring.api.HelloService;
 
-import com.alibaba.dubbo.config.annotation.Service;
 
 /**
  * {@link HelloService} Implementation just annotating Dubbo's {@link Service}

File: dubbo-metadata/dubbo-metadata-processor/src/test/java/org/apache/dubbo/metadata/annotation/processing/util/ServiceAnnotationUtilsTest.java
Patch:
@@ -91,8 +91,8 @@ void testGetAnnotation() {
         TypeElement type = getType(TestServiceImpl.class);
         assertEquals("org.apache.dubbo.config.annotation.Service", getAnnotation(type).getAnnotationType().toString());
 
-        type = getType(GenericTestService.class);
-        assertEquals("com.alibaba.dubbo.config.annotation.Service", getAnnotation(type).getAnnotationType().toString());
+//        type = getType(GenericTestService.class);
+//        assertEquals("com.alibaba.dubbo.config.annotation.Service", getAnnotation(type).getAnnotationType().toString());
 
         type = getType(DefaultTestService.class);
         assertEquals("org.apache.dubbo.config.annotation.Service", getAnnotation(type).getAnnotationType().toString());

File: dubbo-metadata/dubbo-metadata-processor/src/test/java/org/apache/dubbo/metadata/tools/GenericTestService.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.metadata.tools;
 
 
-import com.alibaba.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.Service;
 
 import java.util.EventListener;
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/aot/TripleReflectionTypeDescriberRegistrar.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.aot.api.MemberCategory;
 import org.apache.dubbo.aot.api.ReflectionTypeDescriberRegistrar;
 import org.apache.dubbo.aot.api.TypeDescriber;
-import org.apache.dubbo.rpc.protocol.tri.transport.TripleClientHandler;
+import org.apache.dubbo.rpc.protocol.tri.transport.TripleGoAwayHandler;
 import org.apache.dubbo.rpc.protocol.tri.transport.TripleCommandOutBoundHandler;
 import org.apache.dubbo.rpc.protocol.tri.transport.TripleHttp2ClientResponseHandler;
 import org.apache.dubbo.rpc.protocol.tri.transport.TripleHttp2FrameServerHandler;
@@ -39,7 +39,7 @@ public List<TypeDescriber> getTypeDescribers() {
         typeDescribers.add(buildTypeDescriberWithPublicMethod(TripleCommandOutBoundHandler.class));
         typeDescribers.add(buildTypeDescriberWithPublicMethod(TripleTailHandler.class));
         typeDescribers.add(buildTypeDescriberWithPublicMethod(TripleServerConnectionHandler.class));
-        typeDescribers.add(buildTypeDescriberWithPublicMethod(TripleClientHandler.class));
+        typeDescribers.add(buildTypeDescriberWithPublicMethod(TripleGoAwayHandler.class));
         typeDescribers.add(buildTypeDescriberWithPublicMethod(TripleHttp2ClientResponseHandler.class));
         return typeDescribers;
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -55,8 +55,6 @@
 
 public class TripleProtocol extends AbstractProtocol {
 
-
-    public static final String METHOD_ATTR_PACK = "pack";
     private static final Logger logger = LoggerFactory.getLogger(TripleProtocol.class);
     private final PathResolver pathResolver;
     private final TriBuiltinService triBuiltinService;

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Constants.java
Patch:
@@ -178,4 +178,7 @@ public interface Constants {
     String CONTENT_LENGTH_KEY = "content-length";
 
     String USE_SECURE_RANDOM_ID = "dubbo.application.use-secure-random-request-id";
+
+    String CONNECTION_HANDLER_NAME = "connectionHandler";
+
 }

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyConnectionClient.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.ChannelHandler;
+import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.api.WireProtocol;
 import org.apache.dubbo.remoting.api.connection.AbstractConnectionClient;
@@ -123,7 +124,7 @@ protected void initChannel(SocketChannel ch) {
                 int heartbeat = UrlUtils.getHeartbeat(getUrl());
                 pipeline.addLast("client-idle-handler", new IdleStateHandler(heartbeat, 0, 0, MILLISECONDS));
 
-                pipeline.addLast("connectionHandler", connectionHandler);
+                pipeline.addLast(Constants.CONNECTION_HANDLER_NAME, connectionHandler);
 
                 NettyConfigOperator operator = new NettyConfigOperator(nettyChannel, getChannelHandler());
                 protocol.configClientPipeline(getUrl(), operator, nettySslContextOperator);

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/StubMethodDescriptor.java
Patch:
@@ -63,7 +63,7 @@ public StubMethodDescriptor(String methodName,
         this.returnClass = responseClass;
         this.paramDesc = ReflectUtils.getDesc(parameterClasses);
         this.compatibleParamSignatures = Stream.of(parameterClasses).map(Class::getName).toArray(String[]::new);
-        this.returnTypes = new Type[]{requestClass, requestClass};
+        this.returnTypes = new Type[]{responseClass, responseClass};
         serviceDescriptor.addMethod(this);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/StubMethodDescriptor.java
Patch:
@@ -63,7 +63,7 @@ public StubMethodDescriptor(String methodName,
         this.returnClass = responseClass;
         this.paramDesc = ReflectUtils.getDesc(parameterClasses);
         this.compatibleParamSignatures = Stream.of(parameterClasses).map(Class::getName).toArray(String[]::new);
-        this.returnTypes = new Type[]{requestClass, requestClass};
+        this.returnTypes = new Type[]{responseClass, responseClass};
         serviceDescriptor.addMethod(this);
     }
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/filter/ServiceInvokeRestFilter.java
Patch:
@@ -46,6 +46,7 @@
 import org.apache.dubbo.rpc.protocol.rest.util.MediaTypeUtil;
 
 import java.util.List;
+import java.util.Objects;
 
 @Activate(value = "invoke", order = Integer.MAX_VALUE)
 public class ServiceInvokeRestFilter implements RestRequestFilter {
@@ -179,6 +180,7 @@ public static void writeResult(NettyHttpResponse nettyHttpResponse, URL url, Obj
      */
     public static MediaType getAcceptMediaType(RequestFacade request, Class<?> returnType) {
         String accept = request.getHeader(RestHeaderEnum.ACCEPT.getHeader());
+        accept = Objects.isNull(accept) ? MediaType.ALL_VALUE.value : accept;
         MediaType mediaType = MediaTypeUtil.convertMediaType(returnType, accept);
         return mediaType;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/executor/AbstractIsolationExecutorSupport.java
Patch:
@@ -36,6 +36,7 @@ public AbstractIsolationExecutorSupport(URL url) {
         this.frameworkServiceRepository = url.getOrDefaultFrameworkModel().getServiceRepository();
     }
 
+    @Override
     public Executor getExecutor(Object data) {
 
         ProviderModel providerModel = getProviderModel(data);

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/executor/DefaultExecutorSupport.java
Patch:
@@ -30,6 +30,7 @@ public DefaultExecutorSupport(URL url) {
         this.executorRepository = ExecutorRepository.getInstance(url.getOrDefaultApplicationModel());
     }
 
+    @Override
     public Executor getExecutor(Object data) {
         return executorRepository.getExecutor(url);
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java
Patch:
@@ -180,7 +180,7 @@ public Result getAppResponse() {
      */
     @Override
     public Result get() throws InterruptedException, ExecutionException {
-        if (executor != null && executor instanceof ThreadlessExecutor) {
+        if (executor instanceof ThreadlessExecutor) {
             ThreadlessExecutor threadlessExecutor = (ThreadlessExecutor) executor;
             try {
                 while (!responseFuture.isDone() && !threadlessExecutor.isShutdown()) {
@@ -196,7 +196,7 @@ public Result get() throws InterruptedException, ExecutionException {
     @Override
     public Result get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
         long deadline = System.nanoTime() + unit.toNanos(timeout);
-        if (executor != null && executor instanceof ThreadlessExecutor) {
+        if (executor instanceof ThreadlessExecutor) {
             ThreadlessExecutor threadlessExecutor = (ThreadlessExecutor) executor;
             try {
                 while (!responseFuture.isDone() && !threadlessExecutor.isShutdown()) {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java
Patch:
@@ -40,14 +40,13 @@
 import static org.apache.dubbo.common.constants.CommonConstants.LAZY_CONNECT_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_FAILED_CLOSE;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_FAILED_CONNECT_PROVIDER;
+import static org.apache.dubbo.config.Constants.CLIENT_THREAD_POOL_NAME;
 
 /**
  * AbstractClient
  */
 public abstract class AbstractClient extends AbstractEndpoint implements Client {
 
-    protected static final String CLIENT_THREAD_POOL_NAME = "DubboClientHandler";
-
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(AbstractClient.class);
 
     private final Lock connectLock = new ReentrantLock();

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/ThreadPoolMetricsSampler.java
Patch:
@@ -55,6 +55,8 @@ public class ThreadPoolMetricsSampler implements MetricsSampler {
     private DataStore dataStore;
     private final Map<String, ThreadPoolExecutor> sampleThreadPoolExecutor = new ConcurrentHashMap<>();
     private final ConcurrentHashMap<String, ThreadPoolMetric> threadPoolMetricMap = new ConcurrentHashMap<>();
+    private final AtomicBoolean samplesChanged = new AtomicBoolean(true);
+
 
     public ThreadPoolMetricsSampler(DefaultMetricsCollector collector) {
         this.collector = collector;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/report/MetricsReporter.java
Patch:
@@ -28,10 +28,10 @@ public interface MetricsReporter {
      */
     void init();
 
-    void refreshData();
+    void resetIfSamplesChanged();
 
     String getResponse();
-    
+
     default String getResponseWithName(String metricsName) {
         return null;
     }

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/report/nop/NopMetricsReporter.java
Patch:
@@ -35,7 +35,7 @@ public void init() {
     }
 
     @Override
-    public void refreshData() {
+    public void resetIfSamplesChanged() {
 
     }
 

File: dubbo-metrics/dubbo-metrics-prometheus/src/main/java/org/apache/dubbo/metrics/prometheus/NopPrometheusMetricsReporter.java
Patch:
@@ -31,7 +31,7 @@ public void init() {
     }
 
     @Override
-    public void refreshData() {
+    public void resetIfSamplesChanged() {
 
     }
 

File: dubbo-metrics/dubbo-metrics-prometheus/src/main/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsReporterCmd.java
Patch:
@@ -116,7 +116,7 @@ private String getResponseByApplication(ApplicationModel applicationModel) {
                 logger.debug("scrape begin");
             }
 
-            metricsReporter.refreshData();
+            metricsReporter.resetIfSamplesChanged();
 
             if (logger.isDebugEnabled()) {
                 logger.debug(String.format("scrape end,Elapsed Time：%s", System.currentTimeMillis() - begin));

File: dubbo-metrics/dubbo-metrics-prometheus/src/test/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsThreadPoolTest.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.metrics.prometheus;
 
-import com.sun.net.httpserver.HttpServer;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.MetricsConfig;
 import org.apache.dubbo.config.nested.PrometheusConfig;
@@ -25,6 +24,8 @@
 import org.apache.dubbo.metrics.model.sample.GaugeMetricSample;
 import org.apache.dubbo.metrics.model.sample.MetricSample;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
+import com.sun.net.httpserver.HttpServer;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.CloseableHttpClient;
@@ -122,7 +123,7 @@ private void exportHttpServer(PrometheusMetricsReporter reporter, int port) {
         try {
             HttpServer prometheusExporterHttpServer = HttpServer.create(new InetSocketAddress(port), 0);
             prometheusExporterHttpServer.createContext("/metrics", httpExchange -> {
-                reporter.refreshData();
+                reporter.resetIfSamplesChanged();
                 String response = reporter.getPrometheusRegistry().scrape();
                 httpExchange.sendResponseHeaders(200, response.getBytes().length);
                 try (OutputStream os = httpExchange.getResponseBody()) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/DefaultMetricsReporterCmd.java
Patch:
@@ -102,7 +102,7 @@ private String getResponseByApplication(ApplicationModel applicationModel, Strin
         String response = "DefaultMetricsReporter not init";
         MetricsReporter metricsReporter = applicationModel.getBeanFactory().getBean(DefaultMetricsReporter.class);
         if (metricsReporter != null) {
-            metricsReporter.refreshData();
+            metricsReporter.resetIfSamplesChanged();
             response = metricsReporter.getResponseWithName(metricsName);
         }
         return response;

File: dubbo-plugin/dubbo-spring-security/src/main/java/org/apache/dubbo/spring/security/utils/SecurityNames.java
Patch:
@@ -24,6 +24,8 @@ final public class SecurityNames {
     public static final String SECURITY_CONTEXT_HOLDER_CLASS_NAME = "org.springframework.security.core.context.SecurityContextHolder";
     public static final String CORE_JACKSON_2_MODULE_CLASS_NAME = "org.springframework.security.jackson2.CoreJackson2Module";
     public static final String OBJECT_MAPPER_CLASS_NAME = "com.fasterxml.jackson.databind.ObjectMapper";
+    public static final String JAVA_TIME_MODULE_CLASS_NAME = "com.fasterxml.jackson.datatype.jsr310.JavaTimeModule";
+    public static final String SIMPLE_MODULE_CLASS_NAME = "com.fasterxml.jackson.databind.module.SimpleModule";
 
     private SecurityNames() {}
 

File: dubbo-registry/dubbo-registry-multiple/src/test/java/org/apache/dubbo/registry/multiple/MultipleRegistry2S2RTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.zookeeper.ZookeeperRegistry;
 import org.apache.dubbo.remoting.zookeeper.ZookeeperClient;
-import org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient;
+import org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Assumptions;
@@ -61,9 +61,9 @@ public static void beforeAll() {
         multipleRegistry = (MultipleRegistry) new MultipleRegistryFactory().createRegistry(url);
 
         // for test validation
-        zookeeperClient = new CuratorZookeeperClient(URL.valueOf(zookeeperConnectionAddress1));
+        zookeeperClient = new Curator5ZookeeperClient(URL.valueOf(zookeeperConnectionAddress1));
         zookeeperRegistry = MultipleRegistryTestUtil.getZookeeperRegistry(multipleRegistry.getServiceRegistries().values());
-        zookeeperClient2 = new CuratorZookeeperClient(URL.valueOf(zookeeperConnectionAddress2));
+        zookeeperClient2 = new Curator5ZookeeperClient(URL.valueOf(zookeeperConnectionAddress2));
         zookeeperRegistry2 = MultipleRegistryTestUtil.getZookeeperRegistry(multipleRegistry.getServiceRegistries().values());
     }
 

File: dubbo-plugin/dubbo-plugin-loom/src/main/java/org/apache/dubbo/common/threadpool/support/loom/VirtualThreadPool.java
Patch:
@@ -6,7 +6,7 @@
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: dubbo-registry/dubbo-registry-multiple/src/test/java/org/apache/dubbo/registry/multiple/MultipleRegistry2S2RTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.zookeeper.ZookeeperRegistry;
 import org.apache.dubbo.remoting.zookeeper.ZookeeperClient;
-import org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient;
+import org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Assumptions;
@@ -61,9 +61,9 @@ public static void beforeAll() {
         multipleRegistry = (MultipleRegistry) new MultipleRegistryFactory().createRegistry(url);
 
         // for test validation
-        zookeeperClient = new CuratorZookeeperClient(URL.valueOf(zookeeperConnectionAddress1));
+        zookeeperClient = new Curator5ZookeeperClient(URL.valueOf(zookeeperConnectionAddress1));
         zookeeperRegistry = MultipleRegistryTestUtil.getZookeeperRegistry(multipleRegistry.getServiceRegistries().values());
-        zookeeperClient2 = new CuratorZookeeperClient(URL.valueOf(zookeeperConnectionAddress2));
+        zookeeperClient2 = new Curator5ZookeeperClient(URL.valueOf(zookeeperConnectionAddress2));
         zookeeperRegistry2 = MultipleRegistryTestUtil.getZookeeperRegistry(multipleRegistry.getServiceRegistries().values());
     }
 

File: dubbo-xds/src/main/java/org/apache/dubbo/registry/xds/XdsServiceDiscovery.java
Patch:
@@ -59,6 +59,9 @@ public void doInitialize(URL registryURL) {
     @Override
     public void doDestroy() {
         try {
+            if (exchanger == null) {
+                return;
+            }
             exchanger.destroy();
         } catch (Throwable t) {
             logger.error(REGISTRY_ERROR_INITIALIZE_XDS, "", "", t.getMessage(), t);

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/PortUnificationServerTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.jupiter.api.Test;
 
 import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_MANAGEMENT_MODE_DEFAULT;
+import static org.apache.dubbo.common.constants.CommonConstants.EXT_PROTOCOL;
 
 class PortUnificationServerTest {
 

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/ReplierDispatcherTest.java
Patch:
@@ -67,7 +67,7 @@ public void startServer() throws RemotingException {
         ReplierDispatcher dispatcher = new ReplierDispatcher();
         dispatcher.addReplier(RpcMessage.class, new RpcMessageHandler());
         dispatcher.addReplier(Data.class, (channel, msg) -> new StringMessage("hello world"));
-        URL url = URL.valueOf("exchange://localhost:" + port + "?" + CommonConstants.TIMEOUT_KEY + "=60000");
+        URL url = URL.valueOf("exchange://localhost:" + port + "?" + CommonConstants.TIMEOUT_KEY + "=60000&threadpool=cached");
         ApplicationModel applicationModel = ApplicationModel.defaultModel();
         ApplicationConfig applicationConfig = new ApplicationConfig("provider-app");
         applicationConfig.setExecutorManagementMode(EXECUTOR_MANAGEMENT_MODE_DEFAULT);

File: dubbo-test/dubbo-test-modules/src/test/java/org/apache/dubbo/dependency/FileTest.java
Patch:
@@ -51,6 +51,7 @@ class FileTest {
         ignoredModules.add(Pattern.compile("dubbo-core-spi"));
         ignoredModules.add(Pattern.compile("dubbo-demo.*"));
         ignoredModules.add(Pattern.compile("dubbo-annotation-processor"));
+        ignoredModules.add(Pattern.compile("dubbo-plugin-loom.*"));
 
         ignoredArtifacts.add(Pattern.compile("dubbo-demo.*"));
         ignoredArtifacts.add(Pattern.compile("dubbo-test.*"));

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/Hessian2SerializerFactory.java
Patch:
@@ -30,7 +30,9 @@ public class Hessian2SerializerFactory extends SerializerFactory {
 
     private final DefaultSerializeClassChecker defaultSerializeClassChecker;
 
-    public Hessian2SerializerFactory(DefaultSerializeClassChecker defaultSerializeClassChecker) {
+
+    public Hessian2SerializerFactory(ClassLoader classLoader, DefaultSerializeClassChecker defaultSerializeClassChecker) {
+        super(classLoader);
         this.defaultSerializeClassChecker = defaultSerializeClassChecker;
     }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java
Patch:
@@ -158,9 +158,10 @@ public Object decode(Channel channel, InputStream input) throws IOException {
                 pts = drawPts(path, version, desc, pts);
                 if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {
                     if (RpcUtils.isGenericCall(desc, getMethodName())) {
-                        pts = DubboCodec.GENERIC_PTS_ARRAY;
+                        // Should recreate here for each invocation because the parameterTypes may be changed by user.
+                        pts = new Class<?>[]{String.class, String[].class, Object[].class};
                     } else if (RpcUtils.isEcho(desc, getMethodName())) {
-                        pts = DubboCodec.ECHO_PTS_ARRAY;
+                        pts = new Class<?>[]{Object.class};
                     } else {
                         throw new IllegalArgumentException("Service not found:" + path + ", " + getMethodName());
                     }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -69,8 +69,6 @@ public class DubboCodec extends ExchangeCodec {
     public static final byte RESPONSE_NULL_VALUE_WITH_ATTACHMENTS = 5;
     public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];
     public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];
-    public static final Class<?>[] GENERIC_PTS_ARRAY = new Class<?>[]{String.class, String[].class, Object[].class};
-    public static final Class<?>[] ECHO_PTS_ARRAY = new Class<?>[]{Object.class};
     private static final ErrorTypeAwareLogger log = LoggerFactory.getErrorTypeAwareLogger(DubboCodec.class);
 
     private static final AtomicBoolean decodeInUserThreadLogged = new AtomicBoolean(false);

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationUtils.java
Patch:
@@ -277,7 +277,7 @@ private static <V extends Object> Map<String, V> getSubProperties(Map<String, V>
             for (Map.Entry<String, V> entry : copy.entrySet()) {
                 String key = entry.getKey();
                 V val = entry.getValue();
-                if (StringUtils.startsWithIgnoreCase(key, prefix)
+                if ((StringUtils.startsWithIgnoreCase(key, prefix) || StringUtils.startsWithIgnoreCase(key, StringUtils.toOSStyleKey(prefix)))
                     && key.length() > prefix.length()
                     && !ConfigurationUtils.isEmptyValue(val)) {
 
@@ -317,7 +317,7 @@ public static <V extends Object> boolean hasSubProperties(Map<String, V> configM
         }
         for (Map.Entry<String, V> entry : copy.entrySet()) {
             String key = entry.getKey();
-            if (StringUtils.startsWithIgnoreCase(key, prefix)
+            if ((StringUtils.startsWithIgnoreCase(key, prefix) || StringUtils.startsWithIgnoreCase(key, StringUtils.toOSStyleKey(prefix)))
                 && key.length() > prefix.length()
                 && !ConfigurationUtils.isEmptyValue(entry.getValue())) {
                 return true;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -917,7 +917,7 @@ private class ProviderConfigurationListener extends AbstractConfiguratorListener
         public ProviderConfigurationListener(ModuleModel moduleModel) {
             super(moduleModel);
             this.moduleModel = moduleModel;
-            if (moduleModel.modelEnvironment().getConfiguration().convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)) {
+            if (moduleModel.modelEnvironment().getConfiguration().getBoolean(ENABLE_CONFIGURATION_LISTEN, true)) {
                 this.initWith(moduleModel.getApplicationModel().getApplicationName() + CONFIGURATORS_SUFFIX);
             }
         }

File: dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/aggregate/SlidingWindowTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.metrics.aggregate;
 
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.RepeatedTest;
 import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.atomic.LongAdder;
@@ -40,15 +41,15 @@ void setup() {
         window = new TestSlidingWindow(paneCount, intervalInMs);
     }
 
-    @Test
+    @RepeatedTest(1000)
     void testCurrentPane() {
         assertNull(window.currentPane(/* invalid time*/-1L));
         long timeInMs = System.currentTimeMillis();
         Pane<LongAdder> currentPane = window.currentPane(timeInMs);
         assertNotNull(currentPane);
         // reuse test
         assertEquals(currentPane,
-            window.currentPane(1 + timeInMs + window.getPaneIntervalInMs() * paneCount));
+            window.currentPane(timeInMs + window.getPaneIntervalInMs() * paneCount));
     }
 
     @Test

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/MemorySafeLinkedBlockingQueue.java
Patch:
@@ -37,15 +37,15 @@ public class MemorySafeLinkedBlockingQueue<E> extends LinkedBlockingQueue<E> {
 
     public static int THE_256_MB = 256 * 1024 * 1024;
 
-    private int maxFreeMemory;
+    private long maxFreeMemory;
 
     private Rejector<E> rejector;
 
     public MemorySafeLinkedBlockingQueue() {
         this(THE_256_MB);
     }
 
-    public MemorySafeLinkedBlockingQueue(final int maxFreeMemory) {
+    public MemorySafeLinkedBlockingQueue(final long maxFreeMemory) {
         super(Integer.MAX_VALUE);
         this.maxFreeMemory = maxFreeMemory;
         //default as DiscardPolicy to ensure compatibility with the old version
@@ -74,7 +74,7 @@ public void setMaxFreeMemory(final int maxFreeMemory) {
      *
      * @return the max free memory limit
      */
-    public int getMaxFreeMemory() {
+    public long getMaxFreeMemory() {
         return maxFreeMemory;
     }
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/MemorySafeLinkedBlockingQueueTest.java
Patch:
@@ -39,7 +39,7 @@ void test() {
         final Instrumentation instrumentation = ByteBuddyAgent.getInstrumentation();
         final long objectSize = instrumentation.getObjectSize((Runnable) () -> {
         });
-        int maxFreeMemory = (int) MemoryLimitCalculator.maxAvailable();
+        long maxFreeMemory = (long) MemoryLimitCalculator.maxAvailable();
         MemorySafeLinkedBlockingQueue<Runnable> queue = new MemorySafeLinkedBlockingQueue<>(maxFreeMemory);
         // all memory is reserved for JVM, so it will fail here
         assertThat(queue.offer(() -> {
@@ -53,7 +53,7 @@ void test() {
 
     @Test
     void testCustomReject() {
-        MemorySafeLinkedBlockingQueue<Runnable> queue = new MemorySafeLinkedBlockingQueue<>(Integer.MAX_VALUE);
+        MemorySafeLinkedBlockingQueue<Runnable> queue = new MemorySafeLinkedBlockingQueue<>(Long.MAX_VALUE);
         queue.setRejector(new AbortPolicy<>());
         assertThrows(RejectException.class, () -> queue.offer(() -> {
         }));

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/AbstractServerCall.java
Patch:
@@ -229,6 +229,9 @@ public final void onMessage(byte[] message, boolean isReturnTriException) {
     @Override
     public final void onCancelByRemote(TriRpcStatus status) {
         closed = true;
+        if (listener == null) {
+            return;
+        }
         cancellationContext.cancel(status.cause);
         listener.onCancel(status);
     }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/aggregate/TimeWindowCounter.java
Patch:
@@ -28,7 +28,7 @@ public class TimeWindowCounter {
 
     private final LongAdderSlidingWindow slidingWindow;
 
-    public TimeWindowCounter(int bucketNum, int timeWindowSeconds) {
+    public TimeWindowCounter(int bucketNum, long timeWindowSeconds) {
         this.slidingWindow = new LongAdderSlidingWindow(bucketNum, TimeUnit.SECONDS.toMillis(timeWindowSeconds));
     }
 

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/AggregateMetricsCollector.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.Optional;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.TimeUnit;
 
 import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER_SIDE;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
@@ -127,7 +128,7 @@ public void onEvent(RequestEvent event) {
         if (enableQps) {
             MethodMetric metric = calcWindowCounter(event, MetricsKey.METRIC_REQUESTS);
             TimeWindowCounter qpsCounter = ConcurrentHashMapUtils.computeIfAbsent(qps, metric,
-                methodMetric -> new TimeWindowCounter(bucketNum, qpsTimeWindowMillSeconds));
+                methodMetric -> new TimeWindowCounter(bucketNum, TimeUnit.MILLISECONDS.toSeconds(qpsTimeWindowMillSeconds)));
             qpsCounter.increment();
         }
     }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailSafeClusterInvokerTest.java
Patch:
@@ -21,10 +21,10 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcContext;
+import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.cluster.Directory;
 import org.apache.dubbo.rpc.cluster.filter.DemoService;
-import org.apache.dubbo.rpc.RpcException;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -56,6 +56,7 @@ class FailSafeClusterInvokerTest {
 
     @BeforeEach
     public void setUp() throws Exception {
+        RpcContext.removeServiceContext();
 
         dic = mock(Directory.class);
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ExceptionFilter.java
Patch:
@@ -92,7 +92,7 @@ public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invoca
                 }
                 // directly throw if it's JDK exception
                 String className = exception.getClass().getName();
-                if (className.startsWith("java.") || className.startsWith("javax.")) {
+                if (className.startsWith("java.") || className.startsWith("javax.") || className.startsWith("jakarta.")) {
                     return;
                 }
                 // directly throw if it's dubbo exception

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/DefaultFuture.java
Patch:
@@ -276,7 +276,7 @@ private void doSent() {
 
     private String getTimeoutMessage(boolean scan) {
         long nowTimestamp = System.currentTimeMillis();
-        return (sent > 0 ? "Waiting server-side response timeout" : "Sending request timeout in client-side")
+        return (sent > 0 && sent - start < timeout ? "Waiting server-side response timeout" : "Sending request timeout in client-side")
             + (scan ? " by scan timer" : "") + ". start time: "
             + (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date(start))) + ", end time: "
             + (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date(nowTimestamp))) + ","

File: dubbo-xds/src/main/java/org/apache/dubbo/registry/xds/istio/IstioCitadelCertificateSigner.java
Patch:
@@ -175,7 +175,7 @@ public CertPair createCert() throws IOException {
 
         IstioCertificateServiceGrpc.IstioCertificateServiceStub stub = IstioCertificateServiceGrpc.newStub(channel);
 
-        stub = MetadataUtils.attachHeaders(stub, header);
+        stub = stub.withInterceptors(MetadataUtils.newAttachHeadersInterceptor(header));
 
         CountDownLatch countDownLatch = new CountDownLatch(1);
         StringBuffer publicKeyBuilder = new StringBuffer();

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -348,6 +348,7 @@ public void checkConnectivity() {
                 if (!invokersToReconnect.isEmpty()) {
                     checkConnectivity();
                 }
+                MetricsEventBus.publish(RegistryEvent.refreshDirectoryEvent(applicationModel, getSummary(), getDirectoryMeta()));
             }, reconnectTaskPeriod, TimeUnit.MILLISECONDS);
         }
         MetricsEventBus.publish(RegistryEvent.refreshDirectoryEvent(applicationModel, getSummary(), getDirectoryMeta()));

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -643,7 +643,7 @@ public interface CommonConstants {
 
     String REST_SERVICE_DEPLOYER_URL_ATTRIBUTE_KEY = "restServiceDeployerAttributeKey";
 
-    String SERVICE_DEPLOYER_ATTRIBUTE_KEY = "serviceDeployer";    String RESTEASY_NETTY_HTTP_REQUEST_ATTRIBUTE_KEY = "resteasyNettyHttpRequest";
+    String SERVICE_DEPLOYER_ATTRIBUTE_KEY = "serviceDeployer";
 
     String DUBBO_MANUAL_REGISTER_KEY = "dubbo.application.manual-register";
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -391,6 +391,7 @@ private void initMetricsReporter() {
         collector.setCollectEnabled(true);
         collector.collectApplication();
         collector.setThreadpoolCollectEnabled(Optional.ofNullable(metricsConfig.getEnableThreadpool()).orElse(true));
+        collector.setMetricsInitEnabled(Optional.ofNullable(metricsConfig.getEnableMetricsInit()).orElse(true));
         MetricsReporterFactory metricsReporterFactory = getExtensionLoader(MetricsReporterFactory.class).getAdaptiveExtension();
         MetricsReporter metricsReporter = null;
         try {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationPostProcessor.java
Patch:
@@ -238,7 +238,7 @@ private void scanServiceBeans(Set<String> packagesToScan, BeanDefinitionRegistry
                 }
             } else {
                 if (logger.isWarnEnabled()) {
-                    logger.warn(CONFIG_NO_ANNOTATIONS_FOUND, "No annotations were found on the class", "", "No class annotated by Dubbo @Service was found under package ["
+                    logger.warn(CONFIG_NO_ANNOTATIONS_FOUND, "No annotations were found on the class", "", "No class annotated by Dubbo @DubboService or @Service was found under package ["
                         + packageToScan + "], ignore re-scanned classes: " + scanExcludeFilter.getExcludedCount());
                 }
             }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/reference/ReferenceBeanManager.java
Patch:
@@ -157,7 +157,7 @@ public void prepareReferenceBeans() throws Exception {
      * @param referenceBean
      * @throws Exception
      */
-    private synchronized void initReferenceBean(ReferenceBean referenceBean) throws Exception {
+    public synchronized void initReferenceBean(ReferenceBean referenceBean) throws Exception {
 
         if (referenceBean.getReferenceConfig() != null) {
             return;

File: dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/restclient/HttpClientRestClient.java
Patch:
@@ -93,7 +93,8 @@ public CompletableFuture<RestResult> send(RequestTemplate requestTemplate) {
             future.complete(new RestResult() {
                 @Override
                 public String getContentType() {
-                    return response.getFirstHeader("Content-Type").getValue();
+                    Header header = response.getFirstHeader("Content-Type");
+                    return header == null ? null : header.getValue();
                 }
 
                 @Override

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/ConnectionTest.java
Patch:
@@ -21,13 +21,13 @@
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.api.connection.AbstractConnectionClient;
 import org.apache.dubbo.remoting.api.connection.ConnectionManager;
 import org.apache.dubbo.remoting.api.connection.MultiplexProtocolConnectionManager;
 import org.apache.dubbo.remoting.api.pu.DefaultPuHandler;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
@@ -50,7 +50,7 @@ public class ConnectionTest {
     private static ConnectionManager connectionManager;
 
     @BeforeAll
-    public static void init() throws RemotingException {
+    public static void init() throws Throwable {
         int port = NetUtils.getAvailablePort();
         url = URL.valueOf("empty://127.0.0.1:" + port + "?foo=bar");
         ApplicationModel applicationModel = ApplicationModel.defaultModel();
@@ -123,7 +123,7 @@ void testRefCnt2() throws InterruptedException {
     }
 
     @Test
-    void connectSyncTest() throws RemotingException {
+    void connectSyncTest() throws Throwable {
         int port = NetUtils.getAvailablePort();
         URL url = URL.valueOf("empty://127.0.0.1:" + port + "?foo=bar");
         NettyPortUnificationServer nettyPortUnificationServer = new NettyPortUnificationServer(url, new DefaultPuHandler());

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/PortUnificationServerTest.java
Patch:
@@ -21,11 +21,10 @@
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.api.pu.DefaultPuHandler;
-
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -34,7 +33,7 @@
 class PortUnificationServerTest {
 
     @Test
-    void testBind() throws RemotingException {
+    void testBind() throws Throwable {
         int port = NetUtils.getAvailablePort();
         URL url = URL.valueOf("empty://127.0.0.1:" + port + "?foo=bar");
         ApplicationModel applicationModel = ApplicationModel.defaultModel();

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/api/SingleProtocolConnectionManagerTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dubbo.remoting.transport.netty4.NettyPortUnificationServer;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
@@ -51,7 +52,7 @@ public class SingleProtocolConnectionManagerTest {
     private static ConnectionManager connectionManager;
 
     @BeforeAll
-    public static void init() throws RemotingException {
+    public static void init() throws Throwable {
         int port = NetUtils.getAvailablePort();
         url = URL.valueOf("empty://127.0.0.1:" + port + "?foo=bar");
         ApplicationModel applicationModel = ApplicationModel.defaultModel();

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/extension/resteasy/ResteasyContext.java
Patch:
@@ -160,9 +160,9 @@ default void addResponseHeaders(NettyHttpResponse response, MultivaluedMap<Strin
         }
     }
 
-    default DubboContainerResponseContextImpl createContainerResponseContext(RequestFacade request, HttpResponse httpResponse, BuiltResponse jaxrsResponse, ContainerResponseFilter[] responseFilters) {
+    default DubboContainerResponseContextImpl createContainerResponseContext(Object originRequest, RequestFacade request, HttpResponse httpResponse, BuiltResponse jaxrsResponse, ContainerResponseFilter[] responseFilters) {
 
-        NettyHttpRequest nettyHttpRequest = createNettyHttpRequest(request);
+        NettyHttpRequest nettyHttpRequest = originRequest == null ? createNettyHttpRequest(request) : (NettyHttpRequest) originRequest;
 
         ResponseContainerRequestContext requestContext = new ResponseContainerRequestContext(nettyHttpRequest);
         DubboContainerResponseContextImpl responseContext = new DubboContainerResponseContextImpl(nettyHttpRequest, httpResponse, jaxrsResponse,

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/extension/resteasy/filter/ResteasyRequestContainerFilterAdapter.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
-import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.protocol.rest.deploy.ServiceDeployer;
 import org.apache.dubbo.rpc.protocol.rest.extension.resteasy.ResteasyContext;
 import org.apache.dubbo.rpc.protocol.rest.filter.RestRequestFilter;
@@ -30,7 +29,6 @@
 import javax.ws.rs.container.ContainerRequestFilter;
 import java.util.List;
 
-import static org.apache.dubbo.common.constants.CommonConstants.RESTEASY_NETTY_HTTP_REQUEST_ATTRIBUTE_KEY;
 
 
 @Activate(value = "resteasy", onClass = {"javax.ws.rs.container.ContainerRequestFilter", "org.jboss.resteasy.plugins.server.netty.NettyHttpRequest", "org.jboss.resteasy.plugins.server.netty.NettyHttpResponse"}, order = Integer.MAX_VALUE - 1)
@@ -55,7 +53,8 @@ public void filter(RestFilterContext restFilterContext) throws Exception {
 
         DubboPreMatchContainerRequestContext containerRequestContext = convertHttpRequestToContainerRequestContext(requestFacade, containerRequestFilters.toArray(new ContainerRequestFilter[0]));
 
-        RpcContext.getServiceContext().setObjectAttachment(RESTEASY_NETTY_HTTP_REQUEST_ATTRIBUTE_KEY, containerRequestContext.getHttpRequest());
+        // set resteasy request for save user`s custom  request attribute
+        restFilterContext.setOriginRequest(containerRequestContext.getHttpRequest());
 
         try {
             BuiltResponse restResponse = containerRequestContext.filter();

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/extension/resteasy/filter/ResteasyResponseContainerFilterAdapter.java
Patch:
@@ -53,7 +53,7 @@ public void filter(RestFilterContext restFilterContext) throws Exception {
         DubboBuiltResponse dubboBuiltResponse = new DubboBuiltResponse(response.getResponseBody(), response.getStatus(), response.getEntityClass());
         // NettyHttpResponse wrapper
         HttpResponse httpResponse = new ResteasyNettyHttpResponse(response);
-        DubboContainerResponseContextImpl containerResponseContext = createContainerResponseContext(requestFacade, httpResponse, dubboBuiltResponse, containerRequestFilters.toArray(new ContainerResponseFilter[0]));
+        DubboContainerResponseContextImpl containerResponseContext = createContainerResponseContext(restFilterContext.getOriginRequest(),requestFacade, httpResponse, dubboBuiltResponse, containerRequestFilters.toArray(new ContainerResponseFilter[0]));
         containerResponseContext.filter();
 
         // user reset entity

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -67,7 +67,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.locks.ReentrantLock;
-import java.util.stream.Collectors;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PACKABLE_METHOD_FACTORY;
@@ -249,7 +248,7 @@ AsyncRpcResult invokeUnary(MethodDescriptor methodDescriptor, Invocation invocat
             if (methodDescriptor.isGeneric()) {
                 Object[] args = new Object[3];
                 args[0] = RpcUtils.getMethodName(invocation);
-                args[1] = Arrays.stream(RpcUtils.getParameterTypes(invocation)).map(Class::getName).collect(Collectors.toList());
+                args[1] = Arrays.stream(RpcUtils.getParameterTypes(invocation)).map(Class::getName).toArray(String[]::new);
                 args[2] = RpcUtils.getArguments(invocation);
                 pureArgument = args;
             } else {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -67,7 +67,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.locks.ReentrantLock;
-import java.util.stream.Collectors;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PACKABLE_METHOD_FACTORY;
@@ -249,7 +248,7 @@ AsyncRpcResult invokeUnary(MethodDescriptor methodDescriptor, Invocation invocat
             if (methodDescriptor.isGeneric()) {
                 Object[] args = new Object[3];
                 args[0] = RpcUtils.getMethodName(invocation);
-                args[1] = Arrays.stream(RpcUtils.getParameterTypes(invocation)).map(Class::getName).collect(Collectors.toList());
+                args[1] = Arrays.stream(RpcUtils.getParameterTypes(invocation)).map(Class::getName).toArray(String[]::new);
                 args[2] = RpcUtils.getArguments(invocation);
                 pureArgument = args;
             } else {

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/message/JsonCodec.java
Patch:
@@ -93,9 +93,6 @@ public Object[] decode(InputStream dataInputStream, Class<?>[] targetTypes) thro
         List<Object> result = new ArrayList<>();
         try {
             try {
-                if (targetTypes.length == 1) {
-                    return new Object[]{this.decode(dataInputStream, targetTypes[0])};
-                }
                 int len;
                 byte[] data = new byte[4096];
                 StringBuilder builder = new StringBuilder(4096);

File: dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/restclient/HttpClientRestClient.java
Patch:
@@ -93,7 +93,8 @@ public CompletableFuture<RestResult> send(RequestTemplate requestTemplate) {
             future.complete(new RestResult() {
                 @Override
                 public String getContentType() {
-                    return response.getFirstHeader("Content-Type").getValue();
+                    Header header = response.getFirstHeader("Content-Type");
+                    return header == null ? null : header.getValue();
                 }
 
                 @Override

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationPostProcessor.java
Patch:
@@ -239,7 +239,7 @@ private void scanServiceBeans(Set<String> packagesToScan, BeanDefinitionRegistry
                 }
             } else {
                 if (logger.isWarnEnabled()) {
-                    logger.warn(CONFIG_NO_ANNOTATIONS_FOUND,"No annotations were found on the class","","No class annotated by Dubbo @Service was found under package ["
+                    logger.warn(CONFIG_NO_ANNOTATIONS_FOUND,"No annotations were found on the class","","No class annotated by Dubbo @DubboService or @Service was found under package ["
                             + packageToScan + "], ignore re-scanned classes: " + scanExcludeFilter.getExcludedCount());
                 }
             }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -643,7 +643,5 @@ public interface CommonConstants {
 
     String DUBBO_PACKABLE_METHOD_FACTORY = "dubbo.application.parameters." + PACKABLE_METHOD_FACTORY_KEY;
 
-    String RESTEASY_NETTY_HTTP_REQUEST_ATTRIBUTE_KEY = "resteasyNettyHttpRequest";
-
     String DUBBO_MANUAL_REGISTER_KEY = "dubbo.application.manual-register";
 }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/extension/resteasy/ResteasyContext.java
Patch:
@@ -160,9 +160,9 @@ default void addResponseHeaders(NettyHttpResponse response, MultivaluedMap<Strin
         }
     }
 
-    default DubboContainerResponseContextImpl createContainerResponseContext(RequestFacade request, HttpResponse httpResponse, BuiltResponse jaxrsResponse, ContainerResponseFilter[] responseFilters) {
+    default DubboContainerResponseContextImpl createContainerResponseContext(Object originRequest, RequestFacade request, HttpResponse httpResponse, BuiltResponse jaxrsResponse, ContainerResponseFilter[] responseFilters) {
 
-        NettyHttpRequest nettyHttpRequest = createNettyHttpRequest(request);
+        NettyHttpRequest nettyHttpRequest = originRequest == null ? createNettyHttpRequest(request) : (NettyHttpRequest) originRequest;
 
         ResponseContainerRequestContext requestContext = new ResponseContainerRequestContext(nettyHttpRequest);
         DubboContainerResponseContextImpl responseContext = new DubboContainerResponseContextImpl(nettyHttpRequest, httpResponse, jaxrsResponse,

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/extension/resteasy/filter/ResteasyRequestContainerFilterAdapter.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
-import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.protocol.rest.deploy.ServiceDeployer;
 import org.apache.dubbo.rpc.protocol.rest.extension.resteasy.ResteasyContext;
 import org.apache.dubbo.rpc.protocol.rest.filter.RestRequestFilter;
@@ -30,7 +29,6 @@
 import javax.ws.rs.container.ContainerRequestFilter;
 import java.util.List;
 
-import static org.apache.dubbo.common.constants.CommonConstants.RESTEASY_NETTY_HTTP_REQUEST_ATTRIBUTE_KEY;
 
 
 @Activate(value = "resteasy", onClass = {"javax.ws.rs.container.ContainerRequestFilter", "org.jboss.resteasy.plugins.server.netty.NettyHttpRequest", "org.jboss.resteasy.plugins.server.netty.NettyHttpResponse"}, order = Integer.MAX_VALUE - 1)
@@ -55,7 +53,8 @@ public void filter(RestFilterContext restFilterContext) throws Exception {
 
         DubboPreMatchContainerRequestContext containerRequestContext = convertHttpRequestToContainerRequestContext(requestFacade, containerRequestFilters.toArray(new ContainerRequestFilter[0]));
 
-        RpcContext.getServiceContext().setObjectAttachment(RESTEASY_NETTY_HTTP_REQUEST_ATTRIBUTE_KEY, containerRequestContext.getHttpRequest());
+        // set resteasy request for save user`s custom  request attribute
+        restFilterContext.setOriginRequest(containerRequestContext.getHttpRequest());
 
         try {
             BuiltResponse restResponse = containerRequestContext.filter();

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/extension/resteasy/filter/ResteasyResponseContainerFilterAdapter.java
Patch:
@@ -53,7 +53,7 @@ public void filter(RestFilterContext restFilterContext) throws Exception {
         DubboBuiltResponse dubboBuiltResponse = new DubboBuiltResponse(response.getResponseBody(), response.getStatus(), response.getEntityClass());
         // NettyHttpResponse wrapper
         HttpResponse httpResponse = new ResteasyNettyHttpResponse(response);
-        DubboContainerResponseContextImpl containerResponseContext = createContainerResponseContext(requestFacade, httpResponse, dubboBuiltResponse, containerRequestFilters.toArray(new ContainerResponseFilter[0]));
+        DubboContainerResponseContextImpl containerResponseContext = createContainerResponseContext(restFilterContext.getOriginRequest(),requestFacade, httpResponse, dubboBuiltResponse, containerRequestFilters.toArray(new ContainerResponseFilter[0]));
         containerResponseContext.filter();
 
         // user reset entity

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/message/JsonCodecFactory.java
Patch:
@@ -23,6 +23,8 @@
 @Activate
 public class JsonCodecFactory implements HttpMessageCodecFactory {
 
+    public static final String NAME = "json";
+
     @Override
     public HttpMessageCodec createCodec(URL url, FrameworkModel frameworkModel) {
         return new JsonCodec();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/http2/GenericHttp2ServerTransportListener.java
Patch:
@@ -28,9 +28,9 @@
 import org.apache.dubbo.remoting.http12.h2.Http2TransportListener;
 import org.apache.dubbo.remoting.http12.message.DefaultListeningDecoder;
 import org.apache.dubbo.remoting.http12.message.JsonCodec;
-import org.apache.dubbo.remoting.http12.message.LengthFieldStreamingDecoder;
 import org.apache.dubbo.remoting.http12.message.ListeningDecoder;
 import org.apache.dubbo.remoting.http12.message.MethodMetadata;
+import org.apache.dubbo.remoting.http12.message.NoOpStreamingDecoder;
 import org.apache.dubbo.remoting.http12.message.StreamingDecoder;
 import org.apache.dubbo.rpc.CancellationContext;
 import org.apache.dubbo.rpc.Invoker;
@@ -116,8 +116,8 @@ public void cancelByRemote(long errorCode) {
     }
 
     protected StreamingDecoder newStreamingDecoder() {
-        //default lengthFieldLength = 4
-        return new LengthFieldStreamingDecoder();
+        //default no op
+        return new NoOpStreamingDecoder();
     }
 
     protected void doOnMetadata(Http2Header metadata) {

File: dubbo-remoting/dubbo-remoting-http12/src/main/java/org/apache/dubbo/remoting/http12/AbstractServerHttpChannelObserver.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.remoting.http12;
 
+import org.apache.dubbo.remoting.http12.exception.EncodeException;
 import org.apache.dubbo.remoting.http12.exception.HttpStatusException;
 import org.apache.dubbo.remoting.http12.message.HttpMessageCodec;
 
@@ -119,6 +120,8 @@ public void onError(Throwable throwable) {
             HttpOutputMessage httpOutputMessage = encodeHttpOutputMessage(errorResponse);
             this.httpMessageCodec.encode(httpOutputMessage.getBody(), errorResponse);
             getHttpChannel().writeMessage(httpOutputMessage);
+        } catch (Throwable ex) {
+            throwable = new EncodeException(ex);
         } finally {
             doOnCompleted(throwable);
         }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/AbstractServerTransportListener.java
Patch:
@@ -161,7 +161,7 @@ protected void doOnMetadata(HEADER metadata) {
             throw new UnsupportedMediaTypeException(contentType);
         }
         this.httpMessageCodec = httpMessageCodec;
-        this.serviceDescriptor = findServiceDescriptor(invoker, serviceName, hasStub);
+        setServiceDescriptor(findServiceDescriptor(invoker, serviceName, hasStub));
         setHttpMessageListener(newHttpMessageListener());
         onMetadataCompletion(metadata);
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/h12/http1/DefaultHttp11ServerTransportListener.java
Patch:
@@ -81,6 +81,8 @@ protected HttpMessageListener newHttpMessageListener() {
         MethodDescriptor methodDescriptor = findMethodDescriptor(getServiceDescriptor(), originalMethodName, hasStub);
         MethodMetadata methodMetadata = MethodMetadata.fromMethodDescriptor(methodDescriptor);
         RpcInvocation rpcInvocation = buildRpcInvocation(getInvoker(), getServiceDescriptor(), methodDescriptor);
+        setMethodDescriptor(methodDescriptor);
+        setMethodMetadata(methodMetadata);
         setRpcInvocation(rpcInvocation);
         HttpMessageCodec httpMessageCodec = getHttpMessageCodec();
         ListeningDecoder listeningDecoder = newListeningDecoder(httpMessageCodec, methodMetadata.getActualRequestTypes());

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/ThreadRejectMetricsCountSampler.java
Patch:
@@ -32,7 +32,6 @@ public class ThreadRejectMetricsCountSampler extends MetricsNameCountSampler<Str
 
     public ThreadRejectMetricsCountSampler(DefaultMetricsCollector collector) {
         super(collector, THREAD_POOL,MetricsKey.THREAD_POOL_THREAD_REJECT_COUNT);
-        this.initMetricsCounter(name,name);
     }
 
     @Override

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -224,10 +224,8 @@ public List<Invoker<T>> list(Invocation invocation) throws RpcException {
 
                 logger.warn(CLUSTER_NO_VALID_PROVIDER, "provider server or registry center crashed", "",
                     "No provider available after connectivity filter for the service " + getConsumerUrl().getServiceKey()
-                        + " All validInvokers' size: " + validInvokers.size()
                         + " All routed invokers' size: " + routedResult.size()
-                        + " All invokers' size: " + invokers.size()
-                        + " from registry " + getUrl().getAddress()
+                        + " from registry " + this
                         + " on the consumer " + NetUtils.getLocalHost()
                         + " using the dubbo version " + Version.getVersion() + ".");
             }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/QosConstants.java
Patch:
@@ -24,6 +24,8 @@ public interface QosConstants {
 
     String QOS_ENABLE = "qos.enable";
 
+    String QOS_CHECK = "qos.check";
+
     String QOS_HOST = "qos.host";
 
     String QOS_PORT = "qos.port";

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/MethodMetricsCollector.java
Patch:
@@ -30,5 +30,7 @@ public interface MethodMetricsCollector<E extends TimeCounterEvent> extends Metr
     void increment(MethodMetric methodMetric, MetricsKeyWrapper wrapper, int size);
 
     void addMethodRt(Invocation invocation, String registryOpType, Long responseTime);
+
+    void init(Invocation invocation, MetricsKeyWrapper wrapper);
 }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/MetricsCollector.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.metrics.collector;
 
 import org.apache.dubbo.common.extension.SPI;
+import org.apache.dubbo.metrics.event.MetricsEvent;
 import org.apache.dubbo.metrics.event.TimeCounterEvent;
 import org.apache.dubbo.metrics.listener.MetricsLifeListener;
 import org.apache.dubbo.metrics.model.sample.MetricSample;
@@ -42,4 +43,6 @@ default boolean isCollectEnabled() {
      */
     List<MetricSample> collect();
 
+    default  void initMetrics(MetricsEvent event) {};
+
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/SimpleMetricsEventMulticaster.java
Patch:
@@ -43,6 +43,7 @@ public void publishEvent(MetricsEvent event) {
         if (event instanceof EmptyEvent) {
             return;
         }
+
         if (validateIfApplicationConfigExist(event)) return;
         for (MetricsListener listener : listeners) {
             if (listener.isSupport(event)) {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/MetricsKeyWrapper.java
Patch:
@@ -85,7 +85,7 @@ public String targetKey() {
             return metricsKey.getName();
         }
         try {
-            return metricsKey.getNameByType(getType());
+            return String.format(metricsKey.getName(), getType());
         } catch (Exception ignore) {
             return metricsKey.getName();
         }

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/MetricThreadPoolExhaustedListener.java
Patch:
@@ -34,10 +34,10 @@ public MetricThreadPoolExhaustedListener(String threadPoolExecutorName,DefaultMe
     public MetricThreadPoolExhaustedListener(String threadPoolExecutorName,ThreadRejectMetricsCountSampler sampler) {
         this.threadPoolExecutorName=threadPoolExecutorName;
         this.threadRejectMetricsCountSampler=sampler;
+        this.threadRejectMetricsCountSampler.addMetricName(threadPoolExecutorName);
     }
     @Override
     public void onEvent(ThreadPoolExhaustedEvent event) {
-        threadRejectMetricsCountSampler.addMetricName(threadPoolExecutorName);
         threadRejectMetricsCountSampler.inc(threadPoolExecutorName,threadPoolExecutorName);
     }
 }

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/ThreadRejectMetricsCountSampler.java
Patch:
@@ -32,6 +32,7 @@ public class ThreadRejectMetricsCountSampler extends MetricsNameCountSampler<Str
 
     public ThreadRejectMetricsCountSampler(DefaultMetricsCollector collector) {
         super(collector, THREAD_POOL,MetricsKey.THREAD_POOL_THREAD_REJECT_COUNT);
+        this.initMetricsCounter(name,name);
     }
 
     @Override

File: dubbo-metrics/dubbo-metrics-event/src/main/java/org/apache/dubbo/metrics/listener/MetricsListener.java
Patch:
@@ -35,5 +35,4 @@ public interface MetricsListener<E extends MetricsEvent> {
      */
     void onEvent(E event);
 
-
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/DynamicDirectory.java
Patch:
@@ -195,7 +195,7 @@ public List<Invoker<T>> doList(SingleRouterChain<T> singleRouterChain,
         if (forbidden && shouldFailFast) {
             // 1. No service provider 2. Service providers are disabled
             throw new RpcException(RpcException.FORBIDDEN_EXCEPTION, "No provider available from registry " +
-                getUrl().getAddress() + " for service " + getConsumerUrl().getServiceKey() + " on consumer " +
+                this + " for service " + getConsumerUrl().getServiceKey() + " on consumer " +
                 NetUtils.getLocalHost() + " use dubbo version " + Version.getVersion() +
                 ", please check status of providers(disabled, not registered or in blacklist).");
         }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeClient.java
Patch:
@@ -248,8 +248,8 @@ private long calculateReconnectDuration(URL url, long tick) {
         return Math.max(leastReconnectDuration, tick);
     }
 
-    private boolean shouldReconnect(URL url) {
-        return url.getParameter(Constants.RECONNECT_KEY, true);
+    protected boolean shouldReconnect(URL url) {
+        return !Boolean.FALSE.toString().equalsIgnoreCase(url.getParameter(Constants.RECONNECT_KEY));
     }
 
     @Override

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -60,7 +60,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_AVAILABLE_CHECK_KEY;
-import static org.apache.dubbo.rpc.cluster.Constants.INVOCATION_NEED_MOCK;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.ArgumentMatchers.same;

File: dubbo-metrics/dubbo-metrics-event/src/main/java/org/apache/dubbo/metrics/event/TimeCounterEvent.java
Patch:
@@ -33,7 +33,7 @@ public TimeCounterEvent(ApplicationModel source, TypeWrapper typeWrapper) {
         this.timePair = TimePair.start();
     }
 
-    public TimeCounterEvent(ApplicationModel source, String appName, MetricsDispatcher metricsDispatcher, TypeWrapper typeWrapper) {
+    public TimeCounterEvent(ApplicationModel source, String appName,MetricsEventMulticaster metricsDispatcher, TypeWrapper typeWrapper) {
         super(source, appName, metricsDispatcher, typeWrapper);
         this.timePair = TimePair.start();
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -128,6 +128,8 @@ public interface CommonConstants {
 
     String THREAD_POOL_EXHAUSTED_LISTENERS_KEY = "thread-pool-exhausted-listeners";
 
+    String JSON_CHECK_LEVEL_KEY = "jsonCheckLevel";
+
     String THREADS_KEY = "threads";
 
     String QUEUES_KEY = "queues";

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/MethodMetricsCollector.java
Patch:
@@ -30,5 +30,7 @@ public interface MethodMetricsCollector<E extends TimeCounterEvent> extends Metr
     void increment(MethodMetric methodMetric, MetricsKeyWrapper wrapper, int size);
 
     void addMethodRt(Invocation invocation, String registryOpType, Long responseTime);
+
+    void init(Invocation invocation, MetricsKeyWrapper wrapper);
 }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/MetricsCollector.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.metrics.collector;
 
 import org.apache.dubbo.common.extension.SPI;
+import org.apache.dubbo.metrics.event.MetricsEvent;
 import org.apache.dubbo.metrics.event.TimeCounterEvent;
 import org.apache.dubbo.metrics.listener.MetricsLifeListener;
 import org.apache.dubbo.metrics.model.sample.MetricSample;
@@ -42,4 +43,6 @@ default boolean isCollectEnabled() {
      */
     List<MetricSample> collect();
 
+    default  void initMetrics(MetricsEvent event) {};
+
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/SimpleMetricsEventMulticaster.java
Patch:
@@ -43,6 +43,7 @@ public void publishEvent(MetricsEvent event) {
         if (event instanceof EmptyEvent) {
             return;
         }
+
         if (validateIfApplicationConfigExist(event)) return;
         for (MetricsListener listener : listeners) {
             if (listener.isSupport(event)) {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/listener/MetricsListener.java
Patch:
@@ -35,5 +35,4 @@ public interface MetricsListener<E extends MetricsEvent> {
      */
     void onEvent(E event);
 
-
 }

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/MetricThreadPoolExhaustedListener.java
Patch:
@@ -34,10 +34,10 @@ public MetricThreadPoolExhaustedListener(String threadPoolExecutorName,DefaultMe
     public MetricThreadPoolExhaustedListener(String threadPoolExecutorName,ThreadRejectMetricsCountSampler sampler) {
         this.threadPoolExecutorName=threadPoolExecutorName;
         this.threadRejectMetricsCountSampler=sampler;
+        this.threadRejectMetricsCountSampler.addMetricName(threadPoolExecutorName);
     }
     @Override
     public void onEvent(ThreadPoolExhaustedEvent event) {
-        threadRejectMetricsCountSampler.addMetricName(threadPoolExecutorName);
         threadRejectMetricsCountSampler.inc(threadPoolExecutorName,threadPoolExecutorName);
     }
 }

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/ThreadRejectMetricsCountSampler.java
Patch:
@@ -43,6 +43,7 @@ public ThreadRejectMetricsCountSampler(DefaultMetricsCollector collector) {
 
     public void addMetricName(String name){
         this.metricNames.add(name);
+        this.initMetricsCounter(name,name);
     }
 
     @Override

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeClient.java
Patch:
@@ -248,8 +248,8 @@ private long calculateReconnectDuration(URL url, long tick) {
         return Math.max(leastReconnectDuration, tick);
     }
 
-    private boolean shouldReconnect(URL url) {
-        return url.getParameter(Constants.RECONNECT_KEY, true);
+    protected boolean shouldReconnect(URL url) {
+        return !Boolean.FALSE.toString().equalsIgnoreCase(url.getParameter(Constants.RECONNECT_KEY));
     }
 
     @Override

File: dubbo-plugin/dubbo-plugin-context/src/main/java/org/apache/dubbo/rpc/cluster/filter/support/CallbackConsumerContextFilter.java
Patch:
@@ -14,11 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.monitor.support;
+package org.apache.dubbo.rpc.cluster.filter.support;
 
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.rpc.Filter;
-import org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import static org.apache.dubbo.common.constants.CommonConstants.CALLBACK;
@@ -30,7 +29,7 @@
  */
 @Activate(group = CALLBACK, order = Integer.MIN_VALUE)
 public class CallbackConsumerContextFilter extends ConsumerContextFilter implements Filter {
-    
+
     public CallbackConsumerContextFilter(ApplicationModel applicationModel) {
         super(applicationModel);
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/DefaultSerializeClassChecker.java
Patch:
@@ -159,7 +159,7 @@ private Class<?> loadClass0(ClassLoader classLoader, String className) throws Cl
                     "Current mode is `WARN`, will disallow to deserialize it by default. " +
                     "Please add it into security/serialize.allowlist or follow FAQ to configure it.";
                 if (serializeSecurityManager.getWarnedClasses().add(className)) {
-                    logger.error(PROTOCOL_UNTRUSTED_SERIALIZE_CLASS, "", "", msg);
+                    logger.warn(PROTOCOL_UNTRUSTED_SERIALIZE_CLASS, "", "", msg);
                 }
 
                 throw new IllegalArgumentException(msg);
@@ -180,7 +180,7 @@ private Class<?> loadClass0(ClassLoader classLoader, String className) throws Cl
                     "Current mode is `WARN`, will disallow to deserialize it by default. " +
                     "Please add it into security/serialize.allowlist or follow FAQ to configure it.";
                 if (serializeSecurityManager.getWarnedClasses().add(className)) {
-                    logger.error(PROTOCOL_UNTRUSTED_SERIALIZE_CLASS, "", "", msg);
+                    logger.warn(PROTOCOL_UNTRUSTED_SERIALIZE_CLASS, "", "", msg);
                 }
 
                 throw new IllegalArgumentException(msg);
@@ -189,7 +189,7 @@ private Class<?> loadClass0(ClassLoader classLoader, String className) throws Cl
 
         Class<?> clazz = ClassUtils.forName(className, classLoader);
         if (serializeSecurityManager.getWarnedClasses().add(className)) {
-            logger.error(PROTOCOL_UNTRUSTED_SERIALIZE_CLASS, "", "",
+            logger.warn(PROTOCOL_UNTRUSTED_SERIALIZE_CLASS, "", "",
                 "[Serialization Security] Serialized class " + className + " is not in allow list. " +
                     "Current mode is `WARN`, will allow to deserialize it by default. " +
                     "Dubbo will set to `STRICT` mode by default in the future. " +

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ModelConstants.java
Patch:
@@ -24,4 +24,6 @@ public interface ModelConstants {
      * Keep Dubbo running when spring is stopped
      */
     String KEEP_RUNNING_ON_SPRING_CLOSED = "keepRunningOnSpringClosed";
+
+    String KEEP_RUNNING_ON_SPRING_CLOSED_KEY = "dubbo.module.keepRunningOnSpringClosed";
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -463,7 +463,7 @@ private T createProxy(Map<String, String> referenceParameters) {
 
         if (logger.isInfoEnabled()) {
             logger.info("Referred dubbo service: [" + referenceParameters.get(INTERFACE_KEY) + "]." +
-                    (Boolean.parseBoolean(referenceParameters.get(GENERIC_KEY)) ?
+                    (ProtocolUtils.isGeneric(referenceParameters.get(GENERIC_KEY)) ?
                             " it's GenericService reference" : " it's not GenericService reference"));
         }
 

File: dubbo-metadata/dubbo-metadata-rest/src/main/java/org/apache/dubbo/metadata/rest/jaxrs/JAXRSServiceRestMetadataResolver.java
Patch:
@@ -49,7 +49,9 @@ public JAXRSServiceRestMetadataResolver(ApplicationModel applicationModel) {
 
     @Override
     protected boolean supports0(Class<?> serviceType) {
-        return isAnnotationPresent(serviceType, PATH_ANNOTATION_CLASS_NAME);
+        return isAnnotationPresent(serviceType, PATH_ANNOTATION_CLASS_NAME)
+            // method @Path
+            || isServiceMethodAnnotationPresent(serviceType,PATH_ANNOTATION_CLASS_NAME);
     }
 
     @Override

File: dubbo-metadata/dubbo-metadata-rest/src/main/java/org/apache/dubbo/metadata/rest/springmvc/SpringMvcServiceRestMetadataResolver.java
Patch:
@@ -41,6 +41,7 @@
 import static org.apache.dubbo.metadata.rest.RestMetadataConstants.SPRING_MVC.CONTROLLER_ANNOTATION_CLASS;
 import static org.apache.dubbo.metadata.rest.RestMetadataConstants.SPRING_MVC.FEIGN_CLIENT_CLASS;
 import static org.apache.dubbo.metadata.rest.RestMetadataConstants.SPRING_MVC.REQUEST_MAPPING_ANNOTATION_CLASS;
+import static org.apache.dubbo.metadata.rest.RestMetadataConstants.SPRING_MVC.REQUEST_MAPPING_ANNOTATION_CLASS_NAME;
 
 /**
  * {@link ServiceRestMetadataResolver}
@@ -61,7 +62,8 @@ protected boolean supports0(Class<?> serviceType) {
         // class @Controller or @RequestMapping
         return isAnnotationPresent(serviceType, CONTROLLER_ANNOTATION_CLASS)
             || isAnnotationPresent(serviceType, FEIGN_CLIENT_CLASS)
-            || isAnnotationPresent(serviceType, REQUEST_MAPPING_ANNOTATION_CLASS);
+            || isAnnotationPresent(serviceType, REQUEST_MAPPING_ANNOTATION_CLASS)// method @RequestMapping
+            || isServiceMethodAnnotationPresent(serviceType, REQUEST_MAPPING_ANNOTATION_CLASS_NAME);
     }
 
     @Override

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/listener/AbstractMetricsKeyListener.java
Patch:
@@ -27,6 +27,7 @@
 /**
  * According to the event template of {@link MetricsEventBus},
  * build a consistent static method for general and custom monitoring consume methods
+ *
  */
 public abstract class AbstractMetricsKeyListener extends AbstractMetricsListener<TimeCounterEvent> implements MetricsLifeListener<TimeCounterEvent> {
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/listener/AbstractMetricsListener.java
Patch:
@@ -28,7 +28,7 @@ public abstract class AbstractMetricsListener<E extends MetricsEvent> implements
     private final Map<Integer, Boolean> eventMatchCache = new ConcurrentHashMap<>();
 
     /**
-     * Whether to support the general determination of event points depends on the event type
+     * Only interested in events of the current listener's generic parameter type
      */
     public boolean isSupport(MetricsEvent event) {
         Boolean eventMatch = eventMatchCache.get(System.identityHashCode(event.getClass()));

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/MetricsCat.java
Patch:
@@ -43,7 +43,7 @@ public MetricsCat(MetricsKey metricsKey, BiFunction<MetricsKey, CombMetricsColle
     }
 
     /**
-     * @param tpFunc   Ternary function, corresponding to finish and error events, because an additional record rt is required, and the type type of metricsKey is required
+     * @param tpFunc   Ternary function, corresponding to finish and error events, because an additional record rt is required, and the type of metricsKey is required
      */
     public MetricsCat(MetricsKey metricsKey, TpFunction<MetricsKey, MetricsPlaceValue, CombMetricsCollector, AbstractMetricsKeyListener> tpFunc) {
         this.eventFunc = collector -> tpFunc.apply(metricsKey, placeType, collector);

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/MetricsLevel.java
Patch:
@@ -18,5 +18,5 @@
 package org.apache.dubbo.metrics.model.key;
 
 public enum MetricsLevel {
-    APP, SERVICE, METHOD, CONFIG
+    APP, SERVICE, METHOD, CONFIG, REGISTRY
 }

File: dubbo-metrics/dubbo-metrics-prometheus/src/test/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsReporterTest.java
Patch:
@@ -80,7 +80,7 @@ void testJvmMetrics() {
         Double d2 = prometheusRegistry.getPrometheusRegistry().getSampleValue("jvm_gc_memory_promoted_bytes_total",
             new String[]{"application_name"}, new String[]{name});
         Assertions.assertNull(d1);
-        Assertions.assertNotNull(d2);
+        Assertions.assertNull(d2);
     }
 
     @Test

File: dubbo-plugin/dubbo-plugin-generic-invoke/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java
Patch:
@@ -208,6 +208,9 @@ public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {
 
     private Object[] getGsonGenericArgs(final Object[] args, Type[] types) {
         return IntStream.range(0, args.length).mapToObj(i -> {
+            if (args[i] == null) {
+                return null;
+            }
             if (!(args[i] instanceof String)) {
                 throw new RpcException("When using GSON to deserialize generic dubbo request arguments, the arguments must be of type String");
             }

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/GracefulShutdown.java
Patch:
@@ -37,11 +37,11 @@ public GracefulShutdown(FrameworkModel frameworkModel) {
 
     @Override
     public String execute(CommandContext commandContext, String[] args) {
-        offline.execute(commandContext, new String[0]);
         for (org.apache.dubbo.rpc.GracefulShutdown gracefulShutdown :
             org.apache.dubbo.rpc.GracefulShutdown.getGracefulShutdowns(frameworkModel)) {
             gracefulShutdown.readonly();
         }
+        offline.execute(commandContext, new String[0]);
         return "OK";
     }
 }

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/rest/TestGetInvokerServiceImpl.java
Patch:
@@ -31,6 +31,7 @@ public class TestGetInvokerServiceImpl implements TestGetInvokerService {
     @Override
     public String getInvoker() {
         Object request = RpcContext.getServiceContext().getRequest();
+        RequestFacade requestFacade = (RequestFacade) request;
         Invoker invokerByRequest = RestRPCInvocationUtil.getInvokerByRequest((RequestFacade) request);
 
 
@@ -44,9 +45,9 @@ public String getInvoker() {
 
         }
 
-        Invoker invokerByServiceInvokeMethod = RestRPCInvocationUtil.getInvokerByServiceInvokeMethod(hello);
+        Invoker invokerByServiceInvokeMethod = RestRPCInvocationUtil.getInvokerByServiceInvokeMethod(hello,requestFacade.getServiceDeployer());
 
-        Invoker invoker = RestRPCInvocationUtil.getInvokerByServiceInvokeMethod(hashcode);
+        Invoker invoker = RestRPCInvocationUtil.getInvokerByServiceInvokeMethod(hashcode,requestFacade.getServiceDeployer());
 
 
         Assertions.assertEquals(invokerByRequest, invokerByServiceInvokeMethod);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/TripleClientCall.java
Patch:
@@ -188,7 +188,7 @@ public void sendMessage(Object message) {
         } catch (Throwable t) {
             LOGGER.error(PROTOCOL_FAILED_SERIALIZE_TRIPLE, "", "", String.format("Serialize triple request failed, service=%s method=%s",
                 requestMetadata.service,
-                requestMetadata.method), t);
+                requestMetadata.method.getMethodName()), t);
             cancelByLocal(t);
             listener.onClose(TriRpcStatus.INTERNAL.withDescription("Serialize request failed")
                 .withCause(t), null, false);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/frame/TriDecoder.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.dubbo.rpc.protocol.tri.frame;
 
-import org.apache.dubbo.rpc.RpcException;
-import org.apache.dubbo.rpc.protocol.tri.compressor.DeCompressor;
-
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.CompositeByteBuf;
 import io.netty.buffer.Unpooled;
+import org.apache.dubbo.rpc.RpcException;
+import org.apache.dubbo.rpc.protocol.tri.compressor.DeCompressor;
 
 public class TriDecoder implements Deframer {
 
@@ -152,6 +151,7 @@ private byte[] getCompressedBody() {
     private byte[] getUncompressedBody() {
         byte[] data = new byte[requiredLength];
         accumulate.readBytes(data);
+        accumulate.discardReadComponents();
         return data;
     }
 

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/test/java/org/apache/dubbo/spring/boot/env/DubboDefaultPropertiesEnvironmentPostProcessorTest.java
Patch:
@@ -53,7 +53,7 @@ public void testPostProcessEnvironment() {
         PropertySource defaultPropertySource = propertySources.get("defaultProperties");
         Assert.assertNotNull(defaultPropertySource);
         Assert.assertEquals("true", defaultPropertySource.getProperty("dubbo.config.multiple"));
-        Assert.assertEquals("true", defaultPropertySource.getProperty("dubbo.application.qos-enable"));
+        // Assert.assertEquals("true", defaultPropertySource.getProperty("dubbo.application.qos-enable"));
 
         // Case 2 :  Only set property "spring.application.name"
         environment.setProperty("spring.application.name", "demo-dubbo-application");

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/netty/RestHttpRequestDecoder.java
Patch:
@@ -60,7 +60,7 @@ public RestHttpRequestDecoder(URL url, ServiceDeployer serviceDeployer) {
     protected void decode(ChannelHandlerContext ctx, io.netty.handler.codec.http.FullHttpRequest request, List<Object> out) throws Exception {
         boolean keepAlive = HttpHeaders.isKeepAlive(request);
 
-        NettyHttpResponse nettyHttpResponse = new NettyHttpResponse(ctx, keepAlive);
+        NettyHttpResponse nettyHttpResponse = new NettyHttpResponse(ctx, keepAlive,url);
         NettyRequestFacade requestFacade = new NettyRequestFacade(request, ctx,serviceDeployer);
 
         executor.execute(() -> {

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -643,7 +643,6 @@ public interface CommonConstants {
 
     String DUBBO_PACKABLE_METHOD_FACTORY = "dubbo.application.parameters." + PACKABLE_METHOD_FACTORY_KEY;
 
-    String SERVICE_DEPLOYER_ATTRIBUTE_KEY = "serviceDeployer";
     String RESTEASY_NETTY_HTTP_REQUEST_ATTRIBUTE_KEY = "resteasyNettyHttpRequest";
 
     String DUBBO_MANUAL_REGISTER_KEY = "dubbo.application.manual-register";

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/netty/RestHttpRequestDecoder.java
Patch:
@@ -61,7 +61,7 @@ protected void decode(ChannelHandlerContext ctx, io.netty.handler.codec.http.Ful
         boolean keepAlive = HttpHeaders.isKeepAlive(request);
 
         NettyHttpResponse nettyHttpResponse = new NettyHttpResponse(ctx, keepAlive);
-        NettyRequestFacade requestFacade = new NettyRequestFacade(request, ctx);
+        NettyRequestFacade requestFacade = new NettyRequestFacade(request, ctx,serviceDeployer);
 
         executor.execute(() -> {
 

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/rest/TestGetInvokerServiceImpl.java
Patch:
@@ -31,6 +31,7 @@ public class TestGetInvokerServiceImpl implements TestGetInvokerService {
     @Override
     public String getInvoker() {
         Object request = RpcContext.getServiceContext().getRequest();
+        RequestFacade requestFacade = (RequestFacade) request;
         Invoker invokerByRequest = RestRPCInvocationUtil.getInvokerByRequest((RequestFacade) request);
 
 
@@ -44,9 +45,9 @@ public String getInvoker() {
 
         }
 
-        Invoker invokerByServiceInvokeMethod = RestRPCInvocationUtil.getInvokerByServiceInvokeMethod(hello);
+        Invoker invokerByServiceInvokeMethod = RestRPCInvocationUtil.getInvokerByServiceInvokeMethod(hello,requestFacade.getServiceDeployer());
 
-        Invoker invoker = RestRPCInvocationUtil.getInvokerByServiceInvokeMethod(hashcode);
+        Invoker invoker = RestRPCInvocationUtil.getInvokerByServiceInvokeMethod(hashcode,requestFacade.getServiceDeployer());
 
 
         Assertions.assertEquals(invokerByRequest, invokerByServiceInvokeMethod);

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/test/java/org/apache/dubbo/spring/boot/env/DubboDefaultPropertiesEnvironmentPostProcessorTest.java
Patch:
@@ -53,7 +53,7 @@ public void testPostProcessEnvironment() {
         PropertySource defaultPropertySource = propertySources.get("defaultProperties");
         Assert.assertNotNull(defaultPropertySource);
         Assert.assertEquals("true", defaultPropertySource.getProperty("dubbo.config.multiple"));
-        Assert.assertEquals("true", defaultPropertySource.getProperty("dubbo.application.qos-enable"));
+        // Assert.assertEquals("true", defaultPropertySource.getProperty("dubbo.application.qos-enable"));
 
         // Case 2 :  Only set property "spring.application.name"
         environment.setProperty("spring.application.name", "demo-dubbo-application");

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -190,7 +190,7 @@ public boolean isUnexported() {
     }
 
     @Override
-    public void unexport() {
+    public synchronized void unexport() {
         if (!exported) {
             return;
         }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboDeployApplicationListener.java
Patch:
@@ -182,7 +182,7 @@ private void onContextClosedEvent(ContextClosedEvent event) {
 
     @Override
     public int getOrder() {
-        return HIGHEST_PRECEDENCE;
+        return LOWEST_PRECEDENCE;
     }
 
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -462,7 +462,7 @@ private T createProxy(Map<String, String> referenceParameters) {
 
         if (logger.isInfoEnabled()) {
             logger.info("Referred dubbo service: [" + referenceParameters.get(INTERFACE_KEY) + "]." +
-                    (Boolean.parseBoolean(referenceParameters.get(GENERIC_KEY)) ?
+                    (ProtocolUtils.isGeneric(referenceParameters.get(GENERIC_KEY)) ?
                             " it's GenericService reference" : " it's not GenericService reference"));
         }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/MetricsConstants.java
Patch:
@@ -47,6 +47,8 @@ public interface MetricsConstants {
     
     String TAG_CHANGE_TYPE = "change.type";
 
+    String TAG_ERROR_CODE = "error";
+
     String ENABLE_JVM_METRICS_KEY = "enable.jvm";
 
     String AGGREGATION_COLLECTOR_KEY = "aggregation";

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MetricsCategory.java
Patch:
@@ -29,5 +29,6 @@ public enum MetricsCategory {
     REGISTRY,
     METADATA,
     THREAD_POOL,
+    ERROR_CODE,
     NETTY,
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/ThreadPoolMetric.java
Patch:
@@ -85,6 +85,7 @@ public int hashCode() {
         return Objects.hash(applicationName, threadPoolName);
     }
 
+    @Override
     public Map<String, String> getTags() {
         Map<String, String> tags = new HashMap<>();
         tags.put(TAG_IP, getLocalHost());

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/ThreadPoolRejectMetric.java
Patch:
@@ -30,6 +30,7 @@
 import static org.apache.dubbo.common.constants.MetricsConstants.TAG_IP;
 
 public class ThreadPoolRejectMetric implements Metric{
+
     private String applicationName;
 
     private String threadPoolName;
@@ -69,6 +70,7 @@ public int hashCode() {
         return Objects.hash(applicationName, threadPoolName);
     }
 
+    @Override
     public Map<String, String> getTags() {
         Map<String, String> tags = new HashMap<>();
         tags.put(TAG_IP, getLocalHost());

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/MetricsKey.java
Patch:
@@ -124,6 +124,9 @@ public enum MetricsKey {
     // consumer metrics key
     INVOKER_NO_AVAILABLE_COUNT("dubbo.consumer.invoker.no.available.count", "Request Throw No Invoker Available Exception Count"),
 
+    // count the number of occurrences of each error code
+    ERROR_CODE_COUNT("dubbo.error.code.count","The Count Of Occurrences for Each Error Code"),
+
     // netty metrics key
     NETTY_ALLOCATOR_HEAP_MEMORY_USED("netty.allocator.memory.used", "Netty Allocator Memory Used"),
     NETTY_ALLOCATOR_DIRECT_MEMORY_USED("netty.allocator.direct.memory.used", "Netty Allocator Direct Memory Used"),

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/SimpleMetricsCountSampler.java
Patch:
@@ -36,6 +36,7 @@ public abstract class SimpleMetricsCountSampler<S, K, M extends Metric>
     implements MetricsCountSampler<S, K, M> {
 
     private final ConcurrentMap<M, AtomicLong> EMPTY_COUNT = new ConcurrentHashMap<>();
+
     private final Map<K, ConcurrentMap<M, AtomicLong>> metricCounter = new ConcurrentHashMap<>();
 
     @Override

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/event/DefaultSubDispatcher.java
Patch:
@@ -96,6 +96,7 @@ private CategoryOverall initMethodRequest() {
                             MetricsSupport.incrAndAddRt(targetKey, dynamicPlaceType, (MethodMetricsCollector) collector, event);
                         }
                 )));
+
     }
 
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -32,6 +32,8 @@ public interface CommonConstants {
     String PROVIDER = "provider";
 
     String CONSUMER = "consumer";
+    
+    String CALLBACK = "callback";
 
     String APPLICATION_KEY = "application";
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/frame/TriDecoder.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.dubbo.rpc.protocol.tri.frame;
 
-import org.apache.dubbo.rpc.RpcException;
-import org.apache.dubbo.rpc.protocol.tri.compressor.DeCompressor;
-
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.CompositeByteBuf;
 import io.netty.buffer.Unpooled;
+import org.apache.dubbo.rpc.RpcException;
+import org.apache.dubbo.rpc.protocol.tri.compressor.DeCompressor;
 
 public class TriDecoder implements Deframer {
 
@@ -152,6 +151,7 @@ private byte[] getCompressedBody() {
     private byte[] getUncompressedBody() {
         byte[] data = new byte[requiredLength];
         accumulate.readBytes(data);
+        accumulate.discardReadComponents();
         return data;
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/TripleClientCall.java
Patch:
@@ -188,7 +188,7 @@ public void sendMessage(Object message) {
         } catch (Throwable t) {
             LOGGER.error(PROTOCOL_FAILED_SERIALIZE_TRIPLE, "", "", String.format("Serialize triple request failed, service=%s method=%s",
                 requestMetadata.service,
-                requestMetadata.method), t);
+                requestMetadata.method.getMethodName()), t);
             cancelByLocal(t);
             listener.onClose(TriRpcStatus.INTERNAL.withDescription("Serialize request failed")
                 .withCause(t), null, false);

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -241,6 +241,8 @@ public interface CommonConstants {
 
     String INTERFACE_REGISTER_MODE = "interface";
 
+    String INSTANCE_REGISTER_MODE = "instance";
+
     String DEFAULT_REGISTER_MODE = "all";
 
     String GENERIC_KEY = "generic";

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/listener/AbstractMetricsKeyListener.java
Patch:
@@ -27,6 +27,7 @@
 /**
  * According to the event template of {@link MetricsEventBus},
  * build a consistent static method for general and custom monitoring consume methods
+ *
  */
 public abstract class AbstractMetricsKeyListener extends AbstractMetricsListener<TimeCounterEvent> implements MetricsLifeListener<TimeCounterEvent> {
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/listener/AbstractMetricsListener.java
Patch:
@@ -28,7 +28,7 @@ public abstract class AbstractMetricsListener<E extends MetricsEvent> implements
     private final Map<Integer, Boolean> eventMatchCache = new ConcurrentHashMap<>();
 
     /**
-     * Whether to support the general determination of event points depends on the event type
+     * Only interested in events of the current listener's generic parameter type
      */
     public boolean isSupport(MetricsEvent event) {
         Boolean eventMatch = eventMatchCache.get(System.identityHashCode(event.getClass()));

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/MetricsCat.java
Patch:
@@ -43,7 +43,7 @@ public MetricsCat(MetricsKey metricsKey, BiFunction<MetricsKey, CombMetricsColle
     }
 
     /**
-     * @param tpFunc   Ternary function, corresponding to finish and error events, because an additional record rt is required, and the type type of metricsKey is required
+     * @param tpFunc   Ternary function, corresponding to finish and error events, because an additional record rt is required, and the type of metricsKey is required
      */
     public MetricsCat(MetricsKey metricsKey, TpFunction<MetricsKey, MetricsPlaceValue, CombMetricsCollector, AbstractMetricsKeyListener> tpFunc) {
         this.eventFunc = collector -> tpFunc.apply(metricsKey, placeType, collector);

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/MetricsLevel.java
Patch:
@@ -18,5 +18,5 @@
 package org.apache.dubbo.metrics.model.key;
 
 public enum MetricsLevel {
-    APP, SERVICE, METHOD, CONFIG
+    APP, SERVICE, METHOD, CONFIG, REGISTRY
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/support/MetricsClusterFilter.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.metrics.collector.DefaultMetricsCollector;
 import org.apache.dubbo.metrics.event.MetricsDispatcher;
 import org.apache.dubbo.metrics.event.MetricsEventBus;
-import org.apache.dubbo.metrics.event.RequestBeforeEvent;
+import org.apache.dubbo.metrics.event.RequestEvent;
 import org.apache.dubbo.rpc.BaseFilter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
@@ -73,7 +73,7 @@ private void handleMethodException(Throwable t, Invocation invocation) {
         if (t instanceof RpcException) {
             RpcException e = (RpcException) t;
             if (e.isForbidden()) {
-                MetricsEventBus.publish(RequestBeforeEvent.toEvent(applicationModel, appName, metricsDispatcher, invocation, CONSUMER_SIDE));
+                MetricsEventBus.publish(RequestEvent.toRequestErrorEvent(applicationModel, appName, metricsDispatcher, invocation, CONSUMER_SIDE, e.getCode()));
             }
         }
     }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/MetricsConstants.java
Patch:
@@ -22,8 +22,8 @@ public interface MetricsConstants {
     String INVOCATION = "metric_filter_invocation";
     String METHOD_METRICS = "metric_filter_method_metrics";
     String INVOCATION_METRICS_COUNTER = "metric_filter_invocation_counter";
-
     String INVOCATION_SIDE = "metric_filter_side";
+    String INVOCATION_REQUEST_ERROR  = "metric_request_error";
 
     String ATTACHMENT_KEY_SERVICE = "serviceKey";
     String ATTACHMENT_KEY_SIZE = "size";

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/DefaultMetricsCollector.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.dubbo.metrics.data.RtStatComposite;
 import org.apache.dubbo.metrics.event.DefaultSubDispatcher;
 import org.apache.dubbo.metrics.event.MetricsEvent;
-import org.apache.dubbo.metrics.event.RequestBeforeEvent;
 import org.apache.dubbo.metrics.event.RequestEvent;
 import org.apache.dubbo.metrics.model.ApplicationMetric;
 import org.apache.dubbo.metrics.model.MetricsCategory;
@@ -138,7 +137,7 @@ public List<MetricSample> collect() {
 
     @Override
     public boolean isSupport(MetricsEvent event) {
-        return event instanceof RequestEvent || event instanceof RequestBeforeEvent;
+        return event instanceof RequestEvent;
     }
 
     public SimpleMetricsCountSampler<String, MetricsEvent.Type, ApplicationMetric> applicationSampler = new SimpleMetricsCountSampler<String, MetricsEvent.Type, ApplicationMetric>() {

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/collector/AggregateMetricsCollectorTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.dubbo.metrics.aggregate.TimeWindowCounter;
 import org.apache.dubbo.metrics.event.MetricsDispatcher;
 import org.apache.dubbo.metrics.event.MetricsEventBus;
-import org.apache.dubbo.metrics.event.RequestBeforeEvent;
 import org.apache.dubbo.metrics.event.RequestEvent;
 import org.apache.dubbo.metrics.filter.MetricsFilter;
 import org.apache.dubbo.metrics.listener.MetricsListener;
@@ -143,9 +142,10 @@ public void setup() {
     void testListener() {
         AggregateMetricsCollector metricsCollector = new AggregateMetricsCollector(applicationModel);
         RequestEvent event = RequestEvent.toRequestEvent(applicationModel, null, null, null, invocation, MetricsSupport.getSide(invocation));
-        RequestBeforeEvent beforeEvent = new RequestBeforeEvent(applicationModel, null, null, new TypeWrapper(MetricsLevel.METHOD, MetricsKey.METRIC_REQUESTS));
+        RequestEvent beforeEvent = RequestEvent.toRequestErrorEvent(applicationModel, null, null, invocation, MetricsSupport.getSide(invocation), RpcException.FORBIDDEN_EXCEPTION);
+
         Assertions.assertTrue(metricsCollector.isSupport(event));
-        Assertions.assertFalse(metricsCollector.isSupport(beforeEvent));
+        Assertions.assertTrue(metricsCollector.isSupport(beforeEvent));
     }
 
     @AfterEach

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/collector/DefaultCollectorTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.metrics.TestMetricsInvoker;
 import org.apache.dubbo.metrics.event.MetricsDispatcher;
-import org.apache.dubbo.metrics.event.RequestBeforeEvent;
 import org.apache.dubbo.metrics.event.RequestEvent;
 import org.apache.dubbo.metrics.filter.MetricsFilter;
 import org.apache.dubbo.metrics.model.MetricsSupport;
@@ -114,7 +113,8 @@ public void setup() {
     void testListener() {
         DefaultMetricsCollector metricsCollector = new DefaultMetricsCollector(applicationModel);
         RequestEvent event = RequestEvent.toRequestEvent(applicationModel, null, null, null, invocation, MetricsSupport.getSide(invocation));
-        RequestBeforeEvent beforeEvent = new RequestBeforeEvent(applicationModel, null, null, new TypeWrapper(MetricsLevel.METHOD, MetricsKey.METRIC_REQUESTS));
+        RequestEvent beforeEvent = RequestEvent.toRequestErrorEvent(applicationModel, null, null, invocation, MetricsSupport.getSide(invocation), RpcException.FORBIDDEN_EXCEPTION);
+
         Assertions.assertTrue(metricsCollector.isSupport(event));
         Assertions.assertTrue(metricsCollector.isSupport(beforeEvent));
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboContextPostProcessor.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.config.spring.util.EnvironmentUtils;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
+
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
@@ -59,7 +60,7 @@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
         // Extract dubbo props from Spring env and put them to app config
         ConfigurableEnvironment environment = (ConfigurableEnvironment) applicationContext.getEnvironment();
         SortedMap<String, String> dubboProperties = EnvironmentUtils.filterDubboProperties(environment);
-        applicationModel.getModelEnvironment().setAppConfigMap(dubboProperties);
+        applicationModel.getModelEnvironment().getAppConfigMap().putAll(dubboProperties);
 
         // register ConfigManager singleton
         beanFactory.registerSingleton(ConfigManager.BEAN_NAME, applicationModel.getApplicationConfigManager());

File: dubbo-native/src/main/java/org/apache/dubbo/aot/generate/JarScanner.java
Patch:
@@ -139,7 +139,6 @@ private boolean matchedDubboClasses(String path) {
     }
 
     private String toClassName(String path) {
-        return path.substring(0, path.length() - 6).replace(File.separator, ".");
+        return path.contains(File.separator) ? path.substring(0, path.length() - 6).replace(File.separator, ".") : path.substring(0, path.length() - 6).replace("/", ".");
     }
-
 }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/deploy/ServiceDeployerManager.java
Patch:
@@ -50,7 +50,7 @@ public static URL deploy(final URL currentURL, ServiceRestMetadata serviceRestMe
         newServiceDeployer.deploy(serviceRestMetadata, invoker);
 
         // register exception mapper
-        newServiceDeployer.registerExceptionMapper(currentURL);
+        newServiceDeployer.registerExtension(currentURL);
 
         // not new URL
         if (!isNewCreate.get()) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -514,8 +514,7 @@ private void doExportUrls(RegisterTypeEnum registerType) {
         List<URL> registryURLs = !Boolean.FALSE.equals(isRegister()) ?
             ConfigValidationUtils.loadRegistries(this, true) : Collections.emptyList();
 
-        MetricsEventBus.post(RegistryEvent.toRsEvent(module.getApplicationModel(), getUniqueServiceName(), protocols.size() * registryURLs.size()),
-            () -> {
+        MetricsEventBus.post(RegistryEvent.toRsEvent(getApplicationModel(), getUniqueServiceName(), protocols.size() * registryURLs.size()),            () -> {
                 for (ProtocolConfig protocolConfig : protocols) {
                     String pathKey = URL.buildKey(getContextPath(protocolConfig)
                         .map(p -> p + "/" + path)

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/reference/ReferenceBeanManager.java
Patch:
@@ -189,6 +189,7 @@ private synchronized void initReferenceBean(ReferenceBean referenceBean) throws
 
             // register ReferenceConfig
             moduleModel.getConfigManager().addReference(referenceConfig);
+            moduleModel.getDeployer().setPending();
         }
 
         // associate referenceConfig to referenceBean

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/MetricsConstants.java
Patch:
@@ -20,6 +20,7 @@
 public interface MetricsConstants {
 
     String INVOCATION = "metric_filter_invocation";
+    String METHOD_METRICS = "metric_filter_method_metrics";
     String INVOCATION_METRICS_COUNTER = "metric_filter_invocation_counter";
 
     String INVOCATION_SIDE = "metric_filter_side";

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/ApplicationMetricsCollector.java
Patch:
@@ -30,7 +30,7 @@ public interface ApplicationMetricsCollector<E extends TimeCounterEvent> extends
 
     void increment(MetricsKey metricsKey);
 
-    void addRt(String registryOpType, Long responseTime);
+    void addApplicationRt(String registryOpType, Long responseTime);
 
 }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/MethodMetricsCollector.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.metrics.collector;
 
 import org.apache.dubbo.metrics.event.TimeCounterEvent;
+import org.apache.dubbo.metrics.model.MethodMetric;
 import org.apache.dubbo.metrics.model.key.MetricsKeyWrapper;
 import org.apache.dubbo.rpc.Invocation;
 
@@ -26,8 +27,8 @@
  */
 public interface MethodMetricsCollector<E extends TimeCounterEvent> extends MetricsCollector<E> {
 
-    void increment(Invocation invocation, MetricsKeyWrapper wrapper, int size);
+    void increment(MethodMetric methodMetric, MetricsKeyWrapper wrapper, int size);
 
-    void addRt(Invocation invocation, String registryOpType, Long responseTime);
+    void addMethodRt(Invocation invocation, String registryOpType, Long responseTime);
 }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/SimpleMetricsEventMulticaster.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dubbo.metrics.event;
 
+import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.metrics.listener.MetricsLifeListener;
 import org.apache.dubbo.metrics.listener.MetricsListener;
 
@@ -53,7 +54,7 @@ public void publishEvent(MetricsEvent event) {
     private boolean validateIfApplicationConfigExist(MetricsEvent event) {
         if (event.getSource() != null) {
             // Check if exist application config
-            return event.getSource().NotExistApplicationConfig();
+            return StringUtils.isEmpty(event.appName());
         }
         return false;
     }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/listener/MetricsApplicationListener.java
Patch:
@@ -37,7 +37,7 @@ public static AbstractMetricsKeyListener onFinishEventBuild(MetricsKey metricsKe
         return AbstractMetricsKeyListener.onFinish(metricsKey,
                 event -> {
                     collector.increment(metricsKey);
-                    collector.addRt(placeType.getType(), event.getTimePair().calc());
+                    collector.addApplicationRt(placeType.getType(), event.getTimePair().calc());
                 }
         );
     }
@@ -46,7 +46,7 @@ public static AbstractMetricsKeyListener onErrorEventBuild(MetricsKey metricsKey
         return AbstractMetricsKeyListener.onError(metricsKey,
                 event -> {
                     collector.increment(metricsKey);
-                    collector.addRt(placeType.getType(), event.getTimePair().calc());
+                    collector.addApplicationRt(placeType.getType(), event.getTimePair().calc());
                 }
         );
     }

File: dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/aggregate/TimeWindowQuantileTest.java
Patch:
@@ -46,8 +46,9 @@ void testMulti() {
         while (index < 100) {
             for (int i = 0; i < 100; i++) {
                 int finalI = i;
+                Assertions.assertDoesNotThrow(() -> quantile.add(finalI));
                 executorService.execute(() ->
-                    Assertions.assertDoesNotThrow(() -> quantile.add(finalI)));
+                    quantile.add(finalI));
             }
             index++;
             try {

File: dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/event/SimpleMetricsEventMulticasterTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.metrics.listener.AbstractMetricsListener;
 import org.apache.dubbo.metrics.listener.MetricsLifeListener;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-metrics/dubbo-metrics-config-center/src/main/java/org/apache/dubbo/metrics/config/event/ConfigCenterEvent.java
Patch:
@@ -44,7 +44,7 @@ public class ConfigCenterEvent extends TimeCounterEvent {
 
 
     public ConfigCenterEvent(ApplicationModel applicationModel, TypeWrapper typeWrapper) {
-        super(applicationModel,typeWrapper);
+        super(applicationModel, typeWrapper);
         ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
         ConfigCenterMetricsCollector collector;
         if (!beanFactory.isDestroyed()) {

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/event/DefaultSubDispatcher.java
Patch:
@@ -50,9 +50,10 @@ public boolean isSupport(MetricsEvent event) {
                 return event instanceof RequestBeforeEvent;
             }
 
+
+            private final MetricsPlaceValue dynamicPlaceType = MetricsPlaceValue.of(CommonConstants.CONSUMER, MetricsLevel.METHOD);
             @Override
             public void onEvent(RequestBeforeEvent event) {
-                MetricsPlaceValue dynamicPlaceType = MetricsPlaceValue.of(CommonConstants.CONSUMER, MetricsLevel.METHOD);
                 MetricsSupport.increment(METRIC_REQUESTS_SERVICE_UNAVAILABLE_FAILED, dynamicPlaceType, (MethodMetricsCollector) collector, event);
             }
         });
@@ -81,6 +82,7 @@ private CategoryOverall initMethodRequest() {
                                 targetKey = key;
                             } else {
                                 targetKey = MetricsSupport.getMetricsKey((Throwable) throwableObj);
+                                MetricsSupport.increment(MetricsKey.METRIC_REQUESTS_TOTAL_FAILED, dynamicPlaceType, (MethodMetricsCollector) collector, event);
                             }
                             MetricsSupport.incrAndAddRt(targetKey, dynamicPlaceType, (MethodMetricsCollector) collector, event);
                         })),

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/collector/DefaultCollectorTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.metrics.event.RequestBeforeEvent;
 import org.apache.dubbo.metrics.event.RequestEvent;
 import org.apache.dubbo.metrics.filter.MetricsFilter;
+import org.apache.dubbo.metrics.model.MetricsSupport;
 import org.apache.dubbo.metrics.model.ServiceKeyMetric;
 import org.apache.dubbo.metrics.model.key.MetricsKey;
 import org.apache.dubbo.metrics.model.key.MetricsKeyWrapper;
@@ -112,8 +113,8 @@ public void setup() {
     @Test
     void testListener() {
         DefaultMetricsCollector metricsCollector = new DefaultMetricsCollector(applicationModel);
-        RequestEvent event = RequestEvent.toRequestEvent(applicationModel, invocation);
-        RequestBeforeEvent beforeEvent = new RequestBeforeEvent(applicationModel, new TypeWrapper(MetricsLevel.METHOD, MetricsKey.METRIC_REQUESTS));
+        RequestEvent event = RequestEvent.toRequestEvent(applicationModel, null, null, null, invocation, MetricsSupport.getSide(invocation));
+        RequestBeforeEvent beforeEvent = new RequestBeforeEvent(applicationModel, null, null, new TypeWrapper(MetricsLevel.METHOD, MetricsKey.METRIC_REQUESTS));
         Assertions.assertTrue(metricsCollector.isSupport(event));
         Assertions.assertTrue(metricsCollector.isSupport(beforeEvent));
     }

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/filter/MetricsFilterTest.java
Patch:
@@ -71,7 +71,7 @@ class MetricsFilterTest {
     private static final String INTERFACE_NAME = "org.apache.dubbo.MockInterface";
     private static final String METHOD_NAME = "mockMethod";
     private static final String GROUP = "mockGroup";
-    private static final String VERSION = "1.0.0";
+    private static final String VERSION = "1.0.0_BETA";
     private String side;
 
     private AtomicBoolean initApplication = new AtomicBoolean(false);

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/metrics/model/MethodMetricTest.java
Patch:
@@ -73,7 +73,7 @@ public static void setup() {
     @Test
     void test() {
         MethodMetric metric = new MethodMetric(applicationModel, invocation);
-        Assertions.assertEquals(metric.getInterfaceName(), interfaceName);
+        Assertions.assertEquals(metric.getServiceKey(), interfaceName);
         Assertions.assertEquals(metric.getMethodName(), methodName);
         Assertions.assertEquals(metric.getGroup(), group);
         Assertions.assertEquals(metric.getVersion(), version);

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/event/MetadataEvent.java
Patch:
@@ -40,7 +40,7 @@
  */
 public class MetadataEvent extends TimeCounterEvent {
     public MetadataEvent(ApplicationModel applicationModel, TypeWrapper typeWrapper) {
-        super(applicationModel,typeWrapper);
+        super(applicationModel, typeWrapper);
         ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
         MetadataMetricsCollector collector;
         if (!beanFactory.isDestroyed()) {

File: dubbo-metrics/dubbo-metrics-metadata/src/test/java/org/apache/dubbo/metrics/metadata/MetadataMetricsCollectorTest.java
Patch:
@@ -71,7 +71,7 @@ public void setup() {
     @Test
     void testListener() {
         MetadataEvent event = MetadataEvent.toPushEvent(applicationModel);
-        MetricsEvent otherEvent = new MetricsEvent(applicationModel,null){
+        MetricsEvent otherEvent = new MetricsEvent(applicationModel,null, null, null){
         };
         Assertions.assertTrue(collector.isSupport(event));
         Assertions.assertFalse(collector.isSupport(otherEvent));

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/event/RegistrySubDispatcher.java
Patch:
@@ -93,7 +93,7 @@ interface MCat {
         MetricsCat APPLICATION_NOTIFY_FINISH = new MetricsCat(MetricsKey.NOTIFY_METRIC_NUM_LAST,
             (key, placeType, collector) -> AbstractMetricsKeyListener.onFinish(key,
                 event -> {
-                    collector.addRt(event.appName(), placeType.getType(), event.getTimePair().calc());
+                    collector.addServiceRt(event.appName(), placeType.getType(), event.getTimePair().calc());
                     Map<String, Integer> lastNumMap = Collections.unmodifiableMap(event.getAttachmentValue(ATTACHMENT_KEY_LAST_NUM_MAP));
                     lastNumMap.forEach(
                         (k, v) -> collector.setNum(new MetricsKeyWrapper(key, OP_TYPE_NOTIFY), k, v));

File: dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryMetricsSampleTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.metrics.registry.collector.RegistryMetricsCollector;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -64,8 +65,8 @@ void testRTMetrics() {
         RegistryMetricsCollector collector = new RegistryMetricsCollector(applicationModel);
         collector.setCollectEnabled(true);
         String applicationName = applicationModel.getApplicationName();
-        collector.addRt(applicationName, OP_TYPE_REGISTER.getType(), 10L);
-        collector.addRt(applicationName, OP_TYPE_REGISTER.getType(), 0L);
+        collector.addServiceRt(applicationName, OP_TYPE_REGISTER.getType(), 10L);
+        collector.addServiceRt(applicationName, OP_TYPE_REGISTER.getType(), 0L);
 
         List<MetricSample> samples = collector.collect();
         for (MetricSample sample : samples) {

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistry.java
Patch:
@@ -158,7 +158,7 @@ private void checkDestroyed() {
     public void doRegister(URL url) {
         try {
             checkDestroyed();
-            zkClient.create(toUrlPath(url), url.getParameter(DYNAMIC_KEY, true), false);
+            zkClient.create(toUrlPath(url), url.getParameter(DYNAMIC_KEY, true), true);
         } catch (Throwable e) {
             throw new RpcException("Failed to register " + url + " to zookeeper " + getUrl() + ", cause: " + e.getMessage(), e);
         }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Constants.java
Patch:
@@ -177,4 +177,6 @@ public interface Constants {
 
     List<String> REST_SERVER = Arrays.asList("jetty", "tomcat", "netty");
     String CONTENT_LENGTH_KEY = "content-length";
+    String USE_SECURE_RANDOM_ID = "dubbo.application.use-secure-random-request-id";
+
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/connection/AbstractConnectionClient.java
Patch:
@@ -49,6 +49,9 @@ public abstract class AbstractConnectionClient extends AbstractClient {
 
     protected AbstractConnectionClient(URL url, ChannelHandler handler) throws RemotingException {
         super(url, handler);
+    }
+
+    public final void increase() {
         COUNTER_UPDATER.set(this, 1L);
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/RequestTest.java
Patch:
@@ -23,6 +23,8 @@ class RequestTest {
 
     @Test
     void test() {
+        Request requestStart = new Request();
+
         Request request = new Request();
         request.setTwoWay(true);
         request.setBroken(true);
@@ -36,7 +38,7 @@ void test() {
         Assertions.assertTrue(request.isEvent());
         Assertions.assertEquals(request.getVersion(), "1.0.0");
         Assertions.assertEquals(request.getData(), "data");
-        Assertions.assertTrue(request.getId() >= 0);
+        Assertions.assertEquals(requestStart.getId() + 1, request.getId());
         Assertions.assertEquals(1024, request.getPayload());
 
         request.setHeartbeat(true);

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyConnectionClient.java
Patch:
@@ -89,6 +89,7 @@ protected void initConnectionClient() {
         this.channel = new AtomicReference<>();
         this.closePromise = new DefaultPromise<>(GlobalEventExecutor.INSTANCE);
         this.init = new AtomicBoolean(false);
+        this.increase();
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -69,6 +69,8 @@ public class DubboCodec extends ExchangeCodec {
     public static final byte RESPONSE_NULL_VALUE_WITH_ATTACHMENTS = 5;
     public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];
     public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];
+    public static final Class<?>[] GENERIC_PTS_ARRAY = new Class<?>[]{String.class, String[].class, Object[].class};
+    public static final Class<?>[] ECHO_PTS_ARRAY = new Class<?>[]{Object.class};
     private static final ErrorTypeAwareLogger log = LoggerFactory.getErrorTypeAwareLogger(DubboCodec.class);
 
     private static final AtomicBoolean decodeInUserThreadLogged = new AtomicBoolean(false);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -515,12 +515,14 @@ private ExchangeClient initClient(URL url) {
         }
 
         try {
+            ScopeModel scopeModel = url.getScopeModel();
             int heartbeat = UrlUtils.getHeartbeat(url);
             // Replace InstanceAddressURL with ServiceConfigURL.
             url = new ServiceConfigURL(DubboCodec.NAME, url.getUsername(), url.getPassword(), url.getHost(), url.getPort(), url.getPath(), url.getAllParameters());
             url = url.addParameter(CODEC_KEY, DubboCodec.NAME);
             // enable heartbeat by default
             url = url.addParameterIfAbsent(HEARTBEAT_KEY, Integer.toString(heartbeat));
+            url = url.setScopeModel(scopeModel);
 
             // connection should be lazy
             return url.getParameter(LAZY_CONNECT_KEY, false)

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestInvoker.java
Patch:
@@ -73,7 +73,7 @@ protected Result doInvoke(Invocation invocation) {
             RequestTemplate requestTemplate = new RequestTemplate(invocation, restMethodMetadata.getRequest().getMethod(), getUrl().getAddress());
 
             HttpConnectionCreateContext httpConnectionCreateContext =
-                creatHttpConnectionCreateContext(invocation, serviceRestMetadata, restMethodMetadata, requestTemplate);
+                createHttpConnectionCreateContext(invocation, serviceRestMetadata, restMethodMetadata, requestTemplate);
 
             // fill real  data
             for (HttpConnectionPreBuildIntercept intercept : httpConnectionPreBuildIntercepts) {
@@ -130,7 +130,7 @@ protected Result doInvoke(Invocation invocation) {
      * @param requestTemplate
      * @return
      */
-    private HttpConnectionCreateContext creatHttpConnectionCreateContext(Invocation invocation, ServiceRestMetadata serviceRestMetadata, RestMethodMetadata restMethodMetadata, RequestTemplate requestTemplate) {
+    private HttpConnectionCreateContext createHttpConnectionCreateContext(Invocation invocation, ServiceRestMetadata serviceRestMetadata, RestMethodMetadata restMethodMetadata, RequestTemplate requestTemplate) {
         HttpConnectionCreateContext httpConnectionCreateContext = new HttpConnectionCreateContext();
         httpConnectionCreateContext.setRequestTemplate(requestTemplate);
         httpConnectionCreateContext.setRestMethodMetadata(restMethodMetadata);

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java
Patch:
@@ -35,6 +35,8 @@
 import org.apache.dubbo.rpc.protocol.rest.deploy.ServiceDeployer;
 import org.apache.dubbo.rpc.protocol.rest.deploy.ServiceDeployerManager;
 
+
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
@@ -59,7 +61,7 @@ public class RestProtocol extends AbstractProtocol {
 
     public RestProtocol(FrameworkModel frameworkModel) {
         this.clientFactory = frameworkModel.getExtensionLoader(RestClientFactory.class).getAdaptiveExtension();
-        this.httpConnectionPreBuildIntercepts = frameworkModel.getExtensionLoader(HttpConnectionPreBuildIntercept.class).getSupportedExtensionInstances();
+        this.httpConnectionPreBuildIntercepts = new LinkedHashSet<>(frameworkModel.getExtensionLoader(HttpConnectionPreBuildIntercept.class).getActivateExtensions());
     }
 
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/consumer/inercept/RequestHeaderIntercept.java
Patch:
@@ -29,9 +29,9 @@
 import java.util.Set;
 
 /**
- *  resolve method args from header
+ * resolve method args from header
  */
-@Activate(value = RestConstant.REQUEST_HEADER_INTERCEPT, order = 2)
+@Activate(value = RestConstant.REQUEST_HEADER_INTERCEPT, order = Integer.MAX_VALUE - 1)
 public class RequestHeaderIntercept implements HttpConnectionPreBuildIntercept {
 
     @Override
@@ -45,6 +45,7 @@ public void intercept(HttpConnectionCreateContext connectionCreateContext) {
 
         requestTemplate.addHeaders(RestHeaderEnum.CONTENT_TYPE.getHeader(), consumes);
 
+
         Collection<String> produces = restMethodMetadata.getRequest().getProduces();
         if (produces == null || produces.isEmpty()) {
             requestTemplate.addHeader(RestHeaderEnum.ACCEPT.getHeader(), RestConstant.DEFAULT_ACCEPT);

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/consumer/inercept/SerializeBodyIntercept.java
Patch:
@@ -60,7 +60,8 @@ public void intercept(HttpConnectionCreateContext connectionCreateContext) {
             MediaType mediaType = MediaTypeUtil.convertMediaType(requestTemplate.getBodyType(), headers.toArray(new String[0]));
 
             // add mediaType by targetClass serialize
-            if (headers.isEmpty() && mediaType != null && !mediaType.equals(MediaType.ALL_VALUE)) {
+            if (mediaType != null && !mediaType.equals(MediaType.ALL_VALUE)) {
+                headers.clear();
                 headers.add(mediaType.value);
             }
             HttpMessageCodecManager.httpMessageEncode(outputStream, unSerializedBody, url, mediaType, requestTemplate.getBodyType());

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/ExceptionMapperTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.protocol.rest;
 
 import org.apache.dubbo.rpc.protocol.rest.exception.mapper.ExceptionHandler;
+import org.apache.dubbo.rpc.protocol.rest.exception.mapper.ExceptionHandlerResult;
 import org.apache.dubbo.rpc.protocol.rest.exception.mapper.ExceptionMapper;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -32,10 +33,10 @@ void testRegister() {
         exceptionMapper.registerMapper(TestExceptionHandler.class);
 
 
-        Object result = exceptionMapper.exceptionToResult(new RuntimeException("test"));
+        ExceptionHandlerResult result = exceptionMapper.exceptionToResult(new RuntimeException("test"));
 
 
-        Assertions.assertEquals("test", result);
+        Assertions.assertEquals("test", result.getEntity());
 
 
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -63,7 +63,6 @@
 import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.locks.ReentrantLock;
 
@@ -135,7 +134,7 @@ protected Result doInvoke(final Invocation invocation) {
         final MethodDescriptor methodDescriptor = serviceDescriptor.getMethod(
             invocation.getMethodName(),
             invocation.getParameterTypes());
-        Executor callbackExecutor = isSync(methodDescriptor, invocation) ? new ThreadlessExecutor() : streamExecutor;
+        ExecutorService callbackExecutor = isSync(methodDescriptor, invocation) ? new ThreadlessExecutor() : streamExecutor;
         ClientCall call = new TripleClientCall(connectionClient, callbackExecutor,
             getUrl().getOrDefaultFrameworkModel(), writeQueue);
         AsyncRpcResult result;
@@ -219,7 +218,7 @@ StreamObserver<Object> streamCall(ClientCall call,
     }
 
     AsyncRpcResult invokeUnary(MethodDescriptor methodDescriptor, Invocation invocation,
-                               ClientCall call, Executor callbackExecutor) {
+                               ClientCall call, ExecutorService callbackExecutor) {
 
         int timeout = RpcUtils.calculateTimeout(getUrl(), invocation, RpcUtils.getMethodName(invocation), 3000);
         if (timeout <= 0) {

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/ObjectInput.java
Patch:
@@ -73,7 +73,7 @@ public interface ObjectInput extends DataInput {
     default Throwable readThrowable() throws IOException, ClassNotFoundException {
         Object obj = readObject();
         if (!(obj instanceof Throwable)) {
-            throw new IOException("Response data error, expect Throwable, but get " + obj);
+            throw new IOException("Response data error, expect Throwable, but get " + obj.getClass());
         }
         return (Throwable) obj;
     }

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistry.java
Patch:
@@ -158,7 +158,7 @@ private void checkDestroyed() {
     public void doRegister(URL url) {
         try {
             checkDestroyed();
-            zkClient.create(toUrlPath(url), url.getParameter(DYNAMIC_KEY, true), false);
+            zkClient.create(toUrlPath(url), url.getParameter(DYNAMIC_KEY, true), true);
         } catch (Throwable e) {
             throw new RpcException("Failed to register " + url + " to zookeeper " + getUrl() + ", cause: " + e.getMessage(), e);
         }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser;
 import org.apache.dubbo.config.spring.util.LazyTargetInvocationHandler;
 import org.apache.dubbo.config.spring.util.LazyTargetSource;
+import org.apache.dubbo.config.spring.util.LockUtils;
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.rpc.proxy.AbstractProxyFactory;
 
@@ -43,7 +44,6 @@
 import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
-import org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
 
@@ -396,7 +396,7 @@ private Object getCallProxy() throws Exception {
         if (referenceConfig.configInitialized()) {
             return referenceConfig.get();
         }
-        synchronized (((DefaultSingletonBeanRegistry)getBeanFactory()).getSingletonMutex()) {
+        synchronized (LockUtils.getSingletonMutex(applicationContext)) {
             return referenceConfig.get();
         }
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboDeployApplicationListener.java
Patch:
@@ -25,12 +25,12 @@
 import org.apache.dubbo.config.spring.context.event.DubboApplicationStateEvent;
 import org.apache.dubbo.config.spring.context.event.DubboModuleStateEvent;
 import org.apache.dubbo.config.spring.util.DubboBeanUtils;
+import org.apache.dubbo.config.spring.util.LockUtils;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ModelConstants;
 import org.apache.dubbo.rpc.model.ModuleModel;
 
 import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
 import org.springframework.context.ApplicationListener;
@@ -147,7 +147,7 @@ public void onApplicationEvent(ApplicationContextEvent event) {
     private void onContextRefreshedEvent(ContextRefreshedEvent event) {
         ModuleDeployer deployer = moduleModel.getDeployer();
         Assert.notNull(deployer, "Module deployer is null");
-        Object singletonMutex = ((DefaultSingletonBeanRegistry) applicationContext.getAutowireCapableBeanFactory()).getSingletonMutex();
+        Object singletonMutex = LockUtils.getSingletonMutex(applicationContext);
         // start module
         Future future = null;
         synchronized (singletonMutex) {

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/param/parse/provider/BodyProviderParamParser.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.dubbo.rpc.protocol.rest.util.MediaTypeUtil;
 
 
-
 /**
  * body param parse
  */
@@ -43,7 +42,7 @@ protected void doParse(ProviderParseContext parseContext, ArgInfo argInfo) {
         try {
             String contentType = parseContext.getRequestFacade().getHeader(RestHeaderEnum.CONTENT_TYPE.getHeader());
             MediaType mediaType = MediaTypeUtil.convertMediaType(argInfo.getParamType(), contentType);
-            Object param = HttpMessageCodecManager.httpMessageDecode(request.getInputStream(), argInfo.getParamType(), mediaType);
+            Object param = HttpMessageCodecManager.httpMessageDecode(request.getInputStream(), argInfo.getParamType(), argInfo.actualReflectType(), mediaType);
             parseContext.setValueByIndex(argInfo.getIndex(), param);
         } catch (Throwable e) {
             throw new ParamParseException("dubbo rest protocol provider body param parser  error: " + e.getMessage());

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/HttpMessageCodecManager.java
Patch:
@@ -23,21 +23,22 @@
 import org.apache.dubbo.rpc.protocol.rest.pair.MessageCodecResultPair;
 
 import java.io.OutputStream;
+import java.lang.reflect.Type;
 import java.util.Set;
 
 public class HttpMessageCodecManager {
     private static final Set<HttpMessageCodec> httpMessageCodecs =
         FrameworkModel.defaultModel().getExtensionLoader(HttpMessageCodec.class).getSupportedExtensionInstances();
 
 
-    public static Object httpMessageDecode(byte[] body, Class<?> type, MediaType mediaType) throws Exception {
+    public static Object httpMessageDecode(byte[] body, Class<?> type, Type actualType, MediaType mediaType) throws Exception {
         if (body == null || body.length == 0) {
             return null;
         }
 
         for (HttpMessageCodec httpMessageCodec : httpMessageCodecs) {
             if (httpMessageCodec.contentTypeSupport(mediaType, type) || typeJudge(mediaType, type, httpMessageCodec)) {
-                return httpMessageCodec.decode(body, type);
+                return httpMessageCodec.decode(body, type,actualType);
             }
         }
         throw new UnSupportContentTypeException("UnSupport content-type :" + mediaType.value);

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/ByteArrayCodec.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.rpc.protocol.rest.message.HttpMessageCodec;
 
 import java.io.OutputStream;
+import java.lang.reflect.Type;
 
 /**
  *  body type is byte array
@@ -31,7 +32,7 @@ public class ByteArrayCodec implements HttpMessageCodec<byte[], OutputStream> {
 
 
     @Override
-    public Object decode(byte[] body, Class<?> targetType) throws Exception {
+    public Object decode(byte[] body, Class<?> targetType, Type type) throws Exception {
         return body;
     }
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/MultiValueCodec.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.io.OutputStream;
 import java.lang.reflect.Field;
+import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -39,8 +40,7 @@ public class MultiValueCodec implements HttpMessageCodec<byte[], OutputStream> {
 
 
     @Override
-    public Object decode(byte[] body, Class<?> targetType) throws Exception {
-        // TODO java bean  get set convert
+    public Object decode(byte[] body, Class<?> targetType, Type type) throws Exception {
         Object map = DataParseUtils.multipartFormConvert(body,targetType);
         Map valuesMap = (Map) map;
         if (Map.class.isAssignableFrom(targetType)) {

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/StringCodec.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.rpc.protocol.rest.message.HttpMessageCodec;
 
 import java.io.OutputStream;
+import java.lang.reflect.Type;
 import java.nio.charset.StandardCharsets;
 
 /**
@@ -32,7 +33,7 @@ public class StringCodec implements HttpMessageCodec<byte[], OutputStream> {
 
 
     @Override
-    public Object decode(byte[] body, Class<?> targetType) throws Exception {
+    public Object decode(byte[] body, Class<?> targetType, Type type) throws Exception {
         if (body == null || body.length == 0) {
             return null;
         }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/TextCodec.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.rpc.protocol.rest.util.DataParseUtils;
 
 import java.io.OutputStream;
+import java.lang.reflect.Type;
 import java.nio.charset.StandardCharsets;
 
 /**
@@ -33,7 +34,7 @@
 public class TextCodec implements HttpMessageCodec<byte[], OutputStream> {
 
     @Override
-    public Object decode(byte[] body, Class<?> targetType) throws Exception {
+    public Object decode(byte[] body, Class<?> targetType, Type type) throws Exception {
         return DataParseUtils.stringTypeConvert(targetType, new String(body, StandardCharsets.UTF_8));
     }
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/XMLCodec.java
Patch:
@@ -32,6 +32,7 @@
 import javax.xml.transform.sax.SAXSource;
 import java.io.OutputStream;
 import java.io.StringReader;
+import java.lang.reflect.Type;
 
 /**
  *  body content-type is xml
@@ -41,7 +42,7 @@ public class XMLCodec implements HttpMessageCodec<byte[], OutputStream> {
 
 
     @Override
-    public Object decode(byte[] body, Class<?> targetType) throws Exception {
+    public Object decode(byte[] body, Class<?> targetType, Type type) throws Exception {
 
 
         SAXParserFactory spf = SAXParserFactory.newInstance();

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/util/DataParseUtils.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
+import java.lang.reflect.Type;
 import java.net.URLDecoder;
 import java.net.URLEncoder;
 import java.nio.charset.Charset;
@@ -151,7 +152,7 @@ public static byte[] objectTextConvertToByteArray(Object object) {
 
     }
 
-    public static Object jsonConvert(Class targetType, byte[] body) throws Exception {
+    public static Object jsonConvert(Type targetType, byte[] body) throws Exception {
         return JsonUtils.toJavaObject(new String(body, StandardCharsets.UTF_8), targetType);
     }
 

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/HttpMessageCodecManagerTest.java
Patch:
@@ -37,7 +37,7 @@ void testCodec() throws Exception {
         HttpMessageCodecManager.httpMessageEncode(byteArrayOutputStream,
             registrationResult, null, MediaType.TEXT_XML, null);
 
-        Object o = HttpMessageCodecManager.httpMessageDecode(byteArrayOutputStream.toByteArray(), RegistrationResult.class, MediaType.TEXT_XML);
+        Object o = HttpMessageCodecManager.httpMessageDecode(byteArrayOutputStream.toByteArray(), RegistrationResult.class, RegistrationResult.class, MediaType.TEXT_XML);
 
         Assertions.assertEquals(registrationResult, o);
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/connection/AbstractConnectionClient.java
Patch:
@@ -49,6 +49,9 @@ public abstract class AbstractConnectionClient extends AbstractClient {
 
     protected AbstractConnectionClient(URL url, ChannelHandler handler) throws RemotingException {
         super(url, handler);
+    }
+
+    public final void increase() {
         COUNTER_UPDATER.set(this, 1L);
     }
 

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyConnectionClient.java
Patch:
@@ -89,6 +89,7 @@ protected void initConnectionClient() {
         this.channel = new AtomicReference<>();
         this.closePromise = new DefaultPromise<>(GlobalEventExecutor.INSTANCE);
         this.init = new AtomicBoolean(false);
+        this.increase();
     }
 
     @Override

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/Request.java
Patch:
@@ -56,7 +56,7 @@ public Request(long id) {
 
     static {
         long startID = ThreadLocalRandom.current().nextLong();
-        if (Boolean.parseBoolean(System.getProperty(USE_SECURE_RANDOM_ID, "true"))) {
+        if (Boolean.parseBoolean(System.getProperty(USE_SECURE_RANDOM_ID, "false"))) {
             try {
                 SecureRandom rand = new SecureRandom(SecureRandom.getSeed(20));
                 startID = rand.nextLong();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -64,7 +64,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.ENABLED_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.TAG_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_FAILED_INIT_SERIALIZATION_OPTIMIZER;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_FAILED_REFER_INVOKER;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_UNSUPPORTED;
@@ -131,7 +130,7 @@ public void subscribe(URL url) {
         }
 
         ApplicationModel applicationModel = url.getApplicationModel();
-        MetricsEventBus.post(RegistryEvent.toSubscribeEvent(applicationModel),() ->
+        MetricsEventBus.post(RegistryEvent.toSubscribeEvent(applicationModel), () ->
             {
                 super.subscribe(url);
                 return null;
@@ -503,7 +502,7 @@ private URL mergeUrl(URL providerUrl) {
 
         // FIXME, kept for mock
         if (providerUrl.hasParameter(MOCK_KEY) || providerUrl.getAnyMethodParameter(MOCK_KEY) != null) {
-            providerUrl = providerUrl.removeParameter(TAG_KEY);
+            providerUrl = providerUrl.removeParameter(MOCK_KEY);
         }
 
         if ((providerUrl.getPath() == null || providerUrl.getPath()

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/extension/resteasy/filter/ResteasyRequestContainerFilterAdapter.java
Patch:
@@ -33,7 +33,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.RESTEASY_NETTY_HTTP_REQUEST_ATTRIBUTE_KEY;
 
 
-@Activate(value = "resteasy", onClass = {"javax.ws.rs.container.ContainerRequestFilter", "org.jboss.resteasy.plugins.server.netty.NettyHttpRequest","org.jboss.resteasy.plugins.server.netty.NettyHttpResponse"}, order = Integer.MAX_VALUE - 1)
+@Activate(value = "resteasy", onClass = {"javax.ws.rs.container.ContainerRequestFilter", "org.jboss.resteasy.plugins.server.netty.NettyHttpRequest", "org.jboss.resteasy.plugins.server.netty.NettyHttpResponse"}, order = Integer.MAX_VALUE - 1)
 public class ResteasyRequestContainerFilterAdapter implements RestRequestFilter, ResteasyContext {
 
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/extension/resteasy/filter/ResteasyResponseContainerFilterAdapter.java
Patch:
@@ -30,7 +30,7 @@
 import javax.ws.rs.container.ContainerResponseFilter;
 import java.util.List;
 
-@Activate(value = "resteasy", order = Integer.MAX_VALUE - 1000, onClass = {"org.jboss.resteasy.specimpl.BuiltResponse", "javax.ws.rs.container.ContainerResponseFilter", "org.jboss.resteasy.spi.HttpResponse","org.jboss.resteasy.plugins.server.netty.NettyHttpResponse"})
+@Activate(value = "resteasy", order = Integer.MAX_VALUE - 1000, onClass = {"org.jboss.resteasy.specimpl.BuiltResponse", "javax.ws.rs.container.ContainerResponseFilter", "org.jboss.resteasy.spi.HttpResponse", "org.jboss.resteasy.plugins.server.netty.NettyHttpResponse"})
 public class ResteasyResponseContainerFilterAdapter implements RestResponseFilter, ResteasyContext {
     @Override
     public void filter(RestFilterContext restFilterContext) throws Exception {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java
Patch:
@@ -393,6 +393,9 @@ private Object getCallProxy() throws Exception {
         //Subclasses should synchronize on the given Object if they perform any sort of extended singleton creation phase.
         // In particular, subclasses should not have their own mutexes involved in singleton creation, to avoid the potential for deadlocks in lazy-init situations.
         //The redundant type cast is to be compatible with earlier than spring-4.2
+        if (referenceConfig.configInitialized()) {
+            return referenceConfig.get();
+        }
         synchronized (((DefaultSingletonBeanRegistry)getBeanFactory()).getSingletonMutex()) {
             return referenceConfig.get();
         }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/ConfigValidationUtilsTest.java
Patch:
@@ -105,7 +105,7 @@ void testCheckQosInApplicationConfig() throws Exception {
         config.setName("testName");
         config.setQosEnable(false);
         mock.validateApplicationConfig(config);
-        verify(loggerMock, never()).warn(any(), any());
+        verify(loggerMock, never()).warn(any(), any(Throwable.class));
 
         config.setQosEnable(true);
         mock.validateApplicationConfig(config);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -515,12 +515,14 @@ private ExchangeClient initClient(URL url) {
         }
 
         try {
+            ScopeModel scopeModel = url.getScopeModel();
             int heartbeat = UrlUtils.getHeartbeat(url);
             // Replace InstanceAddressURL with ServiceConfigURL.
             url = new ServiceConfigURL(DubboCodec.NAME, url.getUsername(), url.getPassword(), url.getHost(), url.getPort(), url.getPath(), url.getAllParameters());
             url = url.addParameter(CODEC_KEY, DubboCodec.NAME);
             // enable heartbeat by default
             url = url.addParameterIfAbsent(HEARTBEAT_KEY, Integer.toString(heartbeat));
+            url = url.setScopeModel(scopeModel);
 
             // connection should be lazy
             return url.getParameter(LAZY_CONNECT_KEY, false)

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -639,4 +639,7 @@ public interface CommonConstants {
 
     String DUBBO_PACKABLE_METHOD_FACTORY = "dubbo.application.parameters." + PACKABLE_METHOD_FACTORY_KEY;
 
+    String SERVICE_DEPLOYER_ATTRIBUTE_KEY = "serviceDeployer";
+    String RESTEASY_NETTY_HTTP_REQUEST_ATTRIBUTE_KEY = "resteasyNettyHttpRequest";
+
 }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestInvoker.java
Patch:
@@ -72,7 +72,7 @@ protected Result doInvoke(Invocation invocation) {
             RequestTemplate requestTemplate = new RequestTemplate(invocation, restMethodMetadata.getRequest().getMethod(), getUrl().getAddress());
 
             HttpConnectionCreateContext httpConnectionCreateContext =
-                creatHttpConnectionCreateContext(invocation, serviceRestMetadata, restMethodMetadata, requestTemplate);
+                createHttpConnectionCreateContext(invocation, serviceRestMetadata, restMethodMetadata, requestTemplate);
 
             // fill real  data
             for (HttpConnectionPreBuildIntercept intercept : httpConnectionPreBuildIntercepts) {
@@ -128,7 +128,7 @@ protected Result doInvoke(Invocation invocation) {
      * @param requestTemplate
      * @return
      */
-    private HttpConnectionCreateContext creatHttpConnectionCreateContext(Invocation invocation, ServiceRestMetadata serviceRestMetadata, RestMethodMetadata restMethodMetadata, RequestTemplate requestTemplate) {
+    private HttpConnectionCreateContext createHttpConnectionCreateContext(Invocation invocation, ServiceRestMetadata serviceRestMetadata, RestMethodMetadata restMethodMetadata, RequestTemplate requestTemplate) {
         HttpConnectionCreateContext httpConnectionCreateContext = new HttpConnectionCreateContext();
         httpConnectionCreateContext.setRequestTemplate(requestTemplate);
         httpConnectionCreateContext.setRestMethodMetadata(restMethodMetadata);

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java
Patch:
@@ -31,6 +31,8 @@
 import org.apache.dubbo.rpc.protocol.rest.annotation.consumer.HttpConnectionPreBuildIntercept;
 import org.apache.dubbo.rpc.protocol.rest.annotation.metadata.MetadataResolver;
 
+
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
@@ -58,7 +60,7 @@ public class RestProtocol extends AbstractProtocol {
 
     public RestProtocol(FrameworkModel frameworkModel) {
         this.clientFactory = frameworkModel.getExtensionLoader(RestClientFactory.class).getAdaptiveExtension();
-        this.httpConnectionPreBuildIntercepts = frameworkModel.getExtensionLoader(HttpConnectionPreBuildIntercept.class).getSupportedExtensionInstances();
+        this.httpConnectionPreBuildIntercepts = new LinkedHashSet<>(frameworkModel.getExtensionLoader(HttpConnectionPreBuildIntercept.class).getActivateExtensions());
     }
 
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/consumer/inercept/SerializeBodyIntercept.java
Patch:
@@ -60,7 +60,8 @@ public void intercept(HttpConnectionCreateContext connectionCreateContext) {
             MediaType mediaType = MediaTypeUtil.convertMediaType(requestTemplate.getBodyType(), headers.toArray(new String[0]));
 
             // add mediaType by targetClass serialize
-            if (headers.isEmpty() && mediaType != null && !mediaType.equals(MediaType.ALL_VALUE)) {
+            if (mediaType != null && !mediaType.equals(MediaType.ALL_VALUE)) {
+                headers.clear();
                 headers.add(mediaType.value);
             }
             HttpMessageCodecManager.httpMessageEncode(outputStream, unSerializedBody, url, mediaType, requestTemplate.getBodyType());

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/ExceptionMapperTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.protocol.rest;
 
 import org.apache.dubbo.rpc.protocol.rest.exception.mapper.ExceptionHandler;
+import org.apache.dubbo.rpc.protocol.rest.exception.mapper.ExceptionHandlerResult;
 import org.apache.dubbo.rpc.protocol.rest.exception.mapper.ExceptionMapper;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -32,10 +33,10 @@ void testRegister() {
         exceptionMapper.registerMapper(TestExceptionHandler.class);
 
 
-        Object result = exceptionMapper.exceptionToResult(new RuntimeException("test"));
+        ExceptionHandlerResult result = exceptionMapper.exceptionToResult(new RuntimeException("test"));
 
 
-        Assertions.assertEquals("test", result);
+        Assertions.assertEquals("test", result.getEntity());
 
 
     }

File: dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/aggregate/TimeWindowQuantileTest.java
Patch:
@@ -46,8 +46,9 @@ void testMulti() {
         while (index < 100) {
             for (int i = 0; i < 100; i++) {
                 int finalI = i;
+                Assertions.assertDoesNotThrow(() -> quantile.add(finalI));
                 executorService.execute(() ->
-                    Assertions.assertDoesNotThrow(() -> quantile.add(finalI)));
+                    quantile.add(finalI));
             }
             index++;
             try {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/reference/ReferenceBeanManager.java
Patch:
@@ -189,6 +189,7 @@ private synchronized void initReferenceBean(ReferenceBean referenceBean) throws
 
             // register ReferenceConfig
             moduleModel.getConfigManager().addReference(referenceConfig);
+            moduleModel.getDeployer().setPending();
         }
 
         // associate referenceConfig to referenceBean

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/Request.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.utils.StringUtils;
 
+import java.util.concurrent.ThreadLocalRandom;
 import java.util.concurrent.atomic.AtomicLong;
 
 import static org.apache.dubbo.common.constants.CommonConstants.HEARTBEAT_EVENT;
@@ -27,7 +28,7 @@
  */
 public class Request {
 
-    private static final AtomicLong INVOKE_ID = new AtomicLong(0);
+    private static final AtomicLong INVOKE_ID = new AtomicLong(ThreadLocalRandom.current().nextLong());
 
     private final long mId;
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/RequestTest.java
Patch:
@@ -23,6 +23,8 @@ class RequestTest {
 
     @Test
     void test() {
+        Request requestStart = new Request();
+
         Request request = new Request();
         request.setTwoWay(true);
         request.setBroken(true);
@@ -35,7 +37,7 @@ void test() {
         Assertions.assertTrue(request.isEvent());
         Assertions.assertEquals(request.getVersion(), "1.0.0");
         Assertions.assertEquals(request.getData(), "data");
-        Assertions.assertTrue(request.getId() >= 0);
+        Assertions.assertEquals(requestStart.getId() + 1, request.getId());
 
         request.setHeartbeat(true);
         Assertions.assertTrue(request.isHeartbeat());

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -63,7 +63,6 @@
 import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.locks.ReentrantLock;
 
@@ -135,7 +134,7 @@ protected Result doInvoke(final Invocation invocation) {
         final MethodDescriptor methodDescriptor = serviceDescriptor.getMethod(
             invocation.getMethodName(),
             invocation.getParameterTypes());
-        Executor callbackExecutor = isSync(methodDescriptor, invocation) ? new ThreadlessExecutor() : streamExecutor;
+        ExecutorService callbackExecutor = isSync(methodDescriptor, invocation) ? new ThreadlessExecutor() : streamExecutor;
         ClientCall call = new TripleClientCall(connectionClient, callbackExecutor,
             getUrl().getOrDefaultFrameworkModel(), writeQueue);
         AsyncRpcResult result;
@@ -219,7 +218,7 @@ StreamObserver<Object> streamCall(ClientCall call,
     }
 
     AsyncRpcResult invokeUnary(MethodDescriptor methodDescriptor, Invocation invocation,
-                               ClientCall call, Executor callbackExecutor) {
+                               ClientCall call, ExecutorService callbackExecutor) {
 
         int timeout = RpcUtils.calculateTimeout(getUrl(), invocation, RpcUtils.getMethodName(invocation), 3000);
         if (timeout <= 0) {

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/filter/MetricsFilterTest.java
Patch:
@@ -71,7 +71,7 @@ class MetricsFilterTest {
     private static final String INTERFACE_NAME = "org.apache.dubbo.MockInterface";
     private static final String METHOD_NAME = "mockMethod";
     private static final String GROUP = "mockGroup";
-    private static final String VERSION = "1.0.0";
+    private static final String VERSION = "1.0.0_BETA";
     private String side;
 
     private AtomicBoolean initApplication = new AtomicBoolean(false);

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/metrics/model/MethodMetricTest.java
Patch:
@@ -73,7 +73,7 @@ public static void setup() {
     @Test
     void test() {
         MethodMetric metric = new MethodMetric(applicationModel, invocation);
-        Assertions.assertEquals(metric.getInterfaceName(), interfaceName);
+        Assertions.assertEquals(metric.getServiceKey(), interfaceName);
         Assertions.assertEquals(metric.getMethodName(), methodName);
         Assertions.assertEquals(metric.getGroup(), group);
         Assertions.assertEquals(metric.getVersion(), version);

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/TreePathDynamicConfiguration.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.common.config.configcenter;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration;
 import org.apache.dubbo.common.utils.StringUtils;
 
 import java.util.Collection;
@@ -30,7 +29,7 @@
 /**
  * An abstract implementation of {@link DynamicConfiguration} is like "tree-structure" path :
  * <ul>
- *     <li>{@link FileSystemDynamicConfiguration "file"}</li>
+ *     <li>{@link org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration "file"}</li>
  *     <li>{@link org.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfiguration "zookeeper"}</li>
  *     <li>{@link org.apache.dubbo.configcenter.consul.ConsulDynamicConfiguration "consul"}</li>
  * </ul>

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -281,6 +281,7 @@ public interface CommonConstants {
     String MONITOR_KEY = "monitor";
     String BACKGROUND_KEY = "background";
     String CLUSTER_KEY = "cluster";
+    String MERGEABLE_CLUSTER_NAME = "mergeable";
     String USERNAME_KEY = "username";
     String PASSWORD_KEY = "password";
     String HOST_KEY = "host";

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -739,7 +739,6 @@ protected void checkAndUpdateSubConfigs() {
         }
 
         checkStubAndLocal(interfaceClass);
-        ConfigValidationUtils.checkMock(interfaceClass, this);
 
         if (StringUtils.isEmpty(url)) {
             checkRegistry();

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -463,7 +463,6 @@ private void checkAndUpdateSubConfigs() {
             }
         }
         checkStubAndLocal(interfaceClass);
-        ConfigValidationUtils.checkMock(interfaceClass, this);
         ConfigValidationUtils.validateServiceConfig(this);
         postProcessConfig();
     }

File: dubbo-plugin/dubbo-plugin-cluster-mergeable/src/test/java/org/apache/dubbo/rpc/cluster/merger/ResultMergerTest.java
Patch:
@@ -17,8 +17,9 @@
 package org.apache.dubbo.rpc.cluster.merger;
 
 import org.apache.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.merger.ArrayMerger;
+import org.apache.dubbo.rpc.cluster.merger.MergerFactory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-plugin/dubbo-plugin-cluster-mergeable/src/test/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvokerTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dubbo.rpc.cluster.Directory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-plugin/dubbo-plugin-mock/src/test/java/org/apache/dubbo/rpc/support/GreetingMock1.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.config.mock;
+package org.apache.dubbo.rpc.support;
 
 public class GreetingMock1 {
 }

File: dubbo-plugin/dubbo-plugin-mock/src/test/java/org/apache/dubbo/rpc/support/GreetingMock2.java
Patch:
@@ -14,9 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.config.mock;
-
-import org.apache.dubbo.config.api.Greeting;
+package org.apache.dubbo.rpc.support;
 
 public class GreetingMock2 implements Greeting {
     private GreetingMock2() {

File: dubbo-plugin/dubbo-plugin-proxy-bytebuddy/src/test/java/org/apache/dubbo/rpc/proxy/bytebuddy/ByteBuddyProxyFactoryTest.java
Patch:
@@ -21,7 +21,7 @@
 class ByteBuddyProxyFactoryTest extends AbstractProxyTest {
 
     static {
-        factory = new ByteBuddyProxyFactory();
+        AbstractProxyTest.factory = new ByteBuddyProxyFactory();
     }
 
 }

File: dubbo-plugin/dubbo-plugin-qos-trace/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/filter/TraceFilterTest.java
Patch:
@@ -18,11 +18,11 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.CollectionUtils;
+import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
-import org.apache.dubbo.rpc.protocol.dubbo.support.DemoService;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
@@ -106,7 +106,7 @@ void testInvoke() throws Exception {
         // test invoke
         filter.invoke(mockInvoker, mockInvocation);
         String message = listToString(mockChannel.getReceivedObjects());
-        String expectMessage = "org.apache.dubbo.rpc.protocol.dubbo.support.DemoService.sayHello([]) -> \"result\"";
+        String expectMessage = "org.apache.dubbo.qos.legacy.service.DemoService.sayHello([]) -> \"result\"";
         System.out.println("actual message: " + message);
         Assertions.assertTrue(message.contains(expectMessage));
         Assertions.assertTrue(message.contains("elapsed:"));

File: dubbo-plugin/dubbo-plugin-router-mesh/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshAppRuleListener.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher;
 import org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleListener;
-
 import org.yaml.snakeyaml.DumperOptions;
 import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/DubboShutdownHook.java
Patch:
@@ -82,6 +82,9 @@ public void run() {
     }
 
     private void doDestroy() {
+        int timeout = ConfigurationUtils.getServerShutdownTimeout(applicationModel);
+        ConfigurationUtils.setExpectedShutdownTime(System.currentTimeMillis() + timeout);
+
         // send readonly for shutdown hook
         List<GracefulShutdown> gracefulShutdowns = GracefulShutdown.getGracefulShutdowns(applicationModel.getFrameworkModel());
         for (GracefulShutdown gracefulShutdown : gracefulShutdowns) {
@@ -97,7 +100,6 @@ private void doDestroy() {
             }
         }
         if (hasModuleBindSpring) {
-            int timeout = ConfigurationUtils.getServerShutdownTimeout(applicationModel);
             if (timeout > 0) {
                 long start = System.currentTimeMillis();
                 /*

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeChannel.java
Patch:
@@ -50,7 +50,7 @@ final class HeaderExchangeChannel implements ExchangeChannel {
 
     private final Channel channel;
 
-    private final long shutdownTimeout;
+    private final int shutdownTimeout;
 
     private volatile boolean closed = false;
 
@@ -167,7 +167,7 @@ public void close() {
         closed = true;
         try {
             // graceful close
-            DefaultFuture.closeChannel(channel, shutdownTimeout);
+            DefaultFuture.closeChannel(channel, ConfigurationUtils.reCalShutdownTime(shutdownTimeout));
         } catch (Exception e) {
             logger.warn(TRANSPORT_FAILED_CLOSE, "", "", e.getMessage(), e);
         }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java
Patch:
@@ -148,7 +148,7 @@ public void disconnected(Channel channel) throws RemotingException {
             if (timeoutObj instanceof Integer) {
                 shutdownTimeout = (Integer) timeoutObj;
             }
-            DefaultFuture.closeChannel(channel, shutdownTimeout);
+            DefaultFuture.closeChannel(channel, ConfigurationUtils.reCalShutdownTime(shutdownTimeout));
             HeaderExchangeChannel.removeChannel(channel);
         }
     }

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyPortUnificationServer.java
Patch:
@@ -178,7 +178,7 @@ public void doClose() {
 
         try {
             if (bootstrap != null) {
-                long timeout = serverShutdownTimeoutMills;
+                long timeout = ConfigurationUtils.reCalShutdownTime(serverShutdownTimeoutMills);
                 long quietPeriod = Math.min(2000L, timeout);
                 Future<?> bossGroupShutdownFuture = bossGroup.shutdownGracefully(quietPeriod,
                     timeout, MILLISECONDS);

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java
Patch:
@@ -174,7 +174,7 @@ protected void doClose() throws Throwable {
         }
         try {
             if (bootstrap != null) {
-                long timeout = serverShutdownTimeoutMills;
+                long timeout = ConfigurationUtils.reCalShutdownTime(serverShutdownTimeoutMills);
                 long quietPeriod = Math.min(2000L, timeout);
                 Future<?> bossGroupShutdownFuture = bossGroup.shutdownGracefully(quietPeriod, timeout, MILLISECONDS);
                 Future<?> workerGroupShutdownFuture = workerGroup.shutdownGracefully(quietPeriod, timeout, MILLISECONDS);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -179,7 +179,7 @@ public void destroy() {
                 if (invokers != null) {
                     invokers.remove(this);
                 }
-                clientsProvider.close(serverShutdownTimeout);
+                clientsProvider.close(ConfigurationUtils.reCalShutdownTime(serverShutdownTimeout));
             } finally {
                 destroyLock.unlock();
             }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -554,7 +554,7 @@ public void destroy() {
                     logger.info("Closing dubbo server: " + server.getLocalAddress());
                 }
 
-                server.close(getServerShutdownTimeout(protocolServer));
+                server.close(ConfigurationUtils.reCalShutdownTime(getServerShutdownTimeout(protocolServer)));
 
             } catch (Throwable t) {
                 logger.warn(PROTOCOL_ERROR_CLOSE_SERVER, "", "", "Close dubbo server [" + server.getLocalAddress() + "] failed: " + t.getMessage(), t);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/SharedClientsProvider.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.rpc.protocol.dubbo;
 
+import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
@@ -116,7 +117,7 @@ private void closeReferenceCountExchangeClient(ReferenceCountExchangeClient clie
                 logger.info("Close dubbo connect: " + client.getLocalAddress() + "-->" + client.getRemoteAddress());
             }
 
-            client.close(client.getShutdownWaitTime());
+            client.close(ConfigurationUtils.reCalShutdownTime(client.getShutdownWaitTime()));
 
             // TODO
             /*

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/AdaptiveLoadBalance.java
Patch:
@@ -110,7 +110,7 @@ private int getTimeout(Invoker<?> invoker, Invocation invocation) {
     private <T> Invoker<T> chooseLowLoadInvoker(Invoker<T> invoker1,Invoker<T> invoker2,Invocation invocation){
         int weight1 = getWeight(invoker1, invocation);
         int weight2 = getWeight(invoker2, invocation);
-        int timeout1 = getTimeout(invoker2, invocation);
+        int timeout1 = getTimeout(invoker1, invocation);
         int timeout2 = getTimeout(invoker2, invocation);
         long load1 = Double.doubleToLongBits(adaptiveMetrics.getLoad(getServiceKey(invoker1,invocation),weight1,timeout1 ));
         long load2 = Double.doubleToLongBits(adaptiveMetrics.getLoad(getServiceKey(invoker2,invocation),weight2,timeout2 ));

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.dubbo.rpc.InvokeMode;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
-import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.protocol.AbstractInvoker;
@@ -111,8 +110,6 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
 
             invocation.setAttachment(TIMEOUT_KEY, String.valueOf(timeout));
 
-            RpcContext.getServiceContext().setRemoteAddress(currentClient.getRemoteAddress());
-
             Integer payload = getUrl().getParameter(PAYLOAD, Integer.class);
 
             Request request = new Request();

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/data/MethodStatComposite.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dubbo.metrics.exception.MetricsNeverHappenException;
 import org.apache.dubbo.metrics.model.MethodMetric;
 import org.apache.dubbo.metrics.model.MetricsCategory;
-import org.apache.dubbo.metrics.model.MetricsSupport;
 import org.apache.dubbo.metrics.model.key.MetricsKeyWrapper;
 import org.apache.dubbo.metrics.model.sample.CounterMetricSample;
 import org.apache.dubbo.metrics.model.sample.GaugeMetricSample;
@@ -65,7 +64,7 @@ public void incrementMethodKey(MetricsKeyWrapper wrapper, Invocation invocation,
             return;
         }
         methodNumStats.get(wrapper).computeIfAbsent(new MethodMetric(getApplicationModel(), invocation), k -> new AtomicLong(0L)).getAndAdd(size);
-        MetricsSupport.fillZero(methodNumStats);
+//        MetricsSupport.fillZero(methodNumStats);
     }
 
     public List<MetricSample> export(MetricsCategory category) {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/data/ServiceStatComposite.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.metrics.model.MetricsCategory;
-import org.apache.dubbo.metrics.model.MetricsSupport;
 import org.apache.dubbo.metrics.model.ServiceKeyMetric;
 import org.apache.dubbo.metrics.model.key.MetricsKeyWrapper;
 import org.apache.dubbo.metrics.model.sample.GaugeMetricSample;
@@ -58,15 +57,15 @@ public void incrementServiceKey(MetricsKeyWrapper wrapper, String serviceKey, in
             return;
         }
         serviceWrapperNumStats.get(wrapper).computeIfAbsent(new ServiceKeyMetric(getApplicationModel(), serviceKey), k -> new AtomicLong(0L)).getAndAdd(size);
-        MetricsSupport.fillZero(serviceWrapperNumStats);
+//        MetricsSupport.fillZero(serviceWrapperNumStats);
     }
 
     public void setServiceKey(MetricsKeyWrapper wrapper, String serviceKey, int num) {
         if (!serviceWrapperNumStats.containsKey(wrapper)) {
             return;
         }
         serviceWrapperNumStats.get(wrapper).computeIfAbsent(new ServiceKeyMetric(getApplicationModel(), serviceKey), k -> new AtomicLong(0L)).set(num);
-        MetricsSupport.fillZero(serviceWrapperNumStats);
+//        MetricsSupport.fillZero(serviceWrapperNumStats);
     }
 
     public List<MetricSample> export(MetricsCategory category) {

File: dubbo-metrics/dubbo-metrics-metadata/src/test/java/org/apache/dubbo/metrics/metadata/MetadataMetricsCollectorTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.dubbo.metrics.model.sample.MetricSample;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -211,7 +212,7 @@ void testStoreProviderMetadataMetrics() {
                 List<MetricSample> metricSamples = collector.collect();
 
                 // App(6) + service success(1)
-                Assertions.assertEquals(MetadataMetricsConstants.APP_LEVEL_KEYS.size() + MetadataMetricsConstants.SERVICE_LEVEL_KEYS.size(), metricSamples.size());
+                Assertions.assertEquals(MetadataMetricsConstants.APP_LEVEL_KEYS.size() + 1, metricSamples.size());
                 Assertions.assertTrue(metricSamples.stream().allMatch(metricSample -> metricSample instanceof GaugeMetricSample));
                 Assertions.assertTrue(metricSamples.stream().anyMatch(metricSample -> ((GaugeMetricSample) metricSample).applyAsDouble() == 1));
                 return null;
@@ -221,7 +222,7 @@ void testStoreProviderMetadataMetrics() {
         // push finish rt +1
         List<MetricSample> metricSamples = collector.collect();
         // App(6) + service total/success(2) + rt(5) = 7
-        Assertions.assertEquals(MetadataMetricsConstants.APP_LEVEL_KEYS.size() + MetadataMetricsConstants.SERVICE_LEVEL_KEYS.size() + 5, metricSamples.size());
+        Assertions.assertEquals(MetadataMetricsConstants.APP_LEVEL_KEYS.size() + 2 + 5, metricSamples.size());
 
         long c1 = metadataEvent.getTimePair().calc();
         metadataEvent = MetadataEvent.toServiceSubscribeEvent(applicationModel, serviceKey);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationPostProcessor.java
Patch:
@@ -428,6 +428,7 @@ private AbstractBeanDefinition buildServiceBeanDefinition(Map<String, Object> se
         BeanDefinitionBuilder builder = rootBeanDefinition(ServiceBean.class);
 
         AbstractBeanDefinition beanDefinition = builder.getBeanDefinition();
+        beanDefinition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR);
 
         MutablePropertyValues propertyValues = beanDefinition.getPropertyValues();
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java
Patch:
@@ -98,6 +98,9 @@ private static RootBeanDefinition parse(Element element, ParserContext parserCon
         RootBeanDefinition beanDefinition = new RootBeanDefinition();
         beanDefinition.setBeanClass(beanClass);
         beanDefinition.setLazyInit(false);
+        if (ServiceBean.class.equals(beanClass)) {
+            beanDefinition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR);
+        }
         // config id
         String configId = resolveAttribute(element, "id", parserContext);
         if (StringUtils.isNotEmpty(configId)) {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/DubboBeanUtils.java
Patch:
@@ -181,23 +181,23 @@ static ReferenceAnnotationBeanPostProcessor getReferenceAnnotationBeanPostProces
 
     static DubboSpringInitContext getInitializationContext(BeanFactory beanFactory) {
         String beanName = DubboSpringInitContext.class.getName();
-        if (beanFactory.containsBean(beanName)) {
+        if (beanFactory != null && beanFactory.containsBean(beanName)) {
             return beanFactory.getBean(beanName, DubboSpringInitContext.class);
         }
         return null;
     }
 
     static ApplicationModel getApplicationModel(BeanFactory beanFactory) {
         String beanName = ApplicationModel.class.getName();
-        if (beanFactory.containsBean(beanName)) {
+        if (beanFactory != null && beanFactory.containsBean(beanName)) {
             return beanFactory.getBean(beanName, ApplicationModel.class);
         }
         return null;
     }
 
     static ModuleModel getModuleModel(BeanFactory beanFactory) {
         String beanName = ModuleModel.class.getName();
-        if (beanFactory.containsBean(beanName)) {
+        if (beanFactory != null && beanFactory.containsBean(beanName)) {
             return beanFactory.getBean(beanName, ModuleModel.class);
         }
         return null;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/ServiceBeanTest.java
Patch:
@@ -43,7 +43,7 @@ public void tearDown() {
     @Test
     void testGetService() {
         TestService service = mock(TestService.class);
-        ServiceBean serviceBean = new ServiceBean(service);
+        ServiceBean serviceBean = new ServiceBean(null, service);
 
         Service beanService = serviceBean.getService();
         MatcherAssert.assertThat(beanService, not(nullValue()));
@@ -52,4 +52,4 @@ void testGetService() {
     abstract class TestService implements Service {
 
     }
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/DataSourceStatusCheckerTest.java
Patch:
@@ -51,7 +51,7 @@ class DataSourceStatusCheckerTest {
     public void setUp() throws Exception {
         initMocks(this);
         this.dataSourceStatusChecker = new DataSourceStatusChecker(applicationContext);
-        new ServiceBean<Object>().setApplicationContext(applicationContext);
+        new ServiceBean<Object>(applicationContext).setApplicationContext(applicationContext);
     }
 
     @AfterEach
@@ -105,4 +105,4 @@ void testWithDatasourceNotHasNextResult() throws SQLException {
 
         assertThat(status.getLevel(), is(Status.Level.ERROR));
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/LoggerCodeConstants.java
Patch:
@@ -92,6 +92,8 @@ public interface LoggerCodeConstants {
 
     String VULNERABILITY_WARNING = "0-28";
 
+    String COMMON_NOT_FOUND_TRACER_DEPENDENCY = "0-29";
+
     /**
      * Used in annotation processor to indicate a deprecated method is invoked.
      */

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployerTest.java
Patch:
@@ -18,15 +18,15 @@
 package org.apache.dubbo.config.deploy;
 
 import org.apache.dubbo.common.utils.Assert;
-import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.metrics.utils.MetricsSupportUtil;
 
 import org.junit.jupiter.api.Test;
 
 class DefaultApplicationDeployerTest {
 
     @Test
     void isSupportPrometheus() {
-        boolean supportPrometheus = new DefaultApplicationDeployer(ApplicationModel.defaultModel()).isSupportPrometheus();
-        Assert.assertTrue(supportPrometheus,"DefaultApplicationDeployer.isSupportPrometheus() should return true");
+        boolean supportPrometheus = MetricsSupportUtil.isSupportPrometheus();
+        Assert.assertTrue(supportPrometheus, "MetricsSupportUtil.isSupportPrometheus() should return true");
     }
 }

File: dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/aggregate/TimeWindowAggregatorTest.java
Patch:
@@ -17,8 +17,9 @@
 
 package org.apache.dubbo.metrics.aggregate;
 
-import org.junit.Test;
+
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.TimeUnit;
 

File: dubbo-metrics/dubbo-tracing/src/main/java/org/apache/dubbo/tracing/DefaultDubboServerObservationConvention.java
Patch:
@@ -14,7 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.observation;
+package org.apache.dubbo.tracing;
+
+import org.apache.dubbo.tracing.context.DubboServerContext;
 
 import io.micrometer.common.KeyValues;
 

File: dubbo-metrics/dubbo-tracing/src/main/java/org/apache/dubbo/tracing/DubboClientObservationConvention.java
Patch:
@@ -14,7 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.observation;
+package org.apache.dubbo.tracing;
+
+import org.apache.dubbo.tracing.context.DubboClientContext;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationConvention;

File: dubbo-metrics/dubbo-tracing/src/main/java/org/apache/dubbo/tracing/DubboObservationDocumentation.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.observation;
+package org.apache.dubbo.tracing;
 
 import io.micrometer.common.docs.KeyName;
 import io.micrometer.common.lang.NonNullApi;

File: dubbo-metrics/dubbo-tracing/src/main/java/org/apache/dubbo/tracing/DubboServerObservationConvention.java
Patch:
@@ -14,7 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.observation;
+package org.apache.dubbo.tracing;
+
+import org.apache.dubbo.tracing.context.DubboServerContext;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationConvention;

File: dubbo-metrics/dubbo-tracing/src/main/java/org/apache/dubbo/tracing/context/DubboServerContext.java
Patch:
@@ -14,13 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.observation;
+package org.apache.dubbo.tracing.context;
 
+import io.micrometer.observation.transport.ReceiverContext;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 
-import io.micrometer.observation.transport.ReceiverContext;
-
 /**
  * Consumer context for RPC.
  */

File: dubbo-metrics/dubbo-tracing/src/test/java/org/apache/dubbo/tracing/DefaultDubboClientObservationConventionTest.java
Patch:
@@ -14,11 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.observation;
+package org.apache.dubbo.tracing;
 
-import org.apache.dubbo.metrics.observation.utils.ObservationConventionUtils;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcInvocation;
+import org.apache.dubbo.tracing.context.DubboClientContext;
+import org.apache.dubbo.tracing.utils.ObservationConventionUtils;
 
 import io.micrometer.common.KeyValues;
 import org.junit.jupiter.api.Assertions;

File: dubbo-metrics/dubbo-tracing/src/test/java/org/apache/dubbo/tracing/MockInvocation.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.observation;
+package org.apache.dubbo.tracing;
 
 import org.apache.dubbo.rpc.AttachmentsAdapter;
 import org.apache.dubbo.rpc.Invoker;
@@ -68,11 +68,11 @@ public String getServiceName() {
     }
 
     public Class<?>[] getParameterTypes() {
-        return new Class[] {String.class};
+        return new Class[]{String.class};
     }
 
     public Object[] getArguments() {
-        return new Object[] {"aa"};
+        return new Object[]{"aa"};
     }
 
     public Map<String, String> getAttachments() {

File: dubbo-metrics/dubbo-tracing/src/test/java/org/apache/dubbo/tracing/filter/AbstractObservationFilterTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.metrics.observation;
+package org.apache.dubbo.tracing.filter;
 
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.TracingConfig;
@@ -24,6 +24,7 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.tracing.MockInvocation;
 
 import io.micrometer.tracing.test.SampleTestRunner;
 import org.junit.jupiter.api.AfterEach;
@@ -79,7 +80,7 @@ void setupConfig() {
     private void initParam() {
         invocation.setTargetServiceUniqueName(GROUP + "/" + INTERFACE_NAME + ":" + VERSION);
         invocation.setMethodName(METHOD_NAME);
-        invocation.setParameterTypes(new Class[] {String.class});
+        invocation.setParameterTypes(new Class[]{String.class});
     }
 
 }

File: dubbo-metrics/dubbo-tracing/src/test/java/org/apache/dubbo/tracing/utils/ObservationConventionUtils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.observation.utils;
+package org.apache.dubbo.tracing.utils;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.rpc.Invoker;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultModuleDeployer.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.config.ReferenceCache;
 import org.apache.dubbo.common.constants.LoggerCodeConstants;
+import org.apache.dubbo.common.constants.RegisterTypeEnum;
 import org.apache.dubbo.common.deploy.AbstractDeployer;
 import org.apache.dubbo.common.deploy.ApplicationDeployer;
 import org.apache.dubbo.common.deploy.DeployListener;
@@ -427,7 +428,7 @@ private void exportServiceInternal(ServiceConfigBase sc) {
             asyncExportingFutures.add(future);
         } else {
             if (!sc.isExported()) {
-                sc.export(false);
+                sc.export(RegisterTypeEnum.AUTO_REGISTER_BY_DEPLOYER);
                 exportedServices.add(sc);
             }
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/Constants.java
Patch:
@@ -21,7 +21,6 @@ public interface Constants {
     String REGISTER_IP_KEY = "register.ip";
 
     String REGISTER_KEY = "register";
-    String REGISTER_ORIGIN_KEY = "register_origin";
 
     String SUBSCRIBE_KEY = "subscribe";
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/PathResolver.java
Patch:
@@ -27,7 +27,9 @@
 @SPI(value = CommonConstants.TRIPLE, scope = ExtensionScope.FRAMEWORK)
 public interface PathResolver {
 
-    void add(String path, Invoker<?> invoker);
+    Invoker<?> add(String path, Invoker<?> invoker);
+
+    Invoker<?> addIfAbsent(String path, Invoker<?> invoker);
 
     Invoker<?> resolve(String path);
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/exportprovider/MultipleRegistryCenterExportProviderIntegrationTest.java
Patch:
@@ -188,7 +188,7 @@ private void afterExport() {
         // 1. InjvmExporter
         // 2. DubboExporter with service-discovery-registry protocol
         // 3. DubboExporter with registry protocol
-        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 7);
+        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 4);
         // The exported exporter contains MultipleRegistryCenterExportProviderFilter
         Assertions.assertTrue(exporterListener.getFilters().contains(filter));
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/single/exportprovider/SingleRegistryCenterExportProviderIntegrationTest.java
Patch:
@@ -195,7 +195,7 @@ private void afterExport() {
         // 1. InjvmExporter
         // 2. DubboExporter with service-discovery-registry protocol
         // 3. DubboExporter with registry protocol
-        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 5);
+        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 4);
         // The exported exporter contains SingleRegistryCenterExportProviderFilter
         Assertions.assertTrue(exporterListener.getFilters().contains(filter));
         // The consumer can be notified and get provider's metadata through metadata mapping info.

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryScopeModelInitializer.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.registry;
 
 import org.apache.dubbo.common.beans.factory.ScopeBeanFactory;
+import org.apache.dubbo.registry.integration.ExporterFactory;
 import org.apache.dubbo.registry.support.RegistryManager;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
@@ -26,7 +27,8 @@
 public class RegistryScopeModelInitializer implements ScopeModelInitializer {
     @Override
     public void initializeFrameworkModel(FrameworkModel frameworkModel) {
-
+        ScopeBeanFactory beanFactory = frameworkModel.getBeanFactory();
+        beanFactory.registerBean(ExporterFactory.class);
     }
 
     @Override

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultModuleDeployer.java
Patch:
@@ -441,7 +441,7 @@ private void registerServiceInternal(ServiceConfigBase sc) {
         if (!sc.isExported()) {
             return;
         }
-        sc.register();
+        sc.register(true);
     }
 
     private void unexportServices() {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/Constants.java
Patch:
@@ -21,6 +21,7 @@ public interface Constants {
     String REGISTER_IP_KEY = "register.ip";
 
     String REGISTER_KEY = "register";
+    String REGISTER_ORIGIN_KEY = "register_origin";
 
     String SUBSCRIBE_KEY = "subscribe";
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java
Patch:
@@ -61,12 +61,12 @@
 import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SPLIT_PATTERN;
 import static org.apache.dubbo.common.constants.CommonConstants.FILE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_LOCAL_FILE_CACHE_ENABLED;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_EMPTY_ADDRESS;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_NOTIFY_EVENT;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_DELETE_LOCKFILE;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_DESTROY_UNREGISTER_URL;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_NOTIFY_EVENT;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_READ_WRITE_CACHE_FILE;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_DELETE_LOCKFILE;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 import static org.apache.dubbo.common.constants.RegistryConstants.ACCEPTS_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.DYNAMIC_KEY;

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmInvoker.java
Patch:
@@ -229,7 +229,7 @@ private Invocation recreateInvocation(Invocation invocation, Invoker<?> invoker,
                 if (pts != null && args != null && pts.length == args.length) {
                     realArgument = new Object[pts.length];
                     for (int i = 0; i < pts.length; i++) {
-                        realArgument[i] = paramDeepCopyUtil.copy(invoker.getUrl(), args[i], pts[i]);
+                        realArgument[i] = paramDeepCopyUtil.copy(getUrl(), args[i], pts[i]);
                     }
                 }
                 if (realArgument == null) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationUtils.java
Patch:
@@ -44,7 +44,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_SERVER_SHUTDOWN_TIMEOUT;
 import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_SECONDS_KEY;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_UNEXPECTED_EXCEPTION;
 
 /**
  * Utilities for manipulating configurations from different sources
@@ -174,7 +173,7 @@ public static int get(ScopeModel scopeModel, String property, int defaultValue)
     public static Map<String, String> parseProperties(String content) throws IOException {
         Map<String, String> map = new HashMap<>();
         if (StringUtils.isEmpty(content)) {
-            logger.warn(COMMON_UNEXPECTED_EXCEPTION, "", "", "Config center was specified, but no config item found.");
+            logger.info("Config center was specified, but no config item found.");
         } else {
             Properties properties = new Properties();
             properties.load(new StringReader(content));

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/InternalServiceConfigBuilder.java
Patch:
@@ -275,6 +275,7 @@ public ServiceConfig<T> build(Consumer<ServiceConfig<T>> configConsumer){
         serviceConfig.setRef(this.ref);
         serviceConfig.setGroup(applicationConfig.getName());
         serviceConfig.setVersion("1.0.0");
+        serviceConfig.setFilter("-default");
 
         serviceConfig.setExecutor(executor);
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/exportprovider/MultipleRegistryCenterExportProviderIntegrationTest.java
Patch:
@@ -188,7 +188,7 @@ private void afterExport() {
         // 1. InjvmExporter
         // 2. DubboExporter with service-discovery-registry protocol
         // 3. DubboExporter with registry protocol
-        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 5);
+        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 7);
         // The exported exporter contains MultipleRegistryCenterExportProviderFilter
         Assertions.assertTrue(exporterListener.getFilters().contains(filter));
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/injvm/MultipleRegistryCenterInjvmIntegrationTest.java
Patch:
@@ -156,7 +156,7 @@ private void afterExport() {
         // The MultipleRegistryCenterInjvmService is exported
         Assertions.assertTrue(serviceListener.getExportedServices().get(0).isExported());
         // The exported exporter is only one
-        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 1);
+        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 3);
         // The exported exporter contains MultipleRegistryCenterInjvmFilter
         Assertions.assertTrue(exporterListener.getFilters().contains(filter));
     }
@@ -189,4 +189,4 @@ public void tearDown() throws IOException {
         serviceListener = null;
         logger.info(getClass().getSimpleName() + " testcase is ending...");
     }
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/single/exportprovider/SingleRegistryCenterExportProviderIntegrationTest.java
Patch:
@@ -195,7 +195,7 @@ private void afterExport() {
         // 1. InjvmExporter
         // 2. DubboExporter with service-discovery-registry protocol
         // 3. DubboExporter with registry protocol
-        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 3);
+        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 5);
         // The exported exporter contains SingleRegistryCenterExportProviderFilter
         Assertions.assertTrue(exporterListener.getFilters().contains(filter));
         // The consumer can be notified and get provider's metadata through metadata mapping info.
@@ -244,4 +244,4 @@ public void tearDown() throws IOException {
         logger.info(getClass().getSimpleName() + " testcase is ending...");
         registryProtocolListener = null;
     }
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/single/injvm/SingleRegistryCenterInjvmIntegrationTest.java
Patch:
@@ -156,7 +156,7 @@ private void afterExport() {
         // The SingleRegistryCenterInjvmService is exported
         Assertions.assertTrue(serviceListener.getExportedServices().get(0).isExported());
         // The exported exporter is only one
-        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 1);
+        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 3);
         // The exported exporter contains SingleRegistryCenterInjvmFilter
         Assertions.assertTrue(exporterListener.getFilters().contains(filter));
     }
@@ -188,4 +188,4 @@ public void tearDown() throws IOException {
         serviceListener = null;
         logger.info(getClass().getSimpleName() + " testcase is ending...");
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/support/ConsumerContextFilter.java
Patch:
@@ -110,7 +110,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
                     if (timeoutCountDown.isExpired()) {
                         return AsyncRpcResult.newDefaultAsyncResult(new RpcException(RpcException.TIMEOUT_TERMINATE,
                             "No time left for making the following call: " + invocation.getServiceName() + "."
-                                + invocation.getMethodName() + ", terminate directly."), invocation);
+                                + RpcUtils.getMethodName(invocation) + ", terminate directly."), invocation);
                     }
                 }
             }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/AbstractLoadBalance.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.cluster.ClusterInvoker;
 import org.apache.dubbo.rpc.cluster.LoadBalance;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.List;
 
@@ -83,7 +84,7 @@ protected int getWeight(Invoker<?> invoker, Invocation invocation) {
         if (REGISTRY_SERVICE_REFERENCE_PATH.equals(url.getServiceInterface())) {
             weight = url.getParameter(WEIGHT_KEY, DEFAULT_WEIGHT);
         } else {
-            weight = url.getMethodParameter(invocation.getMethodName(), WEIGHT_KEY, DEFAULT_WEIGHT);
+            weight = url.getMethodParameter(RpcUtils.getMethodName(invocation), WEIGHT_KEY, DEFAULT_WEIGHT);
             if (weight > 0) {
                 long timestamp = invoker.getUrl().getParameter(TIMESTAMP_KEY, 0L);
                 if (timestamp > 0L) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/LeastActiveLoadBalance.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcStatus;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.List;
 import java.util.concurrent.ThreadLocalRandom;
@@ -60,7 +61,7 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
         for (int i = 0; i < length; i++) {
             Invoker<T> invoker = invokers.get(i);
             // Get the active number of the invoker
-            int active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive();
+            int active = RpcStatus.getStatus(invoker.getUrl(), RpcUtils.getMethodName(invocation)).getActive();
             // Get the weight of the invoker's configuration. The default value is 100.
             int afterWarmup = getWeight(invoker, invocation);
             // save for later use
@@ -97,7 +98,7 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
             return invokers.get(leastIndexes[0]);
         }
         if (!sameWeight && totalWeight > 0) {
-            // If (not every invoker has the same weight & at least one invoker's weight>0), select randomly based on 
+            // If (not every invoker has the same weight & at least one invoker's weight>0), select randomly based on
             // totalWeight.
             int offsetWeight = ThreadLocalRandom.current().nextInt(totalWeight);
             // Return a invoker based on the random value.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/RandomLoadBalance.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.cluster.ClusterInvoker;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.Arrays;
 import java.util.List;
@@ -115,7 +116,7 @@ private <T> boolean needWeightLoadBalance(List<Invoker<T>> invokers, Invocation
             String weight = invokerUrl.getParameter(WEIGHT_KEY);
             return StringUtils.isNotEmpty(weight);
         } else {
-            String weight = invokerUrl.getMethodParameter(invocation.getMethodName(), WEIGHT_KEY);
+            String weight = invokerUrl.getMethodParameter(RpcUtils.getMethodName(invocation), WEIGHT_KEY);
             if (StringUtils.isNotEmpty(weight)) {
                 return true;
             } else {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalance.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.Collection;
 import java.util.List;
@@ -79,7 +80,7 @@ public void setLastUpdate(long lastUpdate) {
      * @return
      */
     protected <T> Collection<String> getInvokerAddrList(List<Invoker<T>> invokers, Invocation invocation) {
-        String key = invokers.get(0).getUrl().getServiceKey() + "." + invocation.getMethodName();
+        String key = invokers.get(0).getUrl().getServiceKey() + "." + RpcUtils.getMethodName(invocation);
         Map<String, WeightedRoundRobin> map = methodWeightMap.get(key);
         if (map != null) {
             return map.keySet();
@@ -89,7 +90,7 @@ protected <T> Collection<String> getInvokerAddrList(List<Invoker<T>> invokers, I
 
     @Override
     protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {
-        String key = invokers.get(0).getUrl().getServiceKey() + "." + invocation.getMethodName();
+        String key = invokers.get(0).getUrl().getServiceKey() + "." + RpcUtils.getMethodName(invocation);
         ConcurrentMap<String, WeightedRoundRobin> map = ConcurrentHashMapUtils.computeIfAbsent(methodWeightMap, key, k -> new ConcurrentHashMap<>());
         int totalWeight = 0;
         long maxCurrent = Long.MIN_VALUE;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/ShortestResponseLoadBalance.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.rpc.cluster.Constants;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ScopeModelAware;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
@@ -116,7 +117,7 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
         // Filter out all the shortest response invokers
         for (int i = 0; i < length; i++) {
             Invoker<T> invoker = invokers.get(i);
-            RpcStatus rpcStatus = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName());
+            RpcStatus rpcStatus = RpcStatus.getStatus(invoker.getUrl(), RpcUtils.getMethodName(invocation));
             SlideWindowData slideWindowData = ConcurrentHashMapUtils.computeIfAbsent(methodMap, rpcStatus, SlideWindowData::new);
 
             // Calculate the estimated response time from the product of active connections and succeeded average elapsed time.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/matcher/AbstractConditionMatcher.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.cluster.router.condition.matcher.pattern.ValuePattern;
 import org.apache.dubbo.rpc.model.ModuleModel;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.HashSet;
 import java.util.List;
@@ -55,7 +56,7 @@ public static String getSampleValueFromUrl(String conditionKey, Map<String, Stri
         String sampleValue;
         //get real invoked method name from invocation
         if (invocation != null && (METHOD_KEY.equals(conditionKey) || METHODS_KEY.equals(conditionKey))) {
-            sampleValue = invocation.getMethodName();
+            sampleValue = RpcUtils.getMethodName(invocation);
         } else {
             sampleValue = sample.get(conditionKey);
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/DubboMethodMatch.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match;
 
 import org.apache.dubbo.rpc.Invocation;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.List;
 import java.util.Map;
@@ -83,7 +84,7 @@ public String toString() {
 
     public boolean isMatch(Invocation invocation) {
         StringMatch nameMatch = getName_match();
-        if (nameMatch != null && !nameMatch.isMatch(invocation.getMethodName())) {
+        if (nameMatch != null && !nameMatch.isMatch(RpcUtils.getMethodName(invocation))) {
             return false;
         }
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/script/ScriptStateRouter.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode;
 import org.apache.dubbo.rpc.cluster.router.state.AbstractStateRouter;
 import org.apache.dubbo.rpc.cluster.router.state.BitList;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import javax.script.Bindings;
 import javax.script.Compilable;
@@ -139,7 +140,7 @@ protected BitList<Invoker<T>> doRoute(BitList<Invoker<T>> invokers, URL url, Inv
                 return function.eval(bindings);
             } catch (ScriptException e) {
                 logger.error(CLUSTER_SCRIPT_EXCEPTION, "Scriptrouter exec script error", "", "Script route error, rule has been ignored. rule: " + rule + ", method:" +
-                    invocation.getMethodName() + ", url: " + RpcContext.getContext().getUrl(), e);
+                    RpcUtils.getMethodName(invocation) + ", url: " + RpcContext.getContext().getUrl(), e);
                 return invokers;
             }
         }, accessControlContext));

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -158,7 +158,7 @@ protected Invoker<T> select(LoadBalance loadbalance, Invocation invocation,
         if (CollectionUtils.isEmpty(invokers)) {
             return null;
         }
-        String methodName = invocation == null ? StringUtils.EMPTY_STRING : invocation.getMethodName();
+        String methodName = invocation == null ? StringUtils.EMPTY_STRING : RpcUtils.getMethodName(invocation);
 
         boolean sticky = invokers.get(0).getUrl()
             .getMethodParameter(methodName, CLUSTER_STICKY_KEY, DEFAULT_CLUSTER_STICKY);
@@ -363,7 +363,7 @@ public String toString() {
     protected void checkInvokers(List<Invoker<T>> invokers, Invocation invocation) {
         if (CollectionUtils.isEmpty(invokers)) {
             throw new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER, "Failed to invoke the method "
-                + invocation.getMethodName() + " in the service " + getInterface().getName()
+                + RpcUtils.getMethodName(invocation) + " in the service " + getInterface().getName()
                 + ". No provider available for the service " + getDirectory().getConsumerUrl().getServiceKey()
                 + " from registry " + getDirectory().getUrl().getAddress()
                 + " on the consumer " + NetUtils.getLocalHost()

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvoker.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.cluster.Directory;
 import org.apache.dubbo.rpc.cluster.LoadBalance;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.List;
 
@@ -51,7 +52,7 @@ public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBal
             throw new RpcException(e instanceof RpcException ? ((RpcException) e).getCode() : 0,
                 "Failfast invoke providers " + invoker.getUrl() + " " + loadbalance.getClass().getSimpleName()
                     + " for service " + getInterface().getName()
-                    + " method " + invocation.getMethodName() + " on consumer " + NetUtils.getLocalHost()
+                    + " method " + RpcUtils.getMethodName(invocation) + " on consumer " + NetUtils.getLocalHost()
                     + " use dubbo version " + Version.getVersion()
                     + ", but no luck to perform the invocation. Last error is: " + e.getMessage(),
                 e.getCause() != null ? e.getCause() : e);

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/loadbalance/AbstractLoadBalance.java
Patch:
@@ -17,6 +17,8 @@
 
 package com.alibaba.dubbo.rpc.cluster.loadbalance;
 
+import org.apache.dubbo.rpc.support.RpcUtils;
+
 import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.rpc.Invocation;
@@ -40,7 +42,7 @@ public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invo
     protected abstract <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation);
 
     protected int getWeight(Invoker<?> invoker, Invocation invocation) {
-        int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT);
+        int weight = invoker.getUrl().getMethodParameter(RpcUtils.getMethodName(invocation), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT);
         if (weight > 0) {
             long timestamp = invoker.getUrl().getParameter(Constants.TIMESTAMP_KEY, 0L);
             if (timestamp > 0L) {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/data/RtStatComposite.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.dubbo.metrics.report.AbstractMetricsExport;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -94,7 +95,7 @@ public void calcServiceKeyRt(String serviceKey, String registryOpType, Long resp
 
     public void calcMethodKeyRt(Invocation invocation, String registryOpType, Long responseTime) {
         for (LongContainer container : rtStats.stream().filter(longContainer -> longContainer.specifyType(registryOpType)).collect(Collectors.toList())) {
-            Number current = (Number) ConcurrentHashMapUtils.computeIfAbsent(container, invocation.getTargetServiceUniqueName() + "_" + invocation.getMethodName(), container.getInitFunc());
+            Number current = (Number) ConcurrentHashMapUtils.computeIfAbsent(container, invocation.getTargetServiceUniqueName() + "_" + RpcUtils.getMethodName(invocation), container.getInitFunc());
             container.getConsumerFunc().accept(responseTime, current);
         }
     }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MethodMetric.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.metrics.model.sample.MetricSample;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.Map;
 import java.util.Objects;
@@ -40,7 +41,7 @@ public class MethodMetric extends ServiceKeyMetric {
 
     public MethodMetric(ApplicationModel applicationModel, Invocation invocation) {
         super(applicationModel, MetricsSupport.getInterfaceName(invocation));
-        this.methodName = MetricsSupport.getMethodName(invocation);
+        this.methodName = RpcUtils.getMethodName(invocation);
         this.side = MetricsSupport.getSide(invocation);
         this.group = MetricsSupport.getGroup(invocation);
         this.version = MetricsSupport.getVersion(invocation);

File: dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/MonitorFilter.java
Patch:
@@ -116,7 +116,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
      * @return
      */
     private AtomicInteger getConcurrent(Invoker<?> invoker, Invocation invocation) {
-        String key = invoker.getInterface().getName() + "." + invocation.getMethodName();
+        String key = invoker.getInterface().getName() + "." + RpcUtils.getMethodName(invocation);
         return ConcurrentHashMapUtils.computeIfAbsent(concurrents, key, k -> new AtomicInteger());
     }
 

File: dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/AccessKeyAuthenticator.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 public class AccessKeyAuthenticator implements Authenticator {
     private final ApplicationModel applicationModel;
@@ -54,7 +55,7 @@ public void authenticate(Invocation invocation, URL url) throws RpcAuthenticatio
         if (StringUtils.isAnyEmpty(accessKeyId, consumer, requestTimestamp, originSignature)) {
             throw new RpcAuthenticationException("Failed to authenticate, maybe consumer side did not enable the auth");
         }
-        
+
         AccessKeyPair accessKeyPair;
         try {
             accessKeyPair = getAccessKeyPair(invocation, url);
@@ -86,7 +87,7 @@ AccessKeyPair getAccessKeyPair(Invocation invocation, URL url) {
     }
 
     String getSignature(URL url, Invocation invocation, String secretKey, String time) {
-        String requestString = String.format(Constants.SIGNATURE_STRING_FORMAT, url.getColonSeparatedKey(), invocation.getMethodName(), secretKey, time);
+        String requestString = String.format(Constants.SIGNATURE_STRING_FORMAT, url.getColonSeparatedKey(), RpcUtils.getMethodName(invocation), secretKey, time);
         boolean parameterEncrypt = url.getParameter(Constants.PARAMETER_SIGNATURE_ENABLE_KEY, false);
         if (parameterEncrypt) {
             return SignatureUtils.sign(invocation.getArguments(), requestString, secretKey);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.support.AccessLogData;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.io.File;
 import java.io.FileWriter;
@@ -198,7 +199,7 @@ private void processWithAccessKeyLogger(Queue<AccessLogData> logQueue, File file
     private AccessLogData buildAccessLogData(Invoker<?> invoker, Invocation inv) {
         AccessLogData logData = AccessLogData.newLogData();
         logData.setServiceName(invoker.getInterface().getName());
-        logData.setMethodName(inv.getMethodName());
+        logData.setMethodName(RpcUtils.getMethodName(inv));
         logData.setVersion(invoker.getUrl().getVersion());
         logData.setGroup(invoker.getUrl().getGroup());
         logData.setInvocationTime(new Date());

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ProfilerServerFilter.java
Patch:
@@ -103,7 +103,7 @@ private void dumpIfNeed(Invoker<?> invoker, Invocation invocation, ProfilerEntry
         Long timeout = RpcUtils.convertToNumber(invocation.getObjectAttachmentWithoutConvert(TIMEOUT_KEY));
 
         if (timeout == null) {
-            timeout = (long) invoker.getUrl().getMethodPositiveParameter(invocation.getMethodName(), TIMEOUT_KEY, DEFAULT_TIMEOUT);
+            timeout = (long) invoker.getUrl().getMethodPositiveParameter(RpcUtils.getMethodName(invocation), TIMEOUT_KEY, DEFAULT_TIMEOUT);
         }
         long usage = profiler.getEndTime() - profiler.getStartTime();
         if (((usage / (1000_000L * ProfilerSwitch.getWarnPercent())) > timeout) && timeout != -1) {
@@ -118,7 +118,7 @@ private void dumpIfNeed(Invoker<?> invoker, Invocation invocation, ProfilerEntry
                         "client: %s\n" +
                         "invocation context:\n%s" +
                         "thread info: \n%s",
-                    invocation.getTargetServiceUniqueName(), invocation.getMethodName(), usage / 1000_000, usage % 1000_000, timeout,
+                    invocation.getTargetServiceUniqueName(), RpcUtils.getMethodName(invocation), usage / 1000_000, usage % 1000_000, timeout,
                     invocation.get(CLIENT_IP_KEY), attachment, Profiler.buildDetail(profiler)));
         }
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/TimeoutFilter.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.TimeoutCountDown;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import static org.apache.dubbo.common.constants.CommonConstants.TIME_COUNTDOWN_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROXY_TIMEOUT_REQUEST;
@@ -51,7 +52,7 @@ public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invoca
             TimeoutCountDown countDown = (TimeoutCountDown) obj;
             if (countDown.isExpired()) {
                 if (logger.isWarnEnabled()) {
-                    logger.warn(PROXY_TIMEOUT_REQUEST, "", "", "invoke timed out. method: " + invocation.getMethodName() +
+                    logger.warn(PROXY_TIMEOUT_REQUEST, "", "", "invoke timed out. method: " + RpcUtils.getMethodName(invocation) +
                         " url is " + invoker.getUrl() + ", invoke elapsed " + countDown.elapsedMillis() + " ms.");
                 }
             }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/TokenFilter.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 
@@ -45,7 +46,7 @@ public Result invoke(Invoker<?> invoker, Invocation inv)
             Class<?> serviceType = invoker.getInterface();
             String remoteToken = (String) inv.getObjectAttachmentWithoutConvert(TOKEN_KEY);
             if (!token.equals(remoteToken)) {
-                throw new RpcException("Invalid token! Forbid invoke remote service " + serviceType + " method " + inv.getMethodName() +
+                throw new RpcException("Invalid token! Forbid invoke remote service " + serviceType + " method " + RpcUtils.getMethodName(inv) +
                         "() from consumer " + RpcContext.getServiceContext().getRemoteHost() + " to provider " +
                         RpcContext.getServiceContext().getLocalHost()+ ", consumer incorrect token is " + remoteToken);
             }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/TokenHeaderFilter.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 import static org.apache.dubbo.rpc.RpcException.FORBIDDEN_EXCEPTION;
@@ -36,7 +37,7 @@ public RpcInvocation invoke(Invoker<?> invoker, RpcInvocation invocation) throws
             Class<?> serviceType = invoker.getInterface();
             String remoteToken = (String) invocation.getObjectAttachmentWithoutConvert(TOKEN_KEY);
             if (!token.equals(remoteToken)) {
-                throw new RpcException(FORBIDDEN_EXCEPTION, "Forbid invoke remote service " + serviceType + " method " + invocation.getMethodName() +
+                throw new RpcException(FORBIDDEN_EXCEPTION, "Forbid invoke remote service " + serviceType + " method " + RpcUtils.getMethodName(invocation) +
                     "() from consumer " + RpcContext.getServiceContext().getRemoteHost() + " to provider " +
                     RpcContext.getServiceContext().getLocalHost() + ", consumer incorrect token is " + remoteToken);
             }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/TpsLimitFilter.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.filter.tps.DefaultTPSLimiter;
 import org.apache.dubbo.rpc.filter.tps.TPSLimiter;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import static org.apache.dubbo.rpc.Constants.TPS_LIMIT_RATE_KEY;
 
@@ -49,7 +50,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
                     "Failed to invoke service " +
                             invoker.getInterface().getName() +
                             "." +
-                            invocation.getMethodName() +
+                        RpcUtils.getMethodName(invocation) +
                             " because exceed max service tps.");
         }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/tps/DefaultTPSLimiter.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.rpc.Invocation;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -38,8 +39,8 @@ public class DefaultTPSLimiter implements TPSLimiter {
 
     @Override
     public boolean isAllowable(URL url, Invocation invocation) {
-        int rate = url.getMethodParameter(invocation.getMethodName(), TPS_LIMIT_RATE_KEY, -1);
-        long interval = url.getMethodParameter(invocation.getMethodName(), TPS_LIMIT_INTERVAL_KEY, DEFAULT_TPS_LIMIT_INTERVAL);
+        int rate = url.getMethodParameter(RpcUtils.getMethodName(invocation), TPS_LIMIT_RATE_KEY, -1);
+        long interval = url.getMethodParameter(RpcUtils.getMethodName(invocation), TPS_LIMIT_INTERVAL_KEY, DEFAULT_TPS_LIMIT_INTERVAL);
         String serviceKey = url.getServiceKey();
         if (rate > 0) {
             StatItem statItem = stats.get(serviceKey);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/AccessLogData.java
Patch:
@@ -284,7 +284,7 @@ private void set(String key, Object value) {
 
     public void buildAccessLogData(Invoker<?> invoker, Invocation inv) {
         setServiceName(invoker.getInterface().getName());
-        setMethodName(inv.getMethodName());
+        setMethodName(RpcUtils.getMethodName(inv));
         setVersion(invoker.getUrl().getVersion());
         setGroup(invoker.getUrl().getGroup());
         setInvocationTime(new Date());

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/ChannelWrappedInvoker.java
Patch:
@@ -81,7 +81,7 @@ protected Result doInvoke(Invocation invocation) throws Throwable {
 
         try {
             if (RpcUtils.isOneway(getUrl(), inv)) { // may have concurrency issue
-                currentClient.send(request, getUrl().getMethodParameter(invocation.getMethodName(), SENT_KEY, false));
+                currentClient.send(request, getUrl().getMethodParameter(RpcUtils.getMethodName(invocation), SENT_KEY, false));
                 return AsyncRpcResult.newDefaultAsyncResult(invocation);
             } else {
                 CompletableFuture<AppResponse> appResponseFuture = currentClient.request(request).thenApply(AppResponse.class::cast);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/TraceFilter.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
+import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.ArrayList;
 import java.util.Set;
@@ -79,7 +80,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         Result result = invoker.invoke(invocation);
         long end = System.currentTimeMillis();
         if (TRACERS.size() > 0) {
-            String key = invoker.getInterface().getName() + "." + invocation.getMethodName();
+            String key = invoker.getInterface().getName() + "." + RpcUtils.getMethodName(invocation);
             Set<Channel> channels = TRACERS.get(key);
             if (CollectionUtils.isEmpty(channels)) {
                 key = invoker.getInterface().getName();
@@ -105,7 +106,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
                                 String prompt = channel.getUrl().getParameter(Constants.PROMPT_KEY, Constants.DEFAULT_PROMPT);
                                 channel.send("\r\n" + RpcContext.getServiceContext().getRemoteAddress() + " -> "
                                     + invoker.getInterface().getName()
-                                    + "." + invocation.getMethodName()
+                                    + "." + RpcUtils.getMethodName(invocation)
                                     + "(" + JsonUtils.toJson(invocation.getArguments()) + ")" + " -> " + JsonUtils.toJson(result.getValue())
                                     + "\r\nelapsed: " + (end - start) + " ms."
                                     + "\r\n\r\n" + prompt);

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmInvoker.java
Patch:
@@ -103,11 +103,11 @@ public Result doInvoke(Invocation invocation) throws Throwable {
             invocation.setAttachment(Constants.TOKEN_KEY, serverURL.getParameter(Constants.TOKEN_KEY));
         }
 
-        int timeout = RpcUtils.calculateTimeout(getUrl(), invocation, invocation.getMethodName(), DEFAULT_TIMEOUT);
+        int timeout = RpcUtils.calculateTimeout(getUrl(), invocation, RpcUtils.getMethodName(invocation), DEFAULT_TIMEOUT);
         if (timeout <= 0) {
             return AsyncRpcResult.newDefaultAsyncResult(new RpcException(RpcException.TIMEOUT_TERMINATE,
                 "No time left for making the following call: " + invocation.getServiceName() + "."
-                    + invocation.getMethodName() + ", terminate directly."), invocation);
+                    + RpcUtils.getMethodName(invocation) + ", terminate directly."), invocation);
         }
         invocation.setAttachment(TIMEOUT_KEY, String.valueOf(timeout));
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -219,11 +219,11 @@ StreamObserver<Object> streamCall(ClientCall call,
     AsyncRpcResult invokeUnary(MethodDescriptor methodDescriptor, Invocation invocation,
                                ClientCall call, Executor callbackExecutor) {
 
-        int timeout = RpcUtils.calculateTimeout(getUrl(), invocation, invocation.getMethodName(), 3000);
+        int timeout = RpcUtils.calculateTimeout(getUrl(), invocation, RpcUtils.getMethodName(invocation), 3000);
         if (timeout <= 0) {
             return AsyncRpcResult.newDefaultAsyncResult(new RpcException(RpcException.TIMEOUT_TERMINATE,
                 "No time left for making the following call: " + invocation.getServiceName() + "."
-                    + invocation.getMethodName() + ", terminate directly."), invocation);
+                    + RpcUtils.getMethodName(invocation)+ ", terminate directly."), invocation);
         }
         invocation.setAttachment(TIMEOUT_KEY, String.valueOf(timeout));
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java
Patch:
@@ -183,7 +183,7 @@ public Result get() throws InterruptedException, ExecutionException {
         if (executor != null && executor instanceof ThreadlessExecutor) {
             ThreadlessExecutor threadlessExecutor = (ThreadlessExecutor) executor;
             try {
-                while (!responseFuture.isDone()) {
+                while (!responseFuture.isDone() && !threadlessExecutor.isShutdown()) {
                     threadlessExecutor.waitAndDrain(Long.MAX_VALUE);
                 }
             } finally {
@@ -199,7 +199,7 @@ public Result get(long timeout, TimeUnit unit) throws InterruptedException, Exec
         if (executor != null && executor instanceof ThreadlessExecutor) {
             ThreadlessExecutor threadlessExecutor = (ThreadlessExecutor) executor;
             try {
-                while (!responseFuture.isDone()) {
+                while (!responseFuture.isDone() && !threadlessExecutor.isShutdown()) {
                     long restTime = deadline - System.nanoTime();
                     if (restTime > 0) {
                         threadlessExecutor.waitAndDrain(deadline);

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dubbo.common.utils.MethodUtils;
 import org.apache.dubbo.common.utils.ReflectUtils;
 import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.common.utils.ToStringUtils;
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.config.context.ConfigMode;
 import org.apache.dubbo.config.support.Nested;
@@ -967,7 +968,7 @@ public String toString() {
                         buf.append(' ');
                         buf.append(key);
                         buf.append("=\"");
-                        buf.append(key.equals("password") ? "******" : value);
+                        buf.append(key.equals("password") ? "******" : ToStringUtils.toString(value));
                         buf.append('\"');
                     }
                 } catch (Exception e) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractProtocol.java
Patch:
@@ -42,7 +42,6 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
 
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;
@@ -63,7 +62,7 @@ public abstract class AbstractProtocol implements Protocol, ScopeModelAware {
     /**
      * <host:port, ProtocolServer>
      */
-    protected final ConcurrentMap<String, ProtocolServer> serverMap = new ConcurrentHashMap<>();
+    protected final Map<String, ProtocolServer> serverMap = new ConcurrentHashMap<>();
 
     // TODO SoftReference
     protected final Set<Invoker<?>> invokers = new ConcurrentHashSet<>();

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/AbstractConfigurator.java
Patch:
@@ -128,7 +128,7 @@ private URL configureIfMatch(String host, URL url) {
                 if (apiVersion != null && apiVersion.startsWith(RULE_VERSION_V30)) {
                     ConditionMatch matcher = (ConditionMatch) configuratorUrl.getAttribute(MATCH_CONDITION);
                     if (matcher != null) {
-                        if (matcher.isMatch(url)) {
+                        if (matcher.isMatch(host, url)) {
                             return doConfigure(url, configuratorUrl.removeParameters(conditionKeys));
                         } else {
                             logger.debug("Cannot apply configurator rule, param mismatch, current params are " + url + ", params in rule is " + matcher);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/parser/model/ParamMatch.java
Patch:
@@ -40,12 +40,12 @@ public void setValue(StringMatch value) {
     }
 
     public boolean isMatch(URL url) {
-        if (key == null) {
+        if (key == null || value == null) {
             return false;
         }
 
         String input = url.getParameter(key);
-        return input != null && value.isMatch(input);
+        return value.isMatch(input);
     }
 
     @Override

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/model/ParamMatch.java
Patch:
@@ -39,7 +39,7 @@ public void setValue(StringMatch value) {
     }
 
     public boolean isMatch(String input) {
-        if (getValue() != null && input != null) {
+        if (getValue() != null) {
             return getValue().isMatch(input);
         }
         return false;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -248,7 +248,9 @@ public void doUnsubscribe(URL url, NotifyListener listener) {
         serviceDiscovery.unsubscribe(url, listener);
         String protocolServiceKey = url.getProtocolServiceKey();
         Set<String> serviceNames = serviceNameMapping.getMapping(url);
-        serviceNameMapping.stopListen(url, mappingListeners.remove(protocolServiceKey));
+        if (mappingListeners.get(protocolServiceKey) != null) {
+            serviceNameMapping.stopListen(url, mappingListeners.remove(protocolServiceKey));
+        }
         if (CollectionUtils.isNotEmpty(serviceNames)) {
             String serviceNamesKey = toStringKeys(serviceNames);
             Lock appSubscriptionLock = getAppSubscription(serviceNamesKey);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableStateRouter.java
Patch:
@@ -64,8 +64,8 @@ public ListenableStateRouter(URL url, String ruleKey) {
 
     @Override
     public synchronized void process(ConfigChangedEvent event) {
-        if (logger.isDebugEnabled()) {
-            logger.debug("Notification of condition rule, change type is: " + event.getChangeType() +
+        if (logger.isInfoEnabled()) {
+            logger.info("Notification of condition rule, change type is: " + event.getChangeType() +
                     ", raw rule is:\n " + event.getContent());
         }
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStateRouter.java
Patch:
@@ -63,8 +63,8 @@ public TagStateRouter(URL url) {
 
     @Override
     public synchronized void process(ConfigChangedEvent event) {
-        if (logger.isDebugEnabled()) {
-            logger.debug("Notification of tag rule, change type is: " + event.getChangeType() + ", raw rule is:\n " +
+        if (logger.isInfoEnabled()) {
+            logger.info("Notification of tag rule, change type is: " + event.getChangeType() + ", raw rule is:\n " +
                 event.getContent());
         }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Constants.java
Patch:
@@ -134,6 +134,8 @@ public interface Constants {
 
     int DEFAULT_RECONNECT_PERIOD = 2000;
 
+    String CHANNEL_SHUTDOWN_TIMEOUT_KEY = "channel.shutdown.timeout";
+
     String SEND_RECONNECT_KEY = "send.reconnect";
 
     String CHECK_KEY = "check";

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/DefaultFutureTest.java
Patch:
@@ -167,7 +167,7 @@ void testClose() {
         ExecutorService executor = ExtensionLoader.getExtensionLoader(ExecutorRepository.class)
             .getDefaultExtension().createExecutorIfAbsent(URL.valueOf("dubbo://127.0.0.1:23456"));
         DefaultFuture.newFuture(channel, request, 1000, executor);
-        DefaultFuture.closeChannel(channel);
+        DefaultFuture.closeChannel(channel, 0);
         Assertions.assertFalse(executor.isTerminated());
     }
 

File: dubbo-test/dubbo-test-modules/src/test/java/org/apache/dubbo/dependency/FileTest.java
Patch:
@@ -61,7 +61,7 @@ class FileTest {
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-distribution"));
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-metadata-processor"));
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-native.*"));
-        ignoredModulesInDubboAll.add(Pattern.compile("dubbo-spring-boot.*"));
+        ignoredModulesInDubboAll.add(Pattern.compile(".*spring-boot.*"));
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-maven-plugin"));
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/DefaultFutureTest.java
Patch:
@@ -142,7 +142,7 @@ void interruptSend() throws Exception {
         try {
             new InterruptThread(Thread.currentThread()).start();
             while (!f. isDone()){
-                executor.waitAndDrain();
+                executor.waitAndDrain(Long.MAX_VALUE);
             }
             f.get();
         } catch (Exception e) {

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/container/page/PageServlet.java
Patch:
@@ -250,7 +250,7 @@ protected final void writeTable(PrintWriter writer, String title, List<String> c
                             + n
                             + "_' + i + '_' + j).innerHTML; if (iv.length > 0 && (tv.length < iv.length || tv.indexOf(iv) == -1)) { m = false; break; } } } document.getElementById('tr_"
                             + n
-                            + "_' + i).style.display = (m ? '' : 'none');}\" sytle=\"width: 100%\" />";
+                            + "_' + i).style.display = (m ? '' : 'none');}\" style=\"width: 100%\" />";
                 }
                 writer.println("        <td>" + col + "</td>");
             }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboSpringInitCustomizerHolder.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Set;
 
 /**
- * Hold a set of DubboSpringInitCustomizer, for register customizers by programing.
+ * Hold a set of DubboSpringInitCustomizer, for register customizers by programming.
  * <p>All customizers are store in thread local, and they will be clear after apply once.</p>
  *
  * <p>Usages:</p>

File: dubbo-demo/dubbo-demo-interface/src/main/java/org/apache/dubbo/demo/rest/api/JaxRsRestDemoService.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @Consumers & @Produces can be not used ,we will make sure the content-type of request by arg type
  *  but the Request method  is forbidden disappear
- *  parameters which annotation are not present , it is from the body (jaxrs anntation is diffrent from spring web from param(only request param can  ignore anntation))
+ *  parameters which annotation are not present , it is from the body (jaxrs annotation is different from spring web from param(only request param can  ignore annotation))
  *
  *  Every method only one param from body
  *

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/wrapper/ScopeClusterInvokerTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
-
 import org.apache.dubbo.metrics.event.MetricsDispatcher;
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Invocation;
@@ -165,7 +164,7 @@ void testScopeLocalInvoke() {
         RpcInvocation invocation = new RpcInvocation();
         invocation.setMethodName("doSomething4");
         invocation.setParameterTypes(new Class[]{});
-        Assertions.assertTrue(cluster.isAvailable(), "");
+        Assertions.assertFalse(cluster.isAvailable(), "");
         RpcInvocation finalInvocation = invocation;
         Assertions.assertThrows(RpcException.class, () -> cluster.invoke(finalInvocation));
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandlerTest.java
Patch:
@@ -99,11 +99,12 @@ void testProviderXml() {
     private void testProviderXml(ApplicationContext context) {
 
         String appName = "demo-provider";
+        String configId = ApplicationConfig.class.getName() + "#" + appName + "#0";
         Map<String, ApplicationConfig> applicationConfigMap = context.getBeansOfType(ApplicationConfig.class);
-        ApplicationConfig providerAppConfig = context.getBean(appName, ApplicationConfig.class);
+        ApplicationConfig providerAppConfig = context.getBean(configId, ApplicationConfig.class);
         assertNotNull(providerAppConfig);
         assertEquals(appName, providerAppConfig.getName());
-        assertEquals(appName, providerAppConfig.getId());
+//        assertEquals(configId, providerAppConfig.getId());
 
         ProtocolConfig protocolConfig = context.getBean(ProtocolConfig.class);
         assertThat(protocolConfig, not(nullValue()));

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/MockReferenceConfig.java
Patch:
@@ -40,11 +40,11 @@ public boolean isDestroyMethodRun() {
     }
 
     @Override
-    public synchronized FooService get() {
+    public synchronized FooService get(boolean check) {
         if (value != null) return value;
 
         counter.getAndIncrement();
-        value = super.get();
+        value = super.get(check);
         return value;
     }
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/XxxMockReferenceConfig.java
Patch:
@@ -40,11 +40,11 @@ public boolean isDestroyMethodRun() {
     }
 
     @Override
-    public synchronized XxxService get() {
+    public synchronized XxxService get(boolean check) {
         if (value != null) return value;
 
         counter.getAndIncrement();
-        value = super.get();
+        value = super.get(check);
         return value;
     }
 

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/filter/MetricsFilterTest.java
Patch:
@@ -82,7 +82,6 @@ public void setup() {
         config.setName("MockMetrics");
         applicationModel = ApplicationModel.defaultModel();
         applicationModel.getApplicationConfigManager().setApplication(config);
-
         invocation = new RpcInvocation();
         filter = new MetricsFilter();
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassUtils.java
Patch:
@@ -24,6 +24,7 @@
 import java.lang.reflect.Method;
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
@@ -87,7 +88,8 @@ public class ClassUtils {
         BigDecimal.class,
         BigInteger.class,
         Date.class,
-        Object.class
+        Object.class,
+        Duration.class
     );
     /**
      * Prefix for internal array class names: "[L"

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -254,6 +254,7 @@ public void loadConfigs() {
         // load dubbo.metrics.xxx
         loadConfigsOfTypeFromProps(MetricsConfig.class);
 
+        //load dubbo.tracing.xxx
         loadConfigsOfTypeFromProps(TracingConfig.class);
 
         // load multiple config types:

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Filter.java
Patch:
@@ -35,7 +35,7 @@ default org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker<?> invok
             new Invocation.CompatibleInvocation(invocation));
 
         if (invokeResult instanceof Result.CompatibleResult) {
-            return invokeResult;
+            return ((Result.CompatibleResult) invokeResult).getDelegate();
         }
 
         AsyncRpcResult asyncRpcResult = AsyncRpcResult.newDefaultAsyncResult(invocation);

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/MetricsKey.java
Patch:
@@ -27,7 +27,7 @@ public enum MetricsKey {
     METRIC_REQUESTS_SUCCEED("dubbo.%s.requests.succeed.total", "Total Succeed Requests"),
     METRIC_REQUEST_BUSINESS_FAILED("dubbo.%s.requests.business.failed.total", "Total Failed Business Requests"),
 
-    METRIC_REQUESTS_PROCESSING("dubbo.%s.requests.processing", "Processing Requests"),
+    METRIC_REQUESTS_PROCESSING("dubbo.%s.requests.processing.total", "Processing Requests"),
     METRIC_REQUESTS_TIMEOUT("dubbo.%s.requests.timeout.total", "Total Timeout Failed Requests"),
     METRIC_REQUESTS_LIMIT("dubbo.%s.requests.limit.total", "Total Limit Failed Requests"),
     METRIC_REQUESTS_FAILED("dubbo.%s.requests.unknown.failed.total", "Total Unknown Failed Requests"),

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/cache/CacheFactory.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.alibaba.dubbo.cache;
 
+import com.alibaba.dubbo.common.DelegateURL;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.rpc.Invocation;
 
@@ -26,6 +27,6 @@ public interface CacheFactory extends org.apache.dubbo.cache.CacheFactory {
     Cache getCache(URL url, Invocation invocation);
 
     default org.apache.dubbo.cache.Cache getCache(org.apache.dubbo.common.URL url, org.apache.dubbo.rpc.Invocation invocation) {
-        return this.getCache(new URL(url), new Invocation.CompatibleInvocation(invocation));
+        return this.getCache(new DelegateURL(url), new Invocation.CompatibleInvocation(invocation));
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/cache/support/AbstractCacheFactory.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.alibaba.dubbo.cache.Cache;
 import com.alibaba.dubbo.cache.CacheFactory;
+import com.alibaba.dubbo.common.DelegateURL;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.rpc.Invocation;
 
@@ -48,6 +49,6 @@ public Cache getCache(URL url, Invocation invocation) {
 
     @Override
     public org.apache.dubbo.cache.Cache getCache(org.apache.dubbo.common.URL url, org.apache.dubbo.rpc.Invocation invocation) {
-        return getCache(new URL(url), new Invocation.CompatibleInvocation(invocation));
+        return getCache(new DelegateURL(url), new Invocation.CompatibleInvocation(invocation));
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java
Patch:
@@ -73,7 +73,7 @@ public URL(String protocol, String username, String password, String host, int p
 
     public static URL valueOf(String url) {
         org.apache.dubbo.common.URL result = org.apache.dubbo.common.URL.valueOf(url);
-        return new URL(result);
+        return new DelegateURL(result);
     }
 
     public static String encode(String value) {

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/common/serialize/Serialization.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.alibaba.dubbo.common.serialize;
 
+import com.alibaba.dubbo.common.DelegateURL;
 import com.alibaba.dubbo.common.URL;
 
 import java.io.IOException;
@@ -32,11 +33,11 @@ public interface Serialization extends org.apache.dubbo.common.serialize.Seriali
 
     @Override
     default org.apache.dubbo.common.serialize.ObjectOutput serialize(org.apache.dubbo.common.URL url, OutputStream output) throws IOException {
-        return this.serialize(new URL(url), output);
+        return this.serialize(new DelegateURL(url), output);
     }
 
     @Override
     default org.apache.dubbo.common.serialize.ObjectInput deserialize(org.apache.dubbo.common.URL url, InputStream input) throws IOException {
-        return this.deserialize(new URL(url), input);
+        return this.deserialize(new DelegateURL(url), input);
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/common/threadpool/ThreadPool.java
Patch:
@@ -28,6 +28,6 @@ public interface ThreadPool extends org.apache.dubbo.common.threadpool.ThreadPoo
 
     @Override
     default Executor getExecutor(URL url) {
-        return getExecutor(new com.alibaba.dubbo.common.URL(url));
+        return getExecutor(new com.alibaba.dubbo.common.DelegateURL(url));
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/monitor/Monitor.java
Patch:
@@ -34,11 +34,11 @@ public interface Monitor extends org.apache.dubbo.monitor.Monitor {
 
     @Override
     default void collect(URL statistics) {
-        this.collect(new com.alibaba.dubbo.common.URL(statistics));
+        this.collect(new com.alibaba.dubbo.common.DelegateURL(statistics));
     }
 
     @Override
     default List<URL> lookup(URL query) {
-        return this.lookup(new com.alibaba.dubbo.common.URL(query)).stream().map(url -> url.getOriginalURL()).collect(Collectors.toList());
+        return this.lookup(new com.alibaba.dubbo.common.DelegateURL(query)).stream().map(url -> url.getOriginalURL()).collect(Collectors.toList());
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/monitor/MonitorFactory.java
Patch:
@@ -27,6 +27,6 @@ public interface MonitorFactory extends org.apache.dubbo.monitor.MonitorFactory
 
     @Override
     default Monitor getMonitor(URL url) {
-        return this.getMonitor(new com.alibaba.dubbo.common.URL(url));
+        return this.getMonitor(new com.alibaba.dubbo.common.DelegateURL(url));
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/registry/NotifyListener.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.alibaba.dubbo.registry;
 
+import com.alibaba.dubbo.common.DelegateURL;
 import com.alibaba.dubbo.common.URL;
 
 import java.util.List;
@@ -54,7 +55,7 @@ public ReverseCompatibleNotifyListener(NotifyListener listener) {
         @Override
         public void notify(List<org.apache.dubbo.common.URL> urls) {
             if (listener != null) {
-                listener.notify(urls.stream().map(url -> new URL(url)).collect(Collectors.toList()));
+                listener.notify(urls.stream().map(url -> new DelegateURL(url)).collect(Collectors.toList()));
             }
         }
     }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/registry/RegistryFactory.java
Patch:
@@ -27,6 +27,6 @@ public interface RegistryFactory extends org.apache.dubbo.registry.RegistryFacto
 
     @Override
     default Registry getRegistry(URL url) {
-        return this.getRegistry(new com.alibaba.dubbo.common.URL(url));
+        return this.getRegistry(new com.alibaba.dubbo.common.DelegateURL(url));
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -36,6 +36,6 @@ public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.
 
     @Override
     protected Registry createRegistry(URL url) {
-        return createRegistry(new com.alibaba.dubbo.common.URL(url));
+        return createRegistry(new com.alibaba.dubbo.common.DelegateURL(url));
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/remoting/Transporter.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingServer;
 
+import com.alibaba.dubbo.common.DelegateURL;
 import com.alibaba.dubbo.common.URL;
 
 @Deprecated
@@ -32,7 +33,7 @@ public interface Transporter extends org.apache.dubbo.remoting.Transporter {
     @Override
     default RemotingServer bind(org.apache.dubbo.common.URL url, org.apache.dubbo.remoting.ChannelHandler handler)
             throws org.apache.dubbo.remoting.RemotingException {
-        return bind(new URL(url), new ChannelHandler() {
+        return bind(new DelegateURL(url), new ChannelHandler() {
             @Override
             public void connected(Channel channel) throws RemotingException {
                 try {

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invoker.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dubbo.rpc.AsyncRpcResult;
 
+import com.alibaba.dubbo.common.DelegateURL;
 import com.alibaba.dubbo.common.URL;
 
 @Deprecated
@@ -77,7 +78,7 @@ public Result invoke(Invocation invocation) throws RpcException {
 
         @Override
         public URL getUrl() {
-            return new URL(invoker.getUrl());
+            return new DelegateURL(invoker.getUrl());
         }
 
         @Override

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Protocol.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dubbo.rpc.ProtocolServer;
 
+import com.alibaba.dubbo.common.DelegateURL;
 import com.alibaba.dubbo.common.URL;
 
 import java.util.Collections;
@@ -38,7 +39,7 @@ default <T> org.apache.dubbo.rpc.Exporter<T> export(org.apache.dubbo.rpc.Invoker
 
     @Override
     default <T> org.apache.dubbo.rpc.Invoker<T> refer(Class<T> aClass, org.apache.dubbo.common.URL url) throws RpcException {
-        return this.refer(aClass, new URL(url));
+        return this.refer(aClass, new DelegateURL(url));
     }
 
     @Override

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/ProxyFactory.java
Patch:
@@ -42,6 +42,6 @@ default <T> T getProxy(Invoker<T> invoker, boolean generic) throws RpcException
 
     @Override
     default <T> Invoker<T> getInvoker(T proxy, Class<T> type, URL url) throws RpcException {
-        return getInvoker(proxy, type, new com.alibaba.dubbo.common.URL(url));
+        return getInvoker(proxy, type, new com.alibaba.dubbo.common.DelegateURL(url));
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/RpcContext.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.rpc.FutureContext;
 
 import com.alibaba.dubbo.common.Constants;
+import com.alibaba.dubbo.common.DelegateURL;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.rpc.protocol.dubbo.FutureAdapter;
 
@@ -134,7 +135,7 @@ public List<URL> getUrls() {
         if (CollectionUtils.isNotEmpty(newUrls)) {
             List<URL> urls = new ArrayList<>(newUrls.size());
             for (org.apache.dubbo.common.URL newUrl : newUrls) {
-                urls.add(new URL(newUrl));
+                urls.add(new DelegateURL(newUrl));
             }
             return urls;
         }
@@ -152,7 +153,7 @@ public void setUrls(List<URL> urls) {
     }
 
     public URL getUrl() {
-        return new URL(newRpcContext.getUrl());
+        return new DelegateURL(newRpcContext.getUrl());
     }
 
     public void setUrl(URL url) {

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Configurator.java
Patch:
@@ -37,6 +37,6 @@ public interface Configurator extends org.apache.dubbo.rpc.cluster.Configurator
 
     @Override
     default URL configure(URL url) {
-        return this.configure(new com.alibaba.dubbo.common.URL(url));
+        return this.configure(new com.alibaba.dubbo.common.DelegateURL(url));
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/ConfiguratorFactory.java
Patch:
@@ -28,6 +28,6 @@ public interface ConfiguratorFactory extends org.apache.dubbo.rpc.cluster.Config
 
     @Override
     default Configurator getConfigurator(URL url) {
-        return this.getConfigurator(new com.alibaba.dubbo.common.URL(url));
+        return this.getConfigurator(new com.alibaba.dubbo.common.DelegateURL(url));
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Router.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.rpc.RpcException;
 
 import java.util.List;
+import java.util.Objects;
 import java.util.stream.Collectors;
 
 @Deprecated
@@ -44,9 +45,9 @@ default <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocatio
         List<com.alibaba.dubbo.rpc.Invoker<T>> invs = invokers.stream().map(invoker -> new com.alibaba.dubbo.rpc.Invoker.CompatibleInvoker<T>(invoker)).
                 collect(Collectors.toList());
 
-        List<com.alibaba.dubbo.rpc.Invoker<T>> res = this.route(invs, new com.alibaba.dubbo.common.URL(url), new com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation(invocation));
+        List<com.alibaba.dubbo.rpc.Invoker<T>> res = this.route(invs, new com.alibaba.dubbo.common.DelegateURL(url), new com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation(invocation));
 
-        return res.stream().map(inv -> inv.getOriginal()).collect(Collectors.toList());
+        return res.stream().map(inv -> inv.getOriginal()).filter(Objects::nonNull).collect(Collectors.toList());
     }
 
     @Override

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/RouterFactory.java
Patch:
@@ -27,6 +27,6 @@ public interface RouterFactory extends org.apache.dubbo.rpc.cluster.RouterFactor
 
     @Override
     default Router getRouter(URL url) {
-        return this.getRouter(new com.alibaba.dubbo.common.URL(url));
+        return this.getRouter(new com.alibaba.dubbo.common.DelegateURL(url));
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/RuleConverter.java
Patch:
@@ -29,7 +29,7 @@ public interface RuleConverter extends org.apache.dubbo.rpc.cluster.RuleConverte
 
     @Override
     default List<URL> convert(URL subscribeUrl, Object source) {
-        return this.convert(new com.alibaba.dubbo.common.URL(subscribeUrl), source).
+        return this.convert(new com.alibaba.dubbo.common.DelegateURL(subscribeUrl), source).
                 stream().map(url -> url.getOriginalURL()).collect(Collectors.toList());
     }
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java
Patch:
@@ -360,6 +360,7 @@ protected void encodeResponse(Channel channel, ChannelBuffer buffer, Response re
                     logger.warn(TRANSPORT_EXCEED_PAYLOAD_LIMIT, "", "", t.getMessage(), t);
                     try {
                         r.setErrorMessage(t.getMessage());
+                        r.setStatus(Response.SERIALIZATION_ERROR);
                         channel.send(r);
                         return;
                     } catch (RemotingException e) {

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/codec/ExchangeCodecTest.java
Patch:
@@ -512,7 +512,7 @@ void testMessageLengthExceedPayloadLimitWhenEncode() throws Exception {
         codec.encode(channel, encodeBuffer, response);
         Assertions.assertTrue(channel.getReceivedMessage() instanceof Response);
         Response receiveMessage = (Response) channel.getReceivedMessage();
-        Assertions.assertEquals(Response.BAD_RESPONSE, receiveMessage.getStatus());
+        Assertions.assertEquals(Response.SERIALIZATION_ERROR, receiveMessage.getStatus());
         Assertions.assertTrue(receiveMessage.getErrorMessage().contains("Data length too large: "));
     }
 }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/AccessLogData.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.rpc.support;
 
 
-import org.apache.dubbo.common.utils.JsonUtils;
 import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.common.utils.ToStringUtils;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcContext;
@@ -248,7 +248,7 @@ public String getLogMessage() {
 
         Object[] args = get(ARGUMENTS) != null ? (Object[]) get(ARGUMENTS) : null;
         if (args != null && args.length > 0) {
-            sn.append(JsonUtils.toJson(args));
+            sn.append(ToStringUtils.printToString(args));
         }
 
         return sn.toString();

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultMetricsServiceExporter.java
Patch:
@@ -54,10 +54,11 @@ private void initialize() {
         MetricsConfig metricsConfig = applicationModel.getApplicationConfigManager().getMetrics().orElse(null);
         // TODO compatible with old usage of metrics, remove protocol check after new metrics is ready for use.
         if (metricsConfig != null &&  metricsService == null) {
-            if (PROTOCOL_PROMETHEUS.equals(metricsConfig.getProtocol()) ) {
+            String protocol = Optional.ofNullable(metricsConfig.getProtocol()).orElse(PROTOCOL_PROMETHEUS);
+            if (PROTOCOL_PROMETHEUS.equals(protocol) ) {
                 this.metricsService  = applicationModel.getExtensionLoader(MetricsService.class).getDefaultExtension();
             } else {
-                logger.warn(COMMON_METRICS_COLLECTOR_EXCEPTION, "", "", "Protocol " + metricsConfig.getProtocol() + " not support for new metrics mechanism. " +
+                logger.warn(COMMON_METRICS_COLLECTOR_EXCEPTION, "", "", "Protocol " + protocol + " not support for new metrics mechanism. " +
                     "Using old metrics mechanism instead.");
             }
         }

File: dubbo-config/dubbo-config-spring6/src/main/java/org/apache/dubbo/config/spring6/beans/factory/annotation/ReferenceAnnotationWithAotBeanPostProcessor.java
Patch:
@@ -713,7 +713,7 @@ private CodeBlock generateMethodStatementForElement(ClassName targetClassName,
 
             try {
                 Class<?> c = referenceElement.getInjectedType();
-                AotUtils.registerSerializationHint(c, hints);
+                AotUtils.registerSerializationForService(c, hints);
                 hints.reflection().registerType(TypeReference.of(c), MemberCategory.INVOKE_PUBLIC_METHODS);
                 hints.proxies().registerJdkProxy(c, EchoService.class, Destroyable.class);
                 hints.proxies().registerJdkProxy(c, EchoService.class, Destroyable.class, SpringProxy.class, Advised.class, DecoratingProxy.class);

File: dubbo-config/dubbo-config-spring6/src/main/java/org/apache/dubbo/config/spring6/beans/factory/annotation/ServiceAnnotationWithAotPostProcessor.java
Patch:
@@ -88,7 +88,7 @@ public DubboServiceBeanRegistrationAotContribution(Class<?> cl) {
         public void applyTo(GenerationContext generationContext, BeanRegistrationCode beanRegistrationCode) {
             generationContext.getRuntimeHints().reflection().registerType(TypeReference.of(cl),
                     MemberCategory.INVOKE_PUBLIC_METHODS);
-            AotUtils.registerSerializationHint(cl, generationContext.getRuntimeHints());
+            AotUtils.registerSerializationForService(cl, generationContext.getRuntimeHints());
 
         }
     }

File: dubbo-spring-boot/dubbo-spring-boot-observability-starters/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/annotation/ConditionalOnDubboTracingEnable.java
Patch:
@@ -38,6 +38,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
 @Documented
-@ConditionalOnProperty(prefix = ObservabilityUtils.DUBBO_TRACING_PREFIX, name = "enabled", matchIfMissing = true)
+@ConditionalOnProperty(prefix = ObservabilityUtils.DUBBO_TRACING_PREFIX, name = "enabled")
 public @interface ConditionalOnDubboTracingEnable {
 }

File: dubbo-spring-boot/dubbo-spring-boot-observability-starters/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/exporter/zipkin/ZipkinAutoConfiguration.java
Patch:
@@ -36,7 +36,6 @@
 import zipkin2.codec.SpanBytesEncoder;
 import zipkin2.reporter.Sender;
 
-import static org.apache.dubbo.spring.boot.observability.autoconfigure.ObservabilityUtils.DUBBO_TRACING_PREFIX;
 import static org.apache.dubbo.spring.boot.observability.autoconfigure.ObservabilityUtils.DUBBO_TRACING_ZIPKIN_CONFIG_PREFIX;
 
 
@@ -54,7 +53,6 @@
 @Import({SenderConfiguration.class,
         ReporterConfiguration.class, BraveConfiguration.class,
         OpenTelemetryConfiguration.class})
-@ConditionalOnProperty(prefix = DUBBO_TRACING_PREFIX, name = "enabled", havingValue = "true")
 @ConditionalOnDubboTracingEnable
 public class ZipkinAutoConfiguration {
 

File: dubbo-spring-boot/dubbo-spring-boot-observability-starters/autoconfigure/src/test/java/org/apache/dubbo/spring/boot/observability/autoconfigure/observability/DubboMicrometerTracingAutoConfigurationTests.java
Patch:
@@ -44,7 +44,8 @@
 class DubboMicrometerTracingAutoConfigurationTests {
 
     private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
-            .withConfiguration(AutoConfigurations.of(DubboMicrometerTracingAutoConfiguration.class));
+            .withConfiguration(AutoConfigurations.of(DubboMicrometerTracingAutoConfiguration.class))
+            .withPropertyValues("dubbo.tracing.enabled=true");
 
     @Test
     void shouldSupplyBeans() {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/data/RtStatComposite.java
Patch:
@@ -94,7 +94,7 @@ public void calcServiceKeyRt(String serviceKey, String registryOpType, Long resp
 
     public void calcMethodKeyRt(Invocation invocation, String registryOpType, Long responseTime) {
         for (LongContainer container : rtStats.stream().filter(longContainer -> longContainer.specifyType(registryOpType)).collect(Collectors.toList())) {
-            Number current = (Number) ConcurrentHashMapUtils.computeIfAbsent(container, invocation.getServiceName() + "_" + invocation.getMethodName(), container.getInitFunc());
+            Number current = (Number) ConcurrentHashMapUtils.computeIfAbsent(container, invocation.getTargetServiceUniqueName() + "_" + invocation.getMethodName(), container.getInitFunc());
             container.getConsumerFunc().accept(responseTime, current);
         }
     }

File: dubbo-spring-boot/dubbo-spring-boot-actuator/src/main/java/org/apache/dubbo/spring/boot/actuate/mertics/DubboMetricsBinder.java
Patch:
@@ -34,6 +34,8 @@ public DubboMetricsBinder(MeterRegistry meterRegistry) {
     public void onApplicationEvent(ApplicationStartedEvent applicationStartedEvent) {
         if (meterRegistry instanceof CompositeMeterRegistry) {
             MetricsGlobalRegistry.setCompositeRegistry((CompositeMeterRegistry) meterRegistry);
+        }else{
+            MetricsGlobalRegistry.getCompositeRegistry().add(meterRegistry);
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/MetricsConstants.java
Patch:
@@ -19,6 +19,7 @@
 public interface MetricsConstants {
 
     String PROTOCOL_PROMETHEUS = "prometheus";
+    String PROTOCOL_DEFAULT = "default";
 
     String TAG_IP = "ip";
 

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/MetricThreadPoolExhaustedListener.java
Patch:
@@ -38,6 +38,6 @@ public MetricThreadPoolExhaustedListener(String threadPoolExecutorName,ThreadRej
     @Override
     public void onEvent(ThreadPoolExhaustedEvent event) {
         threadRejectMetricsCountSampler.addMetricName(threadPoolExecutorName);
-        threadRejectMetricsCountSampler.incOnEvent(threadPoolExecutorName,threadPoolExecutorName);
+        threadRejectMetricsCountSampler.inc(threadPoolExecutorName,threadPoolExecutorName);
     }
 }

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/MetricsCountSampler.java
Patch:
@@ -27,8 +27,6 @@ public interface MetricsCountSampler<S, K, M extends Metric> extends MetricsSamp
 
     void inc(S source, K metricName);
 
-    void incOnEvent(S source, K metricName);
-
     Optional<ConcurrentMap<M, AtomicLong>> getCount(K metricName);
 
 }

File: dubbo-metrics/dubbo-metrics-prometheus/src/main/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsReporterCmd.java
Patch:
@@ -109,7 +109,7 @@ public boolean logResult() {
     private String getResponseByApplication(ApplicationModel applicationModel) {
 
         String response = "MetricsReporter not init";
-        MetricsReporter metricsReporter = applicationModel.getBeanFactory().getBean(MetricsReporter.class);
+        MetricsReporter metricsReporter = applicationModel.getBeanFactory().getBean(PrometheusMetricsReporter.class);
         if (metricsReporter != null) {
             long begin = System.currentTimeMillis();
             if (logger.isDebugEnabled()) {

File: dubbo-metrics/dubbo-metrics-prometheus/src/test/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsThreadPoolTest.java
Patch:
@@ -146,7 +146,7 @@ void testThreadPoolRejectMetrics() {
         collector.setApplicationName(applicationModel.getApplicationName());
         String threadPoolExecutorName="DubboServerHandler-20816";
         ThreadRejectMetricsCountSampler threadRejectMetricsCountSampler=new ThreadRejectMetricsCountSampler(collector);
-        threadRejectMetricsCountSampler.incOnEvent(threadPoolExecutorName,threadPoolExecutorName);
+        threadRejectMetricsCountSampler.inc(threadPoolExecutorName,threadPoolExecutorName);
         threadRejectMetricsCountSampler.addMetricName(threadPoolExecutorName);
         List<MetricSample> samples = collector.collect();
         for (MetricSample sample : samples) {

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/CommandHelperTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.qos.command.GreetingCommand;
 import org.apache.dubbo.qos.command.impl.ChangeTelnet;
 import org.apache.dubbo.qos.command.impl.CountTelnet;
+import org.apache.dubbo.qos.command.impl.DefaultMetricsReporterCmd;
 import org.apache.dubbo.qos.command.impl.DisableDetailProfiler;
 import org.apache.dubbo.qos.command.impl.DisableRouterSnapshot;
 import org.apache.dubbo.qos.command.impl.DisableSimpleProfiler;
@@ -125,6 +126,7 @@ void testGetAllCommandClass() {
         expectedClasses.add(GetConfig.class);
         expectedClasses.add(GetAddress.class);
         expectedClasses.add(GracefulShutdown.class);
+        expectedClasses.add(DefaultMetricsReporterCmd.class);
         assertThat(classes, containsInAnyOrder(expectedClasses.toArray(new Class<?>[0])));
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/MetricsConstants.java
Patch:
@@ -19,6 +19,7 @@
 public interface MetricsConstants {
 
     String PROTOCOL_PROMETHEUS = "prometheus";
+    String PROTOCOL_DEFAULT = "default";
 
     String TAG_IP = "ip";
 

File: dubbo-metrics/dubbo-metrics-prometheus/src/main/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsReporterCmd.java
Patch:
@@ -109,7 +109,7 @@ public boolean logResult() {
     private String getResponseByApplication(ApplicationModel applicationModel) {
 
         String response = "MetricsReporter not init";
-        MetricsReporter metricsReporter = applicationModel.getBeanFactory().getBean(MetricsReporter.class);
+        MetricsReporter metricsReporter = applicationModel.getBeanFactory().getBean(PrometheusMetricsReporter.class);
         if (metricsReporter != null) {
             long begin = System.currentTimeMillis();
             if (logger.isDebugEnabled()) {

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/CommandHelperTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.qos.command.GreetingCommand;
 import org.apache.dubbo.qos.command.impl.ChangeTelnet;
 import org.apache.dubbo.qos.command.impl.CountTelnet;
+import org.apache.dubbo.qos.command.impl.DefaultMetricsReporterCmd;
 import org.apache.dubbo.qos.command.impl.DisableDetailProfiler;
 import org.apache.dubbo.qos.command.impl.DisableRouterSnapshot;
 import org.apache.dubbo.qos.command.impl.DisableSimpleProfiler;
@@ -125,6 +126,7 @@ void testGetAllCommandClass() {
         expectedClasses.add(GetConfig.class);
         expectedClasses.add(GetAddress.class);
         expectedClasses.add(GracefulShutdown.class);
+        expectedClasses.add(DefaultMetricsReporterCmd.class);
         assertThat(classes, containsInAnyOrder(expectedClasses.toArray(new Class<?>[0])));
     }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/MetricsKey.java
Patch:
@@ -57,7 +57,9 @@ public enum MetricsKey {
     METRIC_RT_P95("dubbo.%s.rt.milliseconds.p95", "Response Time P95"),
     METRIC_RT_P90("dubbo.%s.rt.milliseconds.p90", "Response Time P90"),
     METRIC_RT_P50("dubbo.%s.rt.milliseconds.p50", "Response Time P50"),
-
+    METRIC_RT_MIN_AGG("dubbo.%s.rt.min.milliseconds.aggregate", "Aggregated Min Response"),
+    METRIC_RT_MAX_AGG("dubbo.%s.rt.max.milliseconds.aggregate", "Aggregated Max Response"),
+    METRIC_RT_AVG_AGG("dubbo.%s.rt.avg.milliseconds.aggregate", "Aggregated Avg Response"),
 
     // register metrics key
     REGISTER_METRIC_REQUESTS("dubbo.registry.register.requests.total", "Total Register Requests"),

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/loadbalance/AbstractLoadBalance.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.List;
 
 @Deprecated
-public abstract class AbstractLoadBalance extends org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance implements LoadBalance {
+public abstract class AbstractLoadBalance implements LoadBalance {
 
     @Override
     public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/data/ServiceStatComposite.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.metrics.model.MetricsCategory;
+import org.apache.dubbo.metrics.model.MetricsSupport;
 import org.apache.dubbo.metrics.model.ServiceKeyMetric;
 import org.apache.dubbo.metrics.model.key.MetricsKeyWrapper;
 import org.apache.dubbo.metrics.model.sample.GaugeMetricSample;
@@ -57,13 +58,15 @@ public void incrementServiceKey(MetricsKeyWrapper wrapper, String serviceKey, in
             return;
         }
         serviceWrapperNumStats.get(wrapper).computeIfAbsent(new ServiceKeyMetric(getApplicationModel(), serviceKey), k -> new AtomicLong(0L)).getAndAdd(size);
+        MetricsSupport.fillZero(serviceWrapperNumStats);
     }
 
     public void setServiceKey(MetricsKeyWrapper wrapper, String serviceKey, int num) {
         if (!serviceWrapperNumStats.containsKey(wrapper)) {
             return;
         }
         serviceWrapperNumStats.get(wrapper).computeIfAbsent(new ServiceKeyMetric(getApplicationModel(), serviceKey), k -> new AtomicLong(0L)).set(num);
+        MetricsSupport.fillZero(serviceWrapperNumStats);
     }
 
     public List<MetricSample> export(MetricsCategory category) {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/CategoryOverall.java
Patch:
@@ -17,7 +17,8 @@
 
 package org.apache.dubbo.metrics.model.key;
 
-import io.micrometer.common.lang.Nullable;
+
+import org.apache.dubbo.common.lang.Nullable;
 
 /**
  *  The overall event set, including the event processing functions in three stages

File: dubbo-metrics/dubbo-metrics-metadata/src/test/java/org/apache/dubbo/metrics/metadata/MetadataMetricsCollectorTest.java
Patch:
@@ -211,7 +211,7 @@ void testStoreProviderMetadataMetrics() {
                 List<MetricSample> metricSamples = collector.collect();
 
                 // App(6) + service success(1)
-                Assertions.assertEquals(MetadataMetricsConstants.APP_LEVEL_KEYS.size() + 1, metricSamples.size());
+                Assertions.assertEquals(MetadataMetricsConstants.APP_LEVEL_KEYS.size() + MetadataMetricsConstants.SERVICE_LEVEL_KEYS.size(), metricSamples.size());
                 Assertions.assertTrue(metricSamples.stream().allMatch(metricSample -> metricSample instanceof GaugeMetricSample));
                 Assertions.assertTrue(metricSamples.stream().anyMatch(metricSample -> ((GaugeMetricSample) metricSample).applyAsDouble() == 1));
                 return null;
@@ -221,7 +221,7 @@ void testStoreProviderMetadataMetrics() {
         // push finish rt +1
         List<MetricSample> metricSamples = collector.collect();
         // App(6) + service total/success(2) + rt(5) = 7
-        Assertions.assertEquals(MetadataMetricsConstants.APP_LEVEL_KEYS.size() + 2 + 5, metricSamples.size());
+        Assertions.assertEquals(MetadataMetricsConstants.APP_LEVEL_KEYS.size() + MetadataMetricsConstants.SERVICE_LEVEL_KEYS.size() + 5, metricSamples.size());
 
         long c1 = metadataEvent.getTimePair().calc();
         metadataEvent = MetadataEvent.toServiceSubscribeEvent(applicationModel, serviceKey);

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java
Patch:
@@ -136,14 +136,13 @@ protected void initServerBootstrap(NettyServerHandler nettyServerHandler) {
             .childHandler(new ChannelInitializer<SocketChannel>() {
                 @Override
                 protected void initChannel(SocketChannel ch) throws Exception {
-                    // FIXME: should we use getTimeout()?
-                    int idleTimeout = UrlUtils.getIdleTimeout(getUrl());
+                    int closeTimeout = UrlUtils.getCloseTimeout(getUrl());
                     NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyServer.this);
                     ch.pipeline().addLast("negotiation", new SslServerTlsHandler(getUrl()));
                     ch.pipeline()
                         .addLast("decoder", adapter.getDecoder())
                         .addLast("encoder", adapter.getEncoder())
-                        .addLast("server-idle-handler", new IdleStateHandler(0, 0, idleTimeout, MILLISECONDS))
+                        .addLast("server-idle-handler", new IdleStateHandler(0, 0, closeTimeout, MILLISECONDS))
                         .addLast("handler", nettyServerHandler);
                 }
             });

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Constants.java
Patch:
@@ -144,8 +144,10 @@ public interface Constants {
     String TELNET_KEY = "telnet";
     String HEARTBEAT_KEY = "heartbeat";
     String HEARTBEAT_CONFIG_KEY = "dubbo.protocol.default-heartbeat";
+    String CLOSE_TIMEOUT_CONFIG_KEY = "dubbo.protocol.default-close-timeout";
     int DEFAULT_HEARTBEAT = 60 * 1000;
     String HEARTBEAT_TIMEOUT_KEY = "heartbeat.timeout";
+    String CLOSE_TIMEOUT_KEY = "close.timeout";
     String CONNECTIONS_KEY = "connections";
 
     int DEFAULT_BACKLOG = 1024;

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyConfigOperator.java
Patch:
@@ -60,6 +60,7 @@ public void configChannelHandler(List<ChannelHandler> handlerList) {
         }
 
         if (!(codec2 instanceof DefaultCodec)){
+            ((NettyChannel) channel).setCodec(codec2);
             NettyCodecAdapter codec = new NettyCodecAdapter(codec2, channel.getUrl(), handler);
             ((NettyChannel) channel).getNioChannel().pipeline().addLast(
                 codec.getDecoder()

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/AnnotationUtils.java
Patch:
@@ -418,7 +418,7 @@ static boolean isAnnotationPresent(Class<?> type, Class<? extends Annotation> an
     static boolean isAnnotationPresent(AnnotatedElement annotatedElement, String annotationClassName) {
         ClassLoader classLoader = annotatedElement.getClass().getClassLoader();
         Class<?> resolvedType = resolveClass(annotationClassName, classLoader);
-        if (!Annotation.class.isAssignableFrom(resolvedType)) {
+        if (resolvedType == null || !Annotation.class.isAssignableFrom(resolvedType)) {
             return false;
         }
         return isAnnotationPresent(annotatedElement, (Class<? extends Annotation>) resolvedType);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultModuleDeployer.java
Patch:
@@ -316,7 +316,7 @@ private void onModuleFailed(String msg, Throwable ex) {
         try {
             setFailed(ex);
             logger.error(CONFIG_FAILED_START_MODEL, "", "", "Model start failed: " + msg, ex);
-            applicationDeployer.notifyModuleChanged(moduleModel, DeployState.STARTED);
+            applicationDeployer.notifyModuleChanged(moduleModel, DeployState.FAILED);
         } finally {
             completeStartFuture(false);
         }

File: dubbo-kubernetes/src/main/java/org/apache/dubbo/registry/kubernetes/util/KubernetesConfigUtils.java
Patch:
@@ -89,7 +89,7 @@ public static Config createKubernetesConfig(URL url) {
                 .withLoggingInterval(url.getParameter(LOGGING_INTERVAL, base.getLoggingInterval())) //
 
                 .withTrustCerts(url.getParameter(TRUST_CERTS, base.isTrustCerts())) //
-                .withHttp2Disable(url.getParameter(HTTP2_DISABLE, base.isTrustCerts())) //
+                .withHttp2Disable(url.getParameter(HTTP2_DISABLE, base.isHttp2Disable())) //
 
                 .withHttpProxy(url.getParameter(HTTP_PROXY, base.getHttpProxy())) //
                 .withHttpsProxy(url.getParameter(HTTPS_PROXY, base.getHttpsProxy())) //

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/filter/MetricsClusterFilterTest.java
Patch:
@@ -80,7 +80,7 @@ public void setup() {
 
         collector = applicationModel.getBeanFactory().getOrRegisterBean(DefaultMetricsCollector.class);
         if(!initApplication.get()) {
-            collector.collectApplication(applicationModel);
+            collector.collectApplication();
             initApplication.set(true);
         }
         filter.setApplicationModel(applicationModel);

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/MetricsConstants.java
Patch:
@@ -28,6 +28,8 @@ public interface MetricsConstants {
 
     String TAG_APPLICATION_NAME = "application.name";
 
+    String TAG_APPLICATION_MODULE = "application.module.id";
+
     String TAG_INTERFACE_KEY = "interface";
 
     String TAG_METHOD_KEY = "method";

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -391,7 +391,7 @@ private void initMetricsReporter() {
             metricsConfig.setProtocol(PROTOCOL_PROMETHEUS);
         }
         collector.setCollectEnabled(true);
-        collector.collectApplication(applicationModel);
+        collector.collectApplication();
         collector.setThreadpoolCollectEnabled(Optional.ofNullable(metricsConfig.getEnableThreadpool()).orElse(true));
         MetricsReporterFactory metricsReporterFactory = getExtensionLoader(MetricsReporterFactory.class).getAdaptiveExtension();
         MetricsReporter metricsReporter = metricsReporterFactory.createMetricsReporter(metricsConfig.toUrl());

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/ApplicationMetricsCollector.java
Patch:
@@ -28,9 +28,9 @@
  */
 public interface ApplicationMetricsCollector<E extends TimeCounterEvent> extends MetricsCollector<E> {
 
-    void increment(String applicationName, MetricsKey metricsKey);
+    void increment(MetricsKey metricsKey);
 
-    void addRt(String applicationName, String registryOpType, Long responseTime);
+    void addRt(String registryOpType, Long responseTime);
 
 }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/MethodMetricsCollector.java
Patch:
@@ -26,8 +26,8 @@
  */
 public interface MethodMetricsCollector<E extends TimeCounterEvent> extends MetricsCollector<E> {
 
-    void increment(String applicationName, Invocation invocation, MetricsKeyWrapper wrapper, int size);
+    void increment(Invocation invocation, MetricsKeyWrapper wrapper, int size);
 
-    void addRt(String applicationName, Invocation invocation, String registryOpType, Long responseTime);
+    void addRt(Invocation invocation, String registryOpType, Long responseTime);
 }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/ServiceMetricsCollector.java
Patch:
@@ -26,10 +26,10 @@
  */
 public interface ServiceMetricsCollector<E extends TimeCounterEvent> extends MetricsCollector<E> {
 
-    void increment(String applicationName, String serviceKey, MetricsKeyWrapper wrapper, int size);
+    void increment(String serviceKey, MetricsKeyWrapper wrapper, int size);
 
-    void setNum(MetricsKeyWrapper metricsKey, String applicationName, String serviceKey, int num);
+    void setNum(MetricsKeyWrapper metricsKey, String serviceKey, int num);
 
-    void addRt(String applicationName, String serviceKey, String registryOpType, Long responseTime);
+    void addRt(String serviceKey, String registryOpType, Long responseTime);
 }
 

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/AggregateMetricsCollector.java
Patch:
@@ -132,7 +132,7 @@ public void onEventError(RequestEvent event) {
     }
 
     private void onRTEvent(RequestEvent event) {
-        MethodMetric metric = new MethodMetric(applicationModel.getApplicationName(), event.getAttachmentValue(MetricsConstants.INVOCATION));
+        MethodMetric metric = new MethodMetric(applicationModel, event.getAttachmentValue(MetricsConstants.INVOCATION));
         long responseTime = event.getTimePair().calc();
         TimeWindowQuantile quantile = ConcurrentHashMapUtils.computeIfAbsent(rt, metric, k -> new TimeWindowQuantile(DEFAULT_COMPRESSION, bucketNum, timeWindowSeconds));
         quantile.add(responseTime);
@@ -142,7 +142,7 @@ private void onRTEvent(RequestEvent event) {
     private MethodMetric calcWindowCounter(RequestEvent event, MetricsKey targetKey) {
         MetricsPlaceValue placeType = MetricsPlaceValue.of(event.getAttachmentValue(MetricsConstants.INVOCATION_SIDE), MetricsLevel.SERVICE);
         MetricsKeyWrapper metricsKeyWrapper = new MetricsKeyWrapper(targetKey, placeType);
-        MethodMetric metric = new MethodMetric(applicationModel.getApplicationName(), event.getAttachmentValue(MetricsConstants.INVOCATION));
+        MethodMetric metric = new MethodMetric(applicationModel, event.getAttachmentValue(MetricsConstants.INVOCATION));
 
         ConcurrentMap<MethodMetric, TimeWindowCounter> counter = methodTypeCounter.computeIfAbsent(metricsKeyWrapper, k -> new ConcurrentHashMap<>());
 

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/HistogramMetricsCollector.java
Patch:
@@ -86,7 +86,7 @@ public void onEventError(RequestEvent event) {
 
     private void onRTEvent(RequestEvent event) {
         if (metricRegister != null) {
-            MethodMetric metric = new MethodMetric(applicationModel.getApplicationName(), event.getAttachmentValue(MetricsConstants.INVOCATION));
+            MethodMetric metric = new MethodMetric(applicationModel, event.getAttachmentValue(MetricsConstants.INVOCATION));
             long responseTime = event.getTimePair().calc();
 
             HistogramMetricSample sample = new HistogramMetricSample(MetricsKey.METRIC_RT_HISTOGRAM.getNameByType(metric.getSide()),

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/collector/DefaultCollectorTest.java
Patch:
@@ -110,7 +110,7 @@ public void setup() {
 
     @Test
     void testListener() {
-        DefaultMetricsCollector metricsCollector = new DefaultMetricsCollector();
+        DefaultMetricsCollector metricsCollector = new DefaultMetricsCollector(applicationModel);
         RequestEvent event = RequestEvent.toRequestEvent(applicationModel, invocation);
         RequestBeforeEvent beforeEvent = new RequestBeforeEvent(applicationModel, new TypeWrapper(MetricsLevel.METHOD, MetricsKey.METRIC_REQUESTS));
         Assertions.assertTrue(metricsCollector.isSupport(event));

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/collector/sample/ThreadPoolMetricsSamplerTest.java
Patch:
@@ -50,7 +50,7 @@ public class ThreadPoolMetricsSamplerTest {
 
     @BeforeEach
     void setUp() {
-        DefaultMetricsCollector collector = new DefaultMetricsCollector();
+        DefaultMetricsCollector collector = new DefaultMetricsCollector(applicationModel);
         sampler = new ThreadPoolMetricsSampler(collector);
     }
 
@@ -135,12 +135,12 @@ void testSample() {
     public void setUp2() {
         MockitoAnnotations.openMocks(this);
 
-        collector = new DefaultMetricsCollector();
+        collector = new DefaultMetricsCollector(applicationModel);
         sampler2 = new ThreadPoolMetricsSampler(collector);
 
         when(scopeBeanFactory.getBean(FrameworkExecutorRepository.class)).thenReturn(new FrameworkExecutorRepository());
 
-        collector.collectApplication(applicationModel);
+        collector.collectApplication();
         when(applicationModel.getBeanFactory()).thenReturn(scopeBeanFactory);
         when(applicationModel.getExtensionLoader(DataStore.class)).thenReturn(extensionLoader);
         when(extensionLoader.getDefaultExtension()).thenReturn(dataStore);

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/filter/MetricsFilterTest.java
Patch:
@@ -77,8 +77,6 @@ class MetricsFilterTest {
     public void setup() {
         ApplicationConfig config = new ApplicationConfig();
         config.setName("MockMetrics");
-        //RpcContext.getContext().setAttachment("MockMetrics","MockMetrics");
-
         applicationModel = ApplicationModel.defaultModel();
         applicationModel.getApplicationConfigManager().setApplication(config);
 
@@ -87,7 +85,7 @@ public void setup() {
 
         collector = applicationModel.getBeanFactory().getOrRegisterBean(DefaultMetricsCollector.class);
         if (!initApplication.get()) {
-            collector.collectApplication(applicationModel);
+            collector.collectApplication();
             initApplication.set(true);
         }
         filter.setApplicationModel(applicationModel);

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/event/RegistrySubDispatcher.java
Patch:
@@ -89,7 +89,7 @@ interface MCat {
                     collector.addRt(event.appName(), placeType.getType(), event.getTimePair().calc());
                     Map<String, Integer> lastNumMap = Collections.unmodifiableMap(event.getAttachmentValue(ATTACHMENT_KEY_LAST_NUM_MAP));
                     lastNumMap.forEach(
-                        (k, v) -> collector.setNum(new MetricsKeyWrapper(key, OP_TYPE_NOTIFY), event.appName(), k, v));
+                        (k, v) -> collector.setNum(new MetricsKeyWrapper(key, OP_TYPE_NOTIFY), k, v));
 
                 }
             ));
@@ -101,7 +101,7 @@ interface MCat {
                 Map<MetricsKey, Map<String, Integer>> summaryMap = event.getAttachmentValue(ATTACHMENT_DIRECTORY_MAP);
                 summaryMap.forEach((metricsKey, map) ->
                     map.forEach(
-                        (k, v) -> collector.setNum(new MetricsKeyWrapper(key, OP_TYPE_DIRECTORY), event.appName(), k, v)));
+                        (k, v) -> collector.setNum(new MetricsKeyWrapper(key, OP_TYPE_DIRECTORY), k, v)));
             }
         ));
 

File: dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryMetricsSampleTest.java
Patch:
@@ -87,8 +87,7 @@ void testRTMetrics() {
     void testListener() {
         RegistryMetricsCollector collector = new RegistryMetricsCollector(applicationModel);
         collector.setCollectEnabled(true);
-        String applicationName = applicationModel.getApplicationName();
-        collector.increment(applicationName, MetricsKey.REGISTER_METRIC_REQUESTS);
+        collector.increment(MetricsKey.REGISTER_METRIC_REQUESTS);
     }
 
 }

File: dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvoker.java
Patch:
@@ -17,14 +17,14 @@
 package org.apache.dubbo.filter;
 
 
-import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.service.DemoService;
 
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.rpc.Invocation;
 import com.alibaba.dubbo.rpc.Invoker;
 import com.alibaba.dubbo.rpc.Result;
 import com.alibaba.dubbo.rpc.RpcException;
+import com.alibaba.dubbo.rpc.RpcResult;
 
 public class LegacyInvoker<T> implements Invoker<T> {
 
@@ -58,13 +58,13 @@ public boolean isAvailable() {
     }
 
     public Result invoke(Invocation invocation) throws RpcException {
-        AppResponse result = new AppResponse();
+        RpcResult result = new RpcResult();
         if (!hasException) {
             result.setValue("alibaba");
         } else {
             result.setException(new RuntimeException("mocked exception"));
         }
-        return new Result.CompatibleResult(result);
+        return result;
     }
 
     @Override

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/HistogramMetricsCollector.java
Patch:
@@ -61,7 +61,7 @@ public HistogramMetricsCollector(ApplicationModel applicationModel) {
                 histogram.setBucketsMs(DEFAULT_BUCKETS_MS);
             }
 
-            metricRegister = new HistogramMetricRegister(MetricsGlobalRegistry.getCompositeRegistry(), histogram);
+            metricRegister = new HistogramMetricRegister(MetricsGlobalRegistry.getCompositeRegistry(applicationModel), histogram);
         }
     }
 

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/report/AbstractMetricsReporter.java
Patch:
@@ -84,7 +84,7 @@ public abstract class AbstractMetricsReporter implements MetricsReporter {
     protected AbstractMetricsReporter(URL url, ApplicationModel applicationModel) {
         this.url = url;
         this.applicationModel = applicationModel;
-        this.compositeRegistry = MetricsGlobalRegistry.getCompositeRegistry();
+        this.compositeRegistry = MetricsGlobalRegistry.getCompositeRegistry(applicationModel);
     }
 
     @Override

File: dubbo-spring-boot/dubbo-spring-boot-observability-starters/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/ObservabilityUtils.java
Patch:
@@ -38,4 +38,5 @@ public class ObservabilityUtils {
 
     public static final String DUBBO_TRACING_ZIPKIN_CONFIG_PREFIX = DUBBO_TRACING_PREFIX + PROPERTY_NAME_SEPARATOR + "tracing-exporter.zipkin-config";
 
+    public static final String DUBBO_TRACING_OTLP_CONFIG_PREFIX = DUBBO_TRACING_PREFIX + PROPERTY_NAME_SEPARATOR + "tracing-exporter.otlp-config";
 }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/JsonCodec.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.rpc.protocol.rest.message.HttpMessageCodec;
 import org.apache.dubbo.rpc.protocol.rest.message.MediaTypeMatcher;
 import org.apache.dubbo.rpc.protocol.rest.util.DataParseUtils;
-
+import javax.ws.rs.core.Response;
 import java.io.OutputStream;
 import java.nio.charset.StandardCharsets;
 import java.util.HashSet;
@@ -37,10 +37,9 @@ public class JsonCodec implements HttpMessageCodec<byte[], OutputStream> {
     private static final Set<Class> unSupportClasses = new HashSet<>();
 
     static {
-
         unSupportClasses.add(byte[].class);
         unSupportClasses.add(String.class);
-
+        unSupportClasses.add(Response.class);
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/constans/RestConstant.java
Patch:
@@ -45,7 +45,7 @@ public interface RestConstant {
     String TEXT_PLAIN = "text/plain";
     String ACCEPT = "Accept";
     String DEFAULT_ACCEPT = "*/*";
-    String REST_HEADER_PREFIX = "#rest#";
+    String REST_HEADER_PREFIX = "rest-service-";
 
 
     // http

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/AggregateMetricsCollector.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.dubbo.metrics.model.key.MetricsPlaceValue;
 import org.apache.dubbo.metrics.model.sample.GaugeMetricSample;
 import org.apache.dubbo.metrics.model.sample.MetricSample;
-import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import java.util.ArrayList;
@@ -115,7 +114,7 @@ public void onEventFinish(RequestEvent event) {
         MetricsKey targetKey = MetricsKey.METRIC_REQUESTS_SUCCEED;
         Object throwableObj = event.getAttachmentValue(METRIC_THROWABLE);
         if (throwableObj != null) {
-            targetKey = MetricsSupport.getAggMetricsKey((RpcException) throwableObj);
+            targetKey = MetricsSupport.getAggMetricsKey((Throwable) throwableObj);
         }
         calcWindowCounter(event, targetKey);
         onRTEvent(event);
@@ -126,7 +125,7 @@ public void onEventError(RequestEvent event) {
         MetricsKey targetKey = MetricsKey.METRIC_REQUESTS_FAILED;
         Object throwableObj = event.getAttachmentValue(METRIC_THROWABLE);
         if (throwableObj != null) {
-            targetKey = MetricsSupport.getAggMetricsKey((RpcException) throwableObj);
+            targetKey = MetricsSupport.getAggMetricsKey((Throwable) throwableObj);
         }
         calcWindowCounter(event, targetKey);
         onRTEvent(event);

File: dubbo-metrics/dubbo-metrics-prometheus/src/test/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsReporterTest.java
Patch:
@@ -89,8 +89,6 @@ void testExporter() {
 //            NetUtils.getAvailablePort();
         PrometheusConfig prometheusConfig = new PrometheusConfig();
         PrometheusConfig.Exporter exporter = new PrometheusConfig.Exporter();
-        exporter.setMetricsPort(port);
-        exporter.setMetricsPath("/metrics");
         exporter.setEnabled(true);
         prometheusConfig.setExporter(exporter);
         metricsConfig.setPrometheus(prometheusConfig);

File: dubbo-metrics/dubbo-metrics-prometheus/src/test/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsThreadPoolTest.java
Patch:
@@ -85,9 +85,7 @@ void testExporterThreadpoolName() {
         int port = 30899;
         PrometheusConfig prometheusConfig = new PrometheusConfig();
         PrometheusConfig.Exporter exporter = new PrometheusConfig.Exporter();
-        exporter.setMetricsPort(port);
         exporter.setEnabled(true);
-        exporter.setMetricsPath("/metrics");
 
         prometheusConfig.setExporter(exporter);
         metricsConfig.setPrometheus(prometheusConfig);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java
Patch:
@@ -88,7 +88,7 @@ public static class Single {
             @EnableConfigurationBeanBinding(prefix = "dubbo.config-centers", type = ConfigCenterBean.class, multiple = true),
             @EnableConfigurationBeanBinding(prefix = "dubbo.metadata-reports", type = MetadataReportConfig.class, multiple = true),
             @EnableConfigurationBeanBinding(prefix = "dubbo.metricses", type = MetricsConfig.class, multiple = true),
-            @EnableConfigurationBeanBinding(prefix = "dubbo.tracing", type = TracingConfig.class)
+            @EnableConfigurationBeanBinding(prefix = "dubbo.tracings", type = TracingConfig.class, multiple = true)
     })
     public static class Multiple {
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnsubscribedTask.java
Patch:
@@ -41,7 +41,7 @@ public FailedUnsubscribedTask(URL url, FailbackRegistry registry, NotifyListener
 
     @Override
     protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
-        registry.unsubscribe(url, listener);
+        registry.doUnsubscribe(url, listener);
         registry.removeFailedUnsubscribedTask(url, listener);
     }
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Constants.java
Patch:
@@ -143,6 +143,7 @@ public interface Constants {
     String DEFAULT_PROMPT = "dubbo>";
     String TELNET_KEY = "telnet";
     String HEARTBEAT_KEY = "heartbeat";
+    String HEARTBEAT_CONFIG_KEY = "dubbo.protocol.default-heartbeat";
     int DEFAULT_HEARTBEAT = 60 * 1000;
     String HEARTBEAT_TIMEOUT_KEY = "heartbeat.timeout";
     String CONNECTIONS_KEY = "connections";

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/aggregate/TimeWindowQuantile.java
Patch:
@@ -37,7 +37,7 @@ public TimeWindowQuantile(double compression, int bucketNum, int timeWindowSecon
     }
 
     public double quantile(double q) {
-        TDigest mergeDigest = TDigest.createDigest(compression);
+        TDigest mergeDigest = new DubboMergingDigest(compression);
         List<TDigest> validWindows = this.slidingWindow.values();
         for (TDigest window : validWindows) {
             mergeDigest.add(window);
@@ -65,13 +65,13 @@ public DigestSlidingWindow(double compression, int sampleCount, long intervalInM
 
         @Override
         public TDigest newEmptyValue(long timeMillis) {
-            return TDigest.createDigest(compression);
+            return new DubboMergingDigest(compression);
         }
 
         @Override
         protected Pane<TDigest> resetPaneTo(final Pane<TDigest> pane, long startTime) {
             pane.setStartInMs(startTime);
-            pane.setValue(TDigest.createDigest(compression));
+            pane.setValue(new DubboMergingDigest(compression));
             return pane;
         }
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnsubscribedTask.java
Patch:
@@ -41,7 +41,7 @@ public FailedUnsubscribedTask(URL url, FailbackRegistry registry, NotifyListener
 
     @Override
     protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
-        registry.unsubscribe(url, listener);
+        registry.doUnsubscribe(url, listener);
         registry.removeFailedUnsubscribedTask(url, listener);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -333,6 +333,8 @@ public Result invoke(final Invocation invocation) throws RpcException {
         List<Invoker<T>> invokers = list(invocation);
         InvocationProfilerUtils.releaseDetailProfiler(invocation);
 
+        checkInvokers(invokers, invocation);
+
         LoadBalance loadbalance = initLoadBalance(invokers, invocation);
         RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/BroadcastClusterInvoker.java
Patch:
@@ -51,7 +51,6 @@ public BroadcastClusterInvoker(Directory<T> directory) {
     @Override
     @SuppressWarnings({"unchecked", "rawtypes"})
     public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
-        checkInvokers(invokers, invocation);
         RpcContext.getServiceContext().setInvokers((List) invokers);
         RpcException exception = null;
         Result result = null;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvoker.java
Patch:
@@ -104,7 +104,6 @@ protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, Load
         Invoker<T> invoker = null;
         URL consumerUrl = RpcContext.getServiceContext().getConsumerUrl();
         try {
-            checkInvokers(invokers, invocation);
             invoker = select(loadbalance, invocation, invokers, null);
             // Asynchronous call method must be used here, because failback will retry in the background.
             // Then the serviceContext will be cleared after the call is completed.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvoker.java
Patch:
@@ -41,7 +41,6 @@ public FailfastClusterInvoker(Directory<T> directory) {
 
     @Override
     public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
-        checkInvokers(invokers, invocation);
         Invoker<T> invoker = select(loadbalance, invocation, invokers, null);
         try {
             return invokeWithContext(invoker, invocation);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvoker.java
Patch:
@@ -57,7 +57,6 @@ public FailoverClusterInvoker(Directory<T> directory) {
     @SuppressWarnings({"unchecked", "rawtypes"})
     public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
         List<Invoker<T>> copyInvokers = invokers;
-        checkInvokers(copyInvokers, invocation);
         String methodName = RpcUtils.getMethodName(invocation);
         int len = calculateInvokeTimes(methodName);
         // retry loop.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailsafeClusterInvoker.java
Patch:
@@ -47,7 +47,6 @@ public FailsafeClusterInvoker(Directory<T> directory) {
     @Override
     public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
         try {
-            checkInvokers(invokers, invocation);
             Invoker<T> invoker = select(loadbalance, invocation, invokers, null);
             return invokeWithContext(invoker, invocation);
         } catch (Throwable e) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvoker.java
Patch:
@@ -67,7 +67,6 @@ public ForkingClusterInvoker(Directory<T> directory) {
     @SuppressWarnings({"unchecked", "rawtypes"})
     public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
         try {
-            checkInvokers(invokers, invocation);
             final List<Invoker<T>> selected;
             final int forks = getUrl().getParameter(FORKS_KEY, DEFAULT_FORKS);
             final int timeout = getUrl().getParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java
Patch:
@@ -59,7 +59,6 @@ public MergeableClusterInvoker(Directory<T> directory) {
 
     @Override
     protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
-        checkInvokers(invokers, invocation);
         String merger = getUrl().getMethodParameter(invocation.getMethodName(), MERGER_KEY);
         if (ConfigUtils.isEmpty(merger)) { // If a method doesn't have a merger, only invoke one Group
             for (final Invoker<T> invoker : invokers) {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AvailableClusterInvokerTest.java
Patch:
@@ -107,7 +107,7 @@ void testInvokeWithException() {
             invoker.invoke(invocation);
             fail();
         } catch (RpcException e) {
-            Assertions.assertTrue(e.getMessage().contains("No provider available in"));
+            Assertions.assertTrue(e.getMessage().contains("No provider available"));
             assertFalse(e.getCause() instanceof RpcException);
         }
     }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/registry/ZoneAwareClusterInvokerTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.rpc.cluster.ClusterInvoker;
 import org.apache.dubbo.rpc.cluster.Directory;
 
+import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -174,6 +175,7 @@ public void testNoAvailableInvoker() {
         given(directory.getUrl()).willReturn(url);
         given(directory.getConsumerUrl()).willReturn(url);
         given(directory.list(invocation)).willReturn(new ArrayList<>(0));
+        given(directory.getInterface()).willReturn(ZoneAwareClusterInvokerTest.class);
 
         zoneAwareClusterInvoker = new ZoneAwareClusterInvoker<>(directory);
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/QosConstants.java
Patch:
@@ -34,6 +34,8 @@ public interface QosConstants {
 
     String ANONYMOUS_ACCESS_PERMISSION_LEVEL = "qos.anonymous.access.permission.level";
 
+    String ANONYMOUS_ACCESS_ALLOW_COMMANDS = "qos.anonymous.access.allow.commands";
+
     String QOS_ENABLE_COMPATIBLE = "qos-enable";
 
     String QOS_HOST_COMPATIBLE = "qos-host";

File: dubbo-common/src/main/java/org/apache/dubbo/config/Constants.java
Patch:
@@ -150,4 +150,6 @@ public interface Constants {
     String SERVER_THREAD_POOL_NAME = "DubboServerHandler";
 
     String CLIENT_THREAD_POOL_NAME = "DubboClientHandler";
+
+    String REST_PROTOCOL="rest";
 }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ProtocolConfig.java
Patch:
@@ -273,7 +273,7 @@ public String getName() {
         return name;
     }
 
-    public final void setName(String name) {
+    public void setName(String name) {
         this.name = name;
     }
 
@@ -291,7 +291,7 @@ public Integer getPort() {
         return port;
     }
 
-    public final void setPort(Integer port) {
+    public void setPort(Integer port) {
         this.port = port;
     }
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ModuleConfigTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.config;
 
 import com.alibaba.dubbo.config.ModuleConfig;
+import com.alibaba.dubbo.config.MonitorConfig;
 import com.alibaba.dubbo.config.RegistryConfig;
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/reference/ReferenceBeanSupport.java
Patch:
@@ -52,7 +52,7 @@
 
 public class ReferenceBeanSupport {
 
-    private static List<String> IGNORED_ATTRS = Arrays.asList(ReferenceAttributes.ID, ReferenceAttributes.GROUP,
+    private static final List<String> IGNORED_ATTRS = Arrays.asList(ReferenceAttributes.ID, ReferenceAttributes.GROUP,
         ReferenceAttributes.VERSION, ReferenceAttributes.INTERFACE, ReferenceAttributes.INTERFACE_NAME,
         ReferenceAttributes.INTERFACE_CLASS);
 
@@ -66,7 +66,7 @@ public static void convertReferenceProps(Map<String, Object> attributes, Class d
         if (interfaceName == null) {
             Object interfaceClassValue = attributes.get(ReferenceAttributes.INTERFACE_CLASS);
             if (interfaceClassValue instanceof Class) {
-                interfaceName = ((Class) interfaceClassValue).getName();
+                interfaceName = ((Class<?>) interfaceClassValue).getName();
             } else if (interfaceClassValue instanceof String) {
                 if (interfaceClassValue.equals("void")) {
                     attributes.remove(ReferenceAttributes.INTERFACE_CLASS);

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/ServiceRestMetadata.java
Patch:
@@ -110,7 +110,7 @@ public void setMeta(Set<RestMethodMetadata> meta) {
 
     public void addRestMethodMetadata(RestMethodMetadata restMethodMetadata) {
         PathMatcher pathMather = new PathMatcher(restMethodMetadata.getRequest().getPath(),
-            this.getVersion(), this.getGroup(), this.getPort());
+            this.getVersion(), this.getGroup(), this.getPort(),restMethodMetadata.getRequest().getMethod());
         addPathToServiceMap(pathMather, restMethodMetadata);
         addMethodToServiceMap(restMethodMetadata);
         getMeta().add(restMethodMetadata);

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/rest/springmvc/SpringMvcServiceRestMetadataResolverTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.metadata.rest.RestService;
 import org.apache.dubbo.metadata.rest.ServiceRestMetadata;
 import org.apache.dubbo.metadata.rest.StandardRestService;
+import org.apache.dubbo.metadata.rest.api.SpringControllerService;
 import org.apache.dubbo.metadata.rest.api.SpringRestService;
 import org.apache.dubbo.metadata.rest.api.SpringRestServiceImpl;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -86,6 +87,7 @@ void testResolve() {
     void testResolves() {
         testResolve(SpringRestService.class);
         testResolve(SpringRestServiceImpl.class);
+        testResolve(SpringControllerService.class);
     }
 
     void testResolve(Class service) {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/EmptyEvent.java
Patch:
@@ -27,7 +27,7 @@ public class EmptyEvent extends MetricsEvent {
     private static final EmptyEvent empty = new EmptyEvent(null);
 
     private EmptyEvent(ApplicationModel source) {
-        super(source);
+        super(source, null);
     }
 
     public static EmptyEvent instance() {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/TimeCounterEvent.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.metrics.event;
 
 import org.apache.dubbo.metrics.model.TimePair;
+import org.apache.dubbo.metrics.model.key.TypeWrapper;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 /**
@@ -27,8 +28,8 @@ public abstract class TimeCounterEvent extends MetricsEvent {
 
     private final TimePair timePair;
 
-    public TimeCounterEvent(ApplicationModel source) {
-        super(source);
+    public TimeCounterEvent(ApplicationModel source, TypeWrapper typeWrapper) {
+        super(source, typeWrapper);
         this.timePair = TimePair.start();
     }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/MetricsLevel.java
Patch:
@@ -18,5 +18,5 @@
 package org.apache.dubbo.metrics.model.key;
 
 public enum MetricsLevel {
-    APP,SERVICE
+    APP, SERVICE, METHOD, CONFIG
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/report/MetricsExport.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.metrics.report;
 
 import org.apache.dubbo.metrics.model.MetricsCategory;
-import org.apache.dubbo.metrics.model.sample.GaugeMetricSample;
+import org.apache.dubbo.metrics.model.sample.MetricSample;
 
 import java.util.List;
 
@@ -31,6 +31,6 @@ public interface MetricsExport {
     /**
      * export all.
      */
-    List<GaugeMetricSample> export(MetricsCategory category);
+    List<MetricSample> export(MetricsCategory category);
 
 }

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/MetricsScopeModelInitializer.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dubbo.metrics;
 
 import org.apache.dubbo.common.beans.factory.ScopeBeanFactory;
-import org.apache.dubbo.metrics.collector.DefaultMetricsCollector;
 import org.apache.dubbo.metrics.event.MetricsDispatcher;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
@@ -35,7 +34,6 @@ public void initializeFrameworkModel(FrameworkModel frameworkModel) {
     @Override
     public void initializeApplicationModel(ApplicationModel applicationModel) {
         ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
-        beanFactory.registerBean(DefaultMetricsCollector.class);
         beanFactory.registerBean(MetricsDispatcher.class);
     }
 

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/event/MetadataEvent.java
Patch:
@@ -40,8 +40,7 @@
  */
 public class MetadataEvent extends TimeCounterEvent {
     public MetadataEvent(ApplicationModel applicationModel, TypeWrapper typeWrapper) {
-        super(applicationModel);
-        super.typeWrapper = typeWrapper;
+        super(applicationModel,typeWrapper);
         ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
         MetadataMetricsCollector collector;
         if (!beanFactory.isDestroyed()) {

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/event/MetadataSubDispatcher.java
Patch:
@@ -32,9 +32,9 @@
 import static org.apache.dubbo.metrics.metadata.MetadataMetricsConstants.OP_TYPE_STORE_PROVIDER_INTERFACE;
 import static org.apache.dubbo.metrics.metadata.MetadataMetricsConstants.OP_TYPE_SUBSCRIBE;
 
-public final class MetadataMetricsEventMulticaster extends SimpleMetricsEventMulticaster {
+public final class MetadataSubDispatcher extends SimpleMetricsEventMulticaster {
 
-    public MetadataMetricsEventMulticaster(MetadataMetricsCollector collector) {
+    public MetadataSubDispatcher(MetadataMetricsCollector collector) {
 
         CategorySet.ALL.forEach(categorySet ->
         {

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/event/RegistryEvent.java
Patch:
@@ -38,8 +38,7 @@
  */
 public class RegistryEvent extends TimeCounterEvent {
     public RegistryEvent(ApplicationModel applicationModel, TypeWrapper typeWrapper) {
-        super(applicationModel);
-        super.typeWrapper = typeWrapper;
+        super(applicationModel,typeWrapper);
         ScopeBeanFactory beanFactory = getSource().getBeanFactory();
         RegistryMetricsCollector collector;
         if (!beanFactory.isDestroyed()) {
@@ -59,7 +58,7 @@ public static RegistryEvent toSubscribeEvent(ApplicationModel applicationModel)
 
 
     public static RegistryEvent toNotifyEvent(ApplicationModel applicationModel) {
-        return new RegistryEvent(applicationModel, new TypeWrapper(MetricsLevel.APP, MetricsKey.NOTIFY_METRIC_REQUESTS, MetricsKey.NOTIFY_METRIC_NUM_LAST, null)) {
+        return new RegistryEvent(applicationModel, new TypeWrapper(MetricsLevel.APP, MetricsKey.NOTIFY_METRIC_REQUESTS, MetricsKey.NOTIFY_METRIC_NUM_LAST, (MetricsKey) null)) {
             @Override
             public void customAfterPost(Object postResult) {
                 super.putAttachment(ATTACHMENT_KEY_LAST_NUM_MAP, postResult);

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/protocol/QosProtocolWrapper.java
Patch:
@@ -40,6 +40,7 @@
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.QOS_FAILED_START_SERVER;
 import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP;
 import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP_WHITELIST;
+import static org.apache.dubbo.common.constants.QosConstants.ANONYMOUS_ACCESS_ALLOW_COMMANDS;
 import static org.apache.dubbo.common.constants.QosConstants.ANONYMOUS_ACCESS_PERMISSION_LEVEL;
 import static org.apache.dubbo.common.constants.QosConstants.QOS_ENABLE;
 import static org.apache.dubbo.common.constants.QosConstants.QOS_HOST;
@@ -119,6 +120,7 @@ private void startQosServer(URL url) {
             boolean acceptForeignIp = Boolean.parseBoolean(url.getParameter(ACCEPT_FOREIGN_IP, "false"));
             String acceptForeignIpWhitelist = url.getParameter(ACCEPT_FOREIGN_IP_WHITELIST, StringUtils.EMPTY_STRING);
             String anonymousAccessPermissionLevel = url.getParameter(ANONYMOUS_ACCESS_PERMISSION_LEVEL, PermissionLevel.PUBLIC.name());
+            String anonymousAllowCommands = url.getParameter(ANONYMOUS_ACCESS_ALLOW_COMMANDS, StringUtils.EMPTY_STRING);
             Server server = frameworkModel.getBeanFactory().getBean(Server.class);
 
             if (server.isStarted()) {
@@ -130,6 +132,7 @@ private void startQosServer(URL url) {
             server.setAcceptForeignIp(acceptForeignIp);
             server.setAcceptForeignIpWhitelist(acceptForeignIpWhitelist);
             server.setAnonymousAccessPermissionLevel(anonymousAccessPermissionLevel);
+            server.setAnonymousAllowCommands(anonymousAllowCommands);
             server.start();
 
         } catch (Throwable throwable) {

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/CommandHelperTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.dubbo.qos.command.impl.GetEnabledRouterSnapshot;
 import org.apache.dubbo.qos.command.impl.GetRecentRouterSnapshot;
 import org.apache.dubbo.qos.command.impl.GetRouterSnapshot;
+import org.apache.dubbo.qos.command.impl.GracefulShutdown;
 import org.apache.dubbo.qos.command.impl.Help;
 import org.apache.dubbo.qos.command.impl.InvokeTelnet;
 import org.apache.dubbo.qos.command.impl.Live;
@@ -123,6 +124,7 @@ void testGetAllCommandClass() {
         expectedClasses.add(SerializeWarnedClasses.class);
         expectedClasses.add(GetConfig.class);
         expectedClasses.add(GetAddress.class);
+        expectedClasses.add(GracefulShutdown.class);
         assertThat(classes, containsInAnyOrder(expectedClasses.toArray(new Class<?>[0])));
     }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -235,6 +235,7 @@ private Invocation createInvocation(Channel channel, URL url, String methodKey)
             }
         };
         this.frameworkModel = frameworkModel;
+        this.frameworkModel.getBeanFactory().registerBean(new DubboGracefulShutdown(this));
     }
 
     /**

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/PathAndInvokerMapper.java
Patch:
@@ -65,17 +65,17 @@ public void addPathAndInvoker(Map<PathMatcher, RestMethodMetadata> metadataMap,
      * @param port
      * @return
      */
-    public InvokerAndRestMethodMetadataPair getRestMethodMetadata(String path, String version, String group, Integer port) {
+    public InvokerAndRestMethodMetadataPair getRestMethodMetadata(String path, String version, String group, Integer port,String method) {
 
 
-        PathMatcher pathMather = PathMatcher.getInvokeCreatePathMatcher(path, version, group, port);
+        PathMatcher pathMather = PathMatcher.getInvokeCreatePathMatcher(path, version, group, port,method);
 
         // first search from pathToServiceMapNoPathVariable
         if (pathToServiceMapNoPathVariable.containsKey(pathMather)) {
             return pathToServiceMapNoPathVariable.get(pathMather);
         }
 
-        // second search from pathToServiceMapNoPathVariable
+        // second search from pathToServiceMapContainPathVariable
         if (pathToServiceMapContainPathVariable.containsKey(pathMather)) {
             return pathToServiceMapContainPathVariable.get(pathMather);
         }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestRPCInvocationUtil.java
Patch:
@@ -134,8 +134,9 @@ public static InvokerAndRestMethodMetadataPair getRestMethodMetadata(RequestFaca
         String path = request.getPath();
         String version = request.getHeader(RestHeaderEnum.VERSION.getHeader());
         String group = request.getHeader(RestHeaderEnum.GROUP.getHeader());
+        String method = request.getMethod();
 
-        return pathAndInvokerMapper.getRestMethodMetadata(path, version, group, null);
+        return pathAndInvokerMapper.getRestMethodMetadata(path, version, group, null, method);
     }
 
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/PbUnpack.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
-import org.apache.dubbo.rpc.model.PackableMethod;
+import org.apache.dubbo.rpc.model.UnPack;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 
-public class PbUnpack<T> implements PackableMethod.UnPack {
+public class PbUnpack<T> implements UnPack {
 
     private final Class<T> clz;
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/AbstractServerCall.java
Patch:
@@ -45,7 +45,6 @@
 import io.netty.handler.codec.http2.DefaultHttp2Headers;
 import io.netty.util.concurrent.Future;
 
-import java.io.IOException;
 import java.util.Map;
 import java.util.Objects;
 import java.util.concurrent.Executor;
@@ -225,8 +224,7 @@ public final void onMessage(byte[] message, boolean isReturnTriException) {
         }
     }
 
-    protected abstract Object parseSingleMessage(byte[] data)
-        throws IOException, ClassNotFoundException;
+    protected abstract Object parseSingleMessage(byte[] data) throws Exception;
 
     @Override
     public final void onCancelByRemote(TriRpcStatus status) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/StubAbstractServerCall.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.rpc.protocol.tri.stream.ServerStream;
 import org.apache.dubbo.rpc.stub.StubSuppliers;
 
-import java.io.IOException;
 import java.util.concurrent.Executor;
 
 public class StubAbstractServerCall extends AbstractServerCall {
@@ -58,7 +57,7 @@ private static ServiceDescriptor getServiceDescriptor(URL url, String serviceNam
     }
 
     @Override
-    protected Object parseSingleMessage(byte[] data) throws IOException, ClassNotFoundException {
+    protected Object parseSingleMessage(byte[] data) throws Exception {
         return packableMethod.parseRequest(data);
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/call/StubServerCallTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
-import java.io.IOException;
 import java.util.Collections;
 
 import static org.mockito.ArgumentMatchers.any;
@@ -40,7 +39,7 @@
 class StubServerCallTest {
 
     @Test
-    void doStartCall() throws IOException, ClassNotFoundException {
+    void doStartCall() throws Exception {
         Invoker<?> invoker = Mockito.mock(Invoker.class);
         TripleServerStream tripleServerStream = Mockito.mock(TripleServerStream.class);
         ProviderModel providerModel = Mockito.mock(ProviderModel.class);

File: dubbo-test/dubbo-test-modules/src/test/java/org/apache/dubbo/dependency/FileTest.java
Patch:
@@ -54,7 +54,6 @@ class FileTest {
 
         ignoredArtifacts.add(Pattern.compile("dubbo-demo.*"));
         ignoredArtifacts.add(Pattern.compile("dubbo-test.*"));
-        ignoredArtifacts.add(Pattern.compile("dubbo-config-spring6.*"));
         ignoredArtifacts.add(Pattern.compile("dubbo-annotation-processor"));
 
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo"));

File: dubbo-common/src/main/java/org/apache/dubbo/config/ProtocolConfig.java
Patch:
@@ -273,7 +273,7 @@ public String getName() {
         return name;
     }
 
-    public final void setName(String name) {
+    public void setName(String name) {
         this.name = name;
     }
 
@@ -291,7 +291,7 @@ public Integer getPort() {
         return port;
     }
 
-    public final void setPort(Integer port) {
+    public void setPort(Integer port) {
         this.port = port;
     }
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ModuleConfigTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.config;
 
 import com.alibaba.dubbo.config.ModuleConfig;
+import com.alibaba.dubbo.config.MonitorConfig;
 import com.alibaba.dubbo.config.RegistryConfig;
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/EmptyEvent.java
Patch:
@@ -27,7 +27,7 @@ public class EmptyEvent extends MetricsEvent {
     private static final EmptyEvent empty = new EmptyEvent(null);
 
     private EmptyEvent(ApplicationModel source) {
-        super(source);
+        super(source, null);
     }
 
     public static EmptyEvent instance() {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/TimeCounterEvent.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.metrics.event;
 
 import org.apache.dubbo.metrics.model.TimePair;
+import org.apache.dubbo.metrics.model.key.TypeWrapper;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 /**
@@ -27,8 +28,8 @@ public abstract class TimeCounterEvent extends MetricsEvent {
 
     private final TimePair timePair;
 
-    public TimeCounterEvent(ApplicationModel source) {
-        super(source);
+    public TimeCounterEvent(ApplicationModel source, TypeWrapper typeWrapper) {
+        super(source, typeWrapper);
         this.timePair = TimePair.start();
     }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/MetricsKey.java
Patch:
@@ -39,12 +39,12 @@ public enum MetricsKey {
     METRIC_REQUESTS_TOTAL_AGG("dubbo.%s.requests.total.aggregate", "Aggregated Total Requests"),
     METRIC_REQUESTS_SUCCEED_AGG("dubbo.%s.requests.succeed.aggregate", "Aggregated Succeed Requests"),
     METRIC_REQUESTS_FAILED_AGG("dubbo.%s.requests.failed.aggregate", "Aggregated Failed Requests"),
-    METRIC_REQUESTS_BUSINESS_FAILED_AGG("dubbo.%s.requests.business.failed.aggregate", "Aggregated Business Failed Requests"),
+    METRIC_REQUEST_BUSINESS_FAILED_AGG("dubbo.%s.requests.business.failed.aggregate", "Aggregated Business Failed Requests"),
     METRIC_REQUESTS_TIMEOUT_AGG("dubbo.%s.requests.timeout.failed.aggregate", "Aggregated timeout Failed Requests"),
     METRIC_REQUESTS_LIMIT_AGG("dubbo.%s.requests.limit.aggregate", "Aggregated limit Requests"),
     METRIC_REQUESTS_TOTAL_FAILED_AGG("dubbo.%s.requests.failed.total.aggregate", "Aggregated failed total Requests"),
-    METRIC_REQUESTS_TOTAL_NETWORK_FAILED_AGG("dubbo.%s.requests.failed.network.total.aggregate", "Aggregated failed network total Requests"),
-    METRIC_REQUESTS_TOTAL_CODEC_FAILED_AGG("dubbo.%s.requests.failed.codec.total.aggregate", "Aggregated failed codec total Requests"),
+    METRIC_REQUESTS_NETWORK_FAILED_AGG("dubbo.%s.requests.failed.network.total.aggregate", "Aggregated failed network total Requests"),
+    METRIC_REQUESTS_CODEC_FAILED_AGG("dubbo.%s.requests.failed.codec.total.aggregate", "Aggregated failed codec total Requests"),
     METRIC_REQUESTS_TOTAL_SERVICE_UNAVAILABLE_FAILED_AGG("dubbo.%s.requests.failed.service.unavailable.total.aggregate", "Aggregated failed codec total Requests"),
 
     METRIC_QPS("dubbo.%s.qps.total", "Query Per Seconds"),

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/MetricsLevel.java
Patch:
@@ -18,5 +18,5 @@
 package org.apache.dubbo.metrics.model.key;
 
 public enum MetricsLevel {
-    APP,SERVICE,CONFIG
+    APP, SERVICE, METHOD, CONFIG
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/key/TypeWrapper.java
Patch:
@@ -44,4 +44,5 @@ public boolean isAssignableFrom(Object type) {
         Assert.notNull(type, "Type can not be null");
         return type.equals(postType) || type.equals(finishType) || type.equals(errorType);
     }
+
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/report/MetricsExport.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.metrics.report;
 
 import org.apache.dubbo.metrics.model.MetricsCategory;
-import org.apache.dubbo.metrics.model.sample.GaugeMetricSample;
+import org.apache.dubbo.metrics.model.sample.MetricSample;
 
 import java.util.List;
 
@@ -31,6 +31,6 @@ public interface MetricsExport {
     /**
      * export all.
      */
-    List<GaugeMetricSample> export(MetricsCategory category);
+    List<MetricSample> export(MetricsCategory category);
 
 }

File: dubbo-metrics/dubbo-metrics-config-center/src/main/java/org/apache/dubbo/metrics/config/event/ConfigCenterEvent.java
Patch:
@@ -44,8 +44,7 @@ public class ConfigCenterEvent extends TimeCounterEvent {
 
 
     public ConfigCenterEvent(ApplicationModel applicationModel, TypeWrapper typeWrapper) {
-        super(applicationModel);
-        super.typeWrapper = typeWrapper;
+        super(applicationModel,typeWrapper);
         ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
         ConfigCenterMetricsCollector collector;
         if (!beanFactory.isDestroyed()) {

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/MetricsScopeModelInitializer.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dubbo.metrics;
 
 import org.apache.dubbo.common.beans.factory.ScopeBeanFactory;
-import org.apache.dubbo.metrics.collector.DefaultMetricsCollector;
 import org.apache.dubbo.metrics.event.MetricsDispatcher;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
@@ -35,7 +34,6 @@ public void initializeFrameworkModel(FrameworkModel frameworkModel) {
     @Override
     public void initializeApplicationModel(ApplicationModel applicationModel) {
         ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
-        beanFactory.registerBean(DefaultMetricsCollector.class);
         beanFactory.registerBean(MetricsDispatcher.class);
     }
 

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/event/MetadataEvent.java
Patch:
@@ -40,8 +40,7 @@
  */
 public class MetadataEvent extends TimeCounterEvent {
     public MetadataEvent(ApplicationModel applicationModel, TypeWrapper typeWrapper) {
-        super(applicationModel);
-        super.typeWrapper = typeWrapper;
+        super(applicationModel,typeWrapper);
         ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
         MetadataMetricsCollector collector;
         if (!beanFactory.isDestroyed()) {

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/event/MetadataSubDispatcher.java
Patch:
@@ -32,9 +32,9 @@
 import static org.apache.dubbo.metrics.metadata.MetadataMetricsConstants.OP_TYPE_STORE_PROVIDER_INTERFACE;
 import static org.apache.dubbo.metrics.metadata.MetadataMetricsConstants.OP_TYPE_SUBSCRIBE;
 
-public final class MetadataMetricsEventMulticaster extends SimpleMetricsEventMulticaster {
+public final class MetadataSubDispatcher extends SimpleMetricsEventMulticaster {
 
-    public MetadataMetricsEventMulticaster(MetadataMetricsCollector collector) {
+    public MetadataSubDispatcher(MetadataMetricsCollector collector) {
 
         CategorySet.ALL.forEach(categorySet ->
         {

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/event/RegistryEvent.java
Patch:
@@ -38,8 +38,7 @@
  */
 public class RegistryEvent extends TimeCounterEvent {
     public RegistryEvent(ApplicationModel applicationModel, TypeWrapper typeWrapper) {
-        super(applicationModel);
-        super.typeWrapper = typeWrapper;
+        super(applicationModel,typeWrapper);
         ScopeBeanFactory beanFactory = getSource().getBeanFactory();
         RegistryMetricsCollector collector;
         if (!beanFactory.isDestroyed()) {
@@ -59,7 +58,7 @@ public static RegistryEvent toSubscribeEvent(ApplicationModel applicationModel)
 
 
     public static RegistryEvent toNotifyEvent(ApplicationModel applicationModel) {
-        return new RegistryEvent(applicationModel, new TypeWrapper(MetricsLevel.APP, MetricsKey.NOTIFY_METRIC_REQUESTS, MetricsKey.NOTIFY_METRIC_NUM_LAST, null)) {
+        return new RegistryEvent(applicationModel, new TypeWrapper(MetricsLevel.APP, MetricsKey.NOTIFY_METRIC_REQUESTS, MetricsKey.NOTIFY_METRIC_NUM_LAST, (MetricsKey) null)) {
             @Override
             public void customAfterPost(Object postResult) {
                 super.putAttachment(ATTACHMENT_KEY_LAST_NUM_MAP, postResult);

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -688,7 +688,7 @@ public RegistryConfig getRegistry() {
     }
 
     public void setRegistry(RegistryConfig registry) {
-        List<RegistryConfig> registries = new ArrayList<RegistryConfig>(1);
+        List<RegistryConfig> registries = new ArrayList<>(1);
         registries.add(registry);
         setRegistries(registries);
     }
@@ -716,7 +716,6 @@ public List<MethodConfig> getMethods() {
         return methods;
     }
 
-    @SuppressWarnings("unchecked")
     public void setMethods(List<? extends MethodConfig> methods) {
         this.methods = (methods != null) ? new ArrayList<>(methods) : null;
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/reference/ReferenceBeanSupport.java
Patch:
@@ -51,7 +51,7 @@
 
 public class ReferenceBeanSupport {
 
-    private static List<String> IGNORED_ATTRS = Arrays.asList(ReferenceAttributes.ID, ReferenceAttributes.GROUP,
+    private static final List<String> IGNORED_ATTRS = Arrays.asList(ReferenceAttributes.ID, ReferenceAttributes.GROUP,
         ReferenceAttributes.VERSION, ReferenceAttributes.INTERFACE, ReferenceAttributes.INTERFACE_NAME,
         ReferenceAttributes.INTERFACE_CLASS);
 
@@ -65,7 +65,7 @@ public static void convertReferenceProps(Map<String, Object> attributes, Class d
         if (interfaceName == null) {
             Object interfaceClassValue = attributes.get(ReferenceAttributes.INTERFACE_CLASS);
             if (interfaceClassValue instanceof Class) {
-                interfaceName = ((Class) interfaceClassValue).getName();
+                interfaceName = ((Class<?>) interfaceClassValue).getName();
             } else if (interfaceClassValue instanceof String) {
                 if (interfaceClassValue.equals("void")) {
                     attributes.remove(ReferenceAttributes.INTERFACE_CLASS);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -86,6 +86,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.LOADBALANCE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.PACKABLE_METHOD_FACTORY_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_PROTOCOL_LISTENER_KEY;
@@ -144,7 +145,7 @@ public class RegistryProtocol implements Protocol, ScopeModelAware {
     public static final String[] DEFAULT_REGISTER_PROVIDER_KEYS = {
         APPLICATION_KEY, CODEC_KEY, EXCHANGER_KEY, SERIALIZATION_KEY, PREFER_SERIALIZATION_KEY, CLUSTER_KEY, CONNECTIONS_KEY, DEPRECATED_KEY,
         GROUP_KEY, LOADBALANCE_KEY, MOCK_KEY, PATH_KEY, TIMEOUT_KEY, TOKEN_KEY, VERSION_KEY, WARMUP_KEY,
-        WEIGHT_KEY, DUBBO_VERSION_KEY, RELEASE_KEY, SIDE_KEY, IPV6_KEY
+        WEIGHT_KEY, DUBBO_VERSION_KEY, RELEASE_KEY, SIDE_KEY, IPV6_KEY, PACKABLE_METHOD_FACTORY_KEY
     };
 
     public static final String[] DEFAULT_REGISTER_CONSUMER_KEYS = {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/PbUnpack.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
-import org.apache.dubbo.rpc.model.PackableMethod;
+import org.apache.dubbo.rpc.model.UnPack;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 
-public class PbUnpack<T> implements PackableMethod.UnPack {
+public class PbUnpack<T> implements UnPack {
 
     private final Class<T> clz;
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/AbstractServerCall.java
Patch:
@@ -45,7 +45,6 @@
 import io.netty.handler.codec.http2.DefaultHttp2Headers;
 import io.netty.util.concurrent.Future;
 
-import java.io.IOException;
 import java.util.Map;
 import java.util.Objects;
 import java.util.concurrent.Executor;
@@ -225,8 +224,7 @@ public final void onMessage(byte[] message, boolean isReturnTriException) {
         }
     }
 
-    protected abstract Object parseSingleMessage(byte[] data)
-        throws IOException, ClassNotFoundException;
+    protected abstract Object parseSingleMessage(byte[] data) throws Exception;
 
     @Override
     public final void onCancelByRemote(TriRpcStatus status) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/StubAbstractServerCall.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.rpc.protocol.tri.stream.ServerStream;
 import org.apache.dubbo.rpc.stub.StubSuppliers;
 
-import java.io.IOException;
 import java.util.concurrent.Executor;
 
 public class StubAbstractServerCall extends AbstractServerCall {
@@ -58,7 +57,7 @@ private static ServiceDescriptor getServiceDescriptor(URL url, String serviceNam
     }
 
     @Override
-    protected Object parseSingleMessage(byte[] data) throws IOException, ClassNotFoundException {
+    protected Object parseSingleMessage(byte[] data) throws Exception {
         return packableMethod.parseRequest(data);
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/call/StubServerCallTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
-import java.io.IOException;
 import java.util.Collections;
 
 import static org.mockito.ArgumentMatchers.any;
@@ -40,7 +39,7 @@
 class StubServerCallTest {
 
     @Test
-    void doStartCall() throws IOException, ClassNotFoundException {
+    void doStartCall() throws Exception {
         Invoker<?> invoker = Mockito.mock(Invoker.class);
         TripleServerStream tripleServerStream = Mockito.mock(TripleServerStream.class);
         ProviderModel providerModel = Mockito.mock(ProviderModel.class);

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/AggregateMetricsCollector.java
Patch:
@@ -66,7 +66,7 @@ public AggregateMetricsCollector(ApplicationModel applicationModel) {
         this.applicationModel = applicationModel;
         ConfigManager configManager = applicationModel.getApplicationConfigManager();
         MetricsConfig config = configManager.getMetrics().orElse(null);
-        if (config != null && config.getAggregation() != null && (config.getAggregation().getEnabled() == null || Boolean.TRUE.equals(config.getAggregation().getEnabled()))) {
+        if (config != null && config.getAggregation() != null && (Boolean.TRUE.equals(config.getAggregation().getEnabled()))) {
             // only registered when aggregation is enabled.
             registerListener();
 

File: dubbo-spring-boot/dubbo-spring-boot-observability-starters/dubbo-spring-boot-observability-autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/exporter/zipkin/ZipkinAutoConfiguration.java
Patch:
@@ -44,10 +44,12 @@
  * {@link EnableAutoConfiguration Auto-configuration} for Zipkin.
  * <p>
  * It uses imports on {@link ZipkinConfigurations} to guarantee the correct configuration ordering.
+ * Create Zipkin sender and exporter when you are using Boot < 3.0 or you are not using spring-boot-starter-actuator.
+ * When you use SpringBoot 3.*, priority should be given to loading S3 related configurations. Dubbo related zipkin configurations are invalid.
  *
  * @since 3.2.1
  */
-@AutoConfiguration(after = RestTemplateAutoConfiguration.class)
+@AutoConfiguration(after = RestTemplateAutoConfiguration.class, afterName = "org.springframework.boot.actuate.autoconfigure.tracing.zipkin")
 @ConditionalOnClass(Sender.class)
 @Import({SenderConfiguration.class,
         ReporterConfiguration.class, BraveConfiguration.class,

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -333,6 +333,8 @@ public Result invoke(final Invocation invocation) throws RpcException {
         List<Invoker<T>> invokers = list(invocation);
         InvocationProfilerUtils.releaseDetailProfiler(invocation);
 
+        checkInvokers(invokers, invocation);
+
         LoadBalance loadbalance = initLoadBalance(invokers, invocation);
         RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/BroadcastClusterInvoker.java
Patch:
@@ -51,7 +51,6 @@ public BroadcastClusterInvoker(Directory<T> directory) {
     @Override
     @SuppressWarnings({"unchecked", "rawtypes"})
     public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
-        checkInvokers(invokers, invocation);
         RpcContext.getServiceContext().setInvokers((List) invokers);
         RpcException exception = null;
         Result result = null;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvoker.java
Patch:
@@ -104,7 +104,6 @@ protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, Load
         Invoker<T> invoker = null;
         URL consumerUrl = RpcContext.getServiceContext().getConsumerUrl();
         try {
-            checkInvokers(invokers, invocation);
             invoker = select(loadbalance, invocation, invokers, null);
             // Asynchronous call method must be used here, because failback will retry in the background.
             // Then the serviceContext will be cleared after the call is completed.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvoker.java
Patch:
@@ -41,7 +41,6 @@ public FailfastClusterInvoker(Directory<T> directory) {
 
     @Override
     public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
-        checkInvokers(invokers, invocation);
         Invoker<T> invoker = select(loadbalance, invocation, invokers, null);
         try {
             return invokeWithContext(invoker, invocation);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvoker.java
Patch:
@@ -57,7 +57,6 @@ public FailoverClusterInvoker(Directory<T> directory) {
     @SuppressWarnings({"unchecked", "rawtypes"})
     public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
         List<Invoker<T>> copyInvokers = invokers;
-        checkInvokers(copyInvokers, invocation);
         String methodName = RpcUtils.getMethodName(invocation);
         int len = calculateInvokeTimes(methodName);
         // retry loop.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailsafeClusterInvoker.java
Patch:
@@ -47,7 +47,6 @@ public FailsafeClusterInvoker(Directory<T> directory) {
     @Override
     public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
         try {
-            checkInvokers(invokers, invocation);
             Invoker<T> invoker = select(loadbalance, invocation, invokers, null);
             return invokeWithContext(invoker, invocation);
         } catch (Throwable e) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvoker.java
Patch:
@@ -67,7 +67,6 @@ public ForkingClusterInvoker(Directory<T> directory) {
     @SuppressWarnings({"unchecked", "rawtypes"})
     public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
         try {
-            checkInvokers(invokers, invocation);
             final List<Invoker<T>> selected;
             final int forks = getUrl().getParameter(FORKS_KEY, DEFAULT_FORKS);
             final int timeout = getUrl().getParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java
Patch:
@@ -59,7 +59,6 @@ public MergeableClusterInvoker(Directory<T> directory) {
 
     @Override
     protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
-        checkInvokers(invokers, invocation);
         String merger = getUrl().getMethodParameter(invocation.getMethodName(), MERGER_KEY);
         if (ConfigUtils.isEmpty(merger)) { // If a method doesn't have a merger, only invoke one Group
             for (final Invoker<T> invoker : invokers) {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AvailableClusterInvokerTest.java
Patch:
@@ -107,7 +107,7 @@ void testInvokeWithException() {
             invoker.invoke(invocation);
             fail();
         } catch (RpcException e) {
-            Assertions.assertTrue(e.getMessage().contains("No provider available in"));
+            Assertions.assertTrue(e.getMessage().contains("No provider available"));
             assertFalse(e.getCause() instanceof RpcException);
         }
     }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/registry/ZoneAwareClusterInvokerTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.rpc.cluster.ClusterInvoker;
 import org.apache.dubbo.rpc.cluster.Directory;
 
+import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -174,6 +175,7 @@ public void testNoAvailableInvoker() {
         given(directory.getUrl()).willReturn(url);
         given(directory.getConsumerUrl()).willReturn(url);
         given(directory.list(invocation)).willReturn(new ArrayList<>(0));
+        given(directory.getInterface()).willReturn(ZoneAwareClusterInvokerTest.class);
 
         zoneAwareClusterInvoker = new ZoneAwareClusterInvoker<>(directory);
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/AbstractJsonUtilImpl.java
Patch:
@@ -16,15 +16,15 @@
  */
 package org.apache.dubbo.common.json.impl;
 
-import org.apache.dubbo.common.json.JSON;
+import org.apache.dubbo.common.json.JsonUtil;
 import org.apache.dubbo.common.utils.CollectionUtils;
 
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 
-public abstract class AbstractJSONImpl implements JSON {
+public abstract class AbstractJsonUtilImpl implements JsonUtil {
     @Override
     public boolean isSupport() {
         try {

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/FastJson2Impl.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.reflect.Type;
 import java.util.List;
 
-public class FastJson2Impl extends AbstractJSONImpl {
+public class FastJson2Impl extends AbstractJsonUtilImpl {
     @Override
     public <T> T toJavaObject(String json, Type type) {
         return com.alibaba.fastjson2.JSON.parseObject(json, type);

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/FastJsonImpl.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.reflect.Type;
 import java.util.List;
 
-public class FastJsonImpl extends AbstractJSONImpl {
+public class FastJsonImpl extends AbstractJsonUtilImpl {
 
     @Override
     public <T> T toJavaObject(String json, Type type) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/GsonImpl.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.reflect.Type;
 import java.util.List;
 
-public class GsonImpl extends AbstractJSONImpl {
+public class GsonImpl extends AbstractJsonUtilImpl {
     // weak reference of com.google.gson.Gson, prevent throw exception when init
     private volatile Object gsonCache = null;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/JacksonImpl.java
Patch:
@@ -26,7 +26,7 @@
 import java.lang.reflect.Type;
 import java.util.List;
 
-public class JacksonImpl extends AbstractJSONImpl {
+public class JacksonImpl extends AbstractJsonUtilImpl {
     private final ObjectMapper objectMapper = new ObjectMapper();
 
     private volatile Object jacksonCache = null;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassLoaderResourceLoader.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.utils;
 
+import org.apache.dubbo.common.aot.NativeDetector;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.resource.GlobalResourcesRepository;
@@ -78,7 +79,7 @@ public static Set<URL> loadResources(String fileName, ClassLoader currentClassLo
             Enumeration<URL> urls;
             try {
                 urls = currentClassLoader.getResources(fileName);
-                boolean isNative = NativeUtils.isNative();
+                boolean isNative = NativeDetector.inNativeImage();
                 if (urls != null) {
                     while (urls.hasMoreElements()) {
                         URL url = urls.nextElement();

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.Version;
+import org.apache.dubbo.common.aot.NativeDetector;
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.config.Environment;
 import org.apache.dubbo.common.config.InmemoryConfiguration;
@@ -47,7 +48,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SPLIT_PATTERN;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INVOKER_LISTENER_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.NATIVE;
 import static org.apache.dubbo.common.constants.CommonConstants.PID_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.REFERENCE_FILTER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.RELEASE_KEY;
@@ -292,8 +292,7 @@ protected void appendMetricsCompatible(Map<String, String> map) {
      * @return
      */
     protected String[] methods(Class<?> interfaceClass) {
-        boolean isNative = getEnvironment().getConfiguration().getBoolean(NATIVE, false);
-        if (isNative) {
+        if (NativeDetector.inNativeImage()) {
             return Arrays.stream(interfaceClass.getMethods()).map(Method::getName).toArray(String[]::new);
         } else {
             return ClassUtils.getMethodNames(interfaceClass);

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/JsonUtilsTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.common.utils;
 
-import org.apache.dubbo.common.json.JSON;
+import org.apache.dubbo.common.json.JsonUtil;
 import org.apache.dubbo.common.json.impl.FastJson2Impl;
 import org.apache.dubbo.common.json.impl.FastJsonImpl;
 import org.apache.dubbo.common.json.impl.GsonImpl;
@@ -319,10 +319,10 @@ void testGetJson2() {
 
     private static Field jsonFieldCache;
 
-    private static void setJson(JSON json) {
+    private static void setJson(JsonUtil json) {
         try {
             if (jsonFieldCache == null) {
-                jsonFieldCache = JsonUtils.class.getDeclaredField("json");
+                jsonFieldCache = JsonUtils.class.getDeclaredField("jsonUtil");
                 jsonFieldCache.setAccessible(true);
             }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboConfigBeanInitializer.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
 import org.apache.dubbo.config.spring.reference.ReferenceBeanManager;
+import org.apache.dubbo.config.spring.util.DubboBeanUtils;
 import org.apache.dubbo.rpc.model.ModuleModel;
 
 import org.springframework.beans.BeansException;
@@ -66,7 +67,6 @@ public class DubboConfigBeanInitializer implements BeanFactoryAware, Initializin
     private ConfigurableListableBeanFactory beanFactory;
     private ReferenceBeanManager referenceBeanManager;
 
-    @Autowired
     private ConfigManager configManager;
 
     @Autowired
@@ -86,6 +86,7 @@ public void afterPropertiesSet() throws Exception {
     private void init() {
         if (initialized.compareAndSet(false, true)) {
             referenceBeanManager = beanFactory.getBean(ReferenceBeanManager.BEAN_NAME, ReferenceBeanManager.class);
+            configManager = DubboBeanUtils.getConfigManager(beanFactory);
             try {
                 prepareDubboConfigBeans();
                 referenceBeanManager.prepareReferenceBeans();

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboComponentScanRegistrar.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor;
 import org.apache.dubbo.config.spring.context.DubboSpringInitializer;
-
+import org.apache.dubbo.config.spring.util.SpringCompatUtils;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.AbstractBeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
@@ -70,7 +70,7 @@ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, B
      */
     private void registerServiceAnnotationPostProcessor(Set<String> packagesToScan, BeanDefinitionRegistry registry) {
 
-        BeanDefinitionBuilder builder = rootBeanDefinition(ServiceAnnotationPostProcessor.class);
+        BeanDefinitionBuilder builder = rootBeanDefinition(SpringCompatUtils.serviceAnnotationPostProcessor());
         builder.addConstructorArgValue(packagesToScan);
         builder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
         AbstractBeanDefinition beanDefinition = builder.getBeanDefinition();

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/AnnotationBeanDefinitionParser.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor;
 
+import org.apache.dubbo.config.spring.util.SpringCompatUtils;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;
@@ -73,7 +74,7 @@ protected boolean shouldGenerateIdAsFallback() {
 
     @Override
     protected Class<?> getBeanClass(Element element) {
-        return ServiceAnnotationPostProcessor.class;
+        return SpringCompatUtils.serviceAnnotationPostProcessor();
     }
 
 }

File: dubbo-native/src/main/java/org/apache/dubbo/aot/api/ConditionalDescriber.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.aot.generate;
+package org.apache.dubbo.aot.api;
 
 /**
  * A describer that describes the conditions for the configuration to take effect.

File: dubbo-native/src/main/java/org/apache/dubbo/aot/api/ExecutableMode.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.aot.generate;
+package org.apache.dubbo.aot.api;
 
 import java.lang.reflect.Executable;
 

File: dubbo-native/src/main/java/org/apache/dubbo/aot/api/FieldDescriber.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.aot.generate;
+package org.apache.dubbo.aot.api;
 
 import java.lang.reflect.Field;
 

File: dubbo-native/src/main/java/org/apache/dubbo/aot/api/MemberCategory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.aot.generate;
+package org.apache.dubbo.aot.api;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;

File: dubbo-native/src/main/java/org/apache/dubbo/aot/api/MemberDescriber.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.aot.generate;
+package org.apache.dubbo.aot.api;
 
 import java.lang.reflect.Member;
 

File: dubbo-native/src/main/java/org/apache/dubbo/aot/api/ResourceBundleDescriber.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.aot.generate;
+package org.apache.dubbo.aot.api;
 
 import java.util.List;
 import java.util.Objects;

File: dubbo-native/src/main/java/org/apache/dubbo/aot/api/ResourcePatternDescriber.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.aot.generate;
+package org.apache.dubbo.aot.api;
 
 import java.util.Arrays;
 import java.util.regex.Pattern;

File: dubbo-native/src/main/java/org/apache/dubbo/aot/api/TypeDescriber.java
Patch:
@@ -14,7 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.aot.generate;
+package org.apache.dubbo.aot.api;
+
+import org.apache.dubbo.aot.generate.ExecutableDescriber;
 
 import java.util.Set;
 

File: dubbo-native/src/main/java/org/apache/dubbo/aot/generate/ExecutableDescriber.java
Patch:
@@ -17,6 +17,9 @@
 package org.apache.dubbo.aot.generate;
 
 
+import org.apache.dubbo.aot.api.ExecutableMode;
+import org.apache.dubbo.aot.api.MemberDescriber;
+
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Executable;
 import java.util.Arrays;

File: dubbo-native/src/main/java/org/apache/dubbo/aot/generate/JarScanner.java
Patch:
@@ -93,7 +93,6 @@ private void scanFile(String resource) {
         File[] listFiles = directory.listFiles();
         if (listFiles != null) {
             for (File file : listFiles) {
-                System.out.println("scanFile: " + file.getPath());
                 if (file.isDirectory()) {
                     scanFile(file.getPath());
                 } else {

File: dubbo-native/src/main/java/org/apache/dubbo/aot/generate/ResourceConfigMetadataRepository.java
Patch:
@@ -17,6 +17,9 @@
 package org.apache.dubbo.aot.generate;
 
 
+import org.apache.dubbo.aot.api.ResourceBundleDescriber;
+import org.apache.dubbo.aot.api.ResourcePatternDescriber;
+
 import java.util.ArrayList;
 import java.util.LinkedHashSet;
 import java.util.List;

File: dubbo-native/src/test/java/org/apache/dubbo/aot/generate/ResourcePatternDescriberTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.aot.generate;
 
+import org.apache.dubbo.aot.api.ResourcePatternDescriber;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryScopeModelInitializer.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.registry;
 
 import org.apache.dubbo.common.beans.factory.ScopeBeanFactory;
+import org.apache.dubbo.registry.client.metadata.MetadataServiceDelegation;
 import org.apache.dubbo.registry.support.RegistryManager;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
@@ -33,6 +34,7 @@ public void initializeFrameworkModel(FrameworkModel frameworkModel) {
     public void initializeApplicationModel(ApplicationModel applicationModel) {
         ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
         beanFactory.registerBean(RegistryManager.class);
+        beanFactory.registerBean(MetadataServiceDelegation.class);
     }
 
     @Override

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/test/java/org/apache/dubbo/spring/boot/autoconfigure/CompatibleDubboAutoConfigurationTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor;
 import org.apache.dubbo.config.spring.util.DubboBeanUtils;
-
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/test/java/org/apache/dubbo/spring/boot/autoconfigure/CompatibleDubboAutoConfigurationTestWithoutProperties.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor;
 import org.apache.dubbo.config.spring.util.DubboBeanUtils;
-
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: dubbo-test/dubbo-test-modules/src/test/java/org/apache/dubbo/dependency/FileTest.java
Patch:
@@ -54,6 +54,7 @@ class FileTest {
 
         ignoredArtifacts.add(Pattern.compile("dubbo-demo.*"));
         ignoredArtifacts.add(Pattern.compile("dubbo-test.*"));
+        ignoredArtifacts.add(Pattern.compile("dubbo-config-spring6.*"));
         ignoredArtifacts.add(Pattern.compile("dubbo-annotation-processor"));
 
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo"));
@@ -63,6 +64,7 @@ class FileTest {
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-distribution"));
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-metadata-processor"));
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-native.*"));
+        ignoredModulesInDubboAll.add(Pattern.compile("dubbo-config-spring6.*"));
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-spring-boot.*"));
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-annotation-processor.*"));
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-maven-plugin"));

File: dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryStatCompositeTest.java
Patch:
@@ -60,7 +60,7 @@ protected void init(ApplicationStatComposite applicationStatComposite, ServiceSt
     @Test
     void testInit() {
         Assertions.assertEquals(statComposite.getApplicationStatComposite().getApplicationNumStats().size(), RegistryMetricsConstants.APP_LEVEL_KEYS.size());
-        //(rt)5 * (register,subscribe,notify,register.service,subscribe.service)5
+        //(rt)5 * (applicationRegister,subscribe,notify,applicationRegister.service,subscribe.service)
         Assertions.assertEquals(5 * 5, statComposite.getRtStatComposite().getRtStats().size());
         statComposite.getApplicationStatComposite().getApplicationNumStats().values().forEach((v ->
             Assertions.assertEquals(v, new ConcurrentHashMap<>())));

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/ServiceRestMetadata.java
Patch:
@@ -110,7 +110,7 @@ public void setMeta(Set<RestMethodMetadata> meta) {
 
     public void addRestMethodMetadata(RestMethodMetadata restMethodMetadata) {
         PathMatcher pathMather = new PathMatcher(restMethodMetadata.getRequest().getPath(),
-            this.getVersion(), this.getGroup(), this.getPort());
+            this.getVersion(), this.getGroup(), this.getPort(),restMethodMetadata.getRequest().getMethod());
         addPathToServiceMap(pathMather, restMethodMetadata);
         addMethodToServiceMap(restMethodMetadata);
         getMeta().add(restMethodMetadata);

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/PathAndInvokerMapper.java
Patch:
@@ -65,10 +65,10 @@ public void addPathAndInvoker(Map<PathMatcher, RestMethodMetadata> metadataMap,
      * @param port
      * @return
      */
-    public InvokerAndRestMethodMetadataPair getRestMethodMetadata(String path, String version, String group, Integer port) {
+    public InvokerAndRestMethodMetadataPair getRestMethodMetadata(String path, String version, String group, Integer port,String method) {
 
 
-        PathMatcher pathMather = PathMatcher.getInvokeCreatePathMatcher(path, version, group, port);
+        PathMatcher pathMather = PathMatcher.getInvokeCreatePathMatcher(path, version, group, port,method);
 
         // first search from pathToServiceMapNoPathVariable
         if (pathToServiceMapNoPathVariable.containsKey(pathMather)) {

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestRPCInvocationUtil.java
Patch:
@@ -134,8 +134,9 @@ public static InvokerAndRestMethodMetadataPair getRestMethodMetadata(RequestFaca
         String path = request.getPath();
         String version = request.getHeader(RestHeaderEnum.VERSION.getHeader());
         String group = request.getHeader(RestHeaderEnum.GROUP.getHeader());
+        String method = request.getMethod();
 
-        return pathAndInvokerMapper.getRestMethodMetadata(path, version, group, null);
+        return pathAndInvokerMapper.getRestMethodMetadata(path, version, group, null, method);
     }
 
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/PathAndInvokerMapper.java
Patch:
@@ -75,7 +75,7 @@ public InvokerAndRestMethodMetadataPair getRestMethodMetadata(String path, Strin
             return pathToServiceMapNoPathVariable.get(pathMather);
         }
 
-        // second search from pathToServiceMapNoPathVariable
+        // second search from pathToServiceMapContainPathVariable
         if (pathToServiceMapContainPathVariable.containsKey(pathMather)) {
             return pathToServiceMapContainPathVariable.get(pathMather);
         }

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/rest/springmvc/SpringMvcServiceRestMetadataResolverTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.metadata.rest.RestService;
 import org.apache.dubbo.metadata.rest.ServiceRestMetadata;
 import org.apache.dubbo.metadata.rest.StandardRestService;
+import org.apache.dubbo.metadata.rest.api.SpringControllerService;
 import org.apache.dubbo.metadata.rest.api.SpringRestService;
 import org.apache.dubbo.metadata.rest.api.SpringRestServiceImpl;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -86,6 +87,7 @@ void testResolve() {
     void testResolves() {
         testResolve(SpringRestService.class);
         testResolve(SpringRestServiceImpl.class);
+        testResolve(SpringControllerService.class);
     }
 
     void testResolve(Class service) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/QosConstants.java
Patch:
@@ -34,6 +34,8 @@ public interface QosConstants {
 
     String ANONYMOUS_ACCESS_PERMISSION_LEVEL = "qos.anonymous.access.permission.level";
 
+    String ANONYMOUS_ACCESS_ALLOW_COMMANDS = "qos.anonymous.access.allow.commands";
+
     String QOS_ENABLE_COMPATIBLE = "qos-enable";
 
     String QOS_HOST_COMPATIBLE = "qos-host";

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/protocol/QosProtocolWrapper.java
Patch:
@@ -40,6 +40,7 @@
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.QOS_FAILED_START_SERVER;
 import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP;
 import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP_WHITELIST;
+import static org.apache.dubbo.common.constants.QosConstants.ANONYMOUS_ACCESS_ALLOW_COMMANDS;
 import static org.apache.dubbo.common.constants.QosConstants.ANONYMOUS_ACCESS_PERMISSION_LEVEL;
 import static org.apache.dubbo.common.constants.QosConstants.QOS_ENABLE;
 import static org.apache.dubbo.common.constants.QosConstants.QOS_HOST;
@@ -119,6 +120,7 @@ private void startQosServer(URL url) {
             boolean acceptForeignIp = Boolean.parseBoolean(url.getParameter(ACCEPT_FOREIGN_IP, "false"));
             String acceptForeignIpWhitelist = url.getParameter(ACCEPT_FOREIGN_IP_WHITELIST, StringUtils.EMPTY_STRING);
             String anonymousAccessPermissionLevel = url.getParameter(ANONYMOUS_ACCESS_PERMISSION_LEVEL, PermissionLevel.PUBLIC.name());
+            String anonymousAllowCommands = url.getParameter(ANONYMOUS_ACCESS_ALLOW_COMMANDS, StringUtils.EMPTY_STRING);
             Server server = frameworkModel.getBeanFactory().getBean(Server.class);
 
             if (server.isStarted()) {
@@ -130,6 +132,7 @@ private void startQosServer(URL url) {
             server.setAcceptForeignIp(acceptForeignIp);
             server.setAcceptForeignIpWhitelist(acceptForeignIpWhitelist);
             server.setAnonymousAccessPermissionLevel(anonymousAccessPermissionLevel);
+            server.setAnonymousAllowCommands(anonymousAllowCommands);
             server.start();
 
         } catch (Throwable throwable) {

File: dubbo-spring-boot/dubbo-spring-boot-observability-starter/dubbo-spring-boot-observability-autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/ObservabilityUtils.java
Patch:
@@ -36,4 +36,6 @@ public class ObservabilityUtils {
 
     public static final String DUBBO_TRACING_BAGGAGE_ENABLED = DUBBO_TRACING_BAGGAGE + PROPERTY_NAME_SEPARATOR + "enabled";
 
+    public static final String DUBBO_TRACING_ZIPKIN_CONFIG_PREFIX = DUBBO_TRACING_PREFIX + PROPERTY_NAME_SEPARATOR + "tracing-exporter.zipkin-config";
+
 }

File: dubbo-spring-boot/dubbo-spring-boot-observability-starter/dubbo-spring-boot-observability-autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/ObservabilityUtils.java
Patch:
@@ -26,11 +26,11 @@
  */
 public class ObservabilityUtils {
 
-    public static final String DUBBO_TRACING_PREFIX = DUBBO_PREFIX + PROPERTY_NAME_SEPARATOR + "tracing" + PROPERTY_NAME_SEPARATOR;
+    public static final String DUBBO_TRACING_PREFIX = DUBBO_PREFIX + PROPERTY_NAME_SEPARATOR + "tracing";
 
-    public static final String DUBBO_TRACING_PROPAGATION = DUBBO_TRACING_PREFIX + "propagation";
+    public static final String DUBBO_TRACING_PROPAGATION = DUBBO_TRACING_PREFIX + PROPERTY_NAME_SEPARATOR + "propagation";
 
-    public static final String DUBBO_TRACING_BAGGAGE = DUBBO_TRACING_PREFIX + "baggage";
+    public static final String DUBBO_TRACING_BAGGAGE = DUBBO_TRACING_PREFIX + PROPERTY_NAME_SEPARATOR + "baggage";
 
     public static final String DUBBO_TRACING_BAGGAGE_CORRELATION = DUBBO_TRACING_BAGGAGE + PROPERTY_NAME_SEPARATOR + "correlation";
 

File: dubbo-spring-boot/dubbo-spring-boot-observability-starter/dubbo-spring-boot-observability-autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/otel/OpenTelemetryAutoConfiguration.java
Patch:
@@ -19,9 +19,10 @@
 
 import org.apache.dubbo.common.Version;
 import org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties;
-import org.apache.dubbo.spring.boot.observability.annotation.ConditionalOnDubboTracingEnable;
+import org.apache.dubbo.spring.boot.observability.autoconfigure.annotation.ConditionalOnDubboTracingEnable ;
 import org.apache.dubbo.spring.boot.observability.autoconfigure.DubboMicrometerTracingAutoConfiguration;
 import org.apache.dubbo.spring.boot.observability.autoconfigure.ObservabilityUtils;
+
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/MetricsConstants.java
Patch:
@@ -24,4 +24,6 @@ public interface MetricsConstants {
     String ATTACHMENT_KEY_LAST_NUM_MAP = "lastNumMap";
     String ATTACHMENT_DIRECTORY_MAP = "dirNum";
 
+    int SELF_INCREMENT_SIZE = 1;
+
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/MetricsCollector.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.metrics.collector;
 
 import org.apache.dubbo.common.extension.SPI;
-import org.apache.dubbo.metrics.event.MetricsEvent;
+import org.apache.dubbo.metrics.event.TimeCounterEvent;
 import org.apache.dubbo.metrics.listener.MetricsLifeListener;
 import org.apache.dubbo.metrics.model.sample.MetricSample;
 
@@ -29,7 +29,7 @@
  * An interface of collector to collect framework internal metrics.
  */
 @SPI
-public interface MetricsCollector<E extends MetricsEvent> extends MetricsLifeListener<E> {
+public interface MetricsCollector<E extends TimeCounterEvent> extends MetricsLifeListener<E> {
 
     default boolean isCollectEnabled() {
         return false;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/MetricsEventMulticaster.java
Patch:
@@ -25,7 +25,7 @@ public interface MetricsEventMulticaster {
 
     void publishEvent(MetricsEvent event);
 
-    void publishFinishEvent(MetricsEvent event);
+    void publishFinishEvent(TimeCounterEvent event);
 
-    void publishErrorEvent(MetricsEvent event);
+    void publishErrorEvent(TimeCounterEvent event);
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/SimpleMetricsEventMulticaster.java
Patch:
@@ -60,13 +60,13 @@ private boolean validateIfApplicationConfigExist(MetricsEvent event) {
 
     @Override
     @SuppressWarnings({"unchecked"})
-    public void publishFinishEvent(MetricsEvent event) {
+    public void publishFinishEvent(TimeCounterEvent event) {
         publishTimeEvent(event, metricsLifeListener -> metricsLifeListener.onEventFinish(event));
     }
 
     @Override
     @SuppressWarnings({"unchecked"})
-    public void publishErrorEvent(MetricsEvent event) {
+    public void publishErrorEvent(TimeCounterEvent event) {
         publishTimeEvent(event, metricsLifeListener -> metricsLifeListener.onEventError(event));
     }
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/listener/MetricsLifeListener.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.dubbo.metrics.listener;
 
-import org.apache.dubbo.metrics.event.MetricsEvent;
+import org.apache.dubbo.metrics.event.TimeCounterEvent;
 
 /**
  * Metrics Listener.
  */
-public interface MetricsLifeListener<E extends MetricsEvent> extends MetricsListener<E> {
+public interface MetricsLifeListener<E extends TimeCounterEvent> extends MetricsListener<E> {
 
     default void onEventFinish(E event) {
     }

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/filter/MethodMetricsInterceptor.java
Patch:
@@ -64,11 +64,11 @@ public void handleMethodException(Invocation invocation, Throwable throwable) {
             return;
         }
         String side = getSide(invocation);
+
+        MetricsEvent.Type eventType = MetricsEvent.Type.UNKNOWN_FAILED;
         if (throwable instanceof RpcException) {
             RpcException e = (RpcException) throwable;
 
-            MetricsEvent.Type eventType = MetricsEvent.Type.UNKNOWN_FAILED;
-
             if (e.isTimeout()) {
                 eventType = MetricsEvent.Type.REQUEST_TIMEOUT;
             }
@@ -84,8 +84,8 @@ public void handleMethodException(Invocation invocation, Throwable throwable) {
             if (e.isNetwork()) {
                 eventType = MetricsEvent.Type.NETWORK_EXCEPTION;
             }
-            sampler.incOnEvent(invocation, eventType.getNameByType(side));
         }
+        sampler.incOnEvent(invocation, eventType.getNameByType(side));
         onCompleted(invocation);
         sampler.incOnEvent(invocation, MetricsEvent.Type.TOTAL_FAILED.getNameByType(side));
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/HeaderFilter.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.dubbo.rpc;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface HeaderFilter {
 
     RpcInvocation invoke(Invoker<?> invoker, RpcInvocation invocation) throws RpcException;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/SerializeSecurityConfigurator.java
Patch:
@@ -56,7 +56,7 @@ public class SerializeSecurityConfigurator implements ScopeClassLoaderListener<M
 
     private volatile boolean autoTrustSerializeClass = true;
 
-    private volatile int trustSerializeClassLevel = 3;
+    private volatile int trustSerializeClassLevel = Integer.MAX_VALUE;
 
     public SerializeSecurityConfigurator(ModuleModel moduleModel) {
         this.moduleModel = moduleModel;

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -626,4 +626,6 @@ public interface CommonConstants {
     String PAYLOAD = "payload";
 
     String DUBBO_METRICS_CONFIGCENTER_ENABLE = "dubbo.metrics.configcenter.enable";
+
+    Integer TRI_EXCEPTION_CODE_NOT_EXISTS = 0;
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHeaderEnum.java
Patch:
@@ -46,6 +46,8 @@ public enum TripleHeaderEnum {
 
     TRI_HEADER_CONVERT("tri-header-convert"),
 
+    TRI_EXCEPTION_CODE("tri-exception-code"),
+
     ;
 
     static final Map<String, TripleHeaderEnum> enumMap = new HashMap<>();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/ClientCall.java
Patch:
@@ -53,7 +53,7 @@ interface Listener {
          * @param status   response status
          * @param trailers response trailers
          */
-        void onClose(TriRpcStatus status, Map<String, Object> trailers);
+        void onClose(TriRpcStatus status, Map<String, Object> trailers, boolean isReturnTriException);
     }
 
     /**

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/ObserverToClientCallListenerAdapter.java
Patch:
@@ -46,7 +46,7 @@ public void onMessage(Object message) {
     }
 
     @Override
-    public void onClose(TriRpcStatus status, Map<String, Object> trailers) {
+    public void onClose(TriRpcStatus status, Map<String, Object> trailers, boolean isReturnTriException) {
         if (status.isOk()) {
             delegate.onCompleted();
         } else {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/UnaryClientCallListener.java
Patch:
@@ -38,11 +38,11 @@ public void onMessage(Object message) {
     }
 
     @Override
-    public void onClose(TriRpcStatus status, Map<String, Object> trailers) {
+    public void onClose(TriRpcStatus status, Map<String, Object> trailers, boolean isReturnTriException) {
         AppResponse result = new AppResponse();
         result.setObjectAttachments(trailers);
         if (status.isOk()) {
-            if (appResponse instanceof Exception) {
+            if (isReturnTriException) {
                 result.setException((Exception) appResponse);
             } else {
                 result.setValue(appResponse);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/ClientStream.java
Patch:
@@ -52,7 +52,7 @@ default void onComplete(TriRpcStatus status, Map<String, Object> attachments) {
          * @param reserved    triple protocol reserved data
          */
         default void onComplete(TriRpcStatus status, Map<String, Object> attachments,
-            Map<String, String> reserved) {
+            Map<String, String> reserved, boolean isReturnTriException) {
             onComplete(status, attachments);
         }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/ServerStream.java
Patch:
@@ -51,7 +51,7 @@ interface Listener extends Stream.Listener {
      * @param attachments response attachments
      * @return a future that indicates the completion of send trailers
      */
-    Future<?> complete(TriRpcStatus status, Map<String, Object> attachments);
+    Future<?> complete(TriRpcStatus status, Map<String, Object> attachments, boolean isNeedReturnException, int exceptionCode);
 
     /**
      * Send message to client

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/Stream.java
Patch:
@@ -43,7 +43,7 @@ interface Listener {
          *
          * @param message message received from remote peer
          */
-        void onMessage(byte[] message);
+        void onMessage(byte[] message, boolean isReturnTriException);
 
         /**
          * Callback when receive cancel signal.

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/call/ReflectionServerCallTest.java
Patch:
@@ -80,7 +80,7 @@ void doStartCall() throws NoSuchMethodException {
             Collections.emptyList(),
             ImmediateEventExecutor.INSTANCE);
         call2.onHeader(Collections.emptyMap());
-        call2.onMessage(new byte[0]);
+        call2.onMessage(new byte[0], false);
         call2.onComplete();
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/call/StubServerCallTest.java
Patch:
@@ -66,7 +66,7 @@ void doStartCall() throws IOException, ClassNotFoundException {
             service, method,
             ImmediateEventExecutor.INSTANCE);
         call.onHeader(Collections.emptyMap());
-        call.onMessage(new byte[0]);
+        call.onMessage(new byte[0], false);
         call.onComplete();
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/stream/MockClientStreamListener.java
Patch:
@@ -39,7 +39,7 @@ public void onComplete(TriRpcStatus status,
     }
 
     @Override
-    public void onMessage(byte[] message) {
+    public void onMessage(byte[] message, boolean isNeedReturnException) {
         this.message = message;
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/support/IGreeter2.java
Patch:
@@ -23,4 +23,6 @@ public interface IGreeter2 {
      * Use request to respond
      */
     String echo(String request) throws IGreeterException;
+
+    Exception echoException(String request);
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/CloseTimerTask.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.timer.HashedWheelTimer;
 import org.apache.dubbo.remoting.Channel;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_FAILED_RESPONSE;
@@ -33,8 +34,8 @@ public class CloseTimerTask extends AbstractTimerTask {
 
     private final int idleTimeout;
 
-    public CloseTimerTask(ChannelProvider channelProvider, Long heartbeatTimeoutTick, int idleTimeout) {
-        super(channelProvider, heartbeatTimeoutTick);
+    public CloseTimerTask(ChannelProvider channelProvider, HashedWheelTimer hashedWheelTimer, Long heartbeatTimeoutTick, int idleTimeout) {
+        super(channelProvider, hashedWheelTimer, heartbeatTimeoutTick);
         this.idleTimeout = idleTimeout;
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeartbeatTimerTask.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.Version;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.timer.HashedWheelTimer;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.exchange.Request;
 
@@ -35,8 +36,8 @@ public class HeartbeatTimerTask extends AbstractTimerTask {
 
     private final int heartbeat;
 
-    HeartbeatTimerTask(ChannelProvider channelProvider, Long heartbeatTick, int heartbeat) {
-        super(channelProvider, heartbeatTick);
+    HeartbeatTimerTask(ChannelProvider channelProvider, HashedWheelTimer hashedWheelTimer, Long heartbeatTick, int heartbeat) {
+        super(channelProvider, hashedWheelTimer, heartbeatTick);
         this.heartbeat = heartbeat;
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java
Patch:
@@ -414,7 +414,7 @@ protected void encodeData(ObjectOutput out, Object data) throws IOException {
     }
 
     private void encodeEventData(ObjectOutput out, Object data) throws IOException {
-        out.writeEvent(data);
+        out.writeEvent((String) data);
     }
 
     @Deprecated

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/ObjectInput.java
Patch:
@@ -78,8 +78,8 @@ default Throwable readThrowable() throws IOException, ClassNotFoundException {
         return (Throwable) obj;
     }
 
-    default Object readEvent() throws IOException, ClassNotFoundException {
-        return readObject();
+    default String readEvent() throws IOException, ClassNotFoundException {
+        return readUTF();
     }
 
     default Map<String, Object> readAttachments() throws IOException, ClassNotFoundException {

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/ObjectOutput.java
Patch:
@@ -45,11 +45,11 @@ public interface ObjectOutput extends DataOutput {
      * restricting the content of headers / attachments to Ascii strings and uses ISO_8859_1 to encode them.
      * https://tools.ietf.org/html/rfc7540#section-8.1.2
      */
-    default void writeThrowable(Object obj) throws IOException {
+    default void writeThrowable(Throwable obj) throws IOException {
         writeObject(obj);
     }
 
-    default void writeEvent(Object data) throws IOException {
+    default void writeEvent(String data) throws IOException {
         writeObject(data);
     }
 

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/Hessian2ScopeModelInitializer.java
Patch:
@@ -27,6 +27,8 @@ public class Hessian2ScopeModelInitializer implements ScopeModelInitializer {
     public void initializeFrameworkModel(FrameworkModel frameworkModel) {
         ScopeBeanFactory beanFactory = frameworkModel.getBeanFactory();
         beanFactory.registerBean(Hessian2FactoryManager.class);
+
+        frameworkModel.addClassLoaderListener(new Hessian2ClassLoaderListener());
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/Hessian2SerializerFactory.java
Patch:
@@ -52,7 +52,7 @@ protected Serializer getDefaultSerializer(Class cl) {
         }
 
         if (!Serializable.class.isAssignableFrom(cl)
-            && (!isAllowNonSerializable() || !defaultSerializeClassChecker.isCheckSerializable())) {
+            && (!isAllowNonSerializable() || defaultSerializeClassChecker.isCheckSerializable())) {
             throw new IllegalStateException("Serialized class " + cl.getName() + " must implement java.io.Serializable");
         }
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/GetAddress.java
Patch:
@@ -70,7 +70,7 @@ public String execute(CommandContext commandContext, String[] args) {
         }
 
         if (commandContext.isHttp()) {
-            return JsonUtils.getJson().toJson(jsonOutput);
+            return JsonUtils.toJson(jsonOutput);
         } else {
             return plainOutput.toString();
         }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MethodConfigTest.java
Patch:
@@ -476,4 +476,4 @@ void testMetaData() {
         Map<String, String> metaData = methodConfig.getMetaData();
         Assertions.assertEquals(0, metaData.size(), "Expect empty metadata but found: "+metaData);
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/CommandHelperTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.qos.command.impl.EnableDetailProfiler;
 import org.apache.dubbo.qos.command.impl.EnableRouterSnapshot;
 import org.apache.dubbo.qos.command.impl.EnableSimpleProfiler;
+import org.apache.dubbo.qos.command.impl.GetAddress;
 import org.apache.dubbo.qos.command.impl.GetConfig;
 import org.apache.dubbo.qos.command.impl.GetEnabledRouterSnapshot;
 import org.apache.dubbo.qos.command.impl.GetRecentRouterSnapshot;
@@ -121,6 +122,7 @@ void testGetAllCommandClass() {
         expectedClasses.add(SerializeCheckStatus.class);
         expectedClasses.add(SerializeWarnedClasses.class);
         expectedClasses.add(GetConfig.class);
+        expectedClasses.add(GetAddress.class);
         assertThat(classes, containsInAnyOrder(expectedClasses.toArray(new Class<?>[0])));
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/HeaderFilter.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.dubbo.rpc;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface HeaderFilter {
 
     RpcInvocation invoke(Invoker<?> invoker, RpcInvocation invocation) throws RpcException;

File: dubbo-spring-boot/dubbo-spring-boot-observability-starter/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/DubboObservationAutoConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 
-import io.micrometer.tracing.Tracer;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.qos.protocol.QosProtocolWrapper;
@@ -83,9 +82,9 @@ public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
 
     @Override
     public void afterSingletonsInstantiated() {
-
         try {
-            Tracer bean = beanFactory.getBean(Tracer.class);
+            applicationModel.getBeanFactory().registerBean(beanFactory.getBean(io.micrometer.observation.ObservationRegistry.class));
+            io.micrometer.tracing.Tracer bean = beanFactory.getBean(io.micrometer.tracing.Tracer.class);
             applicationModel.getBeanFactory().registerBean(bean);
         } catch (NoSuchBeanDefinitionException e) {
             logger.info("Please use a version of micrometer higher than 1.10.0 ：{}" + e.getMessage());

File: dubbo-spring-boot/dubbo-spring-boot-observability-starter/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/otel/OpenTelemetryAutoConfiguration.java
Patch:
@@ -42,7 +42,7 @@
 @AutoConfiguration(before = DubboMicrometerTracingAutoConfiguration.class, afterName = "org.springframework.boot.actuate.autoconfigure.tracing.OpenTelemetryAutoConfiguration")
 @ConditionalOnDubboTracingEnable
 @ConditionalOnClass(name = {"io.micrometer.tracing.otel.bridge.OtelTracer",
-    "io.opentelemetry.sdk.trace.SdkTracerProvider", "e io.opentelemetry.api.OpenTelemetry"
+    "io.opentelemetry.sdk.trace.SdkTracerProvider", "io.opentelemetry.api.OpenTelemetry"
     , "io.micrometer.tracing.SpanCustomizer"})
 @EnableConfigurationProperties(DubboConfigurationProperties.class)
 public class OpenTelemetryAutoConfiguration {

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/JaxrsRestProtocolTest.java
Patch:
@@ -330,7 +330,7 @@ void testExceptionMapper() {
 
         URL url = this.registerProvider(exportUrl, server, DemoService.class);
 
-        URL exceptionUrl = url.addParameter(EXCEPTION_MAPPER_KEY, TestExceptionMapper.class.getName());
+        URL exceptionUrl = url.addParameter(EXTENSION_KEY, TestExceptionMapper.class.getName());
 
         protocol.export(proxy.getInvoker(server, DemoService.class, exceptionUrl));
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/param/parse/consumer/HeaderConsumerParamParser.java
Patch:
@@ -47,7 +47,7 @@ public void parse(ConsumerParseContext parseContext, ArgInfo argInfo) {
             }
         } else {
             // others
-            requestTemplate.addHeader(argInfo.getParamName(), headerValue);
+            requestTemplate.addHeader(argInfo.getAnnotationNameAttribute(), headerValue);
 
         }
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/param/parse/consumer/ParameterConsumerParamParser.java
Patch:
@@ -45,7 +45,7 @@ public void parse(ConsumerParseContext parseContext, ArgInfo argInfo) {
                 requestTemplate.addParam(String.valueOf(name), paramValues.get(name));
             }
         } else {
-            requestTemplate.addParam(argInfo.getParamName(), paramValue);
+            requestTemplate.addParam(argInfo.getAnnotationNameAttribute(), paramValue);
 
 
         }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/param/parse/provider/BodyProviderParamParser.java
Patch:
@@ -52,6 +52,6 @@ protected void doParse(ProviderParseContext parseContext, ArgInfo argInfo) {
 
     @Override
     protected ParamType getParamType() {
-        return ParamType.BODY;
+        return ParamType.PROVIDER_BODY;
     }
 }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/JsonCodec.java
Patch:
@@ -39,6 +39,7 @@ public class JsonCodec implements HttpMessageCodec<byte[], OutputStream> {
     static {
 
         unSupportClasses.add(byte[].class);
+        unSupportClasses.add(String.class);
 
     }
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/message/codec/StringCodec.java
Patch:
@@ -33,6 +33,9 @@ public class StringCodec implements HttpMessageCodec<byte[], OutputStream> {
 
     @Override
     public Object decode(byte[] body, Class<?> targetType) throws Exception {
+        if (body == null || body.length == 0) {
+            return null;
+        }
         return new String(body);
     }
 

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/DemoService.java
Patch:
@@ -51,8 +51,6 @@ public interface DemoService {
 
     @POST
     @Path("number")
-    @Produces({MediaType.TEXT_PLAIN})
-    @Consumes({MediaType.APPLICATION_FORM_URLENCODED})
     Long testFormBody(@FormParam("number") Long number);
 
     boolean isCalled();

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MetricsKey.java
Patch:
@@ -74,11 +74,10 @@ public enum MetricsKey {
     SUBSCRIBE_METRIC_NUM_FAILED("dubbo.registry.subscribe.num.failed.total", "Failed Subscribe Num"),
 
     // directory metrics key
-    DIRECTORY_METRIC_NUM_CURRENT("dubbo.registry.directory.num.current", "Current Directory Urls"),
+    DIRECTORY_METRIC_NUM_ALL("dubbo.registry.directory.num.all", "All Directory Urls"),
     DIRECTORY_METRIC_NUM_VALID("dubbo.registry.directory.num.valid.total", "Valid Directory Urls"),
-    DIRECTORY_METRIC_NUM_UN_VALID("dubbo.registry.directory.num.un_valid.total", "UnValid Directory Urls"),
+    DIRECTORY_METRIC_NUM_TO_RECONNECT("dubbo.registry.directory.num.to_reconnect.total", "ToReconnect Directory Urls"),
     DIRECTORY_METRIC_NUM_DISABLE("dubbo.registry.directory.num.disable.total", "Disable Directory Urls"),
-    DIRECTORY_METRIC_NUM_RECOVER_DISABLE("dubbo.registry.directory.num.recover.disable.total", "Recover Disable Directory Urls"),
 
     NOTIFY_METRIC_REQUESTS("dubbo.registry.notify.requests.total", "Total Notify Requests"),
     NOTIFY_METRIC_NUM_LAST("dubbo.registry.notify.num.last", "Last Notify Nums"),

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/filter/MetricsClusterFilterTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.metrics.collector.DefaultMetricsCollector;
 import org.apache.dubbo.metrics.filter.MetricsFilter;
 import org.apache.dubbo.metrics.model.MetricsKey;
+import org.apache.dubbo.metrics.model.sample.CounterMetricSample;
 import org.apache.dubbo.metrics.model.sample.GaugeMetricSample;
 import org.apache.dubbo.metrics.model.sample.MetricSample;
 import org.apache.dubbo.rpc.Invocation;
@@ -123,7 +124,7 @@ private void testClusterFilterError(int errorCode,String name){
 
         MetricSample sample = metricsMap.get(name);
 
-        Assertions.assertSame(((GaugeMetricSample) sample).applyAsLong(), count);
+        Assertions.assertSame(((CounterMetricSample) sample).getValue().longValue(), count);
         teardown();
     }
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestHeaderEnum.java
Patch:
@@ -27,6 +27,7 @@ public enum RestHeaderEnum {
     KEEP_ALIVE_HEADER(RestConstant.KEEP_ALIVE_HEADER),
     CONNECTION(RestConstant.CONNECTION),
     REST_HEADER_PREFIX(RestConstant.REST_HEADER_PREFIX),
+    TOKEN_KEY(RestConstant.REST_HEADER_PREFIX + RestConstant.TOKEN_KEY),
 
 
     ;

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/consumer/inercept/AddMustAttachmentIntercept.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dubbo.rpc.protocol.rest.constans.RestConstant;
 
 /**
- *  add some must attachment
+ * add some must attachment
  */
 @Activate(value = RestConstant.ADD_MUST_ATTTACHMENT,order = 1)
 public class AddMustAttachmentIntercept implements HttpConnectionPreBuildIntercept {
@@ -41,6 +41,7 @@ public void intercept(HttpConnectionCreateContext connectionCreateContext) {
         requestTemplate.addHeader(RestHeaderEnum.GROUP.getHeader(), serviceRestMetadata.getGroup());
         requestTemplate.addHeader(RestHeaderEnum.VERSION.getHeader(), serviceRestMetadata.getVersion());
         requestTemplate.addHeader(RestHeaderEnum.PATH.getHeader(), serviceRestMetadata.getServiceInterface());
+        requestTemplate.addHeader(RestHeaderEnum.TOKEN_KEY.getHeader(), connectionCreateContext.getUrl().getParameter(RestConstant.TOKEN_KEY));
 
 
     }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/annotation/consumer/inercept/RequestHeaderIntercept.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.protocol.rest.annotation.consumer.inercept;
 
 
-import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.metadata.rest.RestMethodMetadata;
 import org.apache.dubbo.remoting.http.RequestTemplate;
@@ -53,9 +52,10 @@ public void intercept(HttpConnectionCreateContext connectionCreateContext) {
             requestTemplate.addHeader(RestHeaderEnum.ACCEPT.getHeader(), produces);
         }
 
-        URL url = connectionCreateContext.getUrl();
+//        URL url = connectionCreateContext.getUrl();
 
-        requestTemplate.addKeepAliveHeader(url.getParameter(RestConstant.KEEP_ALIVE_TIMEOUT_PARAM,RestConstant.KEEP_ALIVE_TIMEOUT));
+
+//        requestTemplate.addKeepAliveHeader(url.getParameter(RestConstant.KEEP_ALIVE_TIMEOUT_PARAM,RestConstant.KEEP_ALIVE_TIMEOUT));
 
 
     }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/constans/RestConstant.java
Patch:
@@ -17,11 +17,13 @@
 package org.apache.dubbo.rpc.protocol.rest.constans;
 
 import org.apache.dubbo.common.constants.CommonConstants;
+import org.apache.dubbo.rpc.Constants;
 
 public interface RestConstant {
     String VERSION = CommonConstants.VERSION_KEY;
     String GROUP = CommonConstants.GROUP_KEY;
     String PATH = CommonConstants.PATH_KEY;
+    String TOKEN_KEY = Constants.TOKEN_KEY;
     String LOCAL_ADDR = "LOCAL_ADDR";
     String REMOTE_ADDR = "REMOTE_ADDR";
     String LOCAL_PORT = "LOCAL_PORT";

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/MetricsConstants.java
Patch:
@@ -44,7 +44,7 @@ public interface MetricsConstants {
     
     String TAG_CHANGE_TYPE = "change.type";
 
-    String ENABLE_JVM_METRICS_KEY = "enable.jvm.metrics";
+    String ENABLE_JVM_METRICS_KEY = "enable.jvm";
 
     String AGGREGATION_COLLECTOR_KEY = "aggregation";
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -387,7 +387,7 @@ private void initMetricsReporter() {
         }
         collector.setCollectEnabled(true);
         collector.collectApplication(applicationModel);
-        collector.setThreadpoolCollectEnabled(Optional.ofNullable(metricsConfig.getEnableThreadpoolMetrics()).orElse(true));
+        collector.setThreadpoolCollectEnabled(Optional.ofNullable(metricsConfig.getEnableThreadpool()).orElse(true));
         MetricsReporterFactory metricsReporterFactory = getExtensionLoader(MetricsReporterFactory.class).getAdaptiveExtension();
         MetricsReporter metricsReporter = metricsReporterFactory.createMetricsReporter(metricsConfig.toUrl());
         metricsReporter.init();

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/boot/configprops/SpringBootConfigPropsTest.java
Patch:
@@ -55,7 +55,7 @@
         "dubbo.protocol.name=dubbo",
         "dubbo.protocol.port=20880",
         "dubbo.metrics.protocol=prometheus",
-        "dubbo.metrics.enable-jvm-metrics=true",
+        "dubbo.metrics.enable-jvm=true",
         "dubbo.metrics.prometheus.exporter.enabled=true",
         "dubbo.metrics.prometheus.exporter.enable-http-service-discovery=true",
         "dubbo.metrics.prometheus.exporter.http-service-discovery-url=localhost:8080",

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandlerTest.java
Patch:
@@ -256,7 +256,7 @@ void testMetricsAggregation() {
         MetricsConfig metricsBean = ctx.getBean(MetricsConfig.class);
         MetricsConfig metrics = configManager.getMetrics().get();
 
-        assertTrue(metrics.getEnableJvmMetrics());
+        assertTrue(metrics.getEnableJvm());
 
         assertEquals(metrics.getAggregation().getEnabled(), true);
         assertEquals(metrics.getAggregation().getBucketNum(), 5);

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/collector/MetadataMetricsCollector.java
Patch:
@@ -63,7 +63,7 @@ public void setCollectEnabled(Boolean collectEnabled) {
     public boolean isCollectEnabled() {
         if (collectEnabled == null) {
             ConfigManager configManager = applicationModel.getApplicationConfigManager();
-            configManager.getMetrics().ifPresent(metricsConfig -> setCollectEnabled(metricsConfig.getEnableMetadataMetrics()));
+            configManager.getMetrics().ifPresent(metricsConfig -> setCollectEnabled(metricsConfig.getEnableMetadata()));
         }
         return Optional.ofNullable(collectEnabled).orElse(true);
     }

File: dubbo-metrics/dubbo-metrics-prometheus/src/test/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsReporterTest.java
Patch:
@@ -68,7 +68,7 @@ public void teardown() {
 
     @Test
     void testJvmMetrics() {
-        metricsConfig.setEnableJvmMetrics(true);
+        metricsConfig.setEnableJvm(true);
         String name = "metrics-test";
         ApplicationModel.defaultModel().getApplicationConfigManager().setApplication(new ApplicationConfig(name));
 
@@ -94,7 +94,7 @@ void testExporter() {
         exporter.setEnabled(true);
         prometheusConfig.setExporter(exporter);
         metricsConfig.setPrometheus(prometheusConfig);
-        metricsConfig.setEnableJvmMetrics(true);
+        metricsConfig.setEnableJvm(true);
 
         ApplicationModel.defaultModel().getApplicationConfigManager().setApplication(new ApplicationConfig("metrics-test"));
         PrometheusMetricsReporter reporter = new PrometheusMetricsReporter(metricsConfig.toUrl(), applicationModel);

File: dubbo-metrics/dubbo-metrics-prometheus/src/test/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsThreadPoolTest.java
Patch:
@@ -91,9 +91,9 @@ void testExporterThreadpoolName() {
 
         prometheusConfig.setExporter(exporter);
         metricsConfig.setPrometheus(prometheusConfig);
-        metricsConfig.setEnableJvmMetrics(false);
+        metricsConfig.setEnableJvm(false);
         metricsCollector.setCollectEnabled(true);
-        metricsConfig.setEnableThreadpoolMetrics(true);
+        metricsConfig.setEnableThreadpool(true);
         metricsCollector.collectApplication(applicationModel);
         PrometheusMetricsReporter reporter = new PrometheusMetricsReporter(metricsConfig.toUrl(), applicationModel);
         reporter.init();
@@ -103,7 +103,7 @@ void testExporterThreadpoolName() {
         } catch (InterruptedException e) {
             throw new RuntimeException(e);
         }
-        if(metricsConfig.getEnableThreadpoolMetrics()) {
+        if(metricsConfig.getEnableThreadpool()) {
             metricsCollector.registryDefaultSample();
         }
         try (CloseableHttpClient client = HttpClients.createDefault()) {

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/collector/RegistryMetricsCollector.java
Patch:
@@ -64,7 +64,7 @@ public void setCollectEnabled(Boolean collectEnabled) {
     public boolean isCollectEnabled() {
         if (collectEnabled == null) {
             ConfigManager configManager = applicationModel.getApplicationConfigManager();
-            configManager.getMetrics().ifPresent(metricsConfig -> setCollectEnabled(metricsConfig.getEnableRegistryMetrics()));
+            configManager.getMetrics().ifPresent(metricsConfig -> setCollectEnabled(metricsConfig.getEnableRegistry()));
         }
         return Optional.ofNullable(collectEnabled).orElse(true);
     }

File: dubbo-demo/dubbo-demo-native/dubbo-demo-native-interface/src/main/java/org/apache/dubbo/graalvm/demo/DemoService.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apace.dubbo.graalvm.demo;
+package org.apache.dubbo.graalvm.demo;
 
 public interface DemoService {
 

File: dubbo-demo/dubbo-demo-native/dubbo-demo-native-provider/src/main/java/org/apache/dubbo/demo/graalvm/provider/DemoServiceImpl.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.rpc.RpcContext;
 
-import org.apace.dubbo.graalvm.demo.DemoService;
+import org.apache.dubbo.graalvm.demo.DemoService;
 
 
 public class DemoServiceImpl implements DemoService {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/listener/InjvmExporterListener.java
Patch:
@@ -122,6 +122,9 @@ public synchronized void addExporterChangeListener(ExporterChangeListener listen
      */
     public synchronized void removeExporterChangeListener(ExporterChangeListener listener, String listenerKey) {
         Set<ExporterChangeListener> listeners = exporterChangeListeners.get(listenerKey);
+        if (CollectionUtils.isEmpty(listeners)) {
+            return;
+        }
         listeners.remove(listener);
         if (CollectionUtils.isEmpty(listeners)) {
             exporterChangeListeners.remove(listenerKey);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -424,7 +424,7 @@ private void doExportUrls() {
 
         List<URL> registryURLs = ConfigValidationUtils.loadRegistries(this, true);
 
-        MetricsEventBus.post(new RegistryEvent.MetricsServiceRegisterEvent(module.getApplicationModel(), getUniqueServiceName(), protocols.size() * registryURLs.size()),
+        MetricsEventBus.post(RegistryEvent.toRsEvent(module.getApplicationModel(), getUniqueServiceName(), protocols.size() * registryURLs.size()),
             () -> {
                 for (ProtocolConfig protocolConfig : protocols) {
                     String pathKey = URL.buildKey(getContextPath(protocolConfig)

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -860,7 +860,7 @@ private DynamicConfiguration getDynamicConfiguration(URL connectionURL) {
     private void registerServiceInstance() {
         try {
             registered = true;
-            MetricsEventBus.post(new RegistryEvent.MetricsApplicationRegisterEvent(applicationModel),
+            MetricsEventBus.post(RegistryEvent.toRegisterEvent(applicationModel),
                 () -> {
                     ServiceInstanceMetadataUtils.registerMetadataAndInstance(applicationModel);
                     return null;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/MethodEvent.java
Patch:
@@ -28,6 +28,7 @@ public MethodEvent(ApplicationModel applicationModel, MethodMetric methodMetric,
         super(applicationModel);
         this.type = type;
         this.methodMetric = methodMetric;
+        setAvailable(true);
     }
 
     public MethodMetric getMethodMetric() {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/RTEvent.java
Patch:
@@ -30,6 +30,7 @@ public RTEvent(ApplicationModel applicationModel, Object metric, Long rt) {
         super(applicationModel);
         this.rt = rt;
         this.metric = metric;
+        setAvailable(true);
     }
 
     public Long getRt() {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/exception/MetricsNeverHappenException.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dubbo.metrics.exception;
 
-public class MetricsException extends RuntimeException {
+public class MetricsNeverHappenException extends RuntimeException {
 
-    public MetricsException(String message) {
+    public MetricsNeverHappenException(String message) {
         super(message);
     }
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/listener/MetricsListener.java
Patch:
@@ -25,7 +25,7 @@
 public interface MetricsListener<E extends MetricsEvent> {
 
     default boolean isSupport(MetricsEvent event) {
-        return true;
+        return event.isAvailable();
     }
 
     /**

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MetricsSupport.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.metrics.model;
 
 import org.apache.dubbo.common.Version;
-import org.apache.dubbo.metrics.exception.MetricsException;
+import org.apache.dubbo.metrics.exception.MetricsNeverHappenException;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -49,7 +49,7 @@ public static Map<String, String> applicationTags(String applicationName) {
     public static Map<String, String> serviceTags(String appAndServiceName) {
         String[] keys = appAndServiceName.split("_");
         if (keys.length != 2) {
-            throw new MetricsException("Error service name: " + appAndServiceName);
+            throw new MetricsNeverHappenException("Error service name: " + appAndServiceName);
         }
         Map<String, String> tags = applicationTags(keys[0]);
         tags.put(TAG_INTERFACE_KEY, keys[1]);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -328,7 +328,8 @@ protected void subscribeURLs(URL url, NotifyListener listener, Set<String> servi
                 listener.addServiceListener(serviceInstancesChangedListener);
                 serviceInstancesChangedListener.addListenerAndNotify(url, listener);
                 ServiceInstancesChangedListener finalServiceInstancesChangedListener = serviceInstancesChangedListener;
-                MetricsEventBus.post(new RegistryEvent.MetricsServiceSubscribeEvent(url.getApplicationModel(), serviceKey),
+
+                MetricsEventBus.post(RegistryEvent.toSsEvent(url.getApplicationModel(), serviceKey),
                     () -> {
                         serviceDiscovery.addServiceInstancesChangedListener(finalServiceInstancesChangedListener);
                         return null;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListener.java
Patch:
@@ -65,6 +65,8 @@
 import static org.apache.dubbo.metadata.RevisionResolver.EMPTY_REVISION;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getExportedServicesRevision;
 
+;
+
 /**
  * TODO, refactor to move revision-metadata mapping to ServiceDiscovery. Instances should have already been mapped with metadata when reached here.
  * <p>
@@ -403,7 +405,7 @@ protected List<URL> getAddresses(ProtocolServiceKey protocolServiceKey, URL cons
      */
     protected void notifyAddressChanged() {
 
-        MetricsEventBus.post(new RegistryEvent.MetricsNotifyEvent(applicationModel),
+        MetricsEventBus.post(RegistryEvent.toNotifyEvent(applicationModel),
             () -> {
                 Map<String, Integer> lastNumMap = new HashMap<>();
                 // 1 different services

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -119,7 +119,7 @@ public RegistryDirectory(Class<T> serviceType, URL url) {
     @Override
     public void subscribe(URL url) {
         ApplicationModel applicationModel = url.getApplicationModel();
-        MetricsEventBus.post(new RegistryEvent.MetricsSubscribeEvent(applicationModel),() ->
+        MetricsEventBus.post(RegistryEvent.toSubscribeEvent(applicationModel),() ->
             {
                 super.subscribe(url);
                 return null;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/AbstractServiceDiscovery.java
Patch:
@@ -228,7 +228,7 @@ public MetadataInfo getRemoteMetadata(String revision, List<ServiceInstance> ins
             int triedTimes = 0;
             while (triedTimes < 3) {
 
-                metadata = MetricsEventBus.post(new MetadataEvent.PushEvent(applicationModel),
+                metadata = MetricsEventBus.post(new MetadataEvent.SubscribeEvent(applicationModel),
                     () -> MetadataUtils.getRemoteMetadata(revision, instances, metadataReport),
                     result -> result != MetadataInfo.EMPTY
                 );

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/ApplicationDeployListener.java
Patch:
@@ -25,6 +25,7 @@
  */
 @SPI(scope = ExtensionScope.APPLICATION)
 public interface ApplicationDeployListener extends DeployListener<ApplicationModel> {
+
     default void onModuleStarted(ApplicationModel applicationModel) {
 
     }

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoaderTest.java
Patch:
@@ -720,7 +720,7 @@ void testGetLoadingStrategies() {
     void testDuplicatedImplWithoutOverriddenStrategy() {
         List<LoadingStrategy> loadingStrategies = ExtensionLoader.getLoadingStrategies();
         ExtensionLoader.setLoadingStrategies(new DubboExternalLoadingStrategyTest(false),
-            new DubboInternalLoadingStrategyTest(false));
+                new DubboInternalLoadingStrategyTest(false));
         ExtensionLoader<DuplicatedWithoutOverriddenExt> extensionLoader = getExtensionLoader(DuplicatedWithoutOverriddenExt.class);
         try {
             extensionLoader.getExtension("duplicated");
@@ -738,7 +738,7 @@ void testDuplicatedImplWithoutOverriddenStrategy() {
     void testDuplicatedImplWithOverriddenStrategy() {
         List<LoadingStrategy> loadingStrategies = ExtensionLoader.getLoadingStrategies();
         ExtensionLoader.setLoadingStrategies(new DubboExternalLoadingStrategyTest(true),
-            new DubboInternalLoadingStrategyTest(true));
+                new DubboInternalLoadingStrategyTest(true));
         ExtensionLoader<DuplicatedOverriddenExt> extensionLoader = getExtensionLoader(DuplicatedOverriddenExt.class);
         DuplicatedOverriddenExt duplicatedOverriddenExt = extensionLoader.getExtension("duplicated");
         assertEquals("DuplicatedOverriddenExt1", duplicatedOverriddenExt.echo());
@@ -832,4 +832,4 @@ public int getPriority() {
             return MAX_PRIORITY;
         }
     }
-}
+}
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.config;
 
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -30,7 +31,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO;
 import static org.apache.dubbo.common.constants.CommonConstants.DUMP_DIRECTORY;
-import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_MANAGEMENT_MODE_ISOLATION;
+import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_MANAGEMENT_MODE_DEFAULT;
 import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP;
 import static org.apache.dubbo.common.constants.QosConstants.QOS_ENABLE;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -345,7 +346,7 @@ void testDefaultValue() {
         ApplicationConfig applicationConfig = DubboBootstrap.getInstance().getApplication();
 
         Assertions.assertEquals(DUBBO, applicationConfig.getProtocol());
-        Assertions.assertEquals(EXECUTOR_MANAGEMENT_MODE_ISOLATION, applicationConfig.getExecutorManagementMode());
+        Assertions.assertEquals(EXECUTOR_MANAGEMENT_MODE_DEFAULT, applicationConfig.getExecutorManagementMode());
         Assertions.assertEquals(Boolean.TRUE, applicationConfig.getEnableFileCache());
 
         DubboBootstrap.getInstance().destroy();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/ChannelHandlers.java
Patch:
@@ -33,7 +33,7 @@ public static ChannelHandler wrap(ChannelHandler handler, URL url) {
         return ChannelHandlers.getInstance().wrapInternal(handler, url);
     }
 
-    public static ChannelHandlers getInstance() {
+    protected static ChannelHandlers getInstance() {
         return INSTANCE;
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/handler/ConnectChannelHandlerTest.java
Patch:
@@ -14,14 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.rpc.protocol.dubbo.managemode;
+package org.apache.dubbo.remoting.handler;
 
 import org.apache.dubbo.remoting.ExecutionException;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.Request;
 import org.apache.dubbo.remoting.exchange.Response;
 import org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
@@ -30,6 +31,7 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.atomic.AtomicInteger;
 
+
 class ConnectChannelHandlerTest extends WrappedChannelHandlerTest {
 
     @BeforeEach

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/transport/dispatcher/ChannelHandlersTest.java
Patch:
@@ -14,13 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.rpc.protocol.dubbo.managemode;
+package org.apache.dubbo.remoting.transport.dispatcher;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.url.component.ServiceConfigURL;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.transport.MultiMessageHandler;
-import org.apache.dubbo.remoting.transport.dispatcher.ChannelHandlers;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/DefaultConfigValidator.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.SslConfig;
+import org.apache.dubbo.config.TracingConfig;
 import org.apache.dubbo.config.context.ConfigValidator;
 
 public class DefaultConfigValidator implements ConfigValidator {
@@ -51,6 +52,8 @@ public void validate(AbstractConfig config) {
             ConfigValidationUtils.validateModuleConfig((ModuleConfig) config);
         } else if (config instanceof MetricsConfig) {
             ConfigValidationUtils.validateMetricsConfig((MetricsConfig) config);
+        } else if (config instanceof TracingConfig) {
+            ConfigValidationUtils.validateTracingConfig((TracingConfig) config);
         } else if (config instanceof SslConfig) {
             ConfigValidationUtils.validateSslConfig((SslConfig) config);
         }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboConfigBeanInitializer.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.SslConfig;
+import org.apache.dubbo.config.TracingConfig;
 import org.apache.dubbo.config.context.AbstractConfigManager;
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
@@ -109,6 +110,7 @@ private void prepareDubboConfigBeans() {
         loadConfigBeansOfType(ConfigCenterBean.class, configManager);
         loadConfigBeansOfType(MetadataReportConfig.class, configManager);
         loadConfigBeansOfType(MetricsConfig.class, configManager);
+        loadConfigBeansOfType(TracingConfig.class, configManager);
         loadConfigBeansOfType(SslConfig.class, configManager);
 
         // load module config beans

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.SslConfig;
+import org.apache.dubbo.config.TracingConfig;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
 import org.apache.dubbo.config.spring.ReferenceBean;
 import org.apache.dubbo.config.spring.ServiceBean;
@@ -60,6 +61,7 @@ public void init() {
         registerBeanDefinitionParser("metadata-report", new DubboBeanDefinitionParser(MetadataReportConfig.class));
         registerBeanDefinitionParser("monitor", new DubboBeanDefinitionParser(MonitorConfig.class));
         registerBeanDefinitionParser("metrics", new DubboBeanDefinitionParser(MetricsConfig.class));
+        registerBeanDefinitionParser("tracing", new DubboBeanDefinitionParser(TracingConfig.class));
         registerBeanDefinitionParser("ssl", new DubboBeanDefinitionParser(SslConfig.class));
         registerBeanDefinitionParser("provider", new DubboBeanDefinitionParser(ProviderConfig.class));
         registerBeanDefinitionParser("consumer", new DubboBeanDefinitionParser(ConsumerConfig.class));

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/AggregateMetricsCollector.java
Patch:
@@ -66,7 +66,7 @@ public AggregateMetricsCollector(ApplicationModel applicationModel) {
         this.applicationModel = applicationModel;
         ConfigManager configManager = applicationModel.getApplicationConfigManager();
         MetricsConfig config = configManager.getMetrics().orElse(null);
-        if (config != null && config.getAggregation() != null && Boolean.TRUE.equals(config.getAggregation().getEnabled())) {
+        if (config != null && config.getAggregation() != null && (config.getAggregation().getEnabled() == null || Boolean.TRUE.equals(config.getAggregation().getEnabled()))) {
             // only registered when aggregation is enabled.
             registerListener();
 
@@ -94,7 +94,7 @@ private void onRTEvent(RTEvent event) {
 
 
     private void onRequestEvent(MethodEvent event) {
-        MethodMetric metric =  event.getMethodMetric();
+        MethodMetric metric = event.getMethodMetric();
 
         String type = event.getType();
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/observation/AbstractDefaultDubboObservationConvention.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.support.RpcUtils;
 
-import static org.apache.dubbo.metrics.observation.DubboObservation.LowCardinalityKeyNames.RPC_METHOD;
-import static org.apache.dubbo.metrics.observation.DubboObservation.LowCardinalityKeyNames.RPC_SERVICE;
-import static org.apache.dubbo.metrics.observation.DubboObservation.LowCardinalityKeyNames.RPC_SYSTEM;
+import static org.apache.dubbo.metrics.observation.DubboObservationDocumentation.LowCardinalityKeyNames.RPC_METHOD;
+import static org.apache.dubbo.metrics.observation.DubboObservationDocumentation.LowCardinalityKeyNames.RPC_SERVICE;
+import static org.apache.dubbo.metrics.observation.DubboObservationDocumentation.LowCardinalityKeyNames.RPC_SYSTEM;
 
 class AbstractDefaultDubboObservationConvention {
     KeyValues getLowCardinalityKeyValues(Invocation invocation) {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/observation/DubboObservationDocumentation.java
Patch:
@@ -17,14 +17,15 @@
 package org.apache.dubbo.metrics.observation;
 
 import io.micrometer.common.docs.KeyName;
+import io.micrometer.common.lang.NonNullApi;
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationConvention;
 import io.micrometer.observation.docs.ObservationDocumentation;
 
 /**
  * Documentation of Dubbo observations.
  */
-public enum DubboObservation implements ObservationDocumentation {
+public enum DubboObservationDocumentation implements ObservationDocumentation {
 
     /**
      * Server side Dubbo RPC Observation.
@@ -58,6 +59,7 @@ public KeyName[] getLowCardinalityKeyNames() {
 
     };
 
+    @NonNullApi
     enum LowCardinalityKeyNames implements KeyName {
 
         /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/BatchExecutorQueue.java
Patch:
@@ -62,7 +62,7 @@ private void run(Executor executor) {
             boolean flushedOnce = false;
             while ((item = snapshot.poll()) != null) {
                 if (snapshot.size() == 0) {
-                    i = 0;
+                    flushedOnce = false;
                     break;
                 }
                 if (i == chunkSize) {
@@ -74,7 +74,7 @@ private void run(Executor executor) {
                     i++;
                 }
             }
-            if ((i != 0 || !flushedOnce) && item != null) {
+            if (!flushedOnce && item != null) {
                 flush(item);
             }
         } finally {

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -626,4 +626,6 @@ public interface CommonConstants {
     String BYTE_ACCESSOR_KEY = "byte.accessor";
 
     String PAYLOAD = "payload";
+    
+    String DUBBO_METRICS_CONFIGCENTER_ENABLE = "dubbo.metrics.configcenter.enable";
 }

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/CacheListener.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -34,9 +35,9 @@ public class CacheListener {
     public CacheListener() {
     }
 
-    public ZookeeperDataListener addListener(String pathKey, ConfigurationListener configurationListener, String key, String group) {
+    public ZookeeperDataListener addListener(String pathKey, ConfigurationListener configurationListener, String key, String group, ApplicationModel applicationModel) {
         ZookeeperDataListener zookeeperDataListener = ConcurrentHashMapUtils.computeIfAbsent(pathKeyListeners, pathKey,
-            _pathKey -> new ZookeeperDataListener(_pathKey, key, group));
+            _pathKey -> new ZookeeperDataListener(_pathKey, key, group, applicationModel));
         zookeeperDataListener.addListener(configurationListener);
         return zookeeperDataListener;
     }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MetricsCategory.java
Patch:
@@ -24,8 +24,9 @@ public enum MetricsCategory {
     RT,
     QPS,
     REQUESTS,
+    APPLICATION,
+    CONFIGCENTER,
     REGISTRY,
     METADATA,
     THREAD_POOL,
-    APPLICATION
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MetricsKey.java
Patch:
@@ -20,6 +20,8 @@
 public enum MetricsKey {
     APPLICATION_METRIC_INFO("dubbo.application.info.total", "Total Application Info"),
 
+    CONFIGCENTER_METRIC_TOTAL("dubbo.configcenter.total", "Config Changed Total"),
+
     // provider metrics key
     METRIC_REQUESTS("dubbo.%s.requests.total", "Total Requests"),
     METRIC_REQUESTS_SUCCEED("dubbo.%s.requests.succeed.total", "Total Succeed Requests"),

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyBackedChannelBuffer.java
Patch:
@@ -450,7 +450,6 @@ public int compareTo(ChannelBuffer o) {
         return ChannelBuffers.compare(this, o);
     }
 
-    @Override
     public void release() {
         ReferenceCountUtil.safeRelease(buffer);
     }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MetricsCategory.java
Patch:
@@ -25,6 +25,7 @@ public enum MetricsCategory {
     QPS,
     REQUESTS,
     REGISTRY,
+    METADATA,
     THREAD_POOL,
     APPLICATION
 }

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/collector/MetadataMetricsCollector.java
Patch:
@@ -63,7 +63,7 @@ public boolean isCollectEnabled() {
             ConfigManager configManager = applicationModel.getApplicationConfigManager();
             configManager.getMetrics().ifPresent(metricsConfig -> setCollectEnabled(metricsConfig.getEnableMetadataMetrics()));
         }
-        return Optional.ofNullable(collectEnabled).orElse(false);
+        return Optional.ofNullable(collectEnabled).orElse(true);
     }
 
     @Override

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/collector/stat/MetadataStatComposite.java
Patch:
@@ -141,7 +141,7 @@ public List<GaugeMetricSample> exportNumMetrics() {
         for (MetadataEvent.ApplicationType type : applicationNumStats.keySet()) {
             Map<String, AtomicLong> stringAtomicLongMap = applicationNumStats.get(type);
             for (String applicationName : stringAtomicLongMap.keySet()) {
-                list.add(convertToSample(applicationName, type, MetricsCategory.REGISTRY, stringAtomicLongMap.get(applicationName)));
+                list.add(convertToSample(applicationName, type, MetricsCategory.METADATA, stringAtomicLongMap.get(applicationName)));
             }
         }
         return list;
@@ -162,7 +162,7 @@ public List<GaugeMetricSample> exportServiceNumMetrics() {
         for (MetadataEvent.ServiceType type : serviceNumStats.keySet()) {
             Map<ServiceKeyMetric, AtomicLong> stringAtomicLongMap = serviceNumStats.get(type);
             for (ServiceKeyMetric serviceKeyMetric : stringAtomicLongMap.keySet()) {
-                list.add(new GaugeMetricSample<>(type.getMetricsKey(), serviceKeyMetric.getTags(), MetricsCategory.REGISTRY, stringAtomicLongMap, value -> value.get(serviceKeyMetric).get()));
+                list.add(new GaugeMetricSample<>(type.getMetricsKey(), serviceKeyMetric.getTags(), MetricsCategory.METADATA, stringAtomicLongMap, value -> value.get(serviceKeyMetric).get()));
             }
         }
         return list;

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/collector/RegistryMetricsCollector.java
Patch:
@@ -64,7 +64,7 @@ public boolean isCollectEnabled() {
             ConfigManager configManager = applicationModel.getApplicationConfigManager();
             configManager.getMetrics().ifPresent(metricsConfig -> setCollectEnabled(metricsConfig.getEnableRegistryMetrics()));
         }
-        return Optional.ofNullable(collectEnabled).orElse(false);
+        return Optional.ofNullable(collectEnabled).orElse(true);
     }
 
     public void setNum(RegistryEvent.ServiceType registryType, String applicationName, Map<String, Integer> lastNumMap) {

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/event/MetricsServiceSubscribeListener.java
Patch:
@@ -40,13 +40,13 @@ public void onEvent(RegistryEvent.MetricsServiceSubscribeEvent event) {
     @Override
     public void onEventFinish(RegistryEvent.MetricsServiceSubscribeEvent event) {
         event.getCollector().incrementServiceKey(event.getSource().getApplicationName(), event.getUniqueServiceName(), RegistryEvent.ServiceType.S_SERVICE_SUCCEED, 1);
-        event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_SUBSCRIBE_SERVICE, event.getTimePair().calc());
+        event.getCollector().addServiceKeyRT(event.getSource().getApplicationName(), event.getUniqueServiceName(), OP_TYPE_SUBSCRIBE_SERVICE, event.getTimePair().calc());
     }
 
     @Override
     public void onEventError(RegistryEvent.MetricsServiceSubscribeEvent event) {
         event.getCollector().incrementServiceKey(event.getSource().getApplicationName(), event.getUniqueServiceName(), RegistryEvent.ServiceType.S_SERVICE_FAILED, 1);
-        event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_SUBSCRIBE_SERVICE, event.getTimePair().calc());
+        event.getCollector().addServiceKeyRT(event.getSource().getApplicationName(), event.getUniqueServiceName(), OP_TYPE_SUBSCRIBE_SERVICE, event.getTimePair().calc());
     }
 
 }

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/collector/stat/MetadataStatComposite.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.metrics.model.MetricsCategory;
 import org.apache.dubbo.metrics.model.MetricsKey;
 import org.apache.dubbo.metrics.model.MetricsKeyWrapper;
+import org.apache.dubbo.metrics.model.ServiceKeyMetric;
 import org.apache.dubbo.metrics.model.container.AtomicLongContainer;
 import org.apache.dubbo.metrics.model.container.LongAccumulatorContainer;
 import org.apache.dubbo.metrics.model.container.LongContainer;

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/event/MetricsServiceRegisterListener.java
Patch:
@@ -46,6 +46,6 @@ public void onEventFinish(RegistryEvent.MetricsServiceRegisterEvent event) {
     @Override
     public void onEventError(RegistryEvent.MetricsServiceRegisterEvent event) {
         event.getCollector().incrementServiceKey(event.getSource().getApplicationName(), event.getServiceKey(), RegistryEvent.ServiceType.R_SERVICE_FAILED, event.getSize());
-        event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_REGISTER_SERVICE, event.getTimePair().calc());
+        event.getCollector().addServiceKeyRT(event.getSource().getApplicationName(),event.getServiceKey(), OP_TYPE_REGISTER_SERVICE, event.getTimePair().calc());
     }
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoaderTest.java
Patch:
@@ -720,7 +720,7 @@ void testGetLoadingStrategies() {
     void testDuplicatedImplWithoutOverriddenStrategy() {
         List<LoadingStrategy> loadingStrategies = ExtensionLoader.getLoadingStrategies();
         ExtensionLoader.setLoadingStrategies(new DubboExternalLoadingStrategyTest(false),
-                new DubboInternalLoadingStrategyTest(false));
+            new DubboInternalLoadingStrategyTest(false));
         ExtensionLoader<DuplicatedWithoutOverriddenExt> extensionLoader = getExtensionLoader(DuplicatedWithoutOverriddenExt.class);
         try {
             extensionLoader.getExtension("duplicated");
@@ -738,7 +738,7 @@ void testDuplicatedImplWithoutOverriddenStrategy() {
     void testDuplicatedImplWithOverriddenStrategy() {
         List<LoadingStrategy> loadingStrategies = ExtensionLoader.getLoadingStrategies();
         ExtensionLoader.setLoadingStrategies(new DubboExternalLoadingStrategyTest(true),
-                new DubboInternalLoadingStrategyTest(true));
+            new DubboInternalLoadingStrategyTest(true));
         ExtensionLoader<DuplicatedOverriddenExt> extensionLoader = getExtensionLoader(DuplicatedOverriddenExt.class);
         DuplicatedOverriddenExt duplicatedOverriddenExt = extensionLoader.getExtension("duplicated");
         assertEquals("DuplicatedOverriddenExt1", duplicatedOverriddenExt.echo());
@@ -832,4 +832,4 @@ public int getPriority() {
             return MAX_PRIORITY;
         }
     }
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dubbo.config;
 
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -31,7 +30,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO;
 import static org.apache.dubbo.common.constants.CommonConstants.DUMP_DIRECTORY;
-import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_MANAGEMENT_MODE_DEFAULT;
+import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_MANAGEMENT_MODE_ISOLATION;
 import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP;
 import static org.apache.dubbo.common.constants.QosConstants.QOS_ENABLE;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -346,7 +345,7 @@ void testDefaultValue() {
         ApplicationConfig applicationConfig = DubboBootstrap.getInstance().getApplication();
 
         Assertions.assertEquals(DUBBO, applicationConfig.getProtocol());
-        Assertions.assertEquals(EXECUTOR_MANAGEMENT_MODE_DEFAULT, applicationConfig.getExecutorManagementMode());
+        Assertions.assertEquals(EXECUTOR_MANAGEMENT_MODE_ISOLATION, applicationConfig.getExecutorManagementMode());
         Assertions.assertEquals(Boolean.TRUE, applicationConfig.getEnableFileCache());
 
         DubboBootstrap.getInstance().destroy();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/ChannelHandlers.java
Patch:
@@ -33,7 +33,7 @@ public static ChannelHandler wrap(ChannelHandler handler, URL url) {
         return ChannelHandlers.getInstance().wrapInternal(handler, url);
     }
 
-    protected static ChannelHandlers getInstance() {
+    public static ChannelHandlers getInstance() {
         return INSTANCE;
     }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/managemode/ChannelHandlersTest.java
Patch:
@@ -14,13 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.remoting.transport.dispatcher;
+package org.apache.dubbo.rpc.protocol.dubbo.managemode;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.url.component.ServiceConfigURL;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.transport.MultiMessageHandler;
-
+import org.apache.dubbo.remoting.transport.dispatcher.ChannelHandlers;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/managemode/ConnectChannelHandlerTest.java
Patch:
@@ -14,15 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.remoting.handler;
+package org.apache.dubbo.rpc.protocol.dubbo.managemode;
 
 import org.apache.dubbo.remoting.ExecutionException;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.Request;
 import org.apache.dubbo.remoting.exchange.Response;
 import org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
@@ -31,7 +30,6 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.atomic.AtomicInteger;
 
-
 class ConnectChannelHandlerTest extends WrappedChannelHandlerTest {
 
     @BeforeEach

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/MetadataReportInstance.java
Patch:
@@ -57,7 +57,7 @@ public class MetadataReportInstance implements Disposable {
 
     // mapping of registry id to metadata report instance, registry instances will use this mapping to find related metadata reports
     private final Map<String, MetadataReport> metadataReports = new HashMap<>();
-    private ApplicationModel applicationModel;
+    private final ApplicationModel applicationModel;
     private final NopMetadataReport nopMetadataReport;
 
     public MetadataReportInstance(ApplicationModel applicationModel) {

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/event/MetadataMetricsEventMulticaster.java
Patch:
@@ -24,7 +24,7 @@ public final class MetadataMetricsEventMulticaster extends SimpleMetricsEventMul
     public MetadataMetricsEventMulticaster() {
         super.addListener(new MetricsPushListener());
         super.addListener(new MetricsSubscribeListener());
-
+        super.addListener(new StoreProviderMetadataListener());
         setAvailable();
     }
 

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/event/MetricsPushListener.java
Patch:
@@ -32,18 +32,18 @@ public boolean isSupport(MetricsEvent event) {
 
     @Override
     public void onEvent(MetadataEvent.PushEvent event) {
-        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.Type.P_TOTAL);
+        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.ApplicationType.P_TOTAL);
     }
 
     @Override
     public void onEventFinish(MetadataEvent.PushEvent event) {
-        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.Type.P_SUCCEED);
+        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.ApplicationType.P_SUCCEED);
         event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_PUSH, event.getTimePair().calc());
     }
 
     @Override
     public void onEventError(MetadataEvent.PushEvent event) {
-        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.Type.P_FAILED);
+        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.ApplicationType.P_FAILED);
         event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_PUSH, event.getTimePair().calc());
     }
 }

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/event/MetricsSubscribeListener.java
Patch:
@@ -31,18 +31,18 @@ public boolean isSupport(MetricsEvent event) {
 
     @Override
     public void onEvent(MetadataEvent.SubscribeEvent event) {
-        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.Type.S_TOTAL);
+        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.ApplicationType.S_TOTAL);
     }
 
     @Override
     public void onEventFinish(MetadataEvent.SubscribeEvent event) {
-        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.Type.S_SUCCEED);
+        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.ApplicationType.S_SUCCEED);
         event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_SUBSCRIBE, event.getTimePair().calc());
     }
 
     @Override
     public void onEventError(MetadataEvent.SubscribeEvent event) {
-        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.Type.S_FAILED);
+        event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.ApplicationType.S_FAILED);
         event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_SUBSCRIBE, event.getTimePair().calc());
     }
 

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/collector/stat/ServiceKeyMetric.java
Patch:
@@ -46,7 +46,6 @@ public Map<String, String> getTags() {
         tags.put(TAG_IP, getLocalHost());
         tags.put(TAG_HOSTNAME, getLocalHostName());
         tags.put(TAG_APPLICATION_NAME, applicationName);
-
         tags.put(TAG_INTERFACE_KEY, serviceKey);
         return tags;
     }

File: dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/aggregate/TimeWindowQuantileTest.java
Patch:
@@ -23,15 +23,13 @@
 class TimeWindowQuantileTest {
 
     @Test
-    void test() throws Exception {
+    void test() {
         TimeWindowQuantile quantile = new TimeWindowQuantile(100, 10, 1);
         for (int i = 1; i <= 100; i++) {
             quantile.add(i);
         }
 
         Assertions.assertEquals(quantile.quantile(0.01), 2);
         Assertions.assertEquals(quantile.quantile(0.99), 100);
-        Thread.sleep(1000);
-        Assertions.assertEquals(quantile.quantile(0.99), Double.NaN);
     }
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -831,13 +831,13 @@ private DynamicConfiguration getDynamicConfiguration(URL connectionURL) {
     private void registerServiceInstance() {
         TimePair timePair = TimePair.start();
         GlobalMetricsEventMulticaster eventMulticaster = applicationModel.getBeanFactory().getBean(GlobalMetricsEventMulticaster.class);
-        eventMulticaster.publishEvent(new RegistryEvent.MetricsRegisterEvent(applicationModel, timePair));
+        eventMulticaster.publishEvent(new RegistryEvent.MetricsApplicationRegisterEvent(applicationModel, timePair));
         try {
             registered = true;
             ServiceInstanceMetadataUtils.registerMetadataAndInstance(applicationModel);
-            eventMulticaster.publishFinishEvent(new RegistryEvent.MetricsRegisterEvent(applicationModel, timePair));
+            eventMulticaster.publishFinishEvent(new RegistryEvent.MetricsApplicationRegisterEvent(applicationModel, timePair));
         } catch (Exception e) {
-            eventMulticaster.publishErrorEvent(new RegistryEvent.MetricsRegisterEvent(applicationModel, timePair));
+            eventMulticaster.publishErrorEvent(new RegistryEvent.MetricsApplicationRegisterEvent(applicationModel, timePair));
             logger.error(CONFIG_REGISTER_INSTANCE_ERROR, "configuration server disconnected", "", "Register instance error.", e);
         }
         if (registered) {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/ApplicationMetricsCollector.java
Patch:
@@ -29,6 +29,6 @@ public interface ApplicationMetricsCollector<T, E extends MetricsEvent> extends
 
     void increment(String applicationName, T type);
 
-    void addRT(String applicationName, String registryOpType, Long responseTime);
+    void addApplicationRT(String applicationName, String registryOpType, Long responseTime);
 }
 

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/collector/MetadataMetricsCollector.java
Patch:
@@ -72,7 +72,7 @@ public void increment(String applicationName, MetadataEvent.Type registryType) {
     }
 
     @Override
-    public void addRT(String applicationName, String registryOpType, Long responseTime) {
+    public void addApplicationRT(String applicationName, String registryOpType, Long responseTime) {
         stats.calcRt(applicationName, registryOpType, responseTime);
     }
 

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/event/MetricsPushListener.java
Patch:
@@ -38,12 +38,12 @@ public void onEvent(MetadataEvent.PushEvent event) {
     @Override
     public void onEventFinish(MetadataEvent.PushEvent event) {
         event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.Type.P_SUCCEED);
-        event.getCollector().addRT(event.getSource().getApplicationName(), OP_TYPE_PUSH, event.getTimePair().calc());
+        event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_PUSH, event.getTimePair().calc());
     }
 
     @Override
     public void onEventError(MetadataEvent.PushEvent event) {
         event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.Type.P_FAILED);
-        event.getCollector().addRT(event.getSource().getApplicationName(), OP_TYPE_PUSH, event.getTimePair().calc());
+        event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_PUSH, event.getTimePair().calc());
     }
 }

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/event/MetricsSubscribeListener.java
Patch:
@@ -37,13 +37,13 @@ public void onEvent(MetadataEvent.SubscribeEvent event) {
     @Override
     public void onEventFinish(MetadataEvent.SubscribeEvent event) {
         event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.Type.S_SUCCEED);
-        event.getCollector().addRT(event.getSource().getApplicationName(), OP_TYPE_SUBSCRIBE, event.getTimePair().calc());
+        event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_SUBSCRIBE, event.getTimePair().calc());
     }
 
     @Override
     public void onEventError(MetadataEvent.SubscribeEvent event) {
         event.getCollector().increment(event.getSource().getApplicationName(), MetadataEvent.Type.S_FAILED);
-        event.getCollector().addRT(event.getSource().getApplicationName(), OP_TYPE_SUBSCRIBE, event.getTimePair().calc());
+        event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_SUBSCRIBE, event.getTimePair().calc());
     }
 
 }

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/event/MetricsNotifyListener.java
Patch:
@@ -38,13 +38,13 @@ public boolean isSupport(MetricsEvent event) {
 
     @Override
     public void onEvent(RegistryEvent.MetricsNotifyEvent event) {
-        event.getCollector().increment(event.getSource().getApplicationName(), RegistryEvent.Type.N_TOTAL);
+        event.getCollector().increment(event.getSource().getApplicationName(), RegistryEvent.ApplicationType.N_TOTAL);
     }
 
     @Override
     public void onEventFinish(RegistryEvent.MetricsNotifyEvent event) {
-        event.getCollector().setNum(RegistryEvent.Type.N_LAST_NUM, event.getSource().getApplicationName(), event.getLastNotifyNum());
-        event.getCollector().addRT(event.getSource().getApplicationName(), OP_TYPE_NOTIFY, event.getTimePair().calc());
+        event.getCollector().setNum(RegistryEvent.ServiceType.N_LAST_NUM, event.getSource().getApplicationName(), event.getLastNotifyNum());
+        event.getCollector().addApplicationRT(event.getSource().getApplicationName(), OP_TYPE_NOTIFY, event.getTimePair().calc());
     }
 
     @Override

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/event/RegistryMetricsEventMulticaster.java
Patch:
@@ -26,6 +26,8 @@ public RegistryMetricsEventMulticaster() {
         super.addListener(new MetricsSubscribeListener());
         super.addListener(new MetricsNotifyListener());
         super.addListener(new MetricsDirectoryListener());
+        super.addListener(new MetricsServiceRegisterListener());
+        super.addListener(new MetricsServiceSubscribeListener());
 
         setAvailable();
     }

File: dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryMetricsSampleTest.java
Patch:
@@ -65,8 +65,8 @@ void testRTMetrics() {
         RegistryMetricsCollector collector = new RegistryMetricsCollector(applicationModel);
         collector.setCollectEnabled(true);
         String applicationName = applicationModel.getApplicationName();
-        collector.addRT(applicationName, RegistryStatComposite.OP_TYPE_REGISTER, 10L);
-        collector.addRT(applicationName, RegistryStatComposite.OP_TYPE_REGISTER, 0L);
+        collector.addApplicationRT(applicationName, RegistryStatComposite.OP_TYPE_REGISTER, 10L);
+        collector.addApplicationRT(applicationName, RegistryStatComposite.OP_TYPE_REGISTER, 0L);
 
         List<MetricSample> samples = collector.collect();
         for (MetricSample sample : samples) {
@@ -89,7 +89,7 @@ void testListener() {
         RegistryMetricsCollector collector = new RegistryMetricsCollector(applicationModel);
         collector.setCollectEnabled(true);
         String applicationName = applicationModel.getApplicationName();
-        collector.increment(applicationName,RegistryEvent.Type.R_TOTAL);
+        collector.increment(applicationName, RegistryEvent.ApplicationType.R_TOTAL);
     }
 
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/qos/command/BaseCommand.java
Patch:
@@ -17,10 +17,10 @@
 
 package com.alibaba.dubbo.qos.command;
 
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 
 @Deprecated
-public interface BaseCommand extends org.apache.dubbo.qos.command.BaseCommand {
+public interface BaseCommand extends org.apache.dubbo.qos.api.BaseCommand {
 
     String execute(com.alibaba.dubbo.qos.command.CommandContext commandContext, String[] args);
 

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/qos/command/CommandContext.java
Patch:
@@ -18,9 +18,9 @@
 package com.alibaba.dubbo.qos.command;
 
 @Deprecated
-public class CommandContext extends org.apache.dubbo.qos.command.CommandContext {
+public class CommandContext extends org.apache.dubbo.qos.api.CommandContext {
 
-    public CommandContext(org.apache.dubbo.qos.command.CommandContext context) {
+    public CommandContext(org.apache.dubbo.qos.api.CommandContext context) {
         super(context.getCommandName(), context.getArgs(), context.isHttp());
         setRemote(context.getRemote());
         setOriginRequest(context.getOriginRequest());

File: dubbo-metrics/dubbo-metrics-prometheus/src/main/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsReporterCmd.java
Patch:
@@ -21,9 +21,9 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.JsonUtils;
 import org.apache.dubbo.metrics.report.MetricsReporter;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.Cmd;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 

File: dubbo-plugin/dubbo-qos-api/src/main/java/org/apache/dubbo/qos/api/BaseCommand.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.qos.command;
+package org.apache.dubbo.qos.api;
 
 import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;

File: dubbo-plugin/dubbo-qos-api/src/main/java/org/apache/dubbo/qos/api/Cmd.java
Patch:
@@ -14,9 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.qos.command.annotation;
-
-import org.apache.dubbo.qos.permission.PermissionLevel;
+package org.apache.dubbo.qos.api;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: dubbo-plugin/dubbo-qos-api/src/main/java/org/apache/dubbo/qos/api/CommandContext.java
Patch:
@@ -14,9 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.qos.command;
-
-import org.apache.dubbo.qos.common.QosConfiguration;
+package org.apache.dubbo.qos.api;
 
 import io.netty.channel.Channel;
 

File: dubbo-plugin/dubbo-qos-api/src/main/java/org/apache/dubbo/qos/api/PermissionLevel.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.qos.permission;
+package org.apache.dubbo.qos.api;
 
 import org.apache.dubbo.common.utils.StringUtils;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/CommandContextFactory.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.qos.command;
 
+import org.apache.dubbo.qos.api.CommandContext;
+
 public class CommandContextFactory {
     public static CommandContext newInstance(String commandName) {
         return new CommandContext(commandName);

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/CommandExecutor.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.qos.command;
 
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.command.exception.NoSuchCommandException;
 import org.apache.dubbo.qos.command.exception.PermissionDenyException;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/decoder/HttpCommandDecoder.java
Patch:
@@ -22,7 +22,7 @@
 import io.netty.handler.codec.http.multipart.Attribute;
 import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder;
 import io.netty.handler.codec.http.multipart.InterfaceHttpData;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.command.CommandContextFactory;
 
 import java.io.IOException;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/decoder/TelnetCommandDecoder.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.qos.command.decoder;
 
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.command.CommandContextFactory;
 
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/BaseOffline.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ArrayUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.RegistryFactory;
 import org.apache.dubbo.rpc.model.FrameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/BaseOnline.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ArrayUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.RegistryFactory;
 import org.apache.dubbo.rpc.model.FrameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/ChangeTelnet.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.ArrayUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/CountTelnet.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.telnet.support.TelnetUtils;
 import org.apache.dubbo.remoting.utils.PayloadDropper;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/DisableDetailProfiler.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.profiler.ProfilerSwitch;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.QOS_PROFILER_DISABLED;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/DisableRouterSnapshot.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher;
 import org.apache.dubbo.rpc.model.ConsumerModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/DisableSimpleProfiler.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.profiler.ProfilerSwitch;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.QOS_PROFILER_DISABLED;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/EnableDetailProfiler.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.profiler.ProfilerSwitch;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.QOS_PROFILER_ENABLED;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/EnableRouterSnapshot.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher;
 import org.apache.dubbo.rpc.model.ConsumerModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/EnableSimpleProfiler.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.profiler.ProfilerSwitch;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.QOS_PROFILER_ENABLED;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/GetEnabledRouterSnapshot.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/GetRecentRouterSnapshot.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/GetRouterSnapshot.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.constants.CommonConstants;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.client.migration.MigrationInvoker;
 import org.apache.dubbo.rpc.cluster.Directory;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Help.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.ArrayUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.qos.command.util.CommandHelper;
 import org.apache.dubbo.qos.textui.TTable;
 import org.apache.dubbo.rpc.model.FrameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/InvokeTelnet.java
Patch:
@@ -21,9 +21,9 @@
 import org.apache.dubbo.common.utils.JsonUtils;
 import org.apache.dubbo.common.utils.ReflectUtils;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.MethodDescriptor;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/LoggerInfo.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dubbo.common.logger.Level;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 
 @Cmd(name = "loggerInfo", summary = "Print logger info", example = {
     "loggerInfo"

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Ls.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.qos.command.util.ServiceCheckUtils;
 import org.apache.dubbo.qos.textui.TTable;
 import org.apache.dubbo.rpc.model.ConsumerModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Offline.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ProviderModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/OfflineApp.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.UrlUtils;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ProviderModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/OfflineInterface.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.UrlUtils;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ProviderModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Online.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 @Cmd(name = "online", summary = "online app addresses", example = {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/OnlineApp.java
Patch:
@@ -18,7 +18,7 @@
 
 
 import org.apache.dubbo.common.utils.UrlUtils;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ProviderModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/OnlineInterface.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.UrlUtils;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ProviderModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/PortTelnet.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.remoting.exchange.ExchangeChannel;
 import org.apache.dubbo.remoting.exchange.ExchangeServer;
 import org.apache.dubbo.rpc.ProtocolServer;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/PublishMetadata.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.ArrayUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/PwdTelnet.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 
 import java.util.Arrays;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/SelectTelnet.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.dubbo.common.utils.ArrayUtils;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import io.netty.channel.Channel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/SerializeCheckStatus.java
Patch:
@@ -21,9 +21,9 @@
 import java.util.stream.Collectors;
 
 import org.apache.dubbo.common.utils.JsonUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.qos.command.util.SerializeCheckUtils;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/SerializeWarnedClasses.java
Patch:
@@ -21,9 +21,9 @@
 import java.util.stream.Collectors;
 
 import org.apache.dubbo.common.utils.JsonUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.qos.command.util.SerializeCheckUtils;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/SetProfilerWarnPercent.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.profiler.ProfilerSwitch;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.QOS_PROFILER_WARN_PERCENT;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/ShutdownTelnet.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/SwitchLogLevel.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dubbo.common.logger.Level;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 
 import java.util.Locale;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/SwitchLogger.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dubbo.common.logger.Level;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 @Cmd(name = "switchLogger", summary = "Switch logger", example = {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Version.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 
 @Cmd(name = "version", summary = "version command(show dubbo version)", example = {
         "version"

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/util/CommandHelper.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.qos.command.util;
 
-import org.apache.dubbo.qos.command.BaseCommand;
+import org.apache.dubbo.qos.api.BaseCommand;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import java.util.ArrayList;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/permission/DefaultAnonymousAccessPermissionChecker.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.dubbo.qos.permission;
 
-import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.common.QosConfiguration;
-
 import io.netty.channel.Channel;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.PermissionLevel;
+import org.apache.dubbo.qos.api.QosConfiguration;
 
 import java.net.InetAddress;
 import java.net.InetSocketAddress;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/permission/PermissionChecker.java
Patch:
@@ -18,7 +18,8 @@
 
 import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.PermissionLevel;
 
 // qosPermissionChecker=xxx.xxx.xxxPermissionChecker
 @SPI(scope = ExtensionScope.FRAMEWORK)

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/protocol/QosProtocolWrapper.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.permission.PermissionLevel;
+import org.apache.dubbo.qos.api.PermissionLevel;
 import org.apache.dubbo.qos.common.QosConstants;
 import org.apache.dubbo.qos.pu.QosWireProtocol;
 import org.apache.dubbo.qos.server.Server;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/pu/QosWireProtocol.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.permission.PermissionLevel;
+import org.apache.dubbo.qos.api.PermissionLevel;
 import org.apache.dubbo.qos.server.DubboLogo;
-import org.apache.dubbo.qos.common.QosConfiguration;
+import org.apache.dubbo.qos.api.QosConfiguration;
 import org.apache.dubbo.qos.server.handler.QosProcessHandler;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.api.AbstractWireProtocol;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/pu/TelnetDetector.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.dubbo.qos.pu;
 
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder;
 import org.apache.dubbo.remoting.api.ProtocolDetector;
 import org.apache.dubbo.remoting.buffer.ChannelBuffer;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/Server.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.permission.PermissionLevel;
-import org.apache.dubbo.qos.common.QosConfiguration;
+import org.apache.dubbo.qos.api.PermissionLevel;
+import org.apache.dubbo.qos.api.QosConfiguration;
 import org.apache.dubbo.qos.server.handler.QosProcessHandler;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandler.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.function.Predicate;
 
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.common.QosConfiguration;
+import org.apache.dubbo.qos.api.QosConfiguration;
 import org.apache.dubbo.qos.common.QosConstants;
 
 import io.netty.buffer.ByteBuf;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/HttpProcessHandler.java
Patch:
@@ -18,13 +18,13 @@
 
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.command.CommandExecutor;
 import org.apache.dubbo.qos.command.DefaultCommandExecutor;
 import org.apache.dubbo.qos.command.exception.NoSuchCommandException;
 import org.apache.dubbo.qos.command.exception.PermissionDenyException;
 import org.apache.dubbo.qos.command.decoder.HttpCommandDecoder;
-import org.apache.dubbo.qos.common.QosConfiguration;
+import org.apache.dubbo.qos.api.QosConfiguration;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import io.netty.buffer.Unpooled;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.qos.server.handler;
 
 import org.apache.dubbo.common.utils.ExecutorUtil;
-import org.apache.dubbo.qos.common.QosConfiguration;
+import org.apache.dubbo.qos.api.QosConfiguration;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import io.netty.buffer.ByteBuf;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java
Patch:
@@ -19,14 +19,14 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.command.CommandExecutor;
 import org.apache.dubbo.qos.command.DefaultCommandExecutor;
 import org.apache.dubbo.qos.command.exception.NoSuchCommandException;
 import org.apache.dubbo.qos.command.exception.PermissionDenyException;
 import org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder;
 import org.apache.dubbo.qos.common.QosConstants;
-import org.apache.dubbo.qos.common.QosConfiguration;
+import org.apache.dubbo.qos.api.QosConfiguration;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import io.netty.channel.ChannelFutureListener;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/CommandContextFactoryTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dubbo.qos.command;
 
+import org.apache.dubbo.qos.api.CommandContext;
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/CommandContextTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.qos.command;
 
 import io.netty.channel.Channel;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
@@ -53,4 +54,4 @@ void test() {
         assertFalse(context.isHttp());
         assertThat(context.getRemote(), is(channel));
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java
Patch:
@@ -17,9 +17,10 @@
 
 package org.apache.dubbo.qos.command;
 
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.PermissionLevel;
+import org.apache.dubbo.qos.api.QosConfiguration;
 import org.apache.dubbo.qos.command.exception.NoSuchCommandException;
-import org.apache.dubbo.qos.common.QosConfiguration;
-import org.apache.dubbo.qos.permission.PermissionLevel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/GreetingCommand.java
Patch:
@@ -18,7 +18,9 @@
 package org.apache.dubbo.qos.command;
 
 import org.apache.dubbo.common.utils.ArrayUtils;
-import org.apache.dubbo.qos.command.annotation.Cmd;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
+import org.apache.dubbo.qos.api.Cmd;
 
 
 @Cmd(name = "greeting", summary = "greeting message", example = {"greeting dubbo",})

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/decoder/HttpCommandDecoderTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.qos.command.decoder;
 
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/decoder/TelnetCommandDecoderTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.qos.command.decoder;
 
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 
 import org.junit.jupiter.api.Test;
 
@@ -33,4 +33,4 @@ void testDecode() throws Exception {
         assertThat(context.isHttp(), is(false));
         assertThat(context.getArgs(), arrayContaining("a", "b"));
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/ChangeTelnetTest.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
@@ -124,4 +124,4 @@ void testChangeCancel2() {
         String result = change.execute(mockCommandContext, new String[]{"/"});
         assertEquals("Cancelled default service org.apache.dubbo.rpc.protocol.dubbo.support.DemoService.", result);
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/CountTelnetTest.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.command.impl.channel.MockNettyChannel;
 import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.remoting.telnet.support.TelnetUtils;
@@ -118,4 +118,4 @@ public static String buildTable(String methodName, long averageElapsed,
         return TelnetUtils.toTable(header, table);
     }
 
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/GetConfigTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.dubbo.config.ServiceConfig;
 import org.apache.dubbo.config.SslConfig;
 import org.apache.dubbo.metadata.MetadataService;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleModel;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/HelpTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import org.junit.jupiter.api.Test;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/InvokeTelnetTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.qos.legacy.service.DemoServiceImpl;
 import org.apache.dubbo.remoting.RemotingException;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/LiveTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import org.junit.jupiter.api.AfterEach;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/LsTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.qos.DemoService;
 import org.apache.dubbo.qos.DemoServiceImpl;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.rpc.model.AsyncMethodInfo;
 import org.apache.dubbo.rpc.model.ConsumerModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/OfflineTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.utils.ClassUtils;
 import org.apache.dubbo.qos.DemoService;
 import org.apache.dubbo.qos.DemoServiceImpl;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.registry.RegistryService;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleServiceRepository;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/OnlineTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.utils.ClassUtils;
 import org.apache.dubbo.qos.DemoService;
 import org.apache.dubbo.qos.DemoServiceImpl;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.registry.RegistryService;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleServiceRepository;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/PortTelnetTest.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.NetUtils;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.ExchangeClient;
@@ -108,4 +108,4 @@ void testNoPort() throws RemotingException {
         String result = port.execute(mockCommandContext, new String[]{"-l", "20880"});
         assertEquals("No such port 20880", result);
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/PublishMetadataTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.config.ApplicationConfig;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/PwdTelnetTest.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
@@ -74,4 +74,4 @@ void testMessageError() throws RemotingException {
         String result = pwdTelnet.execute(mockCommandContext, new String[]{"test"});
         assertEquals("Unsupported parameter [test] for pwd.", result);
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/QuitTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.common.QosConstants;
 
 import org.junit.jupiter.api.Test;
@@ -32,4 +32,4 @@ void testExecute() throws Exception {
         String output = quit.execute(Mockito.mock(CommandContext.class), null);
         assertThat(output, equalTo(QosConstants.CLOSE));
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/ReadyTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.probe.ReadinessProbe;
 import org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe;
 import org.apache.dubbo.qos.probe.impl.ProviderReadinessProbe;
@@ -89,4 +89,4 @@ void testExecute() {
         Assertions.assertEquals("false", result);
         Assertions.assertEquals(commandContext.getHttpCode(), 503);
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/SelectTelnetTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.qos.legacy.service.DemoServiceImpl;
 import org.apache.dubbo.remoting.RemotingException;
@@ -144,4 +144,4 @@ private void registerProvider(String key, Object impl, Class<?> interfaceClass)
             null
         );
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/SerializeCheckStatusTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.SerializeSecurityManager;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import org.junit.jupiter.api.Assertions;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/SerializeWarnedClassesTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.SerializeSecurityManager;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import org.junit.jupiter.api.Assertions;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/ShutdownTelnetTest.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
-import org.apache.dubbo.qos.command.BaseCommand;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.BaseCommand;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
@@ -66,4 +66,4 @@ void testInvokeWithTimeParameter() throws RemotingException {
         assertTrue(result.contains("Application has shutdown successfully"), result);
         assertTrue((end - start) >= sleepTime, "sleepTime: " + sleepTime + ", execTime: " + (end - start));
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/StartupTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.qos.command.CommandContext;
+import org.apache.dubbo.qos.api.CommandContext;
 import org.apache.dubbo.qos.probe.StartupProbe;
 import org.apache.dubbo.qos.probe.impl.DeployerStartupProbe;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -80,4 +80,4 @@ void testExecute() {
         Assertions.assertEquals("false", result);
         Assertions.assertEquals(commandContext.getHttpCode(), 503);
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/protocol/QosProtocolWrapperTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.constants.CommonConstants;
-import org.apache.dubbo.qos.command.BaseCommand;
+import org.apache.dubbo.qos.api.BaseCommand;
 import org.apache.dubbo.qos.server.Server;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.permission.PermissionLevel;
-import org.apache.dubbo.qos.common.QosConfiguration;
+import org.apache.dubbo.qos.api.PermissionLevel;
+import org.apache.dubbo.qos.api.QosConfiguration;
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.dubbo.qos.server.handler;
 
-import org.apache.dubbo.qos.common.QosConfiguration;
-import org.apache.dubbo.qos.permission.PermissionLevel;
+import org.apache.dubbo.qos.api.QosConfiguration;
+import org.apache.dubbo.qos.api.PermissionLevel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import io.netty.channel.ChannelFuture;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.qos.server.handler;
 
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.qos.common.QosConfiguration;
+import org.apache.dubbo.qos.api.QosConfiguration;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import io.netty.buffer.ByteBuf;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.dubbo.qos.server.handler;
 
-import org.apache.dubbo.qos.common.QosConfiguration;
-import org.apache.dubbo.qos.permission.PermissionLevel;
+import org.apache.dubbo.qos.api.QosConfiguration;
+import org.apache.dubbo.qos.api.PermissionLevel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import io.netty.channel.ChannelFuture;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/governance/DefaultGovernanceRuleRepositoryImpl.java
Patch:
@@ -22,7 +22,7 @@
 
 public class DefaultGovernanceRuleRepositoryImpl implements GovernanceRuleRepository {
 
-    private ModuleModel moduleModel;
+    private final ModuleModel moduleModel;
 
     public DefaultGovernanceRuleRepositoryImpl(ModuleModel moduleModel) {
         this.moduleModel = moduleModel;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/AdaptiveLoadBalance.java
Patch:
@@ -44,7 +44,7 @@ public class AdaptiveLoadBalance extends AbstractLoadBalance {
     //default key
     private String attachmentKey = "mem,load";
 
-    private AdaptiveMetrics adaptiveMetrics;
+    private final AdaptiveMetrics adaptiveMetrics;
 
     public AdaptiveLoadBalance(ApplicationModel scopeModel){
         adaptiveMetrics = scopeModel.getBeanFactory().getBean(AdaptiveMetrics.class);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/RandomLoadBalance.java
Patch:
@@ -61,7 +61,7 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
 
         // Every invoker has the same weight?
         boolean sameWeight = true;
-        // the maxWeight of every invokers, the minWeight = 0 or the maxWeight of the last invoker
+        // the maxWeight of every invoker, the minWeight = 0 or the maxWeight of the last invoker
         int[] weights = new int[length];
         // The sum of weights
         int totalWeight = 0;
@@ -78,7 +78,7 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
         if (totalWeight > 0 && !sameWeight) {
             // If (not every invoker has the same weight & at least one invoker's weight>0), select randomly based on totalWeight.
             int offset = ThreadLocalRandom.current().nextInt(totalWeight);
-            // Return a invoker based on the random value.
+            // Return an invoker based on the random value.
             for (int i = 0; i < length; i++) {
                 if (offset < weights[i]) {
                     return invokers.get(i);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalance.java
Patch:
@@ -36,11 +36,11 @@ public class RoundRobinLoadBalance extends AbstractLoadBalance {
 
     private static final int RECYCLE_PERIOD = 60000;
 
-    private ConcurrentMap<String, ConcurrentMap<String, WeightedRoundRobin>> methodWeightMap = new ConcurrentHashMap<>();
+    private final ConcurrentMap<String, ConcurrentMap<String, WeightedRoundRobin>> methodWeightMap = new ConcurrentHashMap<>();
 
     protected static class WeightedRoundRobin {
         private int weight;
-        private AtomicLong current = new AtomicLong(0);
+        private final AtomicLong current = new AtomicLong(0);
         private long lastUpdate;
 
         public int getWeight() {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/ShortestResponseLoadBalance.java
Patch:
@@ -48,9 +48,9 @@ public class ShortestResponseLoadBalance extends AbstractLoadBalance implements
 
     private int slidePeriod = 30_000;
 
-    private ConcurrentMap<RpcStatus, SlideWindowData> methodMap = new ConcurrentHashMap<>();
+    private final ConcurrentMap<RpcStatus, SlideWindowData> methodMap = new ConcurrentHashMap<>();
 
-    private AtomicBoolean onResetSlideWindow = new AtomicBoolean(false);
+    private final AtomicBoolean onResetSlideWindow = new AtomicBoolean(false);
 
     private volatile long lastUpdateTime = System.currentTimeMillis();
 
@@ -67,7 +67,7 @@ protected static class SlideWindowData {
 
         private long succeededOffset;
         private long succeededElapsedOffset;
-        private RpcStatus rpcStatus;
+        private final RpcStatus rpcStatus;
 
         public SlideWindowData(RpcStatus rpcStatus) {
             this.rpcStatus = rpcStatus;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/AppStateRouterFactory.java
Patch:
@@ -29,8 +29,10 @@
 public class AppStateRouterFactory implements StateRouterFactory {
     public static final String NAME = "app";
 
+    @SuppressWarnings("rawtypes")
     private volatile StateRouter router;
 
+    @SuppressWarnings("unchecked")
     @Override
     public <T> StateRouter<T> getRouter(Class<T> interfaceClass, URL url) {
         if (router != null) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableStateRouter.java
Patch:
@@ -53,7 +53,7 @@ public abstract class ListenableStateRouter<T> extends AbstractStateRouter<T> im
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ListenableStateRouter.class);
     private volatile ConditionRouterRule routerRule;
     private volatile List<ConditionStateRouter<T>> conditionRouters = Collections.emptyList();
-    private String ruleKey;
+    private final String ruleKey;
 
     public ListenableStateRouter(URL url, String ruleKey) {
         super(url);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ProviderAppStateRouter.java
Patch:
@@ -36,7 +36,7 @@ public class ProviderAppStateRouter<T> extends ListenableStateRouter<T> {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ListenableStateRouter.class);
     public static final String NAME = "PROVIDER_APP_ROUTER";
     private String application;
-    private String currentApplication;
+    private final String currentApplication;
 
     public ProviderAppStateRouter(URL url) {
         super(url, url.getApplication());

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -70,7 +70,7 @@ public abstract class AbstractClusterInvoker<T> implements ClusterInvoker<T> {
 
     private volatile boolean enableConnectivityValidation = true;
 
-    private AtomicBoolean destroyed = new AtomicBoolean(false);
+    private final AtomicBoolean destroyed = new AtomicBoolean(false);
 
     private volatile Invoker<T> stickyInvoker = null;
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/AbstractConfigManager.java
Patch:
@@ -69,7 +69,7 @@ public abstract class AbstractConfigManager extends LifecycleAdapter {
     private static final String CONFIG_NAME_READ_METHOD = "getName";
 
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(AbstractConfigManager.class);
-    private static Set<Class<? extends AbstractConfig>> uniqueConfigTypes = new ConcurrentHashSet<>();
+    private static final Set<Class<? extends AbstractConfig>> uniqueConfigTypes = new ConcurrentHashSet<>();
 
     final Map<String, Map<String, AbstractConfig>> configsCache = new ConcurrentHashMap<>();
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigConfigurationAdapter.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ConfigConfigurationAdapter implements Configuration {
 
-    private Map<String, String> metaData;
+    private final Map<String, String> metaData;
 
     public ConfigConfigurationAdapter(AbstractConfig config, String prefix) {
         if (StringUtils.hasText(prefix)) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -298,9 +298,7 @@ private void checkConfigs() {
         // Log the current configurations.
         logger.info("The current configurations or effective configurations are as follows:");
         for (Class<? extends AbstractConfig> configType : multipleConfigTypes) {
-            getConfigs(configType).stream().forEach((config) -> {
-                logger.info(config.toString());
-            });
+            getConfigs(configType).forEach((config) -> logger.info(config.toString()));
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ModuleConfigManager.java
Patch:
@@ -58,7 +58,7 @@ public class ModuleConfigManager extends AbstractConfigManager implements Module
 
     public static final String NAME = "moduleConfig";
 
-    private Map<String, AbstractInterfaceConfig> serviceConfigCache = new ConcurrentHashMap<>();
+    private final Map<String, AbstractInterfaceConfig> serviceConfigCache = new ConcurrentHashMap<>();
     private final ConfigManager applicationConfigManager;
 
 

File: dubbo-common/src/main/java/org/apache/dubbo/metadata/definition/TypeDefinitionBuilder.java
Patch:
@@ -73,7 +73,7 @@ private static TypeBuilder getGenericTypeBuilder(Class<?> clazz) {
         return null;
     }
 
-    private Map<String, TypeDefinition> typeCache = new HashMap<>();
+    private final Map<String, TypeDefinition> typeCache = new HashMap<>();
 
     public TypeDefinition build(Type type, Class<?> clazz) {
         return build(type, clazz, typeCache);

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ServiceRepository.java
Patch:
@@ -28,16 +28,16 @@ public class ServiceRepository {
 
     public static final String NAME = "repository";
 
-    private AtomicBoolean inited = new AtomicBoolean(false);
-    private ApplicationModel applicationModel;
+    private final AtomicBoolean initialized = new AtomicBoolean(false);
+    private final ApplicationModel applicationModel;
 
     public ServiceRepository(ApplicationModel applicationModel) {
         this.applicationModel = applicationModel;
         initialize();
     }
 
     private void initialize() {
-        if (inited.compareAndSet(false, true)) {
+        if (initialized.compareAndSet(false, true)) {
             Set<BuiltinServiceDetector> builtinServices
                 = applicationModel.getExtensionLoader(BuiltinServiceDetector.class).getSupportedExtensionInstances();
             if (CollectionUtils.isNotEmpty(builtinServices)) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/invoker/DelegateProviderMetaDataInvoker.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class DelegateProviderMetaDataInvoker<T> implements Invoker {
     protected final Invoker<T> invoker;
-    private ServiceConfig<?> metadata;
+    private final ServiceConfig<?> metadata;
 
     public DelegateProviderMetaDataInvoker(Invoker<T> invoker, ServiceConfig<?> metadata) {
         this.invoker = invoker;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/config/ConfigurableSourceBeanMetadataElement.java
Patch:
@@ -33,7 +33,7 @@ public interface ConfigurableSourceBeanMetadataElement {
      */
     default void setSource(BeanMetadataElement beanMetadataElement) {
         if (beanMetadataElement instanceof BeanMetadataAttributeAccessor) {
-            BeanMetadataAttributeAccessor.class.cast(beanMetadataElement).setSource(this);
+            ((BeanMetadataAttributeAccessor) beanMetadataElement).setSource(this);
         }
     }
 }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboConfigApplicationListener.java
Patch:
@@ -42,7 +42,7 @@ public class DubboConfigApplicationListener implements ApplicationListener<Dubbo
 
     private ModuleModel moduleModel;
 
-    private AtomicBoolean initialized = new AtomicBoolean();
+    private final AtomicBoolean initialized = new AtomicBoolean();
 
     @Override
     public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboConfigBeanInitializer.java
Patch:
@@ -61,7 +61,7 @@ public class DubboConfigBeanInitializer implements BeanFactoryAware, Initializin
 
     private final Logger logger = LoggerFactory.getLogger(getClass());
 
-    private AtomicBoolean initialized = new AtomicBoolean(false);
+    private final AtomicBoolean initialized = new AtomicBoolean(false);
     private ConfigurableListableBeanFactory beanFactory;
     private ReferenceBeanManager referenceBeanManager;
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboSpringInitContext.java
Patch:
@@ -40,7 +40,7 @@ public class DubboSpringInitContext {
 
     private ModuleModel moduleModel;
 
-    private Map<String, Object> moduleAttributes = new HashMap<>();
+    private final Map<String, Object> moduleAttributes = new HashMap<>();
 
     private volatile boolean bound;
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboSpringInitCustomizerHolder.java
Patch:
@@ -34,8 +34,7 @@
  */
 public class DubboSpringInitCustomizerHolder {
 
-    private static final ThreadLocal<DubboSpringInitCustomizerHolder> holders = ThreadLocal.withInitial(() ->
-        new DubboSpringInitCustomizerHolder());
+    private static final ThreadLocal<DubboSpringInitCustomizerHolder> holders = ThreadLocal.withInitial(DubboSpringInitCustomizerHolder::new);
 
     public static DubboSpringInitCustomizerHolder get() {
         return holders.get();

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboSpringInitializer.java
Patch:
@@ -41,7 +41,7 @@ public class DubboSpringInitializer {
 
     private static final Logger logger = LoggerFactory.getLogger(DubboSpringInitializer.class);
 
-    private static Map<BeanDefinitionRegistry, DubboSpringInitContext> contextMap = new ConcurrentHashMap<>();
+    private static final Map<BeanDefinitionRegistry, DubboSpringInitContext> contextMap = new ConcurrentHashMap<>();
 
     private DubboSpringInitializer() {
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/event/DubboApplicationStateEvent.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class DubboApplicationStateEvent extends ApplicationEvent {
 
-    private DeployState state;
+    private final DeployState state;
 
     private Throwable cause;
 

File: dubbo-configcenter/dubbo-configcenter-nacos/src/main/java/org/apache/dubbo/configcenter/support/nacos/NacosConfigServiceWrapper.java
Patch:
@@ -31,7 +31,7 @@ public class NacosConfigServiceWrapper {
 
     private static final long DEFAULT_TIMEOUT = 3000L;
 
-    private ConfigService configService;
+    private final ConfigService configService;
 
     public NacosConfigServiceWrapper(ConfigService configService) {
         this.configService = configService;

File: dubbo-configcenter/dubbo-configcenter-nacos/src/main/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfiguration.java
Patch:
@@ -67,7 +67,7 @@ public class NacosDynamicConfiguration implements DynamicConfiguration {
      */
     private static final long DEFAULT_TIMEOUT = 5000L;
 
-    private Properties nacosProperties;
+    private final Properties nacosProperties;
 
     private static final String NACOS_RETRY_KEY = "nacos.retry";
 
@@ -85,7 +85,7 @@ public class NacosDynamicConfiguration implements DynamicConfiguration {
      */
     private final ConcurrentMap<String, NacosConfigListener> watchListenerMap;
 
-    private MD5Utils md5Utils = new MD5Utils();
+    private final MD5Utils md5Utils = new MD5Utils();
 
     NacosDynamicConfiguration(URL url) {
         this.nacosProperties = buildNacosProperties(url);

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/CacheListener.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class CacheListener {
 
-    private ConcurrentMap<String, ZookeeperDataListener> pathKeyListeners = new ConcurrentHashMap<>();
+    private final ConcurrentMap<String, ZookeeperDataListener> pathKeyListeners = new ConcurrentHashMap<>();
 
     public CacheListener() {
     }

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfiguration.java
Patch:
@@ -40,10 +40,10 @@
 
 public class ZookeeperDynamicConfiguration extends TreePathDynamicConfiguration {
 
-    private Executor executor;
+    private final Executor executor;
     private ZookeeperClient zkClient;
 
-    private CacheListener cacheListener;
+    private final CacheListener cacheListener;
     private static final int DEFAULT_ZK_EXECUTOR_THREADS_NUM = 1;
     private static final int DEFAULT_QUEUE = 10000;
     private static final Long THREAD_KEEP_ALIVE_TIME = 0L;

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/support/expiring/ExpiringMap.java
Patch:
@@ -41,7 +41,7 @@ public class ExpiringMap<K, V> implements Map<K, V> {
      */
     private static final int DEFAULT_EXPIRATION_INTERVAL = 1;
 
-    private static AtomicInteger expireCount = new AtomicInteger(1);
+    private static final AtomicInteger expireCount = new AtomicInteger(1);
 
     private final ConcurrentHashMap<K, ExpiryObject> delegateMap;
 
@@ -86,7 +86,7 @@ public V get(Object key) {
         if (object != null) {
             long timeIdle = System.currentTimeMillis() - object.getLastAccessTime();
             int timeToLive = expireThread.getTimeToLive();
-            if (timeToLive > 0 && timeIdle >= timeToLive * 1000) {
+            if (timeToLive > 0 && timeIdle >= timeToLive * 1000L) {
                 delegateMap.remove(object.getKey());
                 return null;
             }

File: dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/jvalidation/JValidator.java
Patch:
@@ -81,7 +81,7 @@ public class JValidator implements Validator {
 
     private final Class<?> clazz;
 
-    private final Map<String, Class> methodClassMap;
+    private final Map<String, Class<?>> methodClassMap;
 
     private final javax.validation.Validator validator;
 
@@ -298,10 +298,10 @@ public void validate(String methodName, Class<?>[] parameterTypes, Object[] argu
         }
     }
 
-    private Class methodClass(String methodName) {
+    private Class<?> methodClass(String methodName) {
         Class<?> methodClass = null;
         String methodClassName = clazz.getName() + "$" + toUpperMethoName(methodName);
-        Class cached = methodClassMap.get(methodClassName);
+        Class<?> cached = methodClassMap.get(methodClassName);
         if (cached != null) {
             return cached == clazz ? null : cached;
         }

File: dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/AccessKeyAuthenticator.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 public class AccessKeyAuthenticator implements Authenticator {
-    private ApplicationModel applicationModel;
+    private final ApplicationModel applicationModel;
 
     public AccessKeyAuthenticator(ApplicationModel applicationModel) {
         this.applicationModel = applicationModel;

File: dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/filter/ConsumerSignFilter.java
Patch:
@@ -35,7 +35,7 @@
  */
 @Activate(group = CommonConstants.CONSUMER, value = Constants.SERVICE_AUTH, order = -10000)
 public class ConsumerSignFilter implements Filter {
-    private ApplicationModel applicationModel;
+    private final ApplicationModel applicationModel;
 
     public ConsumerSignFilter(ApplicationModel applicationModel) {
         this.applicationModel = applicationModel;

File: dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/filter/ProviderAuthFilter.java
Patch:
@@ -31,7 +31,7 @@
 
 @Activate(group = CommonConstants.PROVIDER, value = Constants.SERVICE_AUTH, order = -10000)
 public class ProviderAuthFilter implements Filter {
-    private ApplicationModel applicationModel;
+    private final ApplicationModel applicationModel;
 
     public ProviderAuthFilter(ApplicationModel applicationModel) {
         this.applicationModel = applicationModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/BaseOffline.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.List;
 
 public class BaseOffline implements BaseCommand {
-    private Logger logger = LoggerFactory.getLogger(BaseOffline.class);
+    private static final Logger logger = LoggerFactory.getLogger(BaseOffline.class);
     public FrameworkServiceRepository serviceRepository;
 
     public BaseOffline(FrameworkModel frameworkModel) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/ChangeTelnet.java
Patch:
@@ -34,7 +34,7 @@ public class ChangeTelnet implements BaseCommand {
 
     public static final AttributeKey<String> SERVICE_KEY = AttributeKey.valueOf("telnet.service");
 
-    private DubboProtocol dubboProtocol;
+    private final DubboProtocol dubboProtocol;
 
     public ChangeTelnet(FrameworkModel frameworkModel) {
         this.dubboProtocol = DubboProtocol.getDubboProtocol(frameworkModel);

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/CountTelnet.java
Patch:
@@ -45,7 +45,7 @@
     "count [service] [method] [times]"
 })
 public class CountTelnet implements BaseCommand {
-    private DubboProtocol dubboProtocol;
+    private final DubboProtocol dubboProtocol;
 
     public CountTelnet(FrameworkModel frameworkModel) {
         this.dubboProtocol = DubboProtocol.getDubboProtocol(frameworkModel);

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/GetRouterSnapshot.java
Patch:
@@ -33,7 +33,7 @@
 
 @Cmd(name = "getRouterSnapshot", summary = "Get State Router Snapshot.", example = "getRouterSnapshot xx.xx.xxx.service")
 public class GetRouterSnapshot implements BaseCommand {
-    private FrameworkModel frameworkModel;
+    private final FrameworkModel frameworkModel;
 
     public GetRouterSnapshot(FrameworkModel frameworkModel) {
         this.frameworkModel = frameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Help.java
Patch:
@@ -36,11 +36,11 @@
 })
 public class Help implements BaseCommand {
 
-    private CommandHelper commandHelper;
+    private final CommandHelper commandHelper;
 
     private static final String MAIN_HELP = "mainHelp";
 
-    private static Map<String, String> processedTable = new WeakHashMap<>();
+    private static final Map<String, String> processedTable = new WeakHashMap<>();
 
     public Help(FrameworkModel frameworkModel) {
         this.commandHelper = new CommandHelper(frameworkModel);
@@ -49,7 +49,7 @@ public Help(FrameworkModel frameworkModel) {
     @Override
     public String execute(CommandContext commandContext, String[] args) {
         if (ArrayUtils.isNotEmpty(args)) {
-            return processedTable.computeIfAbsent(args[0], commandName -> commandHelp(commandName));
+            return processedTable.computeIfAbsent(args[0], this::commandHelp);
         } else {
             return processedTable.computeIfAbsent(MAIN_HELP, commandName -> mainHelp());
         }

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/InvokeTelnet.java
Patch:
@@ -50,7 +50,7 @@ public class InvokeTelnet implements BaseCommand {
     public static final AttributeKey<List<Method>> INVOKE_METHOD_LIST_KEY = AttributeKey.valueOf("telnet.invoke.method.list");
     public static final AttributeKey<ProviderModel> INVOKE_METHOD_PROVIDER_KEY = AttributeKey.valueOf("telnet.invoke.method.provider");
 
-    private FrameworkModel frameworkModel;
+    private final FrameworkModel frameworkModel;
 
     public InvokeTelnet(FrameworkModel frameworkModel) {
         this.frameworkModel = frameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Ls.java
Patch:
@@ -31,7 +31,7 @@
         "ls"
 })
 public class Ls implements BaseCommand {
-    private FrameworkModel frameworkModel;
+    private final FrameworkModel frameworkModel;
 
     public Ls(FrameworkModel frameworkModel) {
         this.frameworkModel = frameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/PortTelnet.java
Patch:
@@ -32,7 +32,7 @@
     "ps -l [port]", "ps", "ps -l", "ps -l 20880"
 })
 public class PortTelnet implements BaseCommand {
-    private DubboProtocol dubboProtocol;
+    private final DubboProtocol dubboProtocol;
 
     public PortTelnet(FrameworkModel frameworkModel) {
         this.dubboProtocol = DubboProtocol.getDubboProtocol(frameworkModel);

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/ShutdownTelnet.java
Patch:
@@ -31,7 +31,7 @@
 })
 public class ShutdownTelnet implements BaseCommand {
 
-    private FrameworkModel frameworkModel;
+    private final FrameworkModel frameworkModel;
 
     public ShutdownTelnet(FrameworkModel frameworkModel) {
         this.frameworkModel = frameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Startup.java
Patch:
@@ -33,7 +33,7 @@
 @Cmd(name = "startup", summary = "Judge if service has started? ", requiredPermissionLevel = PermissionLevel.PUBLIC)
 public class Startup implements BaseCommand {
 
-    private FrameworkModel frameworkModel;
+    private final FrameworkModel frameworkModel;
 
     public Startup(FrameworkModel frameworkModel) {
         this.frameworkModel = frameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/util/CommandHelper.java
Patch:
@@ -25,7 +25,7 @@
 
 public class CommandHelper {
 
-    private FrameworkModel frameworkModel;
+    private final FrameworkModel frameworkModel;
 
     public CommandHelper(FrameworkModel frameworkModel) {
         this.frameworkModel = frameworkModel;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/probe/impl/ProviderReadinessProbe.java
Patch:
@@ -26,8 +26,8 @@
 
 @Activate
 public class ProviderReadinessProbe implements ReadinessProbe {
-    private FrameworkModel frameworkModel;
-    private FrameworkServiceRepository serviceRepository;
+    private final FrameworkModel frameworkModel;
+    private final FrameworkServiceRepository serviceRepository;
 
     public ProviderReadinessProbe(FrameworkModel frameworkModel) {
         if (frameworkModel != null) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/protocol/QosProtocolWrapper.java
Patch:
@@ -50,9 +50,9 @@ public class QosProtocolWrapper implements Protocol, ScopeModelAware {
 
     private final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(QosProtocolWrapper.class);
 
-    private AtomicBoolean hasStarted = new AtomicBoolean(false);
+    private final AtomicBoolean hasStarted = new AtomicBoolean(false);
 
-    private Protocol protocol;
+    private final Protocol protocol;
 
     private FrameworkModel frameworkModel;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandler.java
Patch:
@@ -38,7 +38,7 @@ public class ForeignHostPermitHandler extends ChannelHandlerAdapter {
     // the whitelist of foreign IP when acceptForeignIp = false, the delimiter is colon(,)
     // support specific ip and an ip range from CIDR specification
     private final String acceptForeignIpWhitelist;
-    private Predicate<String> whitelistPredicate;
+    private final Predicate<String> whitelistPredicate;
 
     private final QosConfiguration qosConfiguration;
 

File: dubbo-plugin/dubbo-spring-security/src/main/java/org/apache/dubbo/spring/security/jackson/ObjectMapperCodec.java
Patch:
@@ -30,7 +30,7 @@
 
 public class ObjectMapperCodec {
 
-    private ObjectMapper mapper = new ObjectMapper();
+    private final ObjectMapper mapper = new ObjectMapper();
 
     public ObjectMapperCodec() {
         registerDefaultModule();

File: dubbo-metrics/dubbo-metrics-metadata/src/main/java/org/apache/dubbo/metrics/metadata/collector/stat/MetadataStatComposite.java
Patch:
@@ -113,7 +113,7 @@ public List<GaugeMetricSample> exportRtMetrics() {
         for (LongContainer<? extends Number> rtContainer : rtStats) {
             MetricsKeyWrapper metricsKeyWrapper = rtContainer.getMetricsKeyWrapper();
             for (Map.Entry<String, ? extends Number> entry : rtContainer.entrySet()) {
-                list.add(new GaugeMetricSample<>(metricsKeyWrapper.targetKey(), metricsKeyWrapper.targetDesc(), ApplicationMetric.getTagsByName(entry.getKey()), MetricsCategory.RT, entry, value -> rtContainer.getValueSupplier().apply(value.getKey())));
+                list.add(new GaugeMetricSample<>(metricsKeyWrapper.targetKey(), metricsKeyWrapper.targetDesc(), ApplicationMetric.getTagsByName(entry.getKey()), MetricsCategory.RT, entry.getKey().intern(), value -> rtContainer.getValueSupplier().apply(value.intern())));
             }
         }
         return list;

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/collector/stat/RegistryStatComposite.java
Patch:
@@ -130,7 +130,7 @@ public List<GaugeMetricSample> exportRtMetrics() {
         for (LongContainer<? extends Number> rtContainer : rtStats) {
             MetricsKeyWrapper metricsKeyWrapper = rtContainer.getMetricsKeyWrapper();
             for (Map.Entry<String, ? extends Number> entry : rtContainer.entrySet()) {
-                list.add(new GaugeMetricSample<>(metricsKeyWrapper.targetKey(), metricsKeyWrapper.targetDesc(), ApplicationMetric.getTagsByName(entry.getKey()), MetricsCategory.RT, entry, value -> rtContainer.getValueSupplier().apply(value.getKey())));
+                list.add(new GaugeMetricSample<>(metricsKeyWrapper.targetKey(), metricsKeyWrapper.targetDesc(), ApplicationMetric.getTagsByName(entry.getKey()), MetricsCategory.RT, entry.getKey().intern(), value -> rtContainer.getValueSupplier().apply(value.intern())));
             }
         }
         return list;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -39,7 +39,6 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
-import static org.apache.dubbo.common.constants.CommonConstants.CHECK_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
@@ -192,8 +191,6 @@ public void doSubscribe(URL url, NotifyListener listener) {
 
         serviceDiscovery.subscribe(url, listener);
 
-        boolean check = url.getParameter(CHECK_KEY, false);
-
         Set<String> mappingByUrl = ServiceNameMapping.getMappingByUrl(url);
 
         String key = ServiceNameMapping.buildMappingKey(url);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -373,6 +373,7 @@ private void initMetricsReporter() {
                 MetricsReporterFactory metricsReporterFactory = getExtensionLoader(MetricsReporterFactory.class).getAdaptiveExtension();
                 MetricsReporter metricsReporter = metricsReporterFactory.createMetricsReporter(metricsConfig.toUrl());
                 metricsReporter.init();
+                applicationModel.getBeanFactory().registerBean(metricsReporter);
             }
         }
     }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
Patch:
@@ -483,7 +483,6 @@ void testCreateInvokerForLocalRefer() {
         Assertions.assertTrue(referenceConfig.getInvoker() instanceof MockClusterInvoker);
         Invoker<?> withCount = ((MockClusterInvoker<?>) referenceConfig.getInvoker()).getDirectory().getAllInvokers().get(0);
         Assertions.assertTrue(withCount instanceof ReferenceCountInvokerWrapper);
-        Assertions.assertTrue(((ReferenceCountInvokerWrapper<?>) withCount).getInvoker() instanceof ListenerInvokerWrapper);
         Invoker<?> withFilter = ((ReferenceCountInvokerWrapper<?>) withCount).getInvoker();
         Assertions.assertTrue(withFilter instanceof ListenerInvokerWrapper
             || withFilter instanceof FilterChainBuilder.CallbackRegistrationInvoker);

File: dubbo-common/src/main/java/org/apache/dubbo/common/URLStrParser.java
Patch:
@@ -278,7 +278,7 @@ private static boolean addParam(String str, boolean isEncoded, int nameStart, in
             String name = decodeComponent(str, nameStart, valueStart - 3, false, tempBuf);
             String value;
             if (valueStart >= valueEnd) {
-                value = name;
+                value = "";
             } else {
                 value = decodeComponent(str, valueStart, valueEnd, false, tempBuf);
             }
@@ -291,7 +291,7 @@ private static boolean addParam(String str, boolean isEncoded, int nameStart, in
             String name = str.substring(nameStart, valueStart - 1);
             String value;
             if (valueStart >= valueEnd) {
-                value = name;
+                value = "";
             } else {
                 value = str.substring(valueStart, valueEnd);
             }

File: dubbo-common/src/test/java/org/apache/dubbo/common/URLStrParserTest.java
Patch:
@@ -44,6 +44,7 @@ class URLStrParserTest {
         testCases.add("file:/path/to/file.txt");
         testCases.add("dubbo://fe80:0:0:0:894:aeec:f37d:23e1%en0/path?abc=abc");
         testCases.add("dubbo://[fe80:0:0:0:894:aeec:f37d:23e1]:20880/path?abc=abc");
+        testCases.add("nacos://192.168.1.1:8848?username=&password=");
 
         errorDecodedCases.add("dubbo:192.168.1.1");
         errorDecodedCases.add("://192.168.1.1");
@@ -80,4 +81,4 @@ void testDecoded() {
         });
     }
 
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
Patch:
@@ -483,7 +483,9 @@ void testCreateInvokerForLocalRefer() {
         Assertions.assertTrue(referenceConfig.getInvoker() instanceof MockClusterInvoker);
         Invoker<?> withCount = ((MockClusterInvoker<?>) referenceConfig.getInvoker()).getDirectory().getAllInvokers().get(0);
         Assertions.assertTrue(withCount instanceof ReferenceCountInvokerWrapper);
-        Assertions.assertTrue(((ReferenceCountInvokerWrapper<?>) withCount).getInvoker() instanceof ListenerInvokerWrapper
+        Assertions.assertTrue(((ReferenceCountInvokerWrapper<?>) withCount).getInvoker() instanceof ListenerInvokerWrapper);
+        Invoker<?> withFilter = ((ReferenceCountInvokerWrapper<?>) withCount).getInvoker();
+        Assertions.assertTrue(withFilter instanceof ListenerInvokerWrapper
             || withFilter instanceof FilterChainBuilder.CallbackRegistrationInvoker);
         if (withFilter instanceof ListenerInvokerWrapper) {
             Assertions.assertTrue(((ListenerInvokerWrapper<?>)(((ReferenceCountInvokerWrapper<?>) withCount).getInvoker())).getInvoker() instanceof InjvmInvoker);

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/manager/DefaultExecutorRepository.java
Patch:
@@ -108,7 +108,6 @@ public synchronized ExecutorService createExecutorIfAbsent(URL url) {
             executor = createExecutor(url);
             executors.put(executorCacheKey, executor);
         }
-
         dataStore.put(executorKey, executorCacheKey, executor);
         return executor;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/Constants.java
Patch:
@@ -149,5 +149,5 @@ public interface Constants {
 
     String SERVER_THREAD_POOL_NAME = "DubboServerHandler";
 
-
+    String CLIENT_THREAD_POOL_NAME = "DubboClientHandler";
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/BitList.java
Patch:
@@ -52,7 +52,7 @@
  * @param <E>
  * @since 3.0
  */
-public class BitList<E> extends AbstractList<E> {
+public class BitList<E> extends AbstractList<E> implements Cloneable {
     private final BitSet rootSet;
     private volatile List<E> originList;
     private final static BitList emptyList = new BitList(Collections.emptyList());

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -137,7 +137,7 @@ public static ProxyHolder referProxy(ServiceInstance instance) {
         ModuleModel internalModel = applicationModel.getInternalModule();
         ConsumerModel consumerModel = applicationModel.getInternalModule().registerInternalConsumer(MetadataService.class, url);
 
-        Protocol protocol = applicationModel.getExtensionLoader(Protocol.class).getAdaptiveExtension();
+        Protocol protocol = applicationModel.getExtensionLoader(Protocol.class).getExtension(url.getProtocol(), false);
 
         url = url.setServiceModel(consumerModel);
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/observation/DefaultDubboClientObservationConvention.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.filter.observation;
+package org.apache.dubbo.metrics.observation;
 
 import java.util.List;
 
@@ -24,8 +24,8 @@
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcContextAttachment;
 
-import static org.apache.dubbo.metrics.filter.observation.DubboObservation.LowCardinalityKeyNames.NET_PEER_NAME;
-import static org.apache.dubbo.metrics.filter.observation.DubboObservation.LowCardinalityKeyNames.NET_PEER_PORT;
+import static org.apache.dubbo.metrics.observation.DubboObservation.LowCardinalityKeyNames.NET_PEER_NAME;
+import static org.apache.dubbo.metrics.observation.DubboObservation.LowCardinalityKeyNames.NET_PEER_PORT;
 
 /**
  * Default implementation of the {@link DubboClientObservationConvention}.

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/observation/DefaultDubboServerObservationConvention.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.filter.observation;
+package org.apache.dubbo.metrics.observation;
 
 import io.micrometer.common.KeyValues;
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/observation/DubboClientContext.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.filter.observation;
+package org.apache.dubbo.metrics.observation;
 
 import java.util.Objects;
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/observation/DubboClientObservationConvention.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.filter.observation;
+package org.apache.dubbo.metrics.observation;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationConvention;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/observation/DubboObservation.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.filter.observation;
+package org.apache.dubbo.metrics.observation;
 
 import io.micrometer.common.docs.KeyName;
 import io.micrometer.observation.Observation;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/observation/DubboServerContext.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.filter.observation;
+package org.apache.dubbo.metrics.observation;
 
 import io.micrometer.observation.transport.ReceiverContext;
 import org.apache.dubbo.rpc.Invocation;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/observation/DubboServerObservationConvention.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metrics.filter.observation;
+package org.apache.dubbo.metrics.observation;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationConvention;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/AbstractServiceDiscovery.java
Patch:
@@ -363,19 +363,19 @@ protected void reportMetadata(MetadataInfo metadataInfo) {
         }
         TimePair timePair = TimePair.start();
         GlobalMetricsEventMulticaster eventMulticaster = applicationModel.getBeanFactory().getBean(GlobalMetricsEventMulticaster.class);
-        eventMulticaster.publishEvent(new MetadataEvent.PushEvent(applicationModel, timePair));
         if (metadataReport != null) {
             SubscriberMetadataIdentifier identifier = new SubscriberMetadataIdentifier(serviceName, metadataInfo.getRevision());
             if ((DEFAULT_METADATA_STORAGE_TYPE.equals(metadataType) && metadataReport.shouldReportMetadata()) || REMOTE_METADATA_STORAGE_TYPE.equals(metadataType)) {
                 try {
+                    eventMulticaster.publishEvent(new MetadataEvent.PushEvent(applicationModel, timePair));
                     metadataReport.publishAppMetadata(identifier, metadataInfo);
+                    eventMulticaster.publishFinishEvent(new MetadataEvent.PushEvent(applicationModel, timePair));
                 } catch (IllegalStateException e) {
                     eventMulticaster.publishErrorEvent(new MetadataEvent.PushEvent(applicationModel, timePair));
                     throw e;
                 }
             }
         }
-        eventMulticaster.publishFinishEvent(new MetadataEvent.PushEvent(applicationModel, timePair));
         MetadataInfo clonedMetadataInfo = metadataInfo.clone();
         metadataInfos.put(metadataInfo.getRevision(), new MetadataInfoStat(clonedMetadataInfo));
     }

File: dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/collector/RegistryMetricsCollector.java
Patch:
@@ -89,10 +89,10 @@ public void addRT(String applicationName, String registryOpType, Long responseTi
 
     @Override
     public List<MetricSample> collect() {
+        List<MetricSample> list = new ArrayList<>();
         if (!isCollectEnabled()) {
-            new ArrayList<>();
+           return list;
         }
-        List<MetricSample> list = new ArrayList<>();
         list.addAll(stats.exportNumMetrics());
         list.addAll(stats.exportRtMetrics());
         list.addAll(stats.exportSkMetrics());

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/MetricsCountSampler.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Optional;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.atomic.AtomicLong;
+import java.util.function.ToDoubleFunction;
 
 public interface MetricsCountSampler<S, K, M extends Metric> extends MetricsSampler {
 
@@ -44,9 +45,9 @@ public interface MetricsCountSampler<S, K, M extends Metric> extends MetricsSamp
 
     <R extends MetricSample> List<R> collectRT(MetricSampleFactory<M, R> factory);
 
-    <R extends MetricSample> List<R> collectRT(MetricSampleFactory<M, R> factory,K metricName);
+    <R extends MetricSample> List<R> collectRT(MetricSampleFactory<M, R> factory, K metricName);
 
     interface MetricSampleFactory<M, R extends MetricSample> {
-        R newInstance(MetricsKey key, M metric, Long count);
+        <T> R newInstance(MetricsKey key, M metric, T value, ToDoubleFunction<T> apply);
     }
 }

File: dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/aggregate/TimeWindowCounterTest.java
Patch:
@@ -24,7 +24,7 @@ class TimeWindowCounterTest {
 
     @Test
     void test() throws Exception {
-        TimeWindowCounter counter = new TimeWindowCounter(12, 1);
+        TimeWindowCounter counter = new TimeWindowCounter(10, 1);
         counter.increment();
         Assertions.assertEquals(counter.get(), 1);
         counter.decrement();
@@ -34,4 +34,4 @@ void test() throws Exception {
         Assertions.assertEquals(counter.get(), 0);
         Assertions.assertTrue(counter.bucketLivedSeconds() < 1);
     }
-}
\ No newline at end of file
+}

File: dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/aggregate/TimeWindowQuantileTest.java
Patch:
@@ -24,7 +24,7 @@ class TimeWindowQuantileTest {
 
     @Test
     void test() throws Exception {
-        TimeWindowQuantile quantile = new TimeWindowQuantile(100, 12, 1);
+        TimeWindowQuantile quantile = new TimeWindowQuantile(100, 10, 1);
         for (int i = 1; i <= 100; i++) {
             quantile.add(i);
         }
@@ -34,4 +34,4 @@ void test() throws Exception {
         Thread.sleep(1000);
         Assertions.assertEquals(quantile.quantile(0.99), Double.NaN);
     }
-}
\ No newline at end of file
+}

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dubbo.metrics.collector.sample;
 
 import org.apache.dubbo.metrics.model.Metric;
-
 import java.util.function.Consumer;
 import java.util.function.Function;
 

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/sample/MetricsSampler.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dubbo.metrics.collector.sample;
 
 import org.apache.dubbo.metrics.model.sample.MetricSample;
-
 import java.util.List;
 
 public interface MetricsSampler {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/ConfiguratorTest.java
Patch:
@@ -34,7 +34,7 @@
 class ConfiguratorTest {
 
     @Test
-    void test() throws Exception {
+    void test() {
 
         Optional<List<Configurator>> emptyOptional = Configurator.toConfigurators(Collections.emptyList());
         Assertions.assertEquals(Optional.empty(), emptyOptional);

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/filter/DefaultFilterChainBuilderTest.java
Patch:
@@ -78,7 +78,7 @@ void testBuildInvokerChainForRemoteReference() {
         urlWithoutFilter = urlWithoutFilter.setScopeModel(ApplicationModel.defaultModel());
         AbstractInvoker<DemoService> invokerWithoutFilter = new AbstractInvoker<DemoService>(DemoService.class, urlWithoutFilter) {
             @Override
-            protected Result doInvoke(Invocation invocation) throws Throwable {
+            protected Result doInvoke(Invocation invocation) {
                 return null;
             }
         };

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance;
 import org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
@@ -259,7 +260,7 @@ void testSelect_Invokersize2AndselectNotNull() {
     }
 
     @Test
-    void testSelect_multiInvokers() throws Exception {
+    void testSelect_multiInvokers() {
         testSelect_multiInvokers(RoundRobinLoadBalance.NAME);
         testSelect_multiInvokers(LeastActiveLoadBalance.NAME);
         testSelect_multiInvokers(RandomLoadBalance.NAME);

File: dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/JValidatorTest.java
Patch:
@@ -30,7 +30,7 @@
 
 class JValidatorTest {
     @Test
-    void testItWithNonExistMethod() throws Exception {
+    void testItWithNonExistMethod() {
         Assertions.assertThrows(NoSuchMethodException.class, () -> {
             URL url = URL.valueOf("test://test:11/org.apache.dubbo.validation.support.jvalidation.mock.JValidatorTestTarget");
             JValidator jValidator = new JValidator(url);
@@ -46,7 +46,7 @@ void testItWithExistMethod() throws Exception {
     }
 
     @Test
-    void testItWhenItViolatedConstraint() throws Exception {
+    void testItWhenItViolatedConstraint() {
         Assertions.assertThrows(ValidationException.class, () -> {
             URL url = URL.valueOf("test://test:11/org.apache.dubbo.validation.support.jvalidation.mock.JValidatorTestTarget");
             JValidator jValidator = new JValidator(url);

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/CommandContextTest.java
Patch:
@@ -30,7 +30,7 @@
 
 class CommandContextTest {
     @Test
-    void test() throws Exception {
+    void test() {
         CommandContext context = new CommandContext("test", new String[]{"hello"}, true);
         Object request = new Object();
         context.setOriginRequest(request);

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/CommandHelperTest.java
Patch:
@@ -72,13 +72,13 @@ class CommandHelperTest {
     private CommandHelper commandHelper = new CommandHelper(FrameworkModel.defaultModel());
 
     @Test
-    void testHasCommand() throws Exception {
+    void testHasCommand() {
         assertTrue(commandHelper.hasCommand("greeting"));
         assertFalse(commandHelper.hasCommand("not-exiting"));
     }
 
     @Test
-    void testGetAllCommandClass() throws Exception {
+    void testGetAllCommandClass() {
         List<Class<?>> classes = commandHelper.getAllCommandClass();
 
         // update this list when introduce a new command
@@ -125,7 +125,7 @@ void testGetAllCommandClass() throws Exception {
     }
 
     @Test
-    void testGetCommandClass() throws Exception {
+    void testGetCommandClass() {
         assertThat(commandHelper.getCommandClass("greeting"), equalTo(GreetingCommand.class));
         assertNull(commandHelper.getCommandClass("not-exiting"));
     }

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/service/generic/GenericServiceTest.java
Patch:
@@ -216,7 +216,7 @@ void testGenericSerializationJava() throws Exception {
     }
 
     @Test
-    void testGenericInvokeWithBeanSerialization() throws Exception {
+    void testGenericInvokeWithBeanSerialization() {
         ServiceConfig<DemoService> service = new ServiceConfig<DemoService>();
         service.setInterface(DemoService.class);
         DemoServiceImpl impl = new DemoServiceImpl();
@@ -256,7 +256,7 @@ void testGenericInvokeWithBeanSerialization() throws Exception {
     }
 
     @Test
-    void testGenericImplementationWithBeanSerialization() throws Exception {
+    void testGenericImplementationWithBeanSerialization() {
         final AtomicReference reference = new AtomicReference();
 
         ServiceConfig<GenericService> service = new ServiceConfig<GenericService>();

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/ZKTools.java
Patch:
@@ -260,7 +260,7 @@ public static void testTreeCache() throws Exception {
         treeCache.start();
         treeCache.getListenable().addListener(new TreeCacheListener() {
             @Override
-            public void childEvent(CuratorFramework client, TreeCacheEvent event) throws Exception {
+            public void childEvent(CuratorFramework client, TreeCacheEvent event) {
 
                 TreeCacheEvent.Type type = event.getType();
                 ChildData data = event.getData();

File: dubbo-remoting/dubbo-remoting-zookeeper-curator5/src/test/java/org/apache/dubbo/remoting/zookeeper/curator5/Curator5ZookeeperTransporterTest.java
Patch:
@@ -38,7 +38,7 @@ public static void beforeAll() {
     }
 
     @BeforeEach
-    public void setUp() throws Exception {
+    public void setUp() {
         zookeeperClient = new Curator5ZookeeperTransporter().connect(URL.valueOf(zookeeperConnectionAddress1 + "/service"));
         curatorZookeeperTransporter = new Curator5ZookeeperTransporter();
     }

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/TimeoutFilterTest.java
Patch:
@@ -36,7 +36,7 @@ class TimeoutFilterTest {
     private TimeoutFilter timeoutFilter = new TimeoutFilter();
 
     @Test
-    void testInvokeWithoutTimeout() throws Exception {
+    void testInvokeWithoutTimeout() {
         int timeout = 3000;
 
         Invoker invoker = Mockito.mock(Invoker.class);
@@ -51,7 +51,7 @@ void testInvokeWithoutTimeout() throws Exception {
     }
 
     @Test
-    void testInvokeWithTimeout() throws Exception {
+    void testInvokeWithTimeout() {
         int timeout = 100;
 
         URL url = URL.valueOf("test://test:11/test?accesslog=true&group=dubbo&version=1.1&timeout=" + timeout);

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.rpc.model.ModuleModel;
 
+import java.beans.Transient;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -371,6 +372,7 @@ public void setExecutor(Executor executor) {
     }
 
     @Parameter(key = SERVICE_EXECUTOR)
+    @Transient
     public Executor getExecutor() {
         return executor;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.dubbo.rpc.service.GenericService;
 import org.apache.dubbo.rpc.support.ProtocolUtils;
 
+import java.beans.Transient;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -294,6 +295,7 @@ public void setUnloadClusterRelated(Boolean unloadClusterRelated) {
         this.unloadClusterRelated = unloadClusterRelated;
     }
 
+    @Transient
     public ServiceMetadata getServiceMetadata() {
         return serviceMetadata;
     }
@@ -365,6 +367,7 @@ public Boolean shouldReferAsync() {
         return shouldReferAsync;
     }
 
+    @Transient
     public abstract T get();
 
     public void destroy() {

File: dubbo-common/src/main/java/org/apache/dubbo/config/nested/AggregationConfig.java
Patch:
@@ -16,7 +16,9 @@
  */
 package org.apache.dubbo.config.nested;
 
-public class AggregationConfig {
+import java.io.Serializable;
+
+public class AggregationConfig implements Serializable {
 
     /**
      * Enable local aggregation or not

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -50,6 +50,7 @@
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
 import org.apache.dubbo.rpc.service.GenericService;
 
+import java.beans.Transient;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -927,6 +928,7 @@ private static void putRandomPort(String protocol, Integer port) {
         }
     }
 
+    @Transient
     public Runnable getDestroyRunner() {
         return this::unexport;
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/AbstractServerCallListener.java
Patch:
@@ -85,8 +85,8 @@ public void invoke() {
                 }
                 onReturn(r.getValue());
             });
-        } catch (Throwable t) {
-            responseObserver.onError(t);
+        } catch (Exception e) {
+            responseObserver.onError(e);
         } finally {
             RpcContext.removeCancellationContext();
             RpcContext.removeContext();

File: dubbo-native/src/main/java/org/apache/dubbo/aot/generate/ClassSourceFinder.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.utils;
+package org.apache.dubbo.aot.generate;
 
 
 import java.io.File;
@@ -26,7 +26,7 @@
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 
-public class ClassFinder {
+public class ClassSourceFinder {
 
     public Set<String> findClassSet(String packageName) {
         packageName = packageName.replace(".", "/");
@@ -42,7 +42,7 @@ public Set<String> findClassSet(String packageName) {
                         findClassesByFile(packageName, resource.getPath(), result);
                     } else if ("jar".equals(protocol)) {
                         JarFile jar = ((JarURLConnection) resource.openConnection()).getJarFile();
-                        System.out.println("findClassSet jar:"+jar.getName());
+                        System.out.println("findClassSet jar:" + jar.getName());
                         findClassesByJar(packageName, jar, result);
                     }
                 }

File: dubbo-test/dubbo-test-modules/src/test/java/org/apache/dubbo/dependency/FileTest.java
Patch:
@@ -57,6 +57,7 @@ class FileTest {
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-metadata-processor"));
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-native.*"));
         ignoredModulesInDubboAll.add(Pattern.compile("dubbo-spring-boot.*"));
+        ignoredModulesInDubboAll.add(Pattern.compile("dubbo-maven-plugin"));
     }
 
     @Test

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/observation/ObservationReceiverFilter.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationRegistry;
+
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.metrics.filter.observation.DefaultDubboServerObservationConvention;
 import org.apache.dubbo.metrics.filter.observation.DubboObservation;
@@ -37,7 +38,7 @@
 /**
  * A {@link Filter} that creates an {@link Observation} around the incoming message.
  */
-@Activate(group = PROVIDER, order = -1,onClass = "io.micrometer.observation.NoopObservationRegistry")
+@Activate(group = PROVIDER, order = -1, onClass = "io.micrometer.observation.NoopObservationRegistry")
 public class ObservationReceiverFilter implements Filter, BaseFilter.Listener, ScopeModelAware {
 
     private final ObservationRegistry observationRegistry;

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/observation/ObservationSenderFilter.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationRegistry;
+
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.metrics.filter.observation.DefaultDubboClientObservationConvention;
 import org.apache.dubbo.metrics.filter.observation.DubboClientContext;
@@ -38,7 +39,7 @@
 /**
  * A {@link Filter} that creates an {@link Observation} around the outgoing message.
  */
-@Activate(group = CONSUMER, order = -1,onClass = "io.micrometer.observation.NoopObservationRegistry")
+@Activate(group = CONSUMER, order = -1, onClass = "io.micrometer.observation.NoopObservationRegistry")
 public class ObservationSenderFilter implements ClusterFilter, BaseFilter.Listener, ScopeModelAware {
 
     private final ObservationRegistry observationRegistry;

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/filter/MethodMetricsInterceptor.java
Patch:
@@ -29,7 +29,7 @@
 
 public class MethodMetricsInterceptor {
 
-    private MethodMetricsSampler sampler;
+    private final MethodMetricsSampler sampler;
 
     public MethodMetricsInterceptor(MethodMetricsSampler sampler) {
         this.sampler = sampler;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/DefaultMigrationAddressComparatorTest.java
Patch:
@@ -35,6 +35,7 @@
 
 class DefaultMigrationAddressComparatorTest {
 
+    @SuppressWarnings("all")
     @Test
     void test() {
         DefaultMigrationAddressComparator comparator = new DefaultMigrationAddressComparator();
@@ -69,13 +70,13 @@ void test() {
 
         Mockito.when(oldInvoker.hasProxyInvokers()).thenReturn(true);
 
-        List<Invoker> newInvokerList = new LinkedList<>();
+        List<Invoker<?>> newInvokerList = new LinkedList<>();
         newInvokerList.add(Mockito.mock(Invoker.class));
         newInvokerList.add(Mockito.mock(Invoker.class));
         newInvokerList.add(Mockito.mock(Invoker.class));
         Mockito.when(newDirectory.getAllInvokers()).thenReturn(newInvokerList);
 
-        List<Invoker> oldInvokerList = new LinkedList<>();
+        List<Invoker<?>> oldInvokerList = new LinkedList<>();
         oldInvokerList.add(Mockito.mock(Invoker.class));
         oldInvokerList.add(Mockito.mock(Invoker.class));
         Mockito.when(oldDirectory.getAllInvokers()).thenReturn(oldInvokerList);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/AbstractServerCallListener.java
Patch:
@@ -85,8 +85,8 @@ public void invoke() {
                 }
                 onReturn(r.getValue());
             });
-        } catch (Throwable t) {
-            responseObserver.onError(t);
+        } catch (Exception e) {
+            responseObserver.onError(e);
         } finally {
             RpcContext.removeCancellationContext();
             RpcContext.removeContext();

File: dubbo-plugin/dubbo-spring-security/src/main/java/org/apache/dubbo/spring/security/filter/AuthenticationExceptionTranslatorFilter.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.springframework.security.access.AccessDeniedException;
 import org.springframework.security.core.AuthenticationException;
-import static org.apache.dubbo.rpc.RpcException.FORBIDDEN_EXCEPTION;
+import static org.apache.dubbo.rpc.RpcException.AUTHORIZATION_EXCEPTION;
 import static org.apache.dubbo.spring.security.utils.SecurityNames.SECURITY_CONTEXT_HOLDER_CLASS_NAME;
 
 @Activate(group = CommonConstants.PROVIDER, order =Integer.MAX_VALUE,onClass = SECURITY_CONTEXT_HOLDER_CLASS_NAME)
@@ -43,7 +43,7 @@ public void onResponse(Result result, Invoker<?> invoker, Invocation invocation)
         if (this.isTranslate(result)) {
             RpcException rpcException = new RpcException(result.getException().getMessage());
 
-            rpcException.setCode(FORBIDDEN_EXCEPTION);
+            rpcException.setCode(AUTHORIZATION_EXCEPTION);
 
             result.setException(rpcException);
         }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/NettyRestProtocolServer.java
Patch:
@@ -46,13 +46,14 @@ public class NettyRestProtocolServer extends BaseRestProtocolServer {
     private final NettyJaxrsServer server = new NettyJaxrsServer();
 
     @Override
+    @SuppressWarnings("rawtypes")
     protected void doStart(URL url) {
         String bindIp = url.getParameter(BIND_IP_KEY, url.getHost());
         if (!url.isAnyHost() && NetUtils.isValidLocalHost(bindIp)) {
             server.setHostname(bindIp);
         }
         server.setPort(url.getParameter(BIND_PORT_KEY, url.getPort()));
-        Map<ChannelOption, Object> channelOption = new HashMap<ChannelOption, Object>();
+        Map<ChannelOption, Object> channelOption = new HashMap<>();
         channelOption.put(ChannelOption.SO_KEEPALIVE, url.getParameter(KEEP_ALIVE_KEY, DEFAULT_KEEP_ALIVE));
         server.setChildChannelOptions(channelOption);
         server.setExecutorThreadCount(url.getParameter(THREADS_KEY, DEFAULT_THREADS));

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/ReferenceCountedClient.java
Patch:
@@ -26,7 +26,7 @@
 public class ReferenceCountedClient<T extends RestClient> extends ReferenceCountedResource {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ReferenceCountedClient.class);
 
-    private T client;
+    private final T client;
 
     public ReferenceCountedClient(T client) {
         this.client = client;

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolServer.java
Patch:
@@ -26,8 +26,8 @@ public interface RestProtocolServer extends ProtocolServer {
     /**
      * @param resourceDef it could be either resource interface or resource impl
      */
-    void deploy(Class resourceDef, Object resourceInstance, String contextPath);
+    void deploy(Class<?> resourceDef, Object resourceInstance, String contextPath);
 
-    void undeploy(Class resourceDef);
+    void undeploy(Class<?> resourceDef);
 
 }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestServerFactory.java
Patch:
@@ -28,10 +28,9 @@ public class RestServerFactory {
     private static final HttpBinder httpBinder = FrameworkModel.defaultModel().getAdaptiveExtension(HttpBinder.class);
 
     public RestProtocolServer createServer(String name) {
-        // TODO move names to Constants
-        if ("servlet".equalsIgnoreCase(name) || "jetty".equalsIgnoreCase(name) || "tomcat".equalsIgnoreCase(name)) {
+        if (Constants.SERVLET.equalsIgnoreCase(name) || Constants.JETTY.equalsIgnoreCase(name) || Constants.TOMCAT.equalsIgnoreCase(name)) {
             return new DubboHttpProtocolServer(httpBinder);
-        } else if ("netty".equalsIgnoreCase(name)) {
+        } else if (Constants.NETTY.equalsIgnoreCase(name)) {
             return new NettyRestProtocolServer();
         } else {
             throw new IllegalArgumentException("Unrecognized server name: " + name);

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RpcExceptionMapperTest.java
Patch:
@@ -46,8 +46,8 @@ public void setUp() {
     @Test
     void testConstraintViolationException() {
         ConstraintViolationException violationException = mock(ConstraintViolationException.class);
-        ConstraintViolation violation = mock(ConstraintViolation.class, Answers.RETURNS_DEEP_STUBS);
-        given(violationException.getConstraintViolations()).willReturn(Sets.<ConstraintViolation<?>>newSet(violation));
+        ConstraintViolation<?> violation = mock(ConstraintViolation.class, Answers.RETURNS_DEEP_STUBS);
+        given(violationException.getConstraintViolations()).willReturn(Sets.newSet(violation));
         RpcException rpcException = new RpcException("violation", violationException);
 
         Response response = exceptionMapper.toResponse(rpcException);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -359,7 +359,7 @@ private void initMetricsService() {
 
     private void initMetricsReporter() {
         DefaultMetricsCollector collector =
-            applicationModel.getFrameworkModel().getBeanFactory().getBean(DefaultMetricsCollector.class);
+            applicationModel.getBeanFactory().getBean(DefaultMetricsCollector.class);
         MetricsConfig metricsConfig = configManager.getMetrics().orElse(null);
         // TODO compatible with old usage of metrics, remove protocol check after new metrics is ready for use.
         if (metricsConfig != null && PROTOCOL_PROMETHEUS.equals(metricsConfig.getProtocol())) {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/listener/MetricsListener.java
Patch:
@@ -33,6 +33,7 @@ default boolean isSupport(MetricsEvent event) {
      *
      * @param event BaseMetricsEvent
      */
-    void onEvent(E event);
+    default void onEvent(E event) {
+    }
 
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MetricsKeyWrapper.java
Patch:
@@ -38,8 +38,8 @@ public MetricsKey getMetricsKey() {
         return metricsKey;
     }
 
-    public boolean isKey(MetricsKey metricsKey) {
-        return metricsKey == getMetricsKey();
+    public boolean isKey(MetricsKey metricsKey, String registryOpType) {
+        return metricsKey == getMetricsKey() && registryOpType.equals(getType());
     }
 
     public String targetKey() {

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/MetricsScopeModelInitializer.java
Patch:
@@ -34,7 +34,7 @@ public void initializeFrameworkModel(FrameworkModel frameworkModel) {
 
     @Override
     public void initializeApplicationModel(ApplicationModel applicationModel) {
-        ScopeBeanFactory beanFactory = applicationModel.getFrameworkModel().getBeanFactory();
+        ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
         beanFactory.registerBean(DefaultMetricsCollector.class);
         beanFactory.registerBean(GlobalMetricsEventMulticaster.class);
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java
Patch:
@@ -48,5 +48,4 @@ public interface JSON {
     List<Map<String, ?>> checkObjectList(List<?> rawList);
 
     List<String> checkStringList(List<?> rawList);
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/FastJson2Impl.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.List;
 
 public class FastJson2Impl extends AbstractJSONImpl {
-
     @Override
     public <T> T toJavaObject(String json, Type type) {
         return com.alibaba.fastjson2.JSON.parseObject(json, type);

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/FastJsonImpl.java
Patch:
@@ -37,4 +37,5 @@ public <T> List<T> toJavaList(String json, Class<T> clazz) {
     public String toJson(Object obj) {
         return com.alibaba.fastjson.JSON.toJSONString(obj, SerializerFeature.DisableCircularReferenceDetect);
     }
+
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/impl/JacksonImpl.java
Patch:
@@ -16,15 +16,18 @@
  */
 package org.apache.dubbo.common.json.impl;
 
+
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.databind.MapperFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.json.JsonMapper;
 import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 
 import java.lang.reflect.Type;
 import java.util.List;
 
 public class JacksonImpl extends AbstractJSONImpl {
+    private ObjectMapper objectMapper = new ObjectMapper();
 
     private volatile Object jacksonCache = null;
 

File: dubbo-common/src/test/java/org/apache/dubbo/metadata/definition/ServiceDefinitionBuilderTest.java
Patch:
@@ -21,8 +21,6 @@
 import org.apache.dubbo.metadata.definition.model.TypeDefinition;
 import org.apache.dubbo.metadata.definition.service.ComplexObject;
 import org.apache.dubbo.metadata.definition.service.DemoService;
-import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
@@ -134,4 +132,4 @@ void checkComplexObjectAsParam(FullServiceDefinition fullServiceDefinition) {
         Assertions.assertEquals(Integer.class.getCanonicalName(), listTypeDefinition.getItems().get(0));
     }
 
-}
\ No newline at end of file
+}

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/AbstractServiceNameMapping.java
Patch:
@@ -41,7 +41,6 @@
 import static java.util.Collections.unmodifiableSet;
 import static java.util.stream.Collectors.toSet;
 import static java.util.stream.Stream.of;
-
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_FAILED_LOAD_MAPPING_CACHE;
 import static org.apache.dubbo.common.constants.RegistryConstants.SUBSCRIBED_SERVICE_NAMES_KEY;
 import static org.apache.dubbo.common.utils.CollectionUtils.toTreeSet;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/jaxrs/DefaultValueParameterProcessor.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
+import java.lang.reflect.Parameter;
 import java.util.List;
 import java.util.Map;
 
@@ -38,12 +39,12 @@
 public class DefaultValueParameterProcessor extends AbstractAnnotatedMethodParameterProcessor {
 
     @Override
-    public String getAnnotationType() {
+    public String getAnnotationName() {
         return DEFAULT_VALUE_ANNOTATION_CLASS_NAME;
     }
 
     @Override
-    protected void process(String annotationValue, String defaultValue, Annotation annotation, Object parameter,
+    protected void process(String annotationValue, String defaultValue, Annotation annotation, Parameter parameter,
                            int parameterIndex, Method method, RestMethodMetadata restMethodMetadata) {
         RequestMetadata requestMetadata = restMethodMetadata.getRequest();
 

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/jaxrs/FormParamParameterProcessor.java
Patch:
@@ -28,7 +28,7 @@
 public class FormParamParameterProcessor extends ParamAnnotationParameterProcessor {
 
     @Override
-    public String getAnnotationType() {
+    public String getAnnotationName() {
         return FORM_PARAM_ANNOTATION_CLASS_NAME;
     }
 }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/jaxrs/HeaderParamParameterProcessor.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
+import java.lang.reflect.Parameter;
 
 import static org.apache.dubbo.metadata.rest.AnnotatedMethodParameterProcessor.buildDefaultValue;
 import static org.apache.dubbo.metadata.rest.RestMetadataConstants.JAX_RS.HEADER_PARAM_ANNOTATION_CLASS_NAME;
@@ -35,12 +36,12 @@
 public class HeaderParamParameterProcessor extends AbstractAnnotatedMethodParameterProcessor {
 
     @Override
-    public String getAnnotationType() {
+    public String getAnnotationName() {
         return HEADER_PARAM_ANNOTATION_CLASS_NAME;
     }
 
     @Override
-    protected void process(String headerName, String defaultValue, Annotation annotation, Object parameter,
+    protected void process(String headerName, String defaultValue, Annotation annotation, Parameter parameter,
                            int parameterIndex, Method method, RestMethodMetadata restMethodMetadata) {
         RequestMetadata requestMetadata = restMethodMetadata.getRequest();
         // Add the placeholder as header value

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/jaxrs/MatrixParamParameterProcessor.java
Patch:
@@ -28,7 +28,7 @@
 public class MatrixParamParameterProcessor extends ParamAnnotationParameterProcessor {
 
     @Override
-    public String getAnnotationType() {
+    public String getAnnotationName() {
         return MATRIX_PARAM_ANNOTATION_CLASS_NAME;
     }
 }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/jaxrs/ParamAnnotationParameterProcessor.java
Patch:
@@ -23,14 +23,15 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
+import java.lang.reflect.Parameter;
 
 /**
  * The abstract {@link AnnotatedMethodParameterProcessor} implementation for JAX-RS's @*Param
  */
 public abstract class ParamAnnotationParameterProcessor extends AbstractAnnotatedMethodParameterProcessor {
 
     @Override
-    protected void process(String name, String defaultValue, Annotation annotation, Object parameter,
+    protected void process(String name, String defaultValue, Annotation annotation, Parameter parameter,
                            int parameterIndex, Method method, RestMethodMetadata restMethodMetadata) {
         RequestMetadata requestMetadata = restMethodMetadata.getRequest();
         requestMetadata.addParam(name, defaultValue);

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/jaxrs/QueryParamParameterProcessor.java
Patch:
@@ -28,7 +28,7 @@
 public class QueryParamParameterProcessor extends ParamAnnotationParameterProcessor {
 
     @Override
-    public String getAnnotationType() {
+    public String getAnnotationName() {
         return QUERY_PARAM_ANNOTATION_CLASS_NAME;
     }
 }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/springmvc/RequestHeaderParameterProcessor.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
+import java.lang.reflect.Parameter;
 
 import static org.apache.dubbo.metadata.rest.RestMetadataConstants.SPRING_MVC.REQUEST_HEADER_ANNOTATION_CLASS_NAME;
 
@@ -30,12 +31,12 @@
 public class RequestHeaderParameterProcessor extends AbstractRequestAnnotationParameterProcessor {
 
     @Override
-    public String getAnnotationType() {
+    public String getAnnotationName() {
         return REQUEST_HEADER_ANNOTATION_CLASS_NAME;
     }
 
     @Override
-    protected void process(String name, String defaultValue, Annotation annotation, Object parameter,
+    protected void process(String name, String defaultValue, Annotation annotation, Parameter parameter,
                            int parameterIndex, Method method, RestMethodMetadata restMethodMetadata) {
         restMethodMetadata.getRequest().addHeader(name, defaultValue);
     }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/springmvc/RequestParamParameterProcessor.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
+import java.lang.reflect.Parameter;
 
 import static org.apache.dubbo.metadata.rest.RestMetadataConstants.SPRING_MVC.REQUEST_PARAM_ANNOTATION_CLASS_NAME;
 
@@ -30,14 +31,13 @@
 public class RequestParamParameterProcessor extends AbstractRequestAnnotationParameterProcessor {
 
     @Override
-    public String getAnnotationType() {
+    public String getAnnotationName() {
         return REQUEST_PARAM_ANNOTATION_CLASS_NAME;
     }
 
     @Override
-    protected void process(String name, String defaultValue, Annotation annotation, Object parameter, int parameterIndex,
+    protected void process(String name, String defaultValue, Annotation annotation, Parameter parameter, int parameterIndex,
                            Method method, RestMethodMetadata restMethodMetadata) {
         restMethodMetadata.getRequest().addParam(name, defaultValue);
-
     }
 }

File: dubbo-metrics/dubbo-metrics-prometheus/src/test/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsReporterTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dubbo.metrics.prometheus;
 
-import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.MetricsConfig;
 import org.apache.dubbo.config.nested.PrometheusConfig;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java
Patch:
@@ -18,11 +18,9 @@
 package org.apache.dubbo.qos.command;
 
 import org.apache.dubbo.qos.command.exception.NoSuchCommandException;
-import org.apache.dubbo.qos.command.exception.PermissionDenyException;
 import org.apache.dubbo.qos.common.QosConfiguration;
 import org.apache.dubbo.qos.permission.PermissionLevel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMappingTest.java
Patch:
@@ -31,9 +31,7 @@
 import org.apache.dubbo.metadata.report.MetadataReport;
 import org.apache.dubbo.metadata.report.MetadataReportInstance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-import org.apache.dubbo.rpc.model.FrameworkModel;
 
-import org.checkerframework.checker.units.qual.A;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/api/MultiplexProtocolConnectionManagerTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
-import org.opentest4j.AssertionFailedError;
 
 import java.lang.reflect.Field;
 import java.util.Map;

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/RpcContextTest.java
Patch:
@@ -18,11 +18,9 @@
 
 import org.apache.dubbo.common.URL;
 
-import org.apache.dubbo.common.url.component.URLParam;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-import java.io.InputStream;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/NettyRestProtocolServer.java
Patch:
@@ -16,16 +16,16 @@
  */
 package org.apache.dubbo.rpc.protocol.rest;
 
-import io.netty.channel.ChannelOption;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.NetUtils;
+
+import io.netty.channel.ChannelOption;
 import org.jboss.resteasy.plugins.server.netty.NettyJaxrsServer;
 import org.jboss.resteasy.spi.ResteasyDeployment;
 
 import java.util.HashMap;
 import java.util.Map;
 
-
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_THREADS;
 import static org.apache.dubbo.common.constants.CommonConstants.IO_THREADS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.THREADS_KEY;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/sample/MetricSample.java
Patch:
@@ -121,6 +121,7 @@ public String toString() {
             '}';
     }
 
+
     public enum Type {
         COUNTER,
         GAUGE,

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/filter/MetricsFilter.java
Patch:
@@ -27,9 +27,10 @@
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ScopeModelAware;
 
+import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER;
 
-@Activate(group = PROVIDER, order = -1)
+@Activate(group = {CONSUMER, PROVIDER}, order = -1)
 public class MetricsFilter implements Filter, BaseFilter.Listener, ScopeModelAware {
 
     private DefaultMetricsCollector collector = null;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/filter/observation/DubboObservation.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Documentation of Dubbo observations.
  */
-enum DubboObservation implements ObservationDocumentation {
+public enum DubboObservation implements ObservationDocumentation {
 
     /**
      * Server side Dubbo RPC Observation.

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/observation/AbstractObservationFilterTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.metrics.filter.observation;
+package org.apache.dubbo.metrics.observation;
 
 import io.micrometer.tracing.test.SampleTestRunner;
 import org.apache.dubbo.config.ApplicationConfig;

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/observation/ObservationReceiverFilterTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.metrics.filter.observation;
+package org.apache.dubbo.metrics.observation;
 
 import io.micrometer.common.KeyValues;
 import io.micrometer.core.tck.MeterRegistryAssert;

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/observation/ObservationSenderFilterTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.metrics.filter.observation;
+package org.apache.dubbo.metrics.observation;
 
 import io.micrometer.common.KeyValues;
 import io.micrometer.core.tck.MeterRegistryAssert;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/DubboShutdownHookTest.java
Patch:
@@ -39,7 +39,7 @@ public class DubboShutdownHookTest {
     public void init() {
         SysProps.setProperty(CommonConstants.IGNORE_LISTEN_SHUTDOWN_HOOK, "false");
         FrameworkModel frameworkModel = new FrameworkModel();
-        applicationModel = new ApplicationModel(frameworkModel);
+        applicationModel = frameworkModel.newApplication();
         ModuleModel moduleModel = applicationModel.newModule();
         dubboShutdownHook = new DubboShutdownHook(applicationModel);
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -359,7 +359,7 @@ private void initMetricsService() {
 
     private void initMetricsReporter() {
         DefaultMetricsCollector collector =
-            applicationModel.getFrameworkModel().getBeanFactory().getOrRegisterBean(DefaultMetricsCollector.class);
+            applicationModel.getFrameworkModel().getBeanFactory().getBean(DefaultMetricsCollector.class);
         MetricsConfig metricsConfig = configManager.getMetrics().orElse(null);
         // TODO compatible with old usage of metrics, remove protocol check after new metrics is ready for use.
         if (metricsConfig != null && PROTOCOL_PROMETHEUS.equals(metricsConfig.getProtocol())) {

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/stat/MetricsStatHandler.java
Patch:
@@ -31,6 +31,6 @@ public interface MetricsStatHandler {
 
     MetricsEvent decrease(String applicationName, Invocation invocation);
 
-    MetricsEvent addApplication(String applicationName, String version);
+    MetricsEvent addApplication(String applicationName);
 
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MetricsCategory.java
Patch:
@@ -24,6 +24,7 @@ public enum MetricsCategory {
     RT,
     QPS,
     REQUESTS,
+    REGISTRY,
     THREAD_POOL,
     APPLICATION
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/ModuleEnvironment.java
Patch:
@@ -220,7 +220,7 @@ public String getLocalMigrationRule() {
     }
 
     @Override
-    public void refreshClassLoaders() {
+    public synchronized void refreshClassLoaders() {
         orderedPropertiesConfiguration.refresh();
         applicationDelegate.refreshClassLoaders();
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ProfilerServerFilter.java
Patch:
@@ -24,21 +24,22 @@
 import org.apache.dubbo.common.profiler.ProfilerSwitch;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.rpc.BaseFilter;
+import org.apache.dubbo.rpc.Constants;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.support.RpcUtils;
-import org.apache.dubbo.rpc.Constants;
 
 import java.lang.management.ManagementFactory;
 import java.lang.management.OperatingSystemMXBean;
+
+import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SEPARATOR;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROXY_TIMEOUT_RESPONSE;
 
 @Activate(group = PROVIDER, order = Integer.MIN_VALUE)

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java
Patch:
@@ -315,7 +315,7 @@ public String getLocalMigrationRule() {
         return localMigrationRule;
     }
 
-    public void refreshClassLoaders() {
+    public synchronized void refreshClassLoaders() {
         propertiesConfiguration.refresh();
         loadMigrationRule();
         this.globalConfiguration = null;

File: dubbo-common/src/test/java/org/apache/dubbo/common/CommonScopeModelInitializerTest.java
Patch:
@@ -41,8 +41,8 @@ class CommonScopeModelInitializerTest {
     @BeforeEach
     public void setUp() {
         frameworkModel = new FrameworkModel();
-        applicationModel = new ApplicationModel(frameworkModel);
-        moduleModel = new ModuleModel(applicationModel);
+        applicationModel = frameworkModel.newApplication();
+        moduleModel = applicationModel.newModule();
     }
 
     @AfterEach
@@ -60,4 +60,4 @@ void test() {
         ScopeBeanFactory moduleModelBeanFactory = moduleModel.getBeanFactory();
         Assertions.assertNotNull(moduleModelBeanFactory.getBean(ConfigurationCache.class));
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/ConfigurationUtilsTest.java
Patch:
@@ -36,7 +36,7 @@ class ConfigurationUtilsTest {
     void testCachedProperties() {
         FrameworkModel frameworkModel = new FrameworkModel();
 
-        ApplicationModel applicationModel = new ApplicationModel(frameworkModel);
+        ApplicationModel applicationModel = frameworkModel.newApplication();
         Environment originApplicationEnvironment = applicationModel.getModelEnvironment();
         Environment applicationEnvironment = Mockito.spy(originApplicationEnvironment);
         applicationModel.setEnvironment(applicationEnvironment);
@@ -51,7 +51,7 @@ void testCachedProperties() {
         // cached key
         Assertions.assertEquals("a", ConfigurationUtils.getCachedDynamicProperty(applicationModel, "TestKey", "xxx"));
 
-        ModuleModel moduleModel = new ModuleModel(applicationModel);
+        ModuleModel moduleModel = applicationModel.newModule();
         ModuleEnvironment originModuleEnvironment = moduleModel.getModelEnvironment();
         ModuleEnvironment moduleEnvironment = Mockito.spy(originModuleEnvironment);
         moduleModel.setModuleEnvironment(moduleEnvironment);
@@ -109,4 +109,4 @@ void testEscapedNewLine() throws Exception {
         Assertions.assertEquals(1, result.size());
         Assertions.assertEquals("zookeeper://127.0.0.1:2181\\ndubbo.protocol.port=20880", result.get("dubbo.registry.address"));
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/EnvironmentTest.java
Patch:
@@ -64,7 +64,7 @@ void testResolvePlaceholders() {
     @Test
     void test() {
         FrameworkModel frameworkModel = new FrameworkModel();
-        ApplicationModel applicationModel = new ApplicationModel(frameworkModel);
+        ApplicationModel applicationModel = frameworkModel.newApplication();
         Environment environment = applicationModel.getModelEnvironment();
 
         // test getPrefixedConfiguration
@@ -112,4 +112,4 @@ void test() {
 
         frameworkModel.destroy();
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/inject/AdaptiveExtensionInjectorTest.java
Patch:
@@ -56,4 +56,4 @@ void test() {
 
         frameworkModel.destroy();
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/common/status/reporter/FrameworkStatusReportServiceTest.java
Patch:
@@ -41,7 +41,7 @@ class FrameworkStatusReportServiceTest {
     @Test
     void test() {
         FrameworkModel frameworkModel = new FrameworkModel();
-        ApplicationModel applicationModel = new ApplicationModel(frameworkModel);
+        ApplicationModel applicationModel = frameworkModel.newApplication();
         ApplicationConfig app = new ApplicationConfig("APP");
         applicationModel.getApplicationConfigManager().setApplication(app);
         FrameworkStatusReportService reportService = applicationModel.getBeanFactory().getBean(FrameworkStatusReportService.class);
@@ -103,4 +103,4 @@ void test() {
 
         frameworkModel.destroy();
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/FrameworkModelTest.java
Patch:
@@ -105,4 +105,4 @@ void destroyAll() {
         }
     }
 
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/FrameworkServiceRepositoryTest.java
Patch:
@@ -43,8 +43,8 @@ class FrameworkServiceRepositoryTest {
     @BeforeEach
     public void setUp() {
         frameworkModel = new FrameworkModel();
-        applicationModel = new ApplicationModel(frameworkModel);
-        moduleModel = new ModuleModel(applicationModel);
+        applicationModel = frameworkModel.newApplication();
+        moduleModel = applicationModel.newModule();
     }
 
     @AfterEach
@@ -111,4 +111,4 @@ private static String keyWithoutGroup(String serviceKey) {
         }
         return interfaceName + ":" + version;
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/ModuleServiceRepositoryTest.java
Patch:
@@ -39,8 +39,8 @@ class ModuleServiceRepositoryTest {
     @BeforeEach
     public void setUp() {
         frameworkModel = new FrameworkModel();
-        applicationModel = new ApplicationModel(frameworkModel);
-        moduleModel = new ModuleModel(applicationModel);
+        applicationModel = frameworkModel.newApplication();
+        moduleModel = applicationModel.newModule();
     }
 
     @AfterEach
@@ -111,4 +111,4 @@ void test() {
         Assertions.assertTrue(repository.getExportedServices().isEmpty());
         Assertions.assertTrue(frameworkModel.getServiceRepository().allProviderModels().isEmpty());
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/ReflectionServiceDescriptorTest.java
Patch:
@@ -96,4 +96,4 @@ void testHashCode() {
             DemoService.class);
         Assertions.assertEquals(service2.hashCode(), service3.hashCode());
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/ScopeModelAwareExtensionProcessorTest.java
Patch:
@@ -34,8 +34,8 @@ class ScopeModelAwareExtensionProcessorTest {
     @BeforeEach
     public void setUp() {
         frameworkModel = new FrameworkModel();
-        applicationModel = new ApplicationModel(frameworkModel);
-        moduleModel = new ModuleModel(applicationModel);
+        applicationModel = frameworkModel.newApplication();
+        moduleModel = applicationModel.newModule();
     }
 
     @AfterEach
@@ -76,4 +76,4 @@ void testPostProcessAfterInitialization() throws Exception {
         Assertions.assertEquals(mockScopeModelAware.getApplicationModel(), applicationModel);
         Assertions.assertEquals(mockScopeModelAware.getModuleModel(), moduleModel);
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/ScopeModelTest.java
Patch:
@@ -109,4 +109,4 @@ void testCreateOnDestroy() throws InterruptedException {
         List<String> remainFrameworks = FrameworkModel.getAllInstances().stream().map(m -> m.getDesc()).collect(Collectors.toList());
         Assertions.assertEquals(0, FrameworkModel.getAllInstances().size(), "FrameworkModel is not completely destroyed: " + remainFrameworks);
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/ScopeModelUtilTest.java
Patch:
@@ -36,8 +36,8 @@ class ScopeModelUtilTest {
     @BeforeEach
     public void setUp() {
         frameworkModel = new FrameworkModel();
-        applicationModel = new ApplicationModel(frameworkModel);
-        moduleModel = new ModuleModel(applicationModel);
+        applicationModel = frameworkModel.newApplication();
+        moduleModel = applicationModel.newModule();
     }
 
     @AfterEach
@@ -111,4 +111,4 @@ public Environment getModelEnvironment() {
         }
     }
 
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/ServiceRepositoryTest.java
Patch:
@@ -40,8 +40,8 @@ class ServiceRepositoryTest {
     @BeforeEach
     public void setUp() {
         frameworkModel = new FrameworkModel();
-        applicationModel = new ApplicationModel(frameworkModel);
-        moduleModel = new ModuleModel(applicationModel);
+        applicationModel = frameworkModel.newApplication();
+        moduleModel = applicationModel.newModule();
     }
 
     @AfterEach
@@ -88,4 +88,4 @@ void test() {
 
     }
 
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConfigScopeModelInitializerTest.java
Patch:
@@ -33,8 +33,8 @@ class ConfigScopeModelInitializerTest {
     @BeforeEach
     public void setUp() {
         frameworkModel = new FrameworkModel();
-        applicationModel = new ApplicationModel(frameworkModel);
-        moduleModel = new ModuleModel(applicationModel);
+        applicationModel = frameworkModel.newApplication();
+        moduleModel = applicationModel.newModule();
     }
 
     @AfterEach
@@ -47,4 +47,4 @@ void test(){
         Assertions.assertNotNull(applicationModel.getDeployer());
         Assertions.assertNotNull(moduleModel.getDeployer());
     }
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/MultiInstanceTest.java
Patch:
@@ -739,7 +739,7 @@ void testOldApiDeploy() throws Exception {
 
 
             // consumer app
-            ApplicationModel consumerApplicationModel = new ApplicationModel(FrameworkModel.defaultModel());
+            ApplicationModel consumerApplicationModel = ApplicationModel.defaultModel();
             ReferenceConfig<DemoService> referenceConfig = new ReferenceConfig<>();
             referenceConfig.setScopeModel(consumerApplicationModel.getDefaultModule());
             referenceConfig.setApplication(new ApplicationConfig("consumer-app"));

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/customize/DubboSpringInitCustomizerTest.java
Patch:
@@ -105,4 +105,4 @@ void testReloadSpringContext() {
     }
 
 
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/InvokeTelnetTest.java
Patch:
@@ -58,7 +58,7 @@ public void setup() {
         mockChannel = mock(Channel.class);
         mockCommandContext = mock(CommandContext.class);
         given(mockCommandContext.getRemote()).willReturn(mockChannel);
-        ApplicationModel applicationModel = new ApplicationModel(frameworkModel);
+        ApplicationModel applicationModel = frameworkModel.newApplication();
         repository = applicationModel.getDefaultModule().getServiceRepository();
     }
 
@@ -267,4 +267,4 @@ private void registerProvider(String key, Object impl, Class<?> interfaceClass)
             null
         );
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/LiveTest.java
Patch:
@@ -50,4 +50,4 @@ void testExecute() {
         Assertions.assertEquals(result, "true");
         Assertions.assertEquals(commandContext.getHttpCode(), 200);
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/LsTest.java
Patch:
@@ -100,4 +100,4 @@ private void registerConsumer() {
             serviceMetadata, methodConfigs, referenceConfig.getInterfaceClassLoader());
         repository.registerConsumer(consumerModel);
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/OfflineTest.java
Patch:
@@ -100,4 +100,4 @@ private void registerProvider() {
         );
         repository.registerProvider(providerModel);
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/OnlineTest.java
Patch:
@@ -100,4 +100,4 @@ private void registerProvider() {
         );
         repository.registerProvider(providerModel);
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/PublishMetadataTest.java
Patch:
@@ -68,4 +68,4 @@ void testExecute() {
         Assertions.assertEquals(result, expectResult);
 
     }
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/SerializeCheckStatusTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.utils.SerializeSecurityManager;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.rpc.model.FrameworkModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/SerializeWarnedClassesTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.utils.SerializeSecurityManager;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.rpc.model.FrameworkModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/SerializeCheckUtilsTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.utils.SerializeCheckStatus;
 import org.apache.dubbo.common.utils.SerializeSecurityManager;
 import org.apache.dubbo.rpc.model.FrameworkModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMappingTest.java
Patch:
@@ -32,6 +32,8 @@
 import org.apache.dubbo.metadata.report.MetadataReportInstance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
+
+import org.checkerframework.checker.units.qual.A;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -58,7 +60,7 @@ class MetadataServiceNameMappingTest {
 
     @BeforeEach
     public void setUp() {
-        applicationModel = new ApplicationModel(FrameworkModel.defaultModel());
+        applicationModel = ApplicationModel.defaultModel();
         configManager = mock(ConfigManager.class);
         metadataReport = mock(MetadataReport.class);
         metadataReportList.put("default", metadataReport);

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocationTest.java
Patch:
@@ -66,7 +66,7 @@ void test() throws Exception {
         ChannelBuffer buffer = writeBuffer(url, inv, proto);
 
         FrameworkModel frameworkModel = new FrameworkModel();
-        ApplicationModel applicationModel = new ApplicationModel(frameworkModel);
+        ApplicationModel applicationModel = frameworkModel.newApplication();
         applicationModel.getDefaultModule().getServiceRepository().registerService(DemoService.class.getName(), DemoService.class);
         frameworkModel.getServiceRepository().registerProviderUrl(url);
 

File: dubbo-rpc/dubbo-rpc-injvm/src/test/java/org/apache/dubbo/rpc/protocol/injvm/InjvmClassLoaderTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ConsumerModel;
-import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
 import org.apache.dubbo.rpc.model.ProviderModel;
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
@@ -62,9 +61,9 @@ void testDifferentClassLoaderRequest() throws Exception {
         TestClassLoader2 classLoader3 = new TestClassLoader2(classLoader2, basePath);
 
         ApplicationConfig applicationConfig = new ApplicationConfig("TestApp");
-        ApplicationModel applicationModel = new ApplicationModel(FrameworkModel.defaultModel());
+        ApplicationModel applicationModel = ApplicationModel.defaultModel();
         applicationModel.getApplicationConfigManager().setApplication(applicationConfig);
-        ModuleModel moduleModel = new ModuleModel(applicationModel);
+        ModuleModel moduleModel = applicationModel.newModule();
 
         Class clazz1 = classLoader1.loadClass(MultiClassLoaderService.class.getName(), false);
         Class<?> clazz1impl = classLoader1.loadClass(MultiClassLoaderServiceImpl.class.getName(), false);

File: dubbo-rpc/dubbo-rpc-injvm/src/test/java/org/apache/dubbo/rpc/protocol/injvm/InjvmDeepCopyTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ConsumerModel;
-import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
 import org.apache.dubbo.rpc.model.ProviderModel;
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
@@ -40,7 +39,7 @@ class InjvmDeepCopyTest {
 
     @Test
     void testDeepCopy() {
-        ApplicationModel applicationModel = new ApplicationModel(FrameworkModel.defaultModel());
+        ApplicationModel applicationModel = ApplicationModel.defaultModel();
         applicationModel.getApplicationConfigManager().setApplication(new ApplicationConfig("TestInjvm"));
 
         ModuleModel moduleModel = applicationModel.newModule();

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/service/TriBuiltinServiceTest.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.dubbo.rpc.protocol.tri.service;
 
-import io.grpc.health.v1.DubboHealthTriple;
 import org.apache.dubbo.rpc.PathResolver;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.apache.dubbo.rpc.model.ModuleServiceRepository;
 import org.apache.dubbo.rpc.stub.StubSuppliers;
+
+import io.grpc.health.v1.DubboHealthTriple;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -102,7 +102,7 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
                         + invocation.getMethodName() + ", terminate directly."), invocation);
             }
 
-            invocation.setAttachment(TIMEOUT_KEY, timeout);
+            invocation.setAttachment(TIMEOUT_KEY, String.valueOf(timeout));
             if (isOneway) {
                 boolean isSent = getUrl().getMethodParameter(methodName, Constants.SENT_KEY, false);
                 currentClient.send(inv, isSent);

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmInvoker.java
Patch:
@@ -107,7 +107,7 @@ public Result doInvoke(Invocation invocation) throws Throwable {
                 "No time left for making the following call: " + invocation.getServiceName() + "."
                     + invocation.getMethodName() + ", terminate directly."), invocation);
         }
-        invocation.setAttachment(TIMEOUT_KEY, timeout);
+        invocation.setAttachment(TIMEOUT_KEY, String.valueOf(timeout));
 
 
         String desc = ReflectUtils.getDesc(invocation.getParameterTypes());

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
-import io.netty.util.AsciiString;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
@@ -49,6 +48,8 @@
 import org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter;
 import org.apache.dubbo.rpc.support.RpcUtils;
 
+import io.netty.util.AsciiString;
+
 import java.util.Arrays;
 import java.util.Objects;
 import java.util.Set;
@@ -195,7 +196,7 @@ AsyncRpcResult invokeUnary(MethodDescriptor methodDescriptor, Invocation invocat
                 "No time left for making the following call: " + invocation.getServiceName() + "."
                     + invocation.getMethodName() + ", terminate directly."), invocation);
         }
-        invocation.setAttachment(TIMEOUT_KEY, timeout);
+        invocation.setAttachment(TIMEOUT_KEY, String.valueOf(timeout));
 
         final AsyncRpcResult result;
         DeadlineFuture future = DeadlineFuture.newFuture(getUrl().getPath(),

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -287,7 +287,7 @@ protected void mapServiceName(URL url, ServiceNameMapping serviceNameMapping, Sc
         } catch (Exception e) {
             logger.error(CONFIG_SERVER_DISCONNECTED, "configuration server disconnected", "", "Failed register interface application mapping for service " + url.getServiceKey(), e);
         }
-        if (!succeeded) {
+        if (!succeeded && serviceNameMapping.hasValidMetadataCenter()) {
             scheduleToMapping(scheduledExecutor, serviceNameMapping, url);
         }
     }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataConstants.java
Patch:
@@ -24,7 +24,7 @@ public class MetadataConstants {
     public static final String SERVICE_META_DATA_STORE_TAG = ".smd";
     public static final String CONSUMER_META_DATA_STORE_TAG = ".cmd";
     public static final String METADATA_PUBLISH_DELAY_KEY = "dubbo.application.metadata.publish.delay";
-    public static final int DEFAULT_METADATA_PUBLISH_DELAY = 30000;
+    public static final int DEFAULT_METADATA_PUBLISH_DELAY = 1000;
     public static final String METADATA_PROXY_TIMEOUT_KEY = "dubbo.application.metadata.proxy.delay";
     public static final int DEFAULT_METADATA_TIMEOUT_VALUE = 5000;
     public static String REPORT_CONSUMER_URL_KEY = "report-consumer-definition";

File: dubbo-serialization/dubbo-serialization-fastjson2/src/main/java/org/apache/dubbo/common/serialize/fastjson2/Fastjson2SecurityManager.java
Patch:
@@ -29,15 +29,14 @@
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import com.alibaba.fastjson2.filter.ContextAutoTypeBeforeHandler;
-import com.alibaba.fastjson2.filter.Filter;
 import com.alibaba.fastjson2.util.TypeUtils;
 
 import static com.alibaba.fastjson2.util.TypeUtils.loadClass;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_UNTRUSTED_SERIALIZE_CLASS;
 import static org.apache.dubbo.common.utils.SerializeCheckStatus.STRICT;
 
 public class Fastjson2SecurityManager implements AllowClassNotifyListener {
-    private volatile Filter securityFilter;
+    private volatile Handler securityFilter;
 
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(Fastjson2SecurityManager.class);
 
@@ -77,7 +76,7 @@ public synchronized void notifyCheckSerializable(boolean checkSerializable) {
 
     }
 
-    public Filter getSecurityFilter() {
+    public Handler getSecurityFilter() {
         return securityFilter;
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/LFUCache.java
Patch:
@@ -85,12 +85,12 @@ public V put(final K key, final V value) {
                 freqTable[0].addLastNode(node);
                 map.put(key, node);
             } else {
-                node = freqTable[0].addLast(key, value);
-                map.put(key, node);
                 curSize++;
                 if (curSize > capacity) {
                     proceedEviction();
                 }
+                node = freqTable[0].addLast(key, value);
+                map.put(key, node);
             }
         } finally {
             lock.unlock();

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -714,6 +714,7 @@ public void prepareInternalModule() {
                 // wait for internal module startup
                 try {
                     future.get(5, TimeUnit.SECONDS);
+                    hasPreparedInternalModule = true;
                 } catch (Exception e) {
                     logger.warn(CONFIG_FAILED_START_MODEL, "", "", "wait for internal module startup failed: " + e.getMessage(), e);
                 }
@@ -770,7 +771,7 @@ private DynamicConfiguration prepareEnvironment(ConfigCenterConfig configCenter)
                 dynamicConfiguration = getDynamicConfiguration(configCenter.toUrl());
             } catch (Exception e) {
                 if (!configCenter.isCheck()) {
-                    logger.warn(CONFIG_FAILED_INIT_CONFIG_CENTER, "", "","The configuration center failed to initialize", e);
+                    logger.warn(CONFIG_FAILED_INIT_CONFIG_CENTER, "", "", "The configuration center failed to initialize", e);
                     configCenter.setInitialized(false);
                     return null;
                 } else {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -366,6 +366,7 @@ private void initMetricsReporter() {
         if (metricsConfig != null && PROTOCOL_PROMETHEUS.equals(metricsConfig.getProtocol())) {
             collector.setCollectEnabled(true);
             collector.addApplicationInfo(applicationModel.getApplicationName(), Version.getVersion());
+            collector.addThreadPool(applicationModel.getFrameworkModel(), applicationModel.getApplicationName());
             String protocol = metricsConfig.getProtocol();
             if (StringUtils.isNotEmpty(protocol)) {
                 MetricsReporterFactory metricsReporterFactory = getExtensionLoader(MetricsReporterFactory.class).getAdaptiveExtension();

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MetricsCategory.java
Patch:
@@ -24,5 +24,6 @@ public enum MetricsCategory {
     RT,
     QPS,
     REQUESTS,
+    THREAD_POOL,
     APPLICATION
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/CacheableFailbackRegistry.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/stub/StubInvocationUtil.java
Patch:
@@ -58,6 +58,8 @@ private static Object call(Invoker<?> invoker, MethodDescriptor methodDescriptor
             methodDescriptor.getMethodName(), invoker.getInterface().getName(),
             invoker.getUrl().getProtocolServiceKey(), methodDescriptor.getParameterClasses(),
             arguments);
+        //When there are multiple MethodDescriptors with the same method name, the return type will be wrong
+        rpcInvocation.setReturnType(methodDescriptor.getReturnClass());
         try {
             return InvocationUtil.invoke(invoker, rpcInvocation);
         } catch (Throwable e) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/DefaultSerializeClassChecker.java
Patch:
@@ -117,7 +117,7 @@ public Class<?> loadClass(ClassLoader classLoader, String className) throws Clas
 
     private Class<?> loadClass0(ClassLoader classLoader, String className) throws ClassNotFoundException {
         if (checkStatus == SerializeCheckStatus.DISABLE) {
-            return Class.forName(className, false, classLoader);
+            return ClassUtils.forName(className, classLoader);
         }
 
         long hash = MAGIC_HASH_CODE;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/DefaultSerializeClassCheckerTest.java
Patch:
@@ -41,6 +41,7 @@ void tearDown() {
 
     @Test
     void testCommon() throws ClassNotFoundException {
+        FrameworkModel.defaultModel().getBeanFactory().getBean(SerializeSecurityManager.class).setCheckStatus(SerializeCheckStatus.WARN);
         DefaultSerializeClassChecker defaultSerializeClassChecker = DefaultSerializeClassChecker.getInstance();
 
         for (int i = 0; i < 10; i++) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/SerializeSecurityConfigurator.java
Patch:
@@ -290,7 +290,7 @@ private void addToAllow(String className) {
         if (subs.length > trustSerializeClassLevel) {
             serializeSecurityManager.addToAllowed(Arrays.stream(subs)
                 .limit(trustSerializeClassLevel)
-                .collect(Collectors.joining(".")));
+                .collect(Collectors.joining(".")) + ".");
         } else {
             serializeSecurityManager.addToAllowed(className);
         }

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/SerializeSecurityConfiguratorTest.java
Patch:
@@ -363,7 +363,7 @@ void testRegister4() {
         serializeSecurityConfigurator.onAddClassLoader(moduleModel, Thread.currentThread().getContextClassLoader());
 
         serializeSecurityConfigurator.registerInterface(DemoService3.class);
-        Assertions.assertTrue(ssm.getAllowedPrefix().contains("com.service.deep1.deep2"));
+        Assertions.assertTrue(ssm.getAllowedPrefix().contains("com.service.deep1.deep2."));
 
         frameworkModel.destroy();
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultMetricsServiceExporter.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dubbo.common.constants.LoggerCodeConstants;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.metrics.service.MetricsService;
-import org.apache.dubbo.common.metrics.service.MetricsServiceExporter;
+import org.apache.dubbo.metrics.service.MetricsService;
+import org.apache.dubbo.metrics.service.MetricsServiceExporter;
 import org.apache.dubbo.config.MetricsConfig;
 import org.apache.dubbo.config.ServiceConfig;
 import org.apache.dubbo.config.bootstrap.builders.InternalServiceConfigBuilder;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/DubboMetrics.java
Patch:
@@ -22,7 +22,7 @@
 
 public class DubboMetrics implements MeterBinder {
 
-    protected static volatile  MeterRegistry globalRegistry = null;
+    public static volatile  MeterRegistry globalRegistry = null;
     @Override
     public void bindTo(MeterRegistry registry) {
         this.globalRegistry = registry;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/MetricsCollector.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.collector;
+package org.apache.dubbo.metrics.collector;
 
-import org.apache.dubbo.common.metrics.model.sample.MetricSample;
+import org.apache.dubbo.metrics.model.sample.MetricSample;
 
 import java.util.List;
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/collector/stat/MetricsStatHandler.java
Patch:
@@ -15,13 +15,13 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.collector.stat;
+package org.apache.dubbo.metrics.collector.stat;
+
+import org.apache.dubbo.metrics.model.MethodMetric;
 
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicLong;
 
-import org.apache.dubbo.common.metrics.model.MethodMetric;
-
 public interface MetricsStatHandler {
     Map<MethodMetric, AtomicLong> get();
     void increase(String interfaceName, String methodName, String group, String version);

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/RTEvent.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.event;
+package org.apache.dubbo.metrics.event;
 
 /**
  * RtEvent.

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/event/RequestEvent.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.event;
+package org.apache.dubbo.metrics.event;
 
 /**
  * RequestEvent.

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/listener/MetricsListener.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.listener;
+package org.apache.dubbo.metrics.listener;
 
-import org.apache.dubbo.common.metrics.event.MetricsEvent;
+import org.apache.dubbo.metrics.event.MetricsEvent;
 
 /**
  * Metrics Listener.

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MethodMetric.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.model;
+package org.apache.dubbo.metrics.model;
 
 import java.util.HashMap;
 import java.util.Map;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MetricsCategory.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.model;
+package org.apache.dubbo.metrics.model;
 
 /**
  * Metric category.

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/MetricsKey.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.model;
+package org.apache.dubbo.metrics.model;
 
 public enum MetricsKey {
 

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/sample/GaugeMetricSample.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.model.sample;
+package org.apache.dubbo.metrics.model.sample;
 
-import org.apache.dubbo.common.metrics.model.MetricsCategory;
-import org.apache.dubbo.common.metrics.model.MetricsKey;
+import org.apache.dubbo.metrics.model.MetricsCategory;
+import org.apache.dubbo.metrics.model.MetricsKey;
 
 import java.util.Map;
 import java.util.function.Supplier;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/model/sample/MetricSample.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.model.sample;
+package org.apache.dubbo.metrics.model.sample;
 
-import org.apache.dubbo.common.metrics.model.MetricsCategory;
+import org.apache.dubbo.metrics.model.MetricsCategory;
 
 import java.util.Map;
 import java.util.Objects;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/report/AbstractMetricsReporterFactory.java
Patch:
@@ -15,9 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.metrics;
+package org.apache.dubbo.metrics.report;
 
-import org.apache.dubbo.common.metrics.MetricsReporterFactory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 /**

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/report/MetricsReporter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics;
+package org.apache.dubbo.metrics.report;
 
 /**
  * Metrics Reporter.

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/report/MetricsReporterFactory.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics;
+package org.apache.dubbo.metrics.report;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Adaptive;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/service/MetricsEntity.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.service;
+package org.apache.dubbo.metrics.service;
 
-import org.apache.dubbo.common.metrics.model.MetricsCategory;
+import org.apache.dubbo.metrics.model.MetricsCategory;
 
 import java.util.Map;
 import java.util.Objects;

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/service/MetricsServiceExporter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.service;
+package org.apache.dubbo.metrics.service;
 
 import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/collector/stat/DefaultMetricsStatHandler.java
Patch:
@@ -14,14 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.metrics.collector.stat;
+package org.apache.dubbo.metrics.collector.stat;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.function.BiConsumer;
 
-import org.apache.dubbo.common.metrics.model.MethodMetric;
+import org.apache.dubbo.metrics.model.MethodMetric;
 
 
 public class DefaultMetricsStatHandler implements MetricsStatHandler {

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/filter/MetricsCollectExecutor.java
Patch:
@@ -18,8 +18,7 @@
 package org.apache.dubbo.metrics.filter;
 
 import java.util.function.Supplier;
-
-import org.apache.dubbo.common.metrics.collector.DefaultMetricsCollector;
+import org.apache.dubbo.metrics.collector.DefaultMetricsCollector;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/report/nop/NopMetricsReporter.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.nop;
+package org.apache.dubbo.metrics.report.nop;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.metrics.MetricsReporter;
+import org.apache.dubbo.metrics.report.MetricsReporter;
 
 /**
  * Metrics reporter without any operations.

File: dubbo-metrics/dubbo-metrics-default/src/main/java/org/apache/dubbo/metrics/report/nop/NopMetricsReporterFactory.java
Patch:
@@ -15,11 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.nop;
+package org.apache.dubbo.metrics.report.nop;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.metrics.MetricsReporter;
-import org.apache.dubbo.common.metrics.MetricsReporterFactory;
+import org.apache.dubbo.metrics.report.MetricsReporter;
+import org.apache.dubbo.metrics.report.MetricsReporterFactory;
 
 /**
  * MetricsReporterFactory to create NopMetricsReporter.

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/metrics/event/RTEventTest.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.event;
-
-import org.apache.dubbo.common.metrics.model.MethodMetric;
+package org.apache.dubbo.metrics.metrics.event;
 
+import org.apache.dubbo.metrics.event.RTEvent;
+import org.apache.dubbo.metrics.model.MethodMetric;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/metrics/event/RequestEventTest.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.event;
-
-import org.apache.dubbo.common.metrics.model.MethodMetric;
+package org.apache.dubbo.metrics.metrics.event;
 
+import org.apache.dubbo.metrics.event.RequestEvent;
+import org.apache.dubbo.metrics.model.MethodMetric;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/metrics/model/MethodMetricTest.java
Patch:
@@ -15,8 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.model;
+package org.apache.dubbo.metrics.metrics.model;
 
+import org.apache.dubbo.metrics.model.MethodMetric;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/metrics/model/sample/MetricSampleTest.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.model.sample;
-
-import org.apache.dubbo.common.metrics.model.MetricsCategory;
+package org.apache.dubbo.metrics.metrics.model.sample;
 
+import org.apache.dubbo.metrics.model.MetricsCategory;
+import org.apache.dubbo.metrics.model.sample.MetricSample;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: dubbo-metrics/dubbo-metrics-default/src/test/java/org/apache/dubbo/metrics/metrics/service/MetricsEntityTest.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.metrics.service;
-
-import org.apache.dubbo.common.metrics.model.MetricsCategory;
+package org.apache.dubbo.metrics.metrics.service;
 
+import org.apache.dubbo.metrics.model.MetricsCategory;
+import org.apache.dubbo.metrics.service.MetricsEntity;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: dubbo-metrics/dubbo-metrics-prometheus/src/main/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsReporter.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.metrics.AbstractMetricsReporter;
+import org.apache.dubbo.metrics.report.AbstractMetricsReporter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import java.io.IOException;

File: dubbo-metrics/dubbo-metrics-prometheus/src/main/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsReporterFactory.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.dubbo.metrics.prometheus;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.metrics.MetricsReporter;
-import org.apache.dubbo.metrics.AbstractMetricsReporterFactory;
+import org.apache.dubbo.metrics.report.MetricsReporter;
+import org.apache.dubbo.metrics.report.AbstractMetricsReporterFactory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 /**

File: dubbo-metrics/dubbo-metrics-prometheus/src/test/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsReporterFactoryTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.metrics.prometheus;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.metrics.MetricsReporter;
+import org.apache.dubbo.metrics.report.MetricsReporter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.Assertions;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/CacheableRouterFactory.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.cluster;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -30,7 +31,7 @@ public abstract class CacheableRouterFactory implements RouterFactory {
 
     @Override
     public Router getRouter(URL url) {
-        return routerMap.computeIfAbsent(url.getServiceKey(), k -> createRouter(url));
+        return ConcurrentHashMapUtils.computeIfAbsent(routerMap, url.getServiceKey(), k -> createRouter(url));
     }
 
     protected abstract Router createRouter(URL url);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/ShortestResponseLoadBalance.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcStatus;
@@ -116,7 +117,7 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
         for (int i = 0; i < length; i++) {
             Invoker<T> invoker = invokers.get(i);
             RpcStatus rpcStatus = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName());
-            SlideWindowData slideWindowData = methodMap.computeIfAbsent(rpcStatus, SlideWindowData::new);
+            SlideWindowData slideWindowData = ConcurrentHashMapUtils.computeIfAbsent(methodMap, rpcStatus, SlideWindowData::new);
 
             // Calculate the estimated response time from the product of active connections and succeeded average elapsed time.
             long estimateResponse = slideWindowData.getEstimateResponse();

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/CacheableStateRouterFactory.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.cluster.router.state;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -31,7 +32,7 @@ public abstract class CacheableStateRouterFactory implements StateRouterFactory
 
     @Override
     public <T> StateRouter<T> getRouter(Class<T> interfaceClass, URL url) {
-        return routerMap.computeIfAbsent(url.getServiceKey(), k -> createRouter(interfaceClass, url));
+        return ConcurrentHashMapUtils.computeIfAbsent(routerMap, url.getServiceKey(), k -> createRouter(interfaceClass, url));
     }
 
     protected abstract <T> StateRouter<T> createRouter(Class<T> interfaceClass, URL url);

File: dubbo-common/src/main/java/org/apache/dubbo/common/beans/factory/ScopeBeanFactory.java
Patch:
@@ -24,12 +24,12 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.resource.Disposable;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.rpc.model.ScopeModelAccessor;
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -49,7 +49,7 @@ public class ScopeBeanFactory {
     private final ScopeBeanFactory parent;
     private ExtensionAccessor extensionAccessor;
     private List<ExtensionPostProcessor> extensionPostProcessors;
-    private Map<Class, AtomicInteger> beanNameIdCounterMap = new ConcurrentHashMap<>();
+    private ConcurrentHashMap<Class, AtomicInteger> beanNameIdCounterMap = new ConcurrentHashMap<>();
     private List<BeanInfo> registeredBeanInfos = new CopyOnWriteArrayList<>();
     private InstantiationStrategy instantiationStrategy;
     private AtomicBoolean destroyed = new AtomicBoolean();
@@ -183,7 +183,7 @@ private boolean containsBean(String name, Object bean) {
     }
 
     private int getNextId(Class<?> beanClass) {
-        return beanNameIdCounterMap.computeIfAbsent(beanClass, key -> new AtomicInteger()).incrementAndGet();
+        return ConcurrentHashMapUtils.computeIfAbsent(beanNameIdCounterMap, beanClass, key -> new AtomicInteger()).incrementAndGet();
     }
 
     public <T> T getBean(Class<T> type) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/AbstractDynamicConfigurationFactory.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.common.config.configcenter;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 
-import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY;
@@ -31,12 +31,12 @@
  */
 public abstract class AbstractDynamicConfigurationFactory implements DynamicConfigurationFactory {
 
-    private volatile Map<String, DynamicConfiguration> dynamicConfigurations = new ConcurrentHashMap<>();
+    private volatile ConcurrentHashMap<String, DynamicConfiguration> dynamicConfigurations = new ConcurrentHashMap<>();
 
     @Override
     public final DynamicConfiguration getDynamicConfiguration(URL url) {
         String key = url == null ? DEFAULT_KEY : url.toServiceString();
-        return dynamicConfigurations.computeIfAbsent(key, k -> createDynamicConfiguration(url));
+        return ConcurrentHashMapUtils.computeIfAbsent(dynamicConfigurations, key, k -> createDynamicConfiguration(url));
     }
 
     protected abstract DynamicConfiguration createDynamicConfiguration(URL url);

File: dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.common.store.support;
 
 import org.apache.dubbo.common.store.DataStore;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -28,7 +29,7 @@ public class SimpleDataStore implements DataStore {
 
     // <component name or id, <data-name, data-value>>
     private ConcurrentMap<String, ConcurrentMap<String, Object>> data =
-            new ConcurrentHashMap<String, ConcurrentMap<String, Object>>();
+        new ConcurrentHashMap<String, ConcurrentMap<String, Object>>();
 
     @Override
     public Map<String, Object> get(String componentName) {
@@ -50,7 +51,7 @@ public Object get(String componentName, String key) {
 
     @Override
     public void put(String componentName, String key, Object value) {
-        Map<String, Object> componentData = data.computeIfAbsent(componentName, k -> new ConcurrentHashMap<>());
+        Map<String, Object> componentData = ConcurrentHashMapUtils.computeIfAbsent(data, componentName, k -> new ConcurrentHashMap<>());
         componentData.put(key, value);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/manager/DefaultExecutorRepository.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.store.DataStore;
 import org.apache.dubbo.common.threadpool.ThreadPool;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.common.utils.ExecutorUtil;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -93,14 +94,14 @@ public DefaultExecutorRepository(ApplicationModel applicationModel) {
     @Override
     public synchronized ExecutorService createExecutorIfAbsent(URL url) {
         String executorKey = getExecutorKey(url);
-        Map<String, ExecutorService> executors = data.computeIfAbsent(executorKey, k -> new ConcurrentHashMap<>());
+        ConcurrentMap<String, ExecutorService> executors = ConcurrentHashMapUtils.computeIfAbsent(data, executorKey, k -> new ConcurrentHashMap<>());
 
         String executorCacheKey = getExecutorSecondKey(url);
 
         url = setThreadNameIfAbsent(url, executorCacheKey);
 
         URL finalUrl = url;
-        ExecutorService executor = executors.computeIfAbsent(executorCacheKey, k -> createExecutor(finalUrl));
+        ExecutorService executor = ConcurrentHashMapUtils.computeIfAbsent(executors, executorCacheKey, k -> createExecutor(finalUrl));
         // If executor has been shut down, create a new one
         if (executor.isShutdown() || executor.isTerminated()) {
             executors.remove(executorCacheKey);

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/FrameworkServiceRepository.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.model;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 
 import java.util.ArrayList;
@@ -58,7 +59,7 @@ public void registerProvider(ProviderModel providerModel) {
             // throw new IllegalStateException("Register duplicate provider for key: " + key);
         }
         String keyWithoutGroup = keyWithoutGroup(key);
-        providersWithoutGroup.computeIfAbsent(keyWithoutGroup, (k) -> new CopyOnWriteArrayList<>()).add(providerModel);
+        ConcurrentHashMapUtils.computeIfAbsent(providersWithoutGroup, keyWithoutGroup, (k) -> new CopyOnWriteArrayList<>()).add(providerModel);
     }
 
     public void unregisterProvider(ProviderModel providerModel) {
@@ -82,7 +83,7 @@ public List<ProviderModel> lookupExportedServicesWithoutGroup(String key) {
     }
 
     public void registerProviderUrl(URL url) {
-        providerUrlsWithoutGroup.computeIfAbsent(keyWithoutGroup(url.getServiceKey()), (k) -> new CopyOnWriteArrayList<>()).add(url);
+        ConcurrentHashMapUtils.computeIfAbsent(providerUrlsWithoutGroup, keyWithoutGroup(url.getServiceKey()), (k) -> new CopyOnWriteArrayList<>()).add(url);
     }
 
     public ProviderModel lookupExportedService(String serviceKey) {

File: dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/MonitorFilter.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.url.component.ServiceConfigURL;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.monitor.Monitor;
 import org.apache.dubbo.monitor.MonitorFactory;
@@ -109,7 +110,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
      */
     private AtomicInteger getConcurrent(Invoker<?> invoker, Invocation invocation) {
         String key = invoker.getInterface().getName() + "." + invocation.getMethodName();
-        return concurrents.computeIfAbsent(key, k -> new AtomicInteger());
+        return ConcurrentHashMapUtils.computeIfAbsent(concurrents, key, k -> new AtomicInteger());
     }
 
     @Override

File: dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/DubboMonitor.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.common.utils.ExecutorUtil;
 import org.apache.dubbo.monitor.Monitor;
 import org.apache.dubbo.monitor.MonitorService;
@@ -152,7 +153,7 @@ public void collect(URL url) {
         int concurrent = url.getParameter(CONCURRENT_KEY, 0);
         // init atomic reference
         Statistics statistics = new Statistics(url);
-        AtomicReference<StatisticsItem> reference = statisticsMap.computeIfAbsent(statistics, k -> new AtomicReference<>());
+        AtomicReference<StatisticsItem> reference = ConcurrentHashMapUtils.computeIfAbsent(statisticsMap, statistics, k -> new AtomicReference<>());
         // use CompareAndSet to sum
         StatisticsItem current;
         StatisticsItem update = new StatisticsItem();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/AbstractServiceDiscoveryFactory.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.registry.client;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ScopeModelAware;
 
@@ -50,7 +51,7 @@ public List<ServiceDiscovery> getAllServiceDiscoveries() {
     @Override
     public ServiceDiscovery getServiceDiscovery(URL registryURL) {
         String key = registryURL.toServiceStringWithoutResolving();
-        return discoveries.computeIfAbsent(key, k -> createDiscovery(registryURL));
+        return ConcurrentHashMapUtils.computeIfAbsent(discoveries, key, k -> createDiscovery(registryURL));
     }
 
     protected abstract ServiceDiscovery createDiscovery(URL registryURL);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ReflectionBasedServiceDiscovery.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.common.utils.JsonUtils;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.common.utils.NetUtils;
@@ -261,7 +262,7 @@ private String computeKey(ServiceInstance serviceInstance) {
     }
 
     private synchronized MetadataService getMetadataServiceProxy(ServiceInstance instance) {
-        return metadataServiceProxies.computeIfAbsent(computeKey(instance), k -> MetadataUtils.referProxy(instance).getProxy());
+        return ConcurrentHashMapUtils.computeIfAbsent(metadataServiceProxies, computeKey(instance), k -> MetadataUtils.referProxy(instance).getProxy());
     }
 
     private synchronized void destroyMetadataServiceProxy(ServiceInstance instance) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.metadata.AbstractServiceNameMapping;
 import org.apache.dubbo.metadata.MappingChangedEvent;
 import org.apache.dubbo.metadata.MappingListener;
@@ -429,7 +430,7 @@ public void stop() {
     }
 
     public Lock getAppSubscription(String key) {
-        return appSubscriptionLocks.computeIfAbsent(key, _k -> new ReentrantLock());
+        return ConcurrentHashMapUtils.computeIfAbsent(appSubscriptionLocks, key, _k -> new ReentrantLock());
     }
 
     public void removeAppSubscriptionLock(String key) {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/connection/MultiplexProtocolConnectionManager.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.remoting.api.connection;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
@@ -37,7 +38,7 @@ public MultiplexProtocolConnectionManager(FrameworkModel frameworkModel) {
 
     @Override
     public AbstractConnectionClient connect(URL url, ChannelHandler handler) {
-        final ConnectionManager manager = protocols.computeIfAbsent(url.getProtocol(), this::createSingleProtocolConnectionManager);
+        final ConnectionManager manager = ConcurrentHashMapUtils.computeIfAbsent(protocols, url.getProtocol(), this::createSingleProtocolConnectionManager);
         return manager.connect(url, handler);
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/PortUnificationExchanger.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.RemotingServer;
@@ -38,7 +39,7 @@ public class PortUnificationExchanger {
     private static final ConcurrentMap<String, RemotingServer> servers = new ConcurrentHashMap<>();
 
     public static RemotingServer bind(URL url, ChannelHandler handler) {
-        servers.computeIfAbsent(url.getAddress(), addr -> {
+        ConcurrentHashMapUtils.computeIfAbsent(servers, url.getAddress(), addr -> {
             final AbstractPortUnificationServer server;
             try {
                 server = getTransporter(url).bind(url, handler);
@@ -85,7 +86,7 @@ public static ConcurrentMap<String, RemotingServer> getServers() {
 
     public static PortUnificationTransporter getTransporter(URL url) {
         return url.getOrDefaultFrameworkModel().getExtensionLoader(PortUnificationTransporter.class)
-                .getAdaptiveExtension();
+            .getAdaptiveExtension();
     }
 
 }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractProtocol.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_SERVER_SHUTDOWN_TIMEOUT;
 import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
@@ -59,7 +60,7 @@ public abstract class AbstractProtocol implements Protocol, ScopeModelAware {
     /**
      * <host:port, ProtocolServer>
      */
-    protected final Map<String, ProtocolServer> serverMap = new ConcurrentHashMap<>();
+    protected final ConcurrentMap<String, ProtocolServer> serverMap = new ConcurrentHashMap<>();
 
     // TODO SoftReference
     protected final Set<Invoker<?>> invokers = new ConcurrentHashSet<>();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/SingleProtobufUtils.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
+
 import com.google.protobuf.BoolValue;
 import com.google.protobuf.BytesValue;
 import com.google.protobuf.DoubleValue;
@@ -110,7 +112,7 @@ public static void serialize(Object obj, OutputStream os) throws IOException {
     }
 
     private static SingleMessageMarshaller<?> getMarshaller(Class<?> clz) {
-        return MARSHALLER_CACHE.computeIfAbsent(clz, k -> new SingleMessageMarshaller(k));
+        return ConcurrentHashMapUtils.computeIfAbsent(MARSHALLER_CACHE, clz, k -> new SingleMessageMarshaller(k));
     }
 
     public static final class SingleMessageMarshaller<T extends MessageLite> {

File: dubbo-xds/src/main/java/org/apache/dubbo/registry/xds/util/protocol/AbstractProtocol.java
Patch:
@@ -43,6 +43,7 @@
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_INTERRUPTED;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_FAILED_REQUEST;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 
 public abstract class AbstractProtocol<T, S extends DeltaResource<T>> implements XdsProtocol<T>, XdsListener {
 
@@ -138,7 +139,7 @@ public Map<String, T> getResourceFromRemote(Set<String> resourceNames) {
             Consumer<Map<String, T>> futureConsumer = future::complete;
             try {
                 writeLock.lock();
-                consumerObserveMap.computeIfAbsent(consumerObserveResourceNames, key -> new ArrayList<>())
+                ConcurrentHashMapUtils.computeIfAbsent((ConcurrentHashMap<Set<String>, List<Consumer<Map<String, T>>>>)consumerObserveMap,consumerObserveResourceNames, key -> new ArrayList<>())
                     .add(futureConsumer);
             } finally {
                 writeLock.unlock();

File: dubbo-xds/src/main/java/org/apache/dubbo/rpc/cluster/router/xds/EdsEndpointManager.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.CollectionUtils;
+import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
 import org.apache.dubbo.registry.xds.util.PilotExchanger;
 import org.apache.dubbo.registry.xds.util.protocol.message.Endpoint;
@@ -45,7 +46,7 @@ public EdsEndpointManager() {
 
     public synchronized void subscribeEds(String cluster, EdsEndpointListener listener) {
 
-        Set<EdsEndpointListener> listeners = ENDPOINT_LISTENERS.computeIfAbsent(cluster, key ->
+        Set<EdsEndpointListener> listeners = ConcurrentHashMapUtils.computeIfAbsent(ENDPOINT_LISTENERS, cluster, key ->
             new ConcurrentHashSet<>()
         );
         if (CollectionUtils.isEmpty(listeners)) {
@@ -59,7 +60,7 @@ public synchronized void subscribeEds(String cluster, EdsEndpointListener listen
     }
 
     private void doSubscribeEds(String cluster) {
-        EDS_LISTENERS.computeIfAbsent(cluster, key -> endpoints -> {
+        ConcurrentHashMapUtils.computeIfAbsent(EDS_LISTENERS, cluster, key -> endpoints -> {
             Set<Endpoint> result = endpoints.values()
                 .stream()
                 .map(EndpointResult::getEndpoints)

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/AbstractDeployer.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.rpc.model.ScopeModel;
 
-import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_MONITOR_EXCEPTION;
 import static org.apache.dubbo.common.deploy.DeployState.FAILED;
@@ -41,7 +41,7 @@ public abstract class AbstractDeployer<E extends ScopeModel> implements Deployer
 
     protected volatile boolean initialized = false;
 
-    protected List<DeployListener<E>> listeners = new ArrayList<>();
+    protected List<DeployListener<E>> listeners = new CopyOnWriteArrayList<>();
 
     private E scopeModel;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/AbstractServiceDiscovery.java
Patch:
@@ -309,8 +309,9 @@ public List<URL> lookup(URL url) {
     protected void doUpdate(ServiceInstance oldServiceInstance, ServiceInstance newServiceInstance) {
         this.doUnregister(oldServiceInstance);
 
-        if (!EMPTY_REVISION.equals(getExportedServicesRevision(serviceInstance))) {
-            this.serviceInstance = newServiceInstance;
+        this.serviceInstance = newServiceInstance;
+
+        if (!EMPTY_REVISION.equals(getExportedServicesRevision(newServiceInstance))) {
             reportMetadata(newServiceInstance.getServiceMetadata());
             this.doRegister(newServiceInstance);
         }

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosNamingServiceWrapper.java
Patch:
@@ -416,7 +416,7 @@ private <R> R apply(NacosFunction<R> command) throws NacosException {
                 logger.warn(LoggerCodeConstants.REGISTRY_NACOS_EXCEPTION, "", "",
                     "Failed to request nacos naming server. " +
                         (times < retryTimes ? "Dubbo will try to retry in " + sleepMsBetweenRetries + ". " : "Exceed retry max times.") +
-                        "Try times: " + times + 1, e);
+                        "Try times: " + (times + 1), e);
                 if (times < retryTimes) {
                     try {
                         Thread.sleep(sleepMsBetweenRetries);
@@ -450,7 +450,7 @@ private void accept(NacosConsumer command) throws NacosException {
                 logger.warn(LoggerCodeConstants.REGISTRY_NACOS_EXCEPTION, "", "",
                     "Failed to request nacos naming server. " +
                         (times < retryTimes ? "Dubbo will try to retry in " + sleepMsBetweenRetries + ". " : "Exceed retry max times.") +
-                        "Try times: " + times + 1, e);
+                        "Try times: " + (times + 1), e);
                 if (times < retryTimes) {
                     try {
                         Thread.sleep(sleepMsBetweenRetries);

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosServiceDiscovery.java
Patch:
@@ -113,13 +113,15 @@ protected void doUpdate(ServiceInstance oldServiceInstance, ServiceInstance newS
         if (!Objects.equals(oldServiceInstance.getServiceName(), newServiceInstance.getServiceName()) ||
             !Objects.equals(oldServiceInstance.getAddress(), newServiceInstance.getAddress()) ||
             !Objects.equals(oldServiceInstance.getPort(), newServiceInstance.getPort())) {
-            // ignore if host-ip changed
+            // Ignore if host-ip changed. Should unregister first.
             super.doUpdate(oldServiceInstance, newServiceInstance);
             return;
         }
 
         try {
             this.serviceInstance = newServiceInstance;
+            reportMetadata(newServiceInstance.getServiceMetadata());
+
             // override without unregister
             this.doRegister(newServiceInstance);
         } catch (Exception e) {

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java
Patch:
@@ -120,7 +120,7 @@ protected void doUpdate(ServiceInstance oldServiceInstance, ServiceInstance newS
         org.apache.curator.x.discovery.ServiceInstance<ZookeeperInstance> newInstance = build(newServiceInstance);
         if (!Objects.equals(newInstance.getName(), oldInstance.getName()) ||
             !Objects.equals(newInstance.getId(), oldInstance.getId())) {
-            // ignore if id changed
+            // Ignore if id changed. Should unregister first.
             super.doUpdate(oldServiceInstance, newServiceInstance);
             return;
         }

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -36,7 +36,6 @@
 import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.common.utils.ReflectUtils;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ModuleModel;

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -643,7 +643,7 @@ public ApplicationConfig getApplication() {
 
     /**
      * @param application
-     * @deprecated Use {@link AbstractInterfaceConfig#setScopeModel(ScopeModel)}
+     * @deprecated Use {@link AbstractConfig#setScopeModel(ScopeModel)}
      */
     @Deprecated
     public void setApplication(ApplicationConfig application) {
@@ -662,7 +662,7 @@ public ModuleConfig getModule() {
 
     /**
      * @param module
-     * @deprecated Use {@link AbstractInterfaceConfig#setScopeModel(ScopeModel)}
+     * @deprecated Use {@link AbstractConfig#setScopeModel(ScopeModel)}
      */
     @Deprecated
     public void setModule(ModuleConfig module) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/support/ConsumerContextFilter.java
Patch:
@@ -41,7 +41,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER;
 import static org.apache.dubbo.common.constants.CommonConstants.ENABLE_TIMEOUT_COUNTDOWN_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_APPLICATION_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_ATTACHMENT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIME_COUNTDOWN_KEY;
 
 /**
@@ -106,7 +105,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
                 // the subsequent calls launched by the Server side will be enabled by default,
                 // and support to turn off the function on a node to get rid of the timeout control.
                 if (invoker.getUrl().getMethodParameter(methodName, ENABLE_TIMEOUT_COUNTDOWN_KEY, true)) {
-                    context.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, countDown);
+                    context.setObjectAttachment(TIME_COUNTDOWN_KEY, countDown);
 
                     TimeoutCountDown timeoutCountDown = (TimeoutCountDown) countDown;
                     if (timeoutCountDown.isExpired()) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -60,7 +60,6 @@ public class TripleProtocol extends AbstractProtocol {
      */
     public static boolean CONVERT_NO_LOWER_HEADER = false;
 
-
     public TripleProtocol(FrameworkModel frameworkModel) {
         this.frameworkModel = frameworkModel;
         this.triBuiltinService = new TriBuiltinService(frameworkModel);
@@ -80,6 +79,7 @@ public int getDefaultPort() {
         return 50051;
     }
 
+
     @Override
     public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
         URL url = invoker.getUrl();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/TripleServerStream.java
Patch:
@@ -182,6 +182,9 @@ private Http2Headers getTrailers(TriRpcStatus rpcStatus, Map<String, Object> att
         String grpcMessage = getGrpcMessage(rpcStatus);
         grpcMessage = TriRpcStatus.encodeMessage(TriRpcStatus.limitSizeTo1KB(grpcMessage));
         headers.set(TripleHeaderEnum.MESSAGE_KEY.getHeader(), grpcMessage);
+        if (!getGrpcStatusDetailEnabled()) {
+            return headers;
+        }
         Status.Builder builder = Status.newBuilder().setCode(rpcStatus.code.code)
             .setMessage(grpcMessage);
         Throwable throwable = rpcStatus.cause;

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/DefaultMultipleSerialization.java
Patch:
@@ -26,7 +26,7 @@
 public class DefaultMultipleSerialization implements MultipleSerialization {
 
     @Override
-    public void serialize(URL url, String serializeType, String clz, Object obj, OutputStream os) throws IOException {
+    public void serialize(URL url, String serializeType, Class<?> clz, Object obj, OutputStream os) throws IOException {
         serializeType = convertHessian(serializeType);
         final Serialization serialization = url.getOrDefaultFrameworkModel().getExtensionLoader(Serialization.class).getExtension(serializeType);
         final ObjectOutput serialize = serialization.serialize(null, os);
@@ -35,11 +35,11 @@ public void serialize(URL url, String serializeType, String clz, Object obj, Out
     }
 
     @Override
-    public Object deserialize(URL url, String serializeType, String clz, InputStream os) throws IOException, ClassNotFoundException {
+    public Object deserialize(URL url, String serializeType, Class<?> clz, InputStream os) throws IOException, ClassNotFoundException {
         serializeType = convertHessian(serializeType);
         final Serialization serialization = url.getOrDefaultFrameworkModel().getExtensionLoader(Serialization.class).getExtension(serializeType);
         final ObjectInput in = serialization.deserialize(null, os);
-        return in.readObject();
+        return in.readObject(clz);
     }
 
     private String convertHessian(String ser) {

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/function/NacosConsumer.java
Patch:
@@ -28,13 +28,12 @@
  * @since 3.1.5
  */
 @FunctionalInterface
-public interface NacosConsumer<T> {
+public interface NacosConsumer {
 
     /**
      * Applies this function to the given argument.
      *
-     * @param t the function argument
      * @throws NacosException if met with any error
      */
-    void accept(T t) throws NacosException;
+    void accept() throws NacosException;
 }

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/function/NacosFunction.java
Patch:
@@ -28,14 +28,13 @@
  * @since 3.1.5
  */
 @FunctionalInterface
-public interface NacosFunction<T, R> {
+public interface NacosFunction<R> {
 
     /**
      * Applies this function to the given argument.
      *
-     * @param t the function argument
      * @return the function result
      * @throws NacosException if met with any error
      */
-    R apply(T t) throws NacosException;
+    R apply() throws NacosException;
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/LoggerCodeConstants.java
Patch:
@@ -291,6 +291,8 @@ public interface LoggerCodeConstants {
 
     String PROTOCOL_FAILED_DECODE = "4-20";
 
+    String PROTOCOL_UNTRUSTED_SERIALIZE_CLASS = "4-21";
+
     // Config module
     String CONFIG_FAILED_CONNECT_REGISTRY = "5-1";
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/AllowClassNotifyListener.java
Patch:
@@ -20,7 +20,7 @@
 
 public interface AllowClassNotifyListener {
 
-    SerializeCheckStatus DEFAULT_STATUS = SerializeCheckStatus.STRICT;
+    SerializeCheckStatus DEFAULT_STATUS = SerializeCheckStatus.WARN;
 
     void notify(SerializeCheckStatus status, Set<String> prefixList);
 }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java
Patch:
@@ -544,6 +544,7 @@ void testMappingRetry() {
         FrameworkModel frameworkModel = new FrameworkModel();
         ApplicationModel applicationModel = frameworkModel.newApplication();
         ServiceConfig<DemoService> serviceConfig = new ServiceConfig<>(applicationModel.newModule());
+        serviceConfig.exported();
         ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);
         AtomicInteger count = new AtomicInteger(0);
         ServiceNameMapping serviceNameMapping = new ServiceNameMapping() {

File: dubbo-common/src/main/java/org/apache/dubbo/common/metrics/collector/stat/DefaultMetricsStatHandler.java
Patch:
@@ -53,7 +53,6 @@ protected void doIncrExecute(String interfaceName, String methodName, String gro
         this.doExecute(interfaceName,methodName,group,version,(metric,counts)->{
             AtomicLong count = counts.computeIfAbsent(metric, k -> new AtomicLong(0L));
             count.incrementAndGet();
-
         });
     }
 
@@ -69,6 +68,5 @@ public Map<MethodMetric, AtomicLong> get() {
         return counts;
     }
 
-    public  void doNotify(MethodMetric metric){}
-
+    public void doNotify(MethodMetric metric){}
 }

File: dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/filter/MetricsFilter.java
Patch:
@@ -62,7 +62,7 @@ public void onResponse(Result result, Invoker<?> invoker, Invocation invocation)
 
     @Override
     public void onError(Throwable t, Invoker<?> invoker, Invocation invocation) {
-        collect(invocation,collector-> collector.throwExecute(t));
+        collect(invocation, collector-> collector.throwExecute(t));
     }
 
     private void collect(Invocation invocation, Consumer<MetricsCollectExecutor> execute) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMapping.java
Patch:
@@ -106,7 +106,7 @@ public boolean map(URL url) {
                     if (!succeeded) {
                         int waitTime = ThreadLocalRandom.current().nextInt(casRetryWaitTime);
                         logger.info("Failed to publish service name mapping to metadata center by cas operation. " +
-                            "Times: " + casRetryTimes + ". " +
+                            "Times: " + currentRetryTimes + ". " +
                             "Next retry delay: " + waitTime + ". " +
                             "Service Interface: " + serviceInterface + ". " +
                             "Origin Content: " + oldConfigContent + ". " +

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java
Patch:
@@ -156,6 +156,9 @@ public void addServiceInstancesChangedListener(ServiceInstancesChangedListener l
 
     @Override
     public void removeServiceInstancesChangedListener(ServiceInstancesChangedListener listener) throws IllegalArgumentException {
+        if (!instanceListeners.remove(listener)) {
+            return;
+        }
         listener.getServiceNames().forEach(serviceName -> {
             ZookeeperServiceDiscoveryChangeWatcher watcher = watcherCaches.get(serviceName);
             if (watcher != null) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -230,8 +230,8 @@ public <T> Exporter<T> export(final Invoker<T> originInvoker) throws RpcExceptio
         //  subscription information to cover.
         final URL overrideSubscribeUrl = getSubscribedOverrideUrl(providerUrl);
         final OverrideListener overrideSubscribeListener = new OverrideListener(overrideSubscribeUrl, originInvoker);
-        Map<URL, NotifyListener> overrideListeners = getProviderConfigurationListener(providerUrl).getOverrideListeners();
-        overrideListeners.put(registryUrl, overrideSubscribeListener);
+        Map<URL, NotifyListener> overrideListeners = getProviderConfigurationListener(overrideSubscribeUrl).getOverrideListeners();
+        overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);
 
         providerUrl = overrideUrlWithConfig(providerUrl, overrideSubscribeListener);
         //export invoker
@@ -898,7 +898,7 @@ public void unexport() {
             try {
                 if (subscribeUrl != null) {
                     Map<URL, NotifyListener> overrideListeners = getProviderConfigurationListener(subscribeUrl).getOverrideListeners();
-                    NotifyListener listener = overrideListeners.remove(registerUrl);
+                    NotifyListener listener = overrideListeners.remove(subscribeUrl);
                     if (listener != null) {
                         if (!registry.isServiceDiscovery()) {
                             registry.unsubscribe(subscribeUrl, listener);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -82,7 +82,7 @@
 import static org.apache.dubbo.common.config.ConfigurationUtils.parseProperties;
 import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_SPLIT_PATTERN;
 import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_METADATA_STORAGE_TYPE;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_EXECUTE_DESTORY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_EXECUTE_DESTROY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_INIT_CONFIG_CENTER;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_START_MODEL;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_REFRESH_INSTANCE_ERROR;
@@ -1124,7 +1124,7 @@ private void destroyServiceDiscoveries() {
             try {
                 serviceDiscovery.destroy();
             } catch (Throwable ignored) {
-                logger.warn(CONFIG_FAILED_EXECUTE_DESTORY, "", "", ignored.getMessage(), ignored);
+                logger.warn(CONFIG_FAILED_EXECUTE_DESTROY, "", "", ignored.getMessage(), ignored);
             }
         });
         if (logger.isDebugEnabled()) {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationPostProcessor.java
Patch:
@@ -401,7 +401,7 @@ private Class<?> resolveClass(BeanDefinition beanDefinition) {
     }
 
     private Set<String> resolvePackagesToScan(Set<String> packagesToScan) {
-        Set<String> resolvedPackagesToScan = new LinkedHashSet<String>(packagesToScan.size());
+        Set<String> resolvedPackagesToScan = new LinkedHashSet<>(packagesToScan.size());
         for (String packageToScan : packagesToScan) {
             if (StringUtils.hasText(packageToScan)) {
                 String resolvedPackageToScan = environment.resolvePlaceholders(packageToScan.trim());

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeServer.java
Patch:
@@ -46,7 +46,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.READONLY_EVENT;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_FAILED_CLOSE;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_FAILED_RESPONSE;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 import static org.apache.dubbo.remoting.Constants.HEARTBEAT_CHECK_TICK;
 import static org.apache.dubbo.remoting.Constants.LEAST_HEARTBEAT_DURATION;
 import static org.apache.dubbo.remoting.Constants.TICKS_PER_WHEEL;
@@ -221,7 +221,7 @@ public void reset(URL url) {
                 startIdleCheckTask(url);
             }
         } catch (Throwable t) {
-            logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", t.getMessage(), t);
+            logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", t.getMessage(), t);
         }
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/ReconnectTimerTask.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.remoting.Client;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_FAILED_RECONNECT;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 /**
  * ReconnectTimerTask
@@ -64,7 +64,7 @@ protected void doTask(Channel channel) {
                 }
             }
         } catch (Throwable t) {
-            logger.warn(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "Exception when reconnect to remote channel " + channel.getRemoteAddress(), t);
+            logger.warn(INTERNAL_ERROR, "unknown error in remoting module", "", "Exception when reconnect to remote channel " + channel.getRemoteAddress(), t);
         }
     }
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractEndpoint.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.dubbo.remoting.transport.codec.CodecAdapter;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 import static org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel;
 
 /**
@@ -80,15 +80,15 @@ public void reset(URL url) {
                 }
             }
         } catch (Throwable t) {
-            logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", t.getMessage(), t);
+            logger.error(INTERNAL_ERROR, "", "", t.getMessage(), t);
         }
 
         try {
             if (url.hasParameter(Constants.CODEC_KEY)) {
                 this.codec = getChannelCodec(url);
             }
         } catch (Throwable t) {
-            logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", t.getMessage(), t);
+            logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", t.getMessage(), t);
         }
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/MultiMessageHandler.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.support.MultiMessage;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 /**
  * @see MultiMessage
@@ -45,11 +45,11 @@ public void received(Channel channel, Object message) throws RemotingException {
                 try {
                     handler.received(channel, obj);
                 } catch (Throwable t) {
-                    logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "MultiMessageHandler received fail.", t);
+                    logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", "MultiMessageHandler received fail.", t);
                     try {
                         handler.caught(channel, t);
                     } catch (Throwable t1) {
-                        logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "MultiMessageHandler caught fail.", t1);
+                        logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", "MultiMessageHandler caught fail.", t1);
                     }
                 }
             }

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyPortUnificationServerHandler.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 public class NettyPortUnificationServerHandler extends ByteToMessageDecoder {
 
@@ -71,7 +71,7 @@ public NettyPortUnificationServerHandler(URL url, SslContext sslCtx, boolean det
 
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        LOGGER.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "Unexpected exception from downstream before protocol detected.", cause);
+        LOGGER.error(INTERNAL_ERROR, "unknown error in remoting module", "", "Unexpected exception from downstream before protocol detected.", cause);
     }
 
     @Override
@@ -125,7 +125,7 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)
             Set<String> supported = url.getApplicationModel()
                 .getExtensionLoader(WireProtocol.class)
                 .getSupportedExtensions();
-            LOGGER.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", String.format("Can not recognize protocol from downstream=%s . "
+            LOGGER.error(INTERNAL_ERROR, "unknown error in remoting module", "", String.format("Can not recognize protocol from downstream=%s . "
                     + "preface=%s protocols=%s", ctx.channel().remoteAddress(),
                 Bytes.bytes2hex(preface),
                 supported));

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/ssl/SslClientTlsHandler.java
Patch:
@@ -29,7 +29,7 @@
 import javax.net.ssl.SSLEngine;
 import javax.net.ssl.SSLSession;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 
 public class SslClientTlsHandler extends ChannelInboundHandlerAdapter {
@@ -61,7 +61,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                 logger.info("TLS negotiation succeed with session: " + session);
                 ctx.pipeline().remove(this);
             } else {
-                logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "TLS negotiation failed when trying to accept new connection.", handshakeEvent.cause());
+                logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", "TLS negotiation failed when trying to accept new connection.", handshakeEvent.cause());
                 ctx.fireExceptionCaught(handshakeEvent.cause());
             }
         }

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/ssl/SslServerTlsHandler.java
Patch:
@@ -31,7 +31,7 @@
 import javax.net.ssl.SSLSession;
 import java.util.List;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 public class SslServerTlsHandler extends ByteToMessageDecoder {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(SslServerTlsHandler.class);
@@ -59,7 +59,7 @@ public SslServerTlsHandler(SslContext sslContext, boolean detectSsl) {
 
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "TLS negotiation failed when trying to accept new connection.", cause);
+        logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", "TLS negotiation failed when trying to accept new connection.", cause);
     }
 
     @Override
@@ -72,7 +72,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                 // Remove after handshake success.
                 ctx.pipeline().remove(this);
             } else {
-                logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "TLS negotiation failed when trying to accept new connection.", handshakeEvent.cause());
+                logger.error(INTERNAL_ERROR, "", "", "TLS negotiation failed when trying to accept new connection.", handshakeEvent.cause());
                 ctx.close();
             }
         }

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/transport/AbstractH2TransportListenerTest.java
Patch:
@@ -50,10 +50,10 @@ public void cancelByRemote(long errorCode) {
         };
         DefaultHttp2Headers headers = new DefaultHttp2Headers();
         headers.scheme(HTTPS.name())
-                .path("/foo.bar")
-                .method(HttpMethod.POST.asciiName());
+            .path("/foo.bar")
+            .method(HttpMethod.POST.asciiName());
         headers.set("foo", "bar");
-        final Map<String, Object> map = listener.headersToMap(headers);
+        final Map<String, Object> map = listener.headersToMap(headers, () -> null);
         Assertions.assertEquals(4, map.size());
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -76,7 +76,7 @@
 import static org.apache.dubbo.common.config.ConfigurationUtils.parseProperties;
 import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_SPLIT_PATTERN;
 import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_METADATA_STORAGE_TYPE;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_EXECUTE_DESTORY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_EXECUTE_DESTROY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_INIT_CONFIG_CENTER;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_START_MODEL;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_REFRESH_INSTANCE_ERROR;
@@ -1063,7 +1063,7 @@ private void destroyServiceDiscoveries() {
             try {
                 serviceDiscovery.destroy();
             } catch (Throwable ignored) {
-                logger.warn(CONFIG_FAILED_EXECUTE_DESTORY, "", "", ignored.getMessage(), ignored);
+                logger.warn(CONFIG_FAILED_EXECUTE_DESTROY, "", "", ignored.getMessage(), ignored);
             }
         });
         if (logger.isDebugEnabled()) {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationPostProcessor.java
Patch:
@@ -401,7 +401,7 @@ private Class<?> resolveClass(BeanDefinition beanDefinition) {
     }
 
     private Set<String> resolvePackagesToScan(Set<String> packagesToScan) {
-        Set<String> resolvedPackagesToScan = new LinkedHashSet<String>(packagesToScan.size());
+        Set<String> resolvedPackagesToScan = new LinkedHashSet<>(packagesToScan.size());
         for (String packageToScan : packagesToScan) {
             if (StringUtils.hasText(packageToScan)) {
                 String resolvedPackageToScan = environment.resolvePlaceholders(packageToScan.trim());

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/ConnectionHandler.java
Patch:
@@ -29,7 +29,7 @@
 
 import java.util.concurrent.TimeUnit;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 @ChannelHandler.Sharable
 public class ConnectionHandler extends ChannelInboundHandlerAdapter {
@@ -70,7 +70,7 @@ public void channelActive(ChannelHandlerContext ctx) {
 
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        log.warn(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", String.format("Channel error:%s", ctx.channel()), cause);
+        log.warn(INTERNAL_ERROR, "unknown error in remoting module", "", String.format("Channel error:%s", ctx.channel()), cause);
         ctx.close();
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/SslClientTlsHandler.java
Patch:
@@ -29,7 +29,7 @@
 import javax.net.ssl.SSLEngine;
 import javax.net.ssl.SSLSession;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 
 public class SslClientTlsHandler extends ChannelInboundHandlerAdapter {
@@ -61,7 +61,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                 logger.info("TLS negotiation succeed with session: " + session);
                 ctx.pipeline().remove(this);
             } else {
-                logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "TLS negotiation failed when trying to accept new connection.", handshakeEvent.cause());
+                logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", "TLS negotiation failed when trying to accept new connection.", handshakeEvent.cause());
                 ctx.fireExceptionCaught(handshakeEvent.cause());
             }
         }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/SslServerTlsHandler.java
Patch:
@@ -31,7 +31,7 @@
 import javax.net.ssl.SSLSession;
 import java.util.List;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 public class SslServerTlsHandler extends ByteToMessageDecoder {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(SslServerTlsHandler.class);
@@ -59,7 +59,7 @@ public SslServerTlsHandler(SslContext sslContext, boolean detectSsl) {
 
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "TLS negotiation failed when trying to accept new connection.", cause);
+        logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", "TLS negotiation failed when trying to accept new connection.", cause);
     }
 
     @Override
@@ -72,7 +72,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                 // Remove after handshake success.
                 ctx.pipeline().remove(this);
             } else {
-                logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "TLS negotiation failed when trying to accept new connection.", handshakeEvent.cause());
+                logger.error(INTERNAL_ERROR, "", "", "TLS negotiation failed when trying to accept new connection.", handshakeEvent.cause());
                 ctx.close();
             }
         }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeServer.java
Patch:
@@ -46,7 +46,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.READONLY_EVENT;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_FAILED_CLOSE;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_FAILED_RESPONSE;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 import static org.apache.dubbo.remoting.Constants.HEARTBEAT_CHECK_TICK;
 import static org.apache.dubbo.remoting.Constants.LEAST_HEARTBEAT_DURATION;
 import static org.apache.dubbo.remoting.Constants.TICKS_PER_WHEEL;
@@ -221,7 +221,7 @@ public void reset(URL url) {
                 startIdleCheckTask(url);
             }
         } catch (Throwable t) {
-            logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", t.getMessage(), t);
+            logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", t.getMessage(), t);
         }
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/ReconnectTimerTask.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.remoting.Client;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_FAILED_RECONNECT;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 /**
  * ReconnectTimerTask
@@ -64,7 +64,7 @@ protected void doTask(Channel channel) {
                 }
             }
         } catch (Throwable t) {
-            logger.warn(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "Exception when reconnect to remote channel " + channel.getRemoteAddress(), t);
+            logger.warn(INTERNAL_ERROR, "unknown error in remoting module", "", "Exception when reconnect to remote channel " + channel.getRemoteAddress(), t);
         }
     }
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractEndpoint.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.dubbo.remoting.transport.codec.CodecAdapter;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 import static org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel;
 
 /**
@@ -80,15 +80,15 @@ public void reset(URL url) {
                 }
             }
         } catch (Throwable t) {
-            logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", t.getMessage(), t);
+            logger.error(INTERNAL_ERROR, "", "", t.getMessage(), t);
         }
 
         try {
             if (url.hasParameter(Constants.CODEC_KEY)) {
                 this.codec = getChannelCodec(url);
             }
         } catch (Throwable t) {
-            logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", t.getMessage(), t);
+            logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", t.getMessage(), t);
         }
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/MultiMessageHandler.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.support.MultiMessage;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 /**
  * @see MultiMessage
@@ -45,11 +45,11 @@ public void received(Channel channel, Object message) throws RemotingException {
                 try {
                     handler.received(channel, obj);
                 } catch (Throwable t) {
-                    logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "MultiMessageHandler received fail.", t);
+                    logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", "MultiMessageHandler received fail.", t);
                     try {
                         handler.caught(channel, t);
                     } catch (Throwable t1) {
-                        logger.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "MultiMessageHandler caught fail.", t1);
+                        logger.error(INTERNAL_ERROR, "unknown error in remoting module", "", "MultiMessageHandler caught fail.", t1);
                     }
                 }
             }

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyPortUnificationServerHandler.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 public class NettyPortUnificationServerHandler extends ByteToMessageDecoder {
 
@@ -71,7 +71,7 @@ public NettyPortUnificationServerHandler(URL url, SslContext sslCtx, boolean det
 
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        LOGGER.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", "Unexpected exception from downstream before protocol detected.", cause);
+        LOGGER.error(INTERNAL_ERROR, "unknown error in remoting module", "", "Unexpected exception from downstream before protocol detected.", cause);
     }
 
     @Override
@@ -125,7 +125,7 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)
             Set<String> supported = url.getApplicationModel()
                 .getExtensionLoader(WireProtocol.class)
                 .getSupportedExtensions();
-            LOGGER.error(TRANSPORT_UNEXPECTED_EXCEPTION, "", "", String.format("Can not recognize protocol from downstream=%s . "
+            LOGGER.error(INTERNAL_ERROR, "unknown error in remoting module", "", String.format("Can not recognize protocol from downstream=%s . "
                     + "preface=%s protocols=%s", ctx.channel().remoteAddress(),
                 Bytes.bytes2hex(preface),
                 supported));

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/transport/AbstractH2TransportListenerTest.java
Patch:
@@ -50,10 +50,10 @@ public void cancelByRemote(long errorCode) {
         };
         DefaultHttp2Headers headers = new DefaultHttp2Headers();
         headers.scheme(HTTPS.name())
-                .path("/foo.bar")
-                .method(HttpMethod.POST.asciiName());
+            .path("/foo.bar")
+            .method(HttpMethod.POST.asciiName());
         headers.set("foo", "bar");
-        final Map<String, Object> map = listener.headersToMap(headers);
+        final Map<String, Object> map = listener.headersToMap(headers, () -> null);
         Assertions.assertEquals(4, map.size());
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcInvocation.java
Patch:
@@ -437,6 +437,9 @@ public void setAttachment(String key, String value) {
     public Map<String, String> getAttachments() {
         try {
             attachmentLock.lock();
+            if (attachments == null) {
+                attachments = new HashMap<>();
+            }
             return new AttachmentsAdapter.ObjectToStringMap(attachments);
         } finally {
             attachmentLock.unlock();

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -126,7 +126,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
 
         // merged from dubbox
         // we may already add some attachments into RpcContext before this filter (e.g. in rest protocol)
-        if (attachments != null) {
+        if (CollectionUtils.isNotEmptyMap(attachments)) {
             if (context.getObjectAttachments().size() > 0) {
                 context.getObjectAttachments().putAll(attachments);
             } else {
@@ -135,7 +135,8 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         }
 
         if (invocation instanceof RpcInvocation) {
-            ((RpcInvocation) invocation).setInvoker(invoker);
+            RpcInvocation rpcInvocation = (RpcInvocation) invocation;
+            rpcInvocation.setInvoker(invoker);
         }
 
         try {

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java
Patch:
@@ -58,7 +58,7 @@
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_FAILED_REFLECT;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_REFLECTIVE_OPERATION_FAILED;
 import static org.apache.dubbo.common.utils.ClassUtils.isAssignableFrom;
 
 /**
@@ -526,7 +526,7 @@ private static Object realize0(Object pojo, Class<?> type, Type genericType, fin
                                 } catch (Exception e) {
                                     String exceptionDescription = "Failed to set pojo " + dest.getClass().getSimpleName() + " property " + name
                                         + " value " + value.getClass() + ", cause: " + e.getMessage();
-                                    logger.error(COMMON_FAILED_REFLECT, "", "", exceptionDescription, e);
+                                    logger.error(COMMON_REFLECTIVE_OPERATION_FAILED, "", "", exceptionDescription, e);
                                     throw new RuntimeException(exceptionDescription, e);
                                 }
                             } else if (field != null) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -61,7 +61,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_FAILED_OVERRIDE_FIELD;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_FAILED_REFLECT;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_REFLECTIVE_OPERATION_FAILED;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_UNEXPECTED_EXCEPTION;
 import static org.apache.dubbo.common.utils.ClassUtils.isSimpleType;
 import static org.apache.dubbo.common.utils.ReflectUtils.findMethodByMethodSignature;
@@ -507,7 +507,7 @@ protected void appendAnnotation(Class<?> annotationClass, Object annotation) {
                         }
                     }
                 } catch (Throwable e) {
-                    logger.error(COMMON_FAILED_REFLECT, "", "", e.getMessage(), e);
+                    logger.error(COMMON_REFLECTIVE_OPERATION_FAILED, "", "", e.getMessage(), e);
                 }
             }
         }

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ReflectionMethodDescriptor.java
Patch:
@@ -32,7 +32,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.$INVOKE;
 import static org.apache.dubbo.common.constants.CommonConstants.$INVOKE_ASYNC;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_FAILED_REFLECT;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_REFLECTIVE_OPERATION_FAILED;
 
 public class ReflectionMethodDescriptor implements MethodDescriptor {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ReflectionMethodDescriptor.class);
@@ -58,7 +58,7 @@ public ReflectionMethodDescriptor(Method method) {
         try {
             returnTypesResult = ReflectUtils.getReturnTypes(method);
         } catch (Throwable throwable) {
-            logger.error(COMMON_FAILED_REFLECT, "", "",
+            logger.error(COMMON_REFLECTIVE_OPERATION_FAILED, "", "",
                 "fail to get return types. Method name: " + methodName + " Declaring class:" + method.getDeclaringClass()
                     .getName(), throwable);
             returnTypesResult = new Type[]{returnClass, returnClass};

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericImplFilter.java
Patch:
@@ -44,7 +44,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.$INVOKE;
 import static org.apache.dubbo.common.constants.CommonConstants.$INVOKE_ASYNC;
 import static org.apache.dubbo.common.constants.CommonConstants.GENERIC_PARAMETER_DESC;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_FAILED_REFLECT;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_REFLECTIVE_OPERATION_FAILED;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
 
 /**
@@ -196,7 +196,7 @@ public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invoca
                             }
                             field.set(targetException, exception.getExceptionMessage());
                         } catch (Throwable e) {
-                            logger.warn(COMMON_FAILED_REFLECT, "", "", e.getMessage(), e);
+                            logger.warn(COMMON_REFLECTIVE_OPERATION_FAILED, "", "", e.getMessage(), e);
                         }
                         appResponse.setException(targetException);
                     } else if (lastException != null) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java
Patch:
@@ -38,7 +38,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_ATTACHMENT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_ATTACHMENT_KEY_LOWER;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_FAILED_REFLECT;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_REFLECTIVE_OPERATION_FAILED;
 import static org.apache.dubbo.rpc.Constants.$ECHO;
 import static org.apache.dubbo.rpc.Constants.$ECHO_PARAMETER_DESC;
 import static org.apache.dubbo.rpc.Constants.ASYNC_KEY;
@@ -67,7 +67,7 @@ public static Class<?> getReturnType(Invocation invocation) {
                 }
             }
         } catch (Throwable t) {
-            logger.warn(COMMON_FAILED_REFLECT, "", "", t.getMessage(), t);
+            logger.warn(COMMON_REFLECTIVE_OPERATION_FAILED, "", "", t.getMessage(), t);
         }
         return null;
     }
@@ -97,7 +97,7 @@ public static Type[] getReturnTypes(Invocation invocation) {
                 }
             }
         } catch (Throwable t) {
-            logger.warn(COMMON_FAILED_REFLECT, "", "", t.getMessage(), t);
+            logger.warn(COMMON_REFLECTIVE_OPERATION_FAILED, "", "", t.getMessage(), t);
         }
         return null;
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/TripleClientStream.java
Patch:
@@ -52,7 +52,7 @@
 import java.util.Map;
 import java.util.concurrent.Executor;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_FAILED_REFLECT;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_REFLECTIVE_OPERATION_FAILED;
 
 
 /**
@@ -215,7 +215,7 @@ private Map<String, Object> convertNoLowerCaseHeader(Map<String, Object> attachm
                     }
                 });
             } else {
-                LOGGER.error(COMMON_FAILED_REFLECT, "", "", "Triple convertNoLowerCaseHeader error, obj is not String");
+                LOGGER.error(COMMON_REFLECTIVE_OPERATION_FAILED, "", "", "Triple convertNoLowerCaseHeader error, obj is not String");
             }
             return attachments;
         }

File: dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/DownloadZookeeperInitializer.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_DOWNLOAD_FILE;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.TESTING_REGISTRY_FAILED_TO_DOWNLOAD_ZK_FILE;
 
 /**
  * Download zookeeper binary archive.
@@ -169,7 +169,7 @@ public Response onCompleted(Response response) {
 
             @Override
             public void onThrowable(Throwable t) {
-                logger.warn(REGISTRY_FAILED_DOWNLOAD_FILE, "", "", "Failed to download the file, download url: " + url);
+                logger.warn(TESTING_REGISTRY_FAILED_TO_DOWNLOAD_ZK_FILE, "", "", "Failed to download the file, download url: " + url);
                 super.onThrowable(t);
             }
         });

File: dubbo-metadata/dubbo-metadata-report-nacos/src/main/java/org/apache/dubbo/metadata/store/nacos/NacosMetadataReport.java
Patch:
@@ -236,7 +236,7 @@ public boolean registerServiceAppMapping(String key, String group, String conten
     @Override
     public ConfigItem getConfigItem(String key, String group) {
         String content = getConfig(key, group);
-        String casMd5 = "";
+        String casMd5 = "0";
         if (StringUtils.isNotEmpty(content)) {
             casMd5 = md5Utils.getMd5(content);
         }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/wrapper/CompositeDynamicConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.function.Consumer;
 import java.util.function.Function;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 /**
  * support multiple config center, simply iterating each concrete config center.
@@ -92,7 +92,7 @@ public void close() throws Exception {
             try {
                 configuration.close();
             } catch (Exception e) {
-                logger.warn(REGISTRY_UNEXPECTED_EXCEPTION, "", "", "close dynamic configuration " + configuration.getClass().getName() + "failed: " + e.getMessage(), e);
+                logger.warn(INTERNAL_ERROR, "unknown error in configuration-center related code in common module", "", "close dynamic configuration " + configuration.getClass().getName() + "failed: " + e.getMessage(), e);
             }
         }
         configurations.clear();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/ListenerRegistryWrapper.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.List;
 import java.util.function.Consumer;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 public class ListenerRegistryWrapper implements Registry {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ListenerRegistryWrapper.class);
@@ -125,7 +125,7 @@ private void listenerEvent(Consumer<RegistryServiceListener> consumer) {
                     try {
                         consumer.accept(listener);
                     } catch (RuntimeException t) {
-                        logger.error(REGISTRY_UNEXPECTED_EXCEPTION, "", "", t.getMessage(), t);
+                        logger.error(INTERNAL_ERROR, "unknown error in registry module", "", t.getMessage(), t);
                         exception = t;
                     }
                 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -41,7 +41,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.CHECK_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_CLUSTER_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_TYPE_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.SERVICE_REGISTRY_TYPE;
@@ -203,7 +203,7 @@ public void doSubscribe(URL url, NotifyListener listener) {
                 subscribedServices = serviceNameMapping.getAndListen(this.getUrl(), url, mappingListener);
                 mappingListeners.put(url.getProtocolServiceKey(), mappingListener);
             } catch (Exception e) {
-                logger.warn(REGISTRY_UNEXPECTED_EXCEPTION, "", "", "Cannot find app mapping for service " + url.getServiceInterface() + ", will not migrate.", e);
+                logger.warn(INTERNAL_ERROR, "unknown error in registry module", "", "Cannot find app mapping for service " + url.getServiceInterface() + ", will not migrate.", e);
             }
 
             if (CollectionUtils.isEmpty(subscribedServices)) {
@@ -366,7 +366,7 @@ public synchronized void onEvent(MappingChangedEvent event) {
             logger.info("Received mapping notification from meta server, " + event);
 
             if (stopped) {
-                logger.warn(REGISTRY_UNEXPECTED_EXCEPTION, "", "", "Listener has been stopped, ignore mapping notification, check why listener is not removed.");
+                logger.warn(INTERNAL_ERROR, "", "", "Listener has been stopped, ignore mapping notification, check why listener is not removed.");
                 return;
             }
             Set<String> newApps = event.getApps();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMapping.java
Patch:
@@ -38,7 +38,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_ADDRESS_INVALID;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 public class MetadataServiceNameMapping extends AbstractServiceNameMapping {
 
@@ -101,7 +101,7 @@ public boolean map(URL url) {
                 }
             } catch (Exception e) {
                 result = false;
-                logger.warn(REGISTRY_UNEXPECTED_EXCEPTION, "", "", "Failed registering mapping to remote." + metadataReport, e);
+                logger.warn(INTERNAL_ERROR, "unknown error in registry module", "", "Failed registering mapping to remote." + metadataReport, e);
             }
         }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleHandler.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.dubbo.registry.client.migration.model.MigrationStep;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_NO_PARAMETERS_URL;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 public class MigrationRuleHandler<T> {
     public static final String DUBBO_SERVICEDISCOVERY_MIGRATION = "dubbo.application.migration.step";
@@ -89,7 +89,7 @@ private boolean refreshInvoker(MigrationStep step, Float threshold, MigrationRul
                 report(step, originStep, "true");
             } else {
                 // migrate failed, do not save new step and rule
-                logger.warn(REGISTRY_UNEXPECTED_EXCEPTION, "", "", "Migrate to " + step + " mode failed. Probably not satisfy the threshold you set "
+                logger.warn(INTERNAL_ERROR, "unknown error in registry module", "", "Migrate to " + step + " mode failed. Probably not satisfy the threshold you set "
                     + threshold + ". Please try re-publish configuration if you still after check.");
                 report(step, originStep, "false");
             }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java
Patch:
@@ -66,7 +66,7 @@
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_DESTROY_UNREGISTER_URL;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_READ_WRITE_CACHE_FILE;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_DELETE_LOCKFILE;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 import static org.apache.dubbo.common.constants.RegistryConstants.ACCEPTS_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.DYNAMIC_KEY;
@@ -566,7 +566,7 @@ private void saveProperties(URL url) {
                 registryCacheExecutor.schedule(() -> doSaveProperties(version), DEFAULT_INTERVAL_SAVE_PROPERTIES, TimeUnit.MILLISECONDS);
             }
         } catch (Throwable t) {
-            logger.warn(REGISTRY_UNEXPECTED_EXCEPTION, "", "", t.getMessage(), t);
+            logger.warn(INTERNAL_ERROR, "unknown error in registry module", "", t.getMessage(), t);
         }
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_NOTIFY_EVENT;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 import static org.apache.dubbo.registry.Constants.DEFAULT_REGISTRY_RETRY_PERIOD;
 import static org.apache.dubbo.registry.Constants.REGISTRY_RETRY_PERIOD_KEY;
 
@@ -219,7 +219,7 @@ public void register(URL url) {
                 }
                 throw new IllegalStateException("Failed to register " + url + " to registry " + getUrl().getAddress() + ", cause: " + t.getMessage(), t);
             } else {
-                logger.error(REGISTRY_UNEXPECTED_EXCEPTION, "", "", "Failed to register " + url + ", waiting for retry, cause: " + t.getMessage(), t);
+                logger.error(INTERNAL_ERROR, "unknown error in registry module", "", "Failed to register " + url + ", waiting for retry, cause: " + t.getMessage(), t);
             }
 
             // Record a failed registration request to a failed list, retry regularly
@@ -268,7 +268,7 @@ public void unregister(URL url) {
                 }
                 throw new IllegalStateException("Failed to unregister " + url + " to registry " + getUrl().getAddress() + ", cause: " + t.getMessage(), t);
             } else {
-                logger.error(REGISTRY_UNEXPECTED_EXCEPTION, "", "", "Failed to unregister " + url + ", waiting for retry, cause: " + t.getMessage(), t);
+                logger.error(INTERNAL_ERROR, "unknown error in registry module", "", "Failed to unregister " + url + ", waiting for retry, cause: " + t.getMessage(), t);
             }
 
             // Record a failed registration request to a failed list, retry regularly

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/RegistryManager.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.stream.Collectors;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_FETCH_INSTANCE;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 
 /**
  * Application Level, used to collect Registries
@@ -107,7 +107,7 @@ public void destroyAll() {
                 try {
                     registry.destroy();
                 } catch (Throwable e) {
-                    LOGGER.warn(REGISTRY_UNEXPECTED_EXCEPTION, "", "", e.getMessage(), e);
+                    LOGGER.warn(INTERNAL_ERROR, "unknown error in registry module", "", e.getMessage(), e);
                 }
             }
             registries.clear();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ProtocolPortsMetadataCustomizer.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.registry.client.metadata;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.constants.LoggerCodeConstants;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
@@ -25,7 +26,6 @@
 import org.apache.dubbo.registry.client.ServiceInstanceCustomizer;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-import org.apache.dubbo.common.constants.LoggerCodeConstants;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -55,7 +55,7 @@ public void customize(ServiceInstance serviceInstance, ApplicationModel applicat
             String protocol = url.getProtocol();
             Integer oldPort = protocols.get(protocol);
             int newPort = url.getPort();
-            if (oldPort != null) {
+            if (oldPort != null && oldPort != newPort) {
                 LOGGER.warn(LoggerCodeConstants.PROTOCOL_INCORRECT_PARAMETER_VALUES, "the protocol is listening multiple ports", "", "Same protocol " + "[" + protocol + "]" + " listens on different ports " + "[" + oldPort + "," + newPort + "]" + " will override with each other" +
                     ". The port [" + oldPort + "] is overridden with port [" + newPort + "].");
             }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/SpringCloudServiceInstanceNotificationCustomizer.java
Patch:
@@ -31,7 +31,8 @@ public void customize(List<ServiceInstance> serviceInstance) {
         for (ServiceInstance instance : serviceInstance) {
             if ("SPRING_CLOUD".equals(instance.getMetadata("preserved.register.source"))) {
                 MetadataInfo.ServiceInfo serviceInfo = new MetadataInfo.ServiceInfo("*", "*", "*", "rest", instance.getPort(), "*", new HashMap<>());
-                MetadataInfo metadataInfo = new MetadataInfo(instance.getServiceName(), "SPRING_CLOUD", new ConcurrentHashMap<>(Collections.singletonMap("*", serviceInfo))) {
+                String revision = "SPRING_CLOUD-" + instance.getServiceName() + "-" + instance.getAddress() + "-" + instance.getPort();
+                MetadataInfo metadataInfo = new MetadataInfo(instance.getServiceName(), revision, new ConcurrentHashMap<>(Collections.singletonMap("*", serviceInfo))) {
                     @Override
                     public List<ServiceInfo> getMatchedServiceInfos(ProtocolServiceKey consumerProtocolServiceKey) {
                         getServices().putIfAbsent(consumerProtocolServiceKey.getServiceKeyString(),

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/DubboShutdownHook.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.constants.CommonConstants;
+import org.apache.dubbo.common.constants.LoggerCodeConstants;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.Assert;
@@ -110,7 +111,7 @@ private void doDestroy() {
                             }
                         }
                     } catch (InterruptedException e) {
-                        logger.warn(e.getMessage(), e);
+                        logger.warn(LoggerCodeConstants.INTERNAL_INTERRUPTED, "", "", e.getMessage(), e);
                         Thread.currentThread().interrupt();
                     }
                 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -74,6 +74,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.SERVICE_EXECUTOR;
 import static org.apache.dubbo.common.constants.CommonConstants.SERVICE_NAME_MAPPING_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_ISOLATED_EXECUTOR_CONFIGURATION_ERROR;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_EXPORT_SERVICE;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_NO_METHOD_FOUND;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_SERVER_DISCONNECTED;
@@ -431,7 +432,7 @@ private void processServiceExecutor(URL url) {
         if (getExecutor() != null) {
             String mode = application.getExecutorManagementMode();
             if (!EXECUTOR_MANAGEMENT_MODE_ISOLATION.equals(mode)) {
-                logger.warn("The current executor management mode is " + mode +
+                logger.warn(COMMON_ISOLATED_EXECUTOR_CONFIGURATION_ERROR, "", "", "The current executor management mode is " + mode +
                     ", the configured service executor cannot take effect unless the mode is configured as " + EXECUTOR_MANAGEMENT_MODE_ISOLATION);
                 return;
             }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory;
 import org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration;
+import org.apache.dubbo.common.constants.LoggerCodeConstants;
 import org.apache.dubbo.common.deploy.AbstractDeployer;
 import org.apache.dubbo.common.deploy.ApplicationDeployListener;
 import org.apache.dubbo.common.deploy.ApplicationDeployer;
@@ -722,7 +723,8 @@ private void exportMetricsService() {
         try {
             metricsServiceExporter.export();
         } catch (Exception e) {
-            logger.error("exportMetricsService an exception occurred when handle starting event", e);
+            logger.error(LoggerCodeConstants.COMMON_METRICS_COLLECTOR_EXCEPTION, "", "",
+                "exportMetricsService an exception occurred when handle starting event", e);
         }
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -41,6 +41,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.CHECK_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.INTERNAL_ERROR;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_CLUSTER_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_TYPE_KEY;
@@ -207,7 +208,7 @@ public void doSubscribe(URL url, NotifyListener listener) {
                     mappingByUrl = serviceNameMapping.getAndListen(this.getUrl(), url, mappingListener);
                     mappingListeners.put(url.getProtocolServiceKey(), mappingListener);
                 } catch (Exception e) {
-                    logger.warn("Cannot find app mapping for service " + url.getServiceInterface() + ", will not migrate.", e);
+                    logger.warn(INTERNAL_ERROR, "", "", "Cannot find app mapping for service " + url.getServiceInterface() + ", will not migrate.", e);
                 }
 
                 if (CollectionUtils.isEmpty(mappingByUrl)) {

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyConnectionHandler.java
Patch:
@@ -31,6 +31,7 @@
 
 import java.util.concurrent.TimeUnit;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_FAILED_RECONNECT;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.TRANSPORT_UNEXPECTED_EXCEPTION;
 
 @ChannelHandler.Sharable
@@ -80,7 +81,7 @@ public void reconnect(Object channel) {
             try {
                 connectionClient.doConnect();
             } catch (Throwable e) {
-                LOGGER.error("Fail to connect to " + connectionClient.getChannel(), e);
+                LOGGER.error(TRANSPORT_FAILED_RECONNECT, "", "",  "Fail to connect to " + connectionClient.getChannel(), e);
             }
         }, 1, TimeUnit.SECONDS);
     }

File: dubbo-xds/src/main/java/org/apache/dubbo/registry/xds/istio/IstioEnv.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.xds.istio;
 
+import org.apache.dubbo.common.constants.LoggerCodeConstants;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.registry.xds.XdsEnv;
@@ -115,7 +116,7 @@ public String getServiceAccount() {
             try {
                 return FileUtils.readFileToString(saFile, StandardCharsets.UTF_8);
             } catch (IOException e) {
-                logger.error("Unable to read token file.", e);
+                logger.error(LoggerCodeConstants.REGISTRY_ISTIO_EXCEPTION, "File Read Failed", "", "Unable to read token file.", e);
             }
         }
 
@@ -171,7 +172,7 @@ public String getCaCert() {
             try {
                 return FileUtils.readFileToString(caFile, StandardCharsets.UTF_8);
             } catch (IOException e) {
-                logger.error("read ca file error", e);
+                logger.error(LoggerCodeConstants.REGISTRY_ISTIO_EXCEPTION, "File Read Failed", "", "read ca file error", e);
             }
         }
         return null;

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Configuration.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.NoSuchElementException;
 
 import static org.apache.dubbo.common.config.ConfigurationUtils.isEmptyValue;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_PROPERTY_MISSPELLING;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_PROPERTY_TYPE_MISMATCH;
 
 /**
  * Configuration interface, to fetch the value for the specified key.
@@ -74,7 +74,7 @@ default Integer getInteger(String key, Integer defaultValue) {
             return convert(Integer.class, key, defaultValue);
         } catch (NumberFormatException e) {
             // 0-2 Property type mismatch.
-            interfaceLevelLogger.error(COMMON_PROPERTY_MISSPELLING, "typo in property value",
+            interfaceLevelLogger.error(COMMON_PROPERTY_TYPE_MISMATCH, "typo in property value",
                 "This property requires an integer value.",
                 "Actual Class: " + getClass().getName(), e);
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/LoggerCodeConstants.java
Patch:
@@ -25,7 +25,7 @@ public interface LoggerCodeConstants {
     // common module
     String COMMON_THREAD_POOL_EXHAUSTED = "0-1";
 
-    String COMMON_PROPERTY_MISSPELLING = "0-2";
+    String COMMON_PROPERTY_TYPE_MISMATCH = "0-2";
 
     String COMMON_CACHE_PATH_INACCESSIBLE = "0-3";
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/AbstractConfigManager.java
Patch:
@@ -60,7 +60,7 @@
 import static java.util.Collections.emptyMap;
 import static java.util.Optional.ofNullable;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_PROPERTY_MISSPELLING;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_PROPERTY_TYPE_MISMATCH;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_UNEXPECTED_EXCEPTION;
 import static org.apache.dubbo.config.AbstractConfig.getTagName;
 
@@ -121,7 +121,7 @@ public void initialize() throws IllegalStateException {
             }
         } catch (Exception e) {
             String msg = "Illegal '" + ConfigKeys.DUBBO_CONFIG_MODE + "' config value [" + configModeStr + "], available values " + Arrays.toString(ConfigMode.values());
-            logger.error(COMMON_PROPERTY_MISSPELLING, "", "", msg, e);
+            logger.error(COMMON_PROPERTY_TYPE_MISMATCH, "", "", msg, e);
             throw new IllegalArgumentException(msg, e);
         }
 
@@ -506,7 +506,7 @@ public <T extends AbstractConfig> List<T> loadConfigsOfTypeFromProps(Class<T> cl
                     this.addConfig(config);
                     tmpConfigs.add(config);
                 } catch (Exception e) {
-                    logger.error(COMMON_PROPERTY_MISSPELLING, "", "", "load config failed, id: " + id + ", type:" + cls.getSimpleName(), e);
+                    logger.error(COMMON_PROPERTY_TYPE_MISMATCH, "", "", "load config failed, id: " + id + ", type:" + cls.getSimpleName(), e);
                     throw new IllegalStateException("load config failed, id: " + id + ", type:" + cls.getSimpleName());
                 } finally {
                     if (addDefaultNameConfig && key != null) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ProtocolPortsMetadataCustomizer.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.registry.client.ServiceInstanceCustomizer;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.common.constants.LoggerCodeConstants;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -55,8 +56,8 @@ public void customize(ServiceInstance serviceInstance, ApplicationModel applicat
             Integer oldPort = protocols.get(protocol);
             int newPort = url.getPort();
             if (oldPort != null) {
-                LOGGER.warn("same protocol " + "[" + protocol + "]" + " listen on different ports " + "[" + oldPort + "," + newPort + "]" + " will override with each other" +
-                    ".Override port [" + oldPort + "] with port [" + newPort + "]");
+                LOGGER.warn(LoggerCodeConstants.PROTOCOL_INCORRECT_PARAMETER_VALUES, "the protocol is listening multiple ports", "", "Same protocol " + "[" + protocol + "]" + " listens on different ports " + "[" + oldPort + "," + newPort + "]" + " will override with each other" +
+                    ". The port [" + oldPort + "] is overridden with port [" + newPort + "].");
             }
             protocols.put(protocol, newPort);
         });

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/DefaultMigrationAddressComparator.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_INCORRECT_PARAMETER_VALUES;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_PROPERTY_TYPE_MISMATCH;
 
 public class DefaultMigrationAddressComparator implements MigrationAddressComparator {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(DefaultMigrationAddressComparator.class);
@@ -75,7 +75,7 @@ public <T> boolean shouldMigrate(ClusterInvoker<T> newInvoker, ClusterInvoker<T>
         try {
             threshold = Float.parseFloat(rawThreshold);
         } catch (Exception e) {
-            logger.error(PROTOCOL_INCORRECT_PARAMETER_VALUES, "", "", "Invalid migration threshold " + rawThreshold);
+            logger.error(COMMON_PROPERTY_TYPE_MISMATCH, "", "", "Invalid migration threshold " + rawThreshold);
             threshold = DEFAULT_THREAD;
         }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/CacheableFailbackRegistry.java
Patch:
@@ -59,7 +59,7 @@
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_ADDRESS_INVALID;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_EMPTY_ADDRESS;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_URL_EVICTING;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_PROPERTY_MISSPELLING;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_PROPERTY_TYPE_MISMATCH;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_NO_PARAMETERS_URL;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_CLEAR_CACHED_URLS;
 import static org.apache.dubbo.common.constants.RegistryConstants.CATEGORY_KEY;
@@ -114,7 +114,7 @@ protected static int getIntConfig(ScopeModel scopeModel, String key, int def) {
             } catch (NumberFormatException e) {
                 // 0-2 Property type mismatch.
 
-                logger.warn(COMMON_PROPERTY_MISSPELLING, "typo in property value", "This property requires an integer value.",
+                logger.warn(COMMON_PROPERTY_TYPE_MISMATCH, "typo in property value", "This property requires an integer value.",
                     "Invalid registry properties configuration key " + key + ", value " + str);
             }
         }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
Patch:
@@ -54,7 +54,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_FAILED_DESTROY_INVOKER;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_FAILED_LOAD_MODEL;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_INCORRECT_PARAMETER_VALUES;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_PROPERTY_TYPE_MISMATCH;
 import static org.apache.dubbo.rpc.Constants.IS_SERVER_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.CALLBACK_SERVICE_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.CALLBACK_SERVICE_PROXY_KEY;
@@ -286,7 +286,7 @@ private static void increaseInstanceCount(Channel channel, String countkey) {
             }
             channel.setAttribute(countkey, count);
         } catch (Exception e) {
-            logger.error(PROTOCOL_INCORRECT_PARAMETER_VALUES, "", "", e.getMessage(), e);
+            logger.error(COMMON_PROPERTY_TYPE_MISMATCH, "", "", e.getMessage(), e);
         }
     }
 
@@ -300,7 +300,7 @@ private static void decreaseInstanceCount(Channel channel, String countkey) {
             }
             channel.setAttribute(countkey, count);
         } catch (Exception e) {
-            logger.error(PROTOCOL_INCORRECT_PARAMETER_VALUES, "", "", e.getMessage(), e);
+            logger.error(COMMON_PROPERTY_TYPE_MISMATCH, "", "", e.getMessage(), e);
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/LoggerCodeConstants.java
Patch:
@@ -212,6 +212,8 @@ public interface LoggerCodeConstants {
 
     String PROXY_TIMEOUT_RESPONSE = "3-7";
 
+    String PROXY_FAILED = "3-8";
+
     // protocol module
     String PROTOCOL_UNSUPPORTED = "4-1";
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/resource/GlobalResourcesRepository.java
Patch:
@@ -90,7 +90,7 @@ public ExecutorService getExecutorService() {
             synchronized (this) {
                 if (executorService == null || executorService.isShutdown()) {
                     if (logger.isInfoEnabled()) {
-                        logger.error("Creating global shared handler ...");
+                        logger.info("Creating global shared handler ...");
                     }
                     executorService = Executors.newCachedThreadPool(new NamedThreadFactory("Dubbo-global-shared-handler", true));
                 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ReflectionPackableMethod.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.dubbo.rpc.model.MethodDescriptor;
 import org.apache.dubbo.rpc.model.PackableMethod;
 
-import com.google.protobuf.ByteString;
 import com.google.protobuf.Message;
 
 import java.io.ByteArrayInputStream;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/MultiInstanceTest.java
Patch:
@@ -306,7 +306,7 @@ void testMultiModuleApplication() throws InterruptedException {
 
     @Test
     void testMultiProviderApplicationsStopOneByOne() {
-        FrameworkModel.destroyAll();
+        DubboBootstrap.reset();
 
         String version1 = "1.0";
         String version2 = "2.0";

File: dubbo-common/src/main/java/org/apache/dubbo/common/resource/GlobalResourcesRepository.java
Patch:
@@ -90,7 +90,7 @@ public ExecutorService getExecutorService() {
             synchronized (this) {
                 if (executorService == null || executorService.isShutdown()) {
                     if (logger.isInfoEnabled()) {
-                        logger.error("Creating global shared handler ...", new RuntimeException());
+                        logger.error("Creating global shared handler ...");
                     }
                     executorService = Executors.newCachedThreadPool(new NamedThreadFactory("Dubbo-global-shared-handler", true));
                 }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/MultiInstanceTest.java
Patch:
@@ -306,7 +306,7 @@ void testMultiModuleApplication() throws InterruptedException {
 
     @Test
     void testMultiProviderApplicationsStopOneByOne() {
-        DubboBootstrap.reset();
+        FrameworkModel.destroyAll();
 
         String version1 = "1.0";
         String version2 = "2.0";
@@ -330,7 +330,7 @@ void testMultiProviderApplicationsStopOneByOne() {
 
             providerBootstrap1 = DubboBootstrap.newInstance(frameworkModel);
             providerBootstrap1.application("provider1")
-                .registry(registryConfig)
+                .registry(new RegistryConfig(registryConfig.getAddress()))
                 .service(serviceConfig1)
                 .protocol(protocolConfig1)
                 .start();

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/MultiInstanceTest.java
Patch:
@@ -116,12 +116,13 @@ private static String getStackTraceString(Map<Thread, StackTraceElement[]> unclo
 
     @BeforeEach
     public void setup() {
-
+        FrameworkModel.destroyAll();
     }
 
     @AfterEach
     public void afterEach() {
         SysProps.clear();
+        FrameworkModel.destroyAll();
     }
 
     @Test

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Constants.java
Patch:
@@ -105,4 +105,6 @@ public interface Constants {
     String H2_SETTINGS_MAX_HEADER_LIST_SIZE_KEY = "dubbo.rpc.tri.max-header-list-size";
 
     String H2_SUPPORT_NO_LOWER_HEADER_KEY = "dubbo.rpc.tri.support-no-lower-header";
+
+    String TRI_BUILTIN_SERVICE_INIT = "dubbo.tri.builtin.service.init";
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java
Patch:
@@ -120,7 +120,8 @@ public Class<?> doCompile(ClassLoader ignored, String name, String sourceCode) t
         Boolean result = compiler.getTask(null, javaFileManager, diagnosticCollector, options,
                 null, Collections.singletonList(javaFileObject)).call();
         if (result == null || !result) {
-            throw new IllegalStateException("Compilation failed. class: " + name + ", diagnostics: " + diagnosticCollector);
+            throw new IllegalStateException("Compilation failed. class: " + name + ", diagnostics: "
+                + diagnosticCollector.getDiagnostics());
         }
         return classLoader.loadClass(name);
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java
Patch:
@@ -81,7 +81,7 @@ public Environment(ScopeModel scopeModel) {
     public void initialize() throws IllegalStateException {
         if (initialized.compareAndSet(false, true)) {
             this.propertiesConfiguration = new PropertiesConfiguration(scopeModel);
-            this.systemConfiguration = new SystemConfiguration();
+            this.systemConfiguration = new SystemConfiguration(scopeModel);
             this.environmentConfiguration = new EnvironmentConfiguration();
             this.externalConfiguration = new InmemoryConfiguration("ExternalConfig");
             this.appExternalConfiguration = new InmemoryConfiguration("AppExternalConfig");

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.common.utils.RegexProperties;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.annotation.Reference;
+import org.apache.dubbo.config.context.ConfigMode;
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.rpc.model.ModuleModel;
 import org.apache.dubbo.rpc.model.ScopeModel;
@@ -134,6 +135,8 @@ protected void preProcessRefresh() {
                 .getDefaultConsumer()
                 .orElseThrow(() -> new IllegalStateException("Default consumer is not initialized"));
         }
+        // try set properties from `dubbo.reference` if not set in current config
+        refreshWithPrefixes(super.getPrefixes(), ConfigMode.OVERRIDE_IF_ABSENT);
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/config/ServiceConfigBase.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.context.ConfigMode;
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.rpc.model.ModuleModel;
 import org.apache.dubbo.rpc.model.ScopeModel;
@@ -174,6 +175,8 @@ protected void preProcessRefresh() {
                     .getDefaultProvider()
                     .orElseThrow(() -> new IllegalStateException("Default provider is not initialized"));
         }
+        // try set properties from `dubbo.service` if not set in current config
+        refreshWithPrefixes(super.getPrefixes(), ConfigMode.OVERRIDE_IF_ABSENT);
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -272,7 +272,6 @@ private void checkConfigs() {
             ApplicationConfig.class,
             ProtocolConfig.class,
             RegistryConfig.class,
-            MetadataReportConfig.class,
             MonitorConfig.class,
             MetricsConfig.class,
             SslConfig.class);

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/SystemConfigurationTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.config;
 
+import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -44,7 +45,7 @@ class SystemConfigurationTest {
     @BeforeEach
     public void init() {
 
-        sysConfig = new SystemConfiguration();
+        sysConfig = new SystemConfiguration(ApplicationModel.defaultModel().getDefaultModule());
     }
 
     /**
@@ -114,4 +115,4 @@ enum ConfigMock {
         MockTwo
     }
 
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/MultiInstanceTest.java
Patch:
@@ -375,7 +375,7 @@ void testMultiProviderApplicationsStopOneByOne() {
             // stop provider app 2 and check threads
             providerBootstrap2.stop();
             // shutdown register center after dubbo application to avoid unregister services blocking
-            checkUnclosedThreadsOfApp(stackTraces2, "Found unclosed threads of app 2: ", null);
+            checkUnclosedThreadsOfApp(stackTraces2, "Found unclosed threads of app 2: ", new String[]{"Dubbo-framework-shared-scheduler"});
 
         } finally {
             if (providerBootstrap1 != null) {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/MetadataReportInstance.java
Patch:
@@ -29,10 +29,11 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_LOCAL_FILE_CACHE_ENABLED;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_DIRECTORY;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_METADATA_STORAGE_TYPE;
+import static org.apache.dubbo.common.constants.CommonConstants.PORT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_LOCAL_FILE_CACHE_ENABLED;
 import static org.apache.dubbo.common.utils.StringUtils.isEmpty;
 import static org.apache.dubbo.metadata.report.support.Constants.METADATA_REPORT_KEY;
 
@@ -86,6 +87,7 @@ private void init(MetadataReportConfig config, MetadataReportFactory metadataRep
             String protocol = url.getParameter(METADATA_REPORT_KEY, DEFAULT_DIRECTORY);
             url = URLBuilder.from(url)
                     .setProtocol(protocol)
+                    .setPort(url.getParameter(PORT_KEY, url.getPort()))
                     .setScopeModel(config.getScopeModel())
                     .removeParameter(METADATA_REPORT_KEY)
                     .build();

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -121,7 +121,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         long timeout = RpcUtils.getTimeout(invocation, -1);
         if (timeout != -1) {
             // pass to next hop
-            RpcContext.getClientAttachment().setObjectAttachment(TIME_COUNTDOWN_KEY, TimeoutCountDown.newCountDown(timeout, TimeUnit.MILLISECONDS));
+            RpcContext.getServerAttachment().setObjectAttachment(TIME_COUNTDOWN_KEY, TimeoutCountDown.newCountDown(timeout, TimeUnit.MILLISECONDS));
         }
 
         // merged from dubbox

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/TimeoutFilter.java
Patch:
@@ -47,7 +47,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
 
     @Override
     public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation) {
-        Object obj = RpcContext.getClientAttachment().getObjectAttachment(TIME_COUNTDOWN_KEY);
+        Object obj = RpcContext.getServerAttachment().getObjectAttachment(TIME_COUNTDOWN_KEY);
         if (obj != null) {
             TimeoutCountDown countDown = (TimeoutCountDown) obj;
             if (countDown.isExpired()) {

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -179,14 +179,16 @@ private int calculateTimeout(Invocation invocation, String methodName) {
         int timeout;
         if (countdown == null) {
             timeout = (int) RpcUtils.getTimeout(getUrl(), methodName, RpcContext.getClientAttachment(), invocation, DEFAULT_TIMEOUT);
-            if (getUrl().getParameter(ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
+            if (getUrl().getMethodParameter(methodName, ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
                 invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout); // pass timeout to remote server
             }
         } else {
             TimeoutCountDown timeoutCountDown = (TimeoutCountDown) countdown;
             timeout = (int) timeoutCountDown.timeRemaining(TimeUnit.MILLISECONDS);
             invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout);// pass timeout to remote server
         }
+
+        invocation.getObjectAttachments().remove(TIME_COUNTDOWN_KEY);
         return timeout;
     }
 }

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmInvoker.java
Patch:
@@ -286,14 +286,16 @@ private int calculateTimeout(Invocation invocation, String methodName) {
         int timeout;
         if (countdown == null) {
             timeout = (int) RpcUtils.getTimeout(getUrl(), methodName, RpcContext.getClientAttachment(), invocation, DEFAULT_TIMEOUT);
-            if (getUrl().getParameter(ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
+            if (getUrl().getMethodParameter(methodName, ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
                 invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout); // pass timeout to remote server
             }
         } else {
             TimeoutCountDown timeoutCountDown = (TimeoutCountDown) countdown;
             timeout = (int) timeoutCountDown.timeRemaining(TimeUnit.MILLISECONDS);
             invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout);// pass timeout to remote server
         }
+
+        invocation.getObjectAttachments().remove(TIME_COUNTDOWN_KEY);
         return timeout;
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -307,7 +307,7 @@ private int calculateTimeout(Invocation invocation, String methodName) {
         if (countdown == null) {
             timeout = (int) RpcUtils.getTimeout(getUrl(), methodName,
                 RpcContext.getClientAttachment(), invocation, 3000);
-            if (getUrl().getParameter(ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
+            if (getUrl().getMethodParameter(methodName, ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
                 invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY,
                     timeout); // pass timeout to remote server
             }
@@ -317,6 +317,8 @@ private int calculateTimeout(Invocation invocation, String methodName) {
             invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY,
                 timeout);// pass timeout to remote server
         }
+
+        invocation.getObjectAttachments().remove(TIME_COUNTDOWN_KEY);
         return timeout;
     }
 }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -111,7 +111,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         long timeout = RpcUtils.getTimeout(invocation, -1);
         if (timeout != -1) {
             // pass to next hop
-            RpcContext.getClientAttachment().setObjectAttachment(TIME_COUNTDOWN_KEY, TimeoutCountDown.newCountDown(timeout, TimeUnit.MILLISECONDS));
+            RpcContext.getServerAttachment().setObjectAttachment(TIME_COUNTDOWN_KEY, TimeoutCountDown.newCountDown(timeout, TimeUnit.MILLISECONDS));
         }
 
         // merged from dubbox

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/TimeoutFilter.java
Patch:
@@ -47,7 +47,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
 
     @Override
     public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation) {
-        Object obj = RpcContext.getClientAttachment().getObjectAttachment(TIME_COUNTDOWN_KEY);
+        Object obj = RpcContext.getServerAttachment().getObjectAttachment(TIME_COUNTDOWN_KEY);
         if (obj != null) {
             TimeoutCountDown countDown = (TimeoutCountDown) obj;
             if (countDown.isExpired()) {

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -179,14 +179,16 @@ private int calculateTimeout(Invocation invocation, String methodName) {
         int timeout;
         if (countdown == null) {
             timeout = (int) RpcUtils.getTimeout(getUrl(), methodName, RpcContext.getClientAttachment(), invocation, DEFAULT_TIMEOUT);
-            if (getUrl().getParameter(ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
+            if (getUrl().getMethodParameter(methodName, ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
                 invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout); // pass timeout to remote server
             }
         } else {
             TimeoutCountDown timeoutCountDown = (TimeoutCountDown) countdown;
             timeout = (int) timeoutCountDown.timeRemaining(TimeUnit.MILLISECONDS);
             invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout);// pass timeout to remote server
         }
+
+        invocation.getObjectAttachments().remove(TIME_COUNTDOWN_KEY);
         return timeout;
     }
 }

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmInvoker.java
Patch:
@@ -284,14 +284,16 @@ private int calculateTimeout(Invocation invocation, String methodName) {
         int timeout;
         if (countdown == null) {
             timeout = (int) RpcUtils.getTimeout(getUrl(), methodName, RpcContext.getClientAttachment(), invocation, DEFAULT_TIMEOUT);
-            if (getUrl().getParameter(ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
+            if (getUrl().getMethodParameter(methodName, ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
                 invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout); // pass timeout to remote server
             }
         } else {
             TimeoutCountDown timeoutCountDown = (TimeoutCountDown) countdown;
             timeout = (int) timeoutCountDown.timeRemaining(TimeUnit.MILLISECONDS);
             invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout);// pass timeout to remote server
         }
+
+        invocation.getObjectAttachments().remove(TIME_COUNTDOWN_KEY);
         return timeout;
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -306,7 +306,7 @@ private int calculateTimeout(Invocation invocation, String methodName) {
         if (countdown == null) {
             timeout = (int) RpcUtils.getTimeout(getUrl(), methodName,
                 RpcContext.getClientAttachment(), invocation, 3000);
-            if (getUrl().getParameter(ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
+            if (getUrl().getMethodParameter(methodName, ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
                 invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY,
                     timeout); // pass timeout to remote server
             }
@@ -316,6 +316,8 @@ private int calculateTimeout(Invocation invocation, String methodName) {
             invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY,
                 timeout);// pass timeout to remote server
         }
+
+        invocation.getObjectAttachments().remove(TIME_COUNTDOWN_KEY);
         return timeout;
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/RequestMetadata.java
Patch:
@@ -48,6 +48,7 @@ public class RequestMetadata {
     public PackableMethod packableMethod;
     public Map<String, Object> attachments;
     public boolean convertNoLowerHeader;
+    public boolean ignoreDefaultVersion;
 
     public DefaultHttp2Headers toHeaders() {
         DefaultHttp2Headers header = new DefaultHttp2Headers(false);
@@ -58,7 +59,7 @@ public DefaultHttp2Headers toHeaders() {
             .set(TripleHeaderEnum.CONTENT_TYPE_KEY.getHeader(), TripleConstant.CONTENT_PROTO)
             .set(HttpHeaderNames.TE, HttpHeaderValues.TRAILERS);
         setIfNotNull(header, TripleHeaderEnum.TIMEOUT.getHeader(), timeout);
-        if (!"1.0.0".equals(version)) {
+        if (!ignoreDefaultVersion || !"1.0.0".equals(version)) {
             setIfNotNull(header, TripleHeaderEnum.SERVICE_VERSION.getHeader(), version);
         }
         setIfNotNull(header, TripleHeaderEnum.SERVICE_GROUP.getHeader(), group);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -242,6 +242,7 @@ RequestMetadata createRequest(MethodDescriptor methodDescriptor, Invocation invo
             meta.packableMethod = ReflectionPackableMethod.init(methodDescriptor, url);
         }
         meta.convertNoLowerHeader = TripleProtocol.CONVERT_NO_LOWER_HEADER;
+        meta.ignoreDefaultVersion = TripleProtocol.IGNORE_1_0_0_VERSION;
         meta.method = methodDescriptor;
         meta.scheme = getSchemeFromUrl(url);
         // TODO read compressor from config

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/TripleServerStream.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dubbo.rpc.protocol.tri.stream;
 
-import io.netty.handler.codec.http2.Http2StreamChannel;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
@@ -57,6 +56,7 @@
 import io.netty.handler.codec.http2.DefaultHttp2Headers;
 import io.netty.handler.codec.http2.Http2Error;
 import io.netty.handler.codec.http2.Http2Headers;
+import io.netty.handler.codec.http2.Http2StreamChannel;
 import io.netty.util.concurrent.Future;
 
 import java.io.IOException;
@@ -288,10 +288,10 @@ private Invoker<?> getInvoker(Http2Headers headers, String serviceName) {
                 TripleHeaderEnum.SERVICE_GROUP.getHeader()).toString() : null;
         final String key = URL.buildKey(serviceName, group, version);
         Invoker<?> invoker = pathResolver.resolve(key);
-        if (invoker == null) {
+        if (invoker == null && TripleProtocol.RESOLVE_FALLBACK_TO_DEFAULT) {
             invoker = pathResolver.resolve(URL.buildKey(serviceName, group, "1.0.0"));
         }
-        if (invoker == null) {
+        if (invoker == null && TripleProtocol.RESOLVE_FALLBACK_TO_DEFAULT) {
             invoker = pathResolver.resolve(serviceName);
         }
         return invoker;

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.common.utils.RegexProperties;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.annotation.Reference;
+import org.apache.dubbo.config.context.ConfigMode;
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.rpc.model.ModuleModel;
 import org.apache.dubbo.rpc.model.ScopeModel;
@@ -134,6 +135,8 @@ protected void preProcessRefresh() {
                 .getDefaultConsumer()
                 .orElseThrow(() -> new IllegalStateException("Default consumer is not initialized"));
         }
+        // try set properties from `dubbo.reference` if not set in current config
+        refreshWithPrefixes(super.getPrefixes(), ConfigMode.OVERRIDE_IF_ABSENT);
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/config/ServiceConfigBase.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.context.ConfigMode;
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.rpc.model.ModuleModel;
 import org.apache.dubbo.rpc.model.ScopeModel;
@@ -174,6 +175,8 @@ protected void preProcessRefresh() {
                     .getDefaultProvider()
                     .orElseThrow(() -> new IllegalStateException("Default provider is not initialized"));
         }
+        // try set properties from `dubbo.service` if not set in current config
+        refreshWithPrefixes(super.getPrefixes(), ConfigMode.OVERRIDE_IF_ABSENT);
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -272,7 +272,6 @@ private void checkConfigs() {
             ApplicationConfig.class,
             ProtocolConfig.class,
             RegistryConfig.class,
-            MetadataReportConfig.class,
             MonitorConfig.class,
             MetricsConfig.class,
             SslConfig.class);

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/MetadataReportInstance.java
Patch:
@@ -29,10 +29,11 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_LOCAL_FILE_CACHE_ENABLED;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_DIRECTORY;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_METADATA_STORAGE_TYPE;
+import static org.apache.dubbo.common.constants.CommonConstants.PORT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_LOCAL_FILE_CACHE_ENABLED;
 import static org.apache.dubbo.common.utils.StringUtils.isEmpty;
 import static org.apache.dubbo.metadata.report.support.Constants.METADATA_REPORT_KEY;
 
@@ -86,6 +87,7 @@ private void init(MetadataReportConfig config, MetadataReportFactory metadataRep
             String protocol = url.getParameter(METADATA_REPORT_KEY, DEFAULT_DIRECTORY);
             url = URLBuilder.from(url)
                     .setProtocol(protocol)
+                    .setPort(url.getParameter(PORT_KEY, url.getPort()))
                     .setScopeModel(config.getScopeModel())
                     .removeParameter(METADATA_REPORT_KEY)
                     .build();

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -30,7 +30,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.EXPORT_ASYNC_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SERVICE_EXECUTOR;
 import static org.apache.dubbo.common.constants.CommonConstants.SERVICE_FILTER_KEY;
-import static org.apache.dubbo.common.constants.ProviderConstants.DEFAULT_PREFER_SERIALIZATION;
 
 /**
  * AbstractServiceConfig
@@ -131,7 +130,7 @@ public abstract class AbstractServiceConfig extends AbstractInterfaceConfig {
      * <p>
      * When this parameter is null or the serialization type specified by this parameter does not exist in the Dubbo SDK, the serialization type specified by serialization is used.
      * If the Dubbo SDK if still does not exist, the default type of the Dubbo SDK is used.
-     * For Dubbo SDK >= 3.1, <code>preferSerialization</code> takes precedence over <code>serialization</code>
+     * For Dubbo SDK >= 3.2, <code>preferSerialization</code> takes precedence over <code>serialization</code>
      * <p>
      * The configuration supports multiple, which are separated by commas.Such as:<code>fastjson2,fastjson,hessian2</code>
      */
@@ -168,7 +167,7 @@ protected void checkDefault() {
         }
 
         if (StringUtils.isBlank(preferSerialization)) {
-            preferSerialization = serialization != null ? serialization : DEFAULT_PREFER_SERIALIZATION;
+            preferSerialization = serialization;
         }
     }
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractServiceConfigTest.java
Patch:
@@ -27,7 +27,6 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.EXPORTER_LISTENER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SERVICE_FILTER_KEY;
-import static org.apache.dubbo.common.constants.ProviderConstants.DEFAULT_PREFER_SERIALIZATION;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
@@ -192,7 +191,7 @@ void testPreferSerializationDefault1() throws Exception {
         assertNull(serviceConfig.getPreferSerialization());
 
         serviceConfig.checkDefault();
-        assertThat(serviceConfig.getPreferSerialization(), equalTo(DEFAULT_PREFER_SERIALIZATION));
+        assertNull(serviceConfig.getPreferSerialization());
 
         serviceConfig = new ServiceConfig();
         serviceConfig.setSerialization("x-serialization");
@@ -208,7 +207,7 @@ void testPreferSerializationDefault2() throws Exception {
         assertNull(serviceConfig.getPreferSerialization());
 
         serviceConfig.refresh();
-        assertThat(serviceConfig.getPreferSerialization(), equalTo(DEFAULT_PREFER_SERIALIZATION));
+        assertNull(serviceConfig.getPreferSerialization());
 
         serviceConfig = new ServiceConfig();
         serviceConfig.setSerialization("x-serialization");

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java
Patch:
@@ -120,7 +120,8 @@ public Class<?> doCompile(ClassLoader ignored, String name, String sourceCode) t
         Boolean result = compiler.getTask(null, javaFileManager, diagnosticCollector, options,
                 null, Collections.singletonList(javaFileObject)).call();
         if (result == null || !result) {
-            throw new IllegalStateException("Compilation failed. class: " + name + ", diagnostics: " + diagnosticCollector);
+            throw new IllegalStateException("Compilation failed. class: " + name + ", diagnostics: "
+                + diagnosticCollector.getDiagnostics());
         }
         return classLoader.loadClass(name);
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -168,7 +168,7 @@ protected void checkDefault() {
         }
 
         if (StringUtils.isBlank(preferSerialization)) {
-            preferSerialization = DEFAULT_PREFER_SERIALIZATION;
+            preferSerialization = serialization != null ? serialization : DEFAULT_PREFER_SERIALIZATION;
         }
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2Protocol.java
Patch:
@@ -127,7 +127,7 @@ public void configServerProtocolHandler(URL url, ChannelOperator operator) {
             .frameLogger(SERVER_LOGGER)
             .build();
         ExecutorSupport executorSupport = ExecutorRepository.getInstance(url.getOrDefaultApplicationModel()).getExecutorSupport(url);
-        codec.connection().remote().flowController(new TriHttp2RemoteFlowController(codec.connection()));
+        codec.connection().remote().flowController(new TriHttp2RemoteFlowController(codec.connection(), url.getOrDefaultApplicationModel()));
         codec.connection().local().flowController().frameWriter(codec.encoder().frameWriter());
         TripleWriteQueue writeQueue = new TripleWriteQueue();
         final Http2MultiplexHandler handler = new Http2MultiplexHandler(
@@ -166,7 +166,7 @@ public void configClientPipeline(URL url, ChannelOperator operator, SslContext s
                     DEFAULT_MAX_HEADER_LIST_SIZE)))
             .frameLogger(CLIENT_LOGGER)
             .build();
-        codec.connection().remote().flowController(new TriHttp2RemoteFlowController(codec.connection()));
+        codec.connection().remote().flowController(new TriHttp2RemoteFlowController(codec.connection(), url.getOrDefaultApplicationModel()));
         codec.connection().local().flowController().frameWriter(codec.encoder().frameWriter());
         final Http2MultiplexHandler handler = new Http2MultiplexHandler(
             new TripleClientHandler(frameworkModel));

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyPortUnificationServerHandler.java
Patch:
@@ -138,7 +138,9 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)
 
     private void enableSsl(ChannelHandlerContext ctx) {
         ChannelPipeline p = ctx.pipeline();
-        p.addLast("ssl", sslCtx.newHandler(ctx.alloc()));
+        if (sslCtx != null) {
+            p.addLast("ssl", sslCtx.newHandler(ctx.alloc()));
+        }
         p.addLast("unificationA",
             new NettyPortUnificationServerHandler(url, sslCtx, false, protocols,
                 handler, dubboChannels, urlMapper, handlerMapper));

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java
Patch:
@@ -81,7 +81,7 @@ public class AccessLogFilter implements Filter {
 
     private AtomicBoolean scheduled = new AtomicBoolean();
 
-    private static final String LINE_SEPARATOR = "line.separator";
+    private final String LINE_SEPARATOR =  System.getProperty("line.separator");
 
     /**
      * Default constructor initialize demon thread for writing into access log file with names with access log key
@@ -173,7 +173,7 @@ private void processWithAccessKeyLogger(Queue<AccessLogData> logQueue, File file
         try {
             while (!logQueue.isEmpty()) {
                 writer.write(logQueue.poll().getLogMessage());
-                writer.write(System.getProperty(LINE_SEPARATOR));
+                writer.write(LINE_SEPARATOR);
             }
         } finally {
             writer.flush();

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/dubbo/DefaultHessian2FactoryInitializer.java
Patch:
@@ -24,7 +24,7 @@ public class DefaultHessian2FactoryInitializer extends AbstractHessian2FactoryIn
     @Override
     protected SerializerFactory createSerializerFactory() {
         Hessian2SerializerFactory hessian2SerializerFactory = new Hessian2SerializerFactory();
-        hessian2SerializerFactory.setAllowNonSerializable(Boolean.parseBoolean(System.getProperty("dubbo.hessian.allowNonSerializable", "false")));
+        hessian2SerializerFactory.setAllowNonSerializable(Boolean.parseBoolean(ALLOW_NON_SERIALIZABLE));
         hessian2SerializerFactory.getClassFactory().allow("org.apache.dubbo.*");
         return hessian2SerializerFactory;
     }

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/dubbo/Hessian2FactoryInitializer.java
Patch:
@@ -27,7 +27,9 @@
 @SPI(value = "default", scope = ExtensionScope.FRAMEWORK)
 public interface Hessian2FactoryInitializer {
     String ALLOW = System.getProperty("dubbo.application.hessian2.allow");
+
     String DENY = System.getProperty("dubbo.application.hessian2.deny");
+
     String WHITELIST = System.getProperty("dubbo.application.hessian2.whitelist");
 
     String ALLOW_NON_SERIALIZABLE = System.getProperty("dubbo.hessian.allowNonSerializable", "false");

File: dubbo-native/src/main/java/org/apache/dubbo/common/serialize/Serialization$Adaptive.java
Patch:
@@ -27,7 +27,7 @@ public java.lang.String getContentType()  {
 public org.apache.dubbo.common.serialize.ObjectInput deserialize(org.apache.dubbo.common.URL arg0, java.io.InputStream arg1) throws java.io.IOException {
 if (arg0 == null) throw new IllegalArgumentException("url == null");
 org.apache.dubbo.common.URL url = arg0;
-String extName = url.getParameter("serialization", "hessian2");
+String extName = url.getParameter("serialization", "adaptive");
 if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.serialize.Serialization) name from url (" + url.toString() + ") use keys([serialization])");
 ScopeModel scopeModel = ScopeModelUtil.getOrDefault(url.getScopeModel(), org.apache.dubbo.common.serialize.Serialization.class);
 org.apache.dubbo.common.serialize.Serialization extension = (org.apache.dubbo.common.serialize.Serialization)scopeModel.getExtensionLoader(org.apache.dubbo.common.serialize.Serialization.class).getExtension(extName);
@@ -36,7 +36,7 @@ public org.apache.dubbo.common.serialize.ObjectInput deserialize(org.apache.dubb
 public org.apache.dubbo.common.serialize.ObjectOutput serialize(org.apache.dubbo.common.URL arg0, java.io.OutputStream arg1) throws java.io.IOException {
 if (arg0 == null) throw new IllegalArgumentException("url == null");
 org.apache.dubbo.common.URL url = arg0;
-String extName = url.getParameter("serialization", "hessian2");
+String extName = url.getParameter("serialization", "adaptive");
 if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.serialize.Serialization) name from url (" + url.toString() + ") use keys([serialization])");
 ScopeModel scopeModel = ScopeModelUtil.getOrDefault(url.getScopeModel(), org.apache.dubbo.common.serialize.Serialization.class);
 org.apache.dubbo.common.serialize.Serialization extension = (org.apache.dubbo.common.serialize.Serialization)scopeModel.getExtensionLoader(org.apache.dubbo.common.serialize.Serialization.class).getExtension(extName);

File: dubbo-native/src/main/java/org/apache/dubbo/metadata/report/MetadataReportFactory$Adaptive.java
Patch:
@@ -28,6 +28,6 @@ public org.apache.dubbo.metadata.report.MetadataReport getMetadataReport(org.apa
 return extension.getMetadataReport(arg0);
 }
 public void destroy()  {
-throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.metadata.report.MetadataReportFactory.destroy() of interface org.apache.dubbo.metadata.report.MetadataReportFactory is not adaptive method!");
+throw new UnsupportedOperationException("The method public default void org.apache.dubbo.metadata.report.MetadataReportFactory.destroy() of interface org.apache.dubbo.metadata.report.MetadataReportFactory is not adaptive method!");
 }
 }

File: dubbo-native/src/main/java/org/apache/dubbo/registry/RegistryFactory$Adaptive.java
Patch:
@@ -21,7 +21,7 @@ public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.Regis
 public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
 if (arg0 == null) throw new IllegalArgumentException("url == null");
 org.apache.dubbo.common.URL url = arg0;
-String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
+String extName = ( url.getProtocol() == null ? "adaptive" : url.getProtocol() );
 if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
 ScopeModel scopeModel = ScopeModelUtil.getOrDefault(url.getScopeModel(), org.apache.dubbo.registry.RegistryFactory.class);
 org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)scopeModel.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/listener/ListenerInvokerWrapper.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.listener;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.constants.LoggerCodeConstants;
 import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
@@ -100,11 +101,12 @@ private void listenerEvent(Consumer<InvokerListener> consumer) {
                     try {
                         consumer.accept(listener);
                     } catch (RuntimeException t) {
-                        logger.error(t.getMessage(), t);
+                        logger.error(LoggerCodeConstants.INTERNAL_ERROR, "wrapped listener internal error", "", t.getMessage(), t);
                         exception = t;
                     }
                 }
             }
+
             if (exception != null) {
                 throw exception;
             }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/AbstractServerCallListener.java
Patch:
@@ -31,6 +31,7 @@
 import java.net.InetSocketAddress;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_TIMEOUT_SERVER;
+import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_APPLICATION_KEY;
 
 public abstract class AbstractServerCallListener implements AbstractServerCall.Listener {
 
@@ -57,6 +58,7 @@ public void invoke() {
             .remove(TripleHeaderEnum.CONSUMER_APP_NAME_KEY);
         if (null != remoteApp) {
             RpcContext.getServerContext().setRemoteApplicationName(remoteApp);
+            invocation.setAttachmentIfAbsent(REMOTE_APPLICATION_KEY, remoteApp);
         }
         final long stInMillis = System.currentTimeMillis();
         try {

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/LoggerCodeConstants.java
Patch:
@@ -71,9 +71,9 @@ public interface LoggerCodeConstants {
 
     String COMMON_FAILED_OVERRIDE_FIELD = "0-24";
 
-    String COMMON_FAILED_LOAD_MAPPING_CACHE = "0-24";
+    String COMMON_FAILED_LOAD_MAPPING_CACHE = "0-25";
 
-    String COMMON_METADATA_PROCESSOR = "0-25";
+    String COMMON_METADATA_PROCESSOR = "0-26";
 
     // registry module
     String REGISTRY_ADDRESS_INVALID = "1-1";

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -157,7 +157,7 @@ protected Object decodeBody(Channel channel, InputStream is, byte[] header) thro
                 req.setData(data);
             } catch (Throwable t) {
                 if (log.isWarnEnabled()) {
-                    log.warn("Decode request failed: " + t.getMessage(), t);
+                    log.warn(PROTOCOL_FAILED_DECODE, "", "", "Decode request failed: " + t.getMessage(), t);
                 }
                 // bad request
                 req.setBroken(true);

File: dubbo-metadata/dubbo-metadata-report-zookeeper/src/main/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReport.java
Patch:
@@ -198,7 +198,7 @@ public boolean registerServiceAppMapping(String key, String group, String conten
                 throw new IllegalArgumentException("zookeeper publishConfigCas requires stat type ticket");
             }
             String pathKey = buildPathKey(group, key);
-            zkClient.createOrUpdate(pathKey, content, false, ticket == null ? 0 : ((Stat) ticket).getVersion());
+            zkClient.createOrUpdate(pathKey, content, false, ticket == null ? null : ((Stat) ticket).getVersion());
             return true;
         } catch (Exception e) {
             logger.warn(REGISTRY_ZOOKEEPER_EXCEPTION, "", "", "zookeeper publishConfigCas failed.", e);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/zookeeper/AbstractZookeeperClient.java
Patch:
@@ -178,7 +178,7 @@ public void createOrUpdate(String path, String content, boolean ephemeral) {
     }
 
     @Override
-    public void createOrUpdate(String path, String content, boolean ephemeral, int version) {
+    public void createOrUpdate(String path, String content, boolean ephemeral, Integer version) {
         int i = path.lastIndexOf('/');
         if (i > 0) {
             create(path.substring(0, i), false, true);
@@ -224,9 +224,9 @@ protected void doClose() {
 
     protected abstract void createOrUpdateEphemeral(String path, String data);
 
-    protected abstract void createOrUpdatePersistent(String path, String data, int version);
+    protected abstract void createOrUpdatePersistent(String path, String data, Integer version);
 
-    protected abstract void createOrUpdateEphemeral(String path, String data, int version);
+    protected abstract void createOrUpdateEphemeral(String path, String data, Integer version);
 
     @Override
     public abstract boolean checkExists(String path);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/zookeeper/ZookeeperClient.java
Patch:
@@ -110,7 +110,7 @@ public interface ZookeeperClient {
      * @param ephemeral specify create mode of ZNode creation. true - EPHEMERAL, false - PERSISTENT.
      * @param ticket origin content version, if current version is not the specified version, throw exception
      */
-    void createOrUpdate(String path, String content, boolean ephemeral, int ticket);
+    void createOrUpdate(String path, String content, boolean ephemeral, Integer ticket);
 
     /**
      * Obtain the content of a ZNode.

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -178,7 +178,7 @@ private int calculateTimeout(Invocation invocation, String methodName) {
         Object countdown = RpcContext.getClientAttachment().getObjectAttachment(TIME_COUNTDOWN_KEY);
         int timeout;
         if (countdown == null) {
-            timeout = (int) RpcUtils.getTimeout(getUrl(), methodName, RpcContext.getClientAttachment(), DEFAULT_TIMEOUT);
+            timeout = (int) RpcUtils.getTimeout(getUrl(), methodName, RpcContext.getClientAttachment(), invocation, DEFAULT_TIMEOUT);
             if (getUrl().getParameter(ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
                 invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout); // pass timeout to remote server
             }

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmInvoker.java
Patch:
@@ -283,7 +283,7 @@ private int calculateTimeout(Invocation invocation, String methodName) {
         Object countdown = RpcContext.getClientAttachment().getObjectAttachment(TIME_COUNTDOWN_KEY);
         int timeout;
         if (countdown == null) {
-            timeout = (int) RpcUtils.getTimeout(getUrl(), methodName, RpcContext.getClientAttachment(), DEFAULT_TIMEOUT);
+            timeout = (int) RpcUtils.getTimeout(getUrl(), methodName, RpcContext.getClientAttachment(), invocation, DEFAULT_TIMEOUT);
             if (getUrl().getParameter(ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
                 invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout); // pass timeout to remote server
             }

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfiguration.java
Patch:
@@ -103,7 +103,7 @@ protected void doClose() throws Exception {
 
     @Override
     protected boolean doPublishConfig(String pathKey, String content) throws Exception {
-        zkClient.create(pathKey, content, false);
+        zkClient.createOrUpdate(pathKey, content, false);
         return true;
     }
 

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistry.java
Patch:
@@ -157,7 +157,7 @@ private void checkDestroyed() {
     public void doRegister(URL url) {
         try {
             checkDestroyed();
-            zkClient.create(toUrlPath(url), url.getParameter(DYNAMIC_KEY, true));
+            zkClient.create(toUrlPath(url), url.getParameter(DYNAMIC_KEY, true), false);
         } catch (Throwable e) {
             throw new RpcException("Failed to register " + url + " to zookeeper " + getUrl() + ", cause: " + e.getMessage(), e);
         }
@@ -193,7 +193,7 @@ public void doSubscribe(final URL url, final NotifyListener listener) {
                     }
                 });
 
-                zkClient.create(root, false);
+                zkClient.create(root, false, true);
 
                 List<String> services = zkClient.addChildListener(root, zkListener);
                 if (CollectionUtils.isNotEmpty(services)) {
@@ -227,7 +227,7 @@ public void doSubscribe(final URL url, final NotifyListener listener) {
                         }
 
                         // create "directories".
-                        zkClient.create(path, false);
+                        zkClient.create(path, false, true);
 
                         // Add children (i.e. service items).
                         List<String> children = zkClient.addChildListener(path, zkListener);

File: dubbo-common/src/main/java/org/apache/dubbo/config/ProtocolConfig.java
Patch:
@@ -28,6 +28,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PROTOCOL;
 import static org.apache.dubbo.common.constants.CommonConstants.SSL_ENABLED_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.THREAD_POOL_EXHAUSTED_LISTENERS_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_UNEXPECTED_EXCEPTION;
 
 /**
  * ProtocolConfig
@@ -603,7 +604,7 @@ public void mergeProtocol(ProtocolConfig sourceConfig) {
                 });
             }
         } catch (Exception e) {
-            logger.error("merge protocol config fail, error: ", e);
+            logger.error(COMMON_UNEXPECTED_EXCEPTION, "", "", "merge protocol config fail, error: ", e);
         }
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigValidationUtils.java
Patch:
@@ -100,6 +100,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.THREADPOOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.USERNAME_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_CLASS_NOT_FOUND;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_PARAMETER_FORMAT_ERROR;
 import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_REGISTER_MODE_ALL;
 import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_REGISTER_MODE_INSTANCE;
@@ -498,7 +499,7 @@ private static void checkQosDependency(ApplicationConfig config) {
             try {
                 ClassUtils.forName("org.apache.dubbo.qos.protocol.QosProtocolWrapper");
             } catch (ClassNotFoundException e) {
-                logger.warn("No QosProtocolWrapper class was found. Please check the dependency of dubbo-qos whether was imported correctly.", e);
+                logger.warn(COMMON_CLASS_NOT_FOUND, "", "", "No QosProtocolWrapper class was found. Please check the dependency of dubbo-qos whether was imported correctly.", e);
             }
         }
     }
@@ -641,7 +642,7 @@ public static void checkExtension(ScopeModel scopeModel, Class<?> type, String p
      * @param value    The Extension name
      */
     public static void checkMultiExtension(ScopeModel scopeModel, Class<?> type, String property, String value) {
-        checkMultiExtension(scopeModel,Collections.singletonList(type), property, value);
+        checkMultiExtension(scopeModel, Collections.singletonList(type), property, value);
     }
 
     public static void checkMultiExtension(ScopeModel scopeModel, List<Class<?>> types, String property, String value) {

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/ConfigValidationUtilsTest.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_CLASS_NOT_FOUND;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.never;
@@ -101,7 +102,7 @@ void testValidateApplicationConfig() throws Exception {
         try (MockedStatic<ConfigValidationUtils> mockedStatic = Mockito.mockStatic(ConfigValidationUtils.class);) {
             mockedStatic.when(() -> ConfigValidationUtils.validateApplicationConfig(any())).thenCallRealMethod();
             ApplicationConfig config = new ApplicationConfig();
-            Assertions.assertThrows(IllegalStateException.class,() -> {
+            Assertions.assertThrows(IllegalStateException.class, () -> {
                 ConfigValidationUtils.validateApplicationConfig(config);
             });
 
@@ -140,7 +141,7 @@ void testCheckQosInApplicationConfig() throws Exception {
 
         config.setQosEnable(true);
         mock.validateApplicationConfig(config);
-        verify(loggerMock).warn(eq("No QosProtocolWrapper class was found. Please check the dependency of dubbo-qos whether was imported correctly."), any());
+        verify(loggerMock).warn(eq(COMMON_CLASS_NOT_FOUND), eq(""), eq(""), eq("No QosProtocolWrapper class was found. Please check the dependency of dubbo-qos whether was imported correctly."), any());
     }
 
     private void injectField(Field field, Object newValue) throws Exception {

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/EmbeddedZooKeeper.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.UUID;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_ZOOKEEPER_SERVER_ERROR;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_STOP_ZOOKEEPER;
 
 /**
  * from: https://github.com/spring-projects/spring-xd/blob/v1.3.1.RELEASE/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/zookeeper/ZooKeeperUtils.java
@@ -38,7 +39,6 @@
  * <p>
  * NOTE: at least an external standalone server (if not an ensemble) are recommended, even for
  * {@link org.springframework.xd.dirt.server.singlenode.SingleNodeApplication}
- *
  */
 public class EmbeddedZooKeeper implements SmartLifecycle {
 
@@ -187,7 +187,7 @@ public synchronized void stop() {
                 zkServerThread = null;
             } catch (InterruptedException e) {
                 Thread.currentThread().interrupt();
-                logger.warn("Interrupted while waiting for embedded ZooKeeper to exit");
+                logger.warn(REGISTRY_FAILED_STOP_ZOOKEEPER, "", "", "Interrupted while waiting for embedded ZooKeeper to exit");
                 // abandoning zk thread
                 zkServerThread = null;
             }
@@ -223,7 +223,7 @@ public void run() {
             try {
                 Properties properties = new Properties();
                 File file = new File(System.getProperty("java.io.tmpdir")
-                        + File.separator + UUID.randomUUID());
+                    + File.separator + UUID.randomUUID());
                 file.deleteOnExit();
                 properties.setProperty("dataDir", file.getAbsolutePath());
                 properties.setProperty("clientPort", String.valueOf(clientPort));

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfiguration.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_CONNECT_REGISTRY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_ZOOKEEPER_EXCEPTION;
 
 public class ZookeeperDynamicConfiguration extends TreePathDynamicConfiguration {
 
@@ -116,7 +117,7 @@ public boolean publishConfigCas(String key, String group, String content, Object
             zkClient.createOrUpdate(pathKey, content, false, ticket == null ? 0 : ((Stat) ticket).getVersion());
             return true;
         } catch (Exception e) {
-            logger.warn("zookeeper publishConfigCas failed.", e);
+            logger.warn(REGISTRY_ZOOKEEPER_EXCEPTION, "", "", "zookeeper publishConfigCas failed.", e);
             return false;
         }
     }

File: dubbo-metadata/dubbo-metadata-report-nacos/src/main/java/org/apache/dubbo/metadata/store/nacos/NacosMetadataReport.java
Patch:
@@ -93,7 +93,7 @@ public NacosConfigServiceWrapper buildConfigService(URL url) {
             configService = new NacosConfigServiceWrapper(NacosFactory.createConfigService(nacosProperties));
         } catch (NacosException e) {
             if (logger.isErrorEnabled()) {
-                logger.error(e.getErrMsg(), e);
+                logger.error(REGISTRY_NACOS_EXCEPTION, "", "", e.getErrMsg(), e);
             }
             throw new IllegalStateException(e);
         }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -244,6 +244,9 @@ protected void checkDefault() {
         if (executorManagementMode == null) {
             executorManagementMode = EXECUTOR_MANAGEMENT_MODE_DEFAULT;
         }
+        if (enableFileCache == null) {
+            enableFileCache = Boolean.TRUE;
+        }
     }
 
     @Parameter(key = APPLICATION_KEY, required = true)

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/DubboShutdownHook.java
Patch:
@@ -111,6 +111,7 @@ private void doDestroy() {
                         }
                     } catch (InterruptedException e) {
                         logger.warn(e.getMessage(), e);
+                        Thread.currentThread().interrupt();
                     }
                 }
             }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/InternalServiceConfigBuilder.java
Patch:
@@ -304,7 +304,7 @@ protected InternalServiceConfigBuilder<T> getThis() {
     }
 
     private ApplicationConfig getApplicationConfig() {
-        return applicationModel.getApplicationConfigManager().getApplication().get();
+        return applicationModel.getApplicationConfigManager().getApplicationOrElseThrow();
     }
 
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/utils/UrlUtils.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.transport.CodecSupport;
 
-
 import java.util.Collection;
 import java.util.Collections;
 import java.util.LinkedHashSet;
@@ -82,7 +81,8 @@ public static Byte serializationId(URL url) {
      */
     public static String serializationOrDefault(URL url) {
         //noinspection OptionalGetWithoutIsPresent
-        return allSerializations(url).stream().findFirst().get();
+        Optional<String> serializations = allSerializations(url).stream().findFirst();
+        return serializations.orElseGet(DefaultSerializationSelector::getDefaultRemotingSerialization);
     }
 
     /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboConfigBeanInitializer.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.config.spring.context;
 
+import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.config.AbstractConfig;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ConsumerConfig;
@@ -33,8 +35,6 @@
 import org.apache.dubbo.config.spring.reference.ReferenceBeanManager;
 import org.apache.dubbo.rpc.model.ModuleModel;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.FatalBeanException;
 import org.springframework.beans.factory.BeanFactory;
@@ -59,7 +59,7 @@ public class DubboConfigBeanInitializer implements BeanFactoryAware, Initializin
 
     public static String BEAN_NAME = "dubboConfigBeanInitializer";
 
-    private final Log logger = LogFactory.getLog(getClass());
+    private final Logger logger = LoggerFactory.getLogger(getClass());
 
     private AtomicBoolean initialized = new AtomicBoolean(false);
     private ConfigurableListableBeanFactory beanFactory;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/reference/ReferenceCreator.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.config.spring.reference;
 
+import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.config.AbstractConfig;
 import org.apache.dubbo.config.ArgumentConfig;
 import org.apache.dubbo.config.ConsumerConfig;
@@ -32,8 +34,6 @@
 import org.apache.dubbo.rpc.model.ModuleModel;
 
 import com.alibaba.spring.util.AnnotationUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.springframework.beans.propertyeditors.StringTrimmerEditor;
 import org.springframework.context.ApplicationContext;
 import org.springframework.core.convert.support.DefaultConversionService;
@@ -66,7 +66,7 @@ public class ReferenceCreator {
 
     private static final String METHOD = "Method";
 
-    protected final Log logger = LogFactory.getLog(getClass());
+    protected final Logger logger = LoggerFactory.getLogger(getClass());
 
     protected final Map<String, Object> attributes;
 

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/context/event/WelcomeLogoApplicationListener.java
Patch:
@@ -18,8 +18,9 @@
 
 import org.apache.dubbo.common.Version;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+
+import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.LoggerFactory;
 import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;
 import org.springframework.boot.logging.LoggingApplicationListener;
 import org.springframework.context.ApplicationListener;

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -135,7 +135,7 @@ public abstract class AbstractServiceConfig extends AbstractInterfaceConfig {
      * <p>
      * The configuration supports multiple, which are separated by commas.Such as:<code>fastjson2,fastjson,hessian2</code>
      */
-    private String preferSerialization; // default:hessian2
+    private String preferSerialization; // default:fastjson2,hessian2
 
     /**
      * Weather the service is export asynchronously

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Constants.java
Patch:
@@ -82,7 +82,7 @@ public interface Constants {
     /**
      * Prefer serialization
      */
-    String PREFER_SERIALIZATION_KEY = "prefer_serialization";
+    String PREFER_SERIALIZATION_KEY = "prefer.serialization";
 
     String DEFAULT_REMOTING_SERIALIZATION_PROPERTY_KEY = "DUBBO_DEFAULT_SERIALIZATION";
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/utils/UrlUtils.java
Patch:
@@ -57,7 +57,7 @@ public static int getHeartbeat(URL url) {
      */
     public static Byte serializationId(URL url) {
         Byte serializationId;
-        // Obtain the value from prefer_serialization. Such as:fastjson2,hessian2
+        // Obtain the value from prefer_serialization. Such as.fastjson2,hessian2
         List<String> preferSerials = preferSerialization(url);
         for (String preferSerial : preferSerials) {
             if ((serializationId = CodecSupport.getIDByName(preferSerial)) != null) {
@@ -81,6 +81,7 @@ public static Byte serializationId(URL url) {
      * @return {@link String}
      */
     public static String serializationOrDefault(URL url) {
+        //noinspection OptionalGetWithoutIsPresent
         return allSerializations(url).stream().findFirst().get();
     }
 
@@ -92,8 +93,7 @@ public static String serializationOrDefault(URL url) {
      */
     public static Collection<String> allSerializations(URL url) {
         // preferSerialization -> serialization -> default serialization
-        Set<String> serializations = new LinkedHashSet<>();
-        UrlUtils.preferSerialization(url).forEach(serializations::add);
+        Set<String> serializations = new LinkedHashSet<>(preferSerialization(url));
         Optional.ofNullable(url.getParameter(SERIALIZATION_KEY)).filter(StringUtils::isNotBlank).ifPresent(serializations::add);
         serializations.add(DefaultSerializationSelector.getDefaultRemotingSerialization());
         return Collections.unmodifiableSet(serializations);

File: dubbo-test/dubbo-test-modules/src/test/java/org/apache/dubbo/dependency/FileTest.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
@@ -416,7 +417,7 @@ public void readSPI(File path, List<String> spis) {
                     absolutePath = absolutePath.substring(absolutePath.lastIndexOf("src" + File.separator + "main" + File.separator + "java" + File.separator)
                         + ("src" + File.separator + "main" + File.separator + "java" + File.separator).length());
                     absolutePath = absolutePath.substring(0, absolutePath.lastIndexOf(".java"));
-                    absolutePath = absolutePath.replaceAll(File.separator, ".");
+                    absolutePath = absolutePath.replaceAll(Matcher.quoteReplacement(File.separator), ".");
                     spis.add(absolutePath);
                 }
             }
@@ -439,7 +440,7 @@ public void readSPIResource(File path, Map<File, String> spis) {
                 String absolutePath = path.getAbsolutePath();
                 absolutePath = absolutePath.substring(absolutePath.lastIndexOf("src" + File.separator + "main" + File.separator + "resources" + File.separator + "META-INF" + File.separator + "dubbo" + File.separator + "internal" + File.separator)
                     + ("src" + File.separator + "main" + File.separator + "resources" + File.separator + "META-INF" + File.separator + "dubbo" + File.separator + "internal" + File.separator).length());
-                absolutePath = absolutePath.replaceAll( File.separator, ".");
+                absolutePath = absolutePath.replaceAll(Matcher.quoteReplacement(File.separator), ".");
                 spis.put(path, absolutePath);
             }
         }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/RegistryConstants.java
Patch:
@@ -140,6 +140,7 @@ public interface RegistryConstants {
     float DEFAULT_HASHMAP_LOAD_FACTOR = 0.75f;
 
     String ENABLE_EMPTY_PROTECTION_KEY = "enable-empty-protection";
+    boolean DEFAULT_ENABLE_EMPTY_PROTECTION = false;
     String REGISTER_CONSUMER_URL_KEY = "register-consumer-url";
 
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -314,7 +314,6 @@ protected void subscribeURLs(URL url, NotifyListener listener, Set<String> servi
             ServiceInstancesChangedListener serviceInstancesChangedListener = serviceListeners.get(serviceNamesKey);
             if (serviceInstancesChangedListener == null) {
                 serviceInstancesChangedListener = serviceDiscovery.createListener(serviceNames);
-                serviceInstancesChangedListener.setUrl(url);
                 for (String serviceName : serviceNames) {
                     List<ServiceInstance> serviceInstances = serviceDiscovery.getInstances(serviceName);
                     if (CollectionUtils.isNotEmpty(serviceInstances)) {
@@ -325,7 +324,6 @@ protected void subscribeURLs(URL url, NotifyListener listener, Set<String> servi
             }
 
             if (!serviceInstancesChangedListener.isDestroyed()) {
-                serviceInstancesChangedListener.setUrl(url);
                 listener.addServiceListener(serviceInstancesChangedListener);
                 serviceInstancesChangedListener.addListenerAndNotify(url, listener);
                 serviceDiscovery.addServiceInstancesChangedListener(serviceInstancesChangedListener);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListenerTest.java
Patch:
@@ -113,7 +113,7 @@ public class ServiceInstancesChangedListenerTest {
     static URL multipleProtocolsConsumerURL = URL.valueOf("dubbo,tri://127.0.0.1/org.apache.dubbo.demo.DemoService?interface=org.apache.dubbo.demo.DemoService&protocol=dubbo,tri&registry_cluster=default");
     static URL noProtocolConsumerURL = URL.valueOf("consumer://127.0.0.1/org.apache.dubbo.demo.DemoService?interface=org.apache.dubbo.demo.DemoService&registry_cluster=default");
     static URL singleProtocolsConsumerURL = URL.valueOf("tri://127.0.0.1/org.apache.dubbo.demo.DemoService?interface=org.apache.dubbo.demo.DemoService&protocol=tri&registry_cluster=default");
-    static URL registryURL = URL.valueOf("dubbo://127.0.0.1:2181/org.apache.dubbo.demo.RegistryService");
+    static URL registryURL = URL.valueOf("dubbo://127.0.0.1:2181/org.apache.dubbo.demo.RegistryService?enable-empty-protection=true");
 
     static MetadataInfo metadataInfo_111;
     static MetadataInfo metadataInfo_222;

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java
Patch:
@@ -69,6 +69,7 @@
 import static org.apache.dubbo.common.constants.RegistryConstants.CONFIGURATORS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONSUMERS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_CATEGORY;
+import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_ENABLE_EMPTY_PROTECTION;
 import static org.apache.dubbo.common.constants.RegistryConstants.EMPTY_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.ENABLE_EMPTY_PROTECTION_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.PROVIDERS_CATEGORY;
@@ -545,7 +546,7 @@ public void destroy() {
     private List<URL> toUrlWithEmpty(URL consumerURL, Collection<Instance> instances) {
         List<URL> urls = buildURLs(consumerURL, instances);
         // Nacos does not support configurators and routers from registry, so all notifications are of providers type.
-        if (urls.size() == 0 && !getUrl().getParameter(ENABLE_EMPTY_PROTECTION_KEY, true)) {
+        if (urls.size() == 0 && !getUrl().getParameter(ENABLE_EMPTY_PROTECTION_KEY, DEFAULT_ENABLE_EMPTY_PROTECTION)) {
             logger.warn(REGISTRY_NACOS_EXCEPTION, "", "", "Received empty url address list and empty protection is disabled, will clear current available addresses");
             URL empty = URLBuilder.from(consumerURL)
                 .setProtocol(EMPTY_PROTOCOL)

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/RouterChainTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.cluster.filter.DemoService;
-
 import org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher;
 import org.apache.dubbo.rpc.cluster.router.condition.config.AppStateRouter;
 import org.apache.dubbo.rpc.cluster.router.condition.config.ListenableStateRouter;
@@ -36,6 +35,7 @@
 import org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleManager;
 import org.apache.dubbo.rpc.cluster.router.state.BitList;
 import org.apache.dubbo.rpc.model.FrameworkModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
@@ -120,7 +120,7 @@ public void testRoute() {
         Invoker<DemoService> invoker5 = createNormalInvoker(map5);
 
         BitList<Invoker<DemoService>> invokers = new BitList<>(Arrays.asList(mockInvoker, invoker1, invoker2, invoker3, invoker4, invoker5));
-        routerChain.setInvokers(invokers);
+        routerChain.setInvokers(invokers, () -> {});
 
         // mesh rule for MeshStateRouter
         MeshRuleManager meshRuleManager = mockInvoker.getUrl().getOrDefaultModuleModel().getBeanFactory().getBean(MeshRuleManager.class);

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalanceTest.java
Patch:
@@ -93,7 +93,7 @@ void testNormalWhenRouterEnabled() {
         Invoker<LoadBalanceBaseTest> result = lb.select(invokers, url, invocation);
 
         for (int i = 0; i < 100; i++) {
-            routerChain.setInvokers(new BitList<>(invokers));
+            routerChain.setInvokers(new BitList<>(invokers), () -> {});
             List<Invoker<LoadBalanceBaseTest>> routeInvokers = routerChain.route(url, new BitList<>(invokers), invocation);
             Invoker<LoadBalanceBaseTest> finalInvoker = lb.select(routeInvokers, url, invocation);
             Assertions.assertEquals(result, finalInvoker);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/pu/PortUnificationTransporter.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
 
-@SPI(value = "netty", scope = ExtensionScope.FRAMEWORK)
+@SPI(value = "netty4", scope = ExtensionScope.FRAMEWORK)
 public interface PortUnificationTransporter {
 
     @Adaptive({Constants.SERVER_KEY, Constants.TRANSPORTER_KEY})

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyPortUnificationTransporter.java
Patch:
@@ -25,7 +25,7 @@
 
 public class NettyPortUnificationTransporter implements PortUnificationTransporter {
 
-    public static final String NAME = "netty";
+    public static final String NAME = "netty4";
 
     @Override
     public AbstractPortUnificationServer bind(URL url, ChannelHandler handler) throws RemotingException {

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassUtils.java
Patch:
@@ -26,6 +26,7 @@
 import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Comparator;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -575,6 +576,7 @@ public static String[] getDeclaredMethodNames(Class<?> tClass) {
                 }
             }
         }
+        dmns.sort(Comparator.naturalOrder());
         return dmns.toArray(new String[0]);
     }
 }

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/ConfigTest.java
Patch:
@@ -534,7 +534,7 @@ public void test_noMethodInterface_methodsKeyHasValue() throws Exception {
             urls = bean.getExportedUrls();
             assertEquals(1, urls.size());
             URL url = urls.get(0);
-            assertEquals("sayName,getBox", url.getParameter("methods"));
+            assertEquals("getBox,sayName", url.getParameter("methods"));
         } finally {
             ctx.stop();
             ctx.close();

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/ProviderConstants.java
Patch:
@@ -24,5 +24,5 @@ public interface ProviderConstants {
     /**
      * Default prefer serialization,multiple separated by commas
      */
-    String DEFAULT_PREFER_SERIALIZATION = "hessian2";
+    String DEFAULT_PREFER_SERIALIZATION = "fastjson2,hessian2";
 }

File: dubbo-common/src/test/java/org/apache/dubbo/metadata/definition/ServiceDefinitionBuilderTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.metadata.definition.model.TypeDefinition;
 import org.apache.dubbo.metadata.definition.service.ComplexObject;
 import org.apache.dubbo.metadata.definition.service.DemoService;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -35,6 +36,7 @@ public class ServiceDefinitionBuilderTest {
 
     @Test
     public void testBuilderComplexObject() {
+        TypeDefinitionBuilder.initBuilders(FrameworkModel.defaultModel());
         FullServiceDefinition fullServiceDefinition = ServiceDefinitionBuilder.buildFullDefinition(DemoService.class);
         checkComplexObjectAsParam(fullServiceDefinition);
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java
Patch:
@@ -212,7 +212,7 @@ private void renameFile(File file) {
             String now = fileNameFormatter.format(new Date());
             String last = fileNameFormatter.format(new Date(file.lastModified()));
             if (!now.equals(last)) {
-                File archive = new File(file.getAbsolutePath() + "." + last);
+                File archive = new File(file.getAbsolutePath() + "." + now);
                 file.renameTo(archive);
             }
         }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java
Patch:
@@ -162,7 +162,7 @@ public static Class<?>[] getParameterTypes(Invocation invocation) {
             }
             Class<?>[] parameterTypes = new Class<?>[types.length];
             for (int i = 0; i < types.length; i++) {
-                parameterTypes[i] = ReflectUtils.forName(types[0]);
+                parameterTypes[i] = ReflectUtils.forName(types[i]);
             }
             return parameterTypes;
         }

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/ObjectInput.java
Patch:
@@ -32,7 +32,6 @@ public interface ObjectInput extends DataInput {
      * @throws IOException if an I/O error occurs
      * @throws ClassNotFoundException if an ClassNotFoundException occurs
      */
-    @Deprecated
     Object readObject() throws IOException, ClassNotFoundException;
 
     /**

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/FilterChainBuilder.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_ASYN_INVOKE_FAILED;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_EXECUTE_FILTER_EXCEPTION;
 import static org.apache.dubbo.common.extension.ExtensionScope.APPLICATION;
 
 @SPI(value = "default", scope = APPLICATION)
@@ -221,7 +221,7 @@ public Result invoke(Invocation invocation) throws RpcException {
                             }
                         }
                     } catch (RuntimeException runtimeException) {
-                        LOGGER.error(CLUSTER_ASYN_INVOKE_FAILED,"asyn Invoke exception","",String.format("Exception occurred while executing the %s filter named %s.", i, filter.getClass().getSimpleName()),runtimeException);
+                        LOGGER.error(CLUSTER_EXECUTE_FILTER_EXCEPTION, "the custom filter is abnormal", "", String.format("Exception occurred while executing the %s filter named %s.", i, filter.getClass().getSimpleName()));
                         if (LOGGER.isDebugEnabled()) {
                             LOGGER.debug(String.format("Whole filter list is: %s", filters.stream().map(tmpFilter -> tmpFilter.getClass().getSimpleName()).collect(Collectors.toList())));
                         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java
Patch:
@@ -41,7 +41,7 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_ASYN_INVOKE_FAILED;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_FAILED_GROUP_MERGE;
 import static org.apache.dubbo.rpc.Constants.ASYNC_KEY;
 import static org.apache.dubbo.rpc.Constants.MERGER_KEY;
 
@@ -102,8 +102,8 @@ protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, Load
             try {
                 Result r = asyncResult.get(Integer.MAX_VALUE, TimeUnit.MILLISECONDS);
                 if (r.hasException()) {
-                    log.error(CLUSTER_ASYN_INVOKE_FAILED,"asyn Invoke exception","","Invoke " + getGroupDescFromServiceKey(entry.getKey()) +
-                        " failed: " + r.getException().getMessage(),r.getException());
+                    log.error(CLUSTER_FAILED_GROUP_MERGE, "Invoke " + getGroupDescFromServiceKey(entry.getKey()) +
+                        " failed: " + r.getException().getMessage(), "", r.getException().getMessage());
                 } else {
                     resultList.add(r);
                 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReport.java
Patch:
@@ -46,6 +46,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.OS_WIN_PREFIX;
 import static org.apache.dubbo.common.constants.CommonConstants.THREAD_POOL_EXHAUSTED_LISTENERS_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_THREAD_POOL_EXHAUSTED;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_UNEXPECTED_CREATE_DUMP;
 
 /**
  * Abort Policy.
@@ -162,7 +163,7 @@ private void dumpJStack() {
                 new File(dumpPath, "Dubbo_JStack.log" + "." + dateStr))) {
                 JVMUtil.jstack(jStackStream);
             } catch (Throwable t) {
-                logger.error("dump jStack error", t);
+                logger.error(COMMON_UNEXPECTED_CREATE_DUMP, "", "", "dump jStack error", t);
             } finally {
                 guard.release();
             }
@@ -183,7 +184,7 @@ private String getDumpPath() {
             if (dumpDirectory.mkdirs()) {
                 logger.info(format("Dubbo dump directory[%s] created", dumpDirectory.getAbsolutePath()));
             } else {
-                logger.warn(format("Dubbo dump directory[%s] can't be created, use the 'user.home'[%s]",
+                logger.warn(COMMON_UNEXPECTED_CREATE_DUMP, "", "", format("Dubbo dump directory[%s] can't be created, use the 'user.home'[%s]",
                     dumpDirectory.getAbsolutePath(), USER_HOME));
                 return USER_HOME;
             }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboDeployApplicationListener.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring.context;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_STOP_DUBBO_ERROR;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_START_MODEL;
 import static org.springframework.util.ObjectUtils.nullSafeEquals;
 
 import java.util.concurrent.Future;
@@ -116,9 +117,9 @@ private void onContextRefreshedEvent(ContextRefreshedEvent event) {
             try {
                 future.get();
             } catch (InterruptedException e) {
-                logger.warn("Interrupted while waiting for dubbo module start: " + e.getMessage());
+                logger.warn(CONFIG_FAILED_START_MODEL, "", "", "Interrupted while waiting for dubbo module start: " + e.getMessage());
             } catch (Exception e) {
-                logger.warn("An error occurred while waiting for dubbo module start: " + e.getMessage(), e);
+                logger.warn(CONFIG_FAILED_START_MODEL, "", "", "An error occurred while waiting for dubbo module start: " + e.getMessage(), e);
             }
         }
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/ListenerRegistryWrapper.java
Patch:
@@ -26,6 +26,8 @@
 import java.util.List;
 import java.util.function.Consumer;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
+
 public class ListenerRegistryWrapper implements Registry {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ListenerRegistryWrapper.class);
 
@@ -123,7 +125,7 @@ private void listenerEvent(Consumer<RegistryServiceListener> consumer) {
                     try {
                         consumer.accept(listener);
                     } catch (RuntimeException t) {
-                        logger.error(t.getMessage(), t);
+                        logger.error(REGISTRY_UNEXPECTED_EXCEPTION, "", "", t.getMessage(), t);
                         exception = t;
                     }
                 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_DELAY_EXECUTE_TIMES;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_NOTIFY_EVENT;
 
 public abstract class RegistryNotifier {
 
@@ -111,7 +112,7 @@ public void run() {
                     }
                 }
             } catch (Throwable t) {
-                logger.error("Error occurred when notify directory. ", t);
+                logger.error(REGISTRY_FAILED_NOTIFY_EVENT, "", "", "Error occurred when notify directory. ", t);
             }
         }
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -41,6 +41,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.CHECK_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_CLUSTER_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_TYPE_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.SERVICE_REGISTRY_TYPE;
@@ -202,7 +203,7 @@ public void doSubscribe(URL url, NotifyListener listener) {
                 subscribedServices = serviceNameMapping.getAndListen(this.getUrl(), url, mappingListener);
                 mappingListeners.put(url.getProtocolServiceKey(), mappingListener);
             } catch (Exception e) {
-                logger.warn("Cannot find app mapping for service " + url.getServiceInterface() + ", will not migrate.", e);
+                logger.warn(REGISTRY_UNEXPECTED_EXCEPTION, "", "", "Cannot find app mapping for service " + url.getServiceInterface() + ", will not migrate.", e);
             }
 
             if (CollectionUtils.isEmpty(subscribedServices)) {
@@ -365,7 +366,7 @@ public synchronized void onEvent(MappingChangedEvent event) {
             logger.info("Received mapping notification from meta server, " + event);
 
             if (stopped) {
-                logger.warn("Listener has been stopped, ignore mapping notification, check why listener is not removed.");
+                logger.warn(REGISTRY_UNEXPECTED_EXCEPTION, "", "", "Listener has been stopped, ignore mapping notification, check why listener is not removed.");
                 return;
             }
             Set<String> newApps = event.getApps();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceDelegation.java
Patch:
@@ -44,6 +44,7 @@
 import static java.util.Collections.unmodifiableSortedSet;
 import static org.apache.dubbo.common.URL.buildKey;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_LOAD_METADATA;
 import static org.apache.dubbo.common.utils.CollectionUtils.isEmpty;
 
 /**
@@ -137,7 +138,7 @@ public SortedSet<String> getExportedURLs(String serviceInterface, String group,
         return unmodifiableSortedSet(getServiceURLs(getAllServiceURLs(), serviceKey, protocol));
     }
 
-    private Map<String, SortedSet<URL>> getAllServiceURLs () {
+    private Map<String, SortedSet<URL>> getAllServiceURLs() {
         List<ServiceDiscovery> serviceDiscoveries = registryManager.getServiceDiscoveries();
         Map<String, SortedSet<URL>> allServiceURLs = new HashMap<>();
         for (ServiceDiscovery sd : serviceDiscoveries) {
@@ -182,7 +183,7 @@ public MetadataInfo getMetadataInfo(String revision) {
         }
 
         if (logger.isWarnEnabled()) {
-            logger.warn("metadata not found for revision: " + revision);
+            logger.warn(REGISTRY_FAILED_LOAD_METADATA, "", "", "metadata not found for revision: " + revision);
         }
         return null;
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/DefaultMigrationAddressComparator.java
Patch:
@@ -29,6 +29,8 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_INCORRECT_PARAMETER_VALUES;
+
 public class DefaultMigrationAddressComparator implements MigrationAddressComparator {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(DefaultMigrationAddressComparator.class);
     private static final String MIGRATION_THRESHOLD = "dubbo.application.migration.threshold";
@@ -73,7 +75,7 @@ public <T> boolean shouldMigrate(ClusterInvoker<T> newInvoker, ClusterInvoker<T>
         try {
             threshold = Float.parseFloat(rawThreshold);
         } catch (Exception e) {
-            logger.error("Invalid migration threshold " + rawThreshold);
+            logger.error(PROTOCOL_INCORRECT_PARAMETER_VALUES, "", "", "Invalid migration threshold " + rawThreshold);
             threshold = DEFAULT_THREAD;
         }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/WrappedChannelHandler.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.remoting.transport.dispatcher;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.resource.GlobalResourcesRepository;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
@@ -36,7 +36,7 @@
 
 public class WrappedChannelHandler implements ChannelHandlerDelegate {
 
-    protected static final Logger logger = LoggerFactory.getLogger(WrappedChannelHandler.class);
+    protected static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(WrappedChannelHandler.class);
 
     protected final ChannelHandler handler;
 

File: dubbo-remoting/dubbo-remoting-http/src/test/java/org/apache/dubbo/remoting/http/jetty/JettyLoggerAdapterTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.support.FailsafeErrorTypeAwareLogger;
 import org.apache.dubbo.common.url.component.ServiceConfigURL;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.remoting.Constants;
@@ -70,7 +71,7 @@ public void testSuccessLogger() throws Exception{
 
         Field loggerField = clazz.getDeclaredField("logger");
         loggerField.setAccessible(true);
-        loggerField.set(jettyLoggerAdapter, successLogger);
+        loggerField.set(jettyLoggerAdapter, new FailsafeErrorTypeAwareLogger(successLogger));
         jettyLoggerAdapter.setDebugEnabled(true);
 
         when(successLogger.isDebugEnabled()).thenReturn(true);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/listener/ListenerInvokerWrapper.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.rpc.listener;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.rpc.Invocation;
@@ -34,7 +34,7 @@
  */
 public class ListenerInvokerWrapper<T> implements Invoker<T> {
 
-    private static final Logger logger = LoggerFactory.getLogger(ListenerInvokerWrapper.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ListenerInvokerWrapper.class);
 
     private final Invoker<T> invoker;
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractExporter.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.rpc.protocol;
 
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Invoker;
@@ -26,7 +26,7 @@
  */
 public abstract class AbstractExporter<T> implements Exporter<T> {
 
-    protected final Logger logger = LoggerFactory.getLogger(getClass());
+    protected final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
 
     private final Invoker<T> invoker;
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractProxyProtocol.java
Patch:
@@ -44,6 +44,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_UNSUPPORTED;
 
 /**
  * AbstractProxyProtocol
@@ -95,7 +96,7 @@ public void afterUnExport() {
                     try {
                         runnable.run();
                     } catch (Throwable t) {
-                        logger.warn(t.getMessage(), t);
+                        logger.warn(PROTOCOL_UNSUPPORTED, "", "", t.getMessage(), t);
                     }
                 }
             }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -52,6 +52,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIME_COUNTDOWN_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_ERROR_CLOSE_CLIENT;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 
 /**
@@ -181,7 +182,7 @@ private void destroyInternal(boolean closeAll) {
                             client.close(serverShutdownTimeout);
                         }
                     } catch (Throwable t) {
-                        logger.warn(t.getMessage(), t);
+                        logger.warn(PROTOCOL_ERROR_CLOSE_CLIENT, "", "", t.getMessage(), t);
                     }
                 }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -75,7 +75,7 @@ public TripleProtocol(FrameworkModel frameworkModel) {
         this.pathResolver = frameworkModel.getExtensionLoader(PathResolver.class)
             .getDefaultExtension();
         CONVERT_NO_LOWER_HEADER = ConfigurationUtils.getEnvConfiguration(ApplicationModel.defaultModel())
-            .getBoolean(H2_SUPPORT_NO_LOWER_HEADER_KEY, false);
+            .getBoolean(H2_SUPPORT_NO_LOWER_HEADER_KEY, true);
         Set<String> supported = frameworkModel.getExtensionLoader(DeCompressor.class)
             .getSupportedExtensions();
         this.acceptEncodings = String.join(",", supported);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -75,7 +75,7 @@ public TripleProtocol(FrameworkModel frameworkModel) {
         this.pathResolver = frameworkModel.getExtensionLoader(PathResolver.class)
             .getDefaultExtension();
         CONVERT_NO_LOWER_HEADER = ConfigurationUtils.getEnvConfiguration(ApplicationModel.defaultModel())
-            .getBoolean(H2_SUPPORT_NO_LOWER_HEADER_KEY, false);
+            .getBoolean(H2_SUPPORT_NO_LOWER_HEADER_KEY, true);
         Set<String> supported = frameworkModel.getExtensionLoader(DeCompressor.class)
             .getSupportedExtensions();
         this.acceptEncodings = String.join(",", supported);

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/LoggerCodeConstants.java
Patch:
@@ -152,6 +152,8 @@ public interface LoggerCodeConstants {
 
     String REGISTRY_SOCKET_EXCEPTION = "1-38";
 
+    String REGISTRY_FAILED_LOAD_METADATA = "1-39";
+
     // cluster module
     String CLUSTER_FAILED_SITE_SELECTION = "2-1";
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/ListenerRegistryWrapper.java
Patch:
@@ -26,6 +26,8 @@
 import java.util.List;
 import java.util.function.Consumer;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
+
 public class ListenerRegistryWrapper implements Registry {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ListenerRegistryWrapper.class);
 
@@ -123,7 +125,7 @@ private void listenerEvent(Consumer<RegistryServiceListener> consumer) {
                     try {
                         consumer.accept(listener);
                     } catch (RuntimeException t) {
-                        logger.error(t.getMessage(), t);
+                        logger.error(REGISTRY_UNEXPECTED_EXCEPTION, "", "", t.getMessage(), t);
                         exception = t;
                     }
                 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_DELAY_EXECUTE_TIMES;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_NOTIFY_EVENT;
 
 public abstract class RegistryNotifier {
 
@@ -111,7 +112,7 @@ public void run() {
                     }
                 }
             } catch (Throwable t) {
-                logger.error("Error occurred when notify directory. ", t);
+                logger.error(REGISTRY_FAILED_NOTIFY_EVENT, "", "", "Error occurred when notify directory. ", t);
             }
         }
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -41,6 +41,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.CHECK_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_UNEXPECTED_EXCEPTION;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_CLUSTER_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_TYPE_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.SERVICE_REGISTRY_TYPE;
@@ -202,7 +203,7 @@ public void doSubscribe(URL url, NotifyListener listener) {
                 subscribedServices = serviceNameMapping.getAndListen(this.getUrl(), url, mappingListener);
                 mappingListeners.put(url.getProtocolServiceKey(), mappingListener);
             } catch (Exception e) {
-                logger.warn("Cannot find app mapping for service " + url.getServiceInterface() + ", will not migrate.", e);
+                logger.warn(REGISTRY_UNEXPECTED_EXCEPTION, "", "", "Cannot find app mapping for service " + url.getServiceInterface() + ", will not migrate.", e);
             }
 
             if (CollectionUtils.isEmpty(subscribedServices)) {
@@ -365,7 +366,7 @@ public synchronized void onEvent(MappingChangedEvent event) {
             logger.info("Received mapping notification from meta server, " + event);
 
             if (stopped) {
-                logger.warn("Listener has been stopped, ignore mapping notification, check why listener is not removed.");
+                logger.warn(REGISTRY_UNEXPECTED_EXCEPTION, "", "", "Listener has been stopped, ignore mapping notification, check why listener is not removed.");
                 return;
             }
             Set<String> newApps = event.getApps();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceDelegation.java
Patch:
@@ -44,6 +44,7 @@
 import static java.util.Collections.unmodifiableSortedSet;
 import static org.apache.dubbo.common.URL.buildKey;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_LOAD_METADATA;
 import static org.apache.dubbo.common.utils.CollectionUtils.isEmpty;
 
 /**
@@ -137,7 +138,7 @@ public SortedSet<String> getExportedURLs(String serviceInterface, String group,
         return unmodifiableSortedSet(getServiceURLs(getAllServiceURLs(), serviceKey, protocol));
     }
 
-    private Map<String, SortedSet<URL>> getAllServiceURLs () {
+    private Map<String, SortedSet<URL>> getAllServiceURLs() {
         List<ServiceDiscovery> serviceDiscoveries = registryManager.getServiceDiscoveries();
         Map<String, SortedSet<URL>> allServiceURLs = new HashMap<>();
         for (ServiceDiscovery sd : serviceDiscoveries) {
@@ -182,7 +183,7 @@ public MetadataInfo getMetadataInfo(String revision) {
         }
 
         if (logger.isWarnEnabled()) {
-            logger.warn("metadata not found for revision: " + revision);
+            logger.warn(REGISTRY_FAILED_LOAD_METADATA, "", "", "metadata not found for revision: " + revision);
         }
         return null;
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/DefaultMigrationAddressComparator.java
Patch:
@@ -29,6 +29,8 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_INCORRECT_PARAMETER_VALUES;
+
 public class DefaultMigrationAddressComparator implements MigrationAddressComparator {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(DefaultMigrationAddressComparator.class);
     private static final String MIGRATION_THRESHOLD = "dubbo.application.migration.threshold";
@@ -73,7 +75,7 @@ public <T> boolean shouldMigrate(ClusterInvoker<T> newInvoker, ClusterInvoker<T>
         try {
             threshold = Float.parseFloat(rawThreshold);
         } catch (Exception e) {
-            logger.error("Invalid migration threshold " + rawThreshold);
+            logger.error(PROTOCOL_INCORRECT_PARAMETER_VALUES, "", "", "Invalid migration threshold " + rawThreshold);
             threshold = DEFAULT_THREAD;
         }
 

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java
Patch:
@@ -537,7 +537,7 @@ public void destroy() {
         try {
             this.namingService.shutdown();
         } catch (NacosException e) {
-            logger.warn("Unable to shutdown nacos naming service", e);
+            logger.warn(REGISTRY_NACOS_EXCEPTION, "", "", "Unable to shutdown nacos naming service", e);
         }
         this.nacosListeners.clear();
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -113,7 +113,6 @@ private ProtocolConfig generateMetadataProtocol() {
 
         ProtocolConfig protocolConfig = new ProtocolConfig();
         protocolConfig.setName(specifiedProtocol);
-
         if (port == null || port < -1) {
             try {
                 if (logger.isInfoEnabled()) {
@@ -146,6 +145,9 @@ private ProtocolConfig generateMetadataProtocol() {
         } else {
             protocolConfig.setPort(port);
         }
+        
+        applicationModel.getApplicationConfigManager().getProtocol(specifiedProtocol)
+            .ifPresent(protocolConfig::mergeProtocol);
 
         if (protocolConfig.getPort() == null) {
             protocolConfig.setPort(-1);
@@ -182,7 +184,6 @@ private String getSpecifiedProtocol() {
         return StringUtils.isNotEmpty(protocol) ? protocol : DUBBO_PROTOCOL;
     }
 
-
     private ServiceConfig<MetadataService> buildServiceConfig() {
         ApplicationConfig applicationConfig = getApplicationConfig();
         ServiceConfig<MetadataService> serviceConfig = new ServiceConfig<>();

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -770,8 +770,6 @@ public void preDestroy() {
             onStopping();
 
             unregisterServiceInstance();
-            destroyRegistries();
-            destroyMetadataReports();
 
             unRegisterShutdownHook();
             if (asyncMetadataFuture != null) {
@@ -788,6 +786,9 @@ public void postDestroy() {
                 return;
             }
             try {
+                destroyRegistries();
+                destroyMetadataReports();
+
                 executeShutdownCallbacks();
 
                 // TODO should we close unused protocol server which only used by this application?

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReport.java
Patch:
@@ -46,6 +46,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.OS_WIN_PREFIX;
 import static org.apache.dubbo.common.constants.CommonConstants.THREAD_POOL_EXHAUSTED_LISTENERS_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_THREAD_POOL_EXHAUSTED;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_UNEXPECTED_CREATE_DUMP;
 
 /**
  * Abort Policy.
@@ -162,7 +163,7 @@ private void dumpJStack() {
                 new File(dumpPath, "Dubbo_JStack.log" + "." + dateStr))) {
                 JVMUtil.jstack(jStackStream);
             } catch (Throwable t) {
-                logger.error("dump jStack error", t);
+                logger.error(COMMON_UNEXPECTED_CREATE_DUMP, "", "", "dump jStack error", t);
             } finally {
                 guard.release();
             }
@@ -183,7 +184,7 @@ private String getDumpPath() {
             if (dumpDirectory.mkdirs()) {
                 logger.info(format("Dubbo dump directory[%s] created", dumpDirectory.getAbsolutePath()));
             } else {
-                logger.warn(format("Dubbo dump directory[%s] can't be created, use the 'user.home'[%s]",
+                logger.warn(COMMON_UNEXPECTED_CREATE_DUMP, "", "", format("Dubbo dump directory[%s] can't be created, use the 'user.home'[%s]",
                     dumpDirectory.getAbsolutePath(), USER_HOME));
                 return USER_HOME;
             }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/WrappedChannelHandler.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.remoting.transport.dispatcher;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.resource.GlobalResourcesRepository;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
@@ -34,7 +34,7 @@
 
 public class WrappedChannelHandler implements ChannelHandlerDelegate {
 
-    protected static final Logger logger = LoggerFactory.getLogger(WrappedChannelHandler.class);
+    protected static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(WrappedChannelHandler.class);
 
     protected final ChannelHandler handler;
 

File: dubbo-remoting/dubbo-remoting-http/src/test/java/org/apache/dubbo/remoting/http/jetty/JettyLoggerAdapterTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.support.FailsafeErrorTypeAwareLogger;
 import org.apache.dubbo.common.url.component.ServiceConfigURL;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.remoting.Constants;
@@ -70,7 +71,7 @@ public void testSuccessLogger() throws Exception{
 
         Field loggerField = clazz.getDeclaredField("logger");
         loggerField.setAccessible(true);
-        loggerField.set(jettyLoggerAdapter, successLogger);
+        loggerField.set(jettyLoggerAdapter, new FailsafeErrorTypeAwareLogger(successLogger));
         jettyLoggerAdapter.setDebugEnabled(true);
 
         when(successLogger.isDebugEnabled()).thenReturn(true);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/listener/ListenerInvokerWrapper.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.rpc.listener;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.rpc.Invocation;
@@ -34,7 +34,7 @@
  */
 public class ListenerInvokerWrapper<T> implements Invoker<T> {
 
-    private static final Logger logger = LoggerFactory.getLogger(ListenerInvokerWrapper.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ListenerInvokerWrapper.class);
 
     private final Invoker<T> invoker;
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractExporter.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.rpc.protocol;
 
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Invoker;
@@ -26,7 +26,7 @@
  */
 public abstract class AbstractExporter<T> implements Exporter<T> {
 
-    protected final Logger logger = LoggerFactory.getLogger(getClass());
+    protected final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
 
     private final Invoker<T> invoker;
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractProxyProtocol.java
Patch:
@@ -44,6 +44,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_UNSUPPORTED;
 
 /**
  * AbstractProxyProtocol
@@ -95,7 +96,7 @@ public void afterUnExport() {
                     try {
                         runnable.run();
                     } catch (Throwable t) {
-                        logger.warn(t.getMessage(), t);
+                        logger.warn(PROTOCOL_UNSUPPORTED, "", "", t.getMessage(), t);
                     }
                 }
             }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -52,6 +52,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIME_COUNTDOWN_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_ERROR_CLOSE_CLIENT;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 
 /**
@@ -181,7 +182,7 @@ private void destroyInternal(boolean closeAll) {
                             client.close(serverShutdownTimeout);
                         }
                     } catch (Throwable t) {
-                        logger.warn(t.getMessage(), t);
+                        logger.warn(PROTOCOL_ERROR_CLOSE_CLIENT, "", "", t.getMessage(), t);
                     }
                 }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractProtocol.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.ConfigurationUtils;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.serialize.support.SerializableClassRegistry;
 import org.apache.dubbo.common.serialize.support.SerializationOptimizer;
@@ -51,7 +51,7 @@
  */
 public abstract class AbstractProtocol implements Protocol, ScopeModelAware {
 
-    protected final Logger logger = LoggerFactory.getLogger(getClass());
+    protected final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
 
     protected final Map<String, Exporter<?>> exporterMap = new ConcurrentHashMap<>();
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -47,6 +47,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.THREADPOOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.THREADS_KEY;
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_FIND_PROTOCOL;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_METADATA_SERVICE_EXPORTED;
 import static org.apache.dubbo.remoting.Constants.BIND_PORT_KEY;
 
 /**
@@ -77,7 +78,7 @@ public synchronized ConfigurableMetadataServiceExporter export() {
             }
         } else {
             if (logger.isWarnEnabled()) {
-                logger.warn("The MetadataService has been exported : " + serviceConfig.getExportedUrls());
+                logger.warn(CONFIG_METADATA_SERVICE_EXPORTED, "", "", "The MetadataService has been exported : " + serviceConfig.getExportedUrls());
             }
         }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboDeployApplicationListener.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring.context;
 
 import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_STOP_DUBBO_ERROR;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_START_MODEL;
 import static org.springframework.util.ObjectUtils.nullSafeEquals;
 
 import java.util.concurrent.Future;
@@ -116,9 +117,9 @@ private void onContextRefreshedEvent(ContextRefreshedEvent event) {
             try {
                 future.get();
             } catch (InterruptedException e) {
-                logger.warn("Interrupted while waiting for dubbo module start: " + e.getMessage());
+                logger.warn(CONFIG_FAILED_START_MODEL, "", "", "Interrupted while waiting for dubbo module start: " + e.getMessage());
             } catch (Exception e) {
-                logger.warn("An error occurred while waiting for dubbo module start: " + e.getMessage(), e);
+                logger.warn(CONFIG_FAILED_START_MODEL, "", "", "An error occurred while waiting for dubbo module start: " + e.getMessage(), e);
             }
         }
     }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/pu/PortUnificationTransporter.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
 
-@SPI(value = "netty", scope = ExtensionScope.FRAMEWORK)
+@SPI(value = "netty4", scope = ExtensionScope.FRAMEWORK)
 public interface PortUnificationTransporter {
 
     @Adaptive({Constants.SERVER_KEY, Constants.TRANSPORTER_KEY})

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyPortUnificationTransporter.java
Patch:
@@ -25,7 +25,7 @@
 
 public class NettyPortUnificationTransporter implements PortUnificationTransporter {
 
-    public static final String NAME = "netty";
+    public static final String NAME = "netty4";
 
     @Override
     public AbstractPortUnificationServer bind(URL url, ChannelHandler handler) throws RemotingException {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractServer.java
Patch:
@@ -72,7 +72,7 @@ public AbstractServer(URL url, ChannelHandler handler) throws RemotingException
             }
         } catch (Throwable t) {
             throw new RemotingException(url.toInetSocketAddress(), null, "Failed to bind " + getClass().getSimpleName()
-                    + " on " + getLocalAddress() + ", cause: " + t.getMessage(), t);
+                    + " on " + bindAddress + ", cause: " + t.getMessage(), t);
         }
         executors.add(executorRepository.createExecutorIfAbsent(url));
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/BatchExecutorQueue.java
Patch:
@@ -74,7 +74,7 @@ private void run(Executor executor) {
                     i++;
                 }
             }
-            if (i != 0 || !flushedOnce) {
+            if ((i != 0 || !flushedOnce) && item != null) {
                 flush(item);
             }
         } finally {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -47,6 +47,7 @@
 import org.apache.dubbo.rpc.protocol.tri.call.UnaryClientCallListener;
 import org.apache.dubbo.rpc.protocol.tri.compressor.Compressor;
 import org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter;
+import org.apache.dubbo.rpc.protocol.tri.transport.TripleWriteQueue;
 import org.apache.dubbo.rpc.support.RpcUtils;
 
 import io.netty.util.AsciiString;
@@ -80,6 +81,7 @@ public class TripleInvoker<T> extends AbstractInvoker<T> {
     private final Set<Invoker<?>> invokers;
     private final ExecutorService streamExecutor;
     private final String acceptEncodings;
+    private final TripleWriteQueue writeQueue = new TripleWriteQueue();
 
     public TripleInvoker(Class<T> serviceType,
         URL url,
@@ -117,7 +119,7 @@ protected Result doInvoke(final Invocation invocation) {
             invocation.getMethodName(),
             invocation.getParameterTypes());
         ClientCall call = new TripleClientCall(connection, streamExecutor,
-            getUrl().getOrDefaultFrameworkModel());
+            getUrl().getOrDefaultFrameworkModel(), writeQueue);
 
         AsyncRpcResult result;
         try {
@@ -311,5 +313,4 @@ private int calculateTimeout(Invocation invocation, String methodName) {
         }
         return timeout;
     }
-
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/command/EndStreamQueueCommand.java
Patch:
@@ -29,6 +29,6 @@ public static EndStreamQueueCommand create() {
 
     @Override
     public void doSend(ChannelHandlerContext ctx, ChannelPromise promise) {
-        ctx.write(new DefaultHttp2DataFrame(true));
+        ctx.write(new DefaultHttp2DataFrame(true), promise);
     }
 }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Constants.java
Patch:
@@ -103,4 +103,6 @@ public interface Constants {
     String H2_SETTINGS_INITIAL_WINDOW_SIZE_KEY = "dubbo.rpc.tri.initial-window-size";
     String H2_SETTINGS_MAX_FRAME_SIZE_KEY = "dubbo.rpc.tri.max-frame-size";
     String H2_SETTINGS_MAX_HEADER_LIST_SIZE_KEY = "dubbo.rpc.tri.max-header-list-size";
+
+    String H2_SUPPORT_NO_LOWER_HEADER_KEY = "dubbo.rpc.tri.support-no-lower-header";
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/RequestMetadata.java
Patch:
@@ -47,7 +47,7 @@ public class RequestMetadata {
     public MethodDescriptor method;
     public PackableMethod packableMethod;
     public Map<String, Object> attachments;
-
+    public boolean convertNoLowerHeader;
 
     public DefaultHttp2Headers toHeaders() {
         DefaultHttp2Headers header = new DefaultHttp2Headers(false);
@@ -70,7 +70,7 @@ public DefaultHttp2Headers toHeaders() {
             setIfNotNull(header, TripleHeaderEnum.GRPC_ENCODING.getHeader(),
                 compressor.getMessageEncoding());
         }
-        StreamUtils.convertAttachment(header, attachments);
+        StreamUtils.convertAttachment(header, attachments, convertNoLowerHeader);
         return header;
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -239,6 +239,7 @@ RequestMetadata createRequest(MethodDescriptor methodDescriptor, Invocation invo
         } else {
             meta.packableMethod = ReflectionPackableMethod.init(methodDescriptor, url);
         }
+        meta.convertNoLowerHeader = TripleProtocol.CONVERT_NO_LOWER_HEADER;
         meta.method = methodDescriptor;
         meta.scheme = getSchemeFromUrl(url);
         // TODO read compressor from config

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/TripleServerStream.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.dubbo.rpc.protocol.tri.ExceptionUtils;
 import org.apache.dubbo.rpc.protocol.tri.TripleConstant;
 import org.apache.dubbo.rpc.protocol.tri.TripleHeaderEnum;
+import org.apache.dubbo.rpc.protocol.tri.TripleProtocol;
 import org.apache.dubbo.rpc.protocol.tri.call.ReflectionAbstractServerCall;
 import org.apache.dubbo.rpc.protocol.tri.call.StubAbstractServerCall;
 import org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand;
@@ -173,7 +174,7 @@ private Http2Headers getTrailers(TriRpcStatus rpcStatus, Map<String, Object> att
             headers.status(HttpResponseStatus.OK.codeAsText());
             headers.set(HttpHeaderNames.CONTENT_TYPE, TripleConstant.CONTENT_PROTO);
         }
-        StreamUtils.convertAttachment(headers, attachments);
+        StreamUtils.convertAttachment(headers, attachments, TripleProtocol.CONVERT_NO_LOWER_HEADER);
         headers.set(TripleHeaderEnum.STATUS_KEY.getHeader(), String.valueOf(rpcStatus.code.code));
         if (rpcStatus.isOk()) {
             return headers;

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/report/MetadataReportInstanceTest.java
Patch:
@@ -62,6 +62,7 @@ public void setUp() {
 
         when(configManager.getMetadataConfigs()).thenReturn(Collections.emptyList());
         when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);
+        when(applicationModel.getApplicationConfigManager().getApplicationOrElseThrow()).thenReturn(new ApplicationConfig("test"));
         when(applicationModel.getCurrentConfig()).thenReturn(new ApplicationConfig("test"));
 
     }
@@ -71,7 +72,7 @@ public void test() {
         Assertions.assertNull(metadataReportInstance.getMetadataReport(registryId), "the metadata report was not initialized.");
         assertThat(metadataReportInstance.getMetadataReports(true), Matchers.anEmptyMap());
 
-        metadataReportInstance.init(Arrays.asList(metadataReportConfig));
+        metadataReportInstance.init(Collections.singletonList(metadataReportConfig));
         MetadataReport metadataReport = metadataReportInstance.getMetadataReport(registryId);
         Assertions.assertNotNull(metadataReport);
 

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/ModuleModelTest.java
Patch:
@@ -40,6 +40,7 @@ public void testInitialize() {
         Assertions.assertEquals(moduleModel.getApplicationModel(), applicationModel);
         Assertions.assertTrue(applicationModel.getPubModuleModels().contains(moduleModel));
         Assertions.assertNotNull(moduleModel.getInternalId());
+        Assertions.assertFalse(moduleModel.isLifeCycleManagedExternally());
 
         Assertions.assertNotNull(moduleModel.getExtensionDirector());
         Assertions.assertNotNull(moduleModel.getBeanFactory());

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboSpringInitializer.java
Patch:
@@ -138,6 +138,7 @@ private static void initContext(DubboSpringInitContext context, BeanDefinitionRe
 
         // mark context as bound
         context.markAsBound();
+        moduleModel.setLifeCycleManagedExternally(true);
 
         // register common beans
         DubboBeanUtils.registerCommonBeans(registry);

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectoryTest.java
Patch:
@@ -59,7 +59,7 @@ public void testStaticDirectory() {
         BitList<Invoker<String>> invokers = new BitList<>(originInvokers);
 
 
-        List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + NetUtils.getLocalHost() + "/com.foo.BarService"), new RpcInvocation(), false, new Holder<>());
+        List<Invoker<String>> filteredInvokers = router.route(invokers.clone(), URL.valueOf("consumer://" + NetUtils.getLocalHost() + "/com.foo.BarService"), new RpcInvocation(), false, new Holder<>());
         StaticDirectory<String> staticDirectory = new StaticDirectory<>(filteredInvokers);
         boolean isAvailable = staticDirectory.isAvailable();
         Assertions.assertTrue(!isAvailable);

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java
Patch:
@@ -172,7 +172,7 @@ private void initDic(URL url) {
         URL dicInitUrl = URL.valueOf("consumer://localhost:20880/org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest?application=FileRouterEngineTest");
         dic = new StaticDirectory<>(dicInitUrl, invokers);
         dic.buildRouterChain();
-        dic.getRouterChain().setHeadStateRouter(routerFactory.getRouter(FileRouterEngineTest.class, url));
+        dic.getRouterChain().getCurrentChain().setHeadStateRouter(routerFactory.getRouter(FileRouterEngineTest.class, url));
     }
 
     static class MockClusterInvoker<T> extends AbstractClusterInvoker<T> {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/tag/TagStateRouterTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -88,7 +89,7 @@ public void testTagRoutePickInvokers() {
 
         RpcInvocation invocation = new RpcInvocation();
         invocation.setAttachment(TAG_KEY, "tag2");
-        List<Invoker<String>> filteredInvokers = router.route(invokers, invokers.get(0).getUrl(), invocation, false, new Holder<>());
+        List<Invoker<String>> filteredInvokers = router.route(invokers.clone(), invokers.get(0).getUrl(), invocation, false, new Holder<>());
         Assertions.assertEquals(1, filteredInvokers.size());
         Assertions.assertEquals(invoker1, filteredInvokers.get(0));
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcServiceContext.java
Patch:
@@ -186,6 +186,9 @@ public List<URL> getUrls() {
     @Override
     public void setUrls(List<URL> urls) {
         this.urls = urls;
+        if (!urls.isEmpty()) {
+            this.url = urls.get(0);
+        }
     }
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -118,6 +118,7 @@
 import static org.apache.dubbo.remoting.Constants.CONNECTIONS_KEY;
 import static org.apache.dubbo.remoting.Constants.EXCHANGER_KEY;
 import static org.apache.dubbo.remoting.Constants.SERIALIZATION_KEY;
+import static org.apache.dubbo.remoting.Constants.PREFER_SERIALIZATION_KEY;
 import static org.apache.dubbo.rpc.Constants.DEPRECATED_KEY;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
 import static org.apache.dubbo.rpc.Constants.INTERFACES;
@@ -135,7 +136,7 @@
  */
 public class RegistryProtocol implements Protocol, ScopeModelAware {
     public static final String[] DEFAULT_REGISTER_PROVIDER_KEYS = {
-        APPLICATION_KEY, CODEC_KEY, EXCHANGER_KEY, SERIALIZATION_KEY, CLUSTER_KEY, CONNECTIONS_KEY, DEPRECATED_KEY,
+        APPLICATION_KEY, CODEC_KEY, EXCHANGER_KEY, SERIALIZATION_KEY, PREFER_SERIALIZATION_KEY, CLUSTER_KEY, CONNECTIONS_KEY, DEPRECATED_KEY,
         GROUP_KEY, LOADBALANCE_KEY, MOCK_KEY, PATH_KEY, TIMEOUT_KEY, TOKEN_KEY, VERSION_KEY, WARMUP_KEY,
         WEIGHT_KEY, DUBBO_VERSION_KEY, RELEASE_KEY, SIDE_KEY, IPV6_KEY
     };
@@ -487,7 +488,7 @@ protected <T> Invoker<T> doRefer(Cluster cluster, Registry registry, Class<T> ty
         Map<String, Object> consumerAttribute = new HashMap<>(url.getAttributes());
         consumerAttribute.remove(REFER_KEY);
         String p = isEmpty(parameters.get(PROTOCOL_KEY)) ? CONSUMER : parameters.get(PROTOCOL_KEY);
-        URL consumerUrl = new ServiceConfigURL (
+        URL consumerUrl = new ServiceConfigURL(
             p,
             null,
             null,

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/CompatibleFilter.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CompatibleTypeUtils;
 import org.apache.dubbo.common.utils.PojoUtils;
+import org.apache.dubbo.remoting.utils.UrlUtils;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
@@ -29,8 +30,6 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 
-import static org.apache.dubbo.remoting.Constants.SERIALIZATION_KEY;
-
 /**
  * CompatibleFilter make the remote method's return value compatible to invoker's version of object.
  * To make return object compatible it does
@@ -63,7 +62,7 @@ public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invoca
                     Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());
                     Class<?> type = method.getReturnType();
                     Object newValue;
-                    String serialization = invoker.getUrl().getParameter(SERIALIZATION_KEY);
+                    String serialization = UrlUtils.serializationOrDefault(invoker.getUrl());
                     if ("json".equals(serialization) || "fastjson".equals(serialization)) {
                         // If the serialization key is json or fastjson
                         Type gtype = method.getGenericReturnType();

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java
Patch:
@@ -113,7 +113,7 @@ private void checkSerializationTypeFromRemote() {
 
     @Override
     public Object decode(Channel channel, InputStream input) throws IOException {
-        ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), serializationType)
+        ObjectInput in = CodecSupport.getSerialization(serializationType)
             .deserialize(channel.getUrl(), input);
         this.put(SERIALIZATION_ID_KEY, serializationType);
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java
Patch:
@@ -86,8 +86,8 @@ public Object decode(Channel channel, InputStream input) throws IOException {
         if (invocation != null && invocation.getServiceModel() != null) {
             Thread.currentThread().setContextClassLoader(invocation.getServiceModel().getClassLoader());
         }
-        ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), serializationType)
-                .deserialize(channel.getUrl(), input);
+        ObjectInput in = CodecSupport.getSerialization(serializationType)
+            .deserialize(channel.getUrl(), input);
 
         byte flag = in.readByte();
         switch (flag) {

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/DefaultParamDeepCopyUtil.java
Patch:
@@ -22,8 +22,7 @@
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
 import org.apache.dubbo.common.serialize.Serialization;
-import org.apache.dubbo.common.serialize.support.DefaultSerializationSelector;
-import org.apache.dubbo.remoting.Constants;
+import org.apache.dubbo.remoting.utils.UrlUtils;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -38,7 +37,7 @@ public class DefaultParamDeepCopyUtil implements ParamDeepCopyUtil {
     @SuppressWarnings({"unchecked"})
     public <T> T copy(URL url, Object src, Class<T> targetClass) {
         Serialization serialization = url.getOrDefaultFrameworkModel().getExtensionLoader(Serialization.class).getExtension(
-            url.getParameter(Constants.SERIALIZATION_KEY, DefaultSerializationSelector.getDefaultRemotingSerialization()));
+            UrlUtils.serializationOrDefault(url));
 
         try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
             ObjectOutput objectOutput = serialization.serialize(url, outputStream);

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -112,6 +112,8 @@ public interface CommonConstants {
 
     String EXECUTOR_SERVICE_COMPONENT_KEY = ExecutorService.class.getName();
 
+    String CONSUMER_SHARED_EXECUTOR_SERVICE_COMPONENT_KEY = "CONSUMER_SHARED_SERVICE_EXECUTOR";
+
     String INTERNAL_EXECUTOR_SERVICE_COMPONENT_KEY = "INTERNAL_SERVICE_EXECUTOR";
 
     String THREADPOOL_KEY = "threadpool";

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LeastActiveBalanceTest.java
Patch:
@@ -3,7 +3,7 @@
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License")); you may not use this file except in compliance with
+ * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LoadBalanceBaseTest.java
Patch:
@@ -3,7 +3,7 @@
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License")); you may not use this file except in compliance with
+ * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RandomLoadBalanceTest.java
Patch:
@@ -3,7 +3,7 @@
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License")); you may not use this file except in compliance with
+ * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/ShortestResponseLoadBalanceTest.java
Patch:
@@ -3,7 +3,7 @@
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License")); you may not use this file except in compliance with
+ * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0

File: dubbo-common/src/main/java/org/apache/dubbo/common/cache/FileCacheStoreFactory.java
Patch:
@@ -185,7 +185,7 @@ private static void tryFileLock(FileCacheStore.Builder builder, String fileName)
         }
 
         if (dirLock == null) {
-            throw new PathNotExclusiveException(fileName + " is not exclusive.");
+            throw new PathNotExclusiveException(fileName + " is not exclusive. Maybe multiple Dubbo instances are using the same folder.");
         }
 
         builder.directoryLock(dirLock).lockFile(lockFile);

File: dubbo-common/src/main/java/org/apache/dubbo/common/concurrent/RejectException.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.common.threadpool.MemorySafeLinkedBlockingQueue;
 
 /**
- * Exception thrown by an {@link MemorySafeLinkedBlockingQueue} when a element cannot be accepted.
+ * Exception thrown by an {@link MemorySafeLinkedBlockingQueue} when an element cannot be accepted.
  */
 public class RejectException extends RuntimeException {
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/LoadbalanceRules.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.common.constants;
 
 /**
- *  constant for Loadbalance strategy
+ *  constant for Load-balance strategy
  */
 public interface LoadbalanceRules {
 
@@ -27,7 +27,7 @@ public interface LoadbalanceRules {
     String RANDOM = "random";
 
     /**
-     *  Round robin load balance.
+     * Round-robin load balance.
      **/
     String ROUND_ROBIN = "roundrobin";
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/profiler/Profiler.java
Patch:
@@ -25,7 +25,7 @@ public class Profiler {
     public static final String PROFILER_KEY = "DUBBO_INVOKE_PROFILER";
     public static final int MAX_ENTRY_SIZE = 1000;
 
-    private final static InternalThreadLocal<ProfilerEntry> bizProfiler = new InternalThreadLocal<>();
+    private static final InternalThreadLocal<ProfilerEntry> bizProfiler = new InternalThreadLocal<>();
 
     public static ProfilerEntry start(String message) {
         return new ProfilerEntry(message);

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/configcenter/file/FileSystemDynamicConfigurationTest.java
Patch:
@@ -42,8 +42,8 @@
 /**
  * {@link FileSystemDynamicConfiguration} Test
  */
-// Test often failed on Github Actions Platform because of file system on Azure
-// Change to Disabled because DisabledIfEnvironmentVariable does not work on Github.
+// Test often failed on GitHub Actions Platform because of file system on Azure
+// Change to Disabled because DisabledIfEnvironmentVariable does not work on GitHub.
 @Disabled
 public class FileSystemDynamicConfigurationTest {
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -306,7 +306,7 @@ public void destroy() {
 
     private int calculateTimeout(Invocation invocation, String methodName) {
         if (invocation.getObjectAttachment(TIMEOUT_KEY) != null) {
-            return (int) invocation.getObjectAttachment(TIMEOUT_KEY);
+            return (int) RpcUtils.getTimeoutFromInvocation(invocation, 3000);
         }
         Object countdown = RpcContext.getClientAttachment().getObjectAttachment(TIME_COUNTDOWN_KEY);
         int timeout;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -137,7 +137,7 @@ public static ProxyHolder referProxy(ServiceInstance instance) {
 
         Protocol protocol = applicationModel.getExtensionLoader(Protocol.class).getAdaptiveExtension();
 
-        url.setServiceModel(consumerModel);
+        url = url.setServiceModel(consumerModel);
 
         Invoker<MetadataService> invoker = protocol.refer(MetadataService.class, url);
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/ChannelEventRunnable.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.threadlocal.InternalThreadLocal;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.ChannelHandler;
 
@@ -52,6 +53,7 @@ public ChannelEventRunnable(Channel channel, ChannelHandler handler, ChannelStat
 
     @Override
     public void run() {
+        InternalThreadLocal.removeAll();
         if (state == ChannelState.RECEIVED) {
             try {
                 handler.received(channel, message);
@@ -95,7 +97,7 @@ public void run() {
                 logger.warn("unknown state: " + state + ", message is " + message);
             }
         }
-
+        InternalThreadLocal.removeAll();
     }
 
     /**

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -131,6 +131,9 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             return invoker.invoke(invocation);
         } finally {
             context.clearAfterEachInvoke(true);
+            if (context.isAsyncStarted()) {
+                removeContext();
+            }
         }
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Constants.java
Patch:
@@ -87,6 +87,8 @@ public interface Constants {
 
     String SERVER_KEY = "server";
 
+    String IS_PU_SERVER_KEY = "ispuserver";
+
     String CLIENT_KEY = "client";
 
     String DEFAULT_REMOTING_CLIENT = "netty";

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.dubbo.remoting.exchange.ExchangeHandler;
 import org.apache.dubbo.remoting.exchange.ExchangeServer;
 import org.apache.dubbo.remoting.exchange.Exchangers;
+import org.apache.dubbo.remoting.exchange.PortUnificationExchanger;
 import org.apache.dubbo.remoting.exchange.support.ExchangeHandlerAdapter;
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Invocation;
@@ -334,6 +335,7 @@ private void openServer(URL url) {
         String key = url.getAddress();
         // client can export a service which only for server to invoke
         boolean isServer = url.getParameter(IS_SERVER_KEY, true);
+
         if (isServer) {
             ProtocolServer server = serverMap.get(key);
             if (server == null) {
@@ -653,6 +655,7 @@ public void destroy() {
                 }
             }
         }
+        PortUnificationExchanger.close();
         referenceClientMap.clear();
 
         super.destroy();

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -61,6 +61,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.RECONNECT_TASK_PERIOD;
 import static org.apache.dubbo.common.constants.CommonConstants.RECONNECT_TASK_TRY_COUNT;
 import static org.apache.dubbo.common.constants.CommonConstants.REGISTER_IP_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_NO_VALID_PROVIDER;
 import static org.apache.dubbo.common.utils.StringUtils.isNotEmpty;
 import static org.apache.dubbo.rpc.cluster.Constants.CONSUMER_URL_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
@@ -195,7 +196,7 @@ public List<Invoker<T>> list(Invocation invocation) throws RpcException {
         if (routedResult.isEmpty()) {
             // 2-2 - No provider available.
 
-            logger.warn("2-2", "provider server or registry center crashed", "",
+            logger.warn(CLUSTER_NO_VALID_PROVIDER, "provider server or registry center crashed", "",
                 "No provider available after connectivity filter for the service " + getConsumerUrl().getServiceKey()
                 + " All validInvokers' size: " + validInvokers.size()
                 + " All routed invokers' size: " + routedResult.size()

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java
Patch:
@@ -28,6 +28,8 @@
 
 import java.util.List;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_FAILED_SITE_SELECTION;
+
 /**
  * StaticDirectory
  */
@@ -108,7 +110,7 @@ protected List<Invoker<T>> doList(BitList<Invoker<T>> invokers, Invocation invoc
                 List<Invoker<T>> finalInvokers = routerChain.route(getConsumerUrl(), invokers, invocation);
                 return finalInvokers == null ? BitList.emptyList() : finalInvokers;
             } catch (Throwable t) {
-                logger.error("2-1","Failed to execute router","","Failed to execute router: " + getUrl() + ", cause: " + t.getMessage(),t);
+                logger.error(CLUSTER_FAILED_SITE_SELECTION,"Failed to execute router","","Failed to execute router: " + getUrl() + ", cause: " + t.getMessage(),t);
                 return BitList.emptyList();
             }
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/MergerFactory.java
Patch:
@@ -31,6 +31,8 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_FAILED_LOAD_MERGER;
+
 public class MergerFactory implements ScopeModelAware {
 
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(MergerFactory.class);
@@ -73,7 +75,7 @@ private void loadMergers() {
             Merger m = scopeModel.getExtensionLoader(Merger.class).getExtension(name);
             Class<?> actualTypeArg = getActualTypeArgument(m.getClass());
             if (actualTypeArg == null) {
-                logger.warn("2-4","load merger config failed","","Failed to get actual type argument from merger " + m.getClass().getName());
+                logger.warn(CLUSTER_FAILED_LOAD_MERGER,"load merger config failed","","Failed to get actual type argument from merger " + m.getClass().getName());
                 continue;
             }
             MERGER_CACHE.putIfAbsent(actualTypeArg, m);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableStateRouter.java
Patch:
@@ -41,6 +41,8 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_FAILED_RULE_PARSING;
+
 /**
  * Abstract router which listens to dynamic configuration
  */
@@ -75,7 +77,7 @@ public synchronized void process(ConfigChangedEvent event) {
                 routerRule = ConditionRuleParser.parse(event.getContent());
                 generateConditions(routerRule);
             } catch (Exception e) {
-                logger.error("2-15","Failed to parse the raw condition rule","","Failed to parse the raw condition rule and it will not take effect, please check " +
+                logger.error(CLUSTER_FAILED_RULE_PARSING,"Failed to parse the raw condition rule","","Failed to parse the raw condition rule and it will not take effect, please check " +
                     "if the condition rule matches with the template, the raw rule is:\n " + event.getContent(),e);
             }
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleManager.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_FAILED_RECEIVE_RULE;
 import static org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleConstants.MESH_RULE_DATA_ID_SUFFIX;
 
 public class MeshRuleManager {
@@ -63,7 +64,7 @@ private synchronized MeshAppRuleListener subscribeAppRule(String app) {
                 meshAppRuleListener.receiveConfigInfo(rawConfig);
             }
         } catch (Throwable throwable) {
-            logger.error("2-13","failed to get mesh app route rule","","get MeshRuleManager app rule failed.",throwable);
+            logger.error(CLUSTER_FAILED_RECEIVE_RULE,"failed to get mesh app route rule","","get MeshRuleManager app rule failed.",throwable);
         }
 
         ruleRepository.addListener(appRuleDataId, DynamicConfiguration.DEFAULT_GROUP, meshAppRuleListener);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleRouter.java
Patch:
@@ -51,6 +51,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ThreadLocalRandom;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_FAILED_RECEIVE_RULE;
 import static org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleConstants.DESTINATION_RULE_KEY;
 import static org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleConstants.INVALID_APP_NAME;
 import static org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleConstants.KIND_KEY;
@@ -308,7 +309,7 @@ public synchronized void onRuleChange(String appName, List<Map<String, Object>>
                 appToVDGroup.put(appName, vsDestinationGroup);
             }
         } catch (Throwable t) {
-            logger.error("2-13","failed to parse mesh route rule","","Error occurred when parsing rule component.",t);
+            logger.error(CLUSTER_FAILED_RECEIVE_RULE,"failed to parse mesh route rule","","Error occurred when parsing rule component.",t);
         }
 
         computeSubset(appToVDGroup);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/util/MeshRuleDispatcher.java
Patch:
@@ -27,6 +27,8 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_NO_RULE_LISTENER;
+
 
 public class MeshRuleDispatcher {
     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(MeshRuleDispatcher.class);
@@ -55,8 +57,7 @@ public synchronized void post(Map<String, List<Map<String, Object>>> ruleMap) {
                         listener.onRuleChange(appName, entry.getValue());
                     }
                 } else {
-                    logger.warn("2-18","Receive mesh rule but none of listener has been registered","","Receive rule but none of listener has been registered. Maybe type not matched. Rule Type: " + ruleType);
-                    logger.warn("Receive rule but none of listener has been registered. Maybe type not matched. Rule Type: " + ruleType);
+                    logger.warn(CLUSTER_NO_RULE_LISTENER,"Receive mesh rule but none of listener has been registered","","Receive rule but none of listener has been registered. Maybe type not matched. Rule Type: " + ruleType);
                 }
             }
             // clear rule listener not being notified in this time

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/script/ScriptStateRouter.java
Patch:
@@ -49,6 +49,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_SCRIPT_EXCEPTION;
 import static org.apache.dubbo.rpc.cluster.Constants.DEFAULT_SCRIPT_TYPE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.FORCE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.RULE_KEY;
@@ -92,7 +93,7 @@ public ScriptStateRouter(URL url) {
             Compilable compilable = (Compilable) engine;
             function = compilable.compile(rule);
         } catch (ScriptException e) {
-            logger.error("2-15","script route rule invalid","","script route error, rule has been ignored. rule: " + rule +
+            logger.error(CLUSTER_SCRIPT_EXCEPTION,"script route rule invalid","","script route error, rule has been ignored. rule: " + rule +
                 ", url: " + RpcContext.getServiceContext().getUrl(),e);
         }
     }
@@ -136,7 +137,7 @@ protected BitList<Invoker<T>> doRoute(BitList<Invoker<T>> invokers, URL url, Inv
             try {
                 return function.eval(bindings);
             } catch (ScriptException e) {
-                logger.error("2-15","Scriptrouter exec script error","","Script route error, rule has been ignored. rule: " + rule + ", method:" +
+                logger.error(CLUSTER_SCRIPT_EXCEPTION,"Scriptrouter exec script error","","Script route error, rule has been ignored. rule: " + rule + ", method:" +
                     invocation.getMethodName() + ", url: " + RpcContext.getContext().getUrl(),e);
                 return invokers;
             }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -49,6 +49,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.ENABLE_CONNECTIVITY_VALIDATION;
 import static org.apache.dubbo.common.constants.CommonConstants.LOADBALANCE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.RESELECT_COUNT;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_FAILED_RESELECT_INVOKERS;
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_AVAILABLE_CHECK_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_STICKY_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.DEFAULT_CLUSTER_AVAILABLE_CHECK;
@@ -213,11 +214,11 @@ private Invoker<T> doSelect(LoadBalance loadbalance, Invocation invocation,
                         //Avoid collision
                         invoker = invokers.get((index + 1) % invokers.size());
                     } catch (Exception e) {
-                        logger.warn("2-5","select invokers exception","",e.getMessage() + " may because invokers list dynamic change, ignore.",e);
+                        logger.warn(CLUSTER_FAILED_RESELECT_INVOKERS,"select invokers exception","",e.getMessage() + " may because invokers list dynamic change, ignore.",e);
                     }
                 }
             } catch (Throwable t) {
-                logger.error("2-5","failed to reselect invokers","","cluster reselect fail reason is :" + t.getMessage() + " if can not solve, you can set cluster.availablecheck=false in url",t);
+                logger.error(CLUSTER_FAILED_RESELECT_INVOKERS,"failed to reselect invokers","","cluster reselect fail reason is :" + t.getMessage() + " if can not solve, you can set cluster.availablecheck=false in url",t);
             }
         }
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/BroadcastClusterInvoker.java
Patch:
@@ -30,6 +30,7 @@
 
 import java.util.List;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_ERROR_RESPONSE;
 import static org.apache.dubbo.rpc.Constants.ASYNC_KEY;
 
 /**
@@ -76,7 +77,7 @@ public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, L
                     Throwable resultException = result.getException();
                     if (null != resultException) {
                         exception = getRpcException(result.getException());
-                        logger.warn("2-8","provider return error response","",exception.getMessage(),exception);
+                        logger.warn(CLUSTER_ERROR_RESPONSE,"provider return error response","",exception.getMessage(),exception);
                         failIndex++;
                         if (failIndex == failThresholdIndex) {
                             break;
@@ -85,7 +86,7 @@ public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, L
                 }
             } catch (Throwable e) {
                 exception = getRpcException(e);
-                logger.warn("2-8","provider return error response","",exception.getMessage(),exception);
+                logger.warn(CLUSTER_ERROR_RESPONSE,"provider return error response","",exception.getMessage(),exception);
                 failIndex++;
                 if (failIndex == failThresholdIndex) {
                     break;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvoker.java
Patch:
@@ -36,6 +36,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_RETRIES;
 import static org.apache.dubbo.common.constants.CommonConstants.RETRIES_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_FAILED_MULTIPLE_RETRIES;
 
 /**
  * When invoke fails, log the initial error and retry other invokers (retry n times, which means at most n different invokers will be invoked)
@@ -79,7 +80,7 @@ public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, L
             try {
                 Result result = invokeWithContext(invoker, invocation);
                 if (le != null && logger.isWarnEnabled()) {
-                    logger.warn("2-16","failed to retry do invoke","","Although retry the method " + methodName
+                    logger.warn(CLUSTER_FAILED_MULTIPLE_RETRIES,"failed to retry do invoke","","Although retry the method " + methodName
                         + " in the service " + getInterface().getName()
                         + " was successful by the provider " + invoker.getUrl().getAddress()
                         + ", but there have been failed providers " + providers

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailsafeClusterInvoker.java
Patch:
@@ -28,6 +28,8 @@
 
 import java.util.List;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_ERROR_RESPONSE;
+
 /**
  * When invoke fails, log the error message and ignore this error by returning an empty Result.
  * Usually used to write audit logs and other operations
@@ -49,7 +51,7 @@ public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBal
             Invoker<T> invoker = select(loadbalance, invocation, invokers, null);
             return invokeWithContext(invoker, invocation);
         } catch (Throwable e) {
-            logger.error("2-8","Failsafe for provider exception","","Failsafe ignore exception: " + e.getMessage(),e);
+            logger.error(CLUSTER_ERROR_RESPONSE,"Failsafe for provider exception","","Failsafe ignore exception: " + e.getMessage(),e);
             return AsyncRpcResult.newDefaultAsyncResult(null, null, invocation); // ignore
         }
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -39,6 +39,7 @@
 
 import java.util.List;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CLUSTER_FAILED_MOCK_REQUEST;
 import static org.apache.dubbo.rpc.Constants.MOCK_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.FORCE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.INVOCATION_NEED_MOCK;
@@ -102,7 +103,7 @@ public Result invoke(Invocation invocation) throws RpcException {
             result = this.invoker.invoke(invocation);
         } else if (value.startsWith(FORCE_KEY)) {
             if (logger.isWarnEnabled()) {
-                logger.warn("2-17","force mock","","force-mock: " + invocation.getMethodName() + " force-mock enabled , url : " + getUrl());
+                logger.warn(CLUSTER_FAILED_MOCK_REQUEST,"force mock","","force-mock: " + invocation.getMethodName() + " force-mock enabled , url : " + getUrl());
             }
             //force:direct mock
             result = doMockInvoke(invocation, null);
@@ -127,7 +128,7 @@ public Result invoke(Invocation invocation) throws RpcException {
                 }
 
                 if (logger.isWarnEnabled()) {
-                    logger.warn("2-17","failed to mock invoke","","fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : " + getUrl(),e);
+                    logger.warn(CLUSTER_FAILED_MOCK_REQUEST,"failed to mock invoke","","fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : " + getUrl(),e);
                 }
                 result = doMockInvoke(invocation, e);
             }

File: dubbo-common/src/main/java/org/apache/dubbo/common/cache/FileCacheStore.java
Patch:
@@ -37,6 +37,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_CACHE_FILE_EXCEED_MAXIMUM_LIMIT;
+
 /**
  * Local file interaction class that can back different caches.
  * <p>
@@ -73,7 +75,7 @@ public synchronized Map<String, String> loadCache(int entrySize) throws IOExcept
             }
 
             if (count > entrySize) {
-                logger.warn("0-4", "mis-configuration of system properties",
+                logger.warn(COMMON_CACHE_FILE_EXCEED_MAXIMUM_LIMIT, "mis-configuration of system properties",
                     "Check Java system property 'dubbo.mapping.cache.entrySize' and 'dubbo.meta.cache.entrySize'.",
                     "Cache file was truncated for exceeding the maximum entry size: " + entrySize);
             }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Configuration.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.NoSuchElementException;
 
 import static org.apache.dubbo.common.config.ConfigurationUtils.isEmptyValue;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_PROPERTY_MISSPELLING;
 
 /**
  * Configuration interface, to fetch the value for the specified key.
@@ -73,7 +74,7 @@ default Integer getInteger(String key, Integer defaultValue) {
             return convert(Integer.class, key, defaultValue);
         } catch (NumberFormatException e) {
             // 0-2 Property type mismatch.
-            interfaceLevelLogger.error("0-2", "typo in property value",
+            interfaceLevelLogger.error(COMMON_PROPERTY_MISSPELLING, "typo in property value",
                 "This property requires an integer value.",
                 "Actual Class: " + getClass().getName(), e);
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReport.java
Patch:
@@ -41,6 +41,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.DUMP_DIRECTORY;
 import static org.apache.dubbo.common.constants.CommonConstants.OS_NAME_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.OS_WIN_PREFIX;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_THREAD_POOL_EXHAUSTED;
 
 /**
  * Abort Policy.
@@ -85,7 +86,7 @@ public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
                 url.getProtocol(), url.getIp(), url.getPort());
 
         // 0-1 - Thread pool is EXHAUSTED!
-        logger.warn("0-1", "too much client requesting provider", "", msg);
+        logger.warn(COMMON_THREAD_POOL_EXHAUSTED, "too much client requesting provider", "", msg);
 
         dumpJStack();
         dispatchThreadPoolExhaustedEvent(msg);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -46,6 +46,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.METADATA_SERVICE_PROTOCOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.THREADPOOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.THREADS_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_FIND_PROTOCOL;
 import static org.apache.dubbo.remoting.Constants.BIND_PORT_KEY;
 
 /**
@@ -139,7 +140,7 @@ private ProtocolConfig generateMetadataProtocol() {
                     }
                 }
             } catch (Exception e) {
-                logger.error("5-16", "invalid specified " + specifiedProtocol + "  protocol", "", "Failed to find any valid protocol, will use random port to export metadata service.", e);
+                logger.error(CONFIG_FAILED_FIND_PROTOCOL, "invalid specified " + specifiedProtocol + "  protocol", "", "Failed to find any valid protocol, will use random port to export metadata service.", e);
             }
         } else {
             protocolConfig.setPort(port);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigValidationUtils.java
Patch:
@@ -99,6 +99,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.THREADPOOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.USERNAME_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_PARAMETER_FORMAT_ERROR;
 import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_REGISTER_MODE_ALL;
 import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_REGISTER_MODE_INSTANCE;
 import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_REGISTER_MODE_INTERFACE;
@@ -726,13 +727,13 @@ public static void checkProperty(String property, String value, int maxlength, P
             return;
         }
         if (value.length() > maxlength) {
-            logger.error("5-17", "the value content is too long", "", "Parameter value format error. Invalid " +
+            logger.error(CONFIG_PARAMETER_FORMAT_ERROR, "the value content is too long", "", "Parameter value format error. Invalid " +
                 property + "=\"" + value + "\" is longer than " + maxlength);
         }
         if (pattern != null) {
             Matcher matcher = pattern.matcher(value);
             if (!matcher.matches()) {
-                logger.error("5-17", "the value content is illegal character", "", "Parameter value format error. Invalid " +
+                logger.error(CONFIG_PARAMETER_FORMAT_ERROR, "the value content is illegal character", "", "Parameter value format error. Invalid " +
                     property + "=\"" + value + "\" contains illegal " +
                     "character, only digit, letter, '-', '_' or '.' is legal.");
             }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboDeployApplicationListener.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config.spring.context;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_STOP_DUBBO_ERROR;
 import static org.springframework.util.ObjectUtils.nullSafeEquals;
 
 import java.util.concurrent.Future;
@@ -130,7 +131,7 @@ private void onContextClosedEvent(ContextClosedEvent event) {
                 moduleModel.destroy();
             }
         } catch (Exception e) {
-            logger.error("5-20", "", "", "Unexpected error occurred when stop dubbo module: " + e.getMessage(), e);
+            logger.error(CONFIG_STOP_DUBBO_ERROR, "", "", "Unexpected error occurred when stop dubbo module: " + e.getMessage(), e);
         }
         // remove context bind cache
         DubboSpringInitializer.remove(event.getApplicationContext());

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/AbstractRegistryService.java
Patch:
@@ -32,6 +32,8 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_NOTIFY_EVENT;
+
 /**
  * AbstractRegistryService
  */
@@ -184,7 +186,7 @@ private void doNotify(String service, List<URL> urls) {
                 try {
                     notify(service, urls, listener);
                 } catch (Throwable t) {
-                    logger.error("5-18", "", "", "Failed to notify registry event, service: " + service + ", urls: " + urls + ", cause: " + t.getMessage(), t);
+                    logger.error(CONFIG_FAILED_NOTIFY_EVENT, "", "", "Failed to notify registry event, service: " + service + ", urls: " + urls + ", cause: " + t.getMessage(), t);
                 }
             }
         }

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/EmbeddedZooKeeper.java
Patch:
@@ -29,6 +29,8 @@
 import java.util.Properties;
 import java.util.UUID;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_ZOOKEEPER_SERVER_ERROR;
+
 /**
  * from: https://github.com/spring-projects/spring-xd/blob/v1.3.1.RELEASE/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/zookeeper/ZooKeeperUtils.java
  * <p>
@@ -238,7 +240,7 @@ public void run() {
                 if (errorHandler != null) {
                     errorHandler.handleError(e);
                 } else {
-                    logger.error("5-19", "ZooKeeper server error", "", "Exception running embedded ZooKeeper.", e);
+                    logger.error(CONFIG_ZOOKEEPER_SERVER_ERROR, "ZooKeeper server error", "", "Exception running embedded ZooKeeper.", e);
                 }
             }
         }

File: dubbo-configcenter/dubbo-configcenter-apollo/src/main/java/org/apache/dubbo/configcenter/support/apollo/ApolloDynamicConfiguration.java
Patch:
@@ -47,6 +47,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.CLUSTER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SPLIT_PATTERN;
 import static org.apache.dubbo.common.constants.CommonConstants.CONFIG_NAMESPACE_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_CONNECT_REGISTRY;
 
 /**
  * Apollo implementation, https://github.com/ctripcorp/apollo
@@ -108,7 +109,7 @@ public class ApolloDynamicConfiguration implements DynamicConfiguration {
             } else {
                 // 5-1 Failed to connect to configuration center.
 
-                logger.warn("5-1", "configuration server offline", "",
+                logger.warn(CONFIG_FAILED_CONNECT_REGISTRY, "configuration server offline", "",
                     "Failed to connect to config center, the config center is Apollo, " +
                     "the address is: " + (StringUtils.isNotEmpty(configAddr) ? configAddr : configEnv) +
                     ", will use the local cache value instead before eventually the connection is established.");

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfiguration.java
Patch:
@@ -35,6 +35,8 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_CONNECT_REGISTRY;
+
 public class ZookeeperDynamicConfiguration extends TreePathDynamicConfiguration {
 
     private Executor executor;
@@ -65,7 +67,7 @@ public class ZookeeperDynamicConfiguration extends TreePathDynamicConfiguration
                 new IllegalStateException("Failed to connect with zookeeper, pls check if url " + url + " is correct.");
 
             if (logger != null) {
-                logger.error("5-1", "configuration server offline", "",
+                logger.error(CONFIG_FAILED_CONNECT_REGISTRY, "configuration server offline", "",
                     "Failed to connect with zookeeper", illegalStateException);
             }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ReflectionBasedServiceDiscovery.java
Patch:
@@ -52,6 +52,8 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_NOTIFY_EVENT;
+
 public class ReflectionBasedServiceDiscovery extends AbstractServiceDiscovery {
 
     private final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
@@ -163,7 +165,7 @@ private void updateInstanceMetadata(ServiceInstance serviceInstance) {
                     // 1-7 - Failed to notify registry event.
                     // The updating of metadata to consumer is a type of registry event.
 
-                    logger.warn("1-7", "consumer is offline", "",
+                    logger.warn(REGISTRY_FAILED_NOTIFY_EVENT, "consumer is offline", "",
                         "Notify to consumer error, removing listener.");
 
                     // remove listener if consumer is offline

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryDirectory.java
Patch:
@@ -61,6 +61,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.DISABLED_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ENABLED_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_UNSUPPORTED;
 import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_HASHMAP_LOAD_FACTOR;
 import static org.apache.dubbo.common.constants.RegistryConstants.EMPTY_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_TYPE_KEY;
@@ -297,7 +298,7 @@ private Map<ProtocolServiceKeyWithAddress, Invoker<T>> toInvokers(Map<ProtocolSe
 
                 // 4-1 - Unsupported protocol
 
-                logger.error("4-1", "protocol extension does not installed", "", "Unsupported protocol.",
+                logger.error(PROTOCOL_UNSUPPORTED, "protocol extension does not installed", "", "Unsupported protocol.",
                     new IllegalStateException("Unsupported protocol " + instanceAddressURL.getProtocol() +
                     " in notified url: " + instanceAddressURL + " from registry " + getUrl().getAddress() +
                     " to consumer " + NetUtils.getLocalHost() + ", supported protocol: " +

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListener.java
Patch:
@@ -55,6 +55,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_REFRESH_ADDRESS;
 import static org.apache.dubbo.common.constants.RegistryConstants.EMPTY_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.ENABLE_EMPTY_PROTECTION_KEY;
 import static org.apache.dubbo.metadata.RevisionResolver.EMPTY_REVISION;
@@ -185,7 +186,7 @@ private synchronized void doOnEvent(ServiceInstancesChangedEvent event) {
             // return if all metadata is empty, this notification will not take effect.
             if (emptyNum == revisionToInstances.size()) {
                 // 1-17 - Address refresh failed.
-                logger.error("1-17", "metadata Server failure", "",
+                logger.error(REGISTRY_FAILED_REFRESH_ADDRESS, "metadata Server failure", "",
                     "Address refresh failed because of Metadata Server failure, wait for retry or new address refresh event.");
 
                 return;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceHostPortCustomizer.java
Patch:
@@ -31,6 +31,8 @@
 import java.util.Set;
 import java.util.SortedSet;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.PROTOCOL_FAILED_INIT_SERIALIZATION_OPTIMIZER;
+
 /**
  * The {@link ServiceInstanceCustomizer} to customize the {@link ServiceInstance#getPort() port} of service instance.
  */
@@ -74,7 +76,7 @@ public void customize(ServiceInstance serviceInstance, ApplicationModel applicat
 
                     // 4-2 - Can't find an instance URL using the default preferredProtocol.
 
-                    logger.warn("4-2", "typo in preferred protocol", "",
+                    logger.warn(PROTOCOL_FAILED_INIT_SERIALIZATION_OPTIMIZER, "typo in preferred protocol", "",
                         "Can't find an instance URL using the default preferredProtocol \"" + preferredProtocol + "\", " +
                         "falling back to the strategy that pick the first found protocol. " +
                         "Please try modifying the config of dubbo.application.protocol");

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/StandardMetadataServiceURLBuilder.java
Patch:
@@ -44,6 +44,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.THREADS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_MISSING_METADATA_CONFIG_PORT;
 import static org.apache.dubbo.common.utils.StringUtils.isBlank;
 import static org.apache.dubbo.metadata.MetadataConstants.DEFAULT_METADATA_TIMEOUT_VALUE;
 import static org.apache.dubbo.metadata.MetadataConstants.METADATA_PROXY_TIMEOUT_KEY;
@@ -127,7 +128,7 @@ private URL generateUrlWithoutMetadata(String serviceName, String host, Integer
 
             // 1-18 - Metadata Service Port should be specified for consumer.
 
-            logger.warn("1-18", "missing configuration of metadata service port", "",
+            logger.warn(REGISTRY_MISSING_METADATA_CONFIG_PORT, "missing configuration of metadata service port", "",
                 "Metadata Service Port is not provided. Since DNS is not able to negotiate the metadata port " +
                     "between Provider and Consumer, Dubbo will try using instance port as the default metadata port.");
 
@@ -145,7 +146,7 @@ private URL generateUrlWithoutMetadata(String serviceName, String host, Integer
 
             IllegalStateException illegalStateException = new IllegalStateException(message);
 
-            logger.error("1-18", "missing configuration of metadata service port", "",
+            logger.error(REGISTRY_MISSING_METADATA_CONFIG_PORT, "missing configuration of metadata service port", "",
                 message, illegalStateException);
 
             throw illegalStateException;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/AbstractConfiguratorListener.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_PARSE_DYNAMIC_CONFIG;
 import static org.apache.dubbo.rpc.Constants.ACCESS_LOG_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.ROUTER_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.RULE_KEY;
@@ -109,7 +110,7 @@ private boolean genConfiguratorsFromRawRule(String rawConfig) {
         } catch (Exception e) {
             // 1-14 - Failed to parse raw dynamic config.
 
-            logger.warn("1-14", "", "",
+            logger.warn(REGISTRY_FAILED_PARSE_DYNAMIC_CONFIG, "", "",
                 "Failed to parse raw dynamic config and it will not take effect, the raw config is: "
                     + rawConfig + ", cause: " + e.getMessage());
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/AbstractRetryTask.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.util.concurrent.TimeUnit;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_EXECUTE_RETRYING_TASK;
 import static org.apache.dubbo.registry.Constants.DEFAULT_REGISTRY_RETRY_PERIOD;
 import static org.apache.dubbo.registry.Constants.DEFAULT_REGISTRY_RETRY_TIMES;
 import static org.apache.dubbo.registry.Constants.REGISTRY_RETRY_PERIOD_KEY;
@@ -116,7 +117,7 @@ public void run(Timeout timeout) throws Exception {
             // 1-13 - failed to execute the retrying task.
 
             logger.warn(
-                "1-13", "registry center offline", "Check the registry server.",
+                REGISTRY_EXECUTE_RETRYING_TASK, "registry center offline", "Check the registry server.",
                 "Final failed to execute task " + taskName + ", url: " + url + ", retry " + retryTimes + " times.");
 
             return;
@@ -130,7 +131,7 @@ public void run(Timeout timeout) throws Exception {
 
             // 1-13 - failed to execute the retrying task.
 
-            logger.warn("1-13", "registry center offline", "Check the registry server.",
+            logger.warn(REGISTRY_EXECUTE_RETRYING_TASK, "registry center offline", "Check the registry server.",
                 "Failed to execute task " + taskName + ", url: " + url + ", waiting for again, cause:" + t.getMessage(), t);
 
             // reput this task when catch exception.

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -30,6 +30,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.CHECK_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMESTAMP_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_CREATE_INSTANCE;
 import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 
@@ -104,7 +105,7 @@ public Registry getRegistry(URL url) {
                 throw new RuntimeException("Can not create registry " + url, e);
             } else {
                 // 1-11 Failed to obtain or create registry (service) object.
-                LOGGER.warn("1-11", "", "",
+                LOGGER.warn(REGISTRY_FAILED_CREATE_INSTANCE, "", "",
                     "Failed to obtain or create registry ", e);
             }
         } finally {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/RegistryManager.java
Patch:
@@ -36,6 +36,8 @@
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.stream.Collectors;
 
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.REGISTRY_FAILED_FETCH_INSTANCE;
+
 /**
  * Application Level, used to collect Registries
  */
@@ -125,7 +127,7 @@ public void reset() {
     protected Registry getDefaultNopRegistryIfDestroyed() {
         if (destroyed.get()) {
             // 1-12 Failed to fetch (server) instance since the registry instances have been destroyed.
-            LOGGER.warn("1-12", "misuse of the methods", "",
+            LOGGER.warn(REGISTRY_FAILED_FETCH_INSTANCE, "misuse of the methods", "",
                 "All registry instances have been destroyed, failed to fetch any instance. " +
                 "Usually, this means no need to try to do unnecessary redundant resource clearance, all registries has been taken care of.");
 

File: dubbo-remoting/dubbo-remoting-zookeeper-curator5/src/main/java/org/apache/dubbo/remoting/zookeeper/curator5/Curator5ZookeeperClient.java
Patch:
@@ -55,6 +55,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.SESSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_CONNECT_REGISTRY;
 
 
 public class Curator5ZookeeperClient extends AbstractZookeeperClient<Curator5ZookeeperClient.NodeCacheListenerImpl, Curator5ZookeeperClient.CuratorWatcherImpl> {
@@ -99,7 +100,7 @@ public List<ACL> getAclForPath(String path) {
                 IllegalStateException illegalStateException = new IllegalStateException("zookeeper not connected");
 
                 // 5-1 Failed to connect to configuration center.
-                logger.error("5-1", "Zookeeper server offline", "",
+                logger.error(CONFIG_FAILED_CONNECT_REGISTRY, "Zookeeper server offline", "",
                     "Failed to connect with zookeeper", illegalStateException);
 
                 throw illegalStateException;

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java
Patch:
@@ -59,6 +59,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.SESSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
+import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_FAILED_CONNECT_REGISTRY;
 
 
 public class CuratorZookeeperClient extends AbstractZookeeperClient<CuratorZookeeperClient.NodeCacheListenerImpl, CuratorZookeeperClient.CuratorWatcherImpl> {
@@ -103,7 +104,7 @@ public List<ACL> getAclForPath(String path) {
                 IllegalStateException illegalStateException = new IllegalStateException("zookeeper not connected");
 
                 // 5-1 Failed to connect to configuration center.
-                logger.error("5-1", "Zookeeper server offline", "",
+                logger.error(CONFIG_FAILED_CONNECT_REGISTRY, "Zookeeper server offline", "",
                     "Failed to connect with zookeeper", illegalStateException);
 
                 throw illegalStateException;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/AbstractServiceNameMapping.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-import org.apache.dubbo.rpc.model.ScopeModelAware;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -50,7 +49,7 @@
 import static org.apache.dubbo.common.utils.CollectionUtils.toTreeSet;
 import static org.apache.dubbo.common.utils.StringUtils.isBlank;
 
-public abstract class AbstractServiceNameMapping implements ServiceNameMapping, ScopeModelAware {
+public abstract class AbstractServiceNameMapping implements ServiceNameMapping {
     protected final Logger logger = LoggerFactory.getLogger(getClass());
     protected ApplicationModel applicationModel;
     private final MappingCacheManager mappingCacheManager;
@@ -73,7 +72,7 @@ public AbstractServiceNameMapping(ApplicationModel applicationModel) {
             .getBean(FrameworkExecutorRepository.class).getCacheRefreshingScheduledExecutor());
     }
 
-    @Override
+    // just for test
     public void setApplicationModel(ApplicationModel applicationModel) {
         this.applicationModel = applicationModel;
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/CacheableFailbackRegistry.java
Patch:
@@ -123,7 +123,7 @@ public void doUnsubscribe(URL url, NotifyListener listener) {
     protected void evictURLCache(URL url) {
         Map<String, ServiceAddressURL> oldURLs = stringUrls.remove(url);
         try {
-            if (oldURLs != null && !oldURLs.isEmpty()) {
+            if (CollectionUtils.isNotEmptyMap(oldURLs)) {
                 logger.info("Evicting urls for service " + url.getServiceKey() + ", size " + oldURLs.size());
                 Long currentTimestamp = System.currentTimeMillis();
                 for (Map.Entry<String, ServiceAddressURL> entry : oldURLs.entrySet()) {
@@ -165,7 +165,7 @@ protected List<URL> toUrlsWithoutEmpty(URL consumer, Collection<String> provider
 
         if (oldURLs == null) {
             for (String rawProvider : providers) {
-                // remove timestamp in provider url.
+                // remove VARIABLE_KEYS(timestamp,pid..) in provider url.
                 rawProvider = stripOffVariableKeys(rawProvider);
 
                 // create DubboServiceAddress object using provider url, consumer url, and extra parameters.

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java
Patch:
@@ -192,9 +192,9 @@ public void recover() {
                 logger.error("Trying to recover from new zkClient session failed, path is " + path + ", error msg: " + e.getMessage());
             }
 
-            List<ServiceInstance> instances = this.getInstances(serviceName);
+            List<ServiceInstance> instances = this.getInstances(watcher.getServiceName());
             for (ServiceInstancesChangedListener listener : listeners) {
-                listener.onEvent(new ServiceInstancesChangedEvent(serviceName, instances));
+                listener.onEvent(new ServiceInstancesChangedEvent(watcher.getServiceName(), instances));
             }
             latch.countDown();
         });

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -764,15 +764,14 @@ public void preDestroy() {
             }
             onStopping();
 
+            unregisterServiceInstance();
             destroyRegistries();
-            destroyServiceDiscoveries();
             destroyMetadataReports();
 
             unRegisterShutdownHook();
             if (asyncMetadataFuture != null) {
                 asyncMetadataFuture.cancel(true);
             }
-            unregisterServiceInstance();
         }
     }
 

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/AbstractTripleReactorPublisher.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive;
+package org.apache.dubbo.reactive;
 
 import org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver;
 import org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver;

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/AbstractTripleReactorSubscriber.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive;
+package org.apache.dubbo.reactive;
 
 import org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver;
 import org.reactivestreams.Subscriber;

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/ClientTripleReactorPublisher.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive;
+package org.apache.dubbo.reactive;
 
 import org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver;
 import org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter;

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/ClientTripleReactorSubscriber.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive;
+package org.apache.dubbo.reactive;
 
 import org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter;
 

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/ServerTripleReactorPublisher.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive;
+package org.apache.dubbo.reactive;
 
 import org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver;
 

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/ServerTripleReactorSubscriber.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive;
+package org.apache.dubbo.reactive;
 
 import org.apache.dubbo.rpc.CancellationContext;
 import org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver;
@@ -24,7 +24,7 @@
 /**
  * The Subscriber in server to passing the data produced by user publisher to responseStream.
  */
-public class ServerTripleReactorSubscriber<T> extends AbstractTripleReactorSubscriber<T>{
+public class ServerTripleReactorSubscriber<T> extends AbstractTripleReactorSubscriber<T> {
 
     @Override
     public void subscribe(CallStreamObserver<T> downstream) {

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/calls/ReactorClientCalls.java
Patch:
@@ -15,14 +15,14 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive.calls;
+package org.apache.dubbo.reactive.calls;
 
 import org.apache.dubbo.common.stream.StreamObserver;
+import org.apache.dubbo.reactive.ClientTripleReactorPublisher;
+import org.apache.dubbo.reactive.ClientTripleReactorSubscriber;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.model.StubMethodDescriptor;
 import org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver;
-import org.apache.dubbo.rpc.protocol.tri.reactive.ClientTripleReactorPublisher;
-import org.apache.dubbo.rpc.protocol.tri.reactive.ClientTripleReactorSubscriber;
 import org.apache.dubbo.rpc.stub.StubInvocationUtil;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/calls/ReactorServerCalls.java
Patch:
@@ -15,13 +15,13 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive.calls;
+package org.apache.dubbo.reactive.calls;
 
 import org.apache.dubbo.common.stream.StreamObserver;
+import org.apache.dubbo.reactive.ServerTripleReactorPublisher;
+import org.apache.dubbo.reactive.ServerTripleReactorSubscriber;
 import org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver;
 import org.apache.dubbo.rpc.protocol.tri.observer.ServerCallToObserverAdapter;
-import org.apache.dubbo.rpc.protocol.tri.reactive.ServerTripleReactorPublisher;
-import org.apache.dubbo.rpc.protocol.tri.reactive.ServerTripleReactorSubscriber;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/handler/ManyToManyMethodHandler.java
Patch:
@@ -15,11 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive.handler;
+package org.apache.dubbo.reactive.handler;
 
 import org.apache.dubbo.common.stream.StreamObserver;
+import org.apache.dubbo.reactive.calls.ReactorServerCalls;
 import org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver;
-import org.apache.dubbo.rpc.protocol.tri.reactive.calls.ReactorServerCalls;
 import org.apache.dubbo.rpc.stub.StubMethodHandler;
 import reactor.core.publisher.Flux;
 

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/handler/ManyToOneMethodHandler.java
Patch:
@@ -15,11 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive.handler;
+package org.apache.dubbo.reactive.handler;
 
 import org.apache.dubbo.common.stream.StreamObserver;
+import org.apache.dubbo.reactive.calls.ReactorServerCalls;
 import org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver;
-import org.apache.dubbo.rpc.protocol.tri.reactive.calls.ReactorServerCalls;
 import org.apache.dubbo.rpc.stub.StubMethodHandler;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/handler/OneToManyMethodHandler.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive.handler;
+package org.apache.dubbo.reactive.handler;
 
 import org.apache.dubbo.common.stream.StreamObserver;
-import org.apache.dubbo.rpc.protocol.tri.reactive.calls.ReactorServerCalls;
+import org.apache.dubbo.reactive.calls.ReactorServerCalls;
 import org.apache.dubbo.rpc.stub.StubMethodHandler;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;

File: dubbo-plugin/dubbo-reactive/src/main/java/org/apache/dubbo/reactive/handler/OneToOneMethodHandler.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive.handler;
+package org.apache.dubbo.reactive.handler;
 
 import org.apache.dubbo.common.stream.StreamObserver;
-import org.apache.dubbo.rpc.protocol.tri.reactive.calls.ReactorServerCalls;
+import org.apache.dubbo.reactive.calls.ReactorServerCalls;
 import org.apache.dubbo.rpc.stub.FutureToObserverAdaptor;
 import org.apache.dubbo.rpc.stub.StubMethodHandler;
 import reactor.core.publisher.Mono;

File: dubbo-plugin/dubbo-reactive/src/test/java/org/apache/dubbo/reactive/ManyToManyMethodHandlerTest.java
Patch:
@@ -15,11 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive;
+package org.apache.dubbo.reactive;
 
 import org.apache.dubbo.common.stream.StreamObserver;
+import org.apache.dubbo.reactive.handler.ManyToManyMethodHandler;
 import org.apache.dubbo.rpc.protocol.tri.observer.ServerCallToObserverAdapter;
-import org.apache.dubbo.rpc.protocol.tri.reactive.handler.ManyToManyMethodHandler;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;

File: dubbo-plugin/dubbo-reactive/src/test/java/org/apache/dubbo/reactive/ManyToOneMethodHandlerTest.java
Patch:
@@ -15,11 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive;
+package org.apache.dubbo.reactive;
 
 import org.apache.dubbo.common.stream.StreamObserver;
+import org.apache.dubbo.reactive.handler.ManyToOneMethodHandler;
 import org.apache.dubbo.rpc.protocol.tri.observer.ServerCallToObserverAdapter;
-import org.apache.dubbo.rpc.protocol.tri.reactive.handler.ManyToOneMethodHandler;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;

File: dubbo-plugin/dubbo-reactive/src/test/java/org/apache/dubbo/reactive/OneToManyMethodHandlerTest.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive;
+package org.apache.dubbo.reactive;
 
+import org.apache.dubbo.reactive.handler.OneToManyMethodHandler;
 import org.apache.dubbo.rpc.protocol.tri.observer.ServerCallToObserverAdapter;
-import org.apache.dubbo.rpc.protocol.tri.reactive.handler.OneToManyMethodHandler;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;

File: dubbo-plugin/dubbo-reactive/src/test/java/org/apache/dubbo/reactive/OneToOneMethodHandlerTest.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri.reactive;
+package org.apache.dubbo.reactive;
 
-import org.apache.dubbo.rpc.protocol.tri.reactive.handler.OneToOneMethodHandler;
+import org.apache.dubbo.reactive.handler.OneToOneMethodHandler;
 import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.CompletableFuture;

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java
Patch:
@@ -277,6 +277,9 @@ public void doUnsubscribe(URL url, NotifyListener listener) {
             shutdownServiceNamesLookup();
         } else {
             Map<NotifyListener, NacosAggregateListener> listenerMap = originToAggregateListener.get(url);
+            if (listenerMap == null) {
+                return;
+            }
             NacosAggregateListener nacosAggregateListener = listenerMap.remove(listener);
             if (nacosAggregateListener != null) {
                 Set<String> serviceNames = getServiceNames(url, nacosAggregateListener);

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosServiceDiscovery.java
Patch:
@@ -78,6 +78,7 @@ public NacosServiceDiscovery(ApplicationModel applicationModel, URL registryURL)
     @Override
     public void doDestroy() throws Exception {
         this.namingService.shutdown();
+        this.eventListeners.clear();
     }
 
     @Override

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataInfo.java
Patch:
@@ -735,7 +735,7 @@ public boolean hasMethodParameter(String method) {
         }
 
         public String toDescString() {
-            return this.getMatchKey() + path + new TreeMap<>(getParams());
+            return this.getMatchKey() + port + path + new TreeMap<>(getParams());
         }
 
         public void addParameter(String key, String value) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/cache/FileCacheStore.java
Patch:
@@ -73,7 +73,9 @@ public synchronized Map<String, String> loadCache(int entrySize) throws IOExcept
             }
 
             if (count > entrySize) {
-                logger.warn("Cache file was truncated for exceeding the maximum entry size " + entrySize);
+                logger.warn("0-4", "mis-configuration of system properties",
+                    "Check Java system property 'dubbo.mapping.cache.entrySize' and 'dubbo.meta.cache.entrySize'.",
+                    "Cache file was truncated for exceeding the maximum entry size: " + entrySize);
             }
         } catch (IOException e) {
             logger.warn("Load cache failed ", e);

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/manager/DefaultExecutorRepository.java
Patch:
@@ -136,6 +136,7 @@ public ExecutorService getExecutor(URL url) {
         if (executors == null) {
             logger.warn("No available executors, this is not expected, framework should call createExecutorIfAbsent first " +
                 "before coming to here.");
+
             return null;
         }
 

File: dubbo-registry/dubbo-registry-multiple/src/main/java/org/apache/dubbo/registry/multiple/MultipleRegistry.java
Patch:
@@ -253,7 +253,7 @@ public List<String> getEffectReferenceRegistryURLs() {
 
     protected static class MultipleNotifyListenerWrapper implements NotifyListener {
 
-        Map<URL, SingleNotifyListener> registryMap = new ConcurrentHashMap<URL, SingleNotifyListener>(4);
+        Map<URL, SingleNotifyListener> registryMap = new ConcurrentHashMap<>(4);
         NotifyListener sourceNotifyListener;
 
         public MultipleNotifyListenerWrapper(NotifyListener sourceNotifyListener) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleManager.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.rpc.cluster.router.mesh.route;
 
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository;
 import org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleListener;
@@ -33,7 +33,7 @@
 
 public class MeshRuleManager {
 
-    public static final Logger logger = LoggerFactory.getLogger(MeshRuleManager.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(MeshRuleManager.class);
 
     private final ConcurrentHashMap<String, MeshAppRuleListener> APP_RULE_LISTENERS = new ConcurrentHashMap<>();
 
@@ -63,7 +63,7 @@ private synchronized MeshAppRuleListener subscribeAppRule(String app) {
                 meshAppRuleListener.receiveConfigInfo(rawConfig);
             }
         } catch (Throwable throwable) {
-            logger.error("get MeshRuleManager app rule failed.", throwable);
+            logger.error("2-13","failed to get mesh app route rule","","get MeshRuleManager app rule failed.",throwable);
         }
 
         ruleRepository.addListener(appRuleDataId, DynamicConfiguration.DEFAULT_GROUP, meshAppRuleListener);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleRouter.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.rpc.cluster.router.mesh.route;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.Holder;
@@ -58,7 +58,7 @@
 
 public abstract class MeshRuleRouter<T> extends AbstractStateRouter<T> implements MeshRuleListener {
 
-    public static final Logger logger = LoggerFactory.getLogger(MeshRuleRouter.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(MeshRuleRouter.class);
 
     private final Map<String, String> sourcesLabels;
     private volatile BitList<Invoker<T>> invokerList = BitList.emptyList();
@@ -308,7 +308,7 @@ public synchronized void onRuleChange(String appName, List<Map<String, Object>>
                 appToVDGroup.put(appName, vsDestinationGroup);
             }
         } catch (Throwable t) {
-            logger.error("Error occurred when parsing rule component.", t);
+            logger.error("2-13","failed to parse mesh route rule","","Error occurred when parsing rule component.",t);
         }
 
         computeSubset(appToVDGroup);

File: dubbo-common/src/main/java/org/apache/dubbo/common/timer/HashedWheelTimer.java
Patch:
@@ -52,14 +52,14 @@
  * You can increase or decrease the accuracy of the execution timing by
  * specifying smaller or larger tick duration in the constructor.  In most
  * network applications, I/O timeout does not need to be accurate.  Therefore,
- * the default tick duration is 100 milliseconds and you will not need to try
+ * the default tick duration is 100 milliseconds, and you will not need to try
  * different configurations in most cases.
  *
  * <h3>Ticks per Wheel (Wheel Size)</h3>
  * <p>
  * {@link HashedWheelTimer} maintains a data structure called 'wheel'.
  * To put simply, a wheel is a hash table of {@link TimerTask}s whose hash
- * function is 'dead line of the task'.  The default number of ticks per wheel
+ * function is 'deadline of the task'.  The default number of ticks per wheel
  * (i.e. the size of the wheel) is 512.  You could specify a larger value
  * if you are going to schedule a lot of timeouts.
  *

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.config.metadata;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -53,7 +53,7 @@
  */
 public class ConfigurableMetadataServiceExporter {
 
-    private final Logger logger = LoggerFactory.getLogger(getClass());
+    private final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
 
     private MetadataServiceDelegation metadataService;
 
@@ -139,7 +139,7 @@ private ProtocolConfig generateMetadataProtocol() {
                     }
                 }
             } catch (Exception e) {
-                logger.error("Failed to find any valid " + specifiedProtocol + " protocol, will use random port to export metadata service.");
+                logger.error("5-16", "invalid specified " + specifiedProtocol + "  protocol", "", "Failed to find any valid protocol, will use random port to export metadata service.", e);
             }
         } else {
             protocolConfig.setPort(port);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboDeployApplicationListener.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.common.deploy.DeployListenerAdapter;
 import org.apache.dubbo.common.deploy.DeployState;
 import org.apache.dubbo.common.deploy.ModuleDeployer;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.Assert;
 import org.apache.dubbo.config.spring.context.event.DubboApplicationStateEvent;
@@ -44,7 +44,7 @@
  */
 public class DubboDeployApplicationListener implements ApplicationListener<ApplicationContextEvent>, ApplicationContextAware, Ordered {
 
-    private static final Logger logger = LoggerFactory.getLogger(DubboDeployApplicationListener.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(DubboDeployApplicationListener.class);
 
     private ApplicationContext applicationContext;
 
@@ -130,7 +130,7 @@ private void onContextClosedEvent(ContextClosedEvent event) {
                 moduleModel.destroy();
             }
         } catch (Exception e) {
-            logger.error("An error occurred when stop dubbo module: " + e.getMessage(), e);
+            logger.error("5-20", "", "", "Unexpected error occurred when stop dubbo module: " + e.getMessage(), e);
         }
         // remove context bind cache
         DubboSpringInitializer.remove(event.getApplicationContext());

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/AbstractRegistryService.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.config.spring;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -38,7 +38,7 @@
 public abstract class AbstractRegistryService implements RegistryService {
 
     // logger
-    protected final Logger logger = LoggerFactory.getLogger(getClass());
+    protected final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
 
     // registered services
     // Map<serviceName, Map<url, queryString>>
@@ -184,7 +184,7 @@ private void doNotify(String service, List<URL> urls) {
                 try {
                     notify(service, urls, listener);
                 } catch (Throwable t) {
-                    logger.error("Failed to notify registry event, service: " + service + ", urls: " + urls + ", cause: " + t.getMessage(), t);
+                    logger.error("5-18", "", "", "Failed to notify registry event, service: " + service + ", urls: " + urls + ", cause: " + t.getMessage(), t);
                 }
             }
         }

File: dubbo-common/src/main/java/org/apache/dubbo/common/metrics/model/MetricsKey.java
Patch:
@@ -26,7 +26,7 @@ public enum MetricsKey {
     METRIC_REQUESTS_TOTAL_AGG("requests.total.aggregate", "Aggregated Total Requests"),
     METRIC_REQUESTS_SUCCEED_AGG("requests.succeed.aggregate", "Aggregated Succeed Requests"),
     METRIC_REQUESTS_FAILED_AGG("requests.failed.aggregate", "Aggregated Failed Requests"),
-    METRIC_QPS_NAME("qps", "Query Per Seconds"),
+    METRIC_QPS("qps", "Query Per Seconds"),
     METRIC_RT_LAST("rt.last", "Last Response Time"),
     METRIC_RT_MIN("rt.min", "Min Response Time"),
     METRIC_RT_MAX("rt.max", "Max Response Time"),

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java
Patch:
@@ -241,6 +241,7 @@ public RouterSnapshotNode<T> buildRouterSnapshot(URL url, BitList<Invoker<T>> av
         RouterSnapshotNode<T> commonRouterNode = new RouterSnapshotNode<T>("CommonRouter", resultInvokers.clone());
         parentNode.appendNode(commonRouterNode);
         List<Invoker<T>> commonRouterResult = resultInvokers;
+
         // 2. route common router
         for (Router router : routers) {
             // Copy resultInvokers to a arrayList. BitList not support

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -524,8 +524,9 @@ public List<T> getLoadedExtensionInstances() {
     }
 
     /**
-     * Find the extension with the given name. If the specified name is not found, then {@link IllegalStateException}
-     * will be thrown.
+     * Find the extension with the given name.
+     *
+     * @throws IllegalStateException If the specified extension is not found.
      */
     public T getExtension(String name) {
         T extension = getExtension(name, true);

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/URLParam.java
Patch:
@@ -978,7 +978,7 @@ public static URLParam parse(String rawParam) {
      *
      * @param params   params map added into URLParam
      * @param rawParam original rawParam string, directly add to rawParam field,
-     *                 will not effect real key-pairs store in URLParam.
+     *                 will not affect real key-pairs store in URLParam.
      *                 Please make sure it can correspond with params or will
      *                 cause unexpected result when calling {@link URLParam#getRawParam()}
      *                 and {@link URLParam#toString()} ()}. If you not sure, you can call

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java
Patch:
@@ -412,7 +412,7 @@ public static boolean isMatch(URL consumerUrl, URL providerUrl) {
         // If the category of provider URL does not match the category of consumer URL.
         // Usually, the provider URL's category is empty, and the default category ('providers') is present.
         // Hence, the category of the provider URL is 'providers'.
-        // Through observing of the Zookeeper registry, I found that the category of the consumer URL is 'consumers'.
+        // Through observing of debugging process, I found that the category of the consumer URL is 'providers,configurators,routers'.
         if (!isMatchCategory(providerUrl.getCategory(DEFAULT_CATEGORY), consumerUrl.getCategory(DEFAULT_CATEGORY))) {
             return false;
         }

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/MemorySafeLinkedBlockingQueue.java
Patch:
@@ -100,8 +100,9 @@ public boolean hasRemainedMemory() {
     public void put(final E e) throws InterruptedException {
         if (hasRemainedMemory()) {
             super.put(e);
+        } else {
+            rejector.reject(e, this);
         }
-        rejector.reject(e, this);
     }
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ReflectionBasedServiceDiscovery.java
Patch:
@@ -185,7 +185,6 @@ public void doUpdate(ServiceInstance serviceInstance) throws RuntimeException {
 
     @Override
     public void doUnregister(ServiceInstance serviceInstance) throws RuntimeException {
-        doUnregister(serviceInstance);
         // notify empty message to consumer
         metadataService.exportInstanceMetadata("");
         metadataService.getInstanceMetadataChangedListenerMap().forEach((consumerId, listener) -> listener.onEvent(""));

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/observer/ServerCallToObserverAdapter.java
Patch:
@@ -47,7 +47,7 @@ public boolean isAutoRequestN() {
     }
 
 
-    private boolean isTerminated() {
+    public boolean isTerminated() {
         return terminated;
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -1023,7 +1023,7 @@ protected List<Method> computeAttributedMethods() {
         List<Method> methods = new ArrayList<>(beanInfo.getMethodDescriptors().length);
         for (MethodDescriptor methodDescriptor : beanInfo.getMethodDescriptors()) {
             Method method = methodDescriptor.getMethod();
-            if (MethodUtils.isGetter(method)) {
+            if (MethodUtils.isGetter(method) || isParametersGetter(method)) {
                 // filter non attribute
                 Parameter parameter = method.getAnnotation(Parameter.class);
                 if (parameter != null && !parameter.attribute()) {

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServerHandler.java
Patch:
@@ -95,6 +95,8 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
         NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);
         handler.received(channel, msg);
+        // trigger qos handler
+        ctx.fireChannelRead(msg);
     }
 
 

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfiguration.java
Patch:
@@ -146,7 +146,7 @@ protected void doAddListener(String pathKey, ConfigurationListener listener, Str
     @Override
     protected void doRemoveListener(String pathKey, ConfigurationListener listener) {
         ZookeeperDataListener zookeeperDataListener = cacheListener.removeListener(pathKey, listener);
-        if (CollectionUtils.isEmpty(zookeeperDataListener.getListeners())) {
+        if (zookeeperDataListener != null && CollectionUtils.isEmpty(zookeeperDataListener.getListeners())) {
             zkClient.removeDataListener(pathKey, zookeeperDataListener);
         }
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceBeanNameBuilder.java
Patch:
@@ -95,8 +95,9 @@ public static ServiceBeanNameBuilder create(Reference reference, Class<?> interf
     }
 
     private static void append(StringBuilder builder, String value) {
+        builder.append(SEPARATOR);
         if (StringUtils.hasText(value)) {
-            builder.append(SEPARATOR).append(value);
+            builder.append(value);
         }
     }
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationPostProcessorTest.java
Patch:
@@ -95,7 +95,7 @@ public void testMethodAnnotation() {
 
         Assertions.assertEquals(3, serviceBeansMap.size());
 
-        ServiceBean demoServiceBean = serviceBeansMap.get("ServiceBean:org.apache.dubbo.config.spring.api.DemoService:2.5.7");
+        ServiceBean demoServiceBean = serviceBeansMap.get("ServiceBean:org.apache.dubbo.config.spring.api.DemoService:2.5.7:");
 
         Assertions.assertNotNull(demoServiceBean.getMethods());
 

File: dubbo-spring-boot/dubbo-spring-boot-actuator/src/test/java/org/apache/dubbo/spring/boot/actuate/autoconfigure/DubboEndpointAnnotationAutoConfigurationTest.java
Patch:
@@ -179,7 +179,7 @@ public void testServices() {
 
         Assert.assertEquals(1, services.size());
 
-        Map<String, Object> demoServiceMeta = services.get("ServiceBean:org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfigurationTest$DemoService:1.0.0");
+        Map<String, Object> demoServiceMeta = services.get("ServiceBean:org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfigurationTest$DemoService:1.0.0:");
 
         Assert.assertEquals("1.0.0", demoServiceMeta.get("version"));
 

File: dubbo-spring-boot/dubbo-spring-boot-compatible/actuator/src/test/java/org/apache/dubbo/spring/boot/actuate/autoconfigure/DubboEndpointAutoConfigurationTest.java
Patch:
@@ -166,7 +166,7 @@ public void testServices() {
 
         Assert.assertEquals(1, services.size());
 
-        Map<String, Object> demoServiceMeta = services.get("ServiceBean:org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfigurationTest$DemoService:1.0.0");
+        Map<String, Object> demoServiceMeta = services.get("ServiceBean:org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfigurationTest$DemoService:1.0.0:");
 
         Assert.assertEquals("1.0.0", demoServiceMeta.get("version"));
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/manager/FrameworkExecutorRepository.java
Patch:
@@ -91,7 +91,7 @@ public FrameworkExecutorRepository() {
 
     /**
      * Returns a scheduler from the scheduler list, call this method whenever you need a scheduler for a cron job.
-     * If your cron cannot burden the possible schedule delay caused by sharing the same scheduler, please consider define a dedicate one.
+     * If your cron cannot burden the possible schedule delay caused by sharing the same scheduler, please consider define a dedicated one.
      *
      * @return ScheduledExecutorService
      */

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceHostPortCustomizer.java
Patch:
@@ -75,7 +75,7 @@ public void customize(ServiceInstance serviceInstance, ApplicationModel applicat
                     // 4-2 - Can't find an instance URL using the default preferredProtocol.
 
                     logger.warn("4-2", "typo in preferred protocol", "",
-                        "Can't find an instance URL  using the default preferredProtocol \"" + preferredProtocol + "\", " +
+                        "Can't find an instance URL using the default preferredProtocol \"" + preferredProtocol + "\", " +
                         "falling back to the strategy that pick the first found protocol. " +
                         "Please try modifying the config of dubbo.application.protocol");
 

File: dubbo-metadata/dubbo-metadata-report-nacos/src/main/java/org/apache/dubbo/metadata/store/nacos/NacosMetadataReport.java
Patch:
@@ -255,6 +255,8 @@ public Set<String> getServiceAppMapping(String serviceKey, MappingListener liste
 
     @Override
     public void removeServiceAppMappingListener(String serviceKey, MappingListener listener) {
+        String group = DEFAULT_MAPPING_GROUP;
+
         MappingDataListener mappingDataListener = casListenerMap.get(buildListenerKey(serviceKey, group));
         if (null != mappingDataListener) {
             removeCasServiceMappingListener(serviceKey, group, listener);

File: dubbo-registry/dubbo-registry-multiple/src/test/java/org/apache/dubbo/registry/multiple/MultipleRegistry2S2RTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient;
 
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Assumptions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
@@ -144,8 +145,7 @@ public void testSubscription() throws InterruptedException {
 
         String path = "/dubbo/" + SERVICE2_NAME + "/providers";
         List<String> providerList = zookeeperClient.getChildren(path);
-        Assertions.assertTrue(!providerList.isEmpty());
-        System.out.println(providerList.get(0));
+        Assumptions.assumeTrue(!providerList.isEmpty());
 
         final List<URL> list = new ArrayList<URL>();
         multipleRegistry.subscribe(serviceUrl, new NotifyListener() {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -56,7 +56,7 @@
  *
  * @see RpcContext
  */
-@Activate(group = PROVIDER, order = -10000)
+@Activate(group = PROVIDER, order = Integer.MIN_VALUE)
 public class ContextFilter implements Filter, Filter.Listener {
 
     private static final Set<String> UNLOADING_KEYS;

File: dubbo-xds/src/main/java/org/apache/dubbo/registry/xds/istio/IstioConstant.java
Patch:
@@ -83,7 +83,7 @@ public class IstioConstant {
 
     public final static String ISTIO_META_CLUSTER_ID_KEY = "ISTIO_META_CLUSTER_ID";
 
-    public final static String DEFAULT_ISTIO_META_CLUSTER_ID = "kubernetes";
+    public final static String DEFAULT_ISTIO_META_CLUSTER_ID = "Kubernetes";
 
     public final static String SPIFFE = "spiffe://";
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -95,8 +95,7 @@ public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
             @Override
             public void afterUnExport() {
                 pathResolver.remove(url.getServiceKey());
-                pathResolver.add(url.getServiceModel().getServiceModel().getInterfaceName(),
-                    invoker);
+                pathResolver.remove(url.getServiceModel().getServiceModel().getInterfaceName());
                 // set service status
                 triBuiltinService.getHealthStatusManager()
                     .setStatus(url.getServiceKey(), ServingStatus.NOT_SERVING);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
Patch:
@@ -40,7 +40,8 @@
 import static org.apache.dubbo.registry.Constants.REGISTRY_RETRY_PERIOD_KEY;
 
 /**
- * FailbackRegistry. (SPI, Prototype, ThreadSafe)
+ * A template implementation of registry service that provides auto-retry ability.
+ * (SPI, Prototype, ThreadSafe)
  */
 public abstract class FailbackRegistry extends AbstractRegistry {
 

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/context/event/WelcomeLogoApplicationListener.java
Patch:
@@ -30,7 +30,6 @@
 
 import static org.apache.dubbo.spring.boot.util.DubboUtils.DUBBO_GITHUB_URL;
 import static org.apache.dubbo.spring.boot.util.DubboUtils.DUBBO_MAILING_LIST;
-import static org.apache.dubbo.spring.boot.util.DubboUtils.DUBBO_SPRING_BOOT_GITHUB_URL;
 import static org.apache.dubbo.spring.boot.util.DubboUtils.LINE_SEPARATOR;
 
 /**

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/util/DubboUtils.java
Patch:
@@ -100,17 +100,17 @@ public abstract class DubboUtils {
     /**
      * The github URL of Dubbo Spring Boot
      */
-    public static final String DUBBO_SPRING_BOOT_GITHUB_URL = "https://github.com/apache/dubbo-spring-boot-project";
+    public static final String DUBBO_SPRING_BOOT_GITHUB_URL = "https://github.com/apache/dubbo/tree/3.0/dubbo-spring-boot";
 
     /**
      * The git URL of Dubbo Spring Boot
      */
-    public static final String DUBBO_SPRING_BOOT_GIT_URL = "https://github.com/apache/dubbo-spring-boot-project.git";
+    public static final String DUBBO_SPRING_BOOT_GIT_URL = "https://github.com/apache/dubbo.git";
 
     /**
      * The issues of Dubbo Spring Boot
      */
-    public static final String DUBBO_SPRING_BOOT_ISSUES_URL = "https://github.com/apache/dubbo-spring-boot-project/issues";
+    public static final String DUBBO_SPRING_BOOT_ISSUES_URL = "https://github.com/apache/dubbo/issues";
 
     /**
      * The github URL of Dubbo

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/test/java/org/apache/dubbo/spring/boot/util/DubboUtilsTest.java
Patch:
@@ -61,9 +61,9 @@ public void testConstants() {
 
         Assert.assertEquals("dubbo.config.override", OVERRIDE_CONFIG_FULL_PROPERTY_NAME);
 
-        Assert.assertEquals("https://github.com/apache/dubbo-spring-boot-project", DUBBO_SPRING_BOOT_GITHUB_URL);
-        Assert.assertEquals("https://github.com/apache/dubbo-spring-boot-project.git", DUBBO_SPRING_BOOT_GIT_URL);
-        Assert.assertEquals("https://github.com/apache/dubbo-spring-boot-project/issues", DUBBO_SPRING_BOOT_ISSUES_URL);
+        Assert.assertEquals("https://github.com/apache/dubbo/tree/3.0/dubbo-spring-boot", DUBBO_SPRING_BOOT_GITHUB_URL);
+        Assert.assertEquals("https://github.com/apache/dubbo.git", DUBBO_SPRING_BOOT_GIT_URL);
+        Assert.assertEquals("https://github.com/apache/dubbo/issues", DUBBO_SPRING_BOOT_ISSUES_URL);
 
         Assert.assertEquals("https://github.com/apache/dubbo", DUBBO_GITHUB_URL);
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -88,7 +88,7 @@ public class RegistryConfig extends AbstractConfig {
     private String zone;
 
     /**
-     * The group the services registry in
+     * The group that services registry in
      */
     private String group;
 
@@ -125,12 +125,12 @@ public class RegistryConfig extends AbstractConfig {
     private Boolean dynamic;
 
     /**
-     * Whether to export service on the register center
+     * Whether to allow exporting service on the register center
      */
     private Boolean register;
 
     /**
-     * Whether allow to subscribe service on the register center
+     * Whether to allow subscribing service on the register center
      */
     private Boolean subscribe;
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigMode.java
Patch:
@@ -22,7 +22,7 @@
  */
 public enum ConfigMode {
     /**
-     * Strict mode: accept only one config for unique config type, throw exceptions if found more than one configs for an unique config type.
+     * Strict mode: accept only one config for unique config type, throw exceptions if found more than one config for a unique config type.
      */
     STRICT,
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPool.java
Patch:
@@ -51,7 +51,7 @@ public Executor getExecutor(URL url) {
         int alive = url.getParameter(ALIVE_KEY, DEFAULT_ALIVE);
 
         // init queue and executor
-        TaskQueue<Runnable> taskQueue = new TaskQueue<Runnable>(queues <= 0 ? 1 : queues);
+        TaskQueue<Runnable> taskQueue = new TaskQueue<>(queues <= 0 ? 1 : queues);
         EagerThreadPoolExecutor executor = new EagerThreadPoolExecutor(cores,
                 threads,
                 alive,

File: dubbo-serialization/dubbo-serialization-fastjson2/src/main/java/org/apache/dubbo/common/serialize/fastjson2/Fastjson2CreatorManager.java
Patch:
@@ -31,7 +31,7 @@ public class Fastjson2CreatorManager implements ScopeClassLoaderListener<Framewo
     /**
      * An empty classLoader used when classLoader is system classLoader. Prevent the NPE.
      */
-    private final static ClassLoader SYSTEM_CLASSLOADER_KEY = new ClassLoader() {};
+    private static final ClassLoader SYSTEM_CLASSLOADER_KEY = new ClassLoader() {};
 
     private final Map<ClassLoader, ObjectReaderCreatorASM> readerMap = new ConcurrentHashMap<>();
     private final Map<ClassLoader, ObjectWriterCreatorASM> writerMap = new ConcurrentHashMap<>();

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/JavaObjectInput.java
Patch:
@@ -27,7 +27,7 @@
  * Java object input implementation
  */
 public class JavaObjectInput extends NativeJavaObjectInput {
-    public final static int MAX_BYTE_ARRAY_LENGTH = 8 * 1024 * 1024;
+    public static final int MAX_BYTE_ARRAY_LENGTH = 8 * 1024 * 1024;
 
     public JavaObjectInput(InputStream is) throws IOException {
         super(new ObjectInputStream(is));

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/JavaSerialization.java
Patch:
@@ -39,7 +39,7 @@
  */
 public class JavaSerialization implements Serialization {
     private static final Logger logger = LoggerFactory.getLogger(JavaSerialization.class);
-    private final static AtomicBoolean warn = new AtomicBoolean(false);
+    private static final AtomicBoolean warn = new AtomicBoolean(false);
 
     @Override
     public byte getContentTypeId() {

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/nativejava/NativeJavaSerialization.java
Patch:
@@ -41,7 +41,7 @@
  */
 public class NativeJavaSerialization implements Serialization {
     private static final Logger logger = LoggerFactory.getLogger(JavaSerialization.class);
-    private final static AtomicBoolean warn = new AtomicBoolean(false);
+    private static final AtomicBoolean warn = new AtomicBoolean(false);
 
     @Override
     public byte getContentTypeId() {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/AbstractCacheManager.java
Patch:
@@ -40,11 +40,11 @@ public abstract class AbstractCacheManager<V> implements Disposable {
     protected FileCacheStore cacheStore;
     protected LRUCache<String, V> cache;
 
-    protected void init(String filePath, String fileName, int entrySize, long fileSize, int interval, ScheduledExecutorService executorService) {
+    protected void init(boolean enableFileCache, String filePath, String fileName, int entrySize, long fileSize, int interval, ScheduledExecutorService executorService) {
         this.cache = new LRUCache<>(entrySize);
 
         try {
-            cacheStore = FileCacheStoreFactory.getInstance(filePath, fileName);
+            cacheStore = FileCacheStoreFactory.getInstance(filePath, fileName, enableFileCache);
             Map<String, String> properties = cacheStore.loadCache(entrySize);
             logger.info("Successfully loaded mapping cache from file " + fileName + ", entries " + properties.size());
             for (Map.Entry<String, String> entry : properties.entrySet()) {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MappingCacheManager.java
Patch:
@@ -36,7 +36,7 @@ public static MappingCacheManager getInstance(ScopeModel scopeModel) {
         return scopeModel.getBeanFactory().getOrRegisterBean(MappingCacheManager.class);
     }
 
-    public MappingCacheManager(String name, ScheduledExecutorService executorService) {
+    public MappingCacheManager(boolean enableFileCache, String name, ScheduledExecutorService executorService) {
         String filePath = System.getProperty("dubbo.mapping.cache.filePath");
         String fileName = System.getProperty("dubbo.mapping.cache.fileName");
         if (StringUtils.isEmpty(fileName)) {
@@ -54,7 +54,7 @@ public MappingCacheManager(String name, ScheduledExecutorService executorService
         String rawMaxFileSize = System.getProperty("dubbo.mapping.cache.maxFileSize");
         long maxFileSize = StringUtils.parseLong(rawMaxFileSize);
 
-        init(filePath, fileName, entrySize,  maxFileSize, 50, executorService);
+        init(enableFileCache, filePath, fileName, entrySize,  maxFileSize, 50, executorService);
     }
 
     @Override

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/MetadataReportInstance.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_LOCAL_FILE_CACHE_ENABLED;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_DIRECTORY;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_METADATA_STORAGE_TYPE;
@@ -90,6 +91,7 @@ private void init(MetadataReportConfig config, MetadataReportFactory metadataRep
                     .build();
         }
         url = url.addParameterIfAbsent(APPLICATION_KEY, applicationModel.getCurrentConfig().getName());
+        url = url.addParameterIfAbsent(REGISTRY_LOCAL_FILE_CACHE_ENABLED, String.valueOf(applicationModel.getCurrentConfig().getEnableFileCache()));
         String relatedRegistryId = isEmpty(config.getRegistry()) ? (isEmpty(config.getId()) ? DEFAULT_KEY : config.getId()) : config.getRegistry();
 //        RegistryConfig registryConfig = applicationModel.getConfigManager().getRegistry(relatedRegistryId)
 //                .orElseThrow(() -> new IllegalStateException("Registry id " + relatedRegistryId + " does not exist."));

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/MetaCacheManager.java
Patch:
@@ -35,7 +35,7 @@ public static MetaCacheManager getInstance(ScopeModel scopeModel) {
         return scopeModel.getBeanFactory().getOrRegisterBean(MetaCacheManager.class);
     }
 
-    public MetaCacheManager(String registryName, ScheduledExecutorService executorService) {
+    public MetaCacheManager(boolean enableFileCache, String registryName, ScheduledExecutorService executorService) {
         String filePath = System.getProperty("dubbo.meta.cache.filePath");
         String fileName = System.getProperty("dubbo.meta.cache.fileName");
         if (StringUtils.isEmpty(fileName)) {
@@ -53,12 +53,12 @@ public MetaCacheManager(String registryName, ScheduledExecutorService executorSe
         String rawMaxFileSize = System.getProperty("dubbo.meta.cache.maxFileSize");
         long maxFileSize = StringUtils.parseLong(rawMaxFileSize);
 
-        init(filePath, fileName, entrySize, maxFileSize, 60, executorService);
+        init(enableFileCache, filePath, fileName, entrySize, maxFileSize, 60, executorService);
     }
 
     // for unit test only
     public MetaCacheManager() {
-        this("", null);
+        this(true, "", null);
     }
 
     @Override

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/WireProtocol.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
+import org.apache.dubbo.remoting.api.pu.ChannelOperator;
 
 import io.netty.channel.ChannelPipeline;
 import io.netty.handler.ssl.SslContext;
@@ -28,7 +29,7 @@ public interface WireProtocol {
 
     ProtocolDetector detector();
 
-    void configServerPipeline(URL url, ChannelPipeline pipeline, SslContext sslContext);
+    void configServerProtocolHandler(URL url, ChannelOperator operator);
 
     void configClientPipeline(URL url, ChannelPipeline pipeline, SslContext sslContext);
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/pu/DefaultCodec.java
Patch:
@@ -14,15 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.rpc.protocol.tri;
+package org.apache.dubbo.remoting.api.pu;
 
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.Codec2;
 import org.apache.dubbo.remoting.buffer.ChannelBuffer;
-import java.io.IOException;
 
-public class DefaultTriCodec implements Codec2 {
+import java.io.IOException;
 
+public class DefaultCodec implements Codec2 {
     @Override
     public void encode(Channel channel, ChannelBuffer buffer, Object message) throws IOException {
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractEndpoint.java
Patch:
@@ -56,9 +56,11 @@ protected static Codec2 getChannelCodec(URL url) {
         FrameworkModel frameworkModel = getFrameworkModel(url.getScopeModel());
         if (frameworkModel.getExtensionLoader(Codec2.class).hasExtension(codecName)) {
             return frameworkModel.getExtensionLoader(Codec2.class).getExtension(codecName);
-        } else {
+        } else if(frameworkModel.getExtensionLoader(Codec.class).hasExtension(codecName)){
             return new CodecAdapter(frameworkModel.getExtensionLoader(Codec.class)
                 .getExtension(codecName));
+        }else {
+            return frameworkModel.getExtensionLoader(Codec2.class).getExtension("default");
         }
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/api/EmptyProtocol.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.remoting.api;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.remoting.api.pu.ChannelOperator;
 
 import io.netty.channel.ChannelPipeline;
 import io.netty.handler.ssl.SslContext;
@@ -28,7 +29,7 @@ public ProtocolDetector detector() {
     }
 
     @Override
-    public void configServerPipeline(URL url, ChannelPipeline pipeline,SslContext sslContext) {
+    public void configServerProtocolHandler(URL url, ChannelOperator operator) {
 
     }
 

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyChannel.java
Patch:
@@ -273,4 +273,7 @@ public String toString() {
         return "NettyChannel [channel=" + channel + "]";
     }
 
+    public Channel getNioChannel() {
+        return channel;
+    }
 }

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyPortUnificationServer.java
Patch:
@@ -127,7 +127,7 @@ protected void initChannel(SocketChannel ch) throws Exception {
                     final ChannelPipeline p = ch.pipeline();
                     final NettyPortUnificationServerHandler puHandler;
                     puHandler = new NettyPortUnificationServerHandler(getUrl(), sslContext, true, getProtocols(),
-                        channels);
+                        channels, NettyPortUnificationServer.this);
                     p.addLast("negotiation-protocol", puHandler);
                 }
             });

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/EmptyWireProtocol.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.remoting.api.ProtocolDetector;
 import org.apache.dubbo.remoting.api.WireProtocol;
+import org.apache.dubbo.remoting.api.pu.ChannelOperator;
 
 import io.netty.channel.ChannelPipeline;
 import io.netty.handler.ssl.SslContext;
@@ -30,7 +31,7 @@ public ProtocolDetector detector() {
     }
 
     @Override
-    public void configServerPipeline(URL url, ChannelPipeline pipeline, SslContext sslContext) {
+    public void configServerProtocolHandler(URL url, ChannelOperator operator) {
 
     }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboExporter.java
Patch:
@@ -40,7 +40,7 @@ public DubboExporter(Invoker<T> invoker, String key, Map<String, Exporter<?>> ex
 
     @Override
     public void afterUnExport() {
-        exporterMap.remove(key);
+        exporterMap.remove(key, this);
     }
 
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/AbstractDynamicConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.common.config.configcenter;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -75,7 +75,7 @@ public abstract class AbstractDynamicConfiguration implements DynamicConfigurati
     /**
      * Logger
      */
-    protected final Logger logger = LoggerFactory.getLogger(getClass());
+    protected final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
 
     /**
      * The thread pool for workers who executes the tasks

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/config/DubboConfigDefaultPropertyValueBeanPostProcessor.java
Patch:
@@ -52,6 +52,7 @@ public class DubboConfigDefaultPropertyValueBeanPostProcessor extends GenericBea
      */
     public static final String BEAN_NAME = "dubboConfigDefaultPropertyValueBeanPostProcessor";
 
+    @Override
     protected void processBeforeInitialization(AbstractConfig dubboConfigBean, String beanName) throws BeansException {
         // ignore auto generate bean name
         if (!beanName.contains("#")) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/javassist/JavassistProxyFactory.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.bytecode.Proxy;
 import org.apache.dubbo.common.bytecode.Wrapper;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.proxy.AbstractProxyFactory;
@@ -33,7 +33,7 @@
  * JavassistRpcProxyFactory
  */
 public class JavassistProxyFactory extends AbstractProxyFactory {
-    private final static Logger logger = LoggerFactory.getLogger(JavassistProxyFactory.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(JavassistProxyFactory.class);
     private final JdkProxyFactory jdkProxyFactory = new JdkProxyFactory();
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java
Patch:
@@ -112,6 +112,7 @@ private void loadMigrationRule() {
      * @deprecated only for ut
      */
     @Deprecated
+    @DisableInject
     public void setLocalMigrationRule(String localMigrationRule) {
         this.localMigrationRule = localMigrationRule;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ApplicationModel.java
Patch:
@@ -203,6 +203,9 @@ public ApplicationModel(FrameworkModel frameworkModel, boolean isInternal) {
             LOGGER.info(getDesc() + " is created");
         }
         initialize();
+        Assert.notNull(getApplicationServiceRepository(), "ApplicationServiceRepository can not be null");
+        Assert.notNull(getApplicationConfigManager(), "ApplicationConfigManager can not be null");
+        Assert.assertTrue(getApplicationConfigManager().isInitialized(), "ApplicationConfigManager can not be initialized");
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/FrameworkModel.java
Patch:
@@ -123,7 +123,6 @@ protected void onDestroy() {
         // notify destroy and clean framework resources
         // see org.apache.dubbo.config.deploy.FrameworkModelCleaner
         notifyDestroy();
-        checkApplicationDestroy();
 
         if (LOGGER.isInfoEnabled()) {
             LOGGER.info(getDesc() + " is destroyed");

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ScopeModel.java
Patch:
@@ -242,7 +242,7 @@ public boolean isInternal() {
     }
 
     /**
-     * @return the describe string of this scope model
+     * @return to describe string of this scope model
      */
     public String getDesc() {
         if (this.desc == null) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -594,7 +594,7 @@ public void overrideWithConfig(AbstractConfig newOne, boolean overrideAll) {
                     if (overrideAll || oldOne == null) {
                         Object newResult = getterMethod.invoke(newOne);
                         // if new one is non-null and new one is not equals old one
-                        if (newResult != null && Objects.equals(newResult, oldOne)) {
+                        if (newResult != null && !Objects.equals(newResult, oldOne)) {
                             method.invoke(this, newResult);
                         }
                     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/AbstractConfigManager.java
Patch:
@@ -639,7 +639,7 @@ public void refreshAll() {
 
 
     /**
-     * In some scenario,  we may nee to add and remove ServiceConfig or ReferenceConfig dynamically.
+     * In some scenario,  we may need to add and remove ServiceConfig or ReferenceConfig dynamically.
      *
      * @param config the config instance to remove.
      * @return

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigMode.java
Patch:
@@ -32,12 +32,12 @@ public enum ConfigMode {
     OVERRIDE,
 
     /**
-     * Override mode: accept last config, override previous config
+     * Override mode: accept last config, override previous config regardless of whether the attribute of previous config is absent or not
      */
     OVERRIDE_ALL,
 
     /**
-     * Override mode: accept last config, override previous config
+     * Override mode: accept last config, override previous config only when the attribute of previous config is absent
      */
     OVERRIDE_IF_ABSENT,
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/AbstractServiceDiscovery.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry.client;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
@@ -48,7 +48,7 @@
  * Each service discovery is bond to one application.
  */
 public abstract class AbstractServiceDiscovery implements ServiceDiscovery {
-    private final Logger logger = LoggerFactory.getLogger(AbstractServiceDiscovery.class);
+    private final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(AbstractServiceDiscovery.class);
     private volatile boolean isDestroy;
 
     protected final String serviceName;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/FileSystemServiceDiscovery.java
Patch:
@@ -22,7 +22,7 @@
 //import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;
 //import org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration;
 //import org.apache.dubbo.common.lang.ShutdownHookCallbacks;
-//import org.apache.dubbo.common.logger.Logger;
+//import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 //import org.apache.dubbo.common.logger.LoggerFactory;
 //import org.apache.dubbo.common.utils.StringUtils;
 //
@@ -53,7 +53,7 @@
 // */
 //public class FileSystemServiceDiscovery extends AbstractServiceDiscovery {
 //
-//    private final Logger logger = LoggerFactory.getLogger(getClass());
+//    private final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
 //
 //    private final Map<File, FileLock> fileLocksCache = new ConcurrentHashMap<>();
 //

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry.client;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.metadata.AbstractServiceNameMapping;
@@ -66,7 +66,7 @@
  */
 public class ServiceDiscoveryRegistry extends FailbackRegistry {
 
-    protected final Logger logger = LoggerFactory.getLogger(getClass());
+    protected final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
 
     private final ServiceDiscovery serviceDiscovery;
 
@@ -348,7 +348,7 @@ public Map<String, ServiceInstancesChangedListener> getServiceListeners() {
     }
 
     private class DefaultMappingListener implements MappingListener {
-        private final Logger logger = LoggerFactory.getLogger(DefaultMappingListener.class);
+        private final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(DefaultMappingListener.class);
         private final URL url;
         private Set<String> oldApps;
         private NotifyListener listener;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceDelegation.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry.client.metadata;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.resource.Disposable;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -50,7 +50,8 @@
  * Implementation providing remote RPC service to facilitate the query of metadata information.
  */
 public class MetadataServiceDelegation implements MetadataService, Disposable {
-    Logger logger = LoggerFactory.getLogger(getClass());
+    ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
+
     private final ApplicationModel applicationModel;
     private final RegistryManager registryManager;
     private ConcurrentMap<String, InstanceMetadataChangedListener> instanceMetadataChangedListenerMap = new ConcurrentHashMap<>();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMapping.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.configcenter.ConfigItem;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -40,7 +40,7 @@
 
 public class MetadataServiceNameMapping extends AbstractServiceNameMapping {
 
-    private final Logger logger = LoggerFactory.getLogger(getClass());
+    private final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(getClass());
 
     private static final List<String> IGNORED_SERVICE_INTERFACES = Collections.singletonList(MetadataService.class.getName());
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationInvoker.java
Patch:
@@ -255,7 +255,7 @@ private void waitAddressNotify(MigrationRule newRule, CountDownLatch latch) {
             try {
                 Thread.sleep(delay * 1000L);
             } catch (InterruptedException e) {
-                logger.error("Interrupter when waiting for address notify!" + e);
+                logger.error("Interrupted when waiting for address notify!" + e);
             }
         } else {
             // do not wait address notify by default
@@ -264,7 +264,7 @@ private void waitAddressNotify(MigrationRule newRule, CountDownLatch latch) {
         try {
             latch.await(delay, TimeUnit.SECONDS);
         } catch (InterruptedException e) {
-            logger.error("Interrupter when waiting for address notify!" + e);
+            logger.error("Interrupted when waiting for address notify!" + e);
         }
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java
Patch:
@@ -433,7 +433,7 @@ protected void notify(List<URL> urls) {
                         notify(url, listener, filterEmpty(url, urls));
                     } catch (Throwable t) {
                         // 1-7: Failed to notify registry event.
-                        logger.error("1-7", "", "",
+                        logger.error("1-7", "consumer is offline", "",
                             "Failed to notify registry event, urls: " + urls + ", cause: " + t.getMessage(), t);
                     }
                 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/ListenerRegistryWrapper.java
Patch:
@@ -18,15 +18,15 @@
 package org.apache.dubbo.registry;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.UrlUtils;
 
 import java.util.List;
 
 public class ListenerRegistryWrapper implements Registry {
-    private static final Logger logger = LoggerFactory.getLogger(ListenerRegistryWrapper.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ListenerRegistryWrapper.class);
 
     private final Registry registry;
     private final List<RegistryServiceListener> listeners;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 
@@ -30,7 +30,7 @@
 
 public abstract class RegistryNotifier {
 
-    private static final Logger logger = LoggerFactory.getLogger(RegistryNotifier.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(RegistryNotifier.class);
     private volatile long lastExecuteTime;
     private volatile long lastEventTime;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryDirectory.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.extension.ExtensionLoader;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.Assert;
 import org.apache.dubbo.common.utils.CollectionUtils;
@@ -69,7 +69,7 @@
 import static org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel;
 
 public class ServiceDiscoveryRegistryDirectory<T> extends DynamicDirectory<T> {
-    private static final Logger logger = LoggerFactory.getLogger(ServiceDiscoveryRegistryDirectory.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ServiceDiscoveryRegistryDirectory.class);
 
     /**
      * instance address to invoker mapping.

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListener.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.URLBuilder;
 import org.apache.dubbo.common.constants.CommonConstants;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.CollectionUtils;
@@ -67,7 +67,7 @@
  */
 public class ServiceInstancesChangedListener {
 
-    private static final Logger logger = LoggerFactory.getLogger(ServiceInstancesChangedListener.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ServiceInstancesChangedListener.class);
 
     protected final Set<String> serviceNames;
     protected final ServiceDiscovery serviceDiscovery;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceHostPortCustomizer.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry.client.metadata;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.metadata.MetadataInfo;
@@ -35,7 +35,7 @@
  * The {@link ServiceInstanceCustomizer} to customize the {@link ServiceInstance#getPort() port} of service instance.
  */
 public class ServiceInstanceHostPortCustomizer implements ServiceInstanceCustomizer {
-    private static final Logger logger = LoggerFactory.getLogger(ServiceInstanceHostPortCustomizer.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ServiceInstanceHostPortCustomizer.class);
     
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtils.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.JsonUtils;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -58,7 +58,7 @@
  * @since 2.7.5
  */
 public class ServiceInstanceMetadataUtils {
-    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceInstanceMetadataUtils.class);
+    private static final ErrorTypeAwareLogger LOGGER = LoggerFactory.getErrorTypeAwareLogger(ServiceInstanceMetadataUtils.class);
 
     /**
      * The prefix of {@link MetadataService} : "dubbo.metadata-service."

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/DefaultMigrationAddressComparator.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry.client.migration;
 
 import org.apache.dubbo.common.config.ConfigurationUtils;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -30,7 +30,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 public class DefaultMigrationAddressComparator implements MigrationAddressComparator {
-    private static final Logger logger = LoggerFactory.getLogger(DefaultMigrationAddressComparator.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(DefaultMigrationAddressComparator.class);
     private static final String MIGRATION_THRESHOLD = "dubbo.application.migration.threshold";
     private static final String DEFAULT_THRESHOLD_STRING = "0.0";
     private static final float DEFAULT_THREAD = 0f;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleHandler.java
Patch:
@@ -17,15 +17,15 @@
 package org.apache.dubbo.registry.client.migration;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.status.reporter.FrameworkStatusReportService;
 import org.apache.dubbo.registry.client.migration.model.MigrationRule;
 import org.apache.dubbo.registry.client.migration.model.MigrationStep;
 
 public class MigrationRuleHandler<T> {
     public static final String DUBBO_SERVICEDISCOVERY_MIGRATION = "dubbo.application.migration.step";
-    private static final Logger logger = LoggerFactory.getLogger(MigrationRuleHandler.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(MigrationRuleHandler.class);
 
     private MigrationClusterInvoker<T> migrationInvoker;
     private MigrationStep currentStep;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleListener.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.extension.Activate;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.CollectionUtils;
@@ -63,7 +63,7 @@
  */
 @Activate
 public class MigrationRuleListener implements RegistryProtocolListener, ConfigurationListener {
-    private static final Logger logger = LoggerFactory.getLogger(MigrationRuleListener.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(MigrationRuleListener.class);
     private static final String DUBBO_SERVICEDISCOVERY_MIGRATION = "DUBBO_SERVICEDISCOVERY_MIGRATION";
     private static final String MIGRATION_DELAY_KEY = "dubbo.application.migration.delay";
     private static final int MIGRATION_DEFAULT_DELAY_TIME = 60000;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/ServiceDiscoveryMigrationInvoker.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry.client.migration;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.client.migration.model.MigrationRule;
@@ -31,7 +31,7 @@
 import java.util.concurrent.CountDownLatch;
 
 public class ServiceDiscoveryMigrationInvoker<T> extends MigrationInvoker<T> {
-    private static final Logger logger = LoggerFactory.getLogger(ServiceDiscoveryMigrationInvoker.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ServiceDiscoveryMigrationInvoker.class);
 
     public ServiceDiscoveryMigrationInvoker(RegistryProtocol registryProtocol, Cluster cluster, Registry registry, Class<T> type, URL url, URL consumerUrl) {
         super(registryProtocol, cluster, registry, type, url, consumerUrl);

File: dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry.multicast;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
@@ -71,7 +71,7 @@
 public class MulticastRegistry extends FailbackRegistry {
 
     // logging output
-    private static final Logger logger = LoggerFactory.getLogger(MulticastRegistry.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(MulticastRegistry.class);
 
     private static final int DEFAULT_MULTICAST_PORT = 1234;
 

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.URLBuilder;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.url.component.DubboServiceAddressURL;
 import org.apache.dubbo.common.url.component.ServiceConfigURL;
@@ -127,7 +127,7 @@ public class NacosRegistry extends FailbackRegistry {
      * The interval in second of lookup Nacos service names(only for Dubbo-OPS)
      */
     private static final long LOOKUP_INTERVAL = Long.getLong("nacos.service.names.lookup.interval", 30);
-    private static final Logger logger = LoggerFactory.getLogger(NacosRegistry.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(NacosRegistry.class);
     private final NacosNamingServiceWrapper namingService;
     /**
      * {@link ScheduledExecutorService} lookup Nacos service names(only for Dubbo-OPS)

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/util/NacosNamingServiceUtils.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry.nacos.util;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.registry.client.DefaultServiceInstance;
@@ -52,7 +52,7 @@
  */
 public class NacosNamingServiceUtils {
 
-    private static final Logger logger = LoggerFactory.getLogger(NacosNamingServiceUtils.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(NacosNamingServiceUtils.class);
     private static final String NACOS_GROUP_KEY = "nacos.group";
 
     /**

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistry.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry.zookeeper;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
@@ -56,7 +56,7 @@
  */
 public class ZookeeperRegistry extends CacheableFailbackRegistry {
 
-    private static final Logger logger = LoggerFactory.getLogger(ZookeeperRegistry.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ZookeeperRegistry.class);
 
     private static final String DEFAULT_ROOT = "dubbo";
 

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/util/CuratorFrameworkUtils.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry.zookeeper.util;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.registry.client.DefaultServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstance;
@@ -155,7 +155,7 @@ public static String getRootPath(URL registryURL) {
     }
 
     private static class CuratorConnectionStateListener implements ConnectionStateListener {
-        private static final Logger logger = LoggerFactory.getLogger(CuratorConnectionStateListener.class);
+        private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(CuratorConnectionStateListener.class);
         private final long UNKNOWN_SESSION_ID = -1L;
         protected final int DEFAULT_CONNECTION_TIMEOUT_MS = 30 * 1000;
         protected final int DEFAULT_SESSION_TIMEOUT_MS = 60 * 1000;

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/TelnetHandlerAdapter.java
Patch:
@@ -67,7 +67,7 @@ public String telnet(Channel channel, String message) throws RemotingException {
                 } else {
                     buf.append("Command: ");
                     buf.append(command);
-                    buf.append(" disabled");
+                    buf.append(" disabled for security reasons, please enable support by listing the commands through 'telnet'");
                 }
             } else {
                 buf.append("Unsupported command: ");
@@ -86,7 +86,7 @@ public String telnet(Channel channel, String message) throws RemotingException {
     private boolean commandEnabled(URL url, String command) {
         String supportCommands = url.getParameter(TELNET_KEY);
         if (StringUtils.isEmpty(supportCommands)) {
-            return true;
+            return false;
         }
         String[] commands = COMMA_SPLIT_PATTERN.split(supportCommands);
         for (String c : commands) {

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/telnet/support/TelnetHandlerAdapterTest.java
Patch:
@@ -53,15 +53,15 @@ public void testTelnet() throws RemotingException {
         Assertions.assertEquals(expectedResult, telnetHandlerAdapter.telnet(channel, message));
 
         message = "--no-prompt help";
-        expectedResult = "Command: help disabled\r\n";
+        expectedResult = "Command: help disabled for security reasons, please enable support by listing the commands through 'telnet'\r\n";
         Assertions.assertEquals(expectedResult, telnetHandlerAdapter.telnet(channel, message));
 
         message = "--no-prompt";
         expectedResult = StringUtils.EMPTY_STRING;
         Assertions.assertEquals(expectedResult, telnetHandlerAdapter.telnet(channel, message));
 
         message = "help";
-        expectedResult = "Command: help disabled\r\ndubbo>";
+        expectedResult = "Command: help disabled for security reasons, please enable support by listing the commands through 'telnet'\r\ndubbo>";
         Assertions.assertEquals(expectedResult, telnetHandlerAdapter.telnet(channel, message));
     }
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/ProtocolDetector.java
Patch:
@@ -17,16 +17,16 @@
 package org.apache.dubbo.remoting.api;
 
 
-import io.netty.buffer.ByteBuf;
-import io.netty.channel.ChannelHandlerContext;
+import org.apache.dubbo.remoting.buffer.ChannelBuffer;
+
 
 /**
  * Determine incoming bytes belong to the specific protocol.
  *
  */
 public interface ProtocolDetector {
 
-    Result detect(final ChannelHandlerContext ctx, final ByteBuf in);
+    Result detect(ChannelBuffer in);
 
     enum Result {
         RECOGNIZED, UNRECOGNIZED, NEED_MORE_DATA

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
 import org.apache.dubbo.remoting.api.ConnectionManager;
+import org.apache.dubbo.remoting.api.pu.DefaultPuHandler;
 import org.apache.dubbo.remoting.exchange.PortUnificationExchanger;
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Invoker;
@@ -107,12 +108,12 @@ public void afterUnExport() {
             .setStatus(url.getServiceKey(), HealthCheckResponse.ServingStatus.SERVING);
         triBuiltinService.getHealthStatusManager()
             .setStatus(url.getServiceInterface(), HealthCheckResponse.ServingStatus.SERVING);
-
         // init
         url.getOrDefaultApplicationModel().getExtensionLoader(ExecutorRepository.class)
             .getDefaultExtension()
             .createExecutorIfAbsent(url);
-        PortUnificationExchanger.bind(url);
+
+        PortUnificationExchanger.bind(url, new DefaultPuHandler());
         optimizeSerialization(url);
         return exporter;
     }

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Online.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.dubbo.qos.command.annotation.Cmd;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
-@Cmd(name = "onlineApp", summary = "online app addresses", example = {
-        "onlineApp dubbo",
-        "onlineApp xx.xx.xxx.service"
+@Cmd(name = "online", summary = "online app addresses", example = {
+        "online dubbo",
+        "online xx.xx.xxx.service"
 })
 public class Online extends BaseOnline {
     public Online(FrameworkModel frameworkModel) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/support/FailsafeErrorTypeAwareLogger.java
Patch:
@@ -30,7 +30,7 @@
 public class FailsafeErrorTypeAwareLogger extends FailsafeLogger implements ErrorTypeAwareLogger {
 
     /**
-     * Mock address for formatting.
+     * Template address for formatting.
      */
     private static final String INSTRUCTIONS_URL = "https://dubbo.apache.org/faq/%d/%d";
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.URLBuilder;
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.extension.ExtensionLoader;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.url.component.DubboServiceAddressURL;
 import org.apache.dubbo.common.url.component.ServiceAddressURL;
@@ -81,7 +81,7 @@
  * RegistryDirectory
  */
 public class RegistryDirectory<T> extends DynamicDirectory<T> {
-    private static final Logger logger = LoggerFactory.getLogger(RegistryDirectory.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(RegistryDirectory.class);
 
     private final ConsumerConfigurationListener consumerConfigurationListener;
     private ReferenceConfigurationListener referenceConfigurationListener;
@@ -246,7 +246,7 @@ private void refreshInvoker(List<URL> invokerUrls) {
             }
             Map<URL, Invoker<T>> newUrlInvokerMap = toInvokers(oldUrlInvokerMap, invokerUrls);// Translate url list to Invoker map
 
-            /**
+            /*
              * If the calculation is wrong, it is not processed.
              *
              * 1. The protocol configured by the client is inconsistent with the protocol of the server.

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.timer.HashedWheelTimer;
@@ -143,7 +143,8 @@ public class RegistryProtocol implements Protocol, ScopeModelAware {
         APPLICATION_KEY, VERSION_KEY, GROUP_KEY, DUBBO_VERSION_KEY, RELEASE_KEY
     };
 
-    private final static Logger logger = LoggerFactory.getLogger(RegistryProtocol.class);
+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(RegistryProtocol.class);
+
     private final Map<String, ServiceConfigurationListener> serviceConfigurationListeners = new ConcurrentHashMap<>();
     //To solve the problem of RMI repeated exposure port conflicts, the services that have been exposed are no longer exposed.
     //provider url <--> exporter

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -98,7 +98,9 @@ public Registry getRegistry(URL url) {
             if (check) {
                 throw new RuntimeException("Can not create registry " + url, e);
             } else {
-                LOGGER.warn("Failed to obtain or create registry ", e);
+                // 1-11 Failed to obtain or create registry (service) object.
+                LOGGER.warn("1-11", "", "",
+                    "Failed to obtain or create registry ", e);
             }
         } finally {
             // Release the lock

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataInfo.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.common.utils.JsonUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 
+import java.beans.Transient;
 import java.io.Serializable;
 import java.util.Arrays;
 import java.util.Collections;
@@ -197,6 +198,7 @@ public void setRevision(String revision) {
         this.revision = revision;
     }
 
+    @Transient
     public String getContent() {
         return this.rawMetadataInfo;
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.URLBuilder;
-import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.RegistryFactory;
@@ -39,7 +39,7 @@
  */
 public abstract class AbstractRegistryFactory implements RegistryFactory, ScopeModelAware {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractRegistryFactory.class);
+    private static final ErrorTypeAwareLogger LOGGER = LoggerFactory.getErrorTypeAwareLogger(AbstractRegistryFactory.class);
 
     private RegistryManager registryManager;
     protected ApplicationModel applicationModel;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/metadata/MetadataServiceURLParamsMetadataCustomizerTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.provider.impl.DemoServiceImpl;
 import org.apache.dubbo.registry.client.DefaultServiceInstance;
+import org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.AfterEach;
@@ -49,7 +50,7 @@
 public class MetadataServiceURLParamsMetadataCustomizerTest {
 
     public DefaultServiceInstance instance;
-    private URL metadataServiceURL = URL.valueOf("dubbo://10.225.12.124:20880/org.apache.dubbo.metadata.MetadataService" +
+    private URL metadataServiceURL = URL.valueOf("dubbo://10.225.12.124:2002/org.apache.dubbo.metadata.MetadataService" +
         "?application=MetadataServiceURLParamsMetadataCustomizerTest&group=MetadataServiceURLParamsMetadataCustomizerTest" +
         "&interface=org.apache.dubbo.metadata.MetadataService&side=provider&timestamp=1637573430740&version=1.0.0");
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/event/listener/MockServiceInstancesChangedListener.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.client.event.listener;
 
+import org.apache.dubbo.common.ProtocolServiceKey;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.registry.client.ServiceDiscovery;
 import org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent;
@@ -35,8 +36,8 @@ public synchronized void onEvent(ServiceInstancesChangedEvent event) {
     }
 
     @Override
-    public List<URL> getAddresses(String serviceProtocolKey, URL consumerURL) {
-        return super.getAddresses(serviceProtocolKey, consumerURL);
+    public List<URL> getAddresses(ProtocolServiceKey protocolServiceKey, URL consumerURL) {
+        return super.getAddresses(protocolServiceKey, consumerURL);
     }
 
     public Map<String, Set<NotifyListenerWithKey>> getServiceListeners() {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -305,8 +305,8 @@ public void destroy() {
     }
 
     private int calculateTimeout(Invocation invocation, String methodName) {
-        if (invocation.get(TIMEOUT_KEY) != null) {
-            return (int) invocation.get(TIMEOUT_KEY);
+        if (invocation.getObjectAttachment(TIMEOUT_KEY) != null) {
+            return (int) invocation.getObjectAttachment(TIMEOUT_KEY);
         }
         Object countdown = RpcContext.getClientAttachment().getObjectAttachment(TIME_COUNTDOWN_KEY);
         int timeout;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationPostProcessor.java
Patch:
@@ -89,7 +89,7 @@
 
 /**
  * A {@link BeanFactoryPostProcessor} used for processing of {@link Service @Service} annotated classes and annotated bean in java config classes.
- * It's also the infrastructure class of XML {@link BeanDefinitionParser} on &lt;dubbbo:annotation /&gt;
+ * It's also the infrastructure class of XML {@link BeanDefinitionParser} on &lt;dubbo:annotation /&gt;
  *
  *
  * @see AnnotationBeanDefinitionParser

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/DubboAnnotationUtils.java
Patch:
@@ -37,7 +37,7 @@
 import static org.springframework.util.StringUtils.hasText;
 
 /**
- * Dubbbo Annotation Utilities Class
+ * Dubbo Annotation Utilities Class
  *
  * @see org.springframework.core.annotation.AnnotationUtils
  * @since 2.5.11

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/NettyClientHandlerTest.java
Patch:
@@ -39,7 +39,7 @@ public class NettyClientHandlerTest {
 
     @Test
     public void test() throws Exception {
-        URL url = new ServiceConfigURL("dubbbo", "127.0.0.1", 20901);
+        URL url = new ServiceConfigURL("dubbo", "127.0.0.1", 20901);
         ChannelHandler handler = Mockito.mock(ChannelHandler.class);
         ChannelHandlerContext ctx = Mockito.mock(ChannelHandlerContext.class);
         Channel channel = Mockito.mock(Channel.class);

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -135,7 +135,7 @@ class URL implements Serializable {
 
     protected URL() {
         this.urlAddress = null;
-        this.urlParam = null;
+        this.urlParam = URLParam.parse(new HashMap<>());
         this.attributes = null;
     }
 
@@ -145,7 +145,7 @@ public URL(URLAddress urlAddress, URLParam urlParam) {
 
     public URL(URLAddress urlAddress, URLParam urlParam, Map<String, Object> attributes) {
         this.urlAddress = urlAddress;
-        this.urlParam = urlParam;
+        this.urlParam = null == urlParam ? URLParam.parse(new HashMap<>()) : urlParam;
         this.attributes = (attributes != null ? attributes.isEmpty() ? null : attributes : null);
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -247,7 +247,7 @@ public synchronized void destroy() {
     }
 
     protected synchronized void init() {
-        if (initialized) {
+        if (initialized && ref !=null ) {
             return;
         }
         try {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -203,7 +203,7 @@ private static ServiceInstance selectInstance(List<ServiceInstance> instances) {
         return instances.get(ThreadLocalRandom.current().nextInt(0, instances.size()));
     }
 
-    private static class ProxyHolder {
+    public static class ProxyHolder {
         private final ConsumerModel consumerModel;
         private final MetadataService proxy;
         private final ModuleModel internalModel;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.ServiceConfig;
 import org.apache.dubbo.metadata.MetadataService;
+import org.apache.dubbo.registry.client.metadata.MetadataServiceDelegation;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProtocolServer;
 import org.apache.dubbo.rpc.model.ApplicationModel;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ExporterDeployListener.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.deploy.ApplicationDeployListener;
 import org.apache.dubbo.common.lang.Prioritized;
 import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.registry.client.metadata.MetadataServiceDelegation;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_METADATA_STORAGE_TYPE;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/servicediscoveryregistry/MultipleRegistryCenterServiceDiscoveryRegistryIntegrationTest.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.dubbo.config.ServiceConfig;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.integration.IntegrationTest;
-import org.apache.dubbo.config.metadata.MetadataServiceDelegation;
 import org.apache.dubbo.registry.RegistryServiceListener;
+import org.apache.dubbo.registry.client.metadata.MetadataServiceDelegation;
 import org.apache.dubbo.test.check.registrycenter.config.ZookeeperConfig;
 import org.apache.dubbo.test.check.registrycenter.config.ZookeeperRegistryCenterConfig;
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/servicediscoveryregistry/ServiceDiscoveryRegistryInfoWrapper.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.dubbo.config.integration.multiple.servicediscoveryregistry;
 
-import org.apache.dubbo.config.metadata.MetadataServiceDelegation;
 import org.apache.dubbo.registry.client.ServiceDiscoveryRegistry;
+import org.apache.dubbo.registry.client.metadata.MetadataServiceDelegation;
 
 /**
  * The instance to wrap {@link org.apache.dubbo.registry.client.ServiceDiscoveryRegistry}

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/single/SingleRegistryCenterDubboProtocolIntegrationTest.java
Patch:
@@ -27,13 +27,13 @@
 import org.apache.dubbo.config.ServiceListener;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.integration.IntegrationTest;
-import org.apache.dubbo.config.metadata.MetadataServiceDelegation;
 import org.apache.dubbo.metadata.MetadataInfo;
 import org.apache.dubbo.metadata.MetadataService;
 import org.apache.dubbo.registry.ListenerRegistryWrapper;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.client.ServiceDiscoveryRegistry;
 import org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory;
+import org.apache.dubbo.registry.client.metadata.MetadataServiceDelegation;
 import org.apache.dubbo.registry.client.migration.MigrationInvoker;
 import org.apache.dubbo.registry.support.RegistryManager;
 import org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/metadata/MetadataServiceExporterTest.java
Patch:
@@ -27,7 +27,7 @@
 //import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 //import org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter;
 //import org.apache.dubbo.config.metadata.ExporterDeployListener;
-//import org.apache.dubbo.config.metadata.MetadataServiceDelegation;
+//import org.apache.dubbo.registry.client.metadata.MetadataServiceDelegation;
 //import org.apache.dubbo.config.provider.impl.DemoServiceImpl;
 //import org.apache.dubbo.rpc.model.ApplicationModel;
 //import org.apache.dubbo.rpc.model.FrameworkModel;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ReflectionBasedServiceDiscovery.java
Patch:
@@ -23,13 +23,13 @@
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.config.metadata.MetadataServiceDelegation;
 import org.apache.dubbo.metadata.InstanceMetadataChangedListener;
 import org.apache.dubbo.metadata.MetadataService;
 import org.apache.dubbo.metadata.RevisionResolver;
 import org.apache.dubbo.registry.Constants;
 import org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent;
 import org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener;
+import org.apache.dubbo.registry.client.metadata.MetadataServiceDelegation;
 import org.apache.dubbo.registry.client.metadata.MetadataUtils;
 import org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils;
 import org.apache.dubbo.rpc.RpcException;
@@ -261,7 +261,7 @@ private String computeKey(ServiceInstance serviceInstance) {
     }
 
     private synchronized MetadataService getMetadataServiceProxy(ServiceInstance instance) {
-        return metadataServiceProxies.computeIfAbsent(computeKey(instance), k -> MetadataUtils.referProxy(instance));
+        return metadataServiceProxies.computeIfAbsent(computeKey(instance), k -> MetadataUtils.referProxy(instance).getProxy());
     }
 
     private synchronized void destroyMetadataServiceProxy(ServiceInstance instance) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceDelegation.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.config.metadata;
+package org.apache.dubbo.registry.client.metadata;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -203,7 +203,7 @@ private static ServiceInstance selectInstance(List<ServiceInstance> instances) {
         return instances.get(ThreadLocalRandom.current().nextInt(0, instances.size()));
     }
 
-    private static class ProxyHolder {
+    public static class ProxyHolder {
         private final ConsumerModel consumerModel;
         private final MetadataService proxy;
         private final ModuleModel internalModel;

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -647,7 +647,6 @@ public void overrideWithConfig(AbstractConfig newOne, boolean overrideAll) {
      * Dubbo config property override
      */
     public void refresh() {
-        refreshed.set(true);
         try {
             // check and init before do refresh
             preProcessRefresh();
@@ -697,6 +696,7 @@ public void refresh() {
         }
 
         postProcessRefresh();
+        refreshed.set(true);
     }
 
     private void assignProperties(Object obj, Environment environment, Map<String, String> properties, InmemoryConfiguration configuration) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/stub/StubSuppliers.java
Patch:
@@ -33,7 +33,6 @@ public class StubSuppliers {
     public static void addDescriptor(String interfaceName, ServiceDescriptor serviceDescriptor) {
         SERVICE_DESCRIPTOR_MAP.put(interfaceName, serviceDescriptor);
     }
-
     public static void addSupplier(String interfaceName, Function<Invoker<?>, Object> supplier) {
         STUB_SUPPLIERS.put(interfaceName, supplier);
     }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/ChannelWrappedInvoker.java
Patch:
@@ -137,7 +137,7 @@ public void reset(URL url) {
 
         @Override
         public InetSocketAddress getRemoteAddress() {
-            return channel.getLocalAddress();
+            return channel.getRemoteAddress();
         }
 
         @Override

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/ReflectionAbstractServerCall.java
Patch:
@@ -44,7 +44,6 @@ public class ReflectionAbstractServerCall extends AbstractServerCall {
 
     private final List<HeaderFilter> headerFilters;
     private List<MethodDescriptor> methodDescriptors;
-    private RpcInvocation invocation;
 
     public ReflectionAbstractServerCall(Invoker<?> invoker,
         ServerStream serverStream,
@@ -136,7 +135,7 @@ private void trySetListener() {
         if (isClosed()) {
             return;
         }
-        invocation = buildInvocation(methodDescriptor);
+        RpcInvocation invocation = buildInvocation(methodDescriptor);
         if (isClosed()) {
             return;
         }

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/cached/CachedThreadPool.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory;
+import org.apache.dubbo.common.threadpool.MemorySafeLinkedBlockingQueue;
 import org.apache.dubbo.common.threadpool.ThreadPool;
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
 
@@ -54,7 +55,7 @@ public Executor getExecutor(URL url) {
         int alive = url.getParameter(ALIVE_KEY, DEFAULT_ALIVE);
         return new ThreadPoolExecutor(cores, threads, alive, TimeUnit.MILLISECONDS,
                 queues == 0 ? new SynchronousQueue<Runnable>() :
-                        (queues < 0 ? new LinkedBlockingQueue<Runnable>()
+                        (queues < 0 ? new MemorySafeLinkedBlockingQueue<Runnable>()
                                 : new LinkedBlockingQueue<Runnable>(queues)),
                 new NamedInternalThreadFactory(name, true), new AbortPolicyWithReport(name, url));
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/fixed/FixedThreadPool.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory;
+import org.apache.dubbo.common.threadpool.MemorySafeLinkedBlockingQueue;
 import org.apache.dubbo.common.threadpool.ThreadPool;
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
 
@@ -48,7 +49,7 @@ public Executor getExecutor(URL url) {
         int queues = url.getParameter(QUEUES_KEY, DEFAULT_QUEUES);
         return new ThreadPoolExecutor(threads, threads, 0, TimeUnit.MILLISECONDS,
                 queues == 0 ? new SynchronousQueue<Runnable>() :
-                        (queues < 0 ? new LinkedBlockingQueue<Runnable>()
+                        (queues < 0 ? new MemorySafeLinkedBlockingQueue<Runnable>()
                                 : new LinkedBlockingQueue<Runnable>(queues)),
                 new NamedInternalThreadFactory(name, true), new AbortPolicyWithReport(name, url));
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/limited/LimitedThreadPool.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory;
+import org.apache.dubbo.common.threadpool.MemorySafeLinkedBlockingQueue;
 import org.apache.dubbo.common.threadpool.ThreadPool;
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
 
@@ -51,7 +52,7 @@ public Executor getExecutor(URL url) {
         int queues = url.getParameter(QUEUES_KEY, DEFAULT_QUEUES);
         return new ThreadPoolExecutor(cores, threads, Long.MAX_VALUE, TimeUnit.MILLISECONDS,
                 queues == 0 ? new SynchronousQueue<Runnable>() :
-                        (queues < 0 ? new LinkedBlockingQueue<Runnable>()
+                        (queues < 0 ? new MemorySafeLinkedBlockingQueue<Runnable>()
                                 : new LinkedBlockingQueue<Runnable>(queues)),
                 new NamedInternalThreadFactory(name, true), new AbortPolicyWithReport(name, url));
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -112,6 +112,8 @@ public interface CommonConstants {
 
     String EXECUTOR_SERVICE_COMPONENT_KEY = ExecutorService.class.getName();
 
+    String INTERNAL_EXECUTOR_SERVICE_COMPONENT_KEY = "INTERNAL_SERVICE_EXECUTOR";
+
     String THREADPOOL_KEY = "threadpool";
 
     String THREAD_NAME_KEY = "threadname";

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ModuleServiceRepository.java
Patch:
@@ -205,7 +205,7 @@ public ServiceDescriptor getService(String serviceName) {
     }
 
     public ServiceDescriptor lookupService(String interfaceName) {
-        if (services.containsKey(interfaceName)) {
+        if (interfaceName != null && services.containsKey(interfaceName)) {
             List<ServiceDescriptor> serviceDescriptors = services.get(interfaceName);
             return serviceDescriptors.size() > 0 ? serviceDescriptors.get(0) : null;
         } else {

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/manager/ExecutorRepositoryTest.java
Patch:
@@ -46,8 +46,8 @@ public void teardown() {
 
     @Test
     public void testGetExecutor() {
-        testGet(URL.valueOf("dubbo://127.0.0.1:23456"));
-        testGet(URL.valueOf("dubbo://127.0.0.1:23456?side=consumer"));
+        testGet(URL.valueOf("dubbo://127.0.0.1:23456/TestService"));
+        testGet(URL.valueOf("dubbo://127.0.0.1:23456/TestService?side=consumer"));
 
         Assertions.assertNotNull(executorRepository.getSharedExecutor());
         Assertions.assertNotNull(executorRepository.getServiceExportExecutor());
@@ -68,7 +68,7 @@ private void testGet(URL url) {
 
     @Test
     public void testUpdateExecutor() {
-        URL url = URL.valueOf("dubbo://127.0.0.1:23456?threads=5");
+        URL url = URL.valueOf("dubbo://127.0.0.1:23456/TestService?threads=5");
         ThreadPoolExecutor executorService = (ThreadPoolExecutor) executorRepository.createExecutorIfAbsent(url);
 
         executorService.setCorePoolSize(3);

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/AbstractServiceNameMapping.java
Patch:
@@ -248,6 +248,7 @@ private boolean hasInitiated(String key) {
         mappingListeners.clear();
         mappingLocks.clear();
         mappingInitStatus.clear();
+
     }
 
     private class AsyncMappingTask implements Callable<Set<String>> {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java
Patch:
@@ -65,7 +65,7 @@ protected BitList<Invoker<T>> doRoute(BitList<Invoker<T>> invokers, URL url, Inv
             }
             return invokers.and(normalInvokers);
         } else {
-            String value = (String) invocation.getObjectAttachments().get(INVOCATION_NEED_MOCK);
+            String value = (String) invocation.getObjectAttachmentWithoutConvert(INVOCATION_NEED_MOCK);
             if (value == null) {
                 if (needToPrintMessage) {
                     messageHolder.set("invocation.need.mock not set. Return normal Invokers.");

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java
Patch:
@@ -259,7 +259,7 @@ private void waitForResultIfSync(AsyncRpcResult asyncResult, RpcInvocation invoc
              * must call {@link java.util.concurrent.CompletableFuture#get(long, TimeUnit)} because
              * {@link java.util.concurrent.CompletableFuture#get()} was proved to have serious performance drop.
              */
-            Object timeout = invocation.getObjectAttachment(TIMEOUT_KEY);
+            Object timeout = invocation.getObjectAttachmentWithoutConvert(TIMEOUT_KEY);
             if (timeout instanceof Integer) {
                 asyncResult.get((Integer) timeout, TimeUnit.MILLISECONDS);
             } else {

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/TokenFilterTest.java
Patch:
@@ -47,10 +47,8 @@ public void testInvokeWithToken() throws Exception {
         when(invoker.getUrl()).thenReturn(url);
         when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse("result"));
 
-        Map<String, Object> attachments = new HashMap<>();
-        attachments.put(TOKEN_KEY, token);
         Invocation invocation = Mockito.mock(Invocation.class);
-        when(invocation.getObjectAttachments()).thenReturn(attachments);
+        when(invocation.getObjectAttachmentWithoutConvert(TOKEN_KEY)).thenReturn(token);
 
         Result result = tokenFilter.invoke(invoker, invocation);
         Assertions.assertEquals("result", result.getValue());

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
Patch:
@@ -116,7 +116,7 @@ private String exportOrUnexportCallbackService(Channel channel, RpcInvocation in
         params.put(IS_SERVER_KEY, Boolean.FALSE.toString());
         // mark it's a callback, for troubleshooting
         params.put(IS_CALLBACK_SERVICE, Boolean.TRUE.toString());
-        String group = (inv == null ? null : (String) inv.getObjectAttachment(GROUP_KEY));
+        String group = (inv == null ? null : (String) inv.getObjectAttachmentWithoutConvert(GROUP_KEY));
         if (group != null && group.length() > 0) {
             params.put(GROUP_KEY, group);
         }

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCountCodecTest.java
Patch:
@@ -61,7 +61,7 @@ public void test() throws Exception {
         }
 
         MultiMessage multiMessage = (MultiMessage) dubboCountCodec.decode(channel, buffer);
-        Assertions.assertEquals(multiMessage.size(), 18);
+        Assertions.assertEquals(multiMessage.size(), 20);
         int requestCount = 0;
         int responseCount = 0;
         Iterator iterator = multiMessage.iterator();
@@ -78,7 +78,7 @@ public void test() throws Exception {
             }
         }
         Assertions.assertEquals(requestCount, 10);
-        Assertions.assertEquals(responseCount, 8);
+        Assertions.assertEquals(responseCount, 10);
     }
 
 }

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmInvoker.java
Patch:
@@ -203,7 +203,7 @@ private Invocation recreateInvocation(Invocation invocation, Invoker<?> invoker,
             // generic invoke, skip copy arguments
             RpcInvocation copiedInvocation = new RpcInvocation(invocation.getTargetServiceUniqueName(),
                 providerServiceModel, methodName, invocation.getServiceName(), invocation.getProtocolServiceKey(),
-                invocation.getParameterTypes(), invocation.getArguments(), new HashMap<>(invocation.getObjectAttachments()),
+                invocation.getParameterTypes(), invocation.getArguments(), invocation.copyObjectAttachments(),
                 invocation.getInvoker(), new HashMap<>(),
                 invocation instanceof RpcInvocation ? ((RpcInvocation) invocation).getInvokeMode() : null);
             copiedInvocation.setInvoker(invoker);
@@ -233,7 +233,7 @@ private Invocation recreateInvocation(Invocation invocation, Invoker<?> invoker,
 
                 RpcInvocation copiedInvocation = new RpcInvocation(invocation.getTargetServiceUniqueName(),
                     providerServiceModel, methodName, invocation.getServiceName(), invocation.getProtocolServiceKey(),
-                    pts, realArgument, new HashMap<>(invocation.getObjectAttachments()),
+                    pts, realArgument, invocation.copyObjectAttachments(),
                     invocation.getInvoker(), new HashMap<>(),
                     invocation instanceof RpcInvocation ? ((RpcInvocation) invocation).getInvokeMode() : null);
                 copiedInvocation.setInvoker(invoker);

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/util/CuratorFrameworkUtilsTest.java
Patch:
@@ -58,15 +58,15 @@ public static void init() throws Exception {
 
     @Test
     void testBuildCuratorFramework() throws Exception {
-        CuratorFramework curatorFramework = CuratorFrameworkUtils.buildCuratorFramework(registryUrl);
+        CuratorFramework curatorFramework = CuratorFrameworkUtils.buildCuratorFramework(registryUrl, null);
         Assertions.assertNotNull(curatorFramework);
         Assertions.assertTrue(curatorFramework.getZookeeperClient().isConnected());
         curatorFramework.getZookeeperClient().close();
     }
 
     @Test
     void testBuildServiceDiscovery() throws Exception {
-        CuratorFramework curatorFramework = CuratorFrameworkUtils.buildCuratorFramework(registryUrl);
+        CuratorFramework curatorFramework = CuratorFrameworkUtils.buildCuratorFramework(registryUrl, null);
         ServiceDiscovery<ZookeeperInstance> discovery = CuratorFrameworkUtils.buildServiceDiscovery(curatorFramework, ROOT_PATH.getParameterValue(registryUrl));
         Assertions.assertNotNull(discovery);
         discovery.close();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/CodecSupport.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 
 import static org.apache.dubbo.common.BaseServiceMetadata.keyWithoutGroup;
 
@@ -46,7 +47,7 @@ public class CodecSupport {
     private static Map<Byte, String> ID_SERIALIZATIONNAME_MAP = new HashMap<Byte, String>();
     private static Map<String, Byte> SERIALIZATIONNAME_ID_MAP = new HashMap<String, Byte>();
     // Cache null object serialize results, for heartbeat request/response serialize use.
-    private static Map<Byte, byte[]> ID_NULLBYTES_MAP = new HashMap<Byte, byte[]>();
+    private static Map<Byte, byte[]> ID_NULLBYTES_MAP = new ConcurrentHashMap<>();
 
     private static final ThreadLocal<byte[]> TL_BUFFER = ThreadLocal.withInitial(() -> new byte[1024]);
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/Constants.java
Patch:
@@ -55,7 +55,6 @@ public interface Constants {
 
     boolean DEFAULT_LAZY_REQUEST_WITH_WARNING = false;
 
-    String OPTIMIZER_KEY = "optimizer";
 
     String ON_CONNECT_KEY = "onconnect";
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -66,7 +66,6 @@ public class TripleProtocol extends AbstractProtocol {
     private final PathResolver pathResolver;
     private final TriBuiltinService triBuiltinService;
     private final ConnectionManager connectionManager;
-    private final FrameworkModel frameworkModel;
     private final String acceptEncodings;
     private boolean versionChecked = false;
 
@@ -124,12 +123,14 @@ public void afterUnExport() {
         url.getOrDefaultApplicationModel().getExtensionLoader(ExecutorRepository.class)
             .getDefaultExtension()
             .createExecutorIfAbsent(url);
-        PortUnificationExchanger.bind(invoker.getUrl());
+        PortUnificationExchanger.bind(url);
+        optimizeSerialization(url);
         return exporter;
     }
 
     @Override
     public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {
+        optimizeSerialization(url);
         ExecutorService streamExecutor = getOrCreateStreamExecutor(
             url.getOrDefaultApplicationModel());
         TripleInvoker<T> invoker = new TripleInvoker<>(type, url, acceptEncodings,

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCountCodecTest.java
Patch:
@@ -61,7 +61,7 @@ public void test() throws Exception {
         }
 
         MultiMessage multiMessage = (MultiMessage) dubboCountCodec.decode(channel, buffer);
-        Assertions.assertEquals(multiMessage.size(), 20);
+        Assertions.assertEquals(multiMessage.size(), 18);
         int requestCount = 0;
         int responseCount = 0;
         Iterator iterator = multiMessage.iterator();
@@ -78,7 +78,7 @@ public void test() throws Exception {
             }
         }
         Assertions.assertEquals(requestCount, 10);
-        Assertions.assertEquals(responseCount, 10);
+        Assertions.assertEquals(responseCount, 8);
     }
 
 }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/ServiceNameMapping.java
Patch:
@@ -114,6 +114,8 @@ static Set<String> getAppNames(String content) {
 
     Set<String> getCachedMapping(URL consumerURL);
 
+    Set<String> getRemoteMapping(URL consumerURL);
+
     Map<String, Set<String>> getCachedMapping();
 
     Set<String> removeCachedMapping(String serviceKey);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/model/MigrationRuleTest.java
Patch:
@@ -99,7 +99,7 @@ public void test_parse() {
 
         Mockito.when(url.getDisplayServiceKey()).thenReturn("GreetingService:1.0.1");
         Mockito.when(url.getServiceInterface()).thenReturn("GreetingService");
-        when(mapping.getCachedMapping(any(URL.class))).thenReturn(Collections.singleton("TestApplication"));
+        when(mapping.getRemoteMapping(any(URL.class))).thenReturn(Collections.singleton("TestApplication"));
 
         Set<String> services = new HashSet<>();
         services.add("TestApplication");

File: dubbo-common/src/main/java/org/apache/dubbo/common/beans/ScopeBeanExtensionInjector.java
Patch:
@@ -37,6 +37,6 @@ public void setScopeModel(ScopeModel scopeModel) {
 
     @Override
     public <T> T getInstance(Class<T> type, String name) {
-        return beanFactory.getBean(name, type);
+        return beanFactory == null ? null : beanFactory.getBean(name, type);
     }
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -61,6 +61,8 @@ public interface CommonConstants {
 
     String DUBBO_MIGRATION_KEY = "dubbo.migration.file";
 
+    String DUBBO_MIGRATION_FILE_ENABLE = "dubbo.migration-file.enable";
+
     String DEFAULT_DUBBO_MIGRATION_FILE = "dubbo-migration.yaml";
 
     String ANY_VALUE = "*";

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleListener.java
Patch:
@@ -215,9 +215,9 @@ public void setRawRule(String rawRule) {
     }
 
     private MigrationRule parseRule(String rawRule) {
-        MigrationRule tmpRule = rule == null ? MigrationRule.INIT : rule;
+        MigrationRule tmpRule = rule == null ? MigrationRule.getInitRule() : rule;
         if (INIT.equals(rawRule)) {
-            tmpRule = MigrationRule.INIT;
+            tmpRule = MigrationRule.getInitRule();
         } else {
             try {
                 tmpRule = MigrationRule.parse(rawRule);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/MigrationRuleHandlerTest.java
Patch:
@@ -38,8 +38,9 @@ public void test() {
         Mockito.when(invoker.migrateToForceApplicationInvoker(Mockito.any())).thenReturn(true);
         Mockito.when(invoker.migrateToForceInterfaceInvoker(Mockito.any())).thenReturn(true);
 
-        handler.doMigrate(MigrationRule.INIT);
-        Mockito.verify(invoker, Mockito.times(1)).migrateToApplicationFirstInvoker(MigrationRule.INIT);
+        MigrationRule initRule = MigrationRule.getInitRule();
+        handler.doMigrate(initRule);
+        Mockito.verify(invoker, Mockito.times(1)).migrateToApplicationFirstInvoker(initRule);
 
         MigrationRule rule = Mockito.mock(MigrationRule.class);
         Mockito.when(rule.getStep(url)).thenReturn(MigrationStep.FORCE_APPLICATION);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/MigrationRuleListenerTest.java
Patch:
@@ -129,7 +129,7 @@ public void testWithInitAndNoLocalRule() {
         migrationRuleListener.getHandlers().put(migrationInvoker, handler);
         migrationRuleListener.onRefer(null, migrationInvoker, consumerURL, null);
         // check migration happened after invoker referred
-        Mockito.verify(handler, Mockito.times(1)).doMigrate(MigrationRule.INIT);
+        Mockito.verify(handler, Mockito.times(1)).doMigrate(MigrationRule.getInitRule());
 
         // check no delay tasks created for there's no local rule and no config center
         Assertions.assertNull(migrationRuleListener.localRuleMigrationFuture);

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java
Patch:
@@ -39,7 +39,7 @@
 import com.alibaba.nacos.api.naming.listener.NamingEvent;
 import com.alibaba.nacos.api.naming.pojo.Instance;
 import com.alibaba.nacos.api.naming.pojo.ListView;
-import com.google.common.collect.Lists;
+import com.alibaba.nacos.shaded.com.google.common.collect.Lists;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/util/NacosInstanceManageUtil.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dubbo.common.utils.CollectionUtils;
 
 import com.alibaba.nacos.api.naming.pojo.Instance;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
+import com.alibaba.nacos.shaded.com.google.common.collect.Lists;
+import com.alibaba.nacos.shaded.com.google.common.collect.Maps;
 
 import java.util.List;
 import java.util.Map;

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -1402,8 +1402,8 @@ public String getProtocolServiceKey() {
         }
         this.protocolServiceKey = getServiceKey();
         /*
-        Special treatment if this is a consumer subscription url instance with no protocol specified - starts with 'consumer://'
-        If the specific protocol is specified on the consumer side, then this method will return as normal.
+        Special treatment for urls begins with 'consumer://', that is, a consumer subscription url instance with no protocol specified.
+        If protocol is specified on the consumer side, then this method will return as normal.
         */
         if (!CONSUMER.equals(getProtocol())) {
             this.protocolServiceKey += (GROUP_CHAR_SEPARATOR + getProtocol());

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/SimpleReferenceCache.java
Patch:
@@ -260,7 +260,9 @@ public void destroyAll() {
 
     private void destroyReference(ReferenceConfigBase<?> rc) {
         Destroyable proxy = (Destroyable) rc.get();
-        proxy.$destroy();
+        if (proxy != null){
+            proxy.$destroy();
+        }
         rc.destroy();
     }
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/NetUtilsInterfaceDisplayNameHasMetaCharactersTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class NetUtilsInterfaceDisplayNameHasMetaCharactersTest {
-    private static final String IGNORED_DISPLAY_NAME_HAS_METACHARACTERS = "Mock(R) ^$*+?.|-[0-9] Adapter";
+    private static final String IGNORED_DISPLAY_NAME_HAS_METACHARACTERS = "Mock(R) ^$*+[?].|-[0-9] Adapter";
     private static final String SELECTED_DISPLAY_NAME = "Selected Adapter";
     private static final String SELECTED_HOST_ADDR = "192.168.0.1";
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/annotation/DubboService.java
Patch:
@@ -18,6 +18,7 @@
 
 
 import org.apache.dubbo.common.constants.ClusterRules;
+import org.apache.dubbo.common.constants.LoadbalanceRules;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -205,7 +206,7 @@
      *
      * you can use {@link org.apache.dubbo.common.constants.LoadbalanceRules#RANDOM} ……
      */
-    String loadbalance() default ClusterRules.EMPTY;
+    String loadbalance() default LoadbalanceRules.EMPTY;
 
     /**
      * Whether to enable async invocation, default value is false

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/DefaultMetadataParamsFilter.java
Patch:
@@ -37,9 +37,9 @@ public class DefaultMetadataParamsFilter implements MetadataParamsFilter {
     private final String[] includedInstanceParams;
 
     public DefaultMetadataParamsFilter() {
-        this.includedInstanceParams = new String[]{HEARTBEAT_TIMEOUT_KEY};
+        this.includedInstanceParams = new String[]{HEARTBEAT_TIMEOUT_KEY, TIMESTAMP_KEY};
         this.excludedServiceParams = new String[]{MONITOR_KEY, BIND_IP_KEY, BIND_PORT_KEY, QOS_ENABLE,
-            QOS_HOST, QOS_PORT, ACCEPT_FOREIGN_IP, VALIDATION_KEY, INTERFACES, PID_KEY, TIMESTAMP_KEY};
+            QOS_HOST, QOS_PORT, ACCEPT_FOREIGN_IP, VALIDATION_KEY, INTERFACES, PID_KEY, TIMESTAMP_KEY, HEARTBEAT_TIMEOUT_KEY};
     }
 
     @Override

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataInfo.java
Patch:
@@ -47,6 +47,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.DOT_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_CHAR_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.TIMESTAMP_KEY;
 import static org.apache.dubbo.metadata.RevisionResolver.EMPTY_REVISION;
 
 public class MetadataInfo implements Serializable {
@@ -394,7 +395,7 @@ private void extractInstanceParams(URL url, List<MetadataParamsFilter> filters)
 
         tmpInstanceParams.forEach((key, value) -> {
             String oldValue = instanceParams.put(key, value);
-            if (oldValue != null && !oldValue.equals(value)) {
+            if (!TIMESTAMP_KEY.equals(key) && oldValue != null && !oldValue.equals(value)) {
                 throw new IllegalStateException(String.format("Inconsistent instance metadata found in different services: %s, %s", oldValue, value));
             }
         });

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/monitor/MonitorFactory.java
Patch:
@@ -23,7 +23,7 @@
 @Deprecated
 public interface MonitorFactory extends org.apache.dubbo.monitor.MonitorFactory {
 
-    Monitor getMonitor(com.alibaba.dubbo.common.URL url);
+    com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL url);
 
     @Override
     default Monitor getMonitor(URL url) {

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/registry/RegistryFactory.java
Patch:
@@ -23,7 +23,7 @@
 @Deprecated
 public interface RegistryFactory extends org.apache.dubbo.registry.RegistryFactory {
 
-    Registry getRegistry(com.alibaba.dubbo.common.URL url);
+    com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL url);
 
     @Override
     default Registry getRegistry(URL url) {

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/RouterFactory.java
Patch:
@@ -23,7 +23,7 @@
 @Deprecated
 public interface RouterFactory extends org.apache.dubbo.rpc.cluster.RouterFactory {
 
-    Router getRouter(com.alibaba.dubbo.common.URL url);
+    com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL url);
 
     @Override
     default Router getRouter(URL url) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -54,7 +54,7 @@ public class MetadataUtils {
 
     public static void publishServiceDefinition(URL url, ServiceDescriptor serviceDescriptor, ApplicationModel applicationModel) {
         if (getMetadataReports(applicationModel).size() == 0) {
-            String msg = "Remote Metadata Report Server not hasn't been configured or unavailable . Unable to get Metadata from remote!";
+            String msg = "Remote Metadata Report Server is not provided or unavailable, will stop registering service definition to remote center!";
             logger.warn(msg);
         }
 

File: dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/ReferenceCountManagedChannel.java
Patch:
@@ -49,6 +49,7 @@ public ManagedChannel shutdown() {
         if (referenceCount.decrementAndGet() <= 0) {
             return grpcChannel.shutdown();
         }
+
         return grpcChannel;
     }
 

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataInfo.java
Patch:
@@ -171,10 +171,9 @@ public String getRevision() {
     }
 
     /**
-     * Calculation of this instance's status and modification of the instance must be synchronized among different threads.
+     * Calculation of this instance's status like revision and modification of the same instance must be synchronized among different threads.
      * <p>
-     * Usage of this method is strictly restricted at certain point of registration, always try using {@link this#getRevision()}
-     * instead of this method.
+     * Usage of this method is strictly restricted to certain points such as when during registration. Always try to use {@link this#getRevision()} instead.
      */
     public synchronized String calAndGetRevision() {
         if (revision != null && !updated) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcInvocation.java
Patch:
@@ -513,7 +513,7 @@ public String getAttachment(String key, String defaultValue) {
                 return strValue;
             }
         }
-        return null;
+        return defaultValue;
     }
 
     @Deprecated

File: dubbo-common/src/main/java/org/apache/dubbo/config/MethodConfig.java
Patch:
@@ -177,7 +177,7 @@ public MethodConfig(Method method) {
         }
 
         if (method.arguments() != null && method.arguments().length != 0) {
-            List<ArgumentConfig> argumentConfigs = new ArrayList<ArgumentConfig>(method.arguments().length);
+            List<ArgumentConfig> argumentConfigs = new ArrayList<>(method.arguments().length);
             this.setArguments(argumentConfigs);
             for (int i = 0; i < method.arguments().length; i++) {
                 ArgumentConfig argumentConfig = new ArgumentConfig(method.arguments()[i]);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ReflectionPackableMethod.java
Patch:
@@ -444,12 +444,12 @@ public Object unpack(byte[] data) throws IOException, ClassNotFoundException {
             TripleWrapper.TripleRequestWrapper wrapper = TripleWrapper.TripleRequestWrapper.parseFrom(
                 data);
             Object[] ret = new Object[wrapper.getArgsCount()];
-            final String serializeType = convertHessianFromWrapper(wrapper.getSerializeType());
-            ((WrapResponsePack) responsePack).serialize = serializeType;
+            ((WrapResponsePack) responsePack).serialize = wrapper.getSerializeType();
             for (int i = 0; i < wrapper.getArgsList().size(); i++) {
                 ByteArrayInputStream bais = new ByteArrayInputStream(
                     wrapper.getArgs(i).toByteArray());
-                ret[i] = serialization.deserialize(url, serializeType, wrapper.getArgTypes(i),
+                ret[i] = serialization.deserialize(url, wrapper.getSerializeType(),
+                    wrapper.getArgTypes(i),
                     bais);
             }
             return ret;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java
Patch:
@@ -64,7 +64,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
         } else if (parameterTypes.length == 1 && "equals".equals(methodName)) {
             return invoker.equals(args[0]);
         }
-        RpcInvocation rpcInvocation = new RpcInvocation(serviceModel, method, invoker.getInterface().getName(), protocolServiceKey, args);
+        RpcInvocation rpcInvocation = new RpcInvocation(serviceModel, method.getName(), invoker.getInterface().getName(), protocolServiceKey, method.getParameterTypes(), args);
 
         if (serviceModel instanceof ConsumerModel) {
             rpcInvocation.put(Constants.CONSUMER_MODEL, serviceModel);

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -533,4 +533,6 @@ public interface CommonConstants {
     String CLEAR_FUTURE_AFTER_GET = "future.clear.once";
 
     String NATIVE_STUB = "nativestub";
+
+    String METADATA = "metadata";
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/TripleClientStream.java
Patch:
@@ -93,7 +93,8 @@ private WriteQueue createWriteQueue(Channel parent) {
         channel.pipeline()
             .addLast(new TripleCommandOutBoundHandler())
             .addLast(new TripleHttp2ClientResponseHandler(createTransportListener()));
-        parent.closeFuture().addListener(f -> transportException(f.cause()));
+        channel.closeFuture()
+            .addListener(f -> transportException(f.cause()));
         return new WriteQueue(channel);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -378,8 +378,6 @@ public interface CommonConstants {
 
     int DEFAULT_FAILBACK_TIMES = 3;
 
-    String REGISTER_KEY = "register";
-
     String INTERFACES = "interfaces";
 
     String SSL_ENABLED_KEY = "ssl-enabled";

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -67,7 +67,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
-import static org.apache.dubbo.common.constants.CommonConstants.REGISTER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.REVISION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SERVICE_NAME_MAPPING_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
@@ -81,6 +80,7 @@
 import static org.apache.dubbo.config.Constants.DUBBO_PORT_TO_BIND;
 import static org.apache.dubbo.config.Constants.DUBBO_PORT_TO_REGISTRY;
 import static org.apache.dubbo.config.Constants.SCOPE_NONE;
+import static org.apache.dubbo.registry.Constants.REGISTER_KEY;
 import static org.apache.dubbo.remoting.Constants.BIND_IP_KEY;
 import static org.apache.dubbo.remoting.Constants.BIND_PORT_KEY;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataCustomizer.java
Patch:
@@ -68,7 +68,7 @@ public void customize(ServiceInstance serviceInstance, ApplicationModel applicat
             }
         }
 
-        serviceInstance.getMetadata().putAll(extraParameters);;
+        serviceInstance.getMetadata().putAll(extraParameters);
         if (CollectionUtils.isNotEmptyMap(metadataInfo.getInstanceParams())) {
             serviceInstance.getMetadata().putAll(metadataInfo.getInstanceParams());
         }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/CancellationContext.java
Patch:
@@ -25,7 +25,7 @@
 
 public class CancellationContext implements Closeable {
 
-    private ArrayList<ExecutableListener> listeners;
+    private volatile ArrayList<ExecutableListener> listeners;
     private Throwable cancellationCause;
     private boolean cancelled;
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/RequestMetadata.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
+import org.apache.dubbo.rpc.CancellationContext;
 import org.apache.dubbo.rpc.model.MethodDescriptor;
 import org.apache.dubbo.rpc.model.PackableMethod;
 import org.apache.dubbo.rpc.protocol.tri.compressor.Compressor;
@@ -42,6 +43,7 @@ public class RequestMetadata {
     public String acceptEncoding;
     public String timeout;
     public Compressor compressor;
+    public CancellationContext cancellationContext;
     public MethodDescriptor method;
     public PackableMethod packableMethod;
     public Map<String, Object> attachments;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/AbstractServerCallListener.java
Patch:
@@ -30,7 +30,7 @@
 
 import java.net.InetSocketAddress;
 
-public abstract class AbstractServerCallListener implements ServerCall.Listener {
+public abstract class AbstractServerCallListener implements AbstractServerCall.Listener {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(AbstractServerCallListener.class);
     public final CancellationContext cancellationContext;
@@ -49,7 +49,7 @@ public AbstractServerCallListener(RpcInvocation invocation, Invoker<?> invoker,
     public void invoke() {
         RpcContext.restoreCancellationContext(cancellationContext);
         InetSocketAddress remoteAddress = (InetSocketAddress) invocation.getAttributes()
-            .remove(ServerCall.REMOTE_ADDRESS_KEY);
+            .remove(AbstractServerCall.REMOTE_ADDRESS_KEY);
         RpcContext.getServerContext().setRemoteAddress(remoteAddress);
         String remoteApp = (String) invocation.getAttributes()
             .remove(TripleHeaderEnum.CONSUMER_APP_NAME_KEY);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/ServerStreamServerCallListener.java
Patch:
@@ -41,13 +41,13 @@ public void onMessage(Object message) {
         invocation.setArguments(new Object[]{message, responseObserver});
     }
 
-
     @Override
-    public void onCancel(String errorInfo) {
-        responseObserver.cancel(TriRpcStatus.CANCELLED.withDescription(errorInfo).asException());
+    public void onCancel(TriRpcStatus status) {
+        responseObserver.onError(status.asException());
     }
 
 
+
     @Override
     public void onComplete() {
         invoke();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/UnaryClientCallListener.java
Patch:
@@ -51,7 +51,8 @@ public void onClose(TriRpcStatus status, Map<String, Object> trailers) {
 
     @Override
     public void onStart(ClientCall call) {
-        future.addTimeoutListener(() -> call.cancel("client timeout", null));
-        call.requestN(2);
+        future.addTimeoutListener(
+            () -> call.cancelByLocal(new IllegalStateException("client timeout")));
+        call.request(2);
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/call/UnaryServerCallListener.java
Patch:
@@ -32,7 +32,7 @@ public UnaryServerCallListener(RpcInvocation invocation, Invoker<?> invoker,
     @Override
     public void onReturn(Object value) {
         responseObserver.onNext(value);
-        responseObserver.onCompleted(TriRpcStatus.OK);
+        responseObserver.onCompleted();
     }
 
     @Override
@@ -44,12 +44,12 @@ public void onMessage(Object message) {
         }
     }
 
-
     @Override
-    public void onCancel(String errorInfo) {
+    public void onCancel(TriRpcStatus status) {
         // ignored
     }
 
+
     @Override
     public void onComplete() {
         invoke();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/AbstractStream.java
Patch:
@@ -22,6 +22,9 @@
 
 import java.util.concurrent.Executor;
 
+/**
+ * An abstract stream implementation.
+ */
 public abstract class AbstractStream implements Stream {
 
     protected final Executor executor;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/transport/H2TransportListener.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.dubbo.rpc.protocol.tri.transport;
 
-import org.apache.dubbo.rpc.TriRpcStatus;
-
 import io.netty.buffer.ByteBuf;
 import io.netty.handler.codec.http2.Http2Headers;
 
@@ -45,6 +43,6 @@ public interface H2TransportListener {
     void onData(ByteBuf data, boolean endStream);
 
 
-    void cancelByRemote(TriRpcStatus status);
+    void cancelByRemote(long errorCode);
 
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/transport/TripleHttp2ClientResponseHandler.java
Patch:
@@ -24,6 +24,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.handler.codec.http2.Http2DataFrame;
+import io.netty.handler.codec.http2.Http2Error;
 import io.netty.handler.codec.http2.Http2GoAwayFrame;
 import io.netty.handler.codec.http2.Http2HeadersFrame;
 import io.netty.handler.codec.http2.Http2ResetFrame;
@@ -70,7 +71,7 @@ protected void channelRead0(ChannelHandlerContext ctx, Http2StreamFrame msg) thr
 
     private void onResetRead(ChannelHandlerContext ctx, Http2ResetFrame resetFrame) {
         LOGGER.warn("Triple Client received remote reset errorCode=" + resetFrame.errorCode());
-        transportListener.cancelByRemote(TriRpcStatus.CANCELLED);
+        transportListener.cancelByRemote(resetFrame.errorCode());
         ctx.close();
     }
 
@@ -80,7 +81,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
             .withCause(cause);
         LOGGER.warn("Meet Exception on ClientResponseHandler, status code is: " + status.code,
             cause);
-        transportListener.cancelByRemote(status);
+        transportListener.cancelByRemote(Http2Error.INTERNAL_ERROR.code());
         ctx.close();
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/TripleInvokerTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.rpc.model.MethodDescriptor;
 import org.apache.dubbo.rpc.model.ReflectionMethodDescriptor;
 import org.apache.dubbo.rpc.protocol.tri.call.ClientCall;
+import org.apache.dubbo.rpc.protocol.tri.call.TripleClientCall;
 import org.apache.dubbo.rpc.protocol.tri.compressor.Identity;
 import org.apache.dubbo.rpc.protocol.tri.support.IGreeter;
 
@@ -54,7 +55,7 @@ public void testNewCall() throws NoSuchMethodException {
             .getExtensionLoader(ExecutorRepository.class)
             .getDefaultExtension()
             .createExecutorIfAbsent(url);
-        ClientCall call = Mockito.mock(ClientCall.class);
+        TripleClientCall call = Mockito.mock(TripleClientCall.class);
         StreamObserver streamObserver = Mockito.mock(StreamObserver.class);
         when(call.start(any(RequestMetadata.class), any(ClientCall.Listener.class)))
             .thenReturn(streamObserver);

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/transport/AbstractH2TransportListenerTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.dubbo.rpc.protocol.tri.transport;
 
-import org.apache.dubbo.rpc.TriRpcStatus;
-
 import io.netty.buffer.ByteBuf;
 import io.netty.handler.codec.http.HttpMethod;
 import io.netty.handler.codec.http2.DefaultHttp2Headers;
@@ -46,7 +44,7 @@ public void onData(ByteBuf data, boolean endStream) {
             }
 
             @Override
-            public void cancelByRemote(TriRpcStatus status) {
+            public void cancelByRemote(long errorCode) {
 
             }
         };

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/transport/WriteQueueTest.java
Patch:
@@ -29,6 +29,7 @@
 import io.netty.channel.DefaultEventLoop;
 import io.netty.channel.EventLoop;
 import io.netty.handler.codec.http2.DefaultHttp2Headers;
+import io.netty.handler.codec.http2.Http2Error;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -75,7 +76,7 @@ public void test() throws Exception {
         TriRpcStatus status = TriRpcStatus.UNKNOWN
                 .withCause(new RpcException())
                 .withDescription("Encode Response data error");
-        writeQueue.enqueue(CancelQueueCommand.createCommand());
+        writeQueue.enqueue(CancelQueueCommand.createCommand(Http2Error.CANCEL));
         writeQueue.enqueue(TextDataQueueCommand.createCommand(status.description, true));
 
         while (writeMethodCalledTimes.get() != 4) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/CommonScopeModelInitializer.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.beans.factory.ScopeBeanFactory;
 import org.apache.dubbo.common.config.ConfigurationCache;
+import org.apache.dubbo.common.convert.ConverterUtil;
 import org.apache.dubbo.common.lang.ShutdownHookCallbacks;
 import org.apache.dubbo.common.status.reporter.FrameworkStatusReportService;
 import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
@@ -31,6 +32,7 @@ public class CommonScopeModelInitializer implements ScopeModelInitializer {
     public void initializeFrameworkModel(FrameworkModel frameworkModel) {
         ScopeBeanFactory beanFactory = frameworkModel.getBeanFactory();
         beanFactory.registerBean(FrameworkExecutorRepository.class);
+        beanFactory.registerBean(ConverterUtil.class);
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.config.InmemoryConfiguration;
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.constants.RemotingConstants;
+import org.apache.dubbo.common.convert.ConverterUtil;
 import org.apache.dubbo.common.url.component.PathURLAddress;
 import org.apache.dubbo.common.url.component.ServiceConfigURL;
 import org.apache.dubbo.common.url.component.URLAddress;
@@ -76,7 +77,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.USERNAME_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CATEGORY_KEY;
-import static org.apache.dubbo.common.convert.Converter.convertIfPossible;
 import static org.apache.dubbo.common.utils.StringUtils.isBlank;
 
 /**
@@ -590,7 +590,7 @@ public <T> T getParameter(String key, Class<T> valueType, T defaultValue) {
         String value = getParameter(key);
         T result = null;
         if (!isBlank(value)) {
-            result = convertIfPossible(value, valueType);
+            result = getOrDefaultFrameworkModel().getBeanFactory().getBean(ConverterUtil.class).convertIfPossible(value, valueType);
         }
         if (result == null) {
             result = defaultValue;

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
 import org.apache.dubbo.rpc.model.ScopeModel;
+import org.apache.dubbo.rpc.model.ScopeModelUtil;
 
 import java.beans.BeanInfo;
 import java.beans.IntrospectionException;
@@ -726,7 +727,7 @@ private void assignProperties(Object obj, Environment environment, Map<String, S
                         && ClassUtils.isTypeMatch(method.getParameterTypes()[0], value)
                         && !isIgnoredAttribute(obj.getClass(), propertyName)) {
                         value = environment.resolvePlaceholders(value);
-                        method.invoke(obj, ClassUtils.convertPrimitive(method.getParameterTypes()[0], value));
+                        method.invoke(obj, ClassUtils.convertPrimitive(ScopeModelUtil.getFrameworkModel(getScopeModel()), method.getParameterTypes()[0], value));
                     }
                 } catch (Exception e) {
                     logger.info("Failed to override the property " + method.getName() + " in " +

File: dubbo-common/src/main/java/org/apache/dubbo/config/MethodConfig.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.rpc.model.AsyncMethodInfo;
 import org.apache.dubbo.rpc.model.ModuleModel;
+import org.apache.dubbo.rpc.model.ScopeModelUtil;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -253,7 +254,7 @@ private void refreshArgument(ArgumentConfig argument, InmemoryConfiguration subP
                         String value = StringUtils.trim(subPropsConfiguration.getString(kebabPropertyName));
                         if (StringUtils.hasText(value) && ClassUtils.isTypeMatch(method.getParameterTypes()[0], value)) {
                             value = environment.resolvePlaceholders(value);
-                            method.invoke(argument, ClassUtils.convertPrimitive(method.getParameterTypes()[0], value));
+                            method.invoke(argument, ClassUtils.convertPrimitive(ScopeModelUtil.getFrameworkModel(getScopeModel()), method.getParameterTypes()[0], value));
                         }
                     } catch (Exception e) {
                         logger.info("Failed to override the property " + method.getName() + " in " +

File: dubbo-common/src/test/java/org/apache/dubbo/common/convert/multiple/StringToArrayConverterTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.common.convert.multiple;
 
+import org.apache.dubbo.rpc.model.FrameworkModel;
+
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -36,7 +38,7 @@ public class StringToArrayConverterTest {
 
     @BeforeEach
     public void init() {
-        converter = new StringToArrayConverter();
+        converter = new StringToArrayConverter(FrameworkModel.defaultModel());
     }
 
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/convert/multiple/StringToQueueConverterTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.common.convert.multiple;
 
 import org.apache.dubbo.common.utils.CollectionUtils;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -55,7 +56,7 @@ public class StringToQueueConverterTest {
 
     @BeforeEach
     public void init() {
-        converter = new StringToQueueConverter();
+        converter = new StringToQueueConverter(FrameworkModel.defaultModel());
     }
 
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/convert/multiple/StringToSetConverterTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.common.convert.multiple;
 
 import org.apache.dubbo.common.utils.CollectionUtils;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -55,7 +56,7 @@ public class StringToSetConverterTest {
 
     @BeforeEach
     public void init() {
-        converter = new StringToSetConverter();
+        converter = new StringToSetConverter(FrameworkModel.defaultModel());
     }
 
     @Test

File: dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/rest/DefaultServiceRestMetadataResolver.java
Patch:
@@ -17,8 +17,10 @@
 package org.apache.dubbo.metadata.annotation.processing.rest;
 
 import org.apache.dubbo.common.convert.Converter;
+import org.apache.dubbo.common.convert.ConverterUtil;
 import org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.JAXRSServiceRestMetadataResolver;
 import org.apache.dubbo.metadata.annotation.processing.rest.springmvc.SpringMvcServiceRestMetadataResolver;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.AnnotationMirror;
@@ -32,7 +34,6 @@
 
 import static java.lang.String.valueOf;
 import static java.util.Arrays.asList;
-import static org.apache.dubbo.common.convert.Converter.getConverter;
 import static org.apache.dubbo.common.utils.ClassUtils.forName;
 import static org.apache.dubbo.common.utils.StringUtils.SLASH_CHAR;
 import static org.apache.dubbo.metadata.annotation.processing.util.LoggerUtils.warn;
@@ -146,7 +147,7 @@ private boolean supportsPathVariableType(TypeMirror parameterType) {
         boolean supported;
         try {
             Class<?> targetType = forName(className, classLoader);
-            supported = getConverter(String.class, targetType) != null;
+            supported = FrameworkModel.defaultModel().getBeanFactory().getBean(ConverterUtil.class).getConverter(String.class, targetType) != null;
         } catch (ClassNotFoundException e) {
             supported = false;
         }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/PortUnificationServer.java
Patch:
@@ -175,8 +175,8 @@ protected void doClose() throws Throwable {
                 long quietPeriod = Math.min(2000L, timeout);
                 Future<?> bossGroupShutdownFuture = bossGroup.shutdownGracefully(quietPeriod, timeout, MILLISECONDS);
                 Future<?> workerGroupShutdownFuture = workerGroup.shutdownGracefully(quietPeriod, timeout, MILLISECONDS);
-                bossGroupShutdownFuture.syncUninterruptibly();
-                workerGroupShutdownFuture.syncUninterruptibly();
+                bossGroupShutdownFuture.awaitUninterruptibly(timeout, MILLISECONDS);
+                workerGroupShutdownFuture.awaitUninterruptibly(timeout, MILLISECONDS);
             }
         } catch (Throwable e) {
             logger.warn(e.getMessage(), e);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/registry/ZoneAwareClusterInvoker.java
Patch:
@@ -100,7 +100,7 @@ public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, L
 
         // load balance among all registries, with registry weight count in.
         Invoker<T> balancedInvoker = select(loadbalance, invocation, invokers, null);
-        if (balancedInvoker.isAvailable()) {
+        if (balancedInvoker!=null && balancedInvoker.isAvailable()) {
             return balancedInvoker.invoke(invocation);
         }
 

File: compiler/src/main/java/org/apache/dubbo/gen/dubbo/Dubbo3Generator.java
Patch:
@@ -53,7 +53,7 @@ protected String getInterfaceTemplateFileName () {
 
     @Override
     protected String getSingleTemplateFileName() {
-        return "DubboStub.mustache";// compatible with 2.7 or before
+        return "DubboStub3Single.mustache";
     }
 
     @Override

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/ClusterInvoker.java
Patch:
@@ -25,7 +25,7 @@
  * A ClusterInvoker holds a group of normal invokers, stored in a Directory, mapping to one Registry.
  * The ClusterInvoker implementation usually provides LB or HA policies, like FailoverClusterInvoker.
  * <p>
- * In multi-registry subscription scenario, the final ClusterInvoker will referr to several sub ClusterInvokers, with each
+ * In multi-registry subscription scenario, the final ClusterInvoker will refer to several sub ClusterInvokers, with each
  * sub ClusterInvoker representing one Registry. Take ZoneAwareClusterInvoker as an example, it is specially customized for
  * multi-registry use cases: first, pick up one ClusterInvoker, then do LB inside the chose ClusterInvoker.
  *

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/model/ConditionRouterRule.java
Patch:
@@ -24,9 +24,6 @@
 
 import static org.apache.dubbo.rpc.cluster.Constants.CONDITIONS_KEY;
 
-/**
- *
- */
 public class ConditionRouterRule extends AbstractRouterRule {
     private List<String> conditions;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/file/FileStateRouterFactory.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dubbo.rpc.cluster.router.state.StateRouter;
 import org.apache.dubbo.rpc.cluster.router.state.StateRouterFactory;
 
-import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
 
@@ -56,7 +55,7 @@ public <T> StateRouter<T> getRouter(Class<T> interfaceClass, URL url) {
                     type = path.substring(i + 1);
                 }
             }
-            String rule = IOUtils.read(new FileReader(new File(url.getAbsolutePath())));
+            String rule = IOUtils.read(new FileReader(url.getAbsolutePath()));
 
             // FIXME: this code looks useless
             boolean runtime = url.getParameter(RUNTIME_KEY, false);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/model/Tag.java
Patch:
@@ -20,9 +20,6 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-/**
- *
- */
 public class Tag {
     private String name;
     private List<String> addresses;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AvailableClusterInvoker.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.List;
 
 /**
- * AvailableCluster
+ * AvailableClusterInvoker
  *
  */
 public class AvailableClusterInvoker<T> extends AbstractClusterInvoker<T> {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/registry/ZoneAwareClusterInvoker.java
Patch:
@@ -40,7 +40,7 @@
 import static org.apache.dubbo.common.constants.RegistryConstants.ZONE_KEY;
 
 /**
- * When there're more than one registry for subscription.
+ * When there are more than one registry for subscription.
  * <p>
  * This extension provides a strategy to decide how to distribute traffics among them:
  * 1. registry marked as 'preferred=true' has the highest priority.

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionStateRouterTest.java
Patch:
@@ -37,7 +37,7 @@
 import static org.apache.dubbo.rpc.cluster.Constants.FORCE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.RULE_KEY;
 
-public class ConditionRouterTest {
+public class ConditionStateRouterTest {
     private static final String LOCAL_HOST = "127.0.0.1";
     private URL SCRIPT_URL = URL.valueOf("condition://0.0.0.0/com.foo.BarService");
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/DubboMethodMatchTest.java
Patch:
@@ -39,7 +39,6 @@ public void nameMatch() {
 
         dubboMethodMatch.setName_match(nameStringMatch);
 
-        ;
         assertTrue(dubboMethodMatch.isMatch(new RpcInvocation(null, "sayHello", "",  "", new Class[]{}, new Object[]{})));
     }
 
@@ -50,8 +49,6 @@ public void argcMatch() {
         dubboMethodMatch.setArgc(1);
 
         assertFalse(dubboMethodMatch.isMatch(new RpcInvocation(null, "sayHello", "",  "", new Class[]{}, new Object[]{})));
-        assertFalse(dubboMethodMatch.isMatch(new RpcInvocation(null, "sayHello", "",  "", new Class[]{}, new Object[]{})));
-
         assertTrue(dubboMethodMatch.isMatch(new RpcInvocation(null, "sayHello", "",  "", new Class[]{}, new Object[]{"1"})));
     }
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/tag/TagStateRouterTest.java
Patch:
@@ -67,8 +67,6 @@ public void setup() {
         when(moduleModel.getExtensionLoader(TracingContextProvider.class)).thenReturn(extensionLoader);
 
         url = URL.valueOf("test://localhost/DemoInterface").setScopeModel(moduleModel);
-
-        url = URL.valueOf("test://localhost/DemoInterface").setScopeModel(moduleModel);
     }
 
     @Test

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvokerTest.java
Patch:
@@ -490,7 +490,7 @@ public void testMockInvokerFromOverride_Invoke_check_String() {
         invocation.setMethodName("getSomething");
         Result ret = cluster.invoke(invocation);
         Assertions.assertTrue(ret.getValue() instanceof String, "result type must be String but was : " + ret.getValue().getClass());
-        Assertions.assertEquals("1688", (String) ret.getValue());
+        Assertions.assertEquals("1688", ret.getValue());
     }
 
     @Test
@@ -606,7 +606,7 @@ public void testMockInvokerFromOverride_Invoke_check_ListPojo() {
         List<User> rl = (List<User>) ret.getValue();
         System.out.println(rl);
         Assertions.assertEquals(2, rl.size());
-        Assertions.assertEquals("hi1", ((User) rl.get(0)).getName());
+        Assertions.assertEquals("hi1", rl.get(0).getName());
     }
 
     @Test
@@ -641,7 +641,7 @@ public void testMockInvokerFromOverride_Invoke_force_throw() {
             cluster.invoke(invocation);
             Assertions.fail();
         } catch (RpcException e) {
-            Assertions.assertFalse(e.isBiz(), "not custem exception");
+            Assertions.assertFalse(e.isBiz(), "not custom exception");
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/BaseServiceMetadata.java
Patch:
@@ -37,7 +37,7 @@ public static String buildServiceKey(String path, String group, String version)
         int length = path == null ? 0 : path.length();
         length += group == null ? 0 : group.length();
         length += version == null ? 0 : version.length();
-        length += 3;
+        length += 2;
         StringBuilder buf = new StringBuilder(length);
         if (StringUtils.isNotEmpty(group)) {
             buf.append(group).append('/');
@@ -106,7 +106,7 @@ public static BaseServiceMetadata revertDisplayServiceKey(String displayKey) {
 
     public static String keyWithoutGroup(String interfaceName, String version) {
         if (StringUtils.isEmpty(version)) {
-            return interfaceName + ":0.0.0";
+            return interfaceName + ":" + DEFAULT_VERSION;
         }
         return interfaceName + ":" + version;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java
Patch:
@@ -162,7 +162,7 @@ public void updateAppConfigMap(Map<String, String> map) {
      * All configurations will be converged into a data bus - URL, and then drive the subsequent process.
      * <p>
      * At present, there are many configuration sources, including AbstractConfig (API, XML, annotation), - D, config center, etc.
-     * This method helps us to filter out the most priority values from various configuration sources.
+     * This methood helps us t filter out the most priority values from various configuration sources.
      *
      * @param config
      * @param prefix

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionDirector.java
Patch:
@@ -148,6 +148,8 @@ public void destroy() {
                 extensionLoader.destroy();
             }
             extensionLoadersMap.clear();
+            extensionScopeMap.clear();
+            extensionPostProcessors.clear();
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ConsumerModel.java
Patch:
@@ -40,7 +40,7 @@ public class ConsumerModel extends ServiceModel {
     private Map<Method, ConsumerMethodModel> methodModels = new HashMap<>();
 
     /**
-     * This constructor create an instance of ConsumerModel and passed objects should not be null.
+     * This constructor creates an instance of ConsumerModel and passed objects should not be null.
      * If service name, service instance, proxy object,methods should not be null. If these are null
      * then this constructor will throw {@link IllegalArgumentException}
      *

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ProviderModel.java
Patch:
@@ -153,8 +153,7 @@ public List<ProviderMethodModel> getMethodModelList(String methodName) {
     }
 
     private void initMethod(Class<?> serviceInterfaceClass) {
-        Method[] methodsToExport;
-        methodsToExport = serviceInterfaceClass.getMethods();
+        Method[] methodsToExport = serviceInterfaceClass.getMethods();
 
         for (Method method : methodsToExport) {
             method.setAccessible(true);

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ServiceMetadata.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.model;
 
 import org.apache.dubbo.common.BaseServiceMetadata;
-import org.apache.dubbo.common.URL;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -49,7 +48,7 @@ public ServiceMetadata(String serviceInterfaceName, String group, String version
         this.defaultGroup = group;
         this.group = group;
         this.version = version;
-        this.serviceKey = URL.buildKey(serviceInterfaceName, group, version);
+        this.serviceKey = buildServiceKey(serviceInterfaceName, group, version);
         this.serviceType = serviceType;
     }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java
Patch:
@@ -177,7 +177,7 @@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
             // this is an early event, it will be notified at org.springframework.context.support.AbstractApplicationContext.registerListeners()
             applicationContext.publishEvent(new DubboConfigInitEvent(applicationContext));
         } catch (Exception e) {
-            // if spring version is less then 4.2, it does not support early application event
+            // if spring version is less than 4.2, it does not support early application event
             logger.warn("publish early application event failed, please upgrade spring version to 4.2.x or later: " + e);
         }
     }
@@ -358,7 +358,7 @@ protected void prepareInjection(AnnotatedInjectionMetadata metadata) throws Bean
                 AnnotationAttributes attributes = methodElement.attributes;
                 String referenceBeanName = registerReferenceBean(methodElement.getPropertyName(), injectedType, attributes, methodElement.method);
 
-                //associate fieldElement and reference bean
+                //associate methodElement and reference bean
                 methodElement.injectedObject = referenceBeanName;
                 injectedMethodReferenceBeanCache.put(methodElement, referenceBeanName);
             }
@@ -495,7 +495,7 @@ public String registerReferenceBean(String propertyName, Class<?> injectedType,
 
         beanDefinitionRegistry.registerBeanDefinition(referenceBeanName, beanDefinition);
         referenceBeanManager.registerReferenceKeyAndBeanName(referenceKey, referenceBeanName);
-        logger.info("Register dubbo reference bean: "+referenceBeanName+" = "+referenceKey+" at "+member);
+        logger.info("Register dubbo reference bean: " + referenceBeanName + " = " + referenceKey + " at " + member);
         return referenceBeanName;
     }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationPostProcessor.java
Patch:
@@ -245,7 +245,7 @@ private void scanServiceBeans(Set<String> packagesToScan, BeanDefinitionRegistry
     }
 
     /**
-     * It'd better to use BeanNameGenerator instance that should reference
+     * It'd be better to use BeanNameGenerator instance that should reference
      * {@link ConfigurationClassPostProcessor#componentScanBeanNameGenerator},
      * thus it maybe a potential problem on bean name generation.
      *

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/config/DubboConfigDefaultPropertyValueBeanPostProcessor.java
Patch:
@@ -91,7 +91,7 @@ protected void setPropertyIfAbsent(Object bean, String propertyName, String bean
             Method setterMethod = propertyDescriptor.getWriteMethod();
             if (setterMethod != null) { // the getter and setter methods are present
                 if (Arrays.equals(of(String.class), setterMethod.getParameterTypes())) { // the param type is String
-                    // set bean name to the value of the the property
+                    // set bean name to the value of the property
                     invokeMethod(setterMethod, bean, beanName);
                 }
             }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboConfigApplicationListener.java
Patch:
@@ -51,7 +51,7 @@ public void setApplicationContext(ApplicationContext applicationContext) throws
     @Override
     public void onApplicationEvent(DubboConfigInitEvent event) {
         if (nullSafeEquals(applicationContext, event.getSource())) {
-            // It's expected to be notify at org.springframework.context.support.AbstractApplicationContext.registerListeners(),
+            // It's expected to be notified at org.springframework.context.support.AbstractApplicationContext.registerListeners(),
             // before loading non-lazy singleton beans. At this moment, all BeanFactoryPostProcessor have been processed,
             if (initialized.compareAndSet(false, true)) {
                 initDubboConfigBeans();

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboSpringInitializer.java
Patch:
@@ -148,7 +148,7 @@ private static String safeGetModelDesc(ScopeModel scopeModel) {
     }
 
     private static ConfigurableListableBeanFactory findBeanFactory(BeanDefinitionRegistry registry) {
-        ConfigurableListableBeanFactory beanFactory = null;
+        ConfigurableListableBeanFactory beanFactory;
         if (registry instanceof ConfigurableListableBeanFactory) {
             beanFactory = (ConfigurableListableBeanFactory) registry;
         } else if (registry instanceof GenericApplicationContext) {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/reference/ReferenceBeanSupport.java
Patch:
@@ -90,7 +90,7 @@ public static void convertReferenceProps(Map<String, Object> attributes, Class d
         // String[] registry => String registryIds
         String[] registryIds = (String[]) attributes.get(ReferenceAttributes.REGISTRY);
         if (registryIds != null) {
-            String value = join((String[]) registryIds, ",");
+            String value = join(registryIds, ",");
             attributes.remove(ReferenceAttributes.REGISTRY);
             attributes.put(ReferenceAttributes.REGISTRY_IDS, value);
         }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/DubboAnnotationUtils.java
Patch:
@@ -77,7 +77,6 @@ public static String resolveInterfaceName(Service service, Class<?> defaultInter
      * @throws IllegalStateException if interface name was not found
      */
     public static String resolveInterfaceName(Map<String, Object> attributes, Class<?> defaultInterfaceClass) {
-        Boolean generic = getAttribute(attributes, "generic");
         // 1. get from DubboService.interfaceName()
         String interfaceClassName = getAttribute(attributes, "interfaceName");
         if (StringUtils.hasText(interfaceClassName)) {
@@ -134,8 +133,8 @@ public static String resolveInterfaceName(Reference reference, Class<?> defaultI
     /**
      * Resolve the parameters of {@link org.apache.dubbo.config.annotation.DubboService}
      * and {@link org.apache.dubbo.config.annotation.DubboReference} from the specified.
-     * It iterate elements in order.The former element plays as key or key&value role, it would be
-     * spilt if it contain specific string, for instance, ":" and "=". As for later element can't
+     * It iterates elements in order.The former element plays as key or key&value role, it would be
+     * spilt if it contains specific string, for instance, ":" and "=". As for later element can't
      * be split in anytime.It will throw IllegalArgumentException If converted array length isn't
      * even number.
      * The convert cases below work in right way,which are best practice.

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/DubboBeanUtils.java
Patch:
@@ -53,7 +53,7 @@
  */
 public interface DubboBeanUtils {
 
-    static final Log log = LogFactory.getLog(DubboBeanUtils.class);
+    Log log = LogFactory.getLog(DubboBeanUtils.class);
 
     /**
      * Register the common beans

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/MethodConfigCallbackTest.java
Patch:
@@ -68,15 +68,15 @@ public static void afterAll() {
     private ConfigurableApplicationContext context;
 
     @DubboReference(check = false, async = true,
-        injvm = false, // Currently local call is not supported method callback cause by Injvm protocol is not supported ClusterFilter
+        injvm = false, // Currently, local call is not supported method callback cause by Injvm protocol is not supported ClusterFilter
         methods = {@Method(name = "sayHello",
         oninvoke = "methodCallback.oninvoke1",
         onreturn = "methodCallback.onreturn1",
         onthrow = "methodCallback.onthrow1")})
     private HelloService helloServiceMethodCallBack;
 
     @DubboReference(check = false, async = true,
-            injvm = false, // Currently local call is not supported method callback cause by Injvm protocol is not supported ClusterFilter
+            injvm = false, // Currently, local call is not supported method callback cause by Injvm protocol is not supported ClusterFilter
             methods = {@Method(name = "sayHello",
             oninvoke = "methodCallback.oninvoke2",
             onreturn = "methodCallback.onreturn2",

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceBeanNameBuilderTest.java
Patch:
@@ -62,9 +62,6 @@ public void testServiceAnnotation() {
         ServiceBeanNameBuilder builder = ServiceBeanNameBuilder.create(service, INTERFACE_CLASS, environment);
         Assertions.assertEquals("ServiceBean:org.apache.dubbo.config.spring.api.DemoService:1.0.0:DUBBO",
                 builder.build());
-
-        Assertions.assertEquals("ServiceBean:org.apache.dubbo.config.spring.api.DemoService:1.0.0:DUBBO",
-                builder.build());
     }
 
     @Test

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/AbstractServiceNameMapping.java
Patch:
@@ -155,6 +155,7 @@ public MappingListener stopListen(URL subscribeURL, MappingListener listener) {
                 removeListener(subscribeURL, listener);
             }
             if (CollectionUtils.isEmpty(listeners)) {
+                mappingListeners.remove(mappingKey);
                 removeCachedMapping(mappingKey);
                 removeMappingLock(mappingKey);
             }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/AbstractServiceDiscovery.java
Patch:
@@ -131,6 +131,9 @@ public synchronized void update() throws RuntimeException {
     public synchronized void unregister() throws RuntimeException {
         // fixme, this metadata info might still being shared by other instances
 //        unReportMetadata(this.metadataInfo);
+        if (!isValidInstance(this.serviceInstance)) {
+            return;
+        }
         doUnregister(this.serviceInstance);
     }
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryTest.java
Patch:
@@ -251,7 +251,6 @@ public void testUnsubscribe() {
         when(mapping.getCachedMapping(url2)).thenReturn(multiApps);
         serviceDiscoveryRegistry.doUnsubscribe(url2, testServiceListener2);
         assertEquals(1, serviceDiscoveryRegistry.getServiceListeners().size());
-        assertEquals(1, serviceDiscoveryRegistry.getServiceListeners().size());
         ServiceInstancesChangedListener instancesChangedListener = serviceDiscoveryRegistry.getServiceListeners().entrySet().iterator().next().getValue();
         assertTrue(instancesChangedListener.hasListeners());
         when(mapping.getCachedMapping(url)).thenReturn(multiApps);

File: dubbo-common/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Map;
 
 import static org.apache.dubbo.common.constants.CommonConstants.CYCLE_REPORT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.REPORT_DEFINITION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.REPORT_METADATA_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.RETRY_PERIOD_KEY;
@@ -152,7 +153,7 @@ public URL toUrl() throws IllegalArgumentException {
         // Normalize the parameters
         map.putAll(convert(map, null));
         // put the protocol of URL as the "metadata"
-        map.put("metadata", url.getProtocol());
+        map.put("metadata", isEmpty(url.getProtocol()) ? map.get(PROTOCOL_KEY) : url.getProtocol());
         return new ServiceConfigURL("metadata", url.getUsername(), url.getPassword(), url.getHost(),
                 url.getPort(), url.getPath(), map).setScopeModel(getScopeModel());
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MetadataReportConfigTest.java
Patch:
@@ -31,7 +31,7 @@ public void testFile() {
         metadataReportConfig.setFile("file");
         assertThat(metadataReportConfig.getFile(), equalTo("file"));
 
-        metadataReportConfig.setAddress("127.0.0.1:2181");
+        metadataReportConfig.setAddress("file://dir-to-file");
         URL url = metadataReportConfig.toUrl();
         assertThat(url.getParameter("file"), equalTo("file"));
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/RegistryConstants.java
Patch:
@@ -126,4 +126,6 @@ public interface RegistryConstants {
     float DEFAULT_HASHMAP_LOAD_FACTOR = 0.75f;
 
     String ENABLE_EMPTY_PROTECTION_KEY = "enable-empty-protection";
+    String REGISTER_CONSUMER_URL_KEY = "register-consumer-url";
+
 }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -165,6 +165,9 @@ public class ApplicationConfig extends AbstractConfig {
      */
     private String metadataType;
 
+    /**
+     * Used to control whether register instance to registry or not. Set to 'false' only when instance is pure consumer.
+     */
     private Boolean registerConsumer;
 
     private String repository;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataConstants.java
Patch:
@@ -27,4 +27,5 @@ public class MetadataConstants {
     public static final int DEFAULT_METADATA_PUBLISH_DELAY = 30000;
     public static final String METADATA_PROXY_TIMEOUT_KEY = "dubbo.application.metadata.proxy.delay";
     public static final int DEFAULT_METADATA_TIMEOUT_VALUE = 5000;
+    public static String REPORT_CONSUMER_URL_KEY = "report-consumer-definition";
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMapping.java
Patch:
@@ -58,11 +58,12 @@ public MetadataServiceNameMapping(ApplicationModel applicationModel) {
     @Override
     public boolean map(URL url) {
         if (CollectionUtils.isEmpty(applicationModel.getApplicationConfigManager().getMetadataConfigs())) {
+            logger.warn("No valid metadata config center found for mapping report.");
             return false;
         }
         String serviceInterface = url.getServiceInterface();
         if (IGNORED_SERVICE_INTERFACES.contains(serviceInterface)) {
-            return false;
+            return true;
         }
 
         boolean result = true;

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -1120,7 +1120,7 @@ public URL addParameters(String... pairs) {
             return this;
         }
         if (pairs.length % 2 != 0) {
-            throw new IllegalArgumentException("Map pairs can not be odd numrer.");
+            throw new IllegalArgumentException("Map pairs can not be odd number.");
         }
         Map<String, String> map = new HashMap<>();
         int len = pairs.length / 2;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -169,7 +169,8 @@ public AbstractDirectory(URL url, RouterChain<T> routerChain, boolean isUrlFromR
             this.consumerUrl = consumerUrlFrom.addParameters(queryMap);
         }
 
-        this.connectivityExecutor = applicationModel.getExtensionLoader(ExecutorRepository.class).getDefaultExtension().getConnectivityScheduledExecutor();
+        this.connectivityExecutor = applicationModel.getFrameworkModel().getBeanFactory()
+            .getBean(FrameworkExecutorRepository.class).getConnectivityScheduledExecutor();
         Configuration configuration = ConfigurationUtils.getGlobalConfiguration(url.getOrDefaultModuleModel());
         this.reconnectTaskTryCount = configuration.getInt(RECONNECT_TASK_TRY_COUNT, DEFAULT_RECONNECT_TASK_TRY_COUNT);
         this.reconnectTaskPeriod = configuration.getInt(RECONNECT_TASK_PERIOD, DEFAULT_RECONNECT_TASK_PERIOD);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/ShortestResponseLoadBalance.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.cluster.loadbalance;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcStatus;
@@ -57,7 +58,8 @@ public class ShortestResponseLoadBalance extends AbstractLoadBalance implements
     @Override
     public void setApplicationModel(ApplicationModel applicationModel) {
         slidePeriod = applicationModel.getModelEnvironment().getConfiguration().getInt(Constants.SHORTEST_RESPONSE_SLIDE_PERIOD, 30_000);
-        executorService = applicationModel.getApplicationExecutorRepository().getSharedExecutor();
+        executorService = applicationModel.getFrameworkModel().getBeanFactory()
+            .getBean(FrameworkExecutorRepository.class).getSharedExecutor();
     }
 
     protected static class SlideWindowData {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvoker.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory;
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
@@ -56,7 +57,8 @@ public class ForkingClusterInvoker<T> extends AbstractClusterInvoker<T> {
 
     public ForkingClusterInvoker(Directory<T> directory) {
         super(directory);
-        executor = directory.getUrl().getOrDefaultApplicationModel().getApplicationExecutorRepository().getSharedExecutor();
+        executor = directory.getUrl().getOrDefaultFrameworkModel().getBeanFactory()
+            .getBean(FrameworkExecutorRepository.class).getSharedExecutor();
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/common/CommonScopeModelInitializer.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.config.ConfigurationCache;
 import org.apache.dubbo.common.lang.ShutdownHookCallbacks;
 import org.apache.dubbo.common.status.reporter.FrameworkStatusReportService;
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
@@ -28,7 +29,8 @@
 public class CommonScopeModelInitializer implements ScopeModelInitializer {
     @Override
     public void initializeFrameworkModel(FrameworkModel frameworkModel) {
-
+        ScopeBeanFactory beanFactory = frameworkModel.getBeanFactory();
+        beanFactory.registerBean(FrameworkExecutorRepository.class);
     }
 
     @Override

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/MultiInstanceTest.java
Patch:
@@ -368,7 +368,7 @@ public void testMultiProviderApplicationsStopOneByOne() {
             // TODO Remove ignore thread prefix of NettyServerBoss if supporting close protocol server only used by one application
             // see org.apache.dubbo.config.deploy.DefaultApplicationDeployer.postDestroy
             // NettyServer will close when all applications are shutdown, but not close if any application of the framework is alive, just ignore it currently
-            checkUnclosedThreadsOfApp(stackTraces1, "Found unclosed threads of app 1: ", new String[]{EVENT_LOOP_BOSS_POOL_NAME, "Dubbo-global-shared-handler"});
+            checkUnclosedThreadsOfApp(stackTraces1, "Found unclosed threads of app 1: ", new String[]{EVENT_LOOP_BOSS_POOL_NAME, "Dubbo-global-shared-handler", "Dubbo-framework"});
 
 
             // stop provider app 2 and check threads

File: dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/DubboMonitor.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.ExecutorUtil;
 import org.apache.dubbo.monitor.Monitor;
 import org.apache.dubbo.monitor.MonitorService;
@@ -74,7 +75,8 @@ public class DubboMonitor implements Monitor {
     public DubboMonitor(Invoker<MonitorService> monitorInvoker, MonitorService monitorService) {
         this.monitorInvoker = monitorInvoker;
         this.monitorService = monitorService;
-        scheduledExecutorService = monitorInvoker.getUrl().getOrDefaultApplicationModel().getApplicationExecutorRepository().getSharedScheduledExecutor();
+        scheduledExecutorService = monitorInvoker.getUrl().getOrDefaultFrameworkModel().getBeanFactory()
+            .getBean(FrameworkExecutorRepository.class).getSharedScheduledExecutor();
         // The time interval for timer <b>scheduledExecutorService</b> to send data
         final long monitorInterval = monitorInvoker.getUrl().getPositiveParameter(MONITOR_SEND_DATA_INTERVAL_KEY, DEFAULT_MONITOR_SEND_DATA_INTERVAL);
         // collect timer for collecting statistics data

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/PublishMetadata.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.ArrayUtils;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
@@ -56,8 +56,8 @@ public String execute(CommandContext commandContext, String[] args) {
             } else {
                 try {
                     int delay = Integer.parseInt(args[0]);
-                    ExecutorRepository executorRepository = applicationModel.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();
-                    executorRepository.nextScheduledExecutor()
+                    FrameworkExecutorRepository frameworkExecutorRepository = applicationModel.getFrameworkModel().getBeanFactory().getBean(FrameworkExecutorRepository.class);
+                    frameworkExecutorRepository.nextScheduledExecutor()
                         .schedule(() -> ServiceInstanceMetadataUtils.refreshMetadataAndInstance(applicationModel), delay, TimeUnit.SECONDS);
                 } catch (NumberFormatException e) {
                     logger.error("Wrong delay param", e);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
@@ -51,8 +51,8 @@ public RegistryNotifier(URL registryUrl, long delayTime) {
     public RegistryNotifier(URL registryUrl, long delayTime, ScheduledExecutorService scheduler) {
         this.delayTime = delayTime;
         if (scheduler == null) {
-            this.scheduler = registryUrl.getOrDefaultApplicationModel().getExtensionLoader(ExecutorRepository.class)
-                    .getDefaultExtension().getRegistryNotificationExecutor();
+            this.scheduler = registryUrl.getOrDefaultFrameworkModel().getBeanFactory()
+                .getBean(FrameworkExecutorRepository.class).getRegistryNotificationExecutor();
         } else {
             this.scheduler = scheduler;
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleListener.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -110,7 +111,8 @@ private void init() {
 
         String localRawRule = moduleModel.getModelEnvironment().getLocalMigrationRule();
         if (!StringUtils.isEmpty(localRawRule)) {
-            localRuleMigrationFuture = moduleModel.getApplicationModel().getApplicationExecutorRepository().getSharedScheduledExecutor()
+            localRuleMigrationFuture = moduleModel.getApplicationModel().getFrameworkModel().getBeanFactory()
+                .getBean(FrameworkExecutorRepository.class).getSharedScheduledExecutor()
                 .schedule(() -> {
                     if (this.rawRule.equals(INIT)) {
                         this.process(new ConfigChangedEvent(null, null, localRawRule));

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
 import org.apache.dubbo.common.utils.ConfigUtils;
@@ -103,7 +103,8 @@ public AbstractRegistry(URL url) {
         setUrl(url);
         registryManager = url.getOrDefaultApplicationModel().getBeanFactory().getBean(RegistryManager.class);
         localCacheEnabled = url.getParameter(REGISTRY_LOCAL_FILE_CACHE_ENABLED, true);
-        registryCacheExecutor = url.getOrDefaultApplicationModel().getDefaultExtension(ExecutorRepository.class).getSharedExecutor();
+        registryCacheExecutor = url.getOrDefaultFrameworkModel().getBeanFactory()
+            .getBean(FrameworkExecutorRepository.class).getSharedExecutor();
         if (localCacheEnabled) {
             // Start file save timer
             syncSaveFile = url.getParameter(REGISTRY_FILESAVE_SYNC_KEY, false);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/CacheableFailbackRegistry.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.url.component.DubboServiceAddressURL;
 import org.apache.dubbo.common.url.component.ServiceAddressURL;
 import org.apache.dubbo.common.url.component.URLAddress;
@@ -84,7 +84,7 @@ public CacheableFailbackRegistry(URL url) {
         extraParameters = new HashMap<>(8);
         extraParameters.put(CHECK_KEY, String.valueOf(false));
 
-        cacheRemovalScheduler = url.getOrDefaultApplicationModel().getExtensionLoader(ExecutorRepository.class).getDefaultExtension().nextScheduledExecutor();
+        cacheRemovalScheduler = url.getOrDefaultFrameworkModel().getBeanFactory().getBean(FrameworkExecutorRepository.class).nextScheduledExecutor();
         cacheRemovalTaskIntervalInMillis = getIntConfig(url.getScopeModel(), CACHE_CLEAR_TASK_INTERVAL, 2 * 60 * 1000);
         cacheClearWaitingThresholdInMillis = getIntConfig(url.getScopeModel(), CACHE_CLEAR_WAITING_THRESHOLD, 5 * 60 * 1000);
     }

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListenerTest.java
Patch:
@@ -401,7 +401,7 @@ public void testRevisionFailureOnNotification() {
         when(serviceDiscovery.getRemoteMetadata(eq("222"), anyList())).thenAnswer(new Answer<MetadataInfo>() {
             @Override
             public MetadataInfo answer(InvocationOnMock invocationOnMock) throws Throwable {
-                if (Thread.currentThread().getName().contains("Dubbo-metadata-retry")) {
+                if (Thread.currentThread().getName().contains("Dubbo-framework-metadata-retry")) {
                     return metadataInfo_222;
                 }
                 return MetadataInfo.EMPTY;

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryChangeWatcher.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.zookeeper;
 
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
 import org.apache.dubbo.registry.RegistryNotifier;
 import org.apache.dubbo.registry.client.ServiceDiscovery;
@@ -66,7 +67,8 @@ public ZookeeperServiceDiscoveryChangeWatcher(ZookeeperServiceDiscovery zookeepe
         this.path = path;
         this.latch = latch;
         this.notifier = new RegistryNotifier(zookeeperServiceDiscovery.getUrl(), zookeeperServiceDiscovery.getDelay(),
-            ScopeModelUtil.getApplicationModel(zookeeperServiceDiscovery.getUrl().getScopeModel()).getApplicationExecutorRepository().getServiceDiscoveryAddressNotificationExecutor()) {
+            ScopeModelUtil.getFrameworkModel(zookeeperServiceDiscovery.getUrl().getScopeModel()).getBeanFactory()
+                .getBean(FrameworkExecutorRepository.class).getServiceDiscoveryAddressNotificationExecutor()) {
             @Override
             protected void doNotify(Object rawAddresses) {
                 listeners.forEach(listener -> listener.onEvent((ServiceInstancesChangedEvent) rawAddresses));

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
 import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.rpc.Filter;
@@ -96,7 +97,8 @@ public AccessLogFilter() {
     @Override
     public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {
         if (scheduled.compareAndSet(false, true)) {
-            inv.getModuleModel().getApplicationModel().getApplicationExecutorRepository().getSharedScheduledExecutor()
+            inv.getModuleModel().getApplicationModel().getFrameworkModel().getBeanFactory()
+                .getBean(FrameworkExecutorRepository.class).getSharedScheduledExecutor()
                 .scheduleWithFixedDelay(this::writeLogToFile, LOG_OUTPUT_INTERVAL, LOG_OUTPUT_INTERVAL, TimeUnit.MILLISECONDS);
         }
         try {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcInvocation.java
Patch:
@@ -30,6 +30,7 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
@@ -76,7 +77,7 @@ public class RpcInvocation implements Invocation, Serializable {
     /**
      * Only used on the caller side, will not appear on the wire.
      */
-    private transient Map<Object, Object> attributes = new HashMap<Object, Object>();
+    private transient Map<Object, Object> attributes = Collections.synchronizedMap(new HashMap<>());
 
     private transient Invoker<?> invoker;
 
@@ -182,7 +183,7 @@ public RpcInvocation(String targetServiceUniqueName, ServiceModel serviceModel,
         this.parameterTypes = parameterTypes == null ? new Class<?>[0] : parameterTypes;
         this.arguments = arguments == null ? new Object[0] : arguments;
         this.attachments = attachments == null ? new HashMap<>() : attachments;
-        this.attributes = attributes == null ? new HashMap<>() : attributes;
+        this.attributes = attributes == null ? Collections.synchronizedMap(new HashMap<>()) : attributes;
         this.invoker = invoker;
         initParameterDesc();
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Constants.java
Patch:
@@ -26,8 +26,6 @@ public interface Constants {
 
     String WEIGHT_KEY = "weight";
 
-    String REGISTRY_WEIGHT_KEY = "registry.weight";
-
     int DEFAULT_WEIGHT = 100;
 
     String MOCK_PROTOCOL = "mock";

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Constants.java
Patch:
@@ -26,6 +26,8 @@ public interface Constants {
 
     String WEIGHT_KEY = "weight";
 
+    String REGISTRY_WEIGHT_KEY = "registry.weight";
+
     int DEFAULT_WEIGHT = 100;
 
     String MOCK_PROTOCOL = "mock";

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -447,9 +447,8 @@ private boolean supportsExtension(Class<?> extensionClass, String name) {
     private MetadataReportConfig registryAsMetadataCenter(RegistryConfig registryConfig) {
         String protocol = registryConfig.getProtocol();
         URL url = URL.valueOf(registryConfig.getAddress(), registryConfig.getScopeModel());
-        String id = "metadata-center-" + protocol + "-" + url.getHost() + "-" + url.getPort();
         MetadataReportConfig metadataReportConfig = new MetadataReportConfig();
-        metadataReportConfig.setId(id);
+        metadataReportConfig.setId(registryConfig.getId());
         metadataReportConfig.setScopeModel(applicationModel);
         if (metadataReportConfig.getParameters() == null) {
             metadataReportConfig.setParameters(new HashMap<>());

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java
Patch:
@@ -110,7 +110,7 @@ public JdkCompiler(String javaVersion) {
     }
 
     @Override
-    public Class<?> doCompile(Class<?> neighbor, ClassLoader ignored, String name, String sourceCode) throws Throwable {
+    public Class<?> doCompile(ClassLoader ignored, String name, String sourceCode) throws Throwable {
         int i = name.lastIndexOf('.');
         String packageName = i < 0 ? "" : name.substring(0, i);
         String className = i < 0 ? name : name.substring(i + 1);

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/probe/impl/DeployerReadinessProbe.java
Patch:
@@ -37,7 +37,7 @@ public boolean check() {
         if (this.frameworkModel == null) {
             this.frameworkModel = FrameworkModel.defaultModel();
         }
-        List<ApplicationModel> applicationModels = frameworkModel.getAllApplicationModels();
+        List<ApplicationModel> applicationModels = frameworkModel.getApplicationModels();
         for (ApplicationModel applicationModel : applicationModels) {
             for (ModuleModel moduleModel : applicationModel.getModuleModels()) {
                 if (!moduleModel.getDeployer().isStarted()) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/probe/impl/DeployerStartupProbe.java
Patch:
@@ -37,7 +37,7 @@ public boolean check() {
         if (this.frameworkModel == null) {
             this.frameworkModel = FrameworkModel.defaultModel();
         }
-        List<ApplicationModel> applicationModels = frameworkModel.getAllApplicationModels();
+        List<ApplicationModel> applicationModels = frameworkModel.getApplicationModels();
         for (ApplicationModel applicationModel : applicationModels) {
             for (ModuleModel moduleModel : applicationModel.getModuleModels()) {
                 if (moduleModel.getDeployer().isRunning()) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java
Patch:
@@ -171,7 +171,7 @@ public static Object compatibleTypeConvert(Object value, Class<?> type) {
                 return BigInteger.valueOf(number.longValue());
             }
             if (type == BigDecimal.class) {
-                return BigDecimal.valueOf(number.doubleValue());
+                return new BigDecimal(number.toString());
             }
             if (type == Date.class) {
                 return new Date(number.longValue());

File: dubbo-native-plugin/src/main/java/org/apache/dubbo/maven/plugin/DubboNativeCodeGeneratorMojo.java
Patch:
@@ -50,7 +50,7 @@ public void execute() {
 
     private void generateCode(Log log, MavenProject project) throws IOException {
         String baseDir = project.getBasedir().getPath();
-        File source = new File(baseDir + "/src/main/generated");
+        File source = new File(baseDir + File.separator + "src" + File.separator + "main" + File.separator + "generated");
         FileUtils.forceMkdir(source);
         project.addCompileSourceRoot(source.getAbsolutePath());
         log.info("Source directory: " + source + " added.");
@@ -71,8 +71,8 @@ private void copyNativeConfigFile(Log log, MavenProject project) {
             project.getResources().stream().findFirst().ifPresent(resource -> {
                 String directory = resource.getDirectory();
                 try {
-                    FileUtils.forceMkdir(new File(directory + "/META-INF/native-image/"));
-                    File file = new File(directory + "/" + nativeFile);
+                    FileUtils.forceMkdir(new File(directory + File.separator + "META-INF" + File.separator + "native-image" + File.separator));
+                    File file = new File(directory + File.separator + nativeFile);
                     if (!file.exists()) {
                         FileUtils.copyInputStreamToFile(is, file);
                         log.info("Copy native config file:" + file);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyFactory.java
Patch:
@@ -55,13 +55,13 @@ public <T> T getProxy(Invoker<T> invoker) throws RpcException {
     public <T> T getProxy(Invoker<T> invoker, boolean generic) throws RpcException {
         // when compiling with native image, ensure that the order of the interfaces remains unchanged
         LinkedHashSet<Class<?>> interfaces = new LinkedHashSet<>();
+        ClassLoader classLoader = getClassLoader(invoker);
 
         String config = invoker.getUrl().getParameter(INTERFACES);
         if (StringUtils.isNotEmpty(config)) {
             String[] types = COMMA_SPLIT_PATTERN.split(config);
             for (String type : types) {
                 try {
-                    ClassLoader classLoader = getClassLoader(invoker);
                     interfaces.add(ReflectUtils.forName(classLoader, type));
                 } catch (Throwable e) {
                     // ignore
@@ -75,7 +75,6 @@ public <T> T getProxy(Invoker<T> invoker, boolean generic) throws RpcException {
             try {
                 // find the real interface from url
                 String realInterface = invoker.getUrl().getParameter(Constants.INTERFACE);
-                ClassLoader classLoader = getClassLoader(invoker);
                 realInterfaceClass = ReflectUtils.forName(classLoader, realInterface);
                 interfaces.add(realInterfaceClass);
             } catch (Throwable e) {
@@ -110,7 +109,7 @@ public <T> T getProxy(Invoker<T> invoker, boolean generic) throws RpcException {
     private <T> ClassLoader getClassLoader(Invoker<T> invoker) {
         ServiceModel serviceModel = invoker.getUrl().getServiceModel();
         ClassLoader classLoader = null;
-        if (serviceModel != null) {
+        if (serviceModel != null && serviceModel.getConfig() != null) {
             classLoader = serviceModel.getConfig().getInterfaceClassLoader();
         }
         if (classLoader == null) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/javassist/JavassistProxyFactory.java
Patch:
@@ -75,14 +75,14 @@ protected Object doInvoke(T proxy, String methodName,
             // try fall back to JDK proxy factory
             try {
                 Invoker<T> invoker = jdkProxyFactory.getInvoker(proxy, type, url);
-                logger.error("Failed to generate proxy by Javassist failed. Fallback to use JDK proxy success. " +
+                logger.error("Failed to generate invoker by Javassist failed. Fallback to use JDK proxy success. " +
                     "Interfaces: " + type, fromJavassist);
                 // log out error
                 return invoker;
             } catch (Throwable fromJdk) {
-                logger.error("Failed to generate proxy by Javassist failed. Fallback to use JDK proxy is also failed. " +
+                logger.error("Failed to generate invoker by Javassist failed. Fallback to use JDK proxy is also failed. " +
                     "Interfaces: " + type + " Javassist Error.", fromJavassist);
-                logger.error("Failed to generate proxy by Javassist failed. Fallback to use JDK proxy is also failed. " +
+                logger.error("Failed to generate invoker by Javassist failed. Fallback to use JDK proxy is also failed. " +
                     "Interfaces: " + type + " JDK Error.", fromJdk);
                 throw fromJavassist;
             }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -343,7 +343,7 @@ private void openServer(URL url) {
 
     private void checkDestroyed() {
         if (destroyed.get()) {
-            throw new IllegalStateException( getClass().getSimpleName() + " is destroyed");
+            throw new IllegalStateException(getClass().getSimpleName() + " is destroyed");
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ProviderModel.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 /**
  * ProviderModel is about published services
@@ -44,7 +45,7 @@ public ProviderModel(String serviceKey,
             throw new IllegalArgumentException("Service[" + serviceKey + "]Target is NULL.");
         }
 
-        this.urls = new ArrayList<>(1);
+        this.urls = new CopyOnWriteArrayList<>();
     }
 
     public ProviderModel(String serviceKey,

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfiguration.java
Patch:
@@ -138,7 +138,7 @@ protected void doAddListener(String pathKey, ConfigurationListener listener) {
     protected void doRemoveListener(String pathKey, ConfigurationListener listener) {
         cacheListener.removeListener(pathKey, listener);
         Set<ConfigurationListener> configurationListeners = cacheListener.getConfigurationListeners(pathKey);
-        if (CollectionUtils.isNotEmpty(configurationListeners)) {
+        if (CollectionUtils.isEmpty(configurationListeners)) {
             zkClient.removeDataListener(pathKey, cacheListener);
         }
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/DefaultFuture2.java
Patch:
@@ -62,9 +62,9 @@ public class DefaultFuture2 extends CompletableFuture<Object> {
     private final Connection connection;
     private final int timeout;
     private final long start = System.currentTimeMillis();
-    private final List<Runnable> timeoutListeners = new ArrayList<>();    private static final GlobalResourceInitializer<Timer> TIME_OUT_TIMER = new GlobalResourceInitializer<>(() -> new HashedWheelTimer(new NamedThreadFactory("dubbo-future-timeout", true), 30, TimeUnit.MILLISECONDS), DefaultFuture2::destroy);
+    private final List<Runnable> timeoutListeners = new ArrayList<>();
     private Timeout timeoutCheckTask;
-    private volatile long sent;
+    private volatile long sent;    private static final GlobalResourceInitializer<Timer> TIME_OUT_TIMER = new GlobalResourceInitializer<>(() -> new HashedWheelTimer(new NamedThreadFactory("dubbo-future-timeout", true), 30, TimeUnit.MILLISECONDS), DefaultFuture2::destroy);
     private ExecutorService executor;
     private DefaultFuture2(Connection connection, Invocation invocation, int timeout) {
         this.connection = connection;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/ServerStream.java
Patch:
@@ -80,7 +80,7 @@ public ServerStream(Channel channel,
                         PathResolver pathResolver,
                         List<HeaderFilter> filters,
                         GenericUnpack genericUnpack) {
-        super(executor,frameworkModel);
+        super(executor, frameworkModel);
         this.eventLoop = channel.eventLoop();
         this.pathResolver = pathResolver;
         this.filters = filters;

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/frame/TriDecoderTest.java
Patch:
@@ -51,4 +51,4 @@ public void decode() {
         decoder.close();
     }
 
-}
\ No newline at end of file
+}

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/stream/ClientStreamTest.java
Patch:
@@ -109,4 +109,4 @@ public void progress() throws InterruptedException {
         buf.release();
         Assertions.assertEquals(1, listener.message.length);
     }
-}
\ No newline at end of file
+}

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/transport/AbstractH2TransportListenerTest.java
Patch:
@@ -62,4 +62,4 @@ public void cancelByRemote(RpcStatus status) {
     @Test
     void filterReservedHeaders() {
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/support/ConsumerContextFilter.java
Patch:
@@ -62,6 +62,7 @@ public ConsumerContextFilter(ApplicationModel applicationModel) {
     @Override
     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
         RpcContext.getServiceContext()
+                .setInvoker(invoker)
                 .setInvocation(invocation)
                 .setLocalAddress(NetUtils.getLocalHost(), 0);
 

File: dubbo-remoting/dubbo-remoting-zookeeper-curator5/src/main/java/org/apache/dubbo/remoting/zookeeper/curator5/Curator5ZookeeperTransporter.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.remoting.zookeeper.curator;
+package org.apache.dubbo.remoting.zookeeper.curator5;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter;

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -240,9 +240,7 @@ public void setInterface(Class<?> interfaceClass) {
         }
         setInterface(interfaceClass == null ? null : interfaceClass.getName());
         this.interfaceClass = interfaceClass;
-        if (getInterfaceClassLoader() == null) {
-            setInterfaceClassLoader(interfaceClass == null ? null : interfaceClass.getClassLoader());
-        }
+        setInterfaceClassLoader(interfaceClass == null ? null : interfaceClass.getClassLoader());
     }
 
     public String getClient() {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyInvoker.java
Patch:
@@ -141,7 +141,7 @@ private CompletableFuture<Object> wrapWithFuture(Object value, Invocation invoca
             return (CompletableFuture<Object>) value;
         } else if (RpcContext.getServerAttachment().isAsyncStarted()) {
             invocation.put(PROVIDER_ASYNC_KEY, Boolean.TRUE);
-            return ((AsyncContextImpl) (RpcContext.getServiceContext().getAsyncContext())).getInternalFuture();
+            return ((AsyncContextImpl) (RpcContext.getServerAttachment().getAsyncContext())).getInternalFuture();
         }
         return CompletableFuture.completedFuture(value);
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/stream/StreamObserver.java
Patch:
@@ -24,6 +24,8 @@
  * @param <T> type of message
  */
 public interface StreamObserver<T> {
+
+
     /**
      * onNext
      *

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ClassLoadUtil.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dubbo.rpc.protocol.tri;
 
 public class ClassLoadUtil {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/PathResolver.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dubbo.rpc.protocol.tri;
 
 import org.apache.dubbo.common.constants.CommonConstants;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/SingleProtobufUtils.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dubbo.rpc.protocol.tri;
 
 import com.google.protobuf.BoolValue;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHeaderEnum.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dubbo.rpc.protocol.tri;
 
 import org.apache.dubbo.common.constants.CommonConstants;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TriplePathResolver.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dubbo.rpc.protocol.tri;
 
 import org.apache.dubbo.common.logger.Logger;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/command/FlushQueueCommand.java
Patch:
@@ -20,7 +20,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelPromise;
 
-public class FlushQueueCommand extends QueuedCommand.AbstractQueuedCommand {
+public class FlushQueueCommand extends QueuedCommand {
 
     @Override
     public void doSend(ChannelHandlerContext ctx, ChannelPromise promise) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/command/TextDataQueueCommand.java
Patch:
@@ -23,7 +23,7 @@
 import io.netty.channel.ChannelPromise;
 import io.netty.handler.codec.http2.DefaultHttp2DataFrame;
 
-public class TextDataQueueCommand extends QueuedCommand.AbstractQueuedCommand {
+public class TextDataQueueCommand extends QueuedCommand {
 
     private final String data;
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/transport/GracefulShutdown.java
Patch:
@@ -14,7 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.rpc.protocol.tri;
+
+package org.apache.dubbo.rpc.protocol.tri.transport;
 
 import io.netty.buffer.ByteBufUtil;
 import io.netty.channel.ChannelHandlerContext;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/transport/TripleClientHandler.java
Patch:
@@ -14,7 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.rpc.protocol.tri;
+
+package org.apache.dubbo.rpc.protocol.tri.transport;
 
 import org.apache.dubbo.remoting.api.ConnectionHandler;
 import org.apache.dubbo.rpc.model.FrameworkModel;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/transport/TripleCommandOutBoundHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri;
+package org.apache.dubbo.rpc.protocol.tri.transport;
 
 import org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand;
 
@@ -27,8 +27,8 @@ public class TripleCommandOutBoundHandler extends ChannelOutboundHandlerAdapter
 
     @Override
     public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {
-        if (msg instanceof QueuedCommand.AbstractQueuedCommand) {
-            QueuedCommand.AbstractQueuedCommand command = (QueuedCommand.AbstractQueuedCommand) msg;
+        if (msg instanceof QueuedCommand) {
+            QueuedCommand command = (QueuedCommand) msg;
             command.send(ctx, promise);
         } else {
             super.write(ctx, msg, promise);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/transport/TripleServerConnectionHandler.java
Patch:
@@ -14,7 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.rpc.protocol.tri;
+
+package org.apache.dubbo.rpc.protocol.tri.transport;
 
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
@@ -31,7 +32,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import static org.apache.dubbo.rpc.protocol.tri.GracefulShutdown.GRACEFUL_SHUTDOWN_PING;
+import static org.apache.dubbo.rpc.protocol.tri.transport.GracefulShutdown.GRACEFUL_SHUTDOWN_PING;
 
 public class TripleServerConnectionHandler extends Http2ChannelDuplexHandler {
     private static final Logger logger = LoggerFactory.getLogger(TripleServerConnectionHandler.class);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/transport/TripleTailHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.rpc.protocol.tri;
+package org.apache.dubbo.rpc.protocol.tri.transport;
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/SingleProtobufUtilsTest.java
Patch:
@@ -69,10 +69,10 @@ public void test() throws IOException {
         TripleWrapper.TripleRequestWrapper requestWrapper = TripleWrapper.TripleRequestWrapper.newBuilder()
             .setSerializeType("hessian4").build();
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
-        SingleProtobufUtils.serialize(requestWrapper,bos);
+        SingleProtobufUtils.serialize(requestWrapper, bos);
 
         ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
         TripleWrapper.TripleRequestWrapper tripleRequestWrapper = SingleProtobufUtils.deserialize(bis, TripleWrapper.TripleRequestWrapper.class);
-        Assertions.assertEquals(tripleRequestWrapper.getSerializeType(),"hessian4");
+        Assertions.assertEquals(tripleRequestWrapper.getSerializeType(), "hessian4");
     }
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -557,8 +557,6 @@ protected void checkAndUpdateSubConfigs() {
         // get consumer's global configuration
         completeCompoundConfigs();
 
-        checkProtocol();
-
         // init some null configuration.
         List<ConfigInitializer> configInitializers = this.getExtensionLoader(ConfigInitializer.class)
             .getActivateExtension(URL.valueOf("configInitializer://"), (String[]) null);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/DubboAnnotationUtils.java
Patch:
@@ -27,6 +27,7 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
@@ -154,7 +155,7 @@ public static String resolveInterfaceName(Reference reference, Class<?> defaultI
      */
     public static Map<String, String> convertParameters(String[] parameters) {
         if (ArrayUtils.isEmpty(parameters)) {
-            return null;
+            return Collections.emptyMap();
         }
 
         List<String> compatibleParameterArray = Arrays.stream(parameters)

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -557,6 +557,8 @@ protected void checkAndUpdateSubConfigs() {
         // get consumer's global configuration
         completeCompoundConfigs();
 
+        checkProtocol();
+
         // init some null configuration.
         List<ConfigInitializer> configInitializers = this.getExtensionLoader(ConfigInitializer.class)
             .getActivateExtension(URL.valueOf("configInitializer://"), (String[]) null);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -85,6 +85,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_PROTOCOL_LISTENER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.RELEASE_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.common.constants.FilterConstants.VALIDATION_KEY;
@@ -135,7 +136,7 @@ public class RegistryProtocol implements Protocol, ScopeModelAware {
     public static final String[] DEFAULT_REGISTER_PROVIDER_KEYS = {
         APPLICATION_KEY, CODEC_KEY, EXCHANGER_KEY, SERIALIZATION_KEY, CLUSTER_KEY, CONNECTIONS_KEY, DEPRECATED_KEY,
         GROUP_KEY, LOADBALANCE_KEY, MOCK_KEY, PATH_KEY, TIMEOUT_KEY, TOKEN_KEY, VERSION_KEY, WARMUP_KEY,
-        WEIGHT_KEY, DUBBO_VERSION_KEY, RELEASE_KEY
+        WEIGHT_KEY, DUBBO_VERSION_KEY, RELEASE_KEY, SIDE_KEY
     };
 
     public static final String[] DEFAULT_REGISTER_CONSUMER_KEYS = {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -50,7 +50,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicLong;
 
-import static org.apache.dubbo.common.constants.CommonConstants.DUBBO;
+import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER;
 import static org.apache.dubbo.common.constants.CommonConstants.ENABLE_CONNECTIVITY_VALIDATION;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
@@ -262,7 +262,7 @@ public void testCloseAvailablecheck() {
     private URL turnRegistryUrlToConsumerUrl(URL url, Map<String, String> queryMap) {
         String host = StringUtils.isNotEmpty(queryMap.get("register.ip")) ? queryMap.get("register.ip") : this.url.getHost();
         String path = queryMap.get(PATH_KEY);
-        String consumedProtocol = queryMap.get(PROTOCOL_KEY) == null ? DUBBO : queryMap.get(PROTOCOL_KEY);
+        String consumedProtocol = queryMap.get(PROTOCOL_KEY) == null ? CONSUMER : queryMap.get(PROTOCOL_KEY);
 
         URL consumerUrlFrom = this.url
                 .setHost(host)

File: dubbo-common/src/test/java/org/apache/dubbo/common/cache/FileCacheStoreFactoryTest.java
Patch:
@@ -30,11 +30,11 @@ public class FileCacheStoreFactoryTest {
     @Test
     public void testSafeName() throws URISyntaxException {
         FileCacheStore store1 = FileCacheStoreFactory.getInstance(getDirectoryOfClassPath(), "../../../dubbo");
-        Assertions.assertEquals(getDirectoryOfClassPath() + File.separator + "..%002f..%002f..%002fdubbo.dubbo.cache", store1.getCacheFilePath());
+        Assertions.assertEquals(getDirectoryOfClassPath() + "..%002f..%002f..%002fdubbo.dubbo.cache", store1.getCacheFilePath());
         store1.destroy();
 
         FileCacheStore store2 = FileCacheStoreFactory.getInstance(getDirectoryOfClassPath(), "../../../中文");
-        Assertions.assertEquals(getDirectoryOfClassPath() + File.separator + "..%002f..%002f..%002f%4e2d%6587.dubbo.cache", store2.getCacheFilePath());
+        Assertions.assertEquals(getDirectoryOfClassPath() + "..%002f..%002f..%002f%4e2d%6587.dubbo.cache", store2.getCacheFilePath());
         store2.destroy();
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -290,7 +290,7 @@ protected synchronized void init() {
     private void initServiceAppsMapping(Map<String, String> referenceParameters) {
         ServiceNameMapping serviceNameMapping = ServiceNameMapping.getDefaultExtension(getScopeModel());
         URL url = new ServiceConfigURL(LOCAL_PROTOCOL, LOCALHOST_VALUE, 0, interfaceName, referenceParameters);
-        serviceNameMapping.getServices(url);
+        serviceNameMapping.initInterfaceAppMapping(url);
     }
 
     /**

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -601,9 +601,9 @@ private URL exportRemote(URL url, List<URL> registryURLs) {
 
                 if (logger.isInfoEnabled()) {
                     if (url.getParameter(REGISTER_KEY, true)) {
-                        logger.info("Register dubbo service " + interfaceClass.getName() + " url " + url.getServiceKey() + " to registry " + registryURL.getAddress());
+                        logger.info("Register dubbo service " + interfaceClass.getName() + " url " + url + " to registry " + registryURL.getAddress());
                     } else {
-                        logger.info("Export dubbo service " + interfaceClass.getName() + " to url " + url.getServiceKey());
+                        logger.info("Export dubbo service " + interfaceClass.getName() + " to url " + url);
                     }
                 }
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/mock/MockServiceDiscovery.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.config.mock;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.MetadataInfo;
 import org.apache.dubbo.registry.client.AbstractServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -49,7 +48,7 @@ public void doRegister(ServiceInstance serviceInstance) throws RuntimeException
     }
 
     @Override
-    public void doUpdate(ServiceInstance serviceInstance, MetadataInfo metadataInfo) throws RuntimeException {
+    public void doUpdate(ServiceInstance serviceInstance) throws RuntimeException {
         this.serviceInstance = serviceInstance;
     }
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/registry/MockServiceDiscovery.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.config.spring.registry;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.MetadataInfo;
 import org.apache.dubbo.registry.client.AbstractServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -48,7 +47,7 @@ public void doRegister(ServiceInstance serviceInstance) throws RuntimeException
     }
 
     @Override
-    public void doUpdate(ServiceInstance serviceInstance, MetadataInfo metadataInfo) throws RuntimeException {
+    public void doUpdate(ServiceInstance serviceInstance) throws RuntimeException {
     }
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/DefaultServiceInstance.java
Patch:
@@ -283,9 +283,9 @@ public void setServiceMetadata(MetadataInfo serviceMetadata) {
     }
 
     @Override
-    public InstanceAddressURL toURL() {
+    public InstanceAddressURL toURL(String protocol) {
         if (instanceAddressURL == null) {
-            instanceAddressURL = new InstanceAddressURL(this, serviceMetadata);
+            instanceAddressURL = new InstanceAddressURL(this, serviceMetadata, protocol);
         }
         return instanceAddressURL;
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryDirectory.java
Patch:
@@ -133,7 +133,7 @@ public synchronized void notify(List<URL> instanceUrls) {
             return;
         }
         // Set the context of the address notification thread.
-        RpcServiceContext.setRpcContext(getConsumerUrl());
+        RpcServiceContext.getServiceContext().setConsumerUrl(getConsumerUrl());
 
         //  3.x added for extend URL address
         ExtensionLoader<AddressListener> addressListenerExtensionLoader = getUrl().getOrDefaultModuleModel().getExtensionLoader(AddressListener.class);
@@ -325,8 +325,8 @@ private boolean urlChanged(Invoker<T> invoker, InstanceAddressURL newURL) {
             }
         }
 
-        return !oldURL.getMetadataInfo().getServiceInfo(getConsumerUrl().getProtocolServiceKey())
-            .equals(newURL.getMetadataInfo().getServiceInfo(getConsumerUrl().getProtocolServiceKey()));
+        return !oldURL.getMetadataInfo().getValidServiceInfo(getConsumerUrl().getProtocolServiceKey())
+            .equals(newURL.getMetadataInfo().getValidServiceInfo(getConsumerUrl().getProtocolServiceKey()));
     }
 
     private List<Invoker<T>> toMergeInvokerList(List<Invoker<T>> invokers) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceInstance.java
Patch:
@@ -136,6 +136,6 @@ default String getMetadata(String name, String defaultValue) {
 
     void setServiceMetadata(MetadataInfo serviceMetadata);
 
-    InstanceAddressURL toURL();
+    InstanceAddressURL toURL(String protocol);
 
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMapping.java
Patch:
@@ -48,6 +48,7 @@ public class MetadataServiceNameMapping extends AbstractServiceNameMapping {
     protected MetadataReportInstance metadataReportInstance;
 
     public MetadataServiceNameMapping(ApplicationModel applicationModel) {
+        super(applicationModel);
         metadataReportInstance = applicationModel.getBeanFactory().getBean(MetadataReportInstance.class);
     }
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/InstanceAddressURLTest.java
Patch:
@@ -114,7 +114,7 @@ public void test1() {
         // test reading of keys in instance and metadata work fine
         assertEquals("value1", instanceURL.getParameter("key1"));//return instance key
         assertNull(instanceURL.getParameter("delay"));// no service key specified
-        RpcServiceContext.setRpcContext(consumerURL);
+        RpcServiceContext.getServiceContext().setConsumerUrl(consumerURL);
         assertEquals("1000", instanceURL.getParameter("delay"));
         assertEquals("1000", instanceURL.getServiceParameter(consumerURL.getProtocolServiceKey(), "delay"));
         assertEquals("9000", instanceURL.getMethodParameter("sayHello", "timeout"));

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/event/listener/MockServiceInstancesChangedListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.registry.client.event.listener;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.registry.NotifyListener;
 import org.apache.dubbo.registry.client.ServiceDiscovery;
 import org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent;
 
@@ -40,7 +39,7 @@ public List<URL> getAddresses(String serviceProtocolKey, URL consumerURL) {
         return super.getAddresses(serviceProtocolKey, consumerURL);
     }
 
-    public Map<String, Set<NotifyListener>> getServiceListeners () {
-       return listeners;
+    public Map<String, Set<NotifyListenerWithKey>> getServiceListeners() {
+        return listeners;
     }
 }

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/store/MetaCacheManagerTest.java
Patch:
@@ -93,7 +93,7 @@ public void testCacheDump() {
             cacheManager.put("3", metadataInfo3);
 
             try {
-                MetaCacheManager.CacheRefreshTask task = new MetaCacheManager.CacheRefreshTask(cacheManager.cacheStore, cacheManager.cache, 0);
+                MetaCacheManager.CacheRefreshTask<MetadataInfo> task = new MetaCacheManager.CacheRefreshTask<>(cacheManager.getCacheStore(), cacheManager.getCache(), cacheManager, 0);
                 task.run();
             } catch (Exception e) {
                 fail();

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/model/MigrationRuleTest.java
Patch:
@@ -40,7 +40,7 @@ public class MigrationRuleTest {
 
     @Test
     public void test_parse() {
-        when(mapping.getServices(any())).thenReturn(Collections.emptySet());
+        when(mapping.getCachedMapping(any(URL.class))).thenReturn(Collections.emptySet());
 
         String rule = "key: demo-consumer\n" +
             "step: APPLICATION_FIRST\n" +
@@ -103,7 +103,7 @@ public void test_parse() {
 
         Set<String> services = new HashSet<>();
         services.add("TestApplication");
-        when(mapping.getServices(any())).thenReturn(services);
+        when(mapping.getCachedMapping(any(URL.class))).thenReturn(services);
         assertEquals(0.3f, migrationRule.getThreshold(url));
         assertEquals(20, migrationRule.getProportion(url));
         assertEquals(10, migrationRule.getDelay(url));

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/support/MockServiceDiscovery.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.registry.client.support;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.MetadataInfo;
 import org.apache.dubbo.registry.client.AbstractServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.registry.client.metadata.store.MetaCacheManager;
@@ -42,7 +41,7 @@ public void doRegister(ServiceInstance serviceInstance) throws RuntimeException
     }
 
     @Override
-    public void doUpdate(ServiceInstance serviceInstance, MetadataInfo metadataInfo) throws RuntimeException {
+    public void doUpdate(ServiceInstance serviceInstance) throws RuntimeException {
 
     }
 

File: dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastServiceDiscovery.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.registry.multicast;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.MetadataInfo;
 import org.apache.dubbo.registry.client.AbstractServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -48,7 +47,7 @@ public void doRegister(ServiceInstance serviceInstance) throws RuntimeException
     }
 
     @Override
-    public void doUpdate(ServiceInstance serviceInstance, MetadataInfo metadataInfo) throws RuntimeException {
+    public void doUpdate(ServiceInstance serviceInstance) throws RuntimeException {
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcContext.java
Patch:
@@ -768,8 +768,9 @@ public void setConsumerUrl(URL consumerUrl) {
         SERVICE_CONTEXT.get().setConsumerUrl(consumerUrl);
     }
 
+    @Deprecated
     public static void setRpcContext(URL url) {
-        RpcServiceContext.setRpcContext(url);
+        RpcServiceContext.getServiceContext().setConsumerUrl(url);
     }
 
     protected static RestoreContext clearAndStoreContext() {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java
Patch:
@@ -77,7 +77,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
         rpcInvocation.setTargetServiceUniqueName(serviceKey);
 
         // invoker.getUrl() returns consumer url.
-        RpcServiceContext.setRpcContext(url);
+        RpcServiceContext.getServiceContext().setConsumerUrl(url);
 
         if (serviceModel instanceof ConsumerModel) {
             rpcInvocation.put(Constants.CONSUMER_MODEL, serviceModel);

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/DefaultFutureTest.java
Patch:
@@ -136,7 +136,7 @@ public void interruptSend() throws Exception {
         Request request = new Request(channelId);
         ExecutorService sharedExecutor = ExtensionLoader.getExtensionLoader(ExecutorRepository.class)
                 .getDefaultExtension().createExecutorIfAbsent(URL.valueOf("dubbo://127.0.0.1:23456"));
-        ThreadlessExecutor executor = new ThreadlessExecutor(sharedExecutor);
+        ThreadlessExecutor executor = new ThreadlessExecutor();
         DefaultFuture f = DefaultFuture.newFuture(channel, request, 1000, executor);
         //mark the future is sent
         DefaultFuture.sent(channel, request);

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/handler/WrappedChannelHandlerTest.java
Patch:
@@ -133,7 +133,7 @@ public void testGetExecutor() {
         Assertions.assertEquals(preferredExecutorService, sharedExecutor);
         future.cancel();
 
-        ThreadlessExecutor executor = new ThreadlessExecutor(sharedExecutor);
+        ThreadlessExecutor executor = new ThreadlessExecutor();
         future = DefaultFuture.newFuture(channel, request, 1000, executor);
         preferredExecutorService = handler.getPreferredExecutorService(response);
         Assertions.assertEquals(preferredExecutorService, executor);

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/MethodDescriptor.java
Patch:
@@ -99,7 +99,7 @@ public MethodDescriptor(Method method) {
         try {
             returnTypesResult = ReflectUtils.getReturnTypes(method);
         } catch (Throwable throwable) {
-            logger.error("fail to get return types", throwable);
+            logger.error("fail to get return types. Method name: " + methodName + " Declaring class:" + method.getDeclaringClass().getName(), throwable);
             returnTypesResult = new Type[]{returnClass, returnClass};
         }
 

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataInfo.java
Patch:
@@ -91,7 +91,7 @@ public MetadataInfo(String app, String revision, Map<String, ServiceInfo> servic
     }
 
     private MetadataInfo(String app, String revision, Map<String, ServiceInfo> services, AtomicBoolean initiated,
-                        Map<String, String> extendParams, Map<String, String> instanceParams, AtomicBoolean updated,
+                        Map<String, String> extendParams, Map<String, String> instanceParams, boolean updated,
                         ConcurrentNavigableMap<String, SortedSet<URL>> subscribedServiceURLs,
                         ConcurrentNavigableMap<String, SortedSet<URL>> exportedServiceURLs,
                         ExtensionLoader<MetadataParamsFilter> loader) {
@@ -101,7 +101,7 @@ private MetadataInfo(String app, String revision, Map<String, ServiceInfo> servi
         this.initiated = new AtomicBoolean(initiated.get());
         this.extendParams = new ConcurrentHashMap<>(extendParams);
         this.instanceParams = new ConcurrentHashMap<>(instanceParams);
-        this.updated = new AtomicBoolean(updated.get());
+        this.updated = updated;
         this.subscribedServiceURLs = subscribedServiceURLs == null ? null : new ConcurrentSkipListMap<>(subscribedServiceURLs);
         this.exportedServiceURLs = exportedServiceURLs == null ? null : new ConcurrentSkipListMap<>(exportedServiceURLs);
         this.loader = loader;

File: dubbo-common/src/main/java/org/apache/dubbo/common/cache/FileCacheStore.java
Patch:
@@ -212,7 +212,8 @@ public void refreshCache(Map<String, String> properties, String comment) {
 
         try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(cacheFile, false), StandardCharsets.UTF_8))) {
             bw.write("#" + comment);
-            bw.write("#" + new Date().toString());
+            bw.newLine();
+            bw.write("#" + new Date());
             bw.newLine();
             for (Map.Entry<String, String> e : properties.entrySet()) {
                 String key = e.getKey();

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -516,6 +516,8 @@ public interface CommonConstants {
 
     String PROVIDER_ASYNC_KEY = "PROVIDER_ASYNC";
 
+    String REGISTER_IP_KEY = "register.ip";
+
     String CURRENT_CLUSTER_INVOKER_KEY = "currentClusterInvoker";
 
     String ENABLE_ROUTER_SNAPSHOT_PRINT_KEY = "ENABLE_ROUTER_SNAPSHOT_PRINT";

File: dubbo-common/src/test/java/org/apache/dubbo/common/cache/FileCacheStoreTest.java
Patch:
@@ -49,6 +49,8 @@ public void testCache() throws Exception {
 
         Map<String, String> propertiesLimitTo10 = cacheStore.loadCache(10);
         assertEquals(4, propertiesLimitTo10.size());
+
+        cacheStore.destroy();
     }
 
     private String getDirectoryOfClassPath() throws URISyntaxException {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/AbstractServiceNameMapping.java
Patch:
@@ -108,7 +108,7 @@ public Set<String> getAndListen(URL registryURL, URL subscribedURL, MappingListe
         // use previously cached services.
         Set<String> cachedServices = this.getCachedMapping(key);
 
-       Runnable runnable = () -> {
+        Runnable runnable = () -> {
             synchronized (mappingListeners) {
                 if (listener != null) {
                     Set<String> mappedServices = getAndListen(subscribedURL, listener);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/AbstractServiceDiscovery.java
Patch:
@@ -289,7 +289,7 @@ protected void unReportMetadata(MetadataInfo metadataInfo) {
 
     private String getCacheNameSuffix() {
         String name = this.getClass().getSimpleName();
-        int i = name.indexOf("ServiceDiscovery");
+        int i = name.indexOf(ServiceDiscovery.class.getSimpleName());
         if (i != -1) {
             name = name.substring(0, i);
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/DefaultServiceInstance.java
Patch:
@@ -335,7 +335,7 @@ public String toString() {
 
     public String toFullString() {
         return "DefaultServiceInstance{" +
-                ", serviceName='" + serviceName + '\'' +
+                "serviceName='" + serviceName + '\'' +
                 ", host='" + host + '\'' +
                 ", port=" + port +
                 ", enabled=" + enabled +

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -122,6 +122,8 @@ public static synchronized void destroyMetadataServiceProxy(ServiceInstance inst
         String key = computeKey(instance);
         if (metadataServiceProxies.containsKey(key)) {
             metadataServiceProxies.remove(key);
+        }
+        if (metadataServiceInvokers.containsKey(key)) {
             Invoker<?> invoker = metadataServiceInvokers.remove(key);
             invoker.destroy();
         }
@@ -163,7 +165,7 @@ public static ConcurrentMap<String, MetadataService> getMetadataServiceProxies()
 
     public static MetadataInfo getRemoteMetadata(String revision, ServiceInstance instance, MetadataReport metadataReport) {
         String metadataType = ServiceInstanceMetadataUtils.getMetadataStorageType(instance);
-        MetadataInfo metadataInfo = null;
+        MetadataInfo metadataInfo;
         try {
             if (logger.isDebugEnabled()) {
                 logger.debug("Instance " + instance.getAddress() + " is using metadata type " + metadataType);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ProtocolPortsMetadataCustomizer.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.metadata.MetadataInfo;
-import org.apache.dubbo.registry.client.DefaultServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstanceCustomizer;
 import org.apache.dubbo.rpc.Protocol;
@@ -43,7 +42,7 @@ public class ProtocolPortsMetadataCustomizer implements ServiceInstanceCustomize
 
     @Override
     public void customize(ServiceInstance serviceInstance, ApplicationModel applicationModel) {
-        MetadataInfo metadataInfo = ((DefaultServiceInstance)serviceInstance).getServiceMetadata();
+        MetadataInfo metadataInfo = serviceInstance.getServiceMetadata();
         if (metadataInfo == null || CollectionUtils.isEmptyMap(metadataInfo.getExportedServiceURLs())) {
             return;
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceHostPortCustomizer.java
Patch:
@@ -44,7 +44,7 @@ public void customize(ServiceInstance serviceInstance, ApplicationModel applicat
             return;
         }
 
-        MetadataInfo metadataInfo = ((DefaultServiceInstance)serviceInstance).getServiceMetadata();
+        MetadataInfo metadataInfo = serviceInstance.getServiceMetadata();
         if (metadataInfo == null || CollectionUtils.isEmptyMap(metadataInfo.getExportedServiceURLs())) {
             return;
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataCustomizer.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.common.infra.InfraAdapter;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.metadata.MetadataInfo;
-import org.apache.dubbo.registry.client.DefaultServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstanceCustomizer;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -52,7 +51,7 @@ public class ServiceInstanceMetadataCustomizer implements ServiceInstanceCustomi
 
     @Override
     public void customize(ServiceInstance serviceInstance, ApplicationModel applicationModel) {
-        MetadataInfo metadataInfo = ((DefaultServiceInstance)serviceInstance).getServiceMetadata();
+        MetadataInfo metadataInfo = serviceInstance.getServiceMetadata();
         if (metadataInfo == null || CollectionUtils.isEmptyMap(metadataInfo.getServices())) {
             return;
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/DefaultMigrationAddressComparator.java
Patch:
@@ -68,7 +68,7 @@ public <T> boolean shouldMigrate(ClusterInvoker<T> newInvoker, ClusterInvoker<T>
         if (configuredThreshold != null && configuredThreshold >= 0) {
             rawThreshold = String.valueOf(configuredThreshold);
         }
-        rawThreshold = StringUtils.isNotEmpty(rawThreshold) ? rawThreshold : ConfigurationUtils.getCachedDynamicProperty(MIGRATION_THRESHOLD, DEFAULT_THRESHOLD_STRING);
+        rawThreshold = StringUtils.isNotEmpty(rawThreshold) ? rawThreshold : ConfigurationUtils.getCachedDynamicProperty(newInvoker.getUrl().getScopeModel(), MIGRATION_THRESHOLD, DEFAULT_THRESHOLD_STRING);
         float threshold;
         try {
             threshold = Float.parseFloat(rawThreshold);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/DynamicDirectory.java
Patch:
@@ -76,7 +76,7 @@ public abstract class DynamicDirectory<T> extends AbstractDirectory<T> implement
     protected final Class<T> serviceType;
 
     /**
-     * Initialization at construction time, assertion not null, and always assign non null value
+     * Initialization at construction time, assertion not null, and always assign non-null value
      */
     protected final URL directoryUrl;
     protected final boolean multiGroup;
@@ -303,7 +303,7 @@ public void destroy() {
 
         ExtensionLoader<AddressListener> addressListenerExtensionLoader = getUrl().getOrDefaultModuleModel().getExtensionLoader(AddressListener.class);
         List<AddressListener> supportedListeners = addressListenerExtensionLoader.getActivateExtension(getUrl(), (String[]) null);
-        if (supportedListeners != null && !supportedListeners.isEmpty()) {
+        if (CollectionUtils.isNotEmpty(supportedListeners)) {
             for (AddressListener addressListener : supportedListeners) {
                 addressListener.destroy(getConsumerUrl(), this);
             }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java
Patch:
@@ -446,7 +446,7 @@ protected void notify(URL url, NotifyListener listener, List<URL> urls) {
             categoryNotified.put(category, categoryList);
             listener.notify(categoryList);
             // We will update our cache file after each notification.
-            // When our Registry has a subscribe failure due to network jitter, we can return at least the existing cache URL.
+            // When our Registry has a subscribed failure due to network jitter, we can return at least the existing cache URL.
             if (localCacheEnabled) {
                 saveProperties(url);
             }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -110,7 +110,7 @@ public Registry getRegistry(URL url) {
 
     /**
      * Create the key for the registries cache.
-     * This method may be override by the sub-class.
+     * This method may be overridden by the sub-class.
      *
      * @param url the registration {@link URL url}
      * @return non-null

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.TimeUnit;
 
-import static org.apache.dubbo.common.constants.CommonConstants.FILE_KEY;
 import static org.apache.dubbo.registry.Constants.DEFAULT_REGISTRY_RETRY_PERIOD;
 import static org.apache.dubbo.registry.Constants.REGISTRY_RETRY_PERIOD_KEY;
 
@@ -302,7 +301,7 @@ public void subscribe(URL url, NotifyListener listener) {
             List<URL> urls = getCacheUrls(url);
             if (CollectionUtils.isNotEmpty(urls)) {
                 notify(url, listener, urls);
-                logger.error("Failed to subscribe " + url + ", Using cached list: " + urls + " from cache file: " + getUrl().getParameter(FILE_KEY, System.getProperty("user.home") + "/dubbo-registry-" + url.getHost() + ".cache") + ", cause: " + t.getMessage(), t);
+                logger.error("Failed to subscribe " + url + ", Using cached list: " + urls + " from cache file: " + getCacheFile().getName() + ", cause: " + t.getMessage(), t);
             } else {
                 // If the startup detection is opened, the Exception is thrown directly.
                 boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/integration/RegistryProtocolTest.java
Patch:
@@ -392,7 +392,7 @@ public void testInterceptInvokerForMigrationRuleListener() {
             .thenReturn(registryProtocolListeners);
         url = url.setScopeModel(moduleModel);
 
-        registryProtocol.interceptInvoker(clusterInvoker, url, consumerUrl, url);
+        registryProtocol.interceptInvoker(clusterInvoker, url, consumerUrl);
         verify(migrationRuleListener, times(1)).onRefer(registryProtocol, clusterInvoker, consumerUrl, url);
     }
 
@@ -458,7 +458,7 @@ public void testInterceptInvokerForCustomRegistryProtocolListener() {
             .thenReturn(registryProtocolListeners);
         url = url.setScopeModel(moduleModel);
 
-        registryProtocol.interceptInvoker(clusterInvoker, url, consumerUrl, url);
+        registryProtocol.interceptInvoker(clusterInvoker, url, consumerUrl);
 
         Assertions.assertEquals(1, CountRegistryProtocolListener.getReferCounter().get());
     }

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/support/AbstractRegistryTest.java
Patch:
@@ -264,7 +264,7 @@ public void testUnsubscribe() {
         // check if unsubscribe successfully
         abstractRegistry.subscribe(testUrl, listener);
         abstractRegistry.unsubscribe(testUrl, listener);
-        // Since we have subscribe testUrl, here should return a empty set instead of null
+        // Since we have subscribed testUrl, here should return a empty set instead of null
         Assertions.assertNotNull(abstractRegistry.getSubscribed().get(testUrl));
         Assertions.assertFalse(abstractRegistry.getSubscribed().get(testUrl).contains(listener));
     }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/mock/MockServiceDiscovery.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.mock;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.metadata.MetadataInfo;
 import org.apache.dubbo.registry.client.AbstractServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -48,7 +49,7 @@ public void doRegister(ServiceInstance serviceInstance) throws RuntimeException
     }
 
     @Override
-    public void doUpdate(ServiceInstance serviceInstance) throws RuntimeException {
+    public void doUpdate(ServiceInstance serviceInstance, MetadataInfo metadataInfo) throws RuntimeException {
         this.serviceInstance = serviceInstance;
     }
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/registry/MockServiceDiscovery.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring.registry;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.metadata.MetadataInfo;
 import org.apache.dubbo.registry.client.AbstractServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -47,7 +48,7 @@ public void doRegister(ServiceInstance serviceInstance) throws RuntimeException
     }
 
     @Override
-    public void doUpdate(ServiceInstance serviceInstance) throws RuntimeException {
+    public void doUpdate(ServiceInstance serviceInstance, MetadataInfo metadataInfo) throws RuntimeException {
     }
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/support/MockServiceDiscovery.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.registry.client.support;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.metadata.MetadataInfo;
 import org.apache.dubbo.registry.client.AbstractServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -40,7 +41,7 @@ public void doRegister(ServiceInstance serviceInstance) throws RuntimeException
     }
 
     @Override
-    public void doUpdate(ServiceInstance serviceInstance) throws RuntimeException {
+    public void doUpdate(ServiceInstance serviceInstance, MetadataInfo metadataInfo) throws RuntimeException {
 
     }
 

File: dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastServiceDiscovery.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.registry.multicast;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.metadata.MetadataInfo;
 import org.apache.dubbo.registry.client.AbstractServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -47,7 +48,7 @@ public void doRegister(ServiceInstance serviceInstance) throws RuntimeException
     }
 
     @Override
-    public void doUpdate(ServiceInstance serviceInstance) throws RuntimeException {
+    public void doUpdate(ServiceInstance serviceInstance, MetadataInfo metadataInfo) throws RuntimeException {
     }
 
     @Override

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/StartupTest.java
Patch:
@@ -46,6 +46,7 @@ public void setUp() {
         ModuleModel moduleModel = Mockito.mock(ModuleModel.class);
         moduleDeployer = Mockito.mock(ModuleDeployer.class);
         Mockito.when(frameworkModel.newApplication()).thenReturn(applicationModel);
+        Mockito.when(frameworkModel.getAllApplicationModels()).thenReturn(Arrays.asList(applicationModel));
         Mockito.when(applicationModel.getModuleModels()).thenReturn(Arrays.asList(moduleModel));
         Mockito.when(moduleModel.getDeployer()).thenReturn(moduleDeployer);
         Mockito.when(moduleDeployer.isRunning()).thenReturn(true);
@@ -54,7 +55,7 @@ public void setUp() {
         Mockito.when(frameworkModel.getExtensionLoader(StartupProbe.class)).thenReturn(loader);
         URL url = URL.valueOf("application://").addParameter(CommonConstants.QOS_STARTUP_PROBE_EXTENSION, "");
         List<StartupProbe> readinessProbes = Arrays.asList(
-            new DeployerStartupProbe()
+            new DeployerStartupProbe(frameworkModel)
         );
         Mockito.when(loader.getActivateExtension(url, CommonConstants.QOS_STARTUP_PROBE_EXTENSION)).thenReturn(readinessProbes);
     }

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/ReadyTest.java
Patch:
@@ -56,7 +56,7 @@ public void setUp() {
         Mockito.when(frameworkModel.getExtensionLoader(ReadinessProbe.class)).thenReturn(loader);
         URL url = URL.valueOf("application://").addParameter(CommonConstants.QOS_READY_PROBE_EXTENSION, "");
         List<ReadinessProbe> readinessProbes = Arrays.asList(
-            new DeployerReadinessProbe(frameworkModel.newApplication()),
+            new DeployerReadinessProbe(),
             new ProviderReadinessProbe()
         );
         Mockito.when(loader.getActivateExtension(url, CommonConstants.QOS_READY_PROBE_EXTENSION)).thenReturn(readinessProbes);

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/StartupTest.java
Patch:
@@ -54,7 +54,7 @@ public void setUp() {
         Mockito.when(frameworkModel.getExtensionLoader(StartupProbe.class)).thenReturn(loader);
         URL url = URL.valueOf("application://").addParameter(CommonConstants.QOS_STARTUP_PROBE_EXTENSION, "");
         List<StartupProbe> readinessProbes = Arrays.asList(
-            new DeployerStartupProbe(frameworkModel.newApplication())
+            new DeployerStartupProbe()
         );
         Mockito.when(loader.getActivateExtension(url, CommonConstants.QOS_STARTUP_PROBE_EXTENSION)).thenReturn(readinessProbes);
     }

File: dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/jvalidation/JValidator.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ReflectUtils;
-import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.validation.MethodValidated;
 import org.apache.dubbo.validation.Validator;
 
@@ -293,7 +292,7 @@ public void validate(String methodName, Class<?>[] parameterTypes, Object[] argu
             }
         } catch (ValidationException e) {
             // only use exception's message to avoid potential serialization issue
-            throw new RpcException(RpcException.VALIDATION_EXCEPTION, e.getMessage(), e);
+            throw new ValidationException(e.getMessage());
         }
     }
 

File: dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/jvalidation/JValidatorNew.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ReflectUtils;
-import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.validation.MethodValidated;
 import org.apache.dubbo.validation.Validator;
 
@@ -293,7 +292,7 @@ public void validate(String methodName, Class<?>[] parameterTypes, Object[] argu
             }
         } catch (ValidationException e) {
             // only use exception's message to avoid potential serialization issue
-            throw new RpcException(RpcException.VALIDATION_EXCEPTION, e.getMessage(), e);
+            throw new ValidationException(e.getMessage());
         }
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyInvoker.java
Patch:
@@ -136,7 +136,7 @@ private CompletableFuture<Object> wrapWithFuture(Object value, Invocation invoca
         if (value instanceof CompletableFuture) {
             invocation.put(PROVIDER_ASYNC_KEY, Boolean.TRUE);
             return (CompletableFuture<Object>) value;
-        } else if (RpcContext.getServiceContext().isAsyncStarted()) {
+        } else if (RpcContext.getServerAttachment().isAsyncStarted()) {
             invocation.put(PROVIDER_ASYNC_KEY, Boolean.TRUE);
             return ((AsyncContextImpl) (RpcContext.getServiceContext().getAsyncContext())).getInternalFuture();
         }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -499,7 +499,7 @@ private void initDic() {
         dic.buildRouterChain();
     }
 
-    @Test()
+    @Test
     public void testTimeoutExceptionCode() {
         List<Invoker<DemoService>> invokers = new ArrayList<Invoker<DemoService>>();
         invokers.add(new Invoker<DemoService>() {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AvailableClusterInvokerTest.java
Patch:
@@ -86,7 +86,7 @@ private void resetInvokerToNoException() {
         given(invoker3.getInterface()).willReturn(AvailableClusterInvokerTest.class);
     }
 
-    @Test()
+    @Test
     public void testInvokeNoException() {
 
         resetInvokerToNoException();
@@ -96,7 +96,7 @@ public void testInvokeNoException() {
         Assertions.assertSame(result, ret);
     }
 
-    @Test()
+    @Test
     public void testInvokeWithException() {
 
         // remove invokers for test exception

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailSafeClusterInvokerTest.java
Patch:
@@ -89,7 +89,7 @@ public void testInvokeExceptoin() {
         Assertions.assertNull(RpcContext.getServiceContext().getInvoker());
     }
 
-    @Test()
+    @Test
     public void testInvokeNoExceptoin() {
 
         resetInvokerToNoException();
@@ -99,7 +99,7 @@ public void testInvokeNoExceptoin() {
         Assertions.assertSame(result, ret);
     }
 
-    @Test()
+    @Test
     public void testNoInvoke() {
         dic = mock(Directory.class);
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvokerTest.java
Patch:
@@ -108,7 +108,7 @@ public void testInvokeBizException() {
         }
     }
 
-    @Test()
+    @Test
     public void testInvokeNoException() {
 
         resetInvoker1ToNoException();
@@ -118,7 +118,7 @@ public void testInvokeNoException() {
         assertSame(result, ret);
     }
 
-    @Test()
+    @Test
     public void testNoInvoke() {
         dic = mock(Directory.class);
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvokerTest.java
Patch:
@@ -141,7 +141,7 @@ public void testClearRpcContext() {
         Assertions.assertTrue(afterInvoke != null && afterInvoke.size() == 0, "clear attachment failed!");
     }
 
-    @Test()
+    @Test
     public void testInvokeNoException() {
 
         resetInvokerToNoException();
@@ -151,7 +151,7 @@ public void testInvokeNoException() {
         Assertions.assertSame(result, ret);
     }
 
-    @Test()
+    @Test
     public void testInvokeWithIllegalForksParam() {
         URL url = URL.valueOf("test://test:11/test?forks=-1");
         given(dic.getUrl()).willReturn(url);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.remoting.exchange.PortUnificationExchanger;
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Invoker;
-import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.AbstractExporter;

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/DefaultMultipleSerialization.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dubbo.common.serialize;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.utils.ClassUtils;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -39,9 +38,8 @@ public void serialize(URL url, String serializeType, String clz, Object obj, Out
     public Object deserialize(URL url, String serializeType, String clz, InputStream os) throws IOException, ClassNotFoundException {
         serializeType = convertHessian(serializeType);
         final Serialization serialization = url.getOrDefaultFrameworkModel().getExtensionLoader(Serialization.class).getExtension(serializeType);
-        final Class<?> aClass = ClassUtils.forName(clz);
         final ObjectInput in = serialization.deserialize(null, os);
-        return in.readObject(aClass);
+        return in.readObject();
     }
 
     private String convertHessian(String ser) {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/Exchangers.java
Patch:
@@ -104,7 +104,6 @@ public static ExchangeClient connect(URL url, ExchangeHandler handler) throws Re
         if (handler == null) {
             throw new IllegalArgumentException("handler == null");
         }
-//        url = url.addParameterIfAbsent(Constants.CODEC_KEY, "exchange");
         return getExchanger(url).connect(url, handler);
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeClient.java
Patch:
@@ -53,7 +53,7 @@ public class HeaderExchangeClient implements ExchangeClient {
     public static GlobalResourceInitializer<HashedWheelTimer> IDLE_CHECK_TIMER = new GlobalResourceInitializer<>(() ->
         new HashedWheelTimer(new NamedThreadFactory("dubbo-client-idleCheck", true), 1,
             TimeUnit.SECONDS, TICKS_PER_WHEEL),
-        timer -> timer.stop());
+        HashedWheelTimer::stop);
 
     private Timeout reconnectTimer;
     private Timeout heartBeatTimer;

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboLazyConnectTest.java
Patch:
@@ -66,7 +66,7 @@ public void testSticky2() {
 
     @Test
     public void testSticky3() {
-        Assertions.assertThrows(RpcException.class, () -> {
+        Assertions.assertThrows(IllegalStateException.class, () -> {
             int port = NetUtils.getAvailablePort();
             URL url = URL.valueOf("dubbo://127.0.0.1:" + port + "/org.apache.dubbo.rpc.protocol.dubbo.IDemoService?" + LAZY_CONNECT_KEY + "=true");
             IDemoService service = ProtocolUtils.refer(IDemoService.class, url);

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/AbstractDeployer.java
Patch:
@@ -22,7 +22,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.apache.dubbo.common.deploy.DeployState.FAILED;
 import static org.apache.dubbo.common.deploy.DeployState.PENDING;
@@ -39,7 +38,7 @@ public abstract class AbstractDeployer<E extends ScopeModel> implements Deployer
 
     private volatile Throwable lastError;
 
-    protected AtomicBoolean initialized = new AtomicBoolean(false);
+    protected volatile boolean initialized = false;
 
     protected List<DeployListener<E>> listeners = new ArrayList<>();
 
@@ -164,7 +163,7 @@ public Throwable getError() {
     }
 
     public boolean isInitialized() {
-        return initialized.get();
+        return initialized;
     }
 
     protected String getIdentifier() {

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.config.configcenter.ConfigItem;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.remoting.zookeeper.AbstractZookeeperClient;
 import org.apache.dubbo.remoting.zookeeper.ChildListener;
 import org.apache.dubbo.remoting.zookeeper.DataListener;
@@ -73,7 +74,7 @@ public CuratorZookeeperClient(URL url) {
                     .connectionTimeoutMs(timeout)
                     .sessionTimeoutMs(sessionExpireMs);
             String userInformation = url.getUserInformation();
-            if (userInformation != null && userInformation.length() > 0) {
+            if (StringUtils.isNotEmpty(userInformation)) {
                 builder = builder.authorization("digest", userInformation.getBytes());
             }
             client = builder.build();

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/BitList.java
Patch:
@@ -132,7 +132,7 @@ public BitList<E> or(BitList<E> target) {
     }
 
     public boolean hasMoreElementInTailList() {
-        return CollectionUtils.isNotEmpty(tailList) && tailList.size() > 0;
+        return CollectionUtils.isNotEmpty(tailList);
     }
 
     public List<E> getTailList() {
@@ -342,7 +342,7 @@ public int lastIndexOf(Object o) {
 
     @Override
     public boolean isEmpty() {
-        return this.rootSet.isEmpty() && (tailList == null || tailList.isEmpty());
+        return this.rootSet.isEmpty() && CollectionUtils.isEmpty(tailList);
     }
 
     @Override
@@ -538,7 +538,7 @@ public void add(E e) {
     }
 
     public ArrayList<E> cloneToArrayList() {
-        if (rootSet.cardinality() == originList.size() && (tailList == null || tailList.isEmpty())) {
+        if (rootSet.cardinality() == originList.size() && (CollectionUtils.isEmpty(tailList))) {
             return new ArrayList<>(originList);
         }
         ArrayList<E> arrayList = new ArrayList<>(size());

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -270,12 +270,12 @@ public static URL valueOf(String url, String... reserveParams) {
         return result.clearParameters().addParameters(newMap);
     }
 
-    public static URL valueOf(URL url, String[] reserveParams, String[] reserveParamPrefixs) {
+    public static URL valueOf(URL url, String[] reserveParams, String[] reserveParamPrefixes) {
         Map<String, String> newMap = new HashMap<>();
         Map<String, String> oldMap = url.getParameters();
-        if (reserveParamPrefixs != null && reserveParamPrefixs.length != 0) {
+        if (reserveParamPrefixes != null && reserveParamPrefixes.length != 0) {
             for (Map.Entry<String, String> entry : oldMap.entrySet()) {
-                for (String reserveParamPrefix : reserveParamPrefixs) {
+                for (String reserveParamPrefix : reserveParamPrefixes) {
                     if (entry.getKey().startsWith(reserveParamPrefix) && StringUtils.isNotEmpty(entry.getValue())) {
                         newMap.put(entry.getKey(), entry.getValue());
                     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/DefaultMigrationAddressComparator.java
Patch:
@@ -64,9 +64,9 @@ public <T> boolean shouldMigrate(ClusterInvoker<T> newInvoker, ClusterInvoker<T>
         migrationData.put(NEW_ADDRESS_SIZE, newAddressSize);
 
         String rawThreshold = null;
-        Float configedThreshold = rule == null ? null : rule.getThreshold(oldInvoker.getUrl());
-        if (configedThreshold != null && configedThreshold >= 0) {
-            rawThreshold = String.valueOf(configedThreshold);
+        Float configuredThreshold = rule == null ? null : rule.getThreshold(oldInvoker.getUrl());
+        if (configuredThreshold != null && configuredThreshold >= 0) {
+            rawThreshold = String.valueOf(configuredThreshold);
         }
         rawThreshold = StringUtils.isNotEmpty(rawThreshold) ? rawThreshold : ConfigurationUtils.getCachedDynamicProperty(MIGRATION_THRESHOLD, DEFAULT_THRESHOLD_STRING);
         float threshold;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleListener.java
Patch:
@@ -244,7 +244,7 @@ public void onRefer(RegistryProtocol registryProtocol, ClusterInvoker<?> invoker
     @Override
     public void onDestroy() {
         if (configuration != null) {
-            configuration.removeListener(ruleKey, this);
+            configuration.removeListener(ruleKey, DUBBO_SERVICEDISCOVERY_MIGRATION, this);
         }
         if (ruleMigrationFuture != null) {
             ruleMigrationFuture.cancel(true);

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/ClientStreamTest.java
Patch:
@@ -69,7 +69,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static org.apache.dubbo.rpc.protocol.tri.Compressor.DEFAULT_COMPRESSOR;
 import static org.apache.dubbo.rpc.protocol.tri.TripleConstant.HTTP_SCHEME;
 import static org.apache.dubbo.rpc.protocol.tri.TripleHeaderEnum.GRPC_ENCODING;
 
@@ -333,6 +332,7 @@ private Http2StreamChannel getHttp2StreamChannel(AbstractClientStream stream) {
         Mockito.when(streamChannel.writeAndFlush(Mockito.any())).thenReturn(channelFuture);
         Mockito.when(streamChannel.alloc()).thenReturn(ByteBufAllocator.DEFAULT);
         Mockito.when(streamChannel.attr(TripleConstant.CLIENT_STREAM_KEY)).thenReturn(attribute);
+        Mockito.when(streamChannel.isActive()).thenReturn(true);
         Mockito.when(streamChannel.eventLoop()).thenReturn(eventLoop);
         Mockito.when(streamChannel.newPromise()).thenReturn(promise);
 

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/ServerStreamTest.java
Patch:
@@ -262,6 +262,7 @@ private Http2StreamChannel getHttp2StreamChannel(AbstractServerStream stream) {
         Mockito.when(streamChannel.writeAndFlush(Mockito.any())).thenReturn(channelFuture);
         Mockito.when(streamChannel.alloc()).thenReturn(ByteBufAllocator.DEFAULT);
         Mockito.when(streamChannel.attr(TripleConstant.SERVER_STREAM_KEY)).thenReturn(attribute);
+        Mockito.when(streamChannel.isActive()).thenReturn(true);
         Mockito.when(streamChannel.eventLoop()).thenReturn(eventLoop);
         Mockito.when(streamChannel.newPromise()).thenReturn(promise);
 

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/WriteQueueTest.java
Patch:
@@ -54,6 +54,7 @@ public void init() {
         ChannelPromise promise = Mockito.mock(ChannelPromise.class);
         EventLoop eventLoop = new DefaultEventLoop();
         Mockito.when(channel.eventLoop()).thenReturn(eventLoop);
+        Mockito.when(channel.isActive()).thenReturn(true);
         Mockito.when(channel.newPromise()).thenReturn(promise);
         Mockito.when(channel.write(Mockito.any(), Mockito.any())).thenAnswer(
             (Answer<ChannelPromise>) invocationOnMock -> {

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/DubboLoaderClassPath.java
Patch:
@@ -32,7 +32,7 @@ public DubboLoaderClassPath() {
 
     @Override
     public InputStream openClassfile(String classname) throws NotFoundException {
-        if (!classname.startsWith("org.apache.dubbo")) {
+        if (!classname.startsWith("org.apache.dubbo") && !classname.startsWith("grpc.health") && !classname.startsWith("com.google")) {
             return null;
         }
         return super.openClassfile(classname);

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationCache.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.common.config;
 
-import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.rpc.model.ScopeModel;
 
 import java.util.Map;
@@ -38,7 +37,9 @@ public class ConfigurationCache {
      */
     public String computeIfAbsent(String key, Function<String, String> function) {
         String value = cache.get(key);
-        if (StringUtils.isEmpty(value)) {
+        // value might be empty here!
+        // empty value from config center will be cached here
+        if (value == null) {
             // lock free, tolerate repeat apply, will return previous value
             cache.putIfAbsent(key, function.apply(key));
             value = cache.get(key);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.config.utils.ConfigValidationUtils;
 import org.apache.dubbo.metadata.ServiceNameMapping;
+import org.apache.dubbo.registry.client.metadata.MetadataUtils;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
@@ -402,6 +403,7 @@ private T createProxy(Map<String, String> referenceParameters) {
             referenceParameters.get(INTERFACE_KEY), referenceParameters);
         consumerUrl = consumerUrl.setScopeModel(getScopeModel());
         consumerUrl = consumerUrl.setServiceModel(consumerModel);
+        MetadataUtils.publishServiceDefinition(interfaceName, consumerUrl, getScopeModel(), getApplicationModel());
 
         // create service proxy
         return (T) proxyFactory.getProxy(invoker, ProtocolUtils.isGeneric(generic));

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -63,7 +63,7 @@ public static synchronized MetadataService getMetadataServiceProxy(ServiceInstan
         return metadataServiceProxies.computeIfAbsent(computeKey(instance), k -> referProxy(k, instance));
     }
 
-    public static void publishServiceDefinition(ServiceDescriptor serviceDescriptor, ApplicationModel applicationModel) {
+    public static void publishServiceDefinition(ServiceDescriptor serviceDescriptor, String version, String group, ApplicationModel applicationModel) {
         if (getMetadataReports(applicationModel).size() == 0) {
             String msg = "Remote Metadata Report Server not hasn't been configured or unavailable . Unable to get Metadata from remote!";
             logger.warn(msg);
@@ -77,7 +77,7 @@ public static void publishServiceDefinition(ServiceDescriptor serviceDescriptor,
                 for (Map.Entry<String, MetadataReport> entry : getMetadataReports(applicationModel).entrySet()) {
                     MetadataReport metadataReport = entry.getValue();
                     metadataReport.storeProviderMetadata(new MetadataIdentifier(serviceName,
-                        "", "",
+                        version, group,
                         PROVIDER_SIDE, applicationModel.getApplicationName()), serviceDefinition);
                 }
                 return;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ProfilerServerFilter.java
Patch:
@@ -76,14 +76,14 @@ private void afterInvoke(Invoker<?> invoker, Invocation invocation) {
 
     private void dumpIfNeed(Invoker<?> invoker, Invocation invocation, ProfilerEntry profiler) {
         int timeout;
-        Object timeoutKey = invocation.getObjectAttachment(TIMEOUT_KEY);
+        Object timeoutKey = invocation.getObjectAttachmentWithoutConvert(TIMEOUT_KEY);
         if (timeoutKey instanceof Integer) {
             timeout = (Integer) timeoutKey;
         } else {
-            timeout = invoker.getUrl().getParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT);
+            timeout = invoker.getUrl().getMethodPositiveParameter(invocation.getMethodName(), TIMEOUT_KEY, DEFAULT_TIMEOUT);
         }
         long usage = profiler.getEndTime() - profiler.getStartTime();
-        if (usage > (timeout * 1000_000 * ProfilerSwitch.getWarnPercent())) {
+        if ((usage / (1000_000L * ProfilerSwitch.getWarnPercent())) > timeout) {
 
             StringBuilder attachment = new StringBuilder();
             for (Map.Entry<String, Object> entry : invocation.getObjectAttachments().entrySet()) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java
Patch:
@@ -101,14 +101,14 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
                 Profiler.release(bizProfiler);
                 if (!containsBizProfiler) {
                     int timeout;
-                    Object timeoutKey = rpcInvocation.getObjectAttachment(TIMEOUT_KEY);
+                    Object timeoutKey = rpcInvocation.getObjectAttachmentWithoutConvert(TIMEOUT_KEY);
                     if (timeoutKey instanceof Integer) {
                         timeout = (Integer) timeoutKey;
                     } else {
-                        timeout = url.getParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT);
+                        timeout = url.getMethodPositiveParameter(methodName, TIMEOUT_KEY, DEFAULT_TIMEOUT);
                     }
                     long usage = bizProfiler.getEndTime() - bizProfiler.getStartTime();
-                    if (usage > (timeout * 1000_000 * ProfilerSwitch.getWarnPercent())) {
+                    if ((usage / (1000_000L * ProfilerSwitch.getWarnPercent())) > timeout) {
                         StringBuilder attachment = new StringBuilder();
                         for (Map.Entry<String, Object> entry : rpcInvocation.getObjectAttachments().entrySet()) {
                             attachment.append(entry.getKey()).append("=").append(entry.getValue()).append(";\n");

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/BaseOffline.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.List;
 
 public class BaseOffline implements BaseCommand {
-    private Logger logger = LoggerFactory.getLogger(OfflineInterface.class);
+    private Logger logger = LoggerFactory.getLogger(BaseOffline.class);
     public FrameworkServiceRepository serviceRepository;
 
     public BaseOffline(FrameworkModel frameworkModel) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/BaseOnline.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.List;
 
 public class BaseOnline implements BaseCommand {
-    private static final Logger logger = LoggerFactory.getLogger(Online.class);
+    private static final Logger logger = LoggerFactory.getLogger(BaseOnline.class);
     public FrameworkServiceRepository serviceRepository;
 
     public BaseOnline(FrameworkModel frameworkModel) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java
Patch:
@@ -251,7 +251,7 @@ private void waitForResultIfSync(AsyncRpcResult asyncResult, RpcInvocation invoc
              * must call {@link java.util.concurrent.CompletableFuture#get(long, TimeUnit)} because
              * {@link java.util.concurrent.CompletableFuture#get()} was proved to have serious performance drop.
              */
-            Object timeout = invocation.get(TIMEOUT_KEY);
+            Object timeout = invocation.getObjectAttachment(TIMEOUT_KEY);
             if (timeout instanceof Integer) {
                 asyncResult.get((Integer) timeout, TimeUnit.MILLISECONDS);
             } else {

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -100,7 +100,7 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
         try {
             boolean isOneway = RpcUtils.isOneway(getUrl(), invocation);
             int timeout = calculateTimeout(invocation, methodName);
-            invocation.put(TIMEOUT_KEY, timeout);
+            invocation.setAttachment(TIMEOUT_KEY, timeout);
             if (isOneway) {
                 boolean isSent = getUrl().getMethodParameter(methodName, Constants.SENT_KEY, false);
                 currentClient.send(inv, isSent);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -86,7 +86,7 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
             getUrl().getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION));
         try {
             int timeout = calculateTimeout(invocation, methodName);
-            invocation.put(TIMEOUT_KEY, timeout);
+            invocation.setAttachment(TIMEOUT_KEY, timeout);
             ExecutorService executor = getCallbackExecutor(getUrl(), inv);
             // create request.
             Request req = new Request();

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -188,9 +188,9 @@ public List<Invoker<T>> list(Invocation invocation) throws RpcException {
         List<Invoker<T>> routedResult = doList(availableInvokers, invocation);
         if (routedResult.isEmpty()) {
             logger.warn("No provider available after connectivity filter for the service " + getConsumerUrl().getServiceKey()
-                + " all validInvokers' size: " + validInvokers.size()
-                + "/ all routed invokers' size: " + routedResult.size()
-                + "/ all invokers' size: " + invokers.size()
+                + " All validInvokers' size: " + validInvokers.size()
+                + " All routed invokers' size: " + routedResult.size()
+                + " All invokers' size: " + invokers.size()
                 + " from registry " + getUrl().getAddress()
                 + " on the consumer " + NetUtils.getLocalHost()
                 + " using the dubbo version " + Version.getVersion() + ".");

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/AppStateRouterFactory.java
Patch:
@@ -23,8 +23,9 @@
 
 /**
  * Application level router factory
+ * AppRouter should after ServiceRouter
  */
-@Activate(order = 200)
+@Activate(order = 150)
 public class AppStateRouterFactory implements StateRouterFactory {
     public static final String NAME = "app";
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ServiceStateRouterFactory.java
Patch:
@@ -23,8 +23,9 @@
 
 /**
  * Service level router factory
+ * ServiceRouter should before AppRouter
  */
-@Activate(order = 300)
+@Activate(order = 140)
 public class ServiceStateRouterFactory extends CacheableStateRouterFactory {
 
     public static final String NAME = "service";

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockStateRouterFactory.java
Patch:
@@ -24,7 +24,7 @@
 /**
  *
  */
-@Activate
+@Activate(order = -100)
 public class MockStateRouterFactory implements StateRouterFactory {
     public static final String NAME = "mock";
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectoryTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.cluster.directory;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.Holder;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcInvocation;
@@ -58,7 +59,7 @@ public void testStaticDirectory() {
         BitList<Invoker<String>> invokers = new BitList<>(originInvokers);
 
 
-        List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + NetUtils.getLocalHost() + "/com.foo.BarService"), new RpcInvocation(), false).getResult();
+        List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + NetUtils.getLocalHost() + "/com.foo.BarService"), new RpcInvocation(), false, new Holder<>());
         StaticDirectory<String> staticDirectory = new StaticDirectory<>(filteredInvokers);
         boolean isAvailable = staticDirectory.isAvailable();
         Assertions.assertTrue(!isAvailable);

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java
Patch:
@@ -39,7 +39,6 @@
 
 import javax.script.ScriptEngineManager;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 import static org.apache.dubbo.common.constants.CommonConstants.ENABLE_CONNECTIVITY_VALIDATION;
@@ -173,7 +172,7 @@ private void initDic(URL url) {
         URL dicInitUrl = URL.valueOf("consumer://localhost:20880/org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest?application=FileRouterEngineTest");
         dic = new StaticDirectory<>(dicInitUrl, invokers);
         dic.buildRouterChain();
-        dic.getRouterChain().initWithStateRouters(Collections.singletonList(routerFactory.getRouter(FileRouterEngineTest.class, url)));
+        dic.getRouterChain().setHeadStateRouter(routerFactory.getRouter(FileRouterEngineTest.class, url));
     }
 
     static class MockClusterInvoker<T> extends AbstractClusterInvoker<T> {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelectorTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.cluster.router.mock;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.Holder;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.cluster.router.state.BitList;
@@ -53,15 +54,15 @@ public void test() {
 
         selector.notify(providers);
         // rpcInvocation does not have an attached "invocation.need.mock" parameter, so normal invokers will be filtered out
-        List<Invoker<DemoService>> invokers = selector.route(providers.clone(), consumerURL, rpcInvocation, false).getResult();
+        List<Invoker<DemoService>> invokers = selector.route(providers.clone(), consumerURL, rpcInvocation, false, new Holder<>());
         Assertions.assertEquals(invokers.size(),1);
         Assertions.assertTrue(invokers.contains(invoker3));
 
         // rpcInvocation have an attached "invocation.need.mock" parameter, so it will filter out the invoker whose protocol is mock
         Map<String,Object> attachments = new HashMap<>();
         attachments.put(INVOCATION_NEED_MOCK,"true");
         Mockito.when(rpcInvocation.getObjectAttachments()).thenReturn(attachments);
-        invokers = selector.route(providers.clone(), consumerURL, rpcInvocation, false).getResult();
+        invokers = selector.route(providers.clone(), consumerURL, rpcInvocation, false, new Holder<>());
         Assertions.assertEquals(invokers.size(),2);
         Assertions.assertTrue(invokers.contains(invoker1));
         Assertions.assertTrue(invokers.contains(invoker2));

File: dubbo-native/src/main/java/org/apache/dubbo/rpc/cluster/router/state/StateRouterFactory$Adaptive.java
Patch:
@@ -15,10 +15,11 @@
  * limitations under the License.
  */
 package org.apache.dubbo.rpc.cluster.router.state;
+import org.apache.dubbo.common.URL;
 import org.apache.dubbo.rpc.model.ScopeModel;
 import org.apache.dubbo.rpc.model.ScopeModelUtil;
 public class StateRouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.router.state.StateRouterFactory {
-public org.apache.dubbo.rpc.cluster.router.state.StateRouter getRouter(java.lang.Class arg0, org.apache.dubbo.common.URL arg1)  {
+public <T> org.apache.dubbo.rpc.cluster.router.state.StateRouter<T> getRouter(Class<T> arg0, URL arg1)  {
 if (arg0 == null) throw new IllegalArgumentException("url == null");
 org.apache.dubbo.common.URL url = arg1;
 String extName = ( url.getProtocol() == null ? "adaptive" : url.getProtocol() );

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/AbstractCompiler.java
Patch:
@@ -37,7 +37,7 @@ public abstract class AbstractCompiler implements Compiler {
     private static final Map<String, Lock> CLASS_IN_CREATION_MAP = new ConcurrentHashMap<>();
 
     @Override
-    public Class<?> compile(String code, ClassLoader classLoader) {
+    public Class<?> compile(Class<?> neighbor, String code, ClassLoader classLoader) {
         code = code.trim();
         Matcher matcher = PACKAGE_PATTERN.matcher(code);
         String pkg;
@@ -67,7 +67,7 @@ public Class<?> compile(String code, ClassLoader classLoader) {
                 throw new IllegalStateException("The java code not endsWith \"}\", code: \n" + code + "\n");
             }
             try {
-                return doCompile(classLoader, className, code);
+                return doCompile(neighbor, classLoader, className, code);
             } catch (RuntimeException t) {
                 throw t;
             } catch (Throwable t) {
@@ -78,6 +78,6 @@ public Class<?> compile(String code, ClassLoader classLoader) {
         }
     }
 
-    protected abstract Class<?> doCompile(ClassLoader classLoader, String name, String source) throws Throwable;
+    protected abstract Class<?> doCompile(Class<?> neighbor,ClassLoader classLoader, String name, String source) throws Throwable;
 
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/AdaptiveCompiler.java
Patch:
@@ -41,7 +41,7 @@ public static void setDefaultCompiler(String compiler) {
     }
 
     @Override
-    public Class<?> compile(String code, ClassLoader classLoader) {
+    public Class<?> compile(Class<?> neighbor, String code, ClassLoader classLoader) {
         Compiler compiler;
         ExtensionLoader<Compiler> loader = frameworkModel.getExtensionLoader(Compiler.class);
         String name = DEFAULT_COMPILER; // copy reference
@@ -50,7 +50,7 @@ public Class<?> compile(String code, ClassLoader classLoader) {
         } else {
             compiler = loader.getDefaultExtension();
         }
-        return compiler.compile(code, classLoader);
+        return compiler.compile(neighbor, code, classLoader);
     }
 
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/CtClassBuilder.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.common.compiler.support;
 
+import org.apache.dubbo.common.bytecode.DubboLoaderClassPath;
+
 import javassist.CannotCompileException;
 import javassist.ClassPool;
 import javassist.CtClass;
@@ -141,6 +143,7 @@ protected String getQualifiedClassName(String className) {
     public CtClass build(ClassLoader classLoader) throws NotFoundException, CannotCompileException {
         ClassPool pool = new ClassPool(true);
         pool.insertClassPath(new LoaderClassPath(classLoader));
+        pool.insertClassPath(new DubboLoaderClassPath());
         
         // create class
         CtClass ctClass = pool.makeClass(className, pool.get(superClassName));

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java
Patch:
@@ -110,7 +110,7 @@ public JdkCompiler(String javaVersion) {
     }
 
     @Override
-    public Class<?> doCompile(ClassLoader ignored, String name, String sourceCode) throws Throwable {
+    public Class<?> doCompile(Class<?> neighbor, ClassLoader ignored, String name, String sourceCode) throws Throwable {
         int i = name.lastIndexOf('.');
         String packageName = i < 0 ? "" : name.substring(0, i);
         String className = i < 0 ? name : name.substring(i + 1);

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -1244,7 +1244,7 @@ private Class<?> createAdaptiveExtensionClass() {
         String code = new AdaptiveClassCodeGenerator(type, cachedDefaultName).generate();
         org.apache.dubbo.common.compiler.Compiler compiler = extensionDirector.getExtensionLoader(
             org.apache.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();
-        return compiler.compile(code, classLoader);
+        return compiler.compile(type, code, classLoader);
     }
 
     private Environment getEnvironment() {

File: dubbo-common/src/main/java/org/apache/dubbo/config/ConfigCenterConfig.java
Patch:
@@ -70,7 +70,7 @@ public class ConfigCenterConfig extends AbstractConfig {
     private String password;
 
     /**
-     * The default value is 3000L;
+     * The default value is 30000L;
      */
     private Long timeout;
 
@@ -130,7 +130,7 @@ protected void checkDefault() {
             group = CommonConstants.DUBBO;
         }
         if (timeout == null) {
-            timeout = 3000L;
+            timeout = 30000L;
         }
 //        if (highestPriority == null) {
 //            highestPriority = true;

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ClassGeneratorTest.java
Patch:
@@ -50,7 +50,7 @@ public void testMain() throws Exception {
         cg.addMethod("public void setName(" + Bean.class.getName() + " o, Object name){ FNAME.set($1, $2); }");
 
         cg.addDefaultConstructor();
-        Class<?> cl = cg.toClass();
+        Class<?> cl = cg.toClass(Bean.class);
         cl.getField("FNAME").set(null, fname);
 
         System.out.println(cl.getName());
@@ -80,7 +80,7 @@ public void testMain0() throws Exception {
         cg.addMethod("public void setName(" + Bean.class.getName() + " o, Object name){ FNAME.set($1, $2); }");
 
         cg.addDefaultConstructor();
-        Class<?> cl = cg.toClass();
+        Class<?> cl = cg.toClass(Bean.class);
         cl.getField("FNAME").set(null, fname);
 
         System.out.println(cl.getName());

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ProxyTest.java
Patch:
@@ -20,10 +20,13 @@
 import net.sf.cglib.proxy.MethodInterceptor;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.DisabledForJreRange;
+import org.junit.jupiter.api.condition.JRE;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNull;
 
+@DisabledForJreRange(min = JRE.JAVA_16)
 public class ProxyTest {
 
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/AdaptiveCompilerTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.common.compiler.support;
 
 import org.apache.dubbo.rpc.model.FrameworkModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -27,7 +28,7 @@ public void testAvailableCompiler() throws Exception {
         AdaptiveCompiler.setDefaultCompiler("jdk");
         AdaptiveCompiler compiler = new AdaptiveCompiler();
         compiler.setFrameworkModel(FrameworkModel.defaultModel());
-        Class<?> clazz = compiler.compile(getSimpleCode(), AdaptiveCompiler.class.getClassLoader());
+        Class<?> clazz = compiler.compile(JavaCodeTest.class, getSimpleCode(), AdaptiveCompiler.class.getClassLoader());
         HelloService helloService = (HelloService) clazz.newInstance();
         Assertions.assertEquals("Hello world!", helloService.sayHello());
     }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.config.utils.ConfigValidationUtils;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConfigCenterConfigTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.test.check.registrycenter.config.ZookeeperRegistryCenterConfig;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -67,7 +68,7 @@ public void testToUrl() {
 
         Assertions.assertEquals(ZookeeperRegistryCenterConfig.getConnectionAddress()+"/ConfigCenterConfig?check=true&" +
                         "config-file=dubbo.properties&group=group&" +
-                        "namespace=namespace&timeout=3000",
+                        "namespace=namespace&timeout=30000",
                 config.toUrl().toFullString()
         );
     }

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/test/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationTest.java
Patch:
@@ -62,7 +62,7 @@ public static void setUp() throws Exception {
         zookeeperServerPort1 = Integer.parseInt(zookeeperConnectionAddress1.substring(zookeeperConnectionAddress1.lastIndexOf(":") + 1));
 
         client = CuratorFrameworkFactory.newClient("127.0.0.1:" + zookeeperServerPort1, 60 * 1000, 60 * 1000,
-                new ExponentialBackoffRetry(1000, 3));
+            new ExponentialBackoffRetry(1000, 3));
         client.start();
 
         try {

File: dubbo-metadata/dubbo-metadata-processor/src/test/java/org/apache/dubbo/metadata/annotation/processing/util/MethodUtilsTest.java
Patch:
@@ -67,7 +67,8 @@ public void testDeclaredMethods() {
         assertEquals(12, methods.size());
 
         methods = getAllDeclaredMethods(type);
-        assertEquals(34, methods.size());
+        // registerNatives() no provided in JDK 17
+        assertTrue(methods.size() >= 33);
 
         assertTrue(getAllDeclaredMethods((TypeElement) null).isEmpty());
         assertTrue(getAllDeclaredMethods((TypeMirror) null).isEmpty());

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/CacheableFailbackRegistry.java
Patch:
@@ -134,7 +134,7 @@ protected List<URL> toUrlsWithoutEmpty(URL consumer, Collection<String> provider
         Map<String, ServiceAddressURL> newURLs;
         URL copyOfConsumer = removeParamsFromConsumer(consumer);
         if (oldURLs == null) {
-            newURLs = new HashMap<>();
+            newURLs = new HashMap<>((int) (providers.size() / 0.75f + 1));
             for (String rawProvider : providers) {
                 rawProvider = stripOffVariableKeys(rawProvider);
                 ServiceAddressURL cachedURL = createURL(rawProvider, copyOfConsumer, getExtraParameters());
@@ -145,7 +145,7 @@ protected List<URL> toUrlsWithoutEmpty(URL consumer, Collection<String> provider
                 newURLs.put(rawProvider, cachedURL);
             }
         } else {
-            newURLs = new HashMap<>((int) (oldURLs.size() / .75 + 1));
+            newURLs = new HashMap<>((int) (providers.size() / 0.75f + 1));
             // maybe only default , or "env" + default
             for (String rawProvider : providers) {
                 rawProvider = stripOffVariableKeys(rawProvider);

File: dubbo-registry/dubbo-registry-multiple/src/test/java/org/apache/dubbo/registry/multiple/MultipleRegistry2S2RTest.java
Patch:
@@ -95,10 +95,10 @@ public void testParamConfig() {
         Assertions.assertNotNull(MultipleRegistryTestUtil.getZookeeperRegistry(multipleRegistry.getReferenceRegistries().values()));
 
         Assertions.assertEquals(MultipleRegistryTestUtil.getZookeeperRegistry(multipleRegistry.getServiceRegistries().values()),
-                MultipleRegistryTestUtil.getZookeeperRegistry(multipleRegistry.getReferenceRegistries().values()));
+            MultipleRegistryTestUtil.getZookeeperRegistry(multipleRegistry.getReferenceRegistries().values()));
 
         Assertions.assertEquals(MultipleRegistryTestUtil.getZookeeperRegistry(multipleRegistry.getServiceRegistries().values()),
-                MultipleRegistryTestUtil.getZookeeperRegistry(multipleRegistry.getReferenceRegistries().values()));
+            MultipleRegistryTestUtil.getZookeeperRegistry(multipleRegistry.getReferenceRegistries().values()));
 
         Assertions.assertEquals(multipleRegistry.getApplicationName(), "vic");
 

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryTest.java
Patch:
@@ -30,6 +30,8 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.DisabledForJreRange;
+import org.junit.jupiter.api.condition.JRE;
 import org.mockito.internal.util.collections.Sets;
 
 import java.util.HashMap;
@@ -49,6 +51,7 @@
  *
  * @since 2.7.5
  */
+@DisabledForJreRange(min = JRE.JAVA_16)
 public class ZookeeperServiceDiscoveryTest {
 
     private static final String SERVICE_NAME = "A";

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/zookeeper/AbstractZookeeperClient.java
Patch:
@@ -33,7 +33,8 @@ public abstract class AbstractZookeeperClient<TargetDataListener, TargetChildLis
 
     protected static final Logger logger = LoggerFactory.getLogger(AbstractZookeeperClient.class);
 
-    protected int DEFAULT_CONNECTION_TIMEOUT_MS = 5 * 1000;
+    // may hang up to wait name resolution up to 10s
+    protected int DEFAULT_CONNECTION_TIMEOUT_MS = 30 * 1000;
     protected int DEFAULT_SESSION_TIMEOUT_MS = 60 * 1000;
 
     private final URL url;

File: dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperTransporterTest.java
Patch:
@@ -21,11 +21,14 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.DisabledForJreRange;
+import org.junit.jupiter.api.condition.JRE;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.IsNot.not;
 import static org.hamcrest.core.IsNull.nullValue;
 
+@DisabledForJreRange(min = JRE.JAVA_16)
 public class CuratorZookeeperTransporterTest {
     private ZookeeperClient zookeeperClient;
     private CuratorZookeeperTransporter curatorZookeeperTransporter;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AppResponse.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.dubbo.rpc;
 
-import org.apache.dubbo.rpc.proxy.InvokerInvocationHandler;
-
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
@@ -80,7 +78,7 @@ public Object recreate() throws Throwable {
         if (exception != null) {
             // fix issue#619
             try {
-                Object stackTrace = InvokerInvocationHandler.stackTraceField.get(exception);
+                Object stackTrace = exception.getStackTrace();
                 if (stackTrace == null) {
                     exception.setStackTrace(new StackTraceElement[0]);
                 }

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ArgumentCallbackTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.rpc.model.ConsumerModel;
 import org.apache.dubbo.rpc.model.ModuleServiceRepository;
 import org.apache.dubbo.rpc.protocol.dubbo.support.ProtocolUtils;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-rpc/dubbo-rpc-injvm/src/test/java/org/apache/dubbo/rpc/protocol/injvm/InjvmDeepCopyTest.java
Patch:
@@ -89,7 +89,7 @@ public void testDeepCopy() {
         applicationModel.destroy();
     }
 
-    private interface DemoInterface {
+    interface DemoInterface {
         Data call(Data obj);
     }
 

File: dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/AbstractRegistryCenterTestExecutionListener.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.platform.launcher.TestExecutionListener;
 import org.junit.platform.launcher.TestIdentifier;
 import org.junit.platform.launcher.TestPlan;
+
 import java.util.HashSet;
 import java.util.Set;
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvokerTest.java
Patch:
@@ -295,7 +295,7 @@ public void testInvokerDestroyAndReList() {
             }
             invokers.clear();
             MockInvoker<Demo> invoker3 = new MockInvoker<>(Demo.class, url);
-            invoker3.setResult(AsyncRpcResult.newDefaultAsyncResult(null));
+            invoker3.setResult(AsyncRpcResult.newDefaultAsyncResult(mock(RpcInvocation.class)));
             invokers.add(invoker3);
             dic.notify(invokers);
             return null;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/wrapper/AbstractClusterTest.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.dubbo.rpc.cluster.filter.DemoService;
 import org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder;
 import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker;
-
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -69,7 +69,7 @@ public void testBuildClusterInvokerChain() {
         Invoker<?> invoker = demoCluster.join(directory, true);
         Assertions.assertTrue(invoker instanceof AbstractCluster.ClusterFilterInvoker);
         Assertions.assertTrue(((AbstractCluster.ClusterFilterInvoker<?>) invoker).getFilterInvoker()
-            instanceof FilterChainBuilder.ClusterFilterChainNode);
+            instanceof FilterChainBuilder.ClusterCallbackRegistrationInvoker);
 
 
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/Experimental.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Indicating unstable API, may get removed or changed in the next release.
+ * Indicating unstable API, may get removed or changed in future releases.
  */
 @Retention(RetentionPolicy.CLASS)
 @Target({

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/ListenableFilter.java
Patch:
@@ -23,9 +23,10 @@
  * It's recommended to implement Filter.Listener directly for callback registration, check the default implementation,
  * see {@link org.apache.dubbo.rpc.filter.ExceptionFilter}, for example.
  * <p>
- * If you do not want to share Listener instance between RPC calls. You can use ListenableFilter
+ * If you do not want to share Listener instance between RPC calls. ListenableFilter can be used
  * to keep a 'one Listener each RPC call' model.
  */
+@Deprecated
 public abstract class ListenableFilter implements Filter {
 
     protected Listener listener = null;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -133,7 +133,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             context.clearAfterEachInvoke(true);
             RpcContext.removeServerAttachment();
             RpcContext.removeServiceContext();
-            // IMPORTANT! For async scenario, we must remove context from current thread, so we always create a new RpcContext for the next invoke for the same thread.
+            // IMPORTANT! For async scenario, context must be removed from current thread, so a new RpcContext is always created for the next invoke for the same thread.
             RpcContext.getClientAttachment().removeAttachment(TIME_COUNTDOWN_KEY);
             RpcContext.removeServerContext();
         }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyInvoker.java
Patch:
@@ -108,10 +108,10 @@ public Result invoke(Invocation invocation) throws RpcException {
     }
 
     private CompletableFuture<Object> wrapWithFuture(Object value) {
-        if (RpcContext.getServiceContext().isAsyncStarted()) {
-            return ((AsyncContextImpl)(RpcContext.getServiceContext().getAsyncContext())).getInternalFuture();
-        } else if (value instanceof CompletableFuture) {
+        if (value instanceof CompletableFuture) {
             return (CompletableFuture<Object>) value;
+        } else if (RpcContext.getServiceContext().isAsyncStarted()) {
+            return ((AsyncContextImpl) (RpcContext.getServiceContext().getAsyncContext())).getInternalFuture();
         }
         return CompletableFuture.completedFuture(value);
     }

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/EchoFilterTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
+import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.support.DemoService;
 
 import org.junit.jupiter.api.Test;
@@ -37,7 +38,7 @@ public class EchoFilterTest {
     @SuppressWarnings("unchecked")
     @Test
     public void testEcho() {
-        Invocation invocation = mock(Invocation.class);
+        Invocation invocation = mock(RpcInvocation.class);
         given(invocation.getMethodName()).willReturn("$echo");
         given(invocation.getParameterTypes()).willReturn(new Class<?>[]{Enum.class});
         given(invocation.getArguments()).willReturn(new Object[]{"hello"});

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/TimeoutFilterTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
+import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.support.BlockMyInvoker;
 
 import org.junit.jupiter.api.Assertions;
@@ -56,7 +57,7 @@ public void testInvokeWithTimeout() throws Exception {
         URL url = URL.valueOf("test://test:11/test?accesslog=true&group=dubbo&version=1.1&timeout=" + timeout);
         Invoker invoker = new BlockMyInvoker(url, (timeout + 100));
 
-        Invocation invocation = Mockito.mock(Invocation.class);
+        Invocation invocation = Mockito.mock(RpcInvocation.class);
         when(invocation.getMethodName()).thenReturn("testInvokeWithTimeout");
 
         Result result = timeoutFilter.invoke(invoker, invocation);

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/MockInvocation.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.rpc.support;
 
 import org.apache.dubbo.rpc.AttachmentsAdapter;
-import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.model.ServiceModel;
 
 import java.util.HashMap;
@@ -34,7 +34,7 @@
 /**
  * MockInvocation.java
  */
-public class MockInvocation implements Invocation {
+public class MockInvocation extends RpcInvocation {
 
     private Map<String, Object> attachments;
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ClassLoaderFilter.java
Patch:
@@ -33,7 +33,7 @@ public class ClassLoaderFilter implements Filter {
     @Override
     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
         ClassLoader ocl = Thread.currentThread().getContextClassLoader();
-        Thread.currentThread().setContextClassLoader(invoker.getInterface().getClassLoader());
+        Thread.currentThread().setContextClassLoader(invocation.getServiceModel().getClassLoader());
         try {
             return invoker.invoke(invocation);
         } finally {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/ClusterScopeModelInitializer.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.beans.factory.ScopeBeanFactory;
 import org.apache.dubbo.rpc.cluster.merger.MergerFactory;
+import org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleManager;
 import org.apache.dubbo.rpc.cluster.support.ClusterUtils;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
@@ -39,6 +40,7 @@ public void initializeApplicationModel(ApplicationModel applicationModel) {
 
     @Override
     public void initializeModuleModel(ModuleModel moduleModel) {
-
+        ScopeBeanFactory beanFactory = moduleModel.getBeanFactory();
+        beanFactory.registerBean(MeshRuleManager.class);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/BoolMatch.java
Patch:
@@ -29,9 +29,9 @@ public void setExact(Boolean exact) {
         this.exact = exact;
     }
 
-    public static boolean isMatch(BoolMatch boolMatch,boolean input){
-        if (boolMatch.getExact() != null){
-            return input == boolMatch.getExact();
+    public boolean isMatch(boolean input){
+        if (exact != null){
+            return input == exact;
         }
         return false;
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListBoolMatch.java
Patch:
@@ -31,10 +31,10 @@ public void setOneof(List<BoolMatch> oneof) {
         this.oneof = oneof;
     }
 
-    public static boolean isMatch(ListBoolMatch listBoolMatch, boolean input) {
+    public boolean isMatch(boolean input) {
 
-        for (BoolMatch boolMatch : listBoolMatch.getOneof()) {
-            if (BoolMatch.isMatch(boolMatch, input)) {
+        for (BoolMatch boolMatch : oneof) {
+            if (boolMatch.isMatch(input)) {
                 return true;
             }
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListDoubleMatch.java
Patch:
@@ -31,10 +31,10 @@ public void setOneof(List<DoubleMatch> oneof) {
         this.oneof = oneof;
     }
 
-    public static boolean isMatch(ListDoubleMatch listDoubleMatch, Double input) {
+    public boolean isMatch(Double input) {
 
-        for (DoubleMatch doubleMatch : listDoubleMatch.getOneof()) {
-            if (DoubleMatch.isMatch(doubleMatch, input)) {
+        for (DoubleMatch doubleMatch : oneof) {
+            if (doubleMatch.isMatch(input)) {
                 return true;
             }
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListStringMatch.java
Patch:
@@ -32,10 +32,10 @@ public void setOneof(List<StringMatch> oneof) {
     }
 
 
-    public static boolean isMatch(ListStringMatch listStringMatch, String input) {
+    public boolean isMatch(String input) {
 
-        for (StringMatch stringMatch : listStringMatch.getOneof()) {
-            if (StringMatch.isMatch(stringMatch, input)) {
+        for (StringMatch stringMatch : oneof) {
+            if (stringMatch.isMatch(input)) {
                 return true;
             }
         }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/RouterChainTest.java
Patch:
@@ -47,7 +47,7 @@ public void testBuildRouterChain() {
             parameters);
 
         RouterChain<DemoService> routerChain = RouterChain.buildChain(DemoService.class, url);
-        Assertions.assertEquals(1, routerChain.getRouters().size());
-        Assertions.assertEquals(4, routerChain.getStateRouters().size());
+        Assertions.assertEquals(0, routerChain.getRouters().size());
+        Assertions.assertEquals(5, routerChain.getStateRouters().size());
     }
 }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListBoolMatchTest.java
Patch:
@@ -38,14 +38,14 @@ public void isMatch() {
         oneof.add(boolMatch1);
         listBoolMatch.setOneof(oneof);
 
-        assertTrue(ListBoolMatch.isMatch(listBoolMatch, true));
-        assertFalse(ListBoolMatch.isMatch(listBoolMatch, false));
+        assertTrue(listBoolMatch.isMatch(true));
+        assertFalse(listBoolMatch.isMatch(false));
 
         BoolMatch boolMatch2 = new BoolMatch();
         boolMatch2.setExact(false);
         oneof.add(boolMatch2);
         listBoolMatch.setOneof(oneof);
 
-        assertTrue(ListBoolMatch.isMatch(listBoolMatch, false));
+        assertTrue(listBoolMatch.isMatch(false));
     }
 }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListDoubleMatchTest.java
Patch:
@@ -45,8 +45,8 @@ public void isMatch() {
 
         listDoubleMatch.setOneof(oneof);
 
-        assertTrue(ListDoubleMatch.isMatch(listDoubleMatch, 10.0));
-        assertTrue(ListDoubleMatch.isMatch(listDoubleMatch, 11.0));
-        assertFalse(ListDoubleMatch.isMatch(listDoubleMatch, 12.0));
+        assertTrue(listDoubleMatch.isMatch(10.0));
+        assertTrue(listDoubleMatch.isMatch(11.0));
+        assertFalse(listDoubleMatch.isMatch(12.0));
     }
 }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListStringMatchTest.java
Patch:
@@ -46,9 +46,9 @@ public void isMatch() {
 
         listStringMatch.setOneof(oneof);
 
-        assertTrue(ListStringMatch.isMatch(listStringMatch, "1"));
-        assertTrue(ListStringMatch.isMatch(listStringMatch, "2"));
-        assertFalse(ListStringMatch.isMatch(listStringMatch, "3"));
+        assertTrue(listStringMatch.isMatch("1"));
+        assertTrue(listStringMatch.isMatch("2"));
+        assertFalse(listStringMatch.isMatch("3"));
 
     }
 }

File: dubbo-metadata/dubbo-metadata-report-redis/src/test/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReportTest.java
Patch:
@@ -43,7 +43,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER_SIDE;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
-import static org.apache.dubbo.metadata.report.support.Constants.SYNC_REPORT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SYNC_REPORT_KEY;
 import static redis.embedded.RedisServer.newRedisServer;
 
 public class RedisMetadataReportTest {

File: dubbo-common/src/main/java/org/apache/dubbo/common/status/reporter/FrameworkStatusReportService.java
Patch:
@@ -64,8 +64,9 @@ private void doReport(String type, Object obj) {
         // TODO, report asynchronously
         try {
             if (CollectionUtils.isNotEmpty(reporters)) {
-                FrameworkStatusReporter reporter = reporters.iterator().next();
-                reporter.report(type, obj);
+                for (FrameworkStatusReporter reporter : reporters) {
+                    reporter.report(type, obj);
+                }
             }
         } catch (Exception e) {
             logger.info("Report " + type + " status failed because of " + e.getMessage());

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -475,7 +475,7 @@ public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {
         // group="a,b" or group="*"
         Map<String, String> qs = (Map<String, String>) url.getAttribute(REFER_KEY);
         String group = qs.get(GROUP_KEY);
-        if (group != null && group.length() > 0) {
+        if (StringUtils.isNotEmpty(group)) {
             if ((COMMA_SPLIT_PATTERN.split(group)).length > 1 || "*".equals(group)) {
                 return doRefer(Cluster.getCluster(url.getScopeModel(), MergeableCluster.NAME), registry, type, url, qs);
             }

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/MigrationInvokerTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.registry.client.migration;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.status.reporter.FrameworkStatusReportService;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.registry.client.migration.model.MigrationRule;
 import org.apache.dubbo.registry.client.migration.model.MigrationStep;
@@ -44,6 +45,7 @@ public void before() {
         ApplicationConfig applicationConfig = new ApplicationConfig();
         applicationConfig.setName("Test");
         ApplicationModel.defaultModel().getApplicationConfigManager().setApplication(applicationConfig);
+        ApplicationModel.defaultModel().getBeanFactory().registerBean(FrameworkStatusReportService.class);
     }
 
     @AfterEach
@@ -85,6 +87,7 @@ public void test() {
         Mockito.when(consumerURL.getVersion()).thenReturn("0.0.0");
         Mockito.when(consumerURL.getServiceKey()).thenReturn("Group/Test:0.0.0");
         Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn("Test:0.0.0");
+        Mockito.when(consumerURL.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());
 
         Mockito.when(invoker.getUrl()).thenReturn(consumerURL);
         Mockito.when(serviceDiscoveryInvoker.getUrl()).thenReturn(consumerURL);

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationUtils.java
Patch:
@@ -106,15 +106,15 @@ public static int getServerShutdownTimeout(ScopeModel scopeModel) {
         Configuration configuration = getGlobalConfiguration(scopeModel);
         String value = StringUtils.trim(configuration.getString(SHUTDOWN_WAIT_KEY));
 
-        if (value != null && value.length() > 0) {
+        if (StringUtils.isNotEmpty(value)) {
             try {
                 timeout = Integer.parseInt(value);
             } catch (Exception e) {
                 // ignore
             }
         } else {
             value = StringUtils.trim(configuration.getString(SHUTDOWN_WAIT_SECONDS_KEY));
-            if (value != null && value.length() > 0) {
+            if (StringUtils.isNotEmpty(value)) {
                 try {
                     timeout = Integer.parseInt(value) * 1000;
                 } catch (Exception e) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/TreePathDynamicConfiguration.java
Patch:
@@ -61,7 +61,7 @@ public abstract class TreePathDynamicConfiguration extends AbstractDynamicConfig
      */
     public static final String DEFAULT_CONFIG_BASE_PATH = "/config";
 
-    private final String rootPath;
+    protected final String rootPath;
 
     public TreePathDynamicConfiguration(URL url) {
         super(url);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryFactory.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.extension.Adaptive;
 import org.apache.dubbo.common.extension.SPI;
 
+import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
 import static org.apache.dubbo.common.extension.ExtensionScope.APPLICATION;
 
 /**
@@ -44,7 +45,7 @@ public interface RegistryFactory {
      * @param url Registry address, is not allowed to be empty
      * @return Registry reference, never return empty value
      */
-    @Adaptive({"protocol"})
+    @Adaptive({PROTOCOL_KEY})
     Registry getRegistry(URL url);
 
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java
Patch:
@@ -94,7 +94,7 @@ public abstract class AbstractRegistry implements Registry {
     // Local disk cache file
     private File file;
     private boolean localCacheEnabled;
-    private RegistryManager registryManager;
+    protected RegistryManager registryManager;
 
     public AbstractRegistry(URL url) {
         setUrl(url);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -64,7 +64,9 @@ public Registry getRegistry(URL url) {
         url = URLBuilder.from(url)
             .setPath(RegistryService.class.getName())
             .addParameter(INTERFACE_KEY, RegistryService.class.getName())
-            .removeParameters(EXPORT_KEY, REFER_KEY, TIMESTAMP_KEY)
+            .removeParameter(TIMESTAMP_KEY)
+            .removeAttribute(EXPORT_KEY)
+            .removeAttribute(REFER_KEY)
             .build();
         String key = createRegistryCacheKey(url);
         Registry registry = null;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -607,7 +607,7 @@ private List<ReferenceCountExchangeClient> buildReferenceCountExchangeClientList
      */
     private ReferenceCountExchangeClient buildReferenceCountExchangeClient(URL url) {
         ExchangeClient exchangeClient = initClient(url);
-        ReferenceCountExchangeClient client = new ReferenceCountExchangeClient(exchangeClient);
+        ReferenceCountExchangeClient client = new ReferenceCountExchangeClient(exchangeClient, DubboCodec.NAME);
         // read configs
         int shutdownTimeout = ConfigurationUtils.getServerShutdownTimeout(url.getScopeModel());
         client.setShutdownWaitTime(shutdownTimeout);
@@ -640,7 +640,7 @@ private ExchangeClient initClient(URL url) {
         try {
             // connection should be lazy
             if (url.getParameter(LAZY_CONNECT_KEY, false)) {
-                client = new LazyConnectExchangeClient(url, requestHandler);
+                client = new LazyConnectExchangeClient(url, requestHandler, DubboCodec.NAME, url.getParameters());
 
             } else {
                 client = Exchangers.connect(url, requestHandler);

File: dubbo-common/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -42,6 +42,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.LIVENESS_PROBE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METADATA_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METADATA_SERVICE_PORT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.METADATA_SERVICE_PROTOCOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.READINESS_PROBE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_LOCAL_FILE_CACHE_ENABLED;
 import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
@@ -532,7 +533,7 @@ public void setMetadataServicePort(Integer metadataServicePort) {
         this.metadataServicePort = metadataServicePort;
     }
 
-    @Parameter(key = METADATA_SERVICE_PORT_KEY)
+    @Parameter(key = METADATA_SERVICE_PROTOCOL_KEY)
     public String getMetadataServiceProtocol() {
         return metadataServiceProtocol;
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -183,7 +183,6 @@ private ProtocolConfig generateMetadataProtocol() {
                     if (it.hasNext()) {
                         String addr = it.next().getAddress();
                         String rawPort = addr.substring(addr.indexOf(":") + 1);
-                        logger.info("Using " + specifiedProtocol +" protocol to export MetadataService on port " + rawPort);
                         protocolConfig.setPort(Integer.parseInt(rawPort));
                     }
                 }
@@ -198,7 +197,7 @@ private ProtocolConfig generateMetadataProtocol() {
             protocolConfig.setPort(-1);
         }
 
-        logger.info("Using dubbo protocol to export metadata service on port " + protocolConfig.getPort());
+        logger.info("Using " + specifiedProtocol + " protocol to export metadata service on port " + protocolConfig.getPort());
 
         return protocolConfig;
     }

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/util/CuratorFrameworkUtils.java
Patch:
@@ -107,7 +107,7 @@ public static org.apache.curator.x.discovery.ServiceInstance<ZookeeperInstance>
         int port = serviceInstance.getPort();
         Map<String, String> metadata = serviceInstance.getSortedMetadata();
         String id = generateId(host, port);
-        ZookeeperInstance zookeeperInstance = new ZookeeperInstance(null, serviceName, metadata);
+        ZookeeperInstance zookeeperInstance = new ZookeeperInstance(id, serviceName, metadata);
         try {
             builder = builder()
                 .id(id)

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/ClientReconnectTest.java
Patch:
@@ -70,7 +70,7 @@ public void testReconnect() throws RemotingException, InterruptedException {
 
 
     public Client startClient(int port, int heartbeat) throws RemotingException {
-        final String url = "exchange://127.0.0.1:" + port + "/client.reconnect.test?check=false&client=netty3&" +
+        final String url = "exchange://127.0.0.1:" + port + "/client.reconnect.test?check=false&codec=exchange&client=netty3&" +
                 Constants.HEARTBEAT_KEY + "=" + heartbeat;
         return Exchangers.connect(url);
     }

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/NettyClientToServerTest.java
Patch:
@@ -31,14 +31,14 @@ public class NettyClientToServerTest extends ClientToServerTest {
 
     protected ExchangeServer newServer(int port, Replier<?> receiver) throws RemotingException {
         // add heartbeat cycle to avoid unstable ut.
-        URL url = URL.valueOf("exchange://localhost:" + port + "?server=netty3");
+        URL url = URL.valueOf("exchange://localhost:" + port + "?server=netty3&codec=exchange");
         url = url.addParameter(Constants.HEARTBEAT_KEY, 600 * 1000);
         return Exchangers.bind(url, receiver);
     }
 
     protected ExchangeChannel newClient(int port) throws RemotingException {
         // add heartbeat cycle to avoid unstable ut.
-        URL url = URL.valueOf("exchange://localhost:" + port + "?client=netty3&timeout=3000");
+        URL url = URL.valueOf("exchange://localhost:" + port + "?client=netty3&timeout=3000&codec=exchange");
         url = url.addParameter(Constants.HEARTBEAT_KEY, 600 * 1000);
         return Exchangers.connect(url);
     }

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/NettyStringTest.java
Patch:
@@ -40,8 +40,8 @@ public static void setUp() throws Exception {
         //int port = 10001;
         int port = NetUtils.getAvailablePort();
         System.out.println(port);
-        server = Exchangers.bind(URL.valueOf("telnet://0.0.0.0:" + port + "?server=netty3"), new TelnetServerHandler());
-        client = Exchangers.connect(URL.valueOf("telnet://127.0.0.1:" + port + "?client=netty3"), new TelnetClientHandler());
+        server = Exchangers.bind(URL.valueOf("telnet://0.0.0.0:" + port + "?server=netty3&codec=telnet"), new TelnetServerHandler());
+        client = Exchangers.connect(URL.valueOf("telnet://127.0.0.1:" + port + "?client=netty3&codec=telnet"), new TelnetClientHandler());
     }
 
     @AfterAll

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/ThreadNameTest.java
Patch:
@@ -51,10 +51,10 @@ public class ThreadNameTest {
     @BeforeEach
     public void before() throws Exception {
         int port = NetUtils.getAvailablePort(20880 + new Random().nextInt(10000));
-        serverURL = URL.valueOf("telnet://localhost?side=provider")
+        serverURL = URL.valueOf("telnet://localhost?side=provider&codec=telnet")
             .setPort(port)
             .setScopeModel(ApplicationModel.defaultModel());
-        clientURL = URL.valueOf("telnet://localhost?side=consumer")
+        clientURL = URL.valueOf("telnet://localhost?side=consumer&codec=telnet")
             .setPort(port)
             .setScopeModel(ApplicationModel.defaultModel());
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractServerStream.java
Patch:
@@ -140,7 +140,7 @@ public ProviderModel getProviderModel() {
     protected RpcInvocation buildInvocation(Metadata metadata) {
         RpcInvocation inv = new RpcInvocation(getUrl().getServiceModel(),
             getMethodName(), getServiceDescriptor().getServiceName(),
-            getUrl().getProtocolServiceKey(), getMethodDescriptor().getParameterClasses(), new Object[0]);
+            getUrl().getProtocolServiceKey(), getMethodDescriptor().getRealParameterClasses(), new Object[0]);
         inv.setTargetServiceUniqueName(getUrl().getServiceKey());
         inv.setReturnTypes(getMethodDescriptor().getReturnTypes());
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java
Patch:
@@ -58,7 +58,7 @@ final class LazyConnectExchangeClient implements ExchangeClient {
      */
     private final boolean initialState;
     private volatile ExchangeClient client;
-    private AtomicLong warningCount = new AtomicLong(0);
+    private final AtomicLong warningCount = new AtomicLong(0);
 
     public LazyConnectExchangeClient(URL url, ExchangeHandler requestHandler) {
         // lazy connect, need set send.reconnect = true, to avoid channel bad status.

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -214,6 +214,7 @@ private void refreshInvoker(List<URL> invokerUrls) {
             // use local reference to avoid NPE as this.cachedInvokerUrls will be set null by destroyAllInvokers().
             Set<URL> localCachedInvokerUrls = this.cachedInvokerUrls;
             if (invokerUrls.isEmpty() && localCachedInvokerUrls != null) {
+                logger.warn("Service" + serviceKey + " received empty address list with no EMPTY protocol set, trigger empty protection.");
                 invokerUrls.addAll(localCachedInvokerUrls);
             } else {
                 localCachedInvokerUrls = new HashSet<>();

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListenerTest.java
Patch:
@@ -99,6 +99,7 @@ public class ServiceInstancesChangedListenerTest {
     static String service3 = "org.apache.dubbo.demo.DemoService3";
 
     static URL consumerURL = URL.valueOf("dubbo://127.0.0.1/org.apache.dubbo.demo.DemoService?registry_cluster=default");
+    static URL registryURL = URL.valueOf("dubbo://127.0.0.1:2181/org.apache.dubbo.demo.RegistryService");
 
     static MetadataInfo metadataInfo_111;
     static MetadataInfo metadataInfo_222;
@@ -155,6 +156,7 @@ public static void setUp() {
         Mockito.doThrow(IllegalStateException.class).when(metadataService).getMetadataInfo("444");
 
         serviceDiscovery = Mockito.mock(ServiceDiscovery.class);
+        Mockito.doReturn(registryURL).when(serviceDiscovery).getUrl();
     }
 
     @AfterEach

File: dubbo-registry/dubbo-registry-multiple/src/main/java/org/apache/dubbo/registry/multiple/MultipleRegistry.java
Patch:
@@ -93,7 +93,7 @@ protected void initServiceRegistry(URL url, Map<String, Registry> registryMap) {
                 serviceRegistries.put(tmpUrl, registryMap.get(tmpUrl));
                 continue;
             }
-            final URL registryUrl = URL.valueOf(tmpUrl).addParameterIfAbsent(CHECK_KEY, url.getParameter(CHECK_KEY, "true"));
+            final URL registryUrl = URL.valueOf(tmpUrl).addParametersIfAbsent(url.getParameters()).addParameterIfAbsent(CHECK_KEY, url.getParameter(CHECK_KEY, "true"));
             Registry registry = registryFactory.getRegistry(registryUrl);
             registryMap.put(tmpUrl, registry);
             serviceRegistries.put(tmpUrl, registry);

File: dubbo-registry/dubbo-registry-multiple/src/test/java/org/apache/dubbo/registry/multiple/MultipleRegistry2S2RTest.java
Patch:
@@ -22,9 +22,11 @@
 import org.apache.dubbo.registry.zookeeper.ZookeeperRegistry;
 import org.apache.dubbo.remoting.zookeeper.ZookeeperClient;
 import org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -52,7 +54,7 @@ public static void beforeAll() {
         zookeeperConnectionAddress1 = System.getProperty("zookeeper.connection.address.1");
         zookeeperConnectionAddress2 = System.getProperty("zookeeper.connection.address.2");
 
-        URL url = URL.valueOf("multiple://127.0.0.1?application=vic&" +
+        URL url = URL.valueOf("multiple://127.0.0.1?application=vic&enable-empty-protection=false&" +
             MultipleRegistry.REGISTRY_FOR_SERVICE + "=" + zookeeperConnectionAddress1 + "," + zookeeperConnectionAddress2 + "&"
             + MultipleRegistry.REGISTRY_FOR_REFERENCE + "=" + zookeeperConnectionAddress1 + "," + zookeeperConnectionAddress2);
         multipleRegistry = (MultipleRegistry) new MultipleRegistryFactory().createRegistry(url);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java
Patch:
@@ -58,7 +58,7 @@ final class LazyConnectExchangeClient implements ExchangeClient {
      */
     private final boolean initialState;
     private volatile ExchangeClient client;
-    private AtomicLong warningCount = new AtomicLong(0);
+    private final AtomicLong warningCount = new AtomicLong(0);
 
     public LazyConnectExchangeClient(URL url, ExchangeHandler requestHandler) {
         // lazy connect, need set send.reconnect = true, to avoid channel bad status.

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractClientStream.java
Patch:
@@ -358,8 +358,10 @@ protected Metadata createRequestMeta(RpcInvocation inv) {
             .putIfNotNull(TripleHeaderEnum.CONSUMER_APP_NAME_KEY.getHeader(),
                 (String) inv.getObjectAttachments().remove(CommonConstants.REMOTE_APPLICATION_KEY))
             .putIfNotNull(TripleHeaderEnum.SERVICE_GROUP.getHeader(), getUrl().getGroup())
-            .putIfNotNull(TripleHeaderEnum.GRPC_ENCODING.getHeader(), getCompressor().getMessageEncoding())
             .putIfNotNull(TripleHeaderEnum.GRPC_ACCEPT_ENCODING.getHeader(), Compressor.getAcceptEncoding(getUrl().getOrDefaultFrameworkModel()));
+        if (!Compressor.NONE.getMessageEncoding().equals(getCompressor().getMessageEncoding())) {
+            metadata.putIfNotNull(TripleHeaderEnum.GRPC_ENCODING.getHeader(), getCompressor().getMessageEncoding());
+        }
         final Map<String, Object> attachments = inv.getObjectAttachments();
         if (attachments != null) {
             convertAttachment(metadata, attachments);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/Compressor.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import java.util.Set;
+import java.util.stream.Collectors;
 
 import static org.apache.dubbo.rpc.protocol.tri.Compressor.DEFAULT_COMPRESSOR;
 
@@ -49,11 +50,11 @@ static Compressor getCompressor(FrameworkModel frameworkModel, String compressor
     }
 
     static String getAcceptEncoding(FrameworkModel frameworkModel) {
-        Set<String> supportedEncodingSet = frameworkModel.getExtensionLoader(Compressor.class).getSupportedExtensions();
+        Set<Compressor> supportedEncodingSet = frameworkModel.getExtensionLoader(Compressor.class).getSupportedExtensionInstances();
         if (supportedEncodingSet.isEmpty()) {
             return null;
         }
-        return String.join(",", supportedEncodingSet);
+        return supportedEncodingSet.stream().map(Compressor::getMessageEncoding).collect(Collectors.joining(","));
     }
 
     /**

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/IdentityCompressor.java
Patch:
@@ -19,10 +19,11 @@
 
 /**
  * Default compressor
+ * <p>
+ * Do not use the spi
  */
 public class IdentityCompressor implements Compressor {
 
-
     @Override
     public String getMessageEncoding() {
         return "identity";

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/command/DataQueueCommand.java
Patch:
@@ -76,7 +76,7 @@ private int getCompressFlag(ChannelHandlerContext ctx) {
     }
 
     protected int calcCompressFlag(Compressor compressor) {
-        if (null == compressor || IdentityCompressor.NONE.equals(compressor)) {
+        if (null == compressor || IdentityCompressor.NONE.getMessageEncoding().equals(compressor.getMessageEncoding())) {
             return 0;
         }
         return 1;

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/ClientStreamTest.java
Patch:
@@ -128,7 +128,7 @@ public void testNewClientStream() throws Exception {
         Assertions.assertEquals(unaryClientStream.getCompressor(), Compressor.NONE);
         Assertions.assertEquals(unaryClientStream.getDeCompressor(), Compressor.NONE);
         Assertions.assertEquals(stream.getScheme(), HTTP_SCHEME);
-        Assertions.assertEquals(stream.getAcceptEncoding(), "gzip,identity");
+        Assertions.assertEquals(stream.getAcceptEncoding(), "gzip");
         Assertions.assertFalse(stream.getCancellationContext().getListeners().isEmpty());
         Assertions.assertTrue(stream.getMultipleSerialization() instanceof DefaultMultipleSerialization);
 
@@ -183,7 +183,7 @@ public void testStartCall_UnaryClientStream() throws Throwable {
         Assertions.assertEquals(headers.get(Http2Headers.PseudoHeaderName.AUTHORITY.value()), url.getAddress());
         Assertions.assertEquals(headers.get(Http2Headers.PseudoHeaderName.METHOD.value()), HttpMethod.POST.asciiName());
         Assertions.assertEquals(headers.get(HttpHeaderNames.TE), HttpHeaderValues.TRAILERS);
-        Assertions.assertEquals(headers.get(GRPC_ENCODING.getHeader()), DEFAULT_COMPRESSOR);
+        Assertions.assertNull(headers.get(GRPC_ENCODING.getHeader()));
         Assertions.assertEquals(headers.get(TripleHeaderEnum.GRPC_ACCEPT_ENCODING.getHeader()), stream.getAcceptEncoding());
         Assertions.assertEquals(headers.get(TripleHeaderEnum.CONTENT_TYPE_KEY.getHeader()), TripleHeaderEnum.CONTENT_PROTO.getHeader());
         Assertions.assertEquals(headers.get(TripleHeaderEnum.TIMEOUT.getHeader()), timeout + "m");

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/CompressorTest.java
Patch:
@@ -36,7 +36,7 @@ class CompressorTest {
         TEST_STR = builder.toString();
     }
 
-    @ValueSource(strings = {"gzip", "identity"})
+    @ValueSource(strings = {"gzip"})
     @ParameterizedTest
     void compression(String compressorName) {
         System.out.println("current compressor is " + compressorName);

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationCache.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.config;
 
+import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.rpc.model.ScopeModel;
 
 import java.util.Map;
@@ -37,7 +38,7 @@ public class ConfigurationCache {
      */
     public String computeIfAbsent(String key, Function<String, String> function) {
         String value = cache.get(key);
-        if (value == null) {
+        if (StringUtils.isEmpty(value)) {
             // lock free, tolerate repeat apply, will return previous value
             cache.putIfAbsent(key, function.apply(key));
             value = cache.get(key);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultModuleDeployer.java
Patch:
@@ -385,8 +385,9 @@ private void referServices() {
                     }
                 }
             } catch (Throwable t) {
-                logger.error(getIdentifier() + " refer catch error", t);
+                logger.error(getIdentifier() + " refer catch error.");
                 referenceCache.destroy(rc);
+                throw t;
             }
         });
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java
Patch:
@@ -170,6 +170,9 @@ public List<Invoker<T>> route(URL url, BitList<Invoker<T>> availableInvokers, In
         }
 
 
+        if (routers.isEmpty()) {
+            return resultInvokers;
+        }
         List<Invoker<T>> commonRouterResult = new ArrayList<>(resultInvokers);
         // 2. route common router
         for (Router router : routers) {

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ModuleServiceRepository.java
Patch:
@@ -150,8 +150,10 @@ public ServiceDescriptor registerService(String path, Class<?> interfaceClass) {
     @Deprecated
     public void reRegisterProvider(String newServiceKey, String serviceKey) {
         ProviderModel providerModel = this.providers.get(serviceKey);
+        frameworkServiceRepository.unregisterProvider(providerModel);
         providerModel.setServiceKey(newServiceKey);
         this.providers.putIfAbsent(newServiceKey, providerModel);
+        frameworkServiceRepository.registerProvider(providerModel);
         this.providers.remove(serviceKey);
     }
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelectorTest.java
Patch:
@@ -53,15 +53,15 @@ public void test() {
 
         selector.notify(providers);
         // rpcInvocation does not have an attached "invocation.need.mock" parameter, so normal invokers will be filtered out
-        List<Invoker<DemoService>> invokers = selector.route(providers, consumerURL, rpcInvocation, false).getResult();
+        List<Invoker<DemoService>> invokers = selector.route(providers.clone(), consumerURL, rpcInvocation, false).getResult();
         Assertions.assertEquals(invokers.size(),1);
         Assertions.assertTrue(invokers.contains(invoker3));
 
         // rpcInvocation have an attached "invocation.need.mock" parameter, so it will filter out the invoker whose protocol is mock
         Map<String,Object> attachments = new HashMap<>();
         attachments.put(INVOCATION_NEED_MOCK,"true");
         Mockito.when(rpcInvocation.getObjectAttachments()).thenReturn(attachments);
-        invokers = selector.route(providers, consumerURL, rpcInvocation, false).getResult();
+        invokers = selector.route(providers.clone(), consumerURL, rpcInvocation, false).getResult();
         Assertions.assertEquals(invokers.size(),2);
         Assertions.assertTrue(invokers.contains(invoker1));
         Assertions.assertTrue(invokers.contains(invoker2));

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/javassist/JavassistProxyFactory.java
Patch:
@@ -52,7 +52,7 @@ public <T> T getProxy(Invoker<T> invoker, Class<?>[] interfaces) {
                 logger.error("Failed to generate proxy by Javassist failed. Fallback to use JDK proxy is also failed. " +
                     "Interfaces: " + Arrays.toString(interfaces) + " Javassist Error.", fromJavassist);
                 logger.error("Failed to generate proxy by Javassist failed. Fallback to use JDK proxy is also failed. " +
-                    "Interfaces: " + Arrays.toString(interfaces) + " JDK Error.", fromJavassist);
+                    "Interfaces: " + Arrays.toString(interfaces) + " JDK Error.", fromJdk);
                 throw fromJavassist;
             }
         }
@@ -83,7 +83,7 @@ protected Object doInvoke(T proxy, String methodName,
                 logger.error("Failed to generate proxy by Javassist failed. Fallback to use JDK proxy is also failed. " +
                     "Interfaces: " + type + " Javassist Error.", fromJavassist);
                 logger.error("Failed to generate proxy by Javassist failed. Fallback to use JDK proxy is also failed. " +
-                    "Interfaces: " + type + " JDK Error.", fromJavassist);
+                    "Interfaces: " + type + " JDK Error.", fromJdk);
                 throw fromJavassist;
             }
         }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/InboundTransportObserver.java
Patch:
@@ -54,7 +54,7 @@ protected GrpcStatus extractStatusFromMeta(Metadata metadata) {
             return status;
         }
         final String raw = metadata.get(TripleHeaderEnum.MESSAGE_KEY.getHeader()).toString();
-        status = status.withDescription(GrpcStatus.fromMessage(raw));
+        status = status.withDescription(GrpcStatus.decodeMessage(raw));
         return status;
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/UnaryClientStream.java
Patch:
@@ -64,7 +64,7 @@ private Map<Class<?>, Object> tranFromStatusDetails(List<Any> detailList) {
                 // support others type but now only support this
             }
         } catch (InvalidProtocolBufferException e) {
-            e.printStackTrace();
+            LOGGER.error("tran from grpc-status-details error", e);
         }
         return map;
     }

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/GrpcStatusTest.java
Patch:
@@ -28,7 +28,7 @@ public void fromMessage() {
         final GrpcStatus status = GrpcStatus.fromCode(GrpcStatus.Code.INTERNAL)
                 .withDescription(origin);
         Assertions.assertNotEquals(origin, status.toMessage());
-        final String decoded = GrpcStatus.fromMessage(status.toMessage());
+        final String decoded = GrpcStatus.decodeMessage(status.toMessage());
         Assertions.assertEquals(origin, decoded);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ModuleServiceRepository.java
Patch:
@@ -150,8 +150,10 @@ public ServiceDescriptor registerService(String path, Class<?> interfaceClass) {
     @Deprecated
     public void reRegisterProvider(String newServiceKey, String serviceKey) {
         ProviderModel providerModel = this.providers.get(serviceKey);
+        frameworkServiceRepository.unregisterProvider(providerModel);
         providerModel.setServiceKey(newServiceKey);
         this.providers.putIfAbsent(newServiceKey, providerModel);
+        frameworkServiceRepository.registerProvider(providerModel);
         this.providers.remove(serviceKey);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java
Patch:
@@ -28,7 +28,9 @@ private StreamUtils() {
 
     public static InputStream limitedInputStream(final InputStream is, final int limit) throws IOException {
         return new InputStream() {
-            private int mPosition = 0, mMark = 0, mLimit = Math.min(limit, is.available());
+            private int mPosition = 0;
+            private int mMark = 0;
+            private final int mLimit = Math.min(limit, is.available());
 
             @Override
             public int read() throws IOException {

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java
Patch:
@@ -23,7 +23,7 @@
  * Thread-unsafe StringWriter.
  */
 public class UnsafeStringWriter extends Writer {
-    private StringBuilder mBuffer;
+    private final StringBuilder mBuffer;
 
     public UnsafeStringWriter() {
         lock = mBuffer = new StringBuilder();
@@ -34,7 +34,7 @@ public UnsafeStringWriter(int size) {
             throw new IllegalArgumentException("Negative buffer size");
         }
 
-        lock = mBuffer = new StringBuilder();
+        lock = mBuffer = new StringBuilder(size);
     }
 
     @Override

File: dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeStringWriterTest.java
Patch:
@@ -39,9 +39,7 @@ public void testWrite() {
 
     @Test
     public void testNegativeSize() {
-        Assertions.assertThrows(IllegalArgumentException.class, () -> {
-            new UnsafeStringWriter(-1);
-        });
+        Assertions.assertThrows(IllegalArgumentException.class, () -> new UnsafeStringWriter(-1));
     }
 
     @Test

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/InstanceAddressURL.java
Patch:
@@ -376,7 +376,7 @@ public URL addParameter(String key, String value) {
             return this;
         }
 
-        getInstance().getExtendParams().put(key, value);
+        getInstance().putExtendParam(key, value);
         return this;
     }
 
@@ -386,7 +386,7 @@ public URL addParameterIfAbsent(String key, String value) {
             return this;
         }
 
-        getInstance().getExtendParams().putIfAbsent(key, value);
+        getInstance().putExtendParamIfAbsent(key, value);
         return this;
     }
 
@@ -486,7 +486,7 @@ private String getInstanceParameter(String key) {
         if (StringUtils.isNotEmpty(value)) {
             return value;
         }
-        return this.instance.getExtendParams().get(key);
+        return this.instance.getExtendParam(key);
     }
 
     private Map<String, String> getInstanceMetadata() {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListener.java
Patch:
@@ -413,7 +413,7 @@ protected Object getServiceUrlsCache(Map<String, List<ServiceInstance>> revision
                 // different protocols may have ports specified in meta
                 if (ServiceInstanceMetadataUtils.hasEndpoints(i)) {
                     DefaultServiceInstance.Endpoint endpoint = ServiceInstanceMetadataUtils.getEndpoint(i, protocol);
-                    if (endpoint != null && !endpoint.getPort().equals(i.getPort())) {
+                    if (endpoint != null && endpoint.getPort() != i.getPort()) {
                         urls.add(((DefaultServiceInstance) i).copyFrom(endpoint).toURL());
                         continue;
                     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtils.java
Patch:
@@ -235,18 +235,18 @@ public static void calInstanceRevision(ServiceDiscovery serviceDiscovery, Servic
             if (!metadataInfo.calAndGetRevision().equals(existingInstanceRevision)) {
                 instance.getMetadata().put(EXPORTED_SERVICES_REVISION_PROPERTY_NAME, metadataInfo.calAndGetRevision());
                 if (existingInstanceRevision != null) {// skip the first registration.
-                    instance.getExtendParams().put(INSTANCE_REVISION_UPDATED_KEY, "true");
+                    instance.putExtendParam(INSTANCE_REVISION_UPDATED_KEY, "true");
                 }
             }
         }
     }
 
     public static boolean isInstanceUpdated(ServiceInstance instance) {
-        return "true".equals(instance.getExtendParams().get(INSTANCE_REVISION_UPDATED_KEY));
+        return "true".equals(instance.getExtendParam(INSTANCE_REVISION_UPDATED_KEY));
     }
 
     public static void resetInstanceUpdateKey(ServiceInstance instance) {
-        instance.getExtendParams().remove(INSTANCE_REVISION_UPDATED_KEY);
+        instance.removeExtendParam(INSTANCE_REVISION_UPDATED_KEY);
     }
 
     public static void registerMetadataAndInstance(ServiceInstance serviceInstance) {

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/DefaultServiceInstanceTest.java
Patch:
@@ -87,7 +87,7 @@ public void testInstanceOperations() {
         Map<String, String> allParams = instance.getAllParams();
         assertEquals(instance.getMetadata().size(), allParams.size());
         assertEquals("dubbo", allParams.get("site"));
-        instance.getExtendParams().put("key", "value");
+        instance.putExtendParam("key", "value");
         Map<String, String> allParams2 = instance.getAllParams();
         assertNotSame(allParams, allParams2);
         assertEquals(instance.getMetadata().size() + instance.getExtendParams().size(), allParams2.size());

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtilsTest.java
Patch:
@@ -141,7 +141,7 @@ public void getRemoteCluster() {
 
     @Test
     public void testInstanceUpdateKey() {
-        serviceInstance.getExtendParams().put(INSTANCE_REVISION_UPDATED_KEY, "true");
+        serviceInstance.putExtendParam(INSTANCE_REVISION_UPDATED_KEY, "true");
         Assertions.assertTrue(ServiceInstanceMetadataUtils.isInstanceUpdated(serviceInstance));
 
         ServiceInstanceMetadataUtils.resetInstanceUpdateKey(serviceInstance);
@@ -180,12 +180,12 @@ public void testCalInstanceRevision() {
 
         ServiceInstanceMetadataUtils.calInstanceRevision(serviceDiscovery, serviceInstance);
         Assertions.assertEquals(metadataInfo.calAndGetRevision(), serviceInstance.getMetadata().get(EXPORTED_SERVICES_REVISION_PROPERTY_NAME));
-        Assertions.assertNull(serviceInstance.getExtendParams().get(INSTANCE_REVISION_UPDATED_KEY));
+        Assertions.assertNull(serviceInstance.getExtendParam(INSTANCE_REVISION_UPDATED_KEY));
 
         writableMetadataService.getMetadataInfos().get(DEFAULT_KEY).addService(new MetadataInfo.ServiceInfo(url2));
         ServiceInstanceMetadataUtils.calInstanceRevision(serviceDiscovery, serviceInstance);
         Assertions.assertEquals(metadataInfo.calAndGetRevision(), serviceInstance.getMetadata().get(EXPORTED_SERVICES_REVISION_PROPERTY_NAME));
-        Assertions.assertEquals(serviceInstance.getExtendParams().get(INSTANCE_REVISION_UPDATED_KEY), "true");
+        Assertions.assertEquals(serviceInstance.getExtendParam(INSTANCE_REVISION_UPDATED_KEY), "true");
     }
 
     @Test

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryTest.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.dubbo.rpc.model.ScopeModelUtil;
 
 import org.junit.jupiter.api.AfterEach;
-import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.internal.util.collections.Sets;
 
@@ -106,7 +106,7 @@ public void onEvent(ServiceInstancesChangedEvent event) {
         Map<String, String> metadata = new HashMap<>();
         metadata.put("message", "Hello,World");
         serviceInstance.setMetadata(metadata);
-        serviceInstance.getExtendParams().put(INSTANCE_REVISION_UPDATED_KEY, "true");
+        serviceInstance.putExtendParam(INSTANCE_REVISION_UPDATED_KEY, "true");
 
         discovery.update(serviceInstance);
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -138,6 +138,8 @@ public interface CommonConstants {
 
     int DEFAULT_TIMEOUT = 1000;
 
+    String SESSION_KEY = "session";
+
     // used by invocation attachments to transfer timeout from Consumer to Provider.
     // works as a replacement of TIMEOUT_KEY on wire, which seems to be totally useless in previous releases).
     String TIMEOUT_ATTACHMENT_KEY = "_TO";

File: dubbo-common/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -95,7 +95,7 @@ public class RegistryConfig extends AbstractConfig {
     private String version;
 
     /**
-     * Request timeout in milliseconds for register center
+     * Connect timeout in milliseconds for register center
      */
     private Integer timeout;
 

File: dubbo-remoting/dubbo-remoting-zookeeper-curator5/src/main/java/org/apache/dubbo/remoting/zookeeper/curator5/Curator5ZookeeperClient.java
Patch:
@@ -49,13 +49,13 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 
+import static org.apache.dubbo.common.constants.CommonConstants.SESSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 
 
 public class Curator5ZookeeperClient extends AbstractZookeeperClient<Curator5ZookeeperClient.NodeCacheListenerImpl, Curator5ZookeeperClient.CuratorWatcherImpl> {
 
     protected static final Logger logger = LoggerFactory.getLogger(Curator5ZookeeperClient.class);
-    private static final String ZK_SESSION_EXPIRE_KEY = "zk.session.expire";
 
     private static final Charset CHARSET = StandardCharsets.UTF_8;
     private final CuratorFramework client;
@@ -65,7 +65,7 @@ public Curator5ZookeeperClient(URL url) {
         super(url);
         try {
             int timeout = url.getParameter(TIMEOUT_KEY, DEFAULT_CONNECTION_TIMEOUT_MS);
-            int sessionExpireMs = url.getParameter(ZK_SESSION_EXPIRE_KEY, DEFAULT_SESSION_TIMEOUT_MS);
+            int sessionExpireMs = url.getParameter(SESSION_KEY, DEFAULT_SESSION_TIMEOUT_MS);
             CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()
                     .connectString(url.getBackupAddress())
                     .retryPolicy(new RetryNTimes(1, 1000))
@@ -391,7 +391,7 @@ private class CuratorConnectionStateListener implements ConnectionStateListener
 
         public CuratorConnectionStateListener(URL url) {
             this.timeout = url.getParameter(TIMEOUT_KEY, DEFAULT_CONNECTION_TIMEOUT_MS);
-            this.sessionExpireMs = url.getParameter(ZK_SESSION_EXPIRE_KEY, DEFAULT_SESSION_TIMEOUT_MS);
+            this.sessionExpireMs = url.getParameter(SESSION_KEY, DEFAULT_SESSION_TIMEOUT_MS);
         }
 
         @Override

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java
Patch:
@@ -49,13 +49,13 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 
+import static org.apache.dubbo.common.constants.CommonConstants.SESSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 
 
 public class CuratorZookeeperClient extends AbstractZookeeperClient<CuratorZookeeperClient.NodeCacheListenerImpl, CuratorZookeeperClient.CuratorWatcherImpl> {
 
     protected static final Logger logger = LoggerFactory.getLogger(CuratorZookeeperClient.class);
-    private static final String ZK_SESSION_EXPIRE_KEY = "zk.session.expire";
 
     private static final Charset CHARSET = StandardCharsets.UTF_8;
     private final CuratorFramework client;
@@ -65,7 +65,7 @@ public CuratorZookeeperClient(URL url) {
         super(url);
         try {
             int timeout = url.getParameter(TIMEOUT_KEY, DEFAULT_CONNECTION_TIMEOUT_MS);
-            int sessionExpireMs = url.getParameter(ZK_SESSION_EXPIRE_KEY, DEFAULT_SESSION_TIMEOUT_MS);
+            int sessionExpireMs = url.getParameter(SESSION_KEY, DEFAULT_SESSION_TIMEOUT_MS);
             CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()
                     .connectString(url.getBackupAddress())
                     .retryPolicy(new RetryNTimes(1, 1000))
@@ -392,7 +392,7 @@ private class CuratorConnectionStateListener implements ConnectionStateListener
 
         public CuratorConnectionStateListener(URL url) {
             this.timeout = url.getParameter(TIMEOUT_KEY, DEFAULT_CONNECTION_TIMEOUT_MS);
-            this.sessionExpireMs = url.getParameter(ZK_SESSION_EXPIRE_KEY, DEFAULT_SESSION_TIMEOUT_MS);
+            this.sessionExpireMs = url.getParameter(SESSION_KEY, DEFAULT_SESSION_TIMEOUT_MS);
         }
 
         @Override

File: dubbo-common/src/main/java/org/apache/dubbo/common/lang/ShutdownHookCallbacks.java
Patch:
@@ -27,7 +27,7 @@
 import static org.apache.dubbo.common.function.ThrowableAction.execute;
 
 /**
- * The compose {@link ShutdownHookCallback} class to manipulate one and more {@link ShutdownHookCallback} instances
+ * The composed {@link ShutdownHookCallback} class to manipulate one and more {@link ShutdownHookCallback} instances
  *
  * @since 2.7.5
  */

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -219,7 +219,7 @@ public Collection<RegistryConfig> getRegistries() {
 
     @Override
     public void refreshAll() {
-        // refresh all configs here,
+        // refresh all configs here
         getApplication().ifPresent(ApplicationConfig::refresh);
         getMonitor().ifPresent(MonitorConfig::refresh);
         getMetrics().ifPresent(MetricsConfig::refresh);

File: dubbo-common/src/main/java/org/apache/dubbo/common/beans/support/InstantiationStrategy.java
Patch:
@@ -46,7 +46,7 @@ public InstantiationStrategy(ScopeModelAccessor scopeModelAccessor) {
     public <T> T instantiate(Class<T> type) throws ReflectiveOperationException {
 
         // should not use default constructor directly, maybe also has another constructor matched scope model arguments
-        // 1. try get default constructor
+        // 1. try to get default constructor
         Constructor<T> defaultConstructor = null;
         try {
             defaultConstructor = type.getConstructor();

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -584,8 +584,8 @@ public boolean hasExtension(String name) {
 
     public Set<String> getSupportedExtensions() {
         checkDestroyed();
-        Map<String, Class<?>> clazzes = getExtensionClasses();
-        return Collections.unmodifiableSet(new TreeSet<>(clazzes.keySet()));
+        Map<String, Class<?>> classes = getExtensionClasses();
+        return Collections.unmodifiableSet(new TreeSet<>(classes.keySet()));
     }
 
     public Set<T> getSupportedExtensionInstances() {
@@ -1023,7 +1023,7 @@ private void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader cl
         try {
             try (BufferedReader reader = new BufferedReader(new InputStreamReader(resourceURL.openStream(), StandardCharsets.UTF_8))) {
                 String line;
-                String clazz = null;
+                String clazz;
                 while ((line = reader.readLine()) != null) {
                     final int ci = line.indexOf('#');
                     if (ci >= 0) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/LoadingStrategy.java
Patch:
@@ -31,11 +31,11 @@ default String[] excludedPackages() {
     }
 
     /**
-     * To restrict some class that should loaded from Dubbo's ClassLoader.
+     * To restrict some class that should load from Dubbo's ClassLoader.
      * For example, we can restrict the class declaration in `org.apache.dubbo` package should
      * be loaded from Dubbo's ClassLoader and users cannot declare these classes.
      *
-     * @return class packages should loaded
+     * @return class packages should load
      * @since 3.0.4
      */
     default String[] onlyExtensionClassLoaderPackages() {

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassLoaderResourceLoader.java
Patch:
@@ -75,7 +75,7 @@ public static Set<java.net.URL> loadResources(String fileName, ClassLoader curre
         Map<String, Set<java.net.URL>> urlCache = classLoaderCache.get(currentClassLoader);
         if (!urlCache.containsKey(fileName)) {
             Set<java.net.URL> set = new LinkedHashSet<>();
-            Enumeration<URL> urls = null;
+            Enumeration<URL> urls;
             try {
                 urls = currentClassLoader.getResources(fileName);
                 boolean isNative = NativeUtils.isNative();

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/FrameworkModel.java
Patch:
@@ -65,7 +65,7 @@ public class FrameworkModel extends ScopeModel {
 
     public FrameworkModel() {
         super(null, ExtensionScope.FRAMEWORK);
-        this.setInternalId(index.getAndIncrement()+"");
+        this.setInternalId(String.valueOf(index.getAndIncrement()));
         // register FrameworkModel instance early
         synchronized (globalLock) {
             allInstances.add(this);

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/MethodDescriptor.java
Patch:
@@ -37,9 +37,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.$INVOKE_ASYNC;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOBUF_MESSAGE_CLASS_NAME;
 
-/**
- *
- */
 public class MethodDescriptor {
 
     private static final String GRPC_ASYNC_RETURN_CLASS = "com.google.common.util.concurrent.ListenableFuture";

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ScopeModelAwareExtensionProcessor.java
Patch:
@@ -35,7 +35,7 @@ private void initialize() {
         // Only the visible and only matching scope model can be injected, that is, module -> application -> framework.
         // The converse is a one-to-many relationship and cannot be injected.
         // One framework may have multiple applications, and one application may have multiple modules.
-        // So, the spi extension/bean of application scope can be injected it's application model and framework model,
+        // So, the spi extension/bean of application scope can be injected its application model and framework model,
         // but the spi extension/bean of framework scope cannot be injected an application or module model.
 
         if (scopeModel instanceof FrameworkModel) {

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ServiceMetadata.java
Patch:
@@ -26,7 +26,7 @@
  * Notice, this class currently has no usage inside Dubbo.
  *
  * data related to service level such as name, version, classloader of business service,
- * security info, etc. Also with a AttributeMap for extension.
+ * security info, etc. Also, with a AttributeMap for extension.
  */
 public class ServiceMetadata extends BaseServiceMetadata {
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/SpringScopeModelInitializer.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.config.spring;
 
-import org.apache.dubbo.common.beans.factory.ScopeBeanFactory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
@@ -34,7 +33,7 @@ public void initializeFrameworkModel(FrameworkModel frameworkModel) {
 
     @Override
     public void initializeApplicationModel(ApplicationModel applicationModel) {
-        ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
+
     }
 
     @Override

File: dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/ConfigZookeeperInitializer.java
Patch:
@@ -47,7 +47,7 @@ public class ConfigZookeeperInitializer extends ZookeeperInitializer {
     private void updateConfig(ZookeeperContext context, int clientPort, int adminServerPort) throws DubboTestException {
         Path zookeeperConf = Paths.get(context.getSourceFile().getParent().toString(),
             String.valueOf(clientPort),
-            String.format("apache-zookeeper-%s-bin", context.getVersion()),
+            context.getUnpackedDirectory(),
             "conf");
         File zooSample = Paths.get(zookeeperConf.toString(), "zoo_sample.cfg").toFile();
 

File: dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StartZookeeperUnixProcessor.java
Patch:
@@ -41,7 +41,7 @@ protected Process doProcess(ZookeeperContext context, int clientPort) throws Dub
         List<String> commands = new ArrayList<>();
         Path zookeeperBin = Paths.get(context.getSourceFile().getParent().toString(),
             String.valueOf(clientPort),
-            String.format("apache-zookeeper-%s-bin", context.getVersion()),
+            context.getUnpackedDirectory(),
             "bin");
         commands.add(Paths.get(zookeeperBin.toString(), "zkServer.sh")
             .toAbsolutePath().toString());

File: dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StartZookeeperWindowsProcessor.java
Patch:
@@ -56,7 +56,7 @@ protected void doProcess(ZookeeperWindowsContext context) throws DubboTestExcept
             logger.info(String.format("The zookeeper-%d is starting...", clientPort));
             Path zookeeperBin = Paths.get(context.getSourceFile().getParent().toString(),
                 String.valueOf(clientPort),
-                String.format("apache-zookeeper-%s-bin", context.getVersion()),
+                context.getUnpackedDirectory(),
                 "bin");
             Executor executor = new DefaultExecutor();
             executor.setExitValues(null);

File: dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StopZookeeperUnixProcessor.java
Patch:
@@ -41,7 +41,7 @@ protected Process doProcess(ZookeeperContext context, int clientPort) throws Dub
         List<String> commands = new ArrayList<>();
         Path zookeeperBin = Paths.get(context.getSourceFile().getParent().toString(),
             String.valueOf(clientPort),
-            String.format("apache-zookeeper-%s-bin", context.getVersion()),
+            context.getUnpackedDirectory(),
             "bin");
         commands.add(Paths.get(zookeeperBin.toString(), "zkServer.sh")
             .toAbsolutePath().toString());

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ext6_wrap/impl/Ext6Impl1.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ext6_wrap.WrappedExt;
 
-public class Ext5Impl1 implements WrappedExt {
+public class Ext6Impl1 implements WrappedExt {
     public String echo(URL url, String s) {
-        return "Ext5Impl1-echo";
+        return "Ext6Impl1-echo";
     }
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ext6_wrap/impl/Ext6Impl2.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ext6_wrap.WrappedExt;
 
-public class Ext5Impl2 implements WrappedExt {
+public class Ext6Impl2 implements WrappedExt {
     public String echo(URL url, String s) {
-        return "Ext5Impl2-echo";
+        return "Ext6Impl2-echo";
     }
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ext6_wrap/impl/Ext6Wrapper1.java
Patch:
@@ -22,11 +22,11 @@
 
 import java.util.concurrent.atomic.AtomicInteger;
 
-public class Ext5Wrapper1 implements WrappedExt, WrappedExtWrapper {
+public class Ext6Wrapper1 implements WrappedExt, WrappedExtWrapper {
     public static AtomicInteger echoCount = new AtomicInteger();
     WrappedExt origin;
 
-    public Ext5Wrapper1(WrappedExt origin) {
+    public Ext6Wrapper1(WrappedExt origin) {
         this.origin = origin;
     }
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ext6_wrap/impl/Ext6Wrapper2.java
Patch:
@@ -22,11 +22,11 @@
 
 import java.util.concurrent.atomic.AtomicInteger;
 
-public class Ext5Wrapper2 implements WrappedExt, WrappedExtWrapper {
+public class Ext6Wrapper2 implements WrappedExt, WrappedExtWrapper {
     public static AtomicInteger echoCount = new AtomicInteger();
     WrappedExt origin;
 
-    public Ext5Wrapper2(WrappedExt origin) {
+    public Ext6Wrapper2(WrappedExt origin) {
         this.origin = origin;
     }
 

File: dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java
Patch:
@@ -59,13 +59,13 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_PROTOCOL;
 import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_SERVICE_COMPONENT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.METHOD_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER;
 import static org.apache.dubbo.monitor.Constants.DUBBO_CONSUMER;
 import static org.apache.dubbo.monitor.Constants.DUBBO_CONSUMER_METHOD;
 import static org.apache.dubbo.monitor.Constants.DUBBO_GROUP;
 import static org.apache.dubbo.monitor.Constants.DUBBO_PROVIDER;
 import static org.apache.dubbo.monitor.Constants.DUBBO_PROVIDER_METHOD;
-import static org.apache.dubbo.monitor.Constants.METHOD;
 import static org.apache.dubbo.monitor.Constants.SERVICE;
 
 /**
@@ -169,15 +169,15 @@ private void reportMetrics(Invoker<?> invoker, Invocation invocation, long durat
             method = new MetricName(DUBBO_PROVIDER_METHOD, new HashMap<String, String>(4) {
                 {
                     put(SERVICE, serviceName);
-                    put(METHOD, methodName);
+                    put(METHOD_KEY, methodName);
                 }
             }, MetricLevel.NORMAL);
         } else {
             global = new MetricName(DUBBO_CONSUMER, MetricLevel.MAJOR);
             method = new MetricName(DUBBO_CONSUMER_METHOD, new HashMap<String, String>(4) {
                 {
                     put(SERVICE, serviceName);
-                    put(METHOD, methodName);
+                    put(METHOD_KEY, methodName);
                 }
             }, MetricLevel.NORMAL);
         }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -960,7 +960,9 @@ private DeployState calculateState() {
         int pending = 0, starting = 0, started = 0, stopping = 0, stopped = 0, failed = 0;
         for (ModuleModel moduleModel : applicationModel.getModuleModels()) {
             ModuleDeployer deployer = moduleModel.getDeployer();
-            if (deployer.isPending()) {
+            if (deployer == null) {
+                pending++;
+            } else if (deployer.isPending()) {
                 pending++;
             } else if (deployer.isStarting()) {
                 starting++;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectoryTest.java
Patch:
@@ -61,7 +61,7 @@ public void testStaticDirectory() {
         List<Invoker<String>> newInvokers = staticDirectory.list(new MockDirInvocation());
         Assertions.assertTrue(newInvokers.size() > 0);
         staticDirectory.destroy();
-        Assertions.assertEquals(0, staticDirectory.invokers.size());
-        Assertions.assertEquals(0, staticDirectory.validInvokers.size());
+        Assertions.assertEquals(0, staticDirectory.getInvokers().size());
+        Assertions.assertEquals(0, staticDirectory.getValidInvokers().size());
     }
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/configcenter/file/FileSystemDynamicConfigurationTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;
 
 import java.io.File;
 import java.io.IOException;
@@ -44,7 +44,8 @@
  * {@link FileSystemDynamicConfiguration} Test
  */
 // Test often failed on Github Actions Platform because of file system on Azure
-@DisabledIfEnvironmentVariable(named = "DISABLE_FILE_SYSTEM_TEST", matches = "true")
+// Change to Disabled because DisabledIfEnvironmentVariable does not work on Github.
+@Disabled
 public class FileSystemDynamicConfigurationTest {
 
     private final Logger logger = LoggerFactory.getLogger(getClass());

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java
Patch:
@@ -315,13 +315,12 @@ private void buildCache(boolean notify) {
             return;
         }
         AddrCache<T> origin = cache.get();
-        List<Invoker<T>> copyInvokers = new ArrayList<>(this.invokers);
         AddrCache<T> newCache = new AddrCache<T>();
         Map<String, RouterCache<T>> routerCacheMap = new HashMap<>((int) (stateRouters.size() / 0.75f) + 1);
         newCache.setInvokers(invokers);
         for (StateRouter stateRouter : stateRouters) {
             try {
-                RouterCache routerCache = poolRouter(stateRouter, origin, copyInvokers, notify);
+                RouterCache routerCache = poolRouter(stateRouter, origin, invokers, notify);
                 //file cache
                 routerCacheMap.put(stateRouter.getName(), routerCache);
             } catch (Throwable t) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/serial/SerializingExecutor.java
Patch:
@@ -80,7 +80,7 @@ private void schedule(Runnable removable) {
                         // ConcurrentLinkedQueue claims that null elements are not allowed, but seems to not
                         // throw if the item to remove is null.  If removable is present in the queue twice,
                         // the wrong one may be removed.  It doesn't seem possible for this case to exist today.
-                        // This is important to run in case of RejectedExectuionException, so that future calls
+                        // This is important to run in case of RejectedExecutionException, so that future calls
                         // to execute don't succeed and accidentally run a previous runnable.
                         runQueue.remove(removable);
                     }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/PortUnificationExchanger.java
Patch:
@@ -21,15 +21,14 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.remoting.api.PortUnificationServer;
 
-import io.netty.util.internal.PlatformDependent;
-
 import java.util.ArrayList;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
 public class PortUnificationExchanger {
 
     private static final Logger log = LoggerFactory.getLogger(PortUnificationExchanger.class);
-    private static final ConcurrentMap<String, PortUnificationServer> servers = PlatformDependent.newConcurrentHashMap();
+    private static final ConcurrentMap<String, PortUnificationServer> servers = new ConcurrentHashMap<>();
 
     public static void bind(URL url) {
         servers.computeIfAbsent(url.getAddress(), addr -> {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/GrpcStatus.java
Patch:
@@ -150,7 +150,7 @@ public static String limitSizeTo4KB(String desc) {
     }
 
     public static String fromMessage(String raw) {
-        if (raw == null || raw.isEmpty()) {
+        if (StringUtils.isEmpty(raw)) {
             return "";
         }
         return QueryStringDecoder.decodeComponent(raw);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -37,9 +37,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_CLIENT_THREADPOOL;
 import static org.apache.dubbo.common.constants.CommonConstants.THREADPOOL_KEY;
 
-/**
- *
- */
 public class TripleProtocol extends AbstractProtocol implements Protocol {
 
     private static final Logger logger = LoggerFactory.getLogger(TripleProtocol.class);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/UnaryClientStream.java
Patch:
@@ -69,7 +69,7 @@ private Map<Class<?>, Object> tranFromStatusDetails(List<Any> detailList) {
         return map;
     }
 
-    private class ClientUnaryInboundTransportObserver extends ServerUnaryInboundTransportObserver implements TransportObserver {
+    private class ClientUnaryInboundTransportObserver extends ServerUnaryInboundTransportObserver {
 
         @Override
         public void onComplete() {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/UnaryServerStream.java
Patch:
@@ -45,7 +45,7 @@ protected InboundTransportObserver createInboundTransportObserver() {
         return new UnaryServerTransportObserver();
     }
 
-    private class UnaryServerTransportObserver extends ServerUnaryInboundTransportObserver implements TransportObserver {
+    private class UnaryServerTransportObserver extends ServerUnaryInboundTransportObserver {
         @Override
         public void onError(GrpcStatus status) {
             transportError(status);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/service/TriBuiltinService.java
Patch:
@@ -36,7 +36,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;
 
 /**
- * tri internal  service like grpc internal service
+ * tri internal service like grpc internal service
  **/
 public class TriBuiltinService {
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/service/TriHealthImpl.java
Patch:
@@ -44,7 +44,7 @@ public class TriHealthImpl implements Health {
 
     private final Object watchLock = new Object();
     // Technically a Multimap<String, StreamObserver<HealthCheckResponse>>.  The Boolean value is not
-    // used.  The StreamObservers need to be kept in a identity-equality set, to make sure
+    // used.  The StreamObservers need to be kept in an identity-equality set, to make sure
     // user-defined equals() doesn't confuse our book-keeping of the StreamObservers.  Constructing
     // such Multimap would require extra lines and the end result is not significantly simpler, thus I
     // would rather not have the Guava collections dependency.

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/Deployer.java
Patch:
@@ -89,4 +89,5 @@ public interface Deployer<E extends ScopeModel> {
 
     void removeDeployListener(DeployListener<E> listener);
 
+    Throwable getError();
 }

File: dubbo-common/src/main/java/org/apache/dubbo/config/annotation/DubboReference.java
Patch:
@@ -269,8 +269,8 @@
     String[] parameters() default {};
 
     /**
-     * Application associated name
-     * @deprecated Do not set it and use the global Application Config
+     * Application name
+     * @deprecated This attribute was deprecated, use bind application/module of spring ApplicationContext
      */
     @Deprecated
     String application() default "";

File: dubbo-common/src/main/java/org/apache/dubbo/config/annotation/DubboService.java
Patch:
@@ -263,7 +263,7 @@
 
     /**
      * Application spring bean name
-     * @deprecated Do not set it and use the global Application Config
+     * @deprecated This attribute was deprecated, use bind application/module of spring ApplicationContext
      */
     @Deprecated
     String application() default "";

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -721,7 +721,7 @@ private String findConfigedHosts(ProtocolConfig protocolConfig,
     private Integer findConfigedPorts(ProtocolConfig protocolConfig,
                                       String name,
                                       Map<String, String> map) {
-        Integer portToBind = null;
+        Integer portToBind;
 
         // parse bind port from environment
         String port = getValueFromConfig(protocolConfig, DUBBO_PORT_TO_BIND);

File: dubbo-demo/dubbo-demo-api/dubbo-demo-api-provider/src/main/java/org/apache/dubbo/demo/provider/Application.java
Patch:
@@ -16,10 +16,12 @@
  */
 package org.apache.dubbo.demo.provider;
 
+import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.ServiceConfig;
+import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.demo.DemoService;
 
@@ -46,6 +48,7 @@ private static void startWithBootstrap() {
         DubboBootstrap bootstrap = DubboBootstrap.getInstance();
         bootstrap.application(new ApplicationConfig("dubbo-demo-api-provider"))
             .registry(new RegistryConfig("zookeeper://127.0.0.1:2181"))
+            .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))
             .service(service)
             .start()
             .await();

File: dubbo-demo/dubbo-demo-generic-call/src/main/java/org/apache/dubbo/demo/consumer/GenericApplication.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.RegistryConfig;
+import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.rpc.service.GenericService;
 
@@ -54,6 +55,7 @@ private static void runWithBootstrap(String[] args) {
         DubboBootstrap bootstrap = DubboBootstrap.getInstance();
         bootstrap.application(applicationConfig)
             .registry(new RegistryConfig("zookeeper://127.0.0.1:2181"))
+            .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))
             .reference(reference)
             .start();
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -1013,9 +1013,6 @@ private void onStarted() {
             } catch (Exception e) {
                 logger.error("refresh metadata failed: " + e.getMessage(), e);
             }
-            // shutdown export/refer executor after started
-            executorRepository.shutdownServiceExportExecutor();
-            executorRepository.shutdownServiceReferExecutor();
         } finally {
             // complete future
             completeStartFuture(true);
@@ -1057,6 +1054,9 @@ private void onStopped() {
     }
 
     private void destroyExecutorRepository() {
+        // shutdown export/refer executor
+        executorRepository.shutdownServiceExportExecutor();
+        executorRepository.shutdownServiceReferExecutor();
         getExtensionLoader(ExecutorRepository.class).getDefaultExtension().destroyAll();
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -41,6 +41,8 @@ public interface CommonConstants {
 
     String METADATA_SERVICE_PORT_KEY = "metadata-service-port";
 
+    String METADATA_SERVICE_PROTOCOL_KEY = "metadata-service-protocol";
+
     String LIVENESS_PROBE_KEY = "liveness-probe";
 
     String READINESS_PROBE_KEY = "readiness-probe";

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtils.java
Patch:
@@ -113,6 +113,9 @@ public static Map<String, String> getMetadataServiceURLsParams(ServiceInstance s
     }
 
     public static String getMetadataServiceParameter(URL url) {
+        if (url == null) {
+            return "";
+        }
         url = url.removeParameter(APPLICATION_KEY);
         url = url.removeParameter(GROUP_KEY);
         url = url.removeParameter(DEPRECATED_KEY);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/InMemoryWritableMetadataService.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.registry.client.metadata.store;
 
-import com.google.gson.Gson;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.logger.Logger;
@@ -37,6 +36,8 @@
 import org.apache.dubbo.rpc.model.ScopeModelAware;
 import org.apache.dubbo.rpc.support.ProtocolUtils;
 
+import com.google.gson.Gson;
+
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
@@ -209,7 +210,6 @@ public void addMetadataInfo(String key, MetadataInfo metadataInfo) {
     @Override
     public boolean unexportURL(URL url) {
         if (MetadataService.class.getName().equals(url.getServiceInterface())) {
-            // TODO, metadata service need to be unexported.
             this.metadataServiceURL = null;
             return true;
         }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/OutboundTransportObserver.java
Patch:
@@ -37,11 +37,14 @@ public void onMetadata(Metadata metadata, boolean endStream) {
 
     protected void checkSendMeta(Object metadata, boolean endStream) {
         if (endStream) {
+            // trailers-only or metadata + trailers
             if (!state.allowSendEndStream()) {
                 throw new IllegalStateException("Metadata endStream already sent to peer, send " + metadata + " failed!");
             }
+            state.setMetaSend();
             state.setEndStreamSend();
         } else {
+            // metadata
             if (!state.allowSendMeta()) {
                 throw new IllegalStateException("Metadata already sent to peer, send " + metadata + " failed!");
             }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TransportState.java
Patch:
@@ -30,7 +30,6 @@ public class TransportState {
     private static final int SERVER_SEND_STREAM_RECEIVED = 0b00000000000000000000000000001000;
     private static final int ALLOW_META_SEND = 0b00000000000000000000000000000000;
     private static final int ALLOW_DATA_SEND = META_SEND;
-    private static final int ALLOW_END_STREAM_SEND = META_SEND;
     private volatile int state = 0;
 
     public void setMetaSend() {
@@ -66,7 +65,7 @@ public boolean allowSendData() {
     }
 
     public boolean allowSendEndStream() {
-        return this.state == ALLOW_END_STREAM_SEND;
+        return allowSendReset() && (this.state & END_STREAM_SEND) != END_STREAM_SEND;
     }
 
 }

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/TransportStateTest.java
Patch:
@@ -76,7 +76,7 @@ void allowSendData() {
     @Test
     void allowSendEndStream() {
         TransportState transportState = new TransportState();
-        Assertions.assertFalse(transportState.allowSendEndStream());
+        Assertions.assertTrue(transportState.allowSendEndStream());
 
         transportState = new TransportState();
         transportState.setResetSend();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.model.ScopeModel;
-import org.apache.dubbo.rpc.model.ScopeModelUtil;
 
 import java.util.List;
 import java.util.Map;
@@ -78,7 +77,7 @@ public static synchronized void destroyMetadataServiceProxy(ServiceInstance inst
 
     private static MetadataService referProxy(String key, ServiceInstance instance) {
         MetadataServiceURLBuilder builder;
-        ExtensionLoader<MetadataServiceURLBuilder> loader = instance.getOrDefaultApplicationModel()
+        ExtensionLoader<MetadataServiceURLBuilder> loader = instance.getApplicationModel()
             .getExtensionLoader(MetadataServiceURLBuilder.class);
 
         Map<String, String> metadata = instance.getMetadata();
@@ -97,7 +96,7 @@ private static MetadataService referProxy(String key, ServiceInstance instance)
         }
 
         // Simply rely on the first metadata url, as stated in MetadataServiceURLBuilder.
-        ScopeModel scopeModel = ScopeModelUtil.getOrDefaultApplicationModel(instance.getApplicationModel());
+        ScopeModel scopeModel = instance.getApplicationModel();
         Protocol protocol = scopeModel.getExtensionLoader(Protocol.class).getAdaptiveExtension();
         Invoker<MetadataService> invoker = protocol.refer(MetadataService.class, urls.get(0));
         metadataServiceInvokers.put(key, invoker);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
+import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.cluster.ClusterInvoker;
@@ -177,6 +178,7 @@ private List<Invoker<T>> selectMockInvoker(Invocation invocation) {
             invocation.setAttachment(INVOCATION_NEED_MOCK, Boolean.TRUE.toString());
             //directory will return a list of normal invokers if Constants.INVOCATION_NEED_MOCK is absent or not true in invocation, otherwise, a list of mock invokers will return.
             try {
+                RpcContext.getServiceContext().setConsumerUrl(getUrl());
                 invokers = directory.list(invocation);
             } catch (RpcException e) {
                 if (logger.isInfoEnabled()) {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectoryTest.java
Patch:
@@ -54,13 +54,14 @@ public void testStaticDirectory() {
         invokers.add(invoker1);
         invokers.add(invoker2);
         invokers.add(invoker3);
-        List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + NetUtils.getLocalHost() + "/com.foo.BarService"), new RpcInvocation());
+        List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + NetUtils.getLocalHost() + "/com.foo.BarService"), new RpcInvocation(), false).getResult();
         StaticDirectory<String> staticDirectory = new StaticDirectory<>(filteredInvokers);
         boolean isAvailable = staticDirectory.isAvailable();
         Assertions.assertTrue(!isAvailable);
         List<Invoker<String>> newInvokers = staticDirectory.list(new MockDirInvocation());
         Assertions.assertTrue(newInvokers.size() > 0);
         staticDirectory.destroy();
-        Assertions.assertEquals(0, newInvokers.size());
+        Assertions.assertEquals(0, staticDirectory.invokers.size());
+        Assertions.assertEquals(0, staticDirectory.validInvokers.size());
     }
 }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelectorTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcInvocation;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
@@ -50,15 +51,15 @@ public void test() {
         URL consumerURL = URL.valueOf("test://127.0.0.1");
 
         // rpcInvocation does not have an attached "invocation.need.mock" parameter, so normal invokers will be filtered out
-        List<Invoker<DemoService>> invokers = selector.route(providers, consumerURL, rpcInvocation);
+        List<Invoker<DemoService>> invokers = selector.route(providers, consumerURL, rpcInvocation, false).getResult();
         Assertions.assertEquals(invokers.size(),1);
         Assertions.assertTrue(invokers.contains(invoker3));
 
         // rpcInvocation have an attached "invocation.need.mock" parameter, so it will filter out the invoker whose protocol is mock
         Map<String,Object> attachments = new HashMap<>();
         attachments.put(INVOCATION_NEED_MOCK,"true");
         Mockito.when(rpcInvocation.getObjectAttachments()).thenReturn(attachments);
-        invokers = selector.route(providers, consumerURL, rpcInvocation);
+        invokers = selector.route(providers, consumerURL, rpcInvocation, false).getResult();
         Assertions.assertEquals(invokers.size(),2);
         Assertions.assertTrue(invokers.contains(invoker1));
         Assertions.assertTrue(invokers.contains(invoker2));

File: dubbo-configcenter/dubbo-configcenter-nacos/src/main/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfiguration.java
Patch:
@@ -85,6 +85,8 @@ public class NacosDynamicConfiguration implements DynamicConfiguration {
      */
     private final Map<String, NacosConfigListener> watchListenerMap;
 
+    private MD5Utils md5Utils = new MD5Utils();
+
     NacosDynamicConfiguration(URL url) {
         this.nacosProperties = buildNacosProperties(url);
         this.configService = buildConfigService(url);
@@ -221,7 +223,7 @@ public ConfigItem getConfigItem(String key, String group) {
         String content = getConfig(key, group);
         String casMd5 = "";
         if (StringUtils.isNotEmpty(content)) {
-            casMd5 = MD5Utils.getMd5(content);
+            casMd5 = md5Utils.getMd5(content);
         }
         return new ConfigItem(content, casMd5);
     }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/RevisionResolver.java
Patch:
@@ -23,8 +23,10 @@ public class RevisionResolver {
 
     public static final String EMPTY_REVISION = "0";
 
+    private static MD5Utils md5Utils = new MD5Utils();
+
     public static String calRevision(String metadata) {
-        return MD5Utils.getMd5(metadata);
+        return md5Utils.getMd5(metadata);
     }
 
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2Protocol.java
Patch:
@@ -79,6 +79,7 @@ public void configServerPipeline(URL url, ChannelPipeline pipeline, SslContext s
             @Override
             protected void initChannel(Channel ch) {
                 final ChannelPipeline p = ch.pipeline();
+                p.addLast(new TripleCommandOutBoundHandler());
                 p.addLast(new TripleHttp2FrameServerHandler(frameworkModel));
                 // TODO constraint MAX DATA_SIZE
                 p.addLast(new GrpcDataDecoder(Integer.MAX_VALUE, false));

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ApplicationModel.java
Patch:
@@ -83,8 +83,8 @@ public static ApplicationModel ofNullable(ApplicationModel applicationModel) {
     }
 
     /**
-     * During destroying the default FrameworkModel, FrameworkModel.defaultModel() or ApplicationModel.defaultModel()
-     * will get an broken model, maybe cause unpredictable problem.
+     * During destroying the default FrameworkModel, the FrameworkModel.defaultModel() or ApplicationModel.defaultModel()
+     * will return a broken model, maybe cause unpredictable problem.
      * Recommendation: Avoid using the default model as much as possible.
      * @return the global default ApplicationModel
      */

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ServerStream.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.model.MethodDescriptor;
 
 public class ServerStream extends AbstractServerStream implements Stream {
     protected ServerStream(URL url) {
@@ -107,7 +106,7 @@ private class ServerStreamInboundTransportObserver extends InboundTransportObser
         @Override
         public void onMetadata(Metadata metadata, boolean endStream) {
             super.onMetadata(metadata, endStream);
-            if (getMethodDescriptor().getRpcType() == MethodDescriptor.RpcType.SERVER_STREAM) {
+            if (getMethodDescriptor().isServerStream()) {
                 return;
             }
             execute(() -> {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2FrameServerHandler.java
Patch:
@@ -225,7 +225,7 @@ public void onHeadersRead(ChannelHandlerContext ctx, Http2HeadersFrame msg) thro
             }
         }
 
-        boolean isUnary = methodDescriptor != null && methodDescriptor.isUnary();
+        boolean isUnary = methodDescriptor == null || methodDescriptor.isUnary();
         final AbstractServerStream stream = AbstractServerStream.newServerStream(invoker.getUrl(), isUnary);
 
         Channel channel = ctx.channel();

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/Constants.java
Patch:
@@ -61,7 +61,7 @@ public interface Constants {
     boolean DEFAULT_LAZY_CONNECT_INITIAL_STATE = true;
 
     /**
-     * when this warning rises from invocation, program probably have bug.
+     * when this warning rises from invocation, program probably have a bug.
      */
     String LAZY_REQUEST_WITH_WARNING_KEY = "lazyclient_request_with_warning";
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -244,8 +244,8 @@ private boolean isClientSide(Channel channel) {
     }
 
     Invoker<?> getInvoker(Channel channel, Invocation inv) throws RemotingException {
-        boolean isCallBackServiceInvoke = false;
-        boolean isStubServiceInvoke = false;
+        boolean isCallBackServiceInvoke;
+        boolean isStubServiceInvoke;
         int port = channel.getLocalAddress().getPort();
         String path = (String) inv.getObjectAttachments().get(PATH_KEY);
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboLazyConnectTest.java
Patch:
@@ -69,7 +69,7 @@ public void testSticky3() {
         Assertions.assertThrows(RpcException.class, () -> {
             int port = NetUtils.getAvailablePort();
             URL url = URL.valueOf("dubbo://127.0.0.1:" + port + "/org.apache.dubbo.rpc.protocol.dubbo.IDemoService?" + LAZY_CONNECT_KEY + "=true");
-            IDemoService service = (IDemoService) ProtocolUtils.refer(IDemoService.class, url);
+            IDemoService service = ProtocolUtils.refer(IDemoService.class, url);
             service.get();
         });
     }
@@ -81,7 +81,7 @@ public void testSticky4() {
 
         ProtocolUtils.export(new DemoServiceImpl(), IDemoService.class, url);
 
-        IDemoService service = (IDemoService) ProtocolUtils.refer(IDemoService.class, url);
+        IDemoService service = ProtocolUtils.refer(IDemoService.class, url);
         Assertions.assertEquals("ok", service.get());
     }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocolTest.java
Patch:
@@ -179,8 +179,8 @@ public void testDubboProtocolMultiService() throws Exception {
         assertEquals("hello world@" + RemoteServiceImpl.class.getName(), remote.sayHello("world"));
 
 //       can't find target service addresses
-        EchoService remoteEecho = (EchoService) remote;
-        assertEquals(remoteEecho.$echo("ok"), "ok");
+        EchoService remoteEcho = (EchoService) remote;
+        assertEquals(remoteEcho.$echo("ok"), "ok");
     }
 
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/multiple/servicediscoveryregistry/MultipleRegistryCenterServiceDiscoveryRegistryIntegrationTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService;
 import org.apache.dubbo.registrycenter.RegistryCenter;
 import org.apache.dubbo.registrycenter.ZookeeperMultipleRegistryCenter;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -177,7 +178,7 @@ private void afterExport() {
             // check if it's registered
             Assertions.assertTrue(serviceDiscoveryRegistryInfoWrapper.isRegistered());
             // check if it's subscribed
-            Assertions.assertTrue(serviceDiscoveryRegistryInfoWrapper.isSubscribed());
+            Assertions.assertFalse(serviceDiscoveryRegistryInfoWrapper.isSubscribed());
             InMemoryWritableMetadataService inMemoryWritableMetadataService = serviceDiscoveryRegistryInfoWrapper.getInMemoryWritableMetadataService();
             // check if the count of exported urls is right or not
             Assertions.assertEquals(inMemoryWritableMetadataService.getExportedURLs().size(), 1);

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/Deployer.java
Patch:
@@ -89,4 +89,5 @@ public interface Deployer<E extends ScopeModel> {
 
     void removeDeployListener(DeployListener<E> listener);
 
+    String getIdentifier();
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/ModuleDeployer.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.common.deploy;
 
 import org.apache.dubbo.common.config.ReferenceCache;
-import org.apache.dubbo.config.ServiceConfigBase;
 import org.apache.dubbo.rpc.model.ModuleModel;
 
 import java.util.concurrent.Future;
@@ -31,6 +30,8 @@ public interface ModuleDeployer extends Deployer<ModuleModel> {
 
     Future start() throws IllegalStateException;
 
+    Future getStartFuture();
+
     void stop() throws IllegalStateException;
 
     void preDestroy() throws IllegalStateException;
@@ -45,8 +46,6 @@ public interface ModuleDeployer extends Deployer<ModuleModel> {
 
     void setPending();
 
-    void notifyExportService(ServiceConfigBase<?> sc);
-
     /**
      * Whether start in background, do not await finish
      */

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.config.Environment;
 import org.apache.dubbo.common.config.InmemoryConfiguration;
+import org.apache.dubbo.common.utils.Assert;
 import org.apache.dubbo.common.utils.ClassUtils;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.ConfigUtils;
@@ -268,7 +269,8 @@ public static void appendRuntimeParameters(Map<String, String> map) {
     protected void appendMetricsCompatible(Map<String, String> map) {
         MetricsConfig metricsConfig = getConfigManager().getMetrics().orElse(null);
         if (metricsConfig != null) {
-            if (!metricsConfig.getProtocol().equals(PROTOCOL_PROMETHEUS)) {
+            if (metricsConfig.getProtocol() != null && !StringUtils.isEquals(metricsConfig.getProtocol(), PROTOCOL_PROMETHEUS)) {
+                Assert.notEmptyString(metricsConfig.getPort(), "Metrics port cannot be null");
                 map.put("metrics.protocol", metricsConfig.getProtocol());
                 map.put("metrics.port", metricsConfig.getPort());
             }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/metadata/MetadataServiceExporterTest.java
Patch:
@@ -52,8 +52,6 @@ public void init() {
 
     @Test
     public void test() {
-        ApplicationModel.defaultModel().getInternalModule().getDeployer().start();
-
         MetadataService metadataService = Mockito.mock(MetadataService.class);
         ConfigurableMetadataServiceExporter exporter = new ConfigurableMetadataServiceExporter();
         exporter.setMetadataService(metadataService);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/PathResolver.java
Patch:
@@ -21,6 +21,9 @@
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.rpc.Invoker;
 
+/**
+ * PathResolver maintains a mapping between request path and Invoker for multiple protocols.
+ */
 @SPI(value = CommonConstants.TRIPLE, scope = ExtensionScope.FRAMEWORK)
 public interface PathResolver {
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ServerUnaryInboundTransportObserver.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
-abstract class UnaryInboundTransportObserver extends InboundTransportObserver implements TransportObserver {
+abstract class ServerUnaryInboundTransportObserver extends InboundTransportObserver implements TransportObserver {
     protected static final String DUPLICATED_DATA = "Duplicated data";
 
     private byte[] data;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleServerInboundHandler.java
Patch:
@@ -21,7 +21,7 @@
 
 public class TripleServerInboundHandler extends ChannelInboundHandlerAdapter {
     @Override
-    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
+    public void channelRead(ChannelHandlerContext ctx, Object msg) {
         final AbstractServerStream serverStream = ctx.channel().attr(TripleConstant.SERVER_STREAM_KEY).get();
         final byte[] data = (byte[]) msg;
         if (serverStream != null) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/UnaryClientStream.java
Patch:
@@ -69,7 +69,7 @@ private Map<Class<?>, Object> tranFromStatusDetails(List<Any> detailList) {
         return map;
     }
 
-    private class ClientUnaryInboundTransportObserver extends UnaryInboundTransportObserver implements TransportObserver {
+    private class ClientUnaryInboundTransportObserver extends ServerUnaryInboundTransportObserver implements TransportObserver {
 
         @Override
         public void onComplete() {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/UnaryServerStream.java
Patch:
@@ -45,7 +45,7 @@ protected InboundTransportObserver createInboundTransportObserver() {
         return new UnaryServerTransportObserver();
     }
 
-    private class UnaryServerTransportObserver extends UnaryInboundTransportObserver implements TransportObserver {
+    private class UnaryServerTransportObserver extends ServerUnaryInboundTransportObserver implements TransportObserver {
         @Override
         public void onError(GrpcStatus status) {
             transportError(status);
@@ -85,10 +85,11 @@ public void invoke() {
                 outboundTransportObserver().onMetadata(metadata, false);
                 final byte[] data = encodeResponse(response.getValue());
                 if (data == null) {
+                    // already handled in encodeResponse()
                     return;
                 }
                 outboundTransportObserver().onData(data, false);
-                Metadata trailers = TripleConstant.SUCCESS_RESPONSE_META;
+                Metadata trailers = TripleConstant.getSuccessResponseMeta();
                 convertAttachment(trailers, response.getObjectAttachments());
                 outboundTransportObserver().onMetadata(trailers, true);
             });

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2FrameServerHandler.java
Patch:
@@ -83,7 +83,9 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
     public void onResetRead(ChannelHandlerContext ctx, Http2ResetFrame frame) {
         final AbstractServerStream serverStream = ctx.channel().attr(TripleConstant.SERVER_STREAM_KEY).get();
         LOGGER.warn("Triple Server received remote reset errorCode=" + frame.errorCode());
-        serverStream.cancelByRemote();
+        if (serverStream != null) {
+            serverStream.cancelByRemote();
+        }
         ctx.close();
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleClientInboundHandler.java
Patch:
@@ -26,7 +26,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
 
         final byte[] data = (byte[]) msg;
         if (clientStream != null) {
-            clientStream.asTransportObserver()
+            clientStream.inboundTransportObserver()
                 .onData(data, false);
         }
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleClientRequestHandler.java
Patch:
@@ -45,7 +45,6 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)
     }
 
     private void writeRequest(ChannelHandlerContext ctx, final Request req, final ChannelPromise promise) {
-        DefaultFuture2.addTimeoutListener(req.getId(), ctx::close);
         Connection connection = Connection.getConnectionFromChannel(ctx.channel());
         final AbstractClientStream stream = AbstractClientStream.newClientStream(req, connection);
         final Http2StreamChannelBootstrap streamChannelBootstrap = new Http2StreamChannelBootstrap(ctx.channel());

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.rpc.protocol.tri;
 
-import grpc.health.v1.HealthCheckResponse;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
@@ -33,6 +32,8 @@
 import org.apache.dubbo.rpc.protocol.AbstractProtocol;
 import org.apache.dubbo.rpc.protocol.tri.service.TriBuiltinService;
 
+import grpc.health.v1.HealthCheckResponse;
+
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_CLIENT_THREADPOOL;
 import static org.apache.dubbo.common.constants.CommonConstants.THREADPOOL_KEY;
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleServerInboundHandler.java
Patch:
@@ -25,7 +25,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
         final AbstractServerStream serverStream = ctx.channel().attr(TripleConstant.SERVER_STREAM_KEY).get();
         final byte[] data = (byte[]) msg;
         if (serverStream != null) {
-            serverStream.asTransportObserver()
+            serverStream.inboundTransportObserver()
                 .onData(data, false);
         }
     }

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/UnaryClientStreamTest.java
Patch:
@@ -36,15 +36,15 @@ class UnaryClientStreamTest {
     public void testInit() {
         URL url = new ServiceConfigURL("test", "1.2.3.4", 8080);
         final UnaryClientStream stream = UnaryClientStream.unary(url);
-        final StreamObserver<Object> observer = stream.asStreamObserver();
+        final StreamObserver<Object> observer = stream.inboundMessageObserver();
         RpcInvocation inv = Mockito.mock(RpcInvocation.class);
         when(inv.getModuleModel()).thenReturn(ApplicationModel.defaultModel().getDefaultModule());
         // no invoker
         Assertions.assertThrows(NullPointerException.class, () -> observer.onNext(inv));
         // no subscriber
         Assertions.assertThrows(NullPointerException.class, () -> observer.onNext(inv));
 
-        AbstractChannelTransportObserver transportObserver = Mockito.mock(AbstractChannelTransportObserver.class);
+        OutboundTransportObserver transportObserver = Mockito.mock(OutboundTransportObserver.class);
         stream.subscribe(transportObserver);
         // no method descriptor
         Assertions.assertThrows(NullPointerException.class, () -> observer.onNext(inv));

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcContext.java
Patch:
@@ -550,7 +550,7 @@ public Object getObjectAttachment(String key) {
      * @return context
      */
     public RpcContext setAttachment(String key, String value) {
-        return setObjectAttachment(key, (Object) value);
+        return setObjectAttachment(key, value);
     }
 
     public RpcContext setAttachment(String key, Object value) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcContextAttachment.java
Patch:
@@ -17,13 +17,13 @@
 package org.apache.dubbo.rpc;
 
 import org.apache.dubbo.common.Experimental;
+import org.apache.dubbo.common.utils.CollectionUtils;
 
 import java.util.HashMap;
 import java.util.Map;
 
 public class RpcContextAttachment extends RpcContext{
     protected final Map<String, Object> attachments = new HashMap<>();
-    private final Map<String, Object> values = new HashMap<String, Object>();
 
     protected RpcContextAttachment() {
     }
@@ -142,7 +142,7 @@ public RpcContextAttachment setAttachments(Map<String, String> attachment) {
     @Experimental("Experiment api for supporting Object transmission")
     public RpcContextAttachment setObjectAttachments(Map<String, Object> attachment) {
         this.attachments.clear();
-        if (attachment != null && attachment.size() > 0) {
+        if (CollectionUtils.isNotEmptyMap(attachment)) {
             this.attachments.putAll(attachment);
         }
         return this;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcException.java
Patch:
@@ -95,7 +95,7 @@ public boolean isBiz() {
         return code == BIZ_EXCEPTION;
     }
 
-    public boolean isForbidded() {
+    public boolean isForbidden() {
         return code == FORBIDDEN_EXCEPTION;
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcServiceContext.java
Patch:
@@ -70,8 +70,6 @@ protected RpcServiceContext() {
     private Object response;
     private AsyncContext asyncContext;
 
-    private boolean remove = true;
-
     /**
      * Get the request object of the underlying RPC protocol, e.g. HttpServletRequest
      *
@@ -180,7 +178,7 @@ public void setFuture(CompletableFuture<?> future) {
 
     @Override
     public List<URL> getUrls() {
-        return urls == null && url != null ? (List<URL>) Arrays.asList(url) : urls;
+        return urls == null && url != null ? Arrays.asList(url) : urls;
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/TimeoutCountDownTest.java
Patch:
@@ -30,10 +30,12 @@ public void testTimeoutCountDown() throws InterruptedException {
         Assertions.assertEquals(5 * 1000, timeoutCountDown.getTimeoutInMilli());
         Assertions.assertFalse(timeoutCountDown.isExpired());
         Assertions.assertTrue(timeoutCountDown.timeRemaining(TimeUnit.SECONDS) > 0);
+        Assertions.assertTrue(timeoutCountDown.elapsedMillis() < TimeUnit.MILLISECONDS.convert(5, TimeUnit.SECONDS));
 
         Thread.sleep(6 * 1000);
 
         Assertions.assertTrue(timeoutCountDown.isExpired());
         Assertions.assertTrue(timeoutCountDown.timeRemaining(TimeUnit.SECONDS) <= 0);
+        Assertions.assertTrue(timeoutCountDown.elapsedMillis() > TimeUnit.MILLISECONDS.convert(5, TimeUnit.SECONDS));
     }
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/zookeeper/AbstractZookeeperTransporter.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * AbstractZookeeperTransporter is abstract implements of ZookeeperTransporter.
  * <p>
- * If you want to extends this, implements createZookeeperClient.
+ * If you want to extend this, implements createZookeeperClient.
  */
 public abstract class AbstractZookeeperTransporter implements ZookeeperTransporter {
     private static final Logger logger = LoggerFactory.getLogger(ZookeeperTransporter.class);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/zookeeper/ZookeeperClient.java
Patch:
@@ -33,13 +33,13 @@ public interface ZookeeperClient {
     List<String> addChildListener(String path, ChildListener listener);
 
     /**
-     * @param path:    directory. All of child of path will be listened.
+     * @param path:    directory. All child of path will be listened.
      * @param listener
      */
     void addDataListener(String path, DataListener listener);
 
     /**
-     * @param path:    directory. All of child of path will be listened.
+     * @param path:    directory. All child of path will be listened.
      * @param listener
      * @param executor another thread
      */

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/ClassUtils.java
Patch:
@@ -344,9 +344,9 @@ public static String getSizeMethod(Class<?> cls) {
     }
 
     public static String getMethodName(Method method, Class<?>[] parameterClasses, String rightCode) {
+        StringBuilder buf = new StringBuilder(rightCode);
         if (method.getParameterTypes().length > parameterClasses.length) {
             Class<?>[] types = method.getParameterTypes();
-            StringBuilder buf = new StringBuilder(rightCode);
             for (int i = parameterClasses.length; i < types.length; i++) {
                 if (buf.length() > 0) {
                     buf.append(',');
@@ -370,7 +370,7 @@ public static String getMethodName(Method method, Class<?>[] parameterClasses, S
                 buf.append(def);
             }
         }
-        return method.getName() + "(" + rightCode + ")";
+        return method.getName() + "(" + buf + ")";
     }
 
     public static Method searchMethod(Class<?> currentClass, String name, Class<?>[] parameterTypes) throws NoSuchMethodException {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/Compressor.java
Patch:
@@ -34,6 +34,8 @@
 @SPI(value = DEFAULT_COMPRESSOR, scope = ExtensionScope.FRAMEWORK)
 public interface Compressor {
 
+    Compressor NONE = new IdentityCompressor();
+
     String DEFAULT_COMPRESSOR = "identity";
 
     static Compressor getCompressor(FrameworkModel frameworkModel, String compressorStr) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/IdentityCompressor.java
Patch:
@@ -22,7 +22,6 @@
  */
 public class IdentityCompressor implements Compressor {
 
-    public static final Compressor NONE = new IdentityCompressor();
 
     @Override
     public String getMessageEncoding() {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/Stream.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Stream acts as a bi-directional intermediate layer for streaming data processing. It serializes object instance to
  * byte[] then send to remote, and deserializes byte[] to object instance from remote. {@link #asTransportObserver()}
- * and {@link #subscribe(TransportObserver)} provide {@link TransportObserver} to send or receive remote data.
+ * and {@link #subscribe(AbstractChannelTransportObserver)} provide {@link TransportObserver} to send or receive remote data.
  * {@link #asStreamObserver()} and {@link #subscribe(StreamObserver)} provide {@link StreamObserver}
  * as API for users fetching/emitting objects from/to remote peer.
  */
@@ -36,7 +36,7 @@ public interface Stream {
      *
      * @param observer receives remote byte[] data
      */
-    void subscribe(TransportObserver observer);
+    void subscribe(AbstractChannelTransportObserver observer);
 
     /**
      * Get a downstream data observer for writing byte[] data to this stream

File: dubbo-common/src/main/java/org/apache/dubbo/config/ConfigCenterConfig.java
Patch:
@@ -149,9 +149,7 @@ public URL toUrl() {
         if (StringUtils.isEmpty(map.get(PROTOCOL_KEY))) {
             map.put(PROTOCOL_KEY, ZOOKEEPER_PROTOCOL);
         }
-        URL url = UrlUtils.parseURL(address, map);
-        url.setScopeModel(getScopeModel());
-        return url;
+        return UrlUtils.parseURL(address, map).setScopeModel(getScopeModel());
     }
 
     public boolean checkOrUpdateInitialized(boolean update) {

File: dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/DubboTestChecker.java
Patch:
@@ -179,7 +179,9 @@ private void printThreadCheckingSummaryReport() {
 
     private void flushReportFile() {
         try {
-            reportWriter.flush();
+            if (reportWriter != null) {
+                reportWriter.flush();
+            }
             if (reportFileOut != null) {
                 reportFileOut.getFD().sync();
             }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Decodeable.java
Patch:
@@ -19,6 +19,6 @@
 
 public interface Decodeable {
 
-    public void decode() throws Exception;
+    void decode() throws Exception;
 
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/IdleSensible.java
Patch:
@@ -23,10 +23,10 @@
  */
 public interface IdleSensible {
     /**
-     * Whether the implementation can sense and handle the idle connection. By default it's false, the implementation
+     * Whether the implementation can sense and handle the idle connection. By default, it's false, the implementation
      * relies on dedicated timer to take care of idle connection.
      *
-     * @return whether has the ability to handle idle connection
+     * @return whether it has the ability to handle idle connection
      */
     default boolean canHandleIdle() {
         return false;

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java
Patch:
@@ -493,8 +493,6 @@ private Object finishRespWhenOverPayload(Channel channel, long size, byte[] head
                 if ((flag & FLAG_EVENT) != 0) {
                     res.setEvent(true);
                 }
-                // get status.
-                byte status = header[3];
                 res.setStatus(Response.CLIENT_ERROR);
                 String errorMsg = "Data length too large: " + size + ", max payload: " + payload + ", channel: " + channel;
                 logger.error(errorMsg);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/ReplierDispatcher.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.remoting.exchange.support;
 
+import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.ExchangeChannel;
 
@@ -41,7 +42,7 @@ public ReplierDispatcher(Replier<?> defaultReplier) {
 
     public ReplierDispatcher(Replier<?> defaultReplier, Map<Class<?>, Replier<?>> repliers) {
         this.defaultReplier = defaultReplier;
-        if (repliers != null && repliers.size() > 0) {
+        if (CollectionUtils.isNotEmptyMap(repliers)) {
             this.repliers.putAll(repliers);
         }
     }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java
Patch:
@@ -185,7 +185,7 @@ public void received(Channel channel, Object message) throws RemotingException {
                 logger.error(e.getMessage(), e);
             } else {
                 String echo = handler.telnet(channel, (String) message);
-                if (echo != null && echo.length() > 0) {
+                if (StringUtils.isNotEmpty(echo)) {
                     channel.send(echo);
                 }
             }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/codec/TelnetCodec.java
Patch:
@@ -177,8 +177,8 @@ protected Object decode(Channel channel, ChannelBuffer buffer, int readable, byt
 
         if (message[message.length - 1] == '\b') { // Windows backspace echo
             try {
-                boolean doublechar = message.length >= 3 && message[message.length - 3] < 0; // double byte char
-                channel.send(new String(doublechar ? new byte[]{32, 32, 8, 8} : new byte[]{32, 8}, getCharset(channel).name()));
+                boolean isDoubleChar = message.length >= 3 && message[message.length - 3] < 0; // double byte char
+                channel.send(new String(isDoubleChar ? new byte[]{32, 32, 8, 8} : new byte[]{32, 8}, getCharset(channel).name()));
             } catch (RemotingException e) {
                 throw new IOException(StringUtils.toString(e));
             }
@@ -234,7 +234,7 @@ protected Object decode(Channel channel, ChannelBuffer buffer, int readable, byt
                     for (int i = 0; i < ov.length(); i++) {
                         buf.append('\b');
                     }
-                    value = buf.toString() + value;
+                    value = buf + value;
                 }
                 try {
                     channel.send(value);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractServer.java
Patch:
@@ -44,7 +44,7 @@ public abstract class AbstractServer extends AbstractEndpoint implements Remotin
 
     protected static final String SERVER_THREAD_POOL_NAME = "DubboServerHandler";
     private static final Logger logger = LoggerFactory.getLogger(AbstractServer.class);
-    ExecutorService executor;
+    private ExecutorService executor;
     private InetSocketAddress localAddress;
     private InetSocketAddress bindAddress;
     private int accepts;

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/WrappedChannelHandler.java
Patch:
@@ -111,7 +111,7 @@ public ExecutorService getPreferredExecutorService(Object msg) {
         if (msg instanceof Response) {
             Response response = (Response) msg;
             DefaultFuture responseFuture = DefaultFuture.getFuture(response.getId());
-            // a typical scenario is the response returned after timeout, the timeout response may has completed the future
+            // a typical scenario is the response returned after timeout, the timeout response may have completed the future
             if (responseFuture == null) {
                 return getSharedExecutorService();
             } else {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/all/AllChannelHandler.java
Patch:
@@ -37,7 +37,7 @@ public AllChannelHandler(ChannelHandler handler, URL url) {
 
     @Override
     public void connected(Channel channel) throws RemotingException {
-        ExecutorService executor = getExecutorService();
+        ExecutorService executor = getSharedExecutorService();
         try {
             executor.execute(new ChannelEventRunnable(channel, handler, ChannelState.CONNECTED));
         } catch (Throwable t) {
@@ -47,7 +47,7 @@ public void connected(Channel channel) throws RemotingException {
 
     @Override
     public void disconnected(Channel channel) throws RemotingException {
-        ExecutorService executor = getExecutorService();
+        ExecutorService executor = getSharedExecutorService();
         try {
             executor.execute(new ChannelEventRunnable(channel, handler, ChannelState.DISCONNECTED));
         } catch (Throwable t) {
@@ -71,7 +71,7 @@ public void received(Channel channel, Object message) throws RemotingException {
 
     @Override
     public void caught(Channel channel, Throwable exception) throws RemotingException {
-        ExecutorService executor = getExecutorService();
+        ExecutorService executor = getSharedExecutorService();
         try {
             executor.execute(new ChannelEventRunnable(channel, handler, ChannelState.CAUGHT, exception));
         } catch (Throwable t) {

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyChannel.java
Patch:
@@ -218,7 +218,7 @@ public Object getAttribute(String key) {
 
     @Override
     public void setAttribute(String key, Object value) {
-        // The null value is unallowed in the ConcurrentHashMap.
+        // The null value is not allowed in the ConcurrentHashMap.
         if (value == null) {
             attributes.remove(key);
         } else {

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyCodecAdapter.java
Patch:
@@ -63,7 +63,7 @@ private class InternalEncoder extends MessageToByteEncoder {
 
         @Override
         protected void encode(ChannelHandlerContext ctx, Object msg, ByteBuf out) throws Exception {
-            org.apache.dubbo.remoting.buffer.ChannelBuffer buffer = new NettyBackedChannelBuffer(out);
+            ChannelBuffer buffer = new NettyBackedChannelBuffer(out);
             Channel ch = ctx.channel();
             NettyChannel channel = NettyChannel.getOrAddChannel(ch, url, handler);
             codec.encode(channel, buffer, msg);

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/ClientToServerTest.java
Patch:
@@ -34,8 +34,6 @@
  */
 public abstract class ClientToServerTest {
 
-    protected static final String LOCALHOST = "127.0.0.1";
-
     protected ExchangeServer server;
 
     protected ExchangeChannel client;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvoker.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.List;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -53,11 +52,11 @@ public class ForkingClusterInvoker<T> extends AbstractClusterInvoker<T> {
      * Use {@link NamedInternalThreadFactory} to produce {@link org.apache.dubbo.common.threadlocal.InternalThread}
      * which with the use of {@link org.apache.dubbo.common.threadlocal.InternalThreadLocal} in {@link RpcContext}.
      */
-    private final ExecutorService executor = Executors.newCachedThreadPool(
-        new NamedInternalThreadFactory("forking-cluster-timer", true));
+    private final ExecutorService executor;
 
     public ForkingClusterInvoker(Directory<T> directory) {
         super(directory);
+        executor = directory.getUrl().getOrDefaultApplicationModel().getApplicationExecutorRepository().getSharedExecutor();
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/ModuleEnvironment.java
Patch:
@@ -119,6 +119,7 @@ public void setDynamicConfiguration(DynamicConfiguration dynamicConfiguration) {
 
     @Override
     public void destroy() throws IllegalStateException {
+        super.destroy();
         this.orderedPropertiesConfiguration = null;
         this.globalConfiguration = null;
         this.dynamicGlobalConfiguration = null;

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/Deployer.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.rpc.model.ScopeModel;
 
-import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Future;
 
 /**
  */
@@ -31,8 +31,9 @@ public interface Deployer<E extends ScopeModel> {
 
     /**
      * Starts the component.
+     * @return
      */
-    CompletableFuture start() throws IllegalStateException;
+    Future start() throws IllegalStateException;
 
     /**
      * Stops the component.

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/cached/CachedThreadPool.java
Patch:
@@ -47,7 +47,7 @@ public class CachedThreadPool implements ThreadPool {
 
     @Override
     public Executor getExecutor(URL url) {
-        String name = url.getParameter(THREAD_NAME_KEY, DEFAULT_THREAD_NAME);
+        String name = url.getParameter(THREAD_NAME_KEY, (String) url.getAttribute(THREAD_NAME_KEY, DEFAULT_THREAD_NAME));
         int cores = url.getParameter(CORE_THREADS_KEY, DEFAULT_CORE_THREADS);
         int threads = url.getParameter(THREADS_KEY, Integer.MAX_VALUE);
         int queues = url.getParameter(QUEUES_KEY, DEFAULT_QUEUES);

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPool.java
Patch:
@@ -44,7 +44,7 @@ public class EagerThreadPool implements ThreadPool {
 
     @Override
     public Executor getExecutor(URL url) {
-        String name = url.getParameter(THREAD_NAME_KEY, DEFAULT_THREAD_NAME);
+        String name = url.getParameter(THREAD_NAME_KEY, (String) url.getAttribute(THREAD_NAME_KEY, DEFAULT_THREAD_NAME));
         int cores = url.getParameter(CORE_THREADS_KEY, DEFAULT_CORE_THREADS);
         int threads = url.getParameter(THREADS_KEY, Integer.MAX_VALUE);
         int queues = url.getParameter(QUEUES_KEY, DEFAULT_QUEUES);

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/fixed/FixedThreadPool.java
Patch:
@@ -43,7 +43,7 @@ public class FixedThreadPool implements ThreadPool {
 
     @Override
     public Executor getExecutor(URL url) {
-        String name = url.getParameter(THREAD_NAME_KEY, DEFAULT_THREAD_NAME);
+        String name = url.getParameter(THREAD_NAME_KEY, (String) url.getAttribute(THREAD_NAME_KEY, DEFAULT_THREAD_NAME));
         int threads = url.getParameter(THREADS_KEY, DEFAULT_THREADS);
         int queues = url.getParameter(QUEUES_KEY, DEFAULT_QUEUES);
         return new ThreadPoolExecutor(threads, threads, 0, TimeUnit.MILLISECONDS,

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/limited/LimitedThreadPool.java
Patch:
@@ -45,7 +45,7 @@ public class LimitedThreadPool implements ThreadPool {
 
     @Override
     public Executor getExecutor(URL url) {
-        String name = url.getParameter(THREAD_NAME_KEY, DEFAULT_THREAD_NAME);
+        String name = url.getParameter(THREAD_NAME_KEY, (String) url.getAttribute(THREAD_NAME_KEY, DEFAULT_THREAD_NAME));
         int cores = url.getParameter(CORE_THREADS_KEY, DEFAULT_CORE_THREADS);
         int threads = url.getParameter(THREADS_KEY, DEFAULT_THREADS);
         int queues = url.getParameter(QUEUES_KEY, DEFAULT_QUEUES);

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ScopeModelDestroyListener.java
Patch:
@@ -16,6 +16,6 @@
  */
 package org.apache.dubbo.rpc.model;
 
-public interface ScopeModelDestroyListener {
-    void onDestroy(ScopeModel scopeModel);
+public interface ScopeModelDestroyListener<T extends ScopeModel> {
+    void onDestroy(T scopeModel);
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConfigScopeModelInitializer.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.common.deploy.ModuleDeployer;
 import org.apache.dubbo.config.deploy.DefaultApplicationDeployer;
 import org.apache.dubbo.config.deploy.DefaultModuleDeployer;
+import org.apache.dubbo.config.deploy.FrameworkModelCleaner;
 import org.apache.dubbo.config.utils.DefaultConfigValidator;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
@@ -31,7 +32,7 @@ public class ConfigScopeModelInitializer implements ScopeModelInitializer {
 
     @Override
     public void initializeFrameworkModel(FrameworkModel frameworkModel) {
-
+        frameworkModel.addDestroyListener(new FrameworkModelCleaner());
     }
 
     @Override

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/DubboShutdownHook.java
Patch:
@@ -87,8 +87,8 @@ public void register() {
      */
     public void unregister() {
         if (registered.compareAndSet(true, false)) {
-            if (this.isAlive() || destroyed.get()) {
-                // DubboShutdownHook is running
+            if (this.isAlive()) {
+                // DubboShutdownHook thread is running
                 return;
             }
             try {

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java
Patch:
@@ -31,6 +31,7 @@
 import static org.hamcrest.Matchers.not;
 
 public class ProviderConfigTest {
+
     @Test
     public void testProtocol() throws Exception {
         ProviderConfig provider = new ProviderConfig();

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboDeployApplicationListener.java
Patch:
@@ -36,7 +36,7 @@
 import org.springframework.context.event.ContextRefreshedEvent;
 import org.springframework.core.Ordered;
 
-import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Future;
 
 /**
  * An ApplicationListener to control Dubbo application.
@@ -105,7 +105,7 @@ private void onContextRefreshedEvent(ContextRefreshedEvent event) {
         ModuleDeployer deployer = moduleModel.getDeployer();
         Assert.notNull(deployer, "Module deployer is null");
         // start module
-        CompletableFuture future = deployer.start();
+        Future future = deployer.start();
 
         // if the module does not start in background, await finish
         if (!deployer.isBackground()) {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/MetadataReportFactory.java
Patch:
@@ -27,4 +27,7 @@ public interface MetadataReportFactory {
 
     @Adaptive({"protocol"})
     MetadataReport getMetadataReport(URL url);
+
+    default void destroy() {
+    }
 }

File: dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/DubboMonitor.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ExecutorUtil;
-import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.monitor.Monitor;
 import org.apache.dubbo.monitor.MonitorService;
 import org.apache.dubbo.rpc.Invoker;
@@ -29,7 +28,6 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
@@ -52,7 +50,7 @@ public class DubboMonitor implements Monitor {
     /**
      * The timer for sending statistics
      */
-    private final ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(3, new NamedThreadFactory("DubboMonitorSendTimer", true));
+    private final ScheduledExecutorService scheduledExecutorService;
 
     /**
      * The future that can cancel the <b>scheduledExecutorService</b>
@@ -68,6 +66,7 @@ public class DubboMonitor implements Monitor {
     public DubboMonitor(Invoker<MonitorService> monitorInvoker, MonitorService monitorService) {
         this.monitorInvoker = monitorInvoker;
         this.monitorService = monitorService;
+        scheduledExecutorService = monitorInvoker.getUrl().getOrDefaultApplicationModel().getApplicationExecutorRepository().getSharedScheduledExecutor();
         // The time interval for timer <b>scheduledExecutorService</b> to send data
         final long monitorInterval = monitorInvoker.getUrl().getPositiveParameter("interval", 60000);
         // collect timer for collecting statistics data

File: dubbo-native/src/main/java/org/apache/dubbo/metadata/report/MetadataReportFactory$Adaptive.java
Patch:
@@ -27,4 +27,7 @@ public org.apache.dubbo.metadata.report.MetadataReport getMetadataReport(org.apa
 org.apache.dubbo.metadata.report.MetadataReportFactory extension = (org.apache.dubbo.metadata.report.MetadataReportFactory)scopeModel.getExtensionLoader(org.apache.dubbo.metadata.report.MetadataReportFactory.class).getExtension(extName);
 return extension.getMetadataReport(arg0);
 }
+public void destroy()  {
+throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.metadata.report.MetadataReportFactory.destroy() of interface org.apache.dubbo.metadata.report.MetadataReportFactory is not adaptive method!");
+}
 }

File: dubbo-native/src/main/java/org/apache/dubbo/utils/CodeGenerator.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.utils;
 
 import org.apache.commons.io.FileUtils;
-
 import org.apache.dubbo.common.extension.Adaptive;
 import org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator;
 import org.apache.dubbo.common.extension.SPI;
@@ -69,7 +68,7 @@ public static void main(String[] args) {
                 value = "adaptive";
             }
             AdaptiveClassCodeGenerator codeGenerator = new AdaptiveClassCodeGenerator(it, value);
-            String code = codeGenerator.generate();
+            String code = codeGenerator.generate(true);
             System.out.println(code);
             System.out.println("-----:" + it.getPackage());
             try {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/ShutdownTelnet.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.config.deploy.DefaultApplicationDeployer;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.qos.command.annotation.Cmd;
@@ -60,8 +59,7 @@ public String execute(CommandContext commandContext, String[] args) {
         StringBuilder buf = new StringBuilder();
         List<ApplicationModel> applicationModels = frameworkModel.getApplicationModels();
         for (ApplicationModel applicationModel : new ArrayList<>(applicationModels)) {
-            DefaultApplicationDeployer deployer = applicationModel.getBeanFactory().getBean(DefaultApplicationDeployer.class);
-            deployer.destroy();
+            applicationModel.destroy();
         }
         // TODO change to ApplicationDeployer.destroy() or ApplicationModel.destroy()
 //        DubboShutdownHook.getDubboShutdownHook().unregister();

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/CountTelnetTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.qos.command.impl.channel.MockNettyChannel;
-import org.apache.dubbo.qos.legacy.ProtocolUtils;
 import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.remoting.telnet.support.TelnetUtils;
 import org.apache.dubbo.rpc.Invoker;
@@ -44,7 +43,7 @@
 import static org.mockito.Mockito.reset;
 
 public class CountTelnetTest {
-    private static final BaseCommand count = new CountTelnet(FrameworkModel.defaultModel());
+    private BaseCommand count;
 
     private MockNettyChannel mockChannel;
     private Invoker<DemoService> mockInvoker;
@@ -56,6 +55,7 @@ public class CountTelnetTest {
 
     @BeforeEach
     public void setUp() {
+        count = new CountTelnet(FrameworkModel.defaultModel());
         latch = new CountDownLatch(2);
         mockInvoker = mock(Invoker.class);
         mockCommandContext = mock(CommandContext.class);
@@ -68,7 +68,7 @@ public void setUp() {
 
     @AfterEach
     public void tearDown() {
-        ProtocolUtils.closeAll();
+        FrameworkModel.destroyAll();
         mockChannel.close();
         reset(mockInvoker, mockCommandContext);
     }

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/InvokeTelnetTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.legacy.ProtocolUtils;
 import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.qos.legacy.service.DemoServiceImpl;
 import org.apache.dubbo.remoting.RemotingException;
@@ -64,7 +63,6 @@ public void setup() {
 
     @AfterEach
     public void after() {
-        ProtocolUtils.closeAll();
         frameworkModel.destroy();
         reset(mockChannel, mockCommandContext);
     }

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/ShutdownTelnetTest.java
Patch:
@@ -19,7 +19,6 @@
 import io.netty.channel.Channel;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
-import org.apache.dubbo.qos.legacy.ProtocolUtils;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.junit.jupiter.api.AfterEach;
@@ -33,20 +32,21 @@
 
 public class ShutdownTelnetTest {
 
-    private static final BaseCommand shutdown = new ShutdownTelnet(FrameworkModel.defaultModel());
+    private BaseCommand shutdown;
     private Channel mockChannel;
     private CommandContext mockCommandContext;
 
     @BeforeEach
     public void setUp() {
+        shutdown = new ShutdownTelnet(FrameworkModel.defaultModel());
         mockCommandContext = mock(CommandContext.class);
         mockChannel = mock(Channel.class);
         given(mockCommandContext.getRemote()).willReturn(mockChannel);
     }
 
     @AfterEach
     public void after() {
-        ProtocolUtils.closeAll();
+        FrameworkModel.destroyAll();
         reset(mockChannel, mockCommandContext);
     }
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/CommandHelperTest.java
Patch:
@@ -53,6 +53,7 @@
 
 public class CommandHelperTest {
     private CommandHelper commandHelper = new CommandHelper(FrameworkModel.defaultModel());
+
     @Test
     public void testHasCommand() throws Exception {
         assertTrue(commandHelper.hasCommand("greeting"));

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/ChangeTelnetHandlerTest.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.dubbo.remoting.telnet.TelnetHandler;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
-
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -74,7 +74,7 @@ private void givenLastCall() {
 
     @AfterEach
     public void after() {
-        ProtocolUtils.closeAll();
+        FrameworkModel.destroyAll();
         reset(mockChannel, mockInvoker);
     }
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/TraceTelnetHandlerTest.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.dubbo.remoting.telnet.TelnetHandler;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
 import org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -58,7 +58,7 @@ public void setUp() {
     @AfterEach
     public void tearDown() {
         reset(mockChannel, mockInvoker);
-        ProtocolUtils.closeAll();
+        FrameworkModel.destroyAll();
     }
 
     @Test

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleListener.java
Patch:
@@ -110,7 +110,7 @@ private void init() {
 
         String localRawRule = moduleModel.getModelEnvironment().getLocalMigrationRule();
         if (!StringUtils.isEmpty(localRawRule)) {
-            localRuleMigrationFuture = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory("DubboMigrationRuleDelayWorker", true))
+            localRuleMigrationFuture = moduleModel.getApplicationModel().getApplicationExecutorRepository().getSharedScheduledExecutor()
                 .schedule(() -> {
                     if (this.rawRule.equals(INIT)) {
                         this.process(new ConfigChangedEvent(null, null, localRawRule));

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java
Patch:
@@ -19,10 +19,10 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
 import org.apache.dubbo.common.utils.ConfigUtils;
-import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.common.utils.UrlUtils;
 import org.apache.dubbo.registry.NotifyListener;
@@ -48,7 +48,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
@@ -82,7 +81,7 @@ public abstract class AbstractRegistry implements Registry {
     // Local disk cache, where the special key value.registries records the list of registry centers, and the others are the list of notified service providers
     private final Properties properties = new Properties();
     // File cache timing writing
-    private final ExecutorService registryCacheExecutor = Executors.newFixedThreadPool(1, new NamedThreadFactory("DubboSaveRegistryCache", true));
+    private final ExecutorService registryCacheExecutor;
     private final AtomicLong lastCacheChanged = new AtomicLong();
     private final AtomicInteger savePropertiesRetryTimes = new AtomicInteger();
     private final Set<URL> registered = new ConcurrentHashSet<>();
@@ -100,6 +99,7 @@ public AbstractRegistry(URL url) {
         setUrl(url);
         registryManager = url.getOrDefaultApplicationModel().getBeanFactory().getBean(RegistryManager.class);
         localCacheEnabled = url.getParameter(REGISTRY_LOCAL_FILE_CACHE_ENABLED, true);
+        registryCacheExecutor = url.getOrDefaultApplicationModel().getDefaultExtension(ExecutorRepository.class).getSharedExecutor();
         if (localCacheEnabled) {
             // Start file save timer
             syncSaveFile = url.getParameter(REGISTRY_FILESAVE_SYNC_KEY, false);

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java
Patch:
@@ -87,6 +87,7 @@ public URL getUrl() {
     @Override
     public void doDestroy() throws Exception {
         serviceDiscovery.close();
+        curatorFramework.close();
     }
 
     @Override

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/Connection.java
Patch:
@@ -90,7 +90,7 @@ public Promise<Void> getClosePromise() {
 
     private Bootstrap create() {
         final Bootstrap bootstrap = new Bootstrap();
-        bootstrap.group(NettyEventLoopFactory.NIO_EVENT_LOOP_GROUP)
+        bootstrap.group(NettyEventLoopFactory.NIO_EVENT_LOOP_GROUP.get())
                 .option(ChannelOption.SO_KEEPALIVE, true)
                 .option(ChannelOption.TCP_NODELAY, true)
                 .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.rpc.ProtocolServer;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.protocol.AbstractProxyProtocol;
-
 import org.apache.http.HeaderElement;
 import org.apache.http.HeaderElementIterator;
 import org.apache.http.client.config.RequestConfig;
@@ -205,6 +204,9 @@ protected int getErrorCode(Throwable e) {
 
     @Override
     public void destroy() {
+        if (logger.isInfoEnabled()) {
+            logger.info("Destroying protocol [" + this.getClass().getSimpleName() + "] ...");
+        }
         super.destroy();
 
         if (connectionMonitor != null) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractServerStream.java
Patch:
@@ -181,7 +181,7 @@ protected Object[] deserializeRequest(byte[] data) {
     protected Metadata createRequestMeta() {
         Metadata metadata = new DefaultMetadata();
         metadata.putIfNotNull(TripleHeaderEnum.GRPC_ENCODING.getHeader(), super.getCompressor().getMessageEncoding())
-                .putIfNotNull(TripleHeaderEnum.GRPC_ACCEPT_ENCODING.getHeader(), TripleUtil.calcAcceptEncoding(invoker.getUrl()));
+                .putIfNotNull(TripleHeaderEnum.GRPC_ACCEPT_ENCODING.getHeader(), Compressor.getAcceptEncoding(getUrl().getOrDefaultFrameworkModel()));
         return metadata;
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleClientInboundHandler.java
Patch:
@@ -22,12 +22,12 @@
 public class TripleClientInboundHandler extends ChannelInboundHandlerAdapter {
     @Override
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
-        final AbstractClientStream clientStream = TripleUtil.getClientStream(ctx);
+        final AbstractClientStream clientStream = ctx.channel().attr(TripleConstant.CLIENT_STREAM_KEY).get();
 
         final byte[] data = (byte[]) msg;
         if (clientStream != null) {
             clientStream.asTransportObserver()
-                    .onData(data, false);
+                .onData(data, false);
         }
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleServerInboundHandler.java
Patch:
@@ -22,7 +22,7 @@
 public class TripleServerInboundHandler extends ChannelInboundHandlerAdapter {
     @Override
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
-        final AbstractServerStream serverStream = TripleUtil.getServerStream(ctx);
+        final AbstractServerStream serverStream = ctx.channel().attr(TripleConstant.SERVER_STREAM_KEY).get();
         final byte[] data = (byte[]) msg;
         if (serverStream != null) {
             serverStream.asTransportObserver()

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleServerInitializer.java
Patch:
@@ -24,7 +24,7 @@
 
 public class TripleServerInitializer extends ChannelInitializer<Channel> {
 
-    private FrameworkModel frameworkModel;
+    private final FrameworkModel frameworkModel;
 
     public TripleServerInitializer(FrameworkModel frameworkModel) {
         this.frameworkModel = frameworkModel;
@@ -35,7 +35,7 @@ protected void initChannel(Channel ch) throws Exception {
         final ChannelPipeline p = ch.pipeline();
         p.addLast(new TripleHttp2FrameServerHandler(frameworkModel));
         // TODO constraint MAX DATA_SIZE
-        p.addLast(new GrpcDataDecoder(Integer.MAX_VALUE));
+        p.addLast(new GrpcDataDecoder(Integer.MAX_VALUE, false));
         p.addLast(new TripleServerInboundHandler());
     }
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/manager/DefaultExecutorRepository.java
Patch:
@@ -87,7 +87,7 @@ public class DefaultExecutorRepository implements ExecutorRepository, ExtensionA
     public DefaultExecutorRepository() {
         for (int i = 0; i < DEFAULT_SCHEDULER_SIZE; i++) {
             ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(
-                new NamedThreadFactory("Dubbo-framework-scheduler"));
+                new NamedThreadFactory("Dubbo-framework-scheduler", true));
             scheduledExecutors.addItem(scheduler);
 
             executorServiceRing.addItem(new ThreadPoolExecutor(1, 1,

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtils.java
Patch:
@@ -279,7 +279,7 @@ public static void refreshMetadataAndInstance(ServiceInstance serviceInstance) {
             instance = new DefaultServiceInstance((DefaultServiceInstance) instance);
             calInstanceRevision(serviceDiscovery, instance);
             customizeInstance(instance);
-            if (serviceInstance.getPort() > 0) {
+            if (instance.getPort() > 0) {
                 // update service instance revision
                 serviceDiscovery.update(instance);
             }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryFactory.java
Patch:
@@ -27,7 +27,7 @@
  *
  * @see org.apache.dubbo.registry.support.AbstractRegistryFactory
  */
-@SPI(value = "dubbo", scope = APPLICATION)
+@SPI(scope = APPLICATION)
 public interface RegistryFactory {
 
     /**

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -709,7 +709,9 @@ private void registerServiceInstance() {
             // scheduled task for updating Metadata and ServiceInstance
             asyncMetadataFuture = executorRepository.nextScheduledExecutor().scheduleAtFixedRate(() -> {
                 InMemoryWritableMetadataService localMetadataService = (InMemoryWritableMetadataService) WritableMetadataService.getDefaultExtension(applicationModel);
-                localMetadataService.blockUntilUpdated();
+                if (!applicationModel.getDeployer().isStopping() || !applicationModel.getDeployer().isStopped()) {
+                    localMetadataService.blockUntilUpdated();
+                }
                 try {
                     ServiceInstanceMetadataUtils.refreshMetadataAndInstance(serviceInstance);
                 } catch (Exception e) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -304,6 +304,8 @@ public interface CommonConstants {
 
     String INVOKER_LISTENER_KEY = "invoker.listener";
 
+    String REGISTRY_PROTOCOL_LISTENER_KEY = "registry.protocol.listener";
+
     String DUBBO_VERSION_KEY = "dubbo";
 
     String TAG_KEY = "dubbo.tag";

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/single/exportprovider/SingleRegistryCenterExportProviderIntegrationTest.java
Patch:
@@ -46,6 +46,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_PROTOCOL_LISTENER_KEY;
 import static org.apache.dubbo.integration.Constants.SINGLE_CONFIG_CENTER_EXPORT_PROVIDER;
 import static org.apache.dubbo.rpc.Constants.SCOPE_LOCAL;
 
@@ -124,7 +125,7 @@ public void setUp() throws Exception {
             instance.getHostname(),
             instance.getPort()));
         Map<String, String> parameters = new HashMap<>();
-        parameters.put("registry.protocol.listener", "singleConfigCenterExportProvider");
+        parameters.put(REGISTRY_PROTOCOL_LISTENER_KEY, "singleConfigCenterExportProvider");
         registryConfig.updateParameters(parameters);
         DubboBootstrap.getInstance().registry(registryConfig);
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/AbstractRetryTask.java
Patch:
@@ -53,7 +53,7 @@ public abstract class AbstractRetryTask implements TimerTask {
     /**
      * retry period
      */
-    final long retryPeriod;
+    private final long retryPeriod;
 
     /**
      * define the most retry times

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/ReExportTask.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.registry.support.FailbackRegistry;
 
 /**
- *
+ * ReExportTask
  */
 public class ReExportTask extends AbstractRetryTask {
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java
Patch:
@@ -182,7 +182,7 @@ public void doSaveProperties(long version) {
                 lockfile.createNewFile();
             }
             try (RandomAccessFile raf = new RandomAccessFile(lockfile, "rw");
-                 FileChannel channel = raf.getChannel()) {
+                FileChannel channel = raf.getChannel()) {
                 FileLock lock = channel.tryLock();
                 if (lock == null) {
                     throw new IOException("Can not lock the registry cache file " + file.getAbsolutePath() + ", ignore and retry later, maybe multi java process use the file, please config: dubbo.registry.file=xxx.properties");

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/CacheableFailbackRegistry.java
Patch:
@@ -199,7 +199,7 @@ protected ServiceAddressURL createURL(String rawProvider, URL consumerURL, Map<S
         boolean encoded = true;
         // use encoded value directly to avoid URLDecoder.decode allocation.
         int paramStartIdx = rawProvider.indexOf(ENCODED_QUESTION_MARK);
-        if (paramStartIdx == -1) {// if ENCODED_QUESTION_MARK does not shown, mark as not encoded.
+        if (paramStartIdx == -1) {// if ENCODED_QUESTION_MARK does not show, mark as not encoded.
             encoded = false;
         }
         String[] parts = URLStrParser.parseRawURLToArrays(rawProvider, paramStartIdx);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/CacheableFailbackRegistryTest.java
Patch:
@@ -28,7 +28,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-public class CacheableFallbackRegistryTest {
+public class CacheableFailbackRegistryTest {
 
     static String service;
     static URL serviceUrl;
@@ -142,7 +142,7 @@ public void testURLParamCache() {
     }
 
     @Test
-    public void testRemove() throws Exception {
+    public void testRemove() {
         final AtomicReference<Integer> resCount = new AtomicReference<>(0);
         registry = new MockCacheableRegistryImpl(registryUrl);
         URL url = URLStrParser.parseEncodedStr(urlStr);

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/builder/MapTypeBuilder.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.metadata.definition.TypeDefinitionBuilder;
 import org.apache.dubbo.metadata.definition.model.TypeDefinition;
+import org.apache.dubbo.metadata.definition.util.ClassUtils;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
@@ -58,7 +59,7 @@ public TypeDefinition build(Type type, Class<?> clazz, Map<String, TypeDefinitio
                             + Arrays.toString(actualTypeArgs), type, actualTypeArgs));
         }
 
-        String mapType = type.toString();
+        String mapType = ClassUtils.getCanonicalNameForParameterizedType(parameterizedType);
 
         TypeDefinition td = typeCache.get(mapType);
         if (td != null) {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/util/ClassUtils.java
Patch:
@@ -118,7 +118,7 @@ public static String getCanonicalNameForParameterizedType(ParameterizedType para
             if (ownerType instanceof Class) {
                 sb.append(((Class) ownerType).getName());
             } else {
-                sb.append(ownerType.toString());
+                sb.append(ownerType);
             }
 
             sb.append('.');

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/support/AbstractMetadataReport.java
Patch:
@@ -159,7 +159,7 @@ private void doSaveProperties(long version) {
                 lockfile.createNewFile();
             }
             try (RandomAccessFile raf = new RandomAccessFile(lockfile, "rw");
-                 FileChannel channel = raf.getChannel()) {
+                FileChannel channel = raf.getChannel()) {
                 FileLock lock = channel.tryLock();
                 if (lock == null) {
                     throw new IOException("Can not lock the metadataReport cache file " + file.getAbsolutePath() + ", ignore and retry later, maybe multi java process use the file, please config: dubbo.metadata.file=xxx.properties");

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/definition/TypeDefinitionBuilderTest.java
Patch:
@@ -24,11 +24,11 @@
 public class TypeDefinitionBuilderTest {
 
     @Test
-    public void testSortTypeBuilder(){
+    public void testSortTypeBuilder() {
         TypeBuilder tb = TypeDefinitionBuilder.BUILDERS.get(0);
         Assertions.assertTrue(tb instanceof TestTypeBuilder);
 
-        tb = TypeDefinitionBuilder.BUILDERS.get(TypeDefinitionBuilder.BUILDERS.size()-1);
+        tb = TypeDefinitionBuilder.BUILDERS.get(TypeDefinitionBuilder.BUILDERS.size() - 1);
         Assertions.assertTrue(tb instanceof Test3TypeBuilder);
     }
 }

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/store/InterfaceNameTestService.java
Patch:
@@ -21,5 +21,5 @@
  */
 public interface InterfaceNameTestService {
 
-    public void test();
+    void test();
 }

File: dubbo-metadata/dubbo-metadata-definition-protobuf/src/test/java/org/apache/dubbo/metadata/definition/protobuf/ProtobufTypeBuilderTest.java
Patch:
@@ -71,7 +71,7 @@ public void testProtobufBuilder() {
                 equalTo("java.util.List<org.apache.dubbo.metadata.definition.protobuf.model.GooglePB.PhoneNumber>"));
         assertThat(propertiesMap.containsKey("doubleMap"), is(true));
         assertThat(getTypeName(propertiesMap.get("doubleMap"), types),
-                equalTo("java.util.Map<java.lang.String,org.apache.dubbo.metadata.definition.protobuf.model.GooglePB$PhoneNumber>"));
+                equalTo("java.util.Map<java.lang.String,org.apache.dubbo.metadata.definition.protobuf.model.GooglePB.PhoneNumber>"));
         assertThat(getTypeName(propertiesMap.get("bytesList"), types),
                 equalTo("java.util.List<com.google.protobuf.ByteString>"));
         assertThat(getTypeName(propertiesMap.get("bytesMap"), types),

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleClientRequestHandler.java
Patch:
@@ -77,9 +77,9 @@ private void writeRequest(ChannelHandlerContext ctx, final Request req, final Ch
             ctx.channel().attr(TripleConstant.SSL_ATTRIBUTE_KEY).set(Boolean.parseBoolean(ssl));
         }
 
-        // get compressor
+        // Compressor can not be set by dynamic config
         String compressorStr = ConfigurationUtils
-            .getGlobalConfiguration(url.getScopeModel()).getString(COMPRESSOR_KEY);
+            .getCachedDynamicProperty(inv.getModuleModel(),COMPRESSOR_KEY,DEFAULT_COMPRESSOR);
 
         if (null != compressorStr && !compressorStr.equals(DEFAULT_COMPRESSOR)) {
             Compressor compressor = url.getOrDefaultApplicationModel().getExtensionLoader(Compressor.class).getExtension(compressorStr);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/MigrationRuleHandlerTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.registry.client.migration.model.MigrationRule;
 import org.apache.dubbo.registry.client.migration.model.MigrationStep;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -31,6 +32,7 @@ public void test() {
         URL url = Mockito.mock(URL.class);
         Mockito.when(url.getDisplayServiceKey()).thenReturn("test");
         Mockito.when(url.getParameter(Mockito.any(), (String) Mockito.any())).thenAnswer(i->i.getArgument(1));
+        Mockito.when(url.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());
         MigrationRuleHandler handler = new MigrationRuleHandler(invoker, url);
 
         Mockito.when(invoker.migrateToForceApplicationInvoker(Mockito.any())).thenReturn(true);

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JavassistCompiler.java
Patch:
@@ -39,7 +39,7 @@ public class JavassistCompiler extends AbstractCompiler {
     private static final Pattern FIELD_PATTERN = Pattern.compile("[^\n]+=[^\n]+;");
 
     @Override
-    public Class<?> doCompile(String name, String source) throws Throwable {
+    public Class<?> doCompile(ClassLoader classLoader, String name, String source) throws Throwable {
         CtClassBuilder builder = new CtClassBuilder();
         builder.setClassName(name);
 
@@ -77,7 +77,6 @@ public Class<?> doCompile(String name, String source) throws Throwable {
         });
 
         // compile
-        ClassLoader classLoader = org.apache.dubbo.common.utils.ClassUtils.getCallerClassLoader(getClass());
         CtClass cls = builder.build(classLoader);
         return cls.toClass(classLoader, JavassistCompiler.class.getProtectionDomain());
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java
Patch:
@@ -110,7 +110,7 @@ public JdkCompiler(String javaVersion) {
     }
 
     @Override
-    public Class<?> doCompile(String name, String sourceCode) throws Throwable {
+    public Class<?> doCompile(ClassLoader ignored, String name, String sourceCode) throws Throwable {
         int i = name.lastIndexOf('.');
         String packageName = i < 0 ? "" : name.substring(0, i);
         String className = i < 0 ? name : name.substring(i + 1);

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -1163,7 +1163,8 @@ private Class<?> getAdaptiveExtensionClass() {
     }
 
     private Class<?> createAdaptiveExtensionClass() {
-        ClassLoader classLoader = findClassLoader();
+        // Adaptive Classes' ClassLoader should be the same with Real SPI interface classes' ClassLoader
+        ClassLoader classLoader = type.getClassLoader();
         try {
             if (NativeUtils.isNative()) {
                 return classLoader.loadClass(type.getName() + "$Adaptive");

File: dubbo-common/src/test/java/org/apache/dubbo/config/context/ConfigManagerTest.java
Patch:
@@ -119,7 +119,7 @@ public void testMonitorConfig() {
 
     // Test MonitorConfig correlative methods
     @Test
-    public void tesModuleConfig() {
+    public void testModuleConfig() {
         ModuleConfig config = new ModuleConfig();
         moduleConfigManager.setModule(config);
         assertTrue(moduleConfigManager.getModule().isPresent());

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/ConfigTest.java
Patch:
@@ -845,6 +845,7 @@ public void testSystemPropertyOverrideReferenceConfig() throws Exception {
             assertEquals(1234, defaultConsumer.getTimeout());
             assertEquals(false, defaultConsumer.isCheck());
         } finally {
+            // If we don't stop here, somewhere else will throw BeanCreationException of duplication.
             DubboBootstrap.getInstance().stop();
         }
     }

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/ShutdownHookTest.java
Patch:
@@ -62,6 +62,7 @@ public void testDisableShutdownHook() throws InterruptedException {
             Assertions.assertEquals(true, DubboBootstrap.getInstance().isStarted());
             Assertions.assertEquals(false, DubboBootstrap.getInstance().isStopped());
         } finally {
+            DubboBootstrap.getInstance().stop();
             SysProps.clear();
         }
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ClientStream.java
Patch:
@@ -29,7 +29,7 @@ protected ClientStream(URL url) {
 
     @Override
     protected StreamObserver<Object> createStreamObserver() {
-        return new ClientStreamObserver() {
+        ClientStreamObserver clientStreamObserver = new ClientStreamObserver() {
             boolean metaSent;
 
             @Override
@@ -48,6 +48,8 @@ public void onError(Throwable throwable) {
                 transportError(throwable);
             }
         };
+        clientStreamObserver.setCancellationContext(getCancellationContext());
+        return clientStreamObserver;
     }
 
     @Override

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -551,7 +551,6 @@ protected void checkAndUpdateSubConfigs() {
             } catch (ClassNotFoundException e) {
                 throw new IllegalStateException(e.getMessage(), e);
             }
-            //checkInterfaceAndMethods(interfaceClass, getMethods());
         }
 
         checkStubAndLocal(interfaceClass);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -323,7 +323,6 @@ private void checkAndUpdateSubConfigs() {
             } catch (ClassNotFoundException e) {
                 throw new IllegalStateException(e.getMessage(), e);
             }
-            //checkInterfaceAndMethods(interfaceClass, getMethods());
             checkRef();
             generic = Boolean.FALSE.toString();
         }

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/protocol/CountInvokerListener.java
Patch:
@@ -29,6 +29,7 @@ public class CountInvokerListener implements InvokerListener {
 
     @Override
     public void referred(Invoker<?> invoker) throws RpcException {
+        counter.set(0);
         counter.incrementAndGet();
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/ServiceConfigBase.java
Patch:
@@ -186,7 +186,7 @@ protected void checkRef() {
         if (!interfaceClass.isInstance(ref)) {
             throw new IllegalStateException("The class "
                 + ref.getClass().getName() + getClassloaderDesc(ref.getClass()) + " unimplemented interface "
-                + interfaceClass + getClassloaderDesc(ref.getClass()) + "!");
+                + interfaceClass + getClassloaderDesc(interfaceClass) + "!");
         }
     }
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleRouter.java
Patch:
@@ -288,7 +288,7 @@ protected Map<String, List<Invoker<?>>> computeSubsetMap(List<Invoker<?>> invoke
                 Map<String, String> labels = subset.getLabels();
 
                 for (Invoker<?> invoker : invokers) {
-                    Map<String, String> parameters = invoker.getUrl().getParameters();
+                    Map<String, String> parameters = invoker.getUrl().getServiceParameters(url.getProtocolServiceKey());
                     if (containMapKeyValue(parameters, labels)) {
                         subsetInvokerList.add(invoker);
                     }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.rpc.protocol.dubbo;
 
+import org.apache.dubbo.common.config.Configuration;
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
@@ -123,7 +124,8 @@ public void decode() throws Exception {
         if (!hasDecoded && channel != null && inputStream != null) {
             try {
                 if (invocation != null) {
-                    if (ConfigurationUtils.getSystemConfiguration(channel.getUrl().getScopeModel()).getBoolean(SERIALIZATION_SECURITY_CHECK_KEY, true)) {
+                    Configuration systemConfiguration = ConfigurationUtils.getSystemConfiguration(channel.getUrl().getScopeModel());
+                    if (systemConfiguration == null || systemConfiguration.getBoolean(SERIALIZATION_SECURITY_CHECK_KEY, true)) {
                         Object serializationTypeObj = invocation.get(SERIALIZATION_ID_KEY);
                         if (serializationTypeObj != null) {
                             if ((byte) serializationTypeObj != serializationType) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -63,7 +63,7 @@ public class ContextFilter implements Filter, Filter.Listener {
     private static final Set<String> UNLOADING_KEYS;
 
     static {
-        UNLOADING_KEYS = new HashSet<>(128);
+        UNLOADING_KEYS = new HashSet<>(16);
         UNLOADING_KEYS.add(PATH_KEY);
         UNLOADING_KEYS.add(INTERFACE_KEY);
         UNLOADING_KEYS.add(GROUP_KEY);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java
Patch:
@@ -43,7 +43,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.util.LinkedHashMap;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -225,7 +225,7 @@ public Object decode(Channel channel, InputStream input) throws IOException {
             if (map != null && map.size() > 0) {
                 Map<String, Object> attachment = getObjectAttachments();
                 if (attachment == null) {
-                    attachment = new LinkedHashMap<>();
+                    attachment = new HashMap<>();
                 }
                 attachment.putAll(map);
                 setObjectAttachments(attachment);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractStream.java
Patch:
@@ -37,7 +37,7 @@
 import io.netty.handler.codec.http2.Http2Headers;
 
 import java.util.ArrayList;
-import java.util.LinkedHashMap;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -291,7 +291,7 @@ private Metadata getTrailers(GrpcStatus grpcStatus) {
     }
 
     protected Map<String, Object> parseMetadataToAttachmentMap(Metadata metadata) {
-        Map<String, Object> attachments = new LinkedHashMap<>();
+        Map<String, Object> attachments = new HashMap<>();
         for (Map.Entry<CharSequence, CharSequence> header : metadata) {
             String key = header.getKey().toString();
             if (Http2Headers.PseudoHeaderName.isPseudoHeader(key)) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Cluster.java
Patch:
@@ -45,7 +45,7 @@ public interface Cluster {
      * @throws RpcException
      */
     @Adaptive
-    <T> Invoker<T> join(Directory<T> directory) throws RpcException;
+    <T> Invoker<T> join(Directory<T> directory, boolean buildFilterChain) throws RpcException;
 
     static Cluster getCluster(ScopeModel scopeModel, String name) {
         return getCluster(scopeModel, name, true);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AvailableCluster.java
Patch:
@@ -30,7 +30,7 @@ public class AvailableCluster implements Cluster {
     public static final String NAME = "available";
 
     @Override
-    public <T> Invoker<T> join(Directory<T> directory) throws RpcException {
+    public <T> Invoker<T> join(Directory<T> directory, boolean buildFilterChain) throws RpcException {
         return new AvailableClusterInvoker<>(directory);
     }
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterWrapper.java
Patch:
@@ -34,9 +34,9 @@ public MockClusterWrapper(Cluster cluster) {
     }
 
     @Override
-    public <T> Invoker<T> join(Directory<T> directory) throws RpcException {
+    public <T> Invoker<T> join(Directory<T> directory, boolean buildFilterChain) throws RpcException {
         return new MockClusterInvoker<T>(directory,
-                this.cluster.join(directory));
+                this.cluster.join(directory, buildFilterChain));
     }
 
     public Cluster getCluster() {

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Cluster.java
Patch:
@@ -27,7 +27,7 @@ <T> com.alibaba.dubbo.rpc.Invoker<T> join(com.alibaba.dubbo.rpc.cluster.Director
             com.alibaba.dubbo.rpc.RpcException;
 
     @Override
-    default <T> Invoker<T> join(Directory<T> directory) throws RpcException {
+    default <T> Invoker<T> join(Directory<T> directory, boolean buildFilterChain) throws RpcException {
         return null;
     }
 }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/mock/MockCluster.java
Patch:
@@ -23,7 +23,7 @@
 
 public class MockCluster implements Cluster {
     @Override
-    public <T> Invoker<T> join(Directory<T> directory) throws RpcException {
+    public <T> Invoker<T> join(Directory<T> directory, boolean buildFilterChain) throws RpcException {
         return null;
     }
 }

File: dubbo-native/src/main/java/org/apache/dubbo/rpc/cluster/Cluster$Adaptive.java
Patch:
@@ -18,15 +18,16 @@
 import org.apache.dubbo.rpc.model.ScopeModel;
 import org.apache.dubbo.rpc.model.ScopeModelUtil;
 public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
-public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
+@Override
+public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0, boolean buildFilterChain) throws org.apache.dubbo.rpc.RpcException {
 if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
 if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
 org.apache.dubbo.common.URL url = arg0.getUrl();
 String extName = url.getParameter("cluster", "failover");
 if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
 ScopeModel scopeModel = ScopeModelUtil.getOrDefault(url.getScopeModel(), org.apache.dubbo.rpc.cluster.Cluster.class);
 org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)scopeModel.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
-return extension.join(arg0);
+return extension.join(arg0, buildFilterChain);
 }
 public org.apache.dubbo.rpc.cluster.Cluster getCluster(java.lang.String arg0)  {
 throw new UnsupportedOperationException("The method public static org.apache.dubbo.rpc.cluster.Cluster org.apache.dubbo.rpc.cluster.Cluster.getCluster(java.lang.String) of interface org.apache.dubbo.rpc.cluster.Cluster is not adaptive method!");

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -281,7 +281,7 @@ private List<Invoker<T>> toMergeInvokerList(List<Invoker<T>> invokers) {
             for (List<Invoker<T>> groupList : groupMap.values()) {
                 StaticDirectory<T> staticDirectory = new StaticDirectory<>(groupList);
                 staticDirectory.buildRouterChain();
-                mergedInvokers.add(cluster.join(staticDirectory));
+                mergedInvokers.add(cluster.join(staticDirectory, false));
             }
         } else {
             mergedInvokers = invokers;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -556,7 +556,7 @@ protected <T> ClusterInvoker<T> doCreateInvoker(DynamicDirectory<T> directory, C
         directory.buildRouterChain(urlToRegistry);
         directory.subscribe(toSubscribeUrl(urlToRegistry));
 
-        return (ClusterInvoker<T>) cluster.join(directory);
+        return (ClusterInvoker<T>) cluster.join(directory, true);
     }
 
     public <T> void reRefer(ClusterInvoker<?> invoker, URL newSubscribeUrl) {

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocolTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.dubbo.rpc.protocol.dubbo.support.RemoteServiceImpl;
 import org.apache.dubbo.rpc.protocol.dubbo.support.Type;
 import org.apache.dubbo.rpc.service.EchoService;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
@@ -242,7 +243,7 @@ public void testRemoteApplicationName() throws Exception {
         Mockito.when(dic.getConsumerUrl()).thenReturn(url);
 
         FailfastCluster cluster = new FailfastCluster();
-        Invoker<DemoService> clusterInvoker = cluster.join(dic);
+        Invoker<DemoService> clusterInvoker = cluster.join(dic, true);
         Result result = clusterInvoker.invoke(invocation);
         Thread.sleep(10);
         assertEquals(result.getValue(), "consumer");

File: dubbo-rpc/dubbo-rpc-injvm/src/test/java/org/apache/dubbo/rpc/protocol/injvm/ProtocolTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import org.junit.jupiter.api.Test;
 
@@ -37,7 +38,7 @@ public String echo(String e) {
     };
 
     static {
-        InjvmProtocol injvm = InjvmProtocol.getInjvmProtocol();
+        InjvmProtocol injvm = InjvmProtocol.getInjvmProtocol(FrameworkModel.defaultModel());
     }
 
     ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getExtension("javassist");

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/exchange/support/header/HeartbeatHandlerTest.java
Patch:
@@ -57,12 +57,15 @@ public void after() throws Exception {
             server = null;
         }
 
+        FakeChannelHandlers.resetChannelHandlers();
+
         // wait for timer to finish
         Thread.sleep(2000);
     }
 
     @Test
     public void testServerHeartbeat() throws Exception {
+        FakeChannelHandlers.resetChannelHandlers();
         URL serverURL = URL.valueOf("telnet://localhost:" + NetUtils.getAvailablePort(56780))
                 .addParameter(Constants.EXCHANGER_KEY, HeaderExchanger.NAME)
                 .addParameter(Constants.TRANSPORTER_KEY, "netty3")

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceURLBuilder.java
Patch:
@@ -34,7 +34,7 @@ public interface MetadataServiceURLBuilder {
      * Build the {@link URL URLs} from the specified {@link ServiceInstance}
      *
      * @param serviceInstance {@link ServiceInstance}
-     * @return TODO, usually, we generate one metadata url from one instance. There's no scenario to return a metadta url list.
+     * @return TODO, usually, we generate one metadata url from one instance. There's no scenario to return a metadata url list.
      */
     List<URL> build(ServiceInstance serviceInstance);
 }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcServiceContext.java
Patch:
@@ -651,5 +651,4 @@ public static void setRpcContext(URL url) {
         RpcServiceContext rpcContext = RpcContext.getServiceContext();
         rpcContext.setConsumerUrl(url);
     }
-
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ServerStream.java
Patch:
@@ -103,8 +103,7 @@ public void onData(byte[] in, boolean endStream) {
                         getStreamSubscriber().onNext(arguments[0]);
                     }
                 }
-            } catch (
-                Throwable t) {
+            } catch (Throwable t) {
                 transportError(GrpcStatus.fromCode(GrpcStatus.Code.INTERNAL)
                     .withDescription("Deserialize request failed")
                     .withCause(t));

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/UnaryServerStream.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
-import io.netty.handler.codec.http.HttpHeaderNames;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.stream.StreamObserver;
 import org.apache.dubbo.remoting.TimeoutException;
@@ -27,6 +26,8 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 
+import io.netty.handler.codec.http.HttpHeaderNames;
+
 import java.util.Map;
 import java.util.concurrent.CompletionStage;
 import java.util.function.BiConsumer;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java
Patch:
@@ -127,9 +127,9 @@ protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, Load
             Method method;
             try {
                 method = returnType.getMethod(merger, returnType);
-            } catch (NoSuchMethodException e) {
+            } catch (NoSuchMethodException | NullPointerException e) {
                 throw new RpcException("Can not merge result because missing method [ " + merger + " ] in class [ " +
-                        returnType.getName() + " ]");
+                    returnType.getName() + " ]");
             }
             if (!Modifier.isPublic(method.getModifiers())) {
                 method.setAccessible(true);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -253,7 +253,7 @@ public void doUnsubscribe(URL url, NotifyListener listener) {
             String serviceNamesKey = toStringKeys(serviceNames);
             ServiceInstancesChangedListener instancesChangedListener = serviceListeners.get(serviceNamesKey);
             if (instancesChangedListener != null) {
-                instancesChangedListener.removeListener(protocolServiceKey);
+                instancesChangedListener.removeListener(protocolServiceKey, listener);
                 if (!instancesChangedListener.hasListeners()) {
                     serviceListeners.remove(serviceNamesKey);
                 }

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryTest.java
Patch:
@@ -211,10 +211,10 @@ public void testSubscribeURLs() {
         // still called once, not executed this time
         verify(serviceDiscovery, times(1)).addServiceInstancesChangedListener(multiAppsInstanceListener);
         // check different protocol
-        Map<String, NotifyListener> serviceListeners = multiAppsInstanceListener.getServiceListeners();
+        Map<String, Set<NotifyListener>> serviceListeners = multiAppsInstanceListener.getServiceListeners();
         assertEquals(2, serviceListeners.size());
         String protocolServiceKey = url2.getServiceKey() + GROUP_CHAR_SEPARATOR + url2.getParameter(PROTOCOL_KEY, DUBBO);
-        assertEquals(testServiceListener2, serviceListeners.get(protocolServiceKey));
+        assertTrue(serviceListeners.get(protocolServiceKey).contains(testServiceListener2));
     }
 
     /**

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/event/listener/MockServiceInstancesChangedListener.java
Patch:
@@ -40,7 +40,7 @@ public List<URL> getAddresses(String serviceProtocolKey, URL consumerURL) {
         return super.getAddresses(serviceProtocolKey, consumerURL);
     }
 
-    public Map<String, NotifyListener> getServiceListeners () {
+    public Map<String, Set<NotifyListener>> getServiceListeners () {
        return listeners;
     }
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/DefaultFuture2.java
Patch:
@@ -163,6 +163,7 @@ public boolean cancel(boolean mayInterruptIfRunning) {
         errorResult.setErrorMessage("request future has been canceled.");
         this.doReceived(errorResult);
         FUTURES.remove(request.getId());
+        timeoutCheckTask.cancel();
         return true;
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/FieldUtils.java
Patch:
@@ -32,10 +32,10 @@ public interface FieldUtils {
      *
      * @param declaredClass the declared class
      * @param fieldName     the name of {@link Field}
-     * @return if can't be found, return <code>null</code>
+     * @return if field can't be found, return <code>null</code>
      */
     static Field getDeclaredField(Class<?> declaredClass, String fieldName) {
-        Field field = null;
+        Field field;
         try {
             field = declaredClass.getDeclaredField(fieldName);
         } catch (NoSuchFieldException ignored) {

File: dubbo-common/src/test/java/org/apache/dubbo/config/context/ConfigManagerTest.java
Patch:
@@ -34,6 +34,7 @@
 
 import static java.util.Arrays.asList;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY;
+import static org.apache.dubbo.common.constants.MetricsConstants.PROTOCOL_PROMETHEUS;
 import static org.apache.dubbo.config.context.ConfigManager.DUBBO_CONFIG_MODE;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -127,8 +128,9 @@ public void tesModuleConfig() {
 
     // Test MetricsConfig correlative methods
     @Test
-    public void tesMetricsConfig() {
+    public void testMetricsConfig() {
         MetricsConfig config = new MetricsConfig();
+        config.setProtocol(PROTOCOL_PROMETHEUS);
         configManager.setMetrics(config);
         assertTrue(configManager.getMetrics().isPresent());
         assertEquals(config, configManager.getMetrics().get());

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -325,11 +325,11 @@ private Map<String, String> appendConfig() {
             }
         }
 
-        AbstractConfig.appendParameters(map, getMetrics());
         AbstractConfig.appendParameters(map, getApplication());
         AbstractConfig.appendParameters(map, getModule());
         AbstractConfig.appendParameters(map, consumer);
         AbstractConfig.appendParameters(map, this);
+        appendMetricsCompatible(map);
 
         MetadataReportConfig metadataReportConfig = getMetadataReportConfig();
         if (metadataReportConfig != null && metadataReportConfig.isValid()) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -422,14 +422,15 @@ private Map<String, String> buildAttributes(ProtocolConfig protocolConfig) {
 
         // append params with basic configs,
         ServiceConfig.appendRuntimeParameters(map);
-        AbstractConfig.appendParameters(map, getMetrics());
         AbstractConfig.appendParameters(map, getApplication());
         AbstractConfig.appendParameters(map, getModule());
         // remove 'default.' prefix for configs from ProviderConfig
         // appendParameters(map, provider, Constants.DEFAULT_KEY);
         AbstractConfig.appendParameters(map, provider);
         AbstractConfig.appendParameters(map, protocolConfig);
         AbstractConfig.appendParameters(map, this);
+        appendMetricsCompatible(map);
+
         MetadataReportConfig metadataReportConfig = getMetadataReportConfig();
         if (metadataReportConfig != null && metadataReportConfig.isValid()) {
             map.putIfAbsent(METADATA_KEY, REMOTE_METADATA_STORAGE_TYPE);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/DefaultFuture.java
Patch:
@@ -188,6 +188,7 @@ public boolean cancel(boolean mayInterruptIfRunning) {
         this.doReceived(errorResult);
         FUTURES.remove(id);
         CHANNELS.remove(id);
+        timeoutCheckTask.cancel();
         return true;
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -624,14 +624,14 @@ public ModuleConfig getModule() {
         if (module != null) {
             return module;
         }
-        return getConfigManager().getModule().orElse(null);
+        return getModuleConfigManager().getModule().orElse(null);
     }
 
     @Deprecated
     public void setModule(ModuleConfig module) {
         this.module = module;
         if (module != null) {
-            getConfigManager().setModule(module);
+            getModuleConfigManager().setModule(module);
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -219,7 +219,6 @@ public String getName() {
 
     public void setName(String name) {
         this.name = name;
-        //this.updateIdIfAbsent(name);
     }
 
     @Parameter(key = APPLICATION_VERSION_KEY)

File: dubbo-common/src/main/java/org/apache/dubbo/config/ProtocolConfig.java
Patch:
@@ -241,7 +241,6 @@ public String getName() {
 
     public final void setName(String name) {
         this.name = name;
-        //this.updateIdIfAbsent(name);
     }
 
     @Parameter(excluded = true)

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -117,7 +117,7 @@ protected void preProcessRefresh() {
         if (consumer == null) {
             consumer = getModuleConfigManager()
                     .getDefaultConsumer()
-                    .orElseThrow(() -> new IllegalArgumentException("Default consumer is not initialized"));
+                    .orElseThrow(() -> new IllegalStateException("Default consumer is not initialized"));
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -207,8 +207,6 @@ public String getProtocol() {
 
     public void setProtocol(String protocol) {
         this.protocol = protocol;
-        // protocol as id is inappropriate, registries's protocol may be duplicated
-//        this.updateIdIfAbsent(protocol);
     }
 
     @Parameter(excluded = true)

File: dubbo-common/src/main/java/org/apache/dubbo/config/ServiceConfigBase.java
Patch:
@@ -213,7 +213,7 @@ protected void preProcessRefresh() {
         if (provider == null) {
             provider = getModuleConfigManager()
                     .getDefaultProvider()
-                    .orElseThrow(() -> new IllegalArgumentException("Default provider is not initialized"));
+                    .orElseThrow(() -> new IllegalStateException("Default provider is not initialized"));
         }
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -610,9 +610,9 @@ private boolean hasExportedServices() {
     }
 
     @Override
-    public boolean isAsync() {
+    public boolean isBackground() {
         for (ModuleModel moduleModel : applicationModel.getModuleModels()) {
-            if (moduleModel.getDeployer().isAsync()) {
+            if (moduleModel.getDeployer().isBackground()) {
                 return true;
             }
         }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboConfigBeanInitializer.java
Patch:
@@ -99,7 +99,6 @@ private void prepareDubboConfigBeans() {
         //Make sure all these config beans are inited and registered to ConfigManager
         // load application configs
         loadConfigBeansOfType(ApplicationConfig.class, configManager);
-        loadConfigBeansOfType(ModuleConfig.class, configManager);
         loadConfigBeansOfType(RegistryConfig.class, configManager);
         loadConfigBeansOfType(ProtocolConfig.class, configManager);
         loadConfigBeansOfType(MonitorConfig.class, configManager);
@@ -109,6 +108,7 @@ private void prepareDubboConfigBeans() {
         loadConfigBeansOfType(SslConfig.class, configManager);
 
         // load module configs
+        loadConfigBeansOfType(ModuleConfig.class, moduleModel.getConfigManager());
         loadConfigBeansOfType(ProviderConfig.class, moduleModel.getConfigManager());
         loadConfigBeansOfType(ConsumerConfig.class, moduleModel.getConfigManager());
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractMethodConfig.java
Patch:
@@ -31,7 +31,7 @@
  */
 public abstract class AbstractMethodConfig extends AbstractConfig {
 
-    private static final long serialVersionUID = 1L;
+    private static final long serialVersionUID = 5809761483000878437L;
 
     /**
      * The timeout for remote invocation in milliseconds

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -34,7 +34,7 @@
  */
 public abstract class AbstractServiceConfig extends AbstractInterfaceConfig {
 
-    private static final long serialVersionUID = 1L;
+    private static final long serialVersionUID = -9026290350363878309L;
 
     /**
      * The service version

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ApplicationModel.java
Patch:
@@ -206,6 +206,9 @@ public void onDestroy() {
         for (ModuleModel moduleModel : new ArrayList<>(moduleModels)) {
             moduleModel.destroy();
         }
+
+        notifyDestroy();
+
         if (defaultInstance == this) {
             synchronized (ApplicationModel.class) {
                 frameworkModel.removeApplication(this);
@@ -220,8 +223,6 @@ public void onDestroy() {
             deployer = null;
         }
 
-        notifyDestroy();
-
         if (environment != null) {
             environment.destroy();
             environment = null;

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/FrameworkModel.java
Patch:
@@ -76,14 +76,14 @@ public void onDestroy() {
             applicationModel.destroy();
         }
 
+        notifyDestroy();
+
         allInstances.remove(this);
         if (defaultInstance == this) {
             synchronized (FrameworkModel.class) {
                 defaultInstance = null;
             }
         }
-
-        notifyDestroy();
     }
 
     public static FrameworkModel defaultModel() {

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ModuleModel.java
Patch:
@@ -82,6 +82,7 @@ private void initModuleExt() {
 
     @Override
     public void onDestroy() {
+        notifyDestroy();
         applicationModel.removeModule(this);
 
         if (deployer != null) {
@@ -93,8 +94,6 @@ public void onDestroy() {
             serviceRepository = null;
         }
 
-        notifyDestroy();
-
         if (moduleEnvironment != null) {
             moduleEnvironment.destroy();
             moduleEnvironment = null;

File: dubbo-common/src/main/java/org/apache/dubbo/common/deploy/ModuleDeployer.java
Patch:
@@ -41,6 +41,8 @@ public interface ModuleDeployer extends Deployer<ModuleModel> {
 
     void prepare();
 
+    void setPending();
+
     void notifyExportService(ServiceConfigBase<?> sc);
 
     boolean isAsync();

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/deploy/DefaultApplicationDeployer.java
Patch:
@@ -832,7 +832,9 @@ public void checkStarting() {
     @Override
     public void checkStarted() {
         for (ModuleModel moduleModel : applicationModel.getModuleModels()) {
-            if (!moduleModel.getDeployer().isStarted()) {
+            if (moduleModel.getDeployer().isPending()) {
+                setPending();
+            } else if (moduleModel.getDeployer().isStarting()) {
                 return;
             }
         }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java
Patch:
@@ -90,6 +90,7 @@ public void afterPropertiesSet() throws Exception {
         //register service bean
         ModuleModel moduleModel = DubboBeanUtils.getModuleModel(applicationContext);
         moduleModel.getConfigManager().addService(this);
+        moduleModel.getDeployer().setPending();
     }
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ServiceAnnotationResolver.java
Patch:
@@ -84,7 +84,7 @@ private Annotation getServiceAnnotation(Class<?> serviceType) {
      */
     public String resolveInterfaceClassName() {
 
-        Class interfaceClass = null;
+        Class interfaceClass;
         // first, try to get the value from "interfaceName" attribute
         String interfaceName = resolveAttribute("interfaceName");
 

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/rest/springmvc/SpringMvcServiceRestMetadataResolverTest.java
Patch:
@@ -59,7 +59,7 @@ public void testSupports() {
     @Test
     public void testResolve() {
         // Generated by "dubbo-metadata-processor"
-        ClassPathServiceRestMetadataReader reader = new ClassPathServiceRestMetadataReader("META-INF/dubbo/spring-mvc-servoce-rest-metadata.json");
+        ClassPathServiceRestMetadataReader reader = new ClassPathServiceRestMetadataReader("META-INF/dubbo/spring-mvc-service-rest-metadata.json");
         List<ServiceRestMetadata> serviceRestMetadataList = reader.read();
 
         ServiceRestMetadata expectedServiceRestMetadata = serviceRestMetadataList.get(0);

File: dubbo-metadata/dubbo-metadata-report-redis/src/main/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReport.java
Patch:
@@ -55,8 +55,9 @@ public class RedisMetadataReport extends AbstractMetadataReport {
     private final static String REDIS_DATABASE_KEY = "database";
     private final static Logger logger = LoggerFactory.getLogger(RedisMetadataReport.class);
 
-    JedisPool pool;
-    Set<HostAndPort> jedisClusterNodes;
+    // protected , for test
+    protected JedisPool pool;
+    private Set<HostAndPort> jedisClusterNodes;
     private int timeout;
     private String password;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -93,7 +93,7 @@ public ServiceDiscoveryRegistry(URL registryURL) {
         this.registryManager = registryURL.getOrDefaultApplicationModel().getBeanFactory().getBean(RegistryManager.class);
     }
 
-    // Currently for test purpose
+    // Currently, for test purpose
     protected ServiceDiscoveryRegistry(URL registryURL, ServiceDiscovery serviceDiscovery, WritableMetadataService writableMetadataService) {
         this.registryURL = registryURL;
         this.serviceDiscovery = serviceDiscovery;
@@ -142,7 +142,7 @@ protected boolean shouldRegister(URL providerURL) {
 
         if (!should) {
             if (logger.isDebugEnabled()) {
-                logger.debug(String.format("The URL[%s] should not be registered.", providerURL.toString()));
+                logger.debug(String.format("The URL[%s] should not be registered.", providerURL));
             }
         }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/RegistryConstants.java
Patch:
@@ -130,4 +130,6 @@ public interface RegistryConstants {
 
     String REGISTRY_SERVICE_REFERENCE_PATH = "org.apache.dubbo.registry.RegistryService";
     String INIT = "INIT";
+
+    float DEFAULT_HASHMAP_LOAD_FACTOR = 0.75f;
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/DefaultMigrationAddressComparator.java
Patch:
@@ -64,9 +64,9 @@ public <T> boolean shouldMigrate(ClusterInvoker<T> newInvoker, ClusterInvoker<T>
         migrationData.put(NEW_ADDRESS_SIZE, newAddressSize);
 
         String rawThreshold = null;
-        Float configedThreshold = rule == null ? null : rule.getThreshold(oldInvoker.getUrl());
-        if (configedThreshold != null && configedThreshold >= 0) {
-            rawThreshold = String.valueOf(configedThreshold);
+        Float configuredThreshold = rule == null ? null : rule.getThreshold(oldInvoker.getUrl());
+        if (configuredThreshold != null && configuredThreshold >= 0) {
+            rawThreshold = String.valueOf(configuredThreshold);
         }
         rawThreshold = StringUtils.isNotEmpty(rawThreshold) ? rawThreshold : ConfigurationUtils.getCachedDynamicProperty(newInvoker.getUrl().getScopeModel(), MIGRATION_THRESHOLD, DEFAULT_THRESHOLD_STRING);
         float threshold;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/MigrationRuleListenerTest.java
Patch:
@@ -110,7 +110,7 @@ public void test() throws InterruptedException {
      * Test listener started without local rule and config center, INIT should be used and no scheduled task should be started.
      */
     @Test
-    public void testWithInitAndNoLocalRule() throws InterruptedException {
+    public void testWithInitAndNoLocalRule() {
         ApplicationModel.defaultModel().getDefaultModule().getModelEnvironment().setDynamicConfiguration(null);
         ApplicationModel.defaultModel().getDefaultModule().getModelEnvironment().setLocalMigrationRule("");
         ApplicationConfig applicationConfig = new ApplicationConfig();

File: dubbo-common/src/main/java/org/apache/dubbo/common/URLStrParser.java
Patch:
@@ -277,7 +277,7 @@ private static boolean addParam(String str, boolean isEncoded, int nameStart, in
         if (isEncoded) {
             String name = decodeComponent(str, nameStart, valueStart - 3, false, tempBuf);
             String value;
-            if (valueStart == valueEnd) {
+            if (valueStart >= valueEnd) {
                 value = name;
             } else {
                 value = decodeComponent(str, valueStart, valueEnd, false, tempBuf);
@@ -290,7 +290,7 @@ private static boolean addParam(String str, boolean isEncoded, int nameStart, in
         } else {
             String name = str.substring(nameStart, valueStart - 1);
             String value;
-            if (valueStart == valueEnd) {
+            if (valueStart >= valueEnd) {
                 value = name;
             } else {
                 value = str.substring(valueStart, valueEnd);

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/TypeDefinitionBuilder.java
Patch:
@@ -46,7 +46,7 @@ public class TypeDefinitionBuilder {
     }
 
     public static TypeDefinition build(Type type, Class<?> clazz, Map<String, TypeDefinition> typeCache) {
-        TypeBuilder builder = getGenericTypeBuilder(type, clazz);
+        TypeBuilder builder = getGenericTypeBuilder(clazz);
         TypeDefinition td;
 
         if (clazz.isPrimitive() || ClassUtils.isSimpleType(clazz)) { // changed since 2.7.6
@@ -60,10 +60,10 @@ public static TypeDefinition build(Type type, Class<?> clazz, Map<String, TypeDe
         return td;
     }
 
-    private static TypeBuilder getGenericTypeBuilder(Type type, Class<?> clazz) {
+    private static TypeBuilder getGenericTypeBuilder(Class<?> clazz) {
         for (TypeBuilder builder : BUILDERS) {
             try {
-                if (builder.accept(type, clazz)) {
+                if (builder.accept(clazz)) {
                     return builder;
                 }
             } catch (NoClassDefFoundError cnfe) {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/builder/ArrayTypeBuilder.java
Patch:
@@ -28,7 +28,7 @@
 public class ArrayTypeBuilder implements TypeBuilder {
 
     @Override
-    public boolean accept(Type type, Class<?> clazz) {
+    public boolean accept(Class<?> clazz) {
         if (clazz == null) {
             return false;
         }
@@ -44,7 +44,7 @@ public TypeDefinition build(Type type, Class<?> clazz, Map<String, TypeDefinitio
         }
         td = new TypeDefinition(canonicalName);
         typeCache.put(canonicalName, td);
-        // Process the component type of an array.
+        // Process the component type of array.
         Class<?> componentType = clazz.getComponentType();
         TypeDefinition itemTd = TypeDefinitionBuilder.build(componentType, componentType, typeCache);
         if (itemTd != null) {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/builder/CollectionTypeBuilder.java
Patch:
@@ -33,7 +33,7 @@
 public class CollectionTypeBuilder implements TypeBuilder {
 
     @Override
-    public boolean accept(Type type, Class<?> clazz) {
+    public boolean accept(Class<?> clazz) {
         if (clazz == null) {
             return false;
         }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/builder/EnumTypeBuilder.java
Patch:
@@ -32,7 +32,7 @@ public class EnumTypeBuilder implements TypeBuilder {
     private static final Logger logger = LoggerFactory.getLogger(TypeDefinitionBuilder.class);
 
     @Override
-    public boolean accept(Type type, Class<?> clazz) {
+    public boolean accept(Class<?> clazz) {
         if (clazz == null) {
             return false;
         }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/builder/MapTypeBuilder.java
Patch:
@@ -35,7 +35,7 @@
 public class MapTypeBuilder implements TypeBuilder {
 
     @Override
-    public boolean accept(Type type, Class<?> clazz) {
+    public boolean accept(Class<?> clazz) {
         if (clazz == null) {
             return false;
         }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/builder/TypeBuilder.java
Patch:
@@ -30,9 +30,9 @@
 public interface TypeBuilder extends Prioritized {
 
     /**
-     * Whether the build accept the type or class passed in.
+     * Whether the build accept the class passed in.
      */
-    boolean accept(Type type, Class<?> clazz);
+    boolean accept(Class<?> clazz);
 
     /**
      * Build type definition with the type or class.

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/util/ClassUtils.java
Patch:
@@ -50,7 +50,7 @@ public static String getCodeSource(Class<?> clazz) {
             return null;
         }
 
-        String path = codeSource.getLocation().toExternalForm();
+        String path = location.toExternalForm();
 
         if (path.endsWith(".jar") && path.contains("/")) {
             return path.substring(path.lastIndexOf('/') + 1);

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/definition/Test3TypeBuilder.java
Patch:
@@ -33,7 +33,7 @@ public int getPriority(){
     }
 
     @Override
-    public boolean accept(Type type, Class<?> clazz) {
+    public boolean accept (Class<?> clazz) {
         return false;
     }
 

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/definition/TestTypeBuilder.java
Patch:
@@ -33,7 +33,7 @@ public int getPriority(){
     }
 
     @Override
-    public boolean accept(Type type, Class<?> clazz) {
+    public boolean accept(Class<?> clazz) {
         return false;
     }
 

File: dubbo-metadata/dubbo-metadata-definition-protobuf/src/main/java/org/apache/dubbo/metadata/definition/protobuf/ProtobufTypeBuilder.java
Patch:
@@ -61,7 +61,7 @@ public int getPriority() {
     }
 
     @Override
-    public boolean accept(Type type, Class<?> clazz) {
+    public boolean accept(Class<?> clazz) {
         if (clazz == null) {
             return false;
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/model/TagRouterRule.java
Patch:
@@ -45,8 +45,8 @@
 public class TagRouterRule extends AbstractRouterRule {
     private List<Tag> tags;
 
-    private Map<String, List<String>> addressToTagnames = new HashMap<>();
-    private Map<String, List<String>> tagnameToAddresses = new HashMap<>();
+    private final Map<String, List<String>> addressToTagnames = new HashMap<>();
+    private final Map<String, List<String>> tagnameToAddresses = new HashMap<>();
 
     @SuppressWarnings("unchecked")
     public static TagRouterRule parseFromMap(Map<String, Object> map) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/support/ConsumerContextFilter.java
Patch:
@@ -47,7 +47,7 @@
  * @see Filter
  * @see RpcContext
  */
-@Activate(group = CONSUMER, order = -10000)
+@Activate(group = CONSUMER, order = Integer.MIN_VALUE)
 public class ConsumerContextFilter implements ClusterFilter, ClusterFilter.Listener {
 
     private ApplicationModel applicationModel;
@@ -74,11 +74,11 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             for (String supportedSelector : supportedSelectors) {
                 Map<String, Object> selected = selectorExtensionLoader.getExtension(supportedSelector).select();
                 if (CollectionUtils.isNotEmptyMap(selected)) {
-                    ((RpcInvocation) invocation).addObjectAttachmentsIfAbsent(selected);
+                    ((RpcInvocation) invocation).addObjectAttachments(selected);
                 }
             }
         } else {
-            ((RpcInvocation) invocation).addObjectAttachmentsIfAbsent(RpcContext.getServerAttachment().getObjectAttachments());
+            ((RpcInvocation) invocation).addObjectAttachments(RpcContext.getServerAttachment().getObjectAttachments());
         }
 
         Map<String, Object> contextAttachments = RpcContext.getClientAttachment().getObjectAttachments();

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/OrderedPropertiesConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Set;
 
 public class OrderedPropertiesConfiguration implements Configuration{
-    private Properties properties = new Properties();
+    private Properties properties;
     private ModuleModel moduleModel;
 
     public OrderedPropertiesConfiguration(ModuleModel moduleModel) {
@@ -35,6 +35,7 @@ public OrderedPropertiesConfiguration(ModuleModel moduleModel) {
     }
 
     public void refresh() {
+        properties = new Properties();
         ExtensionLoader<OrderedPropertiesProvider> propertiesProviderExtensionLoader = moduleModel.getExtensionLoader(OrderedPropertiesProvider.class);
         Set<String> propertiesProviderNames = propertiesProviderExtensionLoader.getSupportedExtensions();
         if (propertiesProviderNames == null || propertiesProviderNames.isEmpty()) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java
Patch:
@@ -16,11 +16,10 @@
  */
 package org.apache.dubbo.common.bytecode;
 
-import org.apache.dubbo.common.utils.ClassUtils;
-import org.apache.dubbo.common.utils.ReflectUtils;
-
 import javassist.ClassPool;
 import javassist.CtMethod;
+import org.apache.dubbo.common.utils.ClassUtils;
+import org.apache.dubbo.common.utils.ReflectUtils;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConfigScopeModelInitializer.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dubbo.common.beans.factory.ScopeBeanFactory;
 import org.apache.dubbo.common.deploy.ApplicationDeployer;
 import org.apache.dubbo.common.deploy.ModuleDeployer;
-import org.apache.dubbo.config.bootstrap.DefaultApplicationDeployer;
-import org.apache.dubbo.config.bootstrap.DefaultModuleDeployer;
+import org.apache.dubbo.config.deploy.DefaultApplicationDeployer;
+import org.apache.dubbo.config.deploy.DefaultModuleDeployer;
 import org.apache.dubbo.config.utils.DefaultConfigValidator;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
@@ -37,7 +37,6 @@ public void initializeFrameworkModel(FrameworkModel frameworkModel) {
     @Override
     public void initializeApplicationModel(ApplicationModel applicationModel) {
         ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
-        beanFactory.registerBean(DubboShutdownHook.class);
         beanFactory.registerBean(DefaultConfigValidator.class);
         // applicationDeployer
         ApplicationDeployer applicationDeployer = beanFactory.registerBean(DefaultApplicationDeployer.class);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrapStartStopListener.java
Patch:
@@ -26,6 +26,7 @@
  * @see DubboBootstrap
  */
 @SPI
+@Deprecated
 public interface DubboBootstrapStartStopListener {
 
     void onStart(DubboBootstrap bootstrap);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -93,7 +93,7 @@ public ConfigurableMetadataServiceExporter export() {
             serviceConfig.setMethods(generateMethodConfig());
 
             // export
-            serviceConfig.export();
+            serviceConfig.exportOnly();
 
             if (logger.isInfoEnabled()) {
                 logger.info("The MetadataService exports urls : " + serviceConfig.getExportedUrls());
@@ -146,7 +146,7 @@ public List<URL> getExportedURLs() {
     }
 
     public boolean isExported() {
-        return serviceConfig != null && serviceConfig.isExported();
+        return serviceConfig != null && serviceConfig.isExported() && !serviceConfig.isUnexported();
     }
 
     private ApplicationConfig getApplicationConfig() {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.config.spring.Constants;
-import org.apache.dubbo.config.spring.context.event.DubboAnnotationInitedEvent;
-import org.apache.dubbo.config.spring.reference.ReferenceAttributes;
 import org.apache.dubbo.config.spring.ReferenceBean;
+import org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent;
+import org.apache.dubbo.config.spring.reference.ReferenceAttributes;
 import org.apache.dubbo.config.spring.reference.ReferenceBeanManager;
 import org.apache.dubbo.config.spring.reference.ReferenceBeanSupport;
 import org.apache.dubbo.config.spring.util.SpringCompatUtils;
@@ -174,7 +174,7 @@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
 
         try {
             // this is an early event, it will be notified at org.springframework.context.support.AbstractApplicationContext.registerListeners()
-            applicationContext.publishEvent(new DubboAnnotationInitedEvent(applicationContext));
+            applicationContext.publishEvent(new DubboConfigInitEvent(applicationContext));
         } catch (Exception e) {
             // if spring version is less then 4.2, it does not support early application event
             logger.warn("publish early application event failed, please upgrade spring version to 4.2.x or later: " + e);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboBootstrapStartStopListenerSpringAdapter.java
Patch:
@@ -20,14 +20,14 @@
 import org.apache.dubbo.config.bootstrap.DubboBootstrapStartStopListener;
 import org.apache.dubbo.config.spring.context.event.DubboBootstrapStatedEvent;
 import org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent;
-
 import org.springframework.context.ApplicationContext;
 
 /**
  * convcert Dubbo bootstrap event to spring environment.
  *
  * @scene 2.7.9
  */
+@Deprecated
 public class DubboBootstrapStartStopListenerSpringAdapter implements DubboBootstrapStartStopListener {
 
     static ApplicationContext applicationContext;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboInfraBeanRegisterPostProcessor.java
Patch:
@@ -37,8 +37,9 @@
  * Register some infrastructure beans if not exists.
  * This post-processor MUST impl BeanDefinitionRegistryPostProcessor,
  * in order to enable the registered BeanFactoryPostProcessor bean to be loaded and executed.
+ *
  * @see org.springframework.context.support.PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors(
- * org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.util.List)
+ *org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.util.List)
  */
 public class DubboInfraBeanRegisterPostProcessor implements BeanDefinitionRegistryPostProcessor, ApplicationContextAware {
 
@@ -74,6 +75,7 @@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
 
         // Initialize SpringExtensionInjector
         SpringExtensionInjector.get(applicationModel).init(applicationContext);
+        DubboBeanUtils.getInitializationContext(beanFactory).setApplicationContext(applicationContext);
 
         // Initialize dubbo Environment before ConfigManager
         // Extract dubbo props from Spring env and put them to app config

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboSpringInitCustomizer.java
Patch:
@@ -27,12 +27,12 @@
  * Custom dubbo spring initialization
  */
 @SPI(scope = FRAMEWORK)
-public interface DubboSpringInitializationCustomizer {
+public interface DubboSpringInitCustomizer {
 
     /**
      * <p>Customize dubbo spring initialization on bean registry processing phase.</p>
      * <p>You can register a {@link BeanFactoryPostProcessor} or {@link BeanPostProcessor} for custom processing.</p>
-     * <p>Or change the bind module model via {@link DubboSpringInitializationContext#setModuleModel(ModuleModel)}.</p>
+     * <p>Or change the bind module model via {@link DubboSpringInitContext#setModuleModel(ModuleModel)}.</p>
      *
      * <p><b>Note:</b></p>
      * <p>1. The bean factory may be not ready yet when triggered by parsing dubbo xml definition.</p>
@@ -41,6 +41,6 @@ public interface DubboSpringInitializationCustomizer {
      *
      * @param context
      */
-    void customize(DubboSpringInitializationContext context);
+    void customize(DubboSpringInitContext context);
 
 }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java
Patch:
@@ -39,7 +39,7 @@ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, B
         // initialize dubbo beans
         DubboSpringInitializer.initialize(registry);
 
-        // Config beans creating from props have move to DubboBootstrap
+        // Config beans creating from props have move to ConfigManager
 //        AnnotationAttributes attributes = AnnotationAttributes.fromMap(
 //                importingClassMetadata.getAnnotationAttributes(EnableDubboConfig.class.getName()));
 //

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/event/DubboBootstrapStatedEvent.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.config.spring.context.event;
 
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-
 import org.springframework.context.ApplicationEvent;
 
 /**
@@ -28,6 +27,7 @@
  * @see org.apache.dubbo.config.bootstrap.DubboBootstrap
  * @since 2.7.9
  */
+@Deprecated
 public class DubboBootstrapStatedEvent extends ApplicationEvent {
 
     /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/event/DubboBootstrapStopedEvent.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.config.spring.context.event;
 
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-
 import org.springframework.context.ApplicationEvent;
 
 /**
@@ -28,6 +27,7 @@
  * @see org.apache.dubbo.config.bootstrap.DubboBootstrap
  * @since 2.7.9
  */
+@Deprecated
 public class DubboBootstrapStopedEvent extends ApplicationEvent {
 
     /**

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/MethodConfigCallbackTest.java
Patch:
@@ -91,7 +91,7 @@ public static void afterAll() {
 
     @Test
     public void testMethodAnnotationCallBack() {
-        int threadCnt = Runtime.getRuntime().availableProcessors();
+        int threadCnt = Math.min(4, Runtime.getRuntime().availableProcessors());
         int callCnt = 2 * threadCnt;
         for (int i = 0; i < threadCnt; i++) {
             new Thread(() -> {
@@ -102,7 +102,7 @@ public void testMethodAnnotationCallBack() {
             }).start();
         }
         int i = 0;
-        while (MethodCallbackImpl.cnt.get() < ( 2 * threadCnt * callCnt) && i < 50){
+        while (MethodCallbackImpl.cnt.get() < ( 2 * threadCnt * callCnt)){
             // wait for async callback finished
             try {
                 i++;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/ChangeTelnet.java
Patch:
@@ -16,16 +16,15 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
+import io.netty.channel.Channel;
+import io.netty.util.AttributeKey;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.qos.command.annotation.Cmd;
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
 
-import io.netty.channel.Channel;
-import io.netty.util.AttributeKey;
-
 @Cmd(name = "cd", summary = "Change default service.", example = {
     "cd [service]"
 })

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/CountTelnet.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelFuture;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.qos.command.BaseCommand;
@@ -30,9 +32,6 @@
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
 
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelFuture;
-
 import java.lang.reflect.Method;
 import java.net.InetSocketAddress;
 import java.util.ArrayList;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/PublishMetadata.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
 import org.apache.dubbo.common.utils.ArrayUtils;
-import org.apache.dubbo.config.bootstrap.DefaultApplicationDeployer;
+import org.apache.dubbo.config.deploy.DefaultApplicationDeployer;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.qos.command.annotation.Cmd;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/SelectTelnet.java
Patch:
@@ -16,16 +16,15 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
+import io.netty.channel.Channel;
+import io.netty.util.AttributeKey;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.qos.command.annotation.Cmd;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 
-import io.netty.channel.Channel;
-import io.netty.util.AttributeKey;
-
 import java.lang.reflect.Method;
 import java.util.List;
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/ShutdownTelnet.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.config.bootstrap.DefaultApplicationDeployer;
+import org.apache.dubbo.config.deploy.DefaultApplicationDeployer;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.qos.command.annotation.Cmd;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/probe/impl/ProviderReadinessProbe.java
Patch:
@@ -27,6 +27,8 @@
 
 @Activate
 public class ProviderReadinessProbe implements ReadinessProbe {
+
+
     private static FrameworkServiceRepository serviceRepository = FrameworkModel.defaultModel().getServiceRepository();
 
     @Override

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java
Patch:
@@ -16,9 +16,6 @@
  */
 package org.apache.dubbo.qos.server.handler;
 
-import org.apache.dubbo.common.utils.ExecutorUtil;
-import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.ChannelHandlerContext;
@@ -33,6 +30,8 @@
 import io.netty.handler.timeout.IdleStateHandler;
 import io.netty.util.CharsetUtil;
 import io.netty.util.concurrent.ScheduledFuture;
+import org.apache.dubbo.common.utils.ExecutorUtil;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import java.util.List;
 import java.util.concurrent.TimeUnit;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dubbo.qos.command;
 
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/ChangeTelnetTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
+import io.netty.channel.Channel;
+import io.netty.util.DefaultAttributeMap;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.qos.command.BaseCommand;
@@ -26,9 +28,6 @@
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
-
-import io.netty.channel.Channel;
-import io.netty.util.DefaultAttributeMap;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/CountTelnetTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.dubbo.rpc.RpcStatus;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/HelpTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/InvokeTelnetTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
+import io.netty.channel.Channel;
+import io.netty.util.DefaultAttributeMap;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
@@ -27,9 +29,6 @@
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleServiceRepository;
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
-
-import io.netty.channel.Channel;
-import io.netty.util.DefaultAttributeMap;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/PortTelnetTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/SelectTelnetTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
+import io.netty.channel.Channel;
+import io.netty.util.DefaultAttributeMap;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
@@ -27,9 +29,6 @@
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleServiceRepository;
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
-
-import io.netty.channel.Channel;
-import io.netty.util.DefaultAttributeMap;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/ShutdownTelnetTest.java
Patch:
@@ -16,13 +16,12 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
+import io.netty.channel.Channel;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.qos.legacy.ProtocolUtils;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
-import io.netty.channel.Channel;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/CommandHelperTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.apache.dubbo.qos.command.impl.Startup;
 import org.apache.dubbo.qos.command.impl.Version;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.Test;
 
 import java.util.LinkedList;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/protocol/QosProtocolWrapperTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java
Patch:
@@ -16,14 +16,13 @@
  */
 package org.apache.dubbo.qos.server.handler;
 
-import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpMethod;
 import io.netty.handler.codec.http.HttpRequest;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mockito;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.dubbo.qos.server.handler;
 
-import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.ChannelHandlerContext;
@@ -27,6 +25,7 @@
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.codec.string.StringDecoder;
 import io.netty.handler.codec.string.StringEncoder;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java
Patch:
@@ -16,11 +16,10 @@
  */
 package org.apache.dubbo.qos.server.handler;
 
-import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mockito;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtils.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.client.metadata;
 
+import com.google.gson.Gson;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.logger.Logger;
@@ -32,8 +33,6 @@
 import org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl;
 import org.apache.dubbo.registry.support.RegistryManager;
 
-import com.google.gson.Gson;
-
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/support/AbstractRegistryFactoryTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.registry.NotifyListener;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistryTest.java
Patch:
@@ -16,15 +16,14 @@
  */
 package org.apache.dubbo.registry.zookeeper;
 
+import org.apache.curator.test.TestingServer;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.status.Status;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.registry.NotifyListener;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.status.RegistryStatusChecker;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
-import org.apache.curator.test.TestingServer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -650,13 +650,13 @@ public void destroy() {
 
             try {
                 if (logger.isInfoEnabled()) {
-                    logger.info("Close dubbo server: " + server.getLocalAddress());
+                    logger.info("Closing dubbo server: " + server.getLocalAddress());
                 }
 
                 server.close(ConfigurationUtils.getServerShutdownTimeout(server.getUrl().getScopeModel()));
 
             } catch (Throwable t) {
-                logger.warn(t.getMessage(), t);
+                logger.warn("Close dubbo server [" + server.getLocalAddress()+ "] failed: " + t.getMessage(), t);
             }
         }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ArgumentCallbackTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.dubbo.rpc.model.ConsumerModel;
 import org.apache.dubbo.rpc.model.ModuleServiceRepository;
 import org.apache.dubbo.rpc.protocol.dubbo.support.ProtocolUtils;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractClientStream.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
+import io.netty.handler.codec.http.HttpHeaderNames;
+import io.netty.handler.codec.http.HttpHeaderValues;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.stream.StreamObserver;
@@ -25,9 +27,6 @@
 import org.apache.dubbo.rpc.model.ConsumerModel;
 import org.apache.dubbo.triple.TripleWrapper;
 
-import io.netty.handler.codec.http.HttpHeaderNames;
-import io.netty.handler.codec.http.HttpHeaderValues;
-
 import java.util.Map;
 import java.util.concurrent.Executor;
 import java.util.concurrent.RejectedExecutionException;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractServerStream.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
+import com.google.protobuf.Message;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
@@ -31,8 +32,6 @@
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
 import org.apache.dubbo.triple.TripleWrapper;
 
-import com.google.protobuf.Message;
-
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/GrpcStatus.java
Patch:
@@ -16,13 +16,12 @@
  */
 package org.apache.dubbo.rpc.protocol.tri;
 
+import io.netty.handler.codec.http.QueryStringDecoder;
+import io.netty.handler.codec.http.QueryStringEncoder;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.remoting.exchange.Response;
 import org.apache.dubbo.rpc.RpcException;
 
-import io.netty.handler.codec.http.QueryStringDecoder;
-import io.netty.handler.codec.http.QueryStringEncoder;
-
 import static org.apache.dubbo.rpc.RpcException.FORBIDDEN_EXCEPTION;
 import static org.apache.dubbo.rpc.RpcException.LIMIT_EXCEEDED_EXCEPTION;
 import static org.apache.dubbo.rpc.RpcException.METHOD_NOT_FOUND;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.rpc.protocol.tri;
 
+import io.netty.channel.ChannelFuture;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.Version;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -40,8 +41,6 @@
 import org.apache.dubbo.rpc.protocol.AbstractInvoker;
 import org.apache.dubbo.rpc.support.RpcUtils;
 
-import io.netty.channel.ChannelFuture;
-
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/UnaryServerStream.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
+import io.netty.handler.codec.http.HttpHeaderNames;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.stream.StreamObserver;
 import org.apache.dubbo.remoting.TimeoutException;
@@ -26,8 +27,6 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 
-import io.netty.handler.codec.http.HttpHeaderNames;
-
 import java.util.Map;
 import java.util.concurrent.CompletionStage;
 import java.util.function.BiConsumer;

File: dubbo-spring-boot/dubbo-spring-boot-compatible/actuator/src/main/java/org/apache/dubbo/spring/boot/actuate/endpoint/metadata/DubboShutdownMetadata.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.apache.dubbo.registry.support.RegistryManager;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 

File: dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringAnnotationBeanTest.java
Patch:
@@ -22,10 +22,10 @@
 import org.apache.dubbo.test.common.api.DemoService;
 import org.apache.dubbo.test.common.registrycenter.RegistryCenter;
 import org.apache.dubbo.test.common.registrycenter.ZookeeperSingleRegistryCenter;
-import org.apache.dubbo.test.spring.context.MockSpringInitializationCustomizer;
+import org.apache.dubbo.test.spring.context.MockSpringInitCustomizer;
+import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;
@@ -56,7 +56,7 @@ public void test() {
         testService.test();
 
         // check initialization customizer
-        MockSpringInitializationCustomizer.checkCustomizer(applicationContext);
+        MockSpringInitCustomizer.checkCustomizer(applicationContext);
     }
 
     @EnableDubbo(scanBasePackages = "org.apache.dubbo.test.common.impl")

File: dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringJavaConfigBeanTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.dubbo.test.common.impl.DemoServiceImpl;
 import org.apache.dubbo.test.common.registrycenter.RegistryCenter;
 import org.apache.dubbo.test.common.registrycenter.ZookeeperSingleRegistryCenter;
-import org.apache.dubbo.test.spring.context.MockSpringInitializationCustomizer;
+import org.apache.dubbo.test.spring.context.MockSpringInitCustomizer;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
@@ -135,7 +135,7 @@ public void testBean() {
             Assertions.assertEquals("Hello dubbo", result);
 
             // check initialization customizer
-            MockSpringInitializationCustomizer.checkCustomizer(consumerContext);
+            MockSpringInitCustomizer.checkCustomizer(consumerContext);
         } finally {
             consumerContext.close();
         }

File: dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringXmlConfigTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.test.common.api.RestDemoService;
 import org.apache.dubbo.test.common.registrycenter.RegistryCenter;
 import org.apache.dubbo.test.common.registrycenter.ZookeeperSingleRegistryCenter;
-import org.apache.dubbo.test.spring.context.MockSpringInitializationCustomizer;
+import org.apache.dubbo.test.spring.context.MockSpringInitCustomizer;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
@@ -69,7 +69,7 @@ public void test() {
             Assertions.assertEquals("Hello, dubbo", resetHelloResult);
 
             // check initialization customizer
-            MockSpringInitializationCustomizer.checkCustomizer(applicationContext);
+            MockSpringInitCustomizer.checkCustomizer(applicationContext);
         } finally {
             SysProps.clear();
             if (applicationContext != null) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java
Patch:
@@ -91,7 +91,7 @@ public static ClassPool getClassPool(ClassLoader loader) {
         ClassPool pool = POOL_MAP.get(loader);
         if (pool == null) {
             pool = new ClassPool(true);
-            pool.appendClassPath(new CustomizedLoaderClassPath(loader));
+            pool.insertClassPath(new CustomizedLoaderClassPath(loader));
             POOL_MAP.put(loader, pool);
         }
         return pool;

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java
Patch:
@@ -156,7 +156,7 @@ private static Wrapper makeWrapper(Class<?> c) {
         }
 
         final ClassPool classPool = new ClassPool(ClassPool.getDefault());
-        classPool.appendClassPath(new CustomizedLoaderClassPath(cl));
+        classPool.insertClassPath(new CustomizedLoaderClassPath(cl));
 
         List<String> allMethod = new ArrayList<>();
         try {

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/CtClassBuilder.java
Patch:
@@ -140,7 +140,7 @@ protected String getQualifiedClassName(String className) {
      */
     public CtClass build(ClassLoader classLoader) throws NotFoundException, CannotCompileException {
         ClassPool pool = new ClassPool(true);
-        pool.appendClassPath(new LoaderClassPath(classLoader));
+        pool.insertClassPath(new LoaderClassPath(classLoader));
         
         // create class
         CtClass ctClass = pool.makeClass(className, pool.get(superClassName));

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/BaseCommand.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.dubbo.qos.command;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface BaseCommand {
     String execute(CommandContext commandContext,String[] args);
 }

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/probe/LivenessProbe.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.qos.probe;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
@@ -27,7 +28,7 @@
  *
  * @since 3.0
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface LivenessProbe {
     /**
      * Check if program is alive

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/probe/ReadinessProbe.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.qos.probe;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
@@ -27,7 +28,7 @@
  *
  * @since 3.0
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface ReadinessProbe {
     /**
      * Check if program is Ready

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/probe/StartupProbe.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.qos.probe;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
@@ -27,7 +28,7 @@
  *
  * @since 3.0
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface StartupProbe {
     /**
      * Check if program has been startup

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/ChangeTelnetTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
 
 import io.netty.channel.Channel;
@@ -40,7 +41,7 @@
 
 public class ChangeTelnetTest {
     private final DefaultAttributeMap defaultAttributeMap = new DefaultAttributeMap();
-    private static final BaseCommand change = new ChangeTelnet();
+    private static final BaseCommand change = new ChangeTelnet(FrameworkModel.defaultModel());
 
     private Channel mockChannel;
     private CommandContext mockCommandContext;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/CountTelnetTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.RpcStatus;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
 
 import org.junit.jupiter.api.AfterEach;
@@ -44,7 +45,7 @@
 import static org.mockito.Mockito.reset;
 
 public class CountTelnetTest {
-    private static final BaseCommand count = new CountTelnet();
+    private static final BaseCommand count = new CountTelnet(FrameworkModel.defaultModel());
 
     private MockNettyChannel mockChannel;
     private Invoker<DemoService> mockInvoker;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/PortTelnetTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dubbo.remoting.exchange.Exchangers;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
 
 import org.junit.jupiter.api.AfterEach;
@@ -41,7 +42,7 @@
 import static org.mockito.Mockito.reset;
 
 public class PortTelnetTest {
-    private static final BaseCommand port = new PortTelnet();
+    private static final BaseCommand port = new PortTelnet(FrameworkModel.defaultModel());
 
     private Invoker<DemoService> mockInvoker;
     private CommandContext mockCommandContext;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/AbstractServiceDiscoveryFactory.java
Patch:
@@ -33,9 +33,9 @@
  */
 public abstract class AbstractServiceDiscoveryFactory implements ServiceDiscoveryFactory {
 
-    private static final ConcurrentMap<String, ServiceDiscovery> discoveries = new ConcurrentHashMap<>();
+    private final ConcurrentMap<String, ServiceDiscovery> discoveries = new ConcurrentHashMap<>();
 
-    public static List<ServiceDiscovery> getAllServiceDiscoveries() {
+    public List<ServiceDiscovery> getAllServiceDiscoveries() {
         return Collections.unmodifiableList(new LinkedList<>(discoveries.values()));
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/WrappedChannelHandler.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.remoting.transport.dispatcher;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
@@ -132,7 +131,7 @@ public ExecutorService getPreferredExecutorService(Object msg) {
      */
     public ExecutorService getSharedExecutorService() {
         ExecutorRepository executorRepository =
-                ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();
+                url.getOrDefaultApplicationModel().getExtensionLoader(ExecutorRepository.class).getDefaultExtension();
         ExecutorService executor = executorRepository.getExecutor(url);
         if (executor == null) {
             executor = executorRepository.createExecutorIfAbsent(url);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/StandardMetadataServiceURLBuilder.java
Patch:
@@ -84,7 +84,7 @@ public List<URL> build(ServiceInstance serviceInstance) {
             url = generateWithMetadata(serviceName, host, paramsMap);
         }
 
-        url = url.setScopeModel(serviceInstance.getApplicationModel());
+        url = url.setScopeModel(serviceInstance.getApplicationModel().getInternalModule());
 
         return Collections.singletonList(url);
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/registry/AddressListener.java
Patch:
@@ -17,12 +17,13 @@
 package org.apache.dubbo.registry;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.rpc.cluster.Directory;
 
 import java.util.List;
 
-@SPI
+@SPI(scope = ExtensionScope.MODULE)
 public interface AddressListener {
 
     /**

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/ClusterFilter.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.dubbo.rpc.cluster.filter;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.rpc.BaseFilter;
 
-@SPI
+@SPI(scope = ExtensionScope.MODULE)
 public interface ClusterFilter extends BaseFilter {
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryDirectory.java
Patch:
@@ -149,7 +149,7 @@ public synchronized void notify(List<URL> instanceUrls) {
         RpcServiceContext.setRpcContext(getConsumerUrl());
 
         //  3.x added for extend URL address
-        ExtensionLoader<AddressListener> addressListenerExtensionLoader = getUrl().getOrDefaultApplicationModel().getExtensionLoader(AddressListener.class);
+        ExtensionLoader<AddressListener> addressListenerExtensionLoader = getUrl().getOrDefaultModuleModel().getExtensionLoader(AddressListener.class);
         List<AddressListener> supportedListeners = addressListenerExtensionLoader.getActivateExtension(getUrl(), (String[]) null);
         if (supportedListeners != null && !supportedListeners.isEmpty()) {
             for (AddressListener addressListener : supportedListeners) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/DynamicDirectory.java
Patch:
@@ -282,7 +282,7 @@ public void destroy() {
             logger.warn("unexpected error when unsubscribe service " + serviceKey + " from registry: " + registry.getUrl(), t);
         }
 
-        ExtensionLoader<AddressListener> addressListenerExtensionLoader = getUrl().getOrDefaultApplicationModel().getExtensionLoader(AddressListener.class);
+        ExtensionLoader<AddressListener> addressListenerExtensionLoader = getUrl().getOrDefaultModuleModel().getExtensionLoader(AddressListener.class);
         List<AddressListener> supportedListeners = addressListenerExtensionLoader.getActivateExtension(getUrl(), (String[]) null);
         if (supportedListeners != null && !supportedListeners.isEmpty()) {
             for (AddressListener addressListener : supportedListeners) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -152,7 +152,7 @@ public synchronized void notify(List<URL> urls) {
         List<URL> providerURLs = categoryUrls.getOrDefault(PROVIDERS_CATEGORY, Collections.emptyList());
 
         // 3.x added for extend URL address
-        ExtensionLoader<AddressListener> addressListenerExtensionLoader = getUrl().getOrDefaultApplicationModel().getExtensionLoader(AddressListener.class);
+        ExtensionLoader<AddressListener> addressListenerExtensionLoader = getUrl().getOrDefaultModuleModel().getExtensionLoader(AddressListener.class);
         List<AddressListener> supportedListeners = addressListenerExtensionLoader.getActivateExtension(getUrl(), (String[]) null);
         if (supportedListeners != null && !supportedListeners.isEmpty()) {
             for (AddressListener addressListener : supportedListeners) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Filter.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.rpc;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
@@ -64,7 +65,7 @@
  * @see org.apache.dubbo.rpc.filter.TokenFilter
  * @see org.apache.dubbo.rpc.filter.TpsLimitFilter
  */
-@SPI
+@SPI(scope = ExtensionScope.MODULE)
 public interface Filter extends BaseFilter {
 }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ArgumentCallbackTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.rpc.model.ConsumerModel;
 import org.apache.dubbo.rpc.model.ModuleServiceRepository;
 import org.apache.dubbo.rpc.protocol.dubbo.support.ProtocolUtils;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -85,7 +86,7 @@ public void initOrResetUrl(int callbacks, int timeout) throws Exception {
                 + "&timeout=" + timeout
                 + "&retries=0"
                 + "&" + CALLBACK_INSTANCES_LIMIT_KEY + "=" + callbacks)
-            .setScopeModel(ApplicationModel.defaultModel())
+            .setScopeModel(ApplicationModel.defaultModel().getDefaultModule())
             .setServiceModel(new ConsumerModel(IDemoService.class.getName(), null, null, null,
             ApplicationModel.defaultModel().getDefaultModule(), null, null));
 

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/FrameworkModel.java
Patch:
@@ -140,6 +140,7 @@ public Environment getModelEnvironment() {
 
     @Override
     protected boolean checkIfClassLoaderCanRemoved(ClassLoader classLoader) {
-        return applicationModels.stream().noneMatch(applicationModel -> applicationModel.containsClassLoader(classLoader));
+        return super.checkIfClassLoaderCanRemoved(classLoader) &&
+            applicationModels.stream().noneMatch(applicationModel -> applicationModel.containsClassLoader(classLoader));
     }
 }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/multiple/exportprovider/MultipleRegistryCenterExportProviderFilter.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
-import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.Result;
+import org.apache.dubbo.rpc.RpcException;
 
 @Activate(group = CommonConstants.PROVIDER, order = 10001)
 public class MultipleRegistryCenterExportProviderFilter implements Filter,Filter.Listener {
@@ -55,7 +55,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
 
     @Override
     public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation) {
-        response = appResponse.getValue().toString();
+        response = String.valueOf(appResponse.getValue());
     }
 
     @Override

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/single/exportprovider/SingleRegistryCenterExportProviderFilter.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
-import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.Result;
+import org.apache.dubbo.rpc.RpcException;
 
 @Activate(group = CommonConstants.PROVIDER, order = 10000)
 public class SingleRegistryCenterExportProviderFilter implements Filter,Filter.Listener {
@@ -55,7 +55,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
 
     @Override
     public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation) {
-        response = appResponse.getValue().toString();
+        response = String.valueOf(appResponse.getValue());
     }
 
     @Override

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/single/injvm/SingleRegistryCenterInjvmFilter.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
-import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.Result;
+import org.apache.dubbo.rpc.RpcException;
 
 @Activate(group = CommonConstants.PROVIDER, order = 10000)
 public class SingleRegistryCenterInjvmFilter implements Filter,Filter.Listener {
@@ -55,7 +55,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
 
     @Override
     public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation) {
-        response = appResponse.getValue().toString();
+        response = String.valueOf(appResponse.getValue());
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
Patch:
@@ -72,11 +72,13 @@ class CallbackServiceCodec {
     private final ProxyFactory proxyFactory;
     private final Protocol protocolSPI;
     private final FrameworkModel frameworkModel;
+    private final DubboProtocol dubboProtocol;
 
     public CallbackServiceCodec(FrameworkModel frameworkModel) {
         this.frameworkModel = frameworkModel;
         proxyFactory = frameworkModel.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
         protocolSPI = frameworkModel.getExtensionLoader(Protocol.class).getExtension(DUBBO_PROTOCOL);
+        dubboProtocol = (DubboProtocol) frameworkModel.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME, false);
     }
 
     private static byte isCallBack(URL url, String protocolServiceKey, String methodName, int argIndex) {
@@ -322,7 +324,7 @@ public Object decodeInvocationArgument(Channel channel, RpcInvocation inv, Class
         // need get URL from channel and env when decode
         URL url = null;
         try {
-            url = DubboProtocol.getDubboProtocol().getInvoker(channel, inv).getUrl();
+            url = dubboProtocol.getInvoker(channel, inv).getUrl();
         } catch (RemotingException e) {
             if (logger.isInfoEnabled()) {
                 logger.info(e.getMessage(), e);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -47,7 +47,6 @@
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.config.utils.CompositeReferenceCache;
 import org.apache.dubbo.metadata.report.MetadataReportInstance;
-import org.apache.dubbo.registry.support.AbstractRegistryFactory;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
@@ -149,7 +148,6 @@ public static void reset(boolean destroy) {
                 instance = null;
             }
             MetadataReportInstance.reset();
-            AbstractRegistryFactory.reset();
             destroyAllProtocols();
             FrameworkModel.destroyAll();
         } else {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryScopeModelInitializer.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.beans.factory.ScopeBeanFactory;
 import org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl;
+import org.apache.dubbo.registry.support.RegistryManager;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
@@ -33,6 +34,7 @@ public void initializeFrameworkModel(FrameworkModel frameworkModel) {
     public void initializeApplicationModel(ApplicationModel applicationModel) {
         ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
         beanFactory.registerBean(RemoteMetadataServiceImpl.class);
+        beanFactory.registerBean(RegistryManager.class);
     }
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java
Patch:
@@ -91,9 +91,11 @@ public abstract class AbstractRegistry implements Registry {
     // Local disk cache file
     private File file;
     private boolean localCacheEnabled;
+    private RegistryManager registryManager;
 
     public AbstractRegistry(URL url) {
         setUrl(url);
+        registryManager = url.getOrDefaultApplicationModel().getBeanFactory().getBean(RegistryManager.class);
         localCacheEnabled = url.getParameter(REGISTRY_LOCAL_FILE_CACHE_ENABLED, true);
         if (localCacheEnabled) {
             // Start file save timer
@@ -505,7 +507,7 @@ public void destroy() {
                 }
             }
         }
-        AbstractRegistryFactory.removeDestroyedRegistry(this);
+        registryManager.removeDestroyedRegistry(this);
     }
 
     protected boolean acceptable(URL urlToRegistry) {

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistryTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.registry.NotifyListener;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.status.RegistryStatusChecker;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.apache.curator.test.TestingServer;
 import org.junit.jupiter.api.AfterEach;
@@ -129,7 +130,7 @@ public void testLookup() {
       @see https://github.com/apache/dubbo/issues/1787
      */
     public void testStatusChecker() {
-        RegistryStatusChecker registryStatusChecker = new RegistryStatusChecker();
+        RegistryStatusChecker registryStatusChecker = new RegistryStatusChecker(ApplicationModel.defaultModel());
         Status status = registryStatusChecker.check();
         assertThat(status.getLevel(), is(Status.Level.UNKNOWN));
 

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ServiceModel.java
Patch:
@@ -51,6 +51,9 @@ public ServiceModel(Object proxyObject, String serviceKey, ServiceDescriptor ser
         this.moduleModel = moduleModel;
         this.config = config;
         this.serviceMetadata = serviceMetadata;
+        if (serviceMetadata != null) {
+            serviceMetadata.setServiceModel(this);
+        }
         if (config != null) {
             this.classLoader = config.getInterfaceClassLoader();
         }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractClientStream.java
Patch:
@@ -124,7 +124,7 @@ protected Object deserializeResponse(byte[] data) {
         ClassLoader tccl = Thread.currentThread().getContextClassLoader();
         try {
             if (getConsumerModel() != null) {
-                ClassLoadUtil.switchContextLoader(getConsumerModel().getServiceInterfaceClass().getClassLoader());
+                ClassLoadUtil.switchContextLoader(getConsumerModel().getClassLoader());
             }
             if (getMethodDescriptor().isNeedWrap()) {
                 final TripleWrapper.TripleResponseWrapper wrapper = TripleUtil.unpack(data,

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractServerStream.java
Patch:
@@ -94,7 +94,7 @@ private static ProviderModel lookupProviderModel(URL url) {
         FrameworkServiceRepository repo = ScopeModelUtil.getFrameworkModel(url.getScopeModel()).getServiceRepository();
         final ProviderModel model = repo.lookupExportedService(url.getServiceKey());
         if (model != null) {
-            ClassLoadUtil.switchContextLoader(model.getServiceInterfaceClass().getClassLoader());
+            ClassLoadUtil.switchContextLoader(model.getClassLoader());
         }
         return model;
     }
@@ -140,7 +140,7 @@ protected Object[] deserializeRequest(byte[] data) {
         ClassLoader tccl = Thread.currentThread().getContextClassLoader();
         try {
             if (getProviderModel() != null) {
-                ClassLoadUtil.switchContextLoader(getProviderModel().getServiceInterfaceClass().getClassLoader());
+                ClassLoadUtil.switchContextLoader(getProviderModel().getClassLoader());
             }
             if (getMethodDescriptor() == null || getMethodDescriptor().isNeedWrap()) {
                 final TripleWrapper.TripleRequestWrapper wrapper = TripleUtil.unpack(data,

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/VsDestinationGroup.java
Patch:
@@ -20,14 +20,14 @@
 import org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRule;
 import org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule;
 
-import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 
 public class VsDestinationGroup {
     private String appName;
-    private List<VirtualServiceRule> virtualServiceRuleList = new ArrayList<>();
-    private List<DestinationRule> destinationRuleList = new ArrayList<>();
+    private List<VirtualServiceRule> virtualServiceRuleList = new LinkedList<>();
+    private List<DestinationRule> destinationRuleList = new LinkedList<>();
 
     public String getAppName() {
         return appName;

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/file/FileSystemDynamicConfiguration.java
Patch:
@@ -44,7 +44,6 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
@@ -201,7 +200,7 @@ public FileSystemDynamicConfiguration(File rootDirectory, String encoding,
         this.rootDirectory = rootDirectory;
         this.encoding = encoding;
         this.processingDirectories = initProcessingDirectories();
-        this.listenersRepository = new LinkedHashMap<>();
+        this.listenersRepository = new HashMap<>();
         registerDubboShutdownHook();
     }
 
@@ -214,7 +213,7 @@ public FileSystemDynamicConfiguration(File rootDirectory, String encoding,
         this.rootDirectory = rootDirectory;
         this.encoding = encoding;
         this.processingDirectories = initProcessingDirectories();
-        this.listenersRepository = new LinkedHashMap<>();
+        this.listenersRepository = new HashMap<>();
         this.scopeModel = scopeModel;
         registerDubboShutdownHook();
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/TypeUtils.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
 import java.util.Set;
@@ -79,7 +80,7 @@ static <T> Class<T> findActualTypeArgument(Type type, Class<?> interfaceClass, i
 
     static List<Class<?>> findActualTypeArguments(Type type, Class<?> interfaceClass) {
 
-        List<Class<?>> actualTypeArguments = new LinkedList<>();
+        List<Class<?>> actualTypeArguments = new ArrayList<>();
 
         getAllGenericTypes(type, t -> isAssignableFrom(interfaceClass, getRawClass(t)))
                 .forEach(parameterizedType -> {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -648,7 +648,6 @@ private ConsumerBuilder createConsumerBuilder(String id) {
     }
     /* serve for builder apis, end */
 
-
     public Module newModule() {
         return new Module(applicationModel.newModule());
     }

File: dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/rest/DefaultServiceRestMetadataResolver.java
Patch:
@@ -26,7 +26,7 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
-import java.util.LinkedHashSet;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
@@ -61,7 +61,7 @@ public class DefaultServiceRestMetadataResolver extends AbstractServiceRestMetad
             "application/*+xml;charset=UTF-8"
     );
 
-    private final Set<ExecutableElement> hasComplexParameterTypeMethods = new LinkedHashSet<>();
+    private final Set<ExecutableElement> hasComplexParameterTypeMethods = new HashSet<>();
 
     @Override
     public boolean supports(ProcessingEnvironment processingEnvironment, TypeElement serviceType) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/textui/TLadder.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.qos.textui;
 
-import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import static org.apache.dubbo.common.utils.StringUtils.repeat;
@@ -35,7 +35,7 @@ public class TLadder implements TComponent {
     // indent length
     private static final int INDENT_STEP = 2;
 
-    private final List<String> items = new ArrayList<String>();
+    private final List<String> items = new LinkedList<String>();
 
 
     @Override

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/support/SerializableClassRegistry.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.common.serialize.support;
 
-import java.util.LinkedHashMap;
+import java.util.HashMap;
 import java.util.Map;
 
 /**
@@ -26,7 +26,7 @@
 public abstract class SerializableClassRegistry {
 
 
-    private static final Map<Class<?>, Object> REGISTRATIONS = new LinkedHashMap<>();
+    private static final Map<Class<?>, Object> REGISTRATIONS = new HashMap<>();
 
     /**
      * only supposed to be called at startup time

File: dubbo-spring-boot/dubbo-spring-boot-compatible/actuator/src/main/java/org/apache/dubbo/spring/boot/actuate/endpoint/metadata/DubboReferencesMetadata.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.beans.factory.annotation.InjectionMetadata;
 import org.springframework.stereotype.Component;
 
+import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -37,7 +38,7 @@ public class DubboReferencesMetadata extends AbstractDubboMetadata {
 
     public Map<String, Map<String, Object>> references() {
 
-        Map<String, Map<String, Object>> referencesMetadata = new LinkedHashMap<>();
+        Map<String, Map<String, Object>> referencesMetadata = new HashMap<>();
 
         ReferenceAnnotationBeanPostProcessor beanPostProcessor = getReferenceAnnotationBeanPostProcessor();
 
@@ -50,7 +51,7 @@ public Map<String, Map<String, Object>> references() {
 
     private Map<String, Map<String, Object>> buildReferencesMetadata(
             Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> injectedElementReferenceBeanMap) {
-        Map<String, Map<String, Object>> referencesMetadata = new LinkedHashMap<>();
+        Map<String, Map<String, Object>> referencesMetadata = new HashMap<>();
 
         for (Map.Entry<InjectionMetadata.InjectedElement, ReferenceBean<?>> entry :
                 injectedElementReferenceBeanMap.entrySet()) {

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/beans/factory/config/ServiceBeanIdConflictProcessor.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.core.PriorityOrdered;
 
 import java.util.HashMap;
-import java.util.LinkedHashSet;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
@@ -59,7 +59,7 @@ public class ServiceBeanIdConflictProcessor implements MergedBeanDefinitionPostP
     /**
      * Holds the bean names of {@link ServiceBean} or {@link ServiceConfig}.
      */
-    private Set<String> conflictedBeanNames = new LinkedHashSet<>();
+    private Set<String> conflictedBeanNames = new HashSet<>();
 
     @Override
     public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/governance/GovernanceRuleRepository.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.extension.SPI;
 
-import static org.apache.dubbo.common.extension.ExtensionScope.APPLICATION;
+import static org.apache.dubbo.common.extension.ExtensionScope.MODULE;
 
-@SPI(value = "default", scope = APPLICATION)
+@SPI(value = "default", scope = MODULE)
 public interface GovernanceRuleRepository {
 
     String DEFAULT_GROUP = "dubbo";

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/ShortestResponseLoadBalance.java
Patch:
@@ -56,7 +56,7 @@ public class ShortestResponseLoadBalance extends AbstractLoadBalance implements
 
     @Override
     public void setApplicationModel(ApplicationModel applicationModel) {
-        SLIDE_PERIOD = applicationModel.getApplicationEnvironment().getConfiguration().getInt(Constants.SHORTEST_RESPONSE_SLIDE_PERIOD, 30_000);
+        SLIDE_PERIOD = applicationModel.getModelEnvironment().getConfiguration().getInt(Constants.SHORTEST_RESPONSE_SLIDE_PERIOD, 30_000);
     }
 
     protected static class SlideWindowData {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/AbstractRouter.java
Patch:
@@ -28,7 +28,7 @@ public abstract class AbstractRouter implements Router {
     private GovernanceRuleRepository ruleRepository;
 
     public AbstractRouter(URL url) {
-        this.ruleRepository = url.getOrDefaultApplicationModel().getExtensionLoader(GovernanceRuleRepository.class).getDefaultExtension();
+        this.ruleRepository = url.getOrDefaultModuleModel().getExtensionLoader(GovernanceRuleRepository.class).getDefaultExtension();
         this.url = url;
     }
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleAddressListenerInterceptor.java
Patch:
@@ -42,7 +42,7 @@ public List<URL> notify(List<URL> addresses, URL consumerUrl, Directory registry
                 String app = url.getRemoteApplication();
                 if (StringUtils.isNotEmpty(app)) {
                     if (APP_SET.add(app)) {
-                        MeshRuleManager.subscribeAppRule(app);
+                        MeshRuleManager.subscribeAppRule(consumerUrl, app);
                     }
                 }
             }
@@ -54,7 +54,7 @@ public List<URL> notify(List<URL> addresses, URL consumerUrl, Directory registry
     @Override
     public void destroy(URL consumerUrl, Directory registryDirectory) {
         for (String app : APP_SET) {
-            MeshRuleManager.unsubscribeAppRule(app);
+            MeshRuleManager.unsubscribeAppRule(consumerUrl, app);
         }
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AbstractStateRouter.java
Patch:
@@ -41,7 +41,7 @@ public abstract class AbstractStateRouter implements StateRouter {
     protected GovernanceRuleRepository ruleRepository;
 
     public AbstractStateRouter(URL url, RouterChain chain) {
-        this.ruleRepository = url.getOrDefaultApplicationModel().getExtensionLoader(GovernanceRuleRepository.class).getDefaultExtension();
+        this.ruleRepository = url.getOrDefaultModuleModel().getExtensionLoader(GovernanceRuleRepository.class).getDefaultExtension();
         this.chain = chain;
         this.url = url;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/context/ApplicationExt.java
Patch:
@@ -20,6 +20,6 @@
 import org.apache.dubbo.common.extension.SPI;
 
 @SPI(scope = ExtensionScope.APPLICATION)
-public interface FrameworkExt extends Lifecycle {
+public interface ApplicationExt extends Lifecycle {
 
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.beans.support.InstantiationStrategy;
 import org.apache.dubbo.common.config.Environment;
-import org.apache.dubbo.common.context.FrameworkExt;
+import org.apache.dubbo.common.context.ApplicationExt;
 import org.apache.dubbo.common.context.Lifecycle;
 import org.apache.dubbo.common.extension.support.ActivateComparator;
 import org.apache.dubbo.common.extension.support.WrapperComparator;
@@ -195,7 +195,7 @@ private void initInstantiationStrategy() {
      */
     @Deprecated
     public static <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {
-        return ApplicationModel.defaultModel().getExtensionLoader(type);
+        return ApplicationModel.defaultModel().getDefaultModule().getExtensionLoader(type);
     }
 
     // For testing purposes only
@@ -1174,7 +1174,7 @@ private Class<?> createAdaptiveExtensionClass() {
 
     private Environment getEnvironment() {
         if (environment == null) {
-            environment = (Environment) extensionDirector.getExtensionLoader(FrameworkExt.class).getExtension(Environment.NAME);
+            environment = (Environment) extensionDirector.getExtensionLoader(ApplicationExt.class).getExtension(Environment.NAME);
         }
         return environment;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -527,7 +527,7 @@ public void refresh() {
             // check and init before do refresh
             preProcessRefresh();
 
-            Environment environment = getApplicationModel().getApplicationEnvironment();
+            Environment environment = getScopeModel().getModelEnvironment();
             List<Map<String, String>> configurationMaps = environment.getConfigurationMaps();
 
             // Search props starts with PREFIX in order

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -277,7 +277,7 @@ protected String[] methods(Class<?> interfaceClass) {
     }
 
     protected Environment getEnvironment() {
-        return getApplicationModel().getApplicationEnvironment();
+        return getScopeModel().getModelEnvironment();
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/config/MethodConfig.java
Patch:
@@ -230,7 +230,7 @@ protected void processExtraRefresh(String preferredPrefix, InmemoryConfiguration
     private void refreshArgument(ArgumentConfig argument, InmemoryConfiguration subPropsConfiguration) {
         if (argument.getIndex() != null && argument.getIndex() >= 0) {
             String prefix = argument.getIndex() + ".";
-            Environment environment = getApplicationModel().getApplicationEnvironment();
+            Environment environment = getScopeModel().getModelEnvironment();
             java.lang.reflect.Method[] methods = argument.getClass().getMethods();
             for (java.lang.reflect.Method method : methods) {
                 if (MethodUtils.isSetter(method)) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/AbstractConfigManager.java
Patch:
@@ -75,7 +75,7 @@ public AbstractConfigManager(ScopeModel scopeModel, Collection<Class<? extends A
         this.scopeModel = scopeModel;
         this.applicationModel = ScopeModelUtil.getApplicationModel(scopeModel);
         this.supportedConfigTypes = supportedConfigTypes;
-        environment = applicationModel.getApplicationEnvironment();
+        environment = scopeModel.getModelEnvironment();
     }
 
     /**
@@ -331,7 +331,7 @@ static <C extends AbstractConfig> List<C> getDefaultConfigs(Map<String, C> confi
     public abstract void loadConfigs();
 
     public <T extends AbstractConfig> void loadConfigsOfTypeFromProps(Class<T> cls) {
-        PropertiesConfiguration properties = applicationModel.getApplicationEnvironment().getPropertiesConfiguration();
+        PropertiesConfiguration properties = environment.getPropertiesConfiguration();
 
         // load multiple configs with id
         Set<String> configIds = this.getConfigIdsFromProps(cls);

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.config.context;
 
 import org.apache.dubbo.common.config.CompositeConfiguration;
-import org.apache.dubbo.common.context.FrameworkExt;
+import org.apache.dubbo.common.context.ApplicationExt;
 import org.apache.dubbo.common.extension.DisableInject;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
@@ -53,7 +53,7 @@
  * A lock-free config manager (through ConcurrentHashMap), for fast read operation.
  * The Write operation lock with sub configs map of config type, for safely check and add new config.
  */
-public class ConfigManager extends AbstractConfigManager implements FrameworkExt {
+public class ConfigManager extends AbstractConfigManager implements ApplicationExt {
 
     private static final Logger logger = LoggerFactory.getLogger(ConfigManager.class);
 
@@ -90,7 +90,7 @@ public void initialize() throws IllegalStateException {
         if (!inited.compareAndSet(false, true)) {
             return;
         }
-        CompositeConfiguration configuration = applicationModel.getApplicationEnvironment().getConfiguration();
+        CompositeConfiguration configuration = applicationModel.getModelEnvironment().getConfiguration();
         String configModeStr = (String) configuration.getProperty(DUBBO_CONFIG_MODE);
         try {
             if (StringUtils.hasText(configModeStr)) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ModuleConfigManager.java
Patch:
@@ -63,7 +63,7 @@ public void initialize() throws IllegalStateException {
         if (!inited.compareAndSet(false, true)) {
             return;
         }
-        CompositeConfiguration configuration = applicationModel.getApplicationEnvironment().getConfiguration();
+        CompositeConfiguration configuration = scopeModel.getModelEnvironment().getConfiguration();
 
         String ignoreDuplicatedInterfaceStr = (String) configuration
             .getProperty(ConfigKeys.DUBBO_CONFIG_IGNORE_DUPLICATED_INTERFACE);

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ScopeModel.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.model;
 
 import org.apache.dubbo.common.beans.factory.ScopeBeanFactory;
+import org.apache.dubbo.common.config.Environment;
 import org.apache.dubbo.common.extension.ExtensionAccessor;
 import org.apache.dubbo.common.extension.ExtensionDirector;
 import org.apache.dubbo.common.extension.ExtensionScope;
@@ -178,6 +179,8 @@ public Set<ClassLoader> getClassLoaders() {
         return Collections.unmodifiableSet(classLoaders);
     }
 
+    public abstract Environment getModelEnvironment();
+
     public String getInternalId() {
         // XxxModule-1.1
         if (this.internalName == null) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/EnvironmentTest.java
Patch:
@@ -32,7 +32,7 @@ public class EnvironmentTest {
 
     @Test
     public void testResolvePlaceholders1() {
-        Environment environment = ApplicationModel.defaultModel().getApplicationEnvironment();
+        Environment environment = ApplicationModel.defaultModel().getModelEnvironment();
 
         Map<String, String> externalMap = new LinkedHashMap<>();
         externalMap.put("zookeeper.address", "127.0.0.1");

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/PropertiesConfigurationTest.java
Patch:
@@ -18,14 +18,15 @@
 
 
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class PropertiesConfigurationTest {
 
     @Test
     public void testOrderPropertiesProviders() {
-        PropertiesConfiguration configuration = new PropertiesConfiguration(ApplicationModel.defaultModel());
+        OrderedPropertiesConfiguration configuration = new OrderedPropertiesConfiguration(ApplicationModel.defaultModel().getDefaultModule());
         Assertions.assertEquals("999", configuration.getInternalProperty("testKey"));
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConfigPostProcessor.java
Patch:
@@ -16,13 +16,14 @@
  */
 package org.apache.dubbo.config;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
  * 2019/12/30
  */
 
-@SPI
+@SPI(scope = ExtensionScope.MODULE)
 public interface ConfigPostProcessor {
 
     default void postProcessReferConfig(ReferenceConfig referenceConfig) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DefaultApplicationDeployer.java
Patch:
@@ -134,7 +134,7 @@ public class DefaultApplicationDeployer implements ApplicationDeployer {
     public DefaultApplicationDeployer(ApplicationModel applicationModel) {
         this.applicationModel = applicationModel;
         configManager = applicationModel.getApplicationConfigManager();
-        environment = applicationModel.getApplicationEnvironment();
+        environment = applicationModel.getModelEnvironment();
 
         referenceCache = new CompositeReferenceCache(applicationModel);
         executorRepository = getExtensionLoader(ExecutorRepository.class).getDefaultExtension();

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -166,7 +166,7 @@ private DubboBootstrap(FrameworkModel frameworkModel) {
     private DubboBootstrap(ApplicationModel applicationModel) {
         this.applicationModel = applicationModel;
         configManager = applicationModel.getApplicationConfigManager();
-        environment = applicationModel.getApplicationEnvironment();
+        environment = applicationModel.getModelEnvironment();
 
         referenceCache = new CompositeReferenceCache(applicationModel);
         executorRepository = applicationModel.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/DubboBootstrapTest.java
Patch:
@@ -125,13 +125,13 @@ public void compatibleApplicationShutdown() {
             System.clearProperty(SHUTDOWN_WAIT_SECONDS_KEY);
 
             writeDubboProperties(SHUTDOWN_WAIT_KEY, "100");
-            ApplicationModel.defaultModel().getApplicationEnvironment().getPropertiesConfiguration().refresh();
+            ApplicationModel.defaultModel().getModelEnvironment().getPropertiesConfiguration().refresh();
             ConfigValidationUtils.validateApplicationConfig(new ApplicationConfig("demo"));
             Assertions.assertEquals("100", System.getProperty(SHUTDOWN_WAIT_KEY));
 
             System.clearProperty(SHUTDOWN_WAIT_KEY);
             writeDubboProperties(SHUTDOWN_WAIT_SECONDS_KEY, "1000");
-            ApplicationModel.defaultModel().getApplicationEnvironment().getPropertiesConfiguration().refresh();
+            ApplicationModel.defaultModel().getModelEnvironment().getPropertiesConfiguration().refresh();
             ConfigValidationUtils.validateApplicationConfig(new ApplicationConfig("demo"));
             Assertions.assertEquals("1000", System.getProperty(SHUTDOWN_WAIT_SECONDS_KEY));
         } finally {

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/registrycenter/ZookeeperMultipleRegistryCenter.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.registrycenter;
 
+import org.apache.dubbo.common.utils.NetUtils;
+
 /**
  * The default zookeeper multiple registry center.
  */
@@ -35,7 +37,7 @@ public ZookeeperMultipleRegistryCenter(int port1, int port2) {
      * Initialize {@link ZookeeperMultipleRegistryCenter} instance.
      */
     public ZookeeperMultipleRegistryCenter() {
-        this(DEFAULT_PORT1, DEFAULT_PORT2);
+        this(NetUtils.getAvailablePort(), NetUtils.getAvailablePort());
     }
 
     private static final int DEFAULT_PORT1 = 2181;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboInfraBeanRegisterPostProcessor.java
Patch:
@@ -79,7 +79,7 @@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
         // Extract dubbo props from Spring env and put them to app config
         ConfigurableEnvironment environment = (ConfigurableEnvironment) applicationContext.getEnvironment();
         SortedMap<String, String> dubboProperties = EnvironmentUtils.filterDubboProperties(environment);
-        applicationModel.getApplicationEnvironment().setAppConfigMap(dubboProperties);
+        applicationModel.getModelEnvironment().setAppConfigMap(dubboProperties);
 
         // register ConfigManager singleton
         beanFactory.registerSingleton(ConfigManager.BEAN_NAME, applicationModel.getApplicationConfigManager());

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocolListener.java
Patch:
@@ -21,13 +21,13 @@
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.cluster.ClusterInvoker;
 
-import static org.apache.dubbo.common.extension.ExtensionScope.APPLICATION;
+import static org.apache.dubbo.common.extension.ExtensionScope.MODULE;
 
 /**
  * RegistryProtocol listener is introduced to provide a chance to user to customize or change export and refer behavior
  * of RegistryProtocol. For example: re-export or re-refer on the fly when certain condition meets.
  */
-@SPI(scope = APPLICATION)
+@SPI(scope = MODULE)
 public interface RegistryProtocolListener {
     /**
      * Notify RegistryProtocol's listeners when a service is registered

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/MetadataUtilsTest.java
Patch:
@@ -117,7 +117,7 @@ public void testCreateMetadataInvoker() {
 
         try (MockedStatic<ScopeModelUtil> scopeModelUtilMockedStatic = mockStatic(ScopeModelUtil.class)) {
             scopeModelUtilMockedStatic
-                .when(() -> ScopeModelUtil.getApplicationModel(serviceInstance.getApplicationModel()))
+                .when(() -> ScopeModelUtil.getOrDefaultApplicationModel(serviceInstance.getApplicationModel()))
                 .thenReturn(applicationModel);
             MetadataUtils.getMetadataServiceProxy(serviceInstance);
 
@@ -174,7 +174,7 @@ public void testDestroyMetadataServiceProxy() {
 
         try (MockedStatic<ScopeModelUtil> scopeModelUtilMockedStatic = mockStatic(ScopeModelUtil.class)) {
             scopeModelUtilMockedStatic
-                .when(() -> ScopeModelUtil.getApplicationModel(serviceInstance.getApplicationModel()))
+                .when(() -> ScopeModelUtil.getOrDefaultApplicationModel(serviceInstance.getApplicationModel()))
                 .thenReturn(applicationModel);
             MetadataUtils.getMetadataServiceProxy(serviceInstance);
         }

File: dubbo-registry/dubbo-registry-dns/src/test/java/org/apache/dubbo/registry/dns/DNSServiceDiscoveryTest.java
Patch:
@@ -116,7 +116,7 @@ public void testConsumer() throws Exception {
                 .addParameter(DNSClientConst.DNS_POLLING_CYCLE, 100)
                 .addParameter(Constants.ECHO_POLLING_CYCLE_KEY, 100);
         registryURL.setScopeModel(ApplicationModel.defaultModel());
-        applicationModel.getApplicationEnvironment().getAppExternalConfigMap()
+        applicationModel.getModelEnvironment().getAppExternalConfigMap()
                 .put(METADATA_PROXY_TIMEOUT_KEY, String.valueOf(500));
         dnsServiceDiscovery.initialize(registryURL);
 
@@ -169,7 +169,7 @@ public void testConsumer() throws Exception {
         serviceConfig.unexport();
 
         dnsServiceDiscovery.destroy();
-        applicationModel.getApplicationEnvironment().getAppExternalConfigMap()
+        applicationModel.getModelEnvironment().getAppExternalConfigMap()
                 .remove(METADATA_PROXY_TIMEOUT_KEY);
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java
Patch:
@@ -114,7 +114,7 @@ public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {
                 } else if (ProtocolUtils.isGsonGenericSerialization(generic)) {
                     args = getGsonGenericArgs(args, method.getGenericParameterTypes());
                 } else if (ProtocolUtils.isJavaGenericSerialization(generic)) {
-                    Configuration configuration = ApplicationModel.ofNullable(applicationModel).getApplicationEnvironment().getConfiguration();
+                    Configuration configuration = ApplicationModel.ofNullable(applicationModel).getModelEnvironment().getConfiguration();
                     if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE, false)) {
                         String notice = "Trigger the safety barrier! " +
                                 "Native Java Serializer is not allowed by default." +

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/merger/ResultMergerTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.cluster.merger;
 
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance;
 import org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance;
 import org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ClusterUtilsTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.URLBuilder;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-common/src/main/java/org/apache/dubbo/common/CommonScopeModelInitializer.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.common;
 
 import org.apache.dubbo.common.beans.factory.ScopeBeanFactory;
+import org.apache.dubbo.common.lang.ShutdownHookCallbacks;
 import org.apache.dubbo.common.status.reporter.FrameworkStatusReportService;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
@@ -32,6 +33,7 @@ public void initializeFrameworkModel(FrameworkModel frameworkModel) {
     @Override
     public void initializeApplicationModel(ApplicationModel applicationModel) {
         ScopeBeanFactory beanFactory = applicationModel.getBeanFactory();
+        beanFactory.registerBean(ShutdownHookCallbacks.class);
         beanFactory.registerBean(FrameworkStatusReportService.class);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/manager/DefaultExecutorRepository.java
Patch:
@@ -233,7 +233,7 @@ public void shutdownServiceExportExecutor() {
     }
 
     private Integer getExportThreadNum() {
-        List<Integer> threadNum = ApplicationModel.ofNullable(applicationModel).getApplicationConfigManager().getProviders()
+        List<Integer> threadNum = ApplicationModel.ofNullable(applicationModel).getDefaultModule().getConfigManager().getProviders()
             .stream()
             .map(ProviderConfig::getExportThreadNum)
             .filter(k -> k != null && k > 0)
@@ -280,7 +280,7 @@ public void shutdownServiceReferExecutor() {
     }
 
     private Integer getReferThreadNum() {
-        List<Integer> threadNum = ApplicationModel.ofNullable(applicationModel).getApplicationConfigManager().getConsumers()
+        List<Integer> threadNum = ApplicationModel.ofNullable(applicationModel).getDefaultModule().getConfigManager().getConsumers()
             .stream()
             .map(ConsumerConfig::getReferThreadNum)
             .filter(k -> k != null && k > 0)

File: dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/AdaptiveCompilerTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.common.compiler.support;
 
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionDirectorTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/support/ActivateComparatorTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.common.extension.support;
 
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-common/src/test/java/org/apache/dubbo/common/lang/ShutdownHookCallbacksTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.lang;
 
+import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -34,7 +35,7 @@ public class ShutdownHookCallbacksTest {
 
     @BeforeEach
     public void init() {
-        callbacks = new ShutdownHookCallbacks();
+        callbacks = new ShutdownHookCallbacks(ApplicationModel.defaultModel());
     }
 
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerFactoryTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.common.logger;
 
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.Test;
 
 import java.io.File;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/ConfigUtilsTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.threadpool.ThreadPool;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/NetUtilsInterfaceDisplayNameHasMetaCharactersTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.mockito.MockedStatic;
 import org.mockito.Mockito;
 
-import java.util.Enumeration;
-import java.util.NoSuchElementException;
 import java.net.InetAddress;
 import java.net.NetworkInterface;
+import java.util.Enumeration;
+import java.util.NoSuchElementException;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_NETWORK_IGNORED_INTERFACE;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -110,4 +110,4 @@ private void setIgnoredInterfaces(String ignoredInterfaces){
         }
     }
 
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/BootstrapTakeoverMode.java
Patch:
@@ -23,7 +23,7 @@
  * SPRING: will be controlled by spring context
  * MANUAL: will be controlled by users, after all services init, should call {@link DubboBootstrap#start()} to init app-level env
  * AUTO: env will be init once {@link ServiceConfig#export()} finished
- * SERVLET: will be controlled by tomcat
+ * SERVLET: will be controlled by java servlet container
  */
 public enum BootstrapTakeoverMode {
     SPRING, MANUAL, AUTO, SERVLET

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.ServiceConfig;
-import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.metadata.MetadataService;
 import org.apache.dubbo.metadata.MetadataServiceExporter;
@@ -83,7 +82,6 @@ public ConfigurableMetadataServiceExporter export() {
             ApplicationConfig applicationConfig = getApplicationConfig();
             ServiceConfig<MetadataService> serviceConfig = new ServiceConfig<>();
             serviceConfig.setScopeModel(applicationModel.getInternalModule());
-            serviceConfig.setBootstrap(applicationModel.getBeanFactory().getBean(DubboBootstrap.class));
             serviceConfig.setApplication(applicationConfig);
             serviceConfig.setRegistry(new RegistryConfig("N/A"));
             serviceConfig.setProtocol(generateMetadataProtocol());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.config.utils.ConfigValidationUtils;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConfigCenterConfigTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/metadata/ServiceInstanceHostPortCustomizerTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/MockReferenceConfig.java
Patch:
@@ -54,6 +54,7 @@ public long getCounter() {
 
     @Override
     public synchronized void destroy() {
+        super.destroy();
         destroyMethodRun = true;
     }
 }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/XxxMockReferenceConfig.java
Patch:
@@ -54,6 +54,7 @@ public long getCounter() {
 
     @Override
     public synchronized void destroy() {
+        super.destroy();
         destroyMethodRun = true;
     }
 }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/multiple/exportprovider/MultipleRegistryCenterExportProviderIntegrationTest.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.dubbo.rpc.ExporterListener;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -173,7 +172,6 @@ public void integrate() {
         afterExport();
         ReferenceConfig<MultipleRegistryCenterExportProviderService> referenceConfig = new ReferenceConfig<>();
         referenceConfig.setInterface(MultipleRegistryCenterExportProviderService.class);
-        referenceConfig.setBootstrap(DubboBootstrap.getInstance());
         referenceConfig.get().hello(PROVIDER_APPLICATION_NAME);
         afterInvoke();
     }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/single/SingleRegistryCenterDubboProtocolIntegrationTest.java
Patch:
@@ -41,7 +41,6 @@
 import org.apache.dubbo.registrycenter.RegistryCenter;
 import org.apache.dubbo.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.rpc.cluster.Directory;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -310,7 +309,6 @@ private ServiceDiscoveryRegistry getServiceDiscoveryRegistry() {
     private void initConsumer() {
         referenceConfig = new ReferenceConfig<>();
         referenceConfig.setInterface(SingleRegistryCenterIntegrationService.class);
-        referenceConfig.setBootstrap(DubboBootstrap.getInstance());
         DubboBootstrap.getInstance().reference(referenceConfig);
         referenceConfig.setRegistry(registryConfig);
         referenceConfig.setScope(SCOPE_REMOTE);
@@ -326,7 +324,7 @@ private void initConsumer() {
      */
     private void beforeRefer() {
         // ReferenceConfig has integrated into DubboBootstrap or not
-        Assertions.assertEquals(referenceConfig.getBootstrap(), DubboBootstrap.getInstance());
+        Assertions.assertEquals(referenceConfig.getScopeModel(), DubboBootstrap.getInstance().getApplicationModel().getDefaultModule());
     }
 
     /**

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/single/exportprovider/SingleRegistryCenterExportProviderIntegrationTest.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.dubbo.rpc.ExporterListener;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -176,7 +175,6 @@ public void integrate() {
         afterExport();
         ReferenceConfig<SingleRegistryCenterExportProviderService> referenceConfig = new ReferenceConfig<>();
         referenceConfig.setInterface(SingleRegistryCenterExportProviderService.class);
-        referenceConfig.setBootstrap(DubboBootstrap.getInstance());
         referenceConfig.setScope(SCOPE_LOCAL);
         referenceConfig.get().hello(PROVIDER_APPLICATION_NAME);
         afterInvoke();

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ConfigCenterBean.java
Patch:
@@ -19,8 +19,6 @@
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.ConfigCenterConfig;
-import org.apache.dubbo.config.spring.extension.SpringExtensionInjector;
-
 import org.springframework.beans.factory.DisposableBean;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
@@ -46,7 +44,6 @@ public class ConfigCenterBean extends ConfigCenterConfig implements ApplicationC
     @Override
     public void setApplicationContext(ApplicationContext applicationContext) {
         this.applicationContext = applicationContext;
-        SpringExtensionInjector.addApplicationContext(applicationContext);
     }
 
     @Override

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.dubbo.config.spring.ReferenceBean;
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.apache.dubbo.config.spring.beans.factory.config.ConfigurableSourceBeanMetadataElement;
-
 import org.apache.dubbo.config.spring.context.DubboSpringInitializer;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
@@ -83,7 +82,7 @@ public BeanDefinition parse(Element element, ParserContext parserContext) {
         registerAnnotationConfigProcessors(registry);
 
         // initialize dubbo beans
-        DubboSpringInitializer.initialize(registry);
+        DubboSpringInitializer.initialize(parserContext.getRegistry());
 
         BeanDefinition beanDefinition = super.parse(element, parserContext);
         setSource(beanDefinition);

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/MethodConfigCallbackTest.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.dubbo.config.spring.api.MethodCallback;
 import org.apache.dubbo.config.spring.context.annotation.provider.ProviderConfiguration;
 import org.apache.dubbo.config.spring.impl.MethodCallbackImpl;
-import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
+import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
+import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.springframework.beans.factory.annotation.Autowired;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/impl/MethodCallbackImpl.java
Patch:
@@ -23,9 +23,8 @@
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.transaction.support.TransactionSynchronizationManager;
 
-import java.util.concurrent.atomic.AtomicInteger;
-
 import javax.annotation.PostConstruct;
+import java.util.concurrent.atomic.AtomicInteger;
 
 public class MethodCallbackImpl implements MethodCallback {
     private String onInvoke1 = "";

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/issues/issue7003/Issue7003Test.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
@@ -73,7 +72,7 @@ public void test() throws Exception {
             Map<String, ReferenceBean> referenceBeanMap = context.getBeansOfType(ReferenceBean.class);
             Assertions.assertEquals(1, referenceBeanMap.size());
 
-            Collection<ReferenceConfigBase<?>> references = ApplicationModel.defaultModel().getApplicationConfigManager().getReferences();
+            Collection<ReferenceConfigBase<?>> references = ApplicationModel.defaultModel().getDefaultModule().getConfigManager().getReferences();
             Assertions.assertEquals(1, references.size());
 
         } finally {

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandlerTest.java
Patch:
@@ -25,12 +25,12 @@
 import org.apache.dubbo.config.ServiceConfigBase;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.context.ConfigManager;
+import org.apache.dubbo.config.context.ModuleConfigManager;
 import org.apache.dubbo.config.spring.ConfigTest;
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.apache.dubbo.config.spring.api.DemoService;
 import org.apache.dubbo.config.spring.impl.DemoServiceImpl;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -176,7 +176,7 @@ public void testTimeoutConfig() {
         ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(resourcePath + "/provider-nested-service.xml");
         ctx.start();
 
-        ConfigManager configManager = ApplicationModel.defaultModel().getApplicationConfigManager();
+        ModuleConfigManager configManager = ApplicationModel.defaultModel().getDefaultModule().getConfigManager();
         Collection<ProviderConfig> providerConfigs = configManager.getProviders();
         Assertions.assertEquals(2, providerConfigs.size());
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/schema/GenericServiceWithoutInterfaceTest.java
Patch:
@@ -22,10 +22,10 @@
 import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.rpc.service.GenericService;
-import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.AfterAll;
-import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
@@ -68,7 +68,7 @@ public void testGenericWithoutInterface() {
         Object result = genericServiceWithoutInterfaceRef.$invoke("sayHello", new String[]{"java.lang.String"}, new Object[]{"generic"});
         Assertions.assertEquals("Welcome generic", result);
 
-        ReferenceConfigBase<Object> reference = DubboBootstrap.getInstance().getConfigManager().getReference("genericServiceWithoutInterfaceRef");
+        ReferenceConfigBase<Object> reference = DubboBootstrap.getInstance().getApplicationModel().getDefaultModule().getConfigManager().getReference("genericServiceWithoutInterfaceRef");
         Assertions.assertNull(reference.getServiceInterfaceClass());
         Assertions.assertEquals("org.apache.dubbo.config.spring.api.LocalMissClass", reference.getInterface());
         Assertions.assertThrows(ClassNotFoundException.class, () -> ClassUtils.forName(reference.getInterface()));

File: dubbo-container/dubbo-container-spring/src/main/java/org/apache/dubbo/container/spring/SpringContainer.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.container.Container;
-
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 
 /**

File: dubbo-demo/dubbo-demo-api/dubbo-demo-api-consumer/src/main/java/org/apache/dubbo/demo/consumer/Application.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-import org.apache.dubbo.config.utils.ReferenceConfigCache;
 import org.apache.dubbo.demo.DemoService;
 import org.apache.dubbo.rpc.service.GenericService;
 
@@ -49,7 +48,7 @@ private static void runWithBootstrap() {
                 .reference(reference)
                 .start();
 
-        DemoService demoService = ReferenceConfigCache.getCache().get(reference);
+        DemoService demoService = bootstrap.getCache().get(reference);
         String message = demoService.sayHello("dubbo");
         System.out.println(message);
 

File: dubbo-demo/dubbo-demo-generic-call/src/main/java/org/apache/dubbo/demo/consumer/GenericApplication.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-import org.apache.dubbo.config.utils.ReferenceConfigCache;
 import org.apache.dubbo.rpc.service.GenericService;
 
 import java.util.HashMap;
@@ -59,7 +58,7 @@ private static void runWithBootstrap() {
                 .start();
 
         // generic invoke
-        GenericService genericService = (GenericService) ReferenceConfigCache.getCache().get(reference);
+        GenericService genericService = (GenericService) bootstrap.getCache().get(reference);
         while (true) {
             try {
                 Object genericInvokeResult = genericService.$invoke("sayHello", new String[]{String.class.getName()},

File: dubbo-demo/dubbo-demo-native/dubbo-demo-native-consumer/src/main/java/com/apache/dubbo/demo/graalvm/consumer/Application.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-import org.apache.dubbo.config.utils.ReferenceConfigCache;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -59,7 +58,7 @@ private static void runWithBootstrap() {
                 .reference(reference)
                 .start();
 
-        DemoService demoService = ReferenceConfigCache.getCache().get(reference);
+        DemoService demoService = bootstrap.getCache().get(reference);
         String message = demoService.sayHello("Native");
         System.out.println(message);
     }

File: dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/AccessKeyAuthenticatorTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;

File: dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/filter/ConsumerSignFilterTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.Test;
 
 import static org.mockito.ArgumentMatchers.anyString;

File: dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/filter/ProviderAuthFilterTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertNull;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/ShutdownTelnet.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.config.DubboShutdownHook;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.qos.command.annotation.Cmd;
@@ -46,8 +45,9 @@ public String execute(CommandContext commandContext, String[] args) {
             }
         }
         StringBuilder buf = new StringBuilder();
-        DubboShutdownHook.getDubboShutdownHook().unregister();
-        DubboShutdownHook.getDubboShutdownHook().doDestroy();
+        // TODO change to ApplicationDeployer.destroy() or ApplicationModel.destroy()
+//        DubboShutdownHook.getDubboShutdownHook().unregister();
+//        DubboShutdownHook.getDubboShutdownHook().doDestroy();
         long end = System.currentTimeMillis();
         buf.append("Application has shutdown successfully");
         buf.append("\r\nelapsed: ");

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/ShutdownTelnetTest.java
Patch:
@@ -16,12 +16,11 @@
  */
 package org.apache.dubbo.qos.command.impl;
 
+import io.netty.channel.Channel;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.qos.legacy.ProtocolUtils;
 import org.apache.dubbo.remoting.RemotingException;
-
-import io.netty.channel.Channel;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -63,6 +62,6 @@ public void testInvokeWithTimeParameter() throws RemotingException {
         String result = shutdown.execute(mockCommandContext, new String[]{"-t", "" + sleepTime});
         long end = System.currentTimeMillis();
         assertTrue(result.contains("Application has shutdown successfully"), result);
-        assertTrue((end - start) > sleepTime, "sleepTime: " + sleepTime + ", execTime: " + (end - start));
+        assertTrue((end - start) >= sleepTime, "sleepTime: " + sleepTime + ", execTime: " + (end - start));
     }
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/DefaultServiceInstance.java
Patch:
@@ -16,11 +16,10 @@
  */
 package org.apache.dubbo.registry.client;
 
+import com.alibaba.fastjson.JSON;
 import org.apache.dubbo.metadata.MetadataInfo;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
-import com.alibaba.fastjson.JSON;
-
 import java.beans.Transient;
 import java.util.HashMap;
 import java.util.List;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtils.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.client.metadata;
 
+import com.google.gson.Gson;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.logger.Logger;
@@ -32,8 +33,6 @@
 import org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl;
 import org.apache.dubbo.registry.support.AbstractRegistryFactory;
 
-import com.google.gson.Gson;
-
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/SpringCloudMetadataServiceURLBuilder.java
Patch:
@@ -16,12 +16,11 @@
  */
 package org.apache.dubbo.registry.client.metadata;
 
+import com.alibaba.fastjson.JSON;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.registry.client.ServiceInstance;
 
-import com.alibaba.fastjson.JSON;
-
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/InMemoryWritableMetadataService.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.client.metadata.store;
 
+import com.google.gson.Gson;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.logger.Logger;
@@ -35,8 +36,6 @@
 import org.apache.dubbo.rpc.model.ScopeModelAware;
 import org.apache.dubbo.rpc.support.ProtocolUtils;
 
-import com.google.gson.Gson;
-
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.HashSet;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/model/MigrationRule.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.metadata.ServiceNameMapping;
-
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.Constructor;
 import org.yaml.snakeyaml.constructor.SafeConstructor;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -765,7 +765,7 @@ private ProviderConfigurationListener getProviderConfigurationListener(URL url)
     }
 
     private ProviderConfigurationListener getProviderConfigurationListener(ApplicationModel applicationModel) {
-        return applicationModel.getBeanFactory().registerBeanIfAbsent(ProviderConfigurationListener.class,
+        return applicationModel.getBeanFactory().getOrRegisterBean(ProviderConfigurationListener.class,
             type -> new ProviderConfigurationListener(applicationModel));
     }
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/CacheableFallbackRegistryTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.URLStrParser;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMappingTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.metadata.report.MetadataReportInstance;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/MetadataUtilsTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ScopeModelUtil;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/store/InMemoryMetadataServiceTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.registry.MockLogger;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.FrameworkModel;
-
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/model/MigrationRuleTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.metadata.ServiceNameMapping;
 import org.apache.dubbo.metadata.WritableMetadataService;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentMatchers;
 import org.mockito.Mockito;

File: dubbo-registry/dubbo-registry-dns/src/test/java/org/apache/dubbo/registry/dns/DNSServiceDiscoveryTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.dns;
 
+import com.alibaba.fastjson.JSONObject;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.config.ApplicationConfig;
@@ -38,8 +39,6 @@
 import org.apache.dubbo.registry.dns.util.ResolveResult;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ScopeModelUtil;
-
-import com.alibaba.fastjson.JSONObject;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.registry.zookeeper;
 
+import org.apache.curator.framework.CuratorFramework;
+import org.apache.curator.framework.api.CuratorWatcher;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.function.ThrowableConsumer;
 import org.apache.dubbo.common.function.ThrowableFunction;
@@ -29,9 +31,6 @@
 import org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent;
 import org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener;
 import org.apache.dubbo.rpc.RpcException;
-
-import org.apache.curator.framework.CuratorFramework;
-import org.apache.curator.framework.api.CuratorWatcher;
 import org.apache.zookeeper.KeeperException;
 
 import java.util.Iterator;

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryChangeWatcher.java
Patch:
@@ -16,15 +16,14 @@
  */
 package org.apache.dubbo.registry.zookeeper;
 
+import org.apache.curator.framework.api.CuratorWatcher;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
 import org.apache.dubbo.registry.RegistryNotifier;
 import org.apache.dubbo.registry.client.ServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent;
 import org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener;
 import org.apache.dubbo.rpc.model.ScopeModelUtil;
-
-import org.apache.curator.framework.api.CuratorWatcher;
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.Watcher;
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/PortUnificationServerHandler.java
Patch:
@@ -16,14 +16,13 @@
  */
 package org.apache.dubbo.remoting.api;
 
-import org.apache.dubbo.common.URL;
-
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.group.DefaultChannelGroup;
 import io.netty.handler.codec.ByteToMessageDecoder;
 import io.netty.handler.ssl.SslContext;
 import io.netty.util.concurrent.GlobalEventExecutor;
+import org.apache.dubbo.common.URL;
 
 import java.util.List;
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/WireProtocol.java
Patch:
@@ -16,13 +16,12 @@
  */
 package org.apache.dubbo.remoting.api;
 
+import io.netty.channel.ChannelPipeline;
+import io.netty.handler.ssl.SslContext;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
-import io.netty.channel.ChannelPipeline;
-import io.netty.handler.ssl.SslContext;
-
 @SPI(scope = ExtensionScope.FRAMEWORK)
 public interface WireProtocol {
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/api/EmptyProtocol.java
Patch:
@@ -16,10 +16,9 @@
  */
 package org.apache.dubbo.remoting.api;
 
-import org.apache.dubbo.common.URL;
-
 import io.netty.channel.ChannelPipeline;
 import io.netty.handler.ssl.SslContext;
+import org.apache.dubbo.common.URL;
 
 public class EmptyProtocol implements WireProtocol {
     @Override

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockInvoker.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.rpc.support;
 
+import com.alibaba.fastjson.JSON;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionDirector;
 import org.apache.dubbo.common.extension.ExtensionInjector;
@@ -32,8 +33,6 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 
-import com.alibaba.fastjson.JSON;
-
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Type;
 import java.util.List;

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/MockInvokerTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractServerStream.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
+import com.google.protobuf.Message;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.extension.ExtensionLoader;
@@ -32,8 +33,6 @@
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
 import org.apache.dubbo.triple.TripleWrapper;
 
-import com.google.protobuf.Message;
-
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.rpc.protocol.tri;
 
+import io.netty.channel.ChannelFuture;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.Version;
 import org.apache.dubbo.common.extension.ExtensionLoader;
@@ -41,8 +42,6 @@
 import org.apache.dubbo.rpc.protocol.AbstractInvoker;
 import org.apache.dubbo.rpc.support.RpcUtils;
 
-import io.netty.channel.ChannelFuture;
-
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/UnaryServerStream.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dubbo.rpc.protocol.tri;
 
+import io.netty.handler.codec.http.HttpHeaderNames;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.stream.StreamObserver;
 import org.apache.dubbo.remoting.TimeoutException;
@@ -26,8 +27,6 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 
-import io.netty.handler.codec.http.HttpHeaderNames;
-
 import java.util.Map;
 import java.util.concurrent.CompletionStage;
 import java.util.function.BiConsumer;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/service/TriHealthImpl.java
Patch:
@@ -20,7 +20,6 @@
 import grpc.health.v1.Health;
 import grpc.health.v1.HealthCheckRequest;
 import grpc.health.v1.HealthCheckResponse;
-
 import org.apache.dubbo.common.stream.StreamObserver;
 import org.apache.dubbo.rpc.RpcException;
 

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/Hessian2ObjectInput.java
Patch:
@@ -16,12 +16,11 @@
  */
 package org.apache.dubbo.common.serialize.hessian2;
 
+import com.alibaba.com.caucho.hessian.io.Hessian2Input;
 import org.apache.dubbo.common.serialize.Cleanable;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer;
 
-import com.alibaba.com.caucho.hessian.io.Hessian2Input;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.Type;

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/Hessian2ObjectOutput.java
Patch:
@@ -16,12 +16,11 @@
  */
 package org.apache.dubbo.common.serialize.hessian2;
 
+import com.alibaba.com.caucho.hessian.io.Hessian2Output;
 import org.apache.dubbo.common.serialize.Cleanable;
 import org.apache.dubbo.common.serialize.ObjectOutput;
 import org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer;
 
-import com.alibaba.com.caucho.hessian.io.Hessian2Output;
-
 import java.io.IOException;
 import java.io.OutputStream;
 

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ModuleModel.java
Patch:
@@ -64,7 +64,7 @@ protected void initialize() {
     }
 
     @Override
-    public void destroy() {
+    public void onDestroy() {
         if (serviceRepository != null) {
             List<ConsumerModel> consumerModels = serviceRepository.getReferredServices();
 
@@ -97,9 +97,8 @@ public void destroy() {
             serviceRepository = null;
         }
 
-        // TODO destroy module resources
+        notifyDestroy();
         applicationModel.removeModule(this);
-        super.destroy();
     }
 
     public ApplicationModel getApplicationModel() {

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/CacheableFallbackRegistryTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.URLStrParser;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeAll;
@@ -40,6 +41,7 @@ public class CacheableFallbackRegistryTest {
     static void setProperty() {
         System.setProperty("dubbo.application.url.cache.task.interval", "0");
         System.setProperty("dubbo.application.url.cache.clear.waiting", "0");
+        FrameworkModel.destroyAll();
     }
 
     @BeforeEach

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMappingTest.java
Patch:
@@ -60,7 +60,7 @@ public void setUp() {
         applicationModel = new ApplicationModel(FrameworkModel.defaultModel());
         configManager = mock(ConfigManager.class);
         metadataReport = mock(MetadataReport.class);
-        mapping = new MetadataServiceNameMapping(ApplicationModel.defaultModel());
+        mapping = new MetadataServiceNameMapping(applicationModel);
         mapping.setApplicationModel(applicationModel);
         url = URL.valueOf("dubbo://127.0.0.1:20880/TestService?version=1.0.0");
     }
@@ -72,7 +72,7 @@ public void teardown() {
 
     @Test
     public void testMap() {
-        ApplicationModel mockedApplicationModel = spy(ApplicationModel.defaultModel());
+        ApplicationModel mockedApplicationModel = spy(applicationModel);
 
         when(configManager.getMetadataConfigs()).thenReturn(Collections.emptyList());
         Mockito.when(mockedApplicationModel.getApplicationConfigManager()).thenReturn(configManager);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/store/InMemoryMetadataServiceTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.metadata.definition.model.ServiceDefinition;
 import org.apache.dubbo.registry.MockLogger;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
@@ -53,6 +54,7 @@ public class InMemoryMetadataServiceTest {
 
     @BeforeAll
     public static void setUp() {
+        FrameworkModel.destroyAll();
         ApplicationConfig applicationConfig = new ApplicationConfig();
         applicationConfig.setName("demo-provider2");
         ApplicationModel.defaultModel().getApplicationConfigManager().setApplication(applicationConfig);

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/registrycenter/AbstractRegistryCenter.java
Patch:
@@ -58,7 +58,7 @@ abstract class AbstractRegistryCenter implements RegistryCenter {
     private static final int DEFAULT_TICK_TIME = 5 * 1000;
 
     /**
-     * The default value is 60.
+     * The default value is 200.
      */
     private static final int DEFAULT_MAX_CLIENT_CNXNS = 200;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryDirectory.java
Patch:
@@ -369,7 +369,7 @@ protected void destroyAllInvokers() {
         if (localUrlInvokerMap != null) {
             for (Invoker<T> invoker : new ArrayList<>(localUrlInvokerMap.values())) {
                 try {
-                    invoker.destroy();
+                    invoker.destroyAll();
                 } catch (Throwable t) {
                     logger.warn("Failed to destroy service " + serviceKey + " to provider " + invoker.getUrl(), t);
                 }
@@ -402,7 +402,7 @@ private void destroyUnusedInvokers(Map<String, Invoker<T>> oldUrlInvokerMap, Map
             Invoker<T> invoker = entry.getValue();
             if (invoker != null) {
                 try {
-                    invoker.destroy();
+                    invoker.destroyAll();
                     if (logger.isDebugEnabled()) {
                         logger.debug("destroy invoker[" + invoker.getUrl() + "] success. ");
                     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -465,7 +465,7 @@ protected void destroyAllInvokers() {
         if (localUrlInvokerMap != null) {
             for (Invoker<T> invoker : new ArrayList<>(localUrlInvokerMap.values())) {
                 try {
-                    invoker.destroy();
+                    invoker.destroyAll();
                 } catch (Throwable t) {
                     logger.warn("Failed to destroy service " + serviceKey + " to provider " + invoker.getUrl(), t);
                 }
@@ -490,7 +490,7 @@ private void destroyUnusedInvokers(Map<URL, Invoker<T>> oldUrlInvokerMap, Map<UR
             Invoker<T> invoker = entry.getValue();
             if (invoker != null) {
                 try {
-                    invoker.destroy();
+                    invoker.destroyAll();
                     if (logger.isDebugEnabled()) {
                         logger.debug("destroy invoker[" + invoker.getUrl() + "] success. ");
                     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/SpringCloudMetadataServiceURLBuilder.java
Patch:
@@ -41,11 +41,11 @@ public class SpringCloudMetadataServiceURLBuilder implements MetadataServiceURLB
     @Override
     public List<URL> build(ServiceInstance serviceInstance) {
         Map<String, String> metadata = serviceInstance.getMetadata();
-        String dubboURLsJSON = metadata.get(METADATA_SERVICE_URLS_PROPERTY_NAME);
-        if (StringUtils.isBlank(dubboURLsJSON)) {
+        String dubboUrlsForJson = metadata.get(METADATA_SERVICE_URLS_PROPERTY_NAME);
+        if (StringUtils.isBlank(dubboUrlsForJson)) {
             return Collections.emptyList();
         }
-        List<String> urlStrings = JSON.parseArray(dubboURLsJSON, String.class);
+        List<String> urlStrings = JSON.parseArray(dubboUrlsForJson, String.class);
         return urlStrings.stream().map(URL::valueOf).collect(Collectors.toList());
     }
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.utils;
 
+import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
@@ -73,7 +74,7 @@ public class PojoUtils {
     private static final Logger logger = LoggerFactory.getLogger(PojoUtils.class);
     private static final ConcurrentMap<String, Method> NAME_METHODS_CACHE = new ConcurrentHashMap<String, Method>();
     private static final ConcurrentMap<Class<?>, ConcurrentMap<String, Field>> CLASS_FIELD_CACHE = new ConcurrentHashMap<Class<?>, ConcurrentMap<String, Field>>();
-    private static final boolean GENERIC_WITH_CLZ = Boolean.parseBoolean(ConfigUtils.getProperty(CommonConstants.GENERIC_WITH_CLZ_KEY, "true"));
+    private static final boolean GENERIC_WITH_CLZ = Boolean.parseBoolean(ConfigurationUtils.getProperty(CommonConstants.GENERIC_WITH_CLZ_KEY, "true"));
     private static final List<Class<?>> CLASS_CAN_BE_STRING = Arrays.asList(Byte.class, Short.class, Integer.class,
         Long.class, Float.class, Double.class, Boolean.class, Character.class);
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.config;
 
-import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.api.Greeting;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
@@ -390,7 +389,7 @@ public void testRefreshProperties() throws Exception {
 
             Properties properties = new Properties();
             properties.load(this.getClass().getResourceAsStream("/dubbo.properties"));
-            ConfigUtils.setProperties(properties);
+            ApplicationModel.defaultModel().getApplicationEnvironment().getPropertiesConfiguration().setProperties(properties);
 
             overrideConfig.refresh();
 
@@ -400,7 +399,6 @@ public void testRefreshProperties() throws Exception {
             //Assertions.assertEquals("properties", overrideConfig.getUseKeyAsProperty());
         } finally {
             ApplicationModel.defaultModel().getApplicationEnvironment().destroy();
-            ConfigUtils.setProperties(null);
         }
     }
 

File: dubbo-container/dubbo-container-api/src/main/java/org/apache/dubbo/container/Main.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ArrayUtils;
-import org.apache.dubbo.common.utils.ConfigUtils;
 
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -54,7 +53,7 @@ public class Main {
     public static void main(String[] args) {
         try {
             if (ArrayUtils.isEmpty(args)) {
-                String config = ConfigUtils.getProperty(CONTAINER_KEY, LOADER.getDefaultExtensionName());
+                String config = System.getProperty(CONTAINER_KEY, LOADER.getDefaultExtensionName());
                 args = COMMA_SPLIT_PATTERN.split(config);
             }
 

File: dubbo-container/dubbo-container-spring/src/main/java/org/apache/dubbo/container/spring/SpringContainer.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.container.Container;
 
@@ -42,7 +41,7 @@ public static ClassPathXmlApplicationContext getContext() {
 
     @Override
     public void start() {
-        String configPath = ConfigUtils.getProperty(SPRING_CONFIG);
+        String configPath = System.getProperty(SPRING_CONFIG);
         if (StringUtils.isEmpty(configPath)) {
             configPath = DEFAULT_SPRING_CONFIG;
         }

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.Version;
+import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.Constants;
@@ -118,9 +118,9 @@ protected void initChannel(SocketChannel ch) throws Exception {
                         .addLast("client-idle-handler", new IdleStateHandler(heartbeatInterval, 0, 0, MILLISECONDS))
                         .addLast("handler", nettyClientHandler);
 
-                String socksProxyHost = ConfigUtils.getProperty(SOCKS_PROXY_HOST);
+                String socksProxyHost = ConfigurationUtils.getProperty(getUrl().getOrDefaultApplicationModel(), SOCKS_PROXY_HOST);
                 if(socksProxyHost != null) {
-                    int socksProxyPort = Integer.parseInt(ConfigUtils.getProperty(SOCKS_PROXY_PORT, DEFAULT_SOCKS_PROXY_PORT));
+                    int socksProxyPort = Integer.parseInt(ConfigurationUtils.getProperty(getUrl().getOrDefaultApplicationModel(), SOCKS_PROXY_PORT, DEFAULT_SOCKS_PROXY_PORT));
                     Socks5ProxyHandler socks5ProxyHandler = new Socks5ProxyHandler(new InetSocketAddress(socksProxyHost, socksProxyPort));
                     ch.pipeline().addFirst(socks5ProxyHandler);
                 }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.common.serialize.support.SerializationOptimizer;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
-import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.remoting.Channel;
@@ -435,7 +434,7 @@ private ExchangeClient[] getClients(URL url) {
              * The xml configuration should have a higher priority than properties.
              */
             String shareConnectionsStr = url.getParameter(SHARE_CONNECTIONS_KEY, (String) null);
-            connections = Integer.parseInt(StringUtils.isBlank(shareConnectionsStr) ? ConfigUtils.getProperty(SHARE_CONNECTIONS_KEY,
+            connections = Integer.parseInt(StringUtils.isBlank(shareConnectionsStr) ? ConfigurationUtils.getProperty(url.getOrDefaultApplicationModel(), SHARE_CONNECTIONS_KEY,
                     DEFAULT_SHARE_CONNECTIONS) : shareConnectionsStr);
             shareClients = getSharedClient(url, connections);
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Configurator.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.cluster;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.utils.CollectionUtils;
 
 import java.util.ArrayList;
@@ -74,7 +73,7 @@ static Optional<List<Configurator>> toConfigurators(List<URL> urls) {
             return Optional.empty();
         }
 
-        ConfiguratorFactory configuratorFactory = ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)
+        ConfiguratorFactory configuratorFactory = urls.get(0).getOrDefaultApplicationModel().getExtensionLoader(ConfiguratorFactory.class)
                 .getAdaptiveExtension();
 
         List<Configurator> configurators = new ArrayList<>(urls.size());

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/AbstractRouter.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.cluster.router;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.rpc.cluster.Router;
 import org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository;
 
@@ -29,7 +28,7 @@ public abstract class AbstractRouter implements Router {
     private GovernanceRuleRepository ruleRepository;
 
     public AbstractRouter(URL url) {
-        this.ruleRepository = ExtensionLoader.getExtensionLoader(GovernanceRuleRepository.class).getDefaultExtension();
+        this.ruleRepository = url.getOrDefaultApplicationModel().getExtensionLoader(GovernanceRuleRepository.class).getDefaultExtension();
         this.url = url;
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/LoggerFactory.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.dubbo.common.logger;
 
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.logger.jcl.JclLoggerAdapter;
 import org.apache.dubbo.common.logger.jdk.JdkLoggerAdapter;
 import org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter;
 import org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter;
 import org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter;
 import org.apache.dubbo.common.logger.support.FailsafeLogger;
+import org.apache.dubbo.rpc.model.FrameworkModel;
 
 import java.io.File;
 import java.util.Arrays;
@@ -79,9 +79,9 @@ public class LoggerFactory {
     private LoggerFactory() {
     }
 
-    public static void setLoggerAdapter(String loggerAdapter) {
+    public static void setLoggerAdapter(FrameworkModel frameworkModel, String loggerAdapter) {
         if (loggerAdapter != null && loggerAdapter.length() > 0) {
-            setLoggerAdapter(ExtensionLoader.getExtensionLoader(LoggerAdapter.class).getExtension(loggerAdapter));
+            setLoggerAdapter(frameworkModel.getExtensionLoader(LoggerAdapter.class).getExtension(loggerAdapter));
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -331,7 +331,7 @@ public String getLogger() {
 
     public void setLogger(String logger) {
         this.logger = logger;
-        LoggerFactory.setLoggerAdapter(logger);
+        LoggerFactory.setLoggerAdapter(getApplicationModel().getFrameworkModel(), logger);
     }
 
     @Parameter(key = DUMP_DIRECTORY)

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -233,7 +233,9 @@ public void setInterface(Class<?> interfaceClass) {
             throw new IllegalStateException("The interface class " + interfaceClass + " is not a interface!");
         }
         setInterface(interfaceClass == null ? null : interfaceClass.getName());
-        setInterfaceClassLoader(interfaceClass == null ? null : interfaceClass.getClassLoader());
+        if (getInterfaceClassLoader() == null) {
+            setInterfaceClassLoader(interfaceClass == null ? null : interfaceClass.getClassLoader());
+        }
     }
 
     public String getClient() {

File: dubbo-common/src/main/java/org/apache/dubbo/config/ServiceConfigBase.java
Patch:
@@ -319,7 +319,9 @@ public void setInterface(Class<?> interfaceClass) {
         }
         this.interfaceClass = interfaceClass;
         setInterface(interfaceClass == null ? null : interfaceClass.getName());
-        setInterfaceClassLoader(interfaceClass == null ? null : interfaceClass.getClassLoader());
+        if (getInterfaceClassLoader() == null) {
+            setInterfaceClassLoader(interfaceClass == null ? null : interfaceClass.getClassLoader());
+        }
     }
 
     public T getRef() {

File: dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/AdaptiveCompilerTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.common.compiler.support;
 
+import org.apache.dubbo.rpc.model.FrameworkModel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -25,6 +27,7 @@ public class AdaptiveCompilerTest extends JavaCodeTest {
     public void testAvailableCompiler() throws Exception {
         AdaptiveCompiler.setDefaultCompiler("jdk");
         AdaptiveCompiler compiler = new AdaptiveCompiler();
+        compiler.setFrameworkModel(FrameworkModel.defaultModel());
         Class<?> clazz = compiler.compile(getSimpleCode(), AdaptiveCompiler.class.getClassLoader());
         HelloService helloService = (HelloService) clazz.newInstance();
         Assertions.assertEquals("Hello world!", helloService.sayHello());

File: dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerFactoryTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.common.logger;
 
+import org.apache.dubbo.rpc.model.FrameworkModel;
+
 import org.junit.jupiter.api.Test;
 
 import java.io.File;
@@ -35,7 +37,7 @@ public void testLoggerLevel() {
 
     @Test
     public void testGetLogFile() {
-        LoggerFactory.setLoggerAdapter("slf4j");
+        LoggerFactory.setLoggerAdapter(FrameworkModel.defaultModel(), "slf4j");
         File file = LoggerFactory.getFile();
 
         assertThat(file, is(nullValue()));

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java
Patch:
@@ -192,19 +192,19 @@ public void testAppendAttributes1() throws Exception {
 
     @Test
     public void checkExtension() throws Exception {
-        Assertions.assertThrows(IllegalStateException.class, () -> ConfigValidationUtils.checkExtension(Greeting.class, "hello", "world"));
+        Assertions.assertThrows(IllegalStateException.class, () -> ConfigValidationUtils.checkExtension(ApplicationModel.defaultModel(), Greeting.class, "hello", "world"));
     }
 
     @Test
     public void checkMultiExtension1() throws Exception {
         Assertions.assertThrows(IllegalStateException.class,
-                () -> ConfigValidationUtils.checkMultiExtension(Greeting.class, "hello", "default,world"));
+                () -> ConfigValidationUtils.checkMultiExtension(ApplicationModel.defaultModel(), Greeting.class, "hello", "default,world"));
     }
 
     @Test
     public void checkMultiExtension2() throws Exception {
         Assertions.assertThrows(IllegalStateException.class,
-                () -> ConfigValidationUtils.checkMultiExtension(Greeting.class, "hello", "default,-world"));
+                () -> ConfigValidationUtils.checkMultiExtension(ApplicationModel.defaultModel(), Greeting.class, "hello", "default,-world"));
     }
 
     @Test

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataInfo.java
Patch:
@@ -228,7 +228,6 @@ public String toString() {
     }
 
     public static class ServiceInfo implements Serializable {
-        private static ExtensionLoader<MetadataParamsFilter> loader = ExtensionLoader.getExtensionLoader(MetadataParamsFilter.class);
         private String name;
         private String group;
         private String version;
@@ -250,6 +249,7 @@ public static class ServiceInfo implements Serializable {
         private transient String matchKey;
 
         private transient URL url;
+        private transient ExtensionLoader<MetadataParamsFilter> loader;
 
         private final static String[] KEYS_TO_REMOVE = {MONITOR_KEY, BIND_IP_KEY, BIND_PORT_KEY, QOS_ENABLE,
             QOS_HOST, QOS_PORT, ACCEPT_FOREIGN_IP, VALIDATION_KEY, INTERFACES, PID_KEY, TIMESTAMP_KEY};
@@ -258,7 +258,7 @@ public ServiceInfo() {}
 
         public ServiceInfo(URL url) {
             this(url.getServiceInterface(), url.getGroup(), url.getVersion(), url.getProtocol(), url.getPath(), null);
-
+            this.loader = url.getOrDefaultApplicationModel().getExtensionLoader(MetadataParamsFilter.class);
             this.url = url;
             Map<String, String> params = new HashMap<>();
             List<MetadataParamsFilter> filters = loader.getActivateExtension(url, "params-filter");

File: dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/filter/ConsumerSignFilterTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.Test;
 
@@ -41,7 +42,7 @@ void testAuthDisabled() {
         Invoker invoker = mock(Invoker.class);
         Invocation invocation = mock(Invocation.class);
         when(invoker.getUrl()).thenReturn(url);
-        ConsumerSignFilter consumerSignFilter = new ConsumerSignFilter();
+        ConsumerSignFilter consumerSignFilter = new ConsumerSignFilter(ApplicationModel.defaultModel());
         consumerSignFilter.invoke(invoker, invocation);
         verify(invocation, never()).setAttachment(eq(Constants.REQUEST_SIGNATURE_KEY), anyString());
     }
@@ -56,7 +57,7 @@ void testAuthEnabled() {
         Invoker invoker = mock(Invoker.class);
         Invocation invocation = mock(Invocation.class);
         when(invoker.getUrl()).thenReturn(url);
-        ConsumerSignFilter consumerSignFilter = new ConsumerSignFilter();
+        ConsumerSignFilter consumerSignFilter = new ConsumerSignFilter(ApplicationModel.defaultModel());
         consumerSignFilter.invoke(invoker, invocation);
         verify(invocation, times(1)).setAttachment(eq(Constants.REQUEST_SIGNATURE_KEY), anyString());
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryFactoryWrapper.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dubbo.registry;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 
 import java.util.Collections;
 
@@ -32,7 +31,7 @@ public RegistryFactoryWrapper(RegistryFactory registryFactory) {
     @Override
     public Registry getRegistry(URL url) {
         return new ListenerRegistryWrapper(registryFactory.getRegistry(url),
-                Collections.unmodifiableList(ExtensionLoader.getExtensionLoader(RegistryServiceListener.class)
+                Collections.unmodifiableList(url.getOrDefaultApplicationModel().getExtensionLoader(RegistryServiceListener.class)
                         .getActivateExtension(url, "registry.listeners")));
     }
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/DefaultServiceDiscoveryFactory.java
Patch:
@@ -20,8 +20,6 @@
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.extension.SPI;
 
-import static org.apache.dubbo.common.extension.ExtensionLoader.getExtensionLoader;
-
 /**
  * The default {@link SPI} implementation of {@link ServiceDiscoveryFactory} to {@link #getServiceDiscovery(URL) get the
  * instance of ServiceDiscovery} via the {@link URL#getProtocol() protocol} from the {@link URL} that will connect
@@ -42,7 +40,7 @@ public class DefaultServiceDiscoveryFactory extends AbstractServiceDiscoveryFact
     @Override
     protected ServiceDiscovery createDiscovery(URL registryURL) {
         String protocol = registryURL.getProtocol();
-        ExtensionLoader<ServiceDiscovery> loader = getExtensionLoader(ServiceDiscovery.class);
+        ExtensionLoader<ServiceDiscovery> loader = registryURL.getOrDefaultApplicationModel().getExtensionLoader(ServiceDiscovery.class);
         return loader.getExtension(protocol);
     }
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/DefaultServiceInstance.java
Patch:
@@ -212,6 +212,7 @@ public Map<String, String> getAllParams() {
     }
 
     @Override
+    @Transient
     public Map<String, Object> getAttributes() {
         return attributes;
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryFactory.java
Patch:
@@ -20,8 +20,6 @@
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.extension.SPI;
 
-import static org.apache.dubbo.common.extension.ExtensionLoader.getExtensionLoader;
-
 /**
  * The factory to create {@link ServiceDiscovery}
  *
@@ -47,7 +45,7 @@ public interface ServiceDiscoveryFactory {
      */
     static ServiceDiscoveryFactory getExtension(URL registryURL) {
         String protocol = registryURL.getProtocol();
-        ExtensionLoader<ServiceDiscoveryFactory> loader = getExtensionLoader(ServiceDiscoveryFactory.class);
+        ExtensionLoader<ServiceDiscoveryFactory> loader = registryURL.getOrDefaultApplicationModel().getExtensionLoader(ServiceDiscoveryFactory.class);
         return loader.getOrDefaultExtension(protocol);
     }
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -115,7 +115,7 @@ protected ServiceDiscovery createServiceDiscovery(URL registryURL) {
     }
 
     private List<SubscribedURLsSynthesizer> initSubscribedURLsSynthesizers() {
-        ExtensionLoader<SubscribedURLsSynthesizer> loader = ExtensionLoader.getExtensionLoader(SubscribedURLsSynthesizer.class);
+        ExtensionLoader<SubscribedURLsSynthesizer> loader = getUrl().getOrDefaultApplicationModel().getExtensionLoader(SubscribedURLsSynthesizer.class);
         return Collections.unmodifiableList(new ArrayList<>(loader.getSupportedExtensionInstances()));
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -55,7 +55,7 @@ public static void publishServiceDefinition(URL url) {
         WritableMetadataService.getDefaultExtension(url.getScopeModel()).publishServiceDefinition(url);
         // send to remote
         if (REMOTE_METADATA_STORAGE_TYPE.equalsIgnoreCase(url.getParameter(METADATA_KEY))) {
-            getRemoteMetadataService(ScopeModelUtil.getApplicationModel(url.getScopeModel())).publishServiceDefinition(url);
+            getRemoteMetadataService(url.getOrDefaultApplicationModel()).publishServiceDefinition(url);
         }
     }
 
@@ -79,8 +79,8 @@ public static synchronized void destroyMetadataServiceProxy(ServiceInstance inst
 
     private static MetadataService referProxy(String key, ServiceInstance instance) {
         MetadataServiceURLBuilder builder = null;
-        ExtensionLoader<MetadataServiceURLBuilder> loader
-                = ExtensionLoader.getExtensionLoader(MetadataServiceURLBuilder.class);
+        ExtensionLoader<MetadataServiceURLBuilder> loader = instance.getOrDefaultApplicationModel()
+            .getExtensionLoader(MetadataServiceURLBuilder.class);
 
         Map<String, String> metadata = instance.getMetadata();
         // METADATA_SERVICE_URLS_PROPERTY_NAME is a unique key exists only on instances of spring-cloud-alibaba.

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtils.java
Patch:
@@ -284,7 +284,7 @@ public static void refreshMetadataAndInstance(ServiceInstance serviceInstance) {
 
     public static void customizeInstance(ServiceInstance instance) {
         ExtensionLoader<ServiceInstanceCustomizer> loader =
-                ExtensionLoader.getExtensionLoader(ServiceInstanceCustomizer.class);
+                instance.getOrDefaultApplicationModel().getExtensionLoader(ServiceInstanceCustomizer.class);
         // FIXME, sort customizer before apply
         loader.getSupportedExtensionInstances().forEach(customizer -> {
             // customizes

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -472,11 +472,11 @@ public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {
         String group = qs.get(GROUP_KEY);
         if (group != null && group.length() > 0) {
             if ((COMMA_SPLIT_PATTERN.split(group)).length > 1 || "*".equals(group)) {
-                return doRefer(Cluster.getCluster(MergeableCluster.NAME), registry, type, url, qs);
+                return doRefer(Cluster.getCluster(url.getScopeModel(), MergeableCluster.NAME), registry, type, url, qs);
             }
         }
 
-        Cluster cluster = Cluster.getCluster(qs.get(CLUSTER_KEY));
+        Cluster cluster = Cluster.getCluster(url.getScopeModel(), qs.get(CLUSTER_KEY));
         return doRefer(cluster, registry, type, url, qs);
     }
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMappingTest.java
Patch:
@@ -60,7 +60,7 @@ public void setUp() {
         applicationModel = new ApplicationModel(FrameworkModel.defaultModel());
         configManager = mock(ConfigManager.class);
         metadataReport = mock(MetadataReport.class);
-        mapping = new MetadataServiceNameMapping();
+        mapping = new MetadataServiceNameMapping(ApplicationModel.defaultModel());
         mapping.setApplicationModel(applicationModel);
         url = URL.valueOf("dubbo://127.0.0.1:20880/TestService?version=1.0.0");
     }

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/model/MigrationRuleTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.metadata.ServiceNameMapping;
 import org.apache.dubbo.metadata.WritableMetadataService;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-import org.apache.dubbo.rpc.model.ModuleModel;
 
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentMatchers;
@@ -76,7 +75,7 @@ public void test_parse() {
         assertEquals(false, migrationRule.getForce());
 
         URL url = Mockito.mock(URL.class);
-        ModuleModel defaultModule = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());
+        ApplicationModel defaultModule = Mockito.spy(ApplicationModel.defaultModel());
         Mockito.when(defaultModule.getDefaultExtension(ServiceNameMapping.class)).thenReturn(mapping);
 
         Mockito.when(url.getScopeModel()).thenReturn(defaultModule);

File: dubbo-registry/dubbo-registry-dns/src/test/java/org/apache/dubbo/registry/dns/DNSServiceDiscoveryTest.java
Patch:
@@ -154,8 +154,8 @@ public void testConsumer() throws Exception {
         serviceInstances = dnsServiceDiscovery.getInstances("Test.Service.");
         assertEquals("c", serviceInstances.get(0).getMetadata("a"));
 
-        dnsServiceDiscovery.addServiceInstancesChangedListener(changedListener);
         ArgumentCaptor<ServiceInstancesChangedEvent> argument = ArgumentCaptor.forClass(ServiceInstancesChangedEvent.class);
+        dnsServiceDiscovery.addServiceInstancesChangedListener(changedListener);
         Thread.sleep(1000);
         Mockito.verify(changedListener, Mockito.timeout(1000)).onEvent(argument.capture());
         assertEquals("c", argument.getValue().getServiceInstances().get(0).getMetadata("a"));

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java
Patch:
@@ -609,7 +609,7 @@ private class RegistryChildListenerImpl implements EventListener {
         private RegistryNotifier notifier;
 
         public RegistryChildListenerImpl(String serviceName, URL consumerUrl, NotifyListener listener) {
-            notifier = new RegistryNotifier(NacosRegistry.this.getDelay()) {
+            notifier = new RegistryNotifier(getUrl(), NacosRegistry.this.getDelay()) {
                 @Override
                 protected void doNotify(Object rawAddresses) {
                     List<Instance> instances = (List<Instance>) rawAddresses;

File: dubbo-registry/dubbo-registry-xds/src/main/java/org/apache/dubbo/registry/xds/util/XdsChannel.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.registry.xds.util;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.registry.xds.XdsCertificateSigner;
@@ -45,7 +44,7 @@ public class XdsChannel {
     protected XdsChannel(URL url) {
         ManagedChannel channel1 = null;
         try {
-            XdsCertificateSigner signer = ExtensionLoader.getExtensionLoader(XdsCertificateSigner.class).getExtension(url.getParameter("Signer","istio"));
+            XdsCertificateSigner signer = url.getOrDefaultApplicationModel().getExtensionLoader(XdsCertificateSigner.class).getExtension(url.getParameter("Signer","istio"));
             XdsCertificateSigner.CertPair certPair = signer.request(url);
             SslContext context = GrpcSslContexts.forClient()
                     .trustManager(InsecureTrustManagerFactory.INSTANCE)

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistry.java
Patch:
@@ -301,7 +301,7 @@ private class RegistryChildListenerImpl implements ChildListener {
 
         public RegistryChildListenerImpl(URL consumerUrl, String path, NotifyListener listener, CountDownLatch latch) {
             this.latch = latch;
-            notifier = new RegistryNotifier(ZookeeperRegistry.this.getDelay()) {
+            notifier = new RegistryNotifier(getUrl(), ZookeeperRegistry.this.getDelay()) {
                 @Override
                 public void notify(Object rawAddresses) {
                     long delayTime = getDelayTime();

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryChangeWatcher.java
Patch:
@@ -65,7 +65,7 @@ public ZookeeperServiceDiscoveryChangeWatcher(ZookeeperServiceDiscovery zookeepe
         this.serviceName = serviceName;
         this.path = path;
         this.latch = latch;
-        this.notifier = new RegistryNotifier(zookeeperServiceDiscovery.getDelay(),
+        this.notifier = new RegistryNotifier(zookeeperServiceDiscovery.getUrl(), zookeeperServiceDiscovery.getDelay(),
             ScopeModelUtil.getApplicationModel(zookeeperServiceDiscovery.getUrl().getScopeModel()).getApplicationExecutorRepository().getServiceDiscoveryAddressNotificationExecutor()) {
             @Override
             protected void doNotify(Object rawAddresses) {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/SslContexts.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.config.SslConfig;
 import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.rpc.model.ScopeModelUtil;
 
 import io.netty.handler.ssl.ClientAuth;
 import io.netty.handler.ssl.OpenSsl;
@@ -39,7 +38,7 @@ public class SslContexts {
     private static final Logger logger = LoggerFactory.getLogger(SslContexts.class);
 
     public static SslContext buildServerSslContext(URL url) {
-        ConfigManager globalConfigManager = ScopeModelUtil.getApplicationModel(url.getScopeModel()).getApplicationConfigManager();
+        ConfigManager globalConfigManager = url.getOrDefaultApplicationModel().getApplicationConfigManager();
         SslConfig sslConfig = globalConfigManager.getSsl().orElseThrow(() -> new IllegalStateException("Ssl enabled, but no ssl cert information provided!"));
 
         SslContextBuilder sslClientContextBuilder;
@@ -68,7 +67,7 @@ public static SslContext buildServerSslContext(URL url) {
     }
 
     public static SslContext buildClientSslContext(URL url) {
-        ConfigManager globalConfigManager = ScopeModelUtil.getApplicationModel(url.getScopeModel()).getApplicationConfigManager();
+        ConfigManager globalConfigManager = url.getOrDefaultApplicationModel().getApplicationConfigManager();
         SslConfig sslConfig = globalConfigManager.getSsl().orElseThrow(() -> new IllegalStateException("Ssl enabled, but no ssl cert information provided!"));
 
         SslContextBuilder builder = SslContextBuilder.forClient();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.Version;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
@@ -49,10 +48,11 @@ public abstract class AbstractClient extends AbstractEndpoint implements Client
     private final Lock connectLock = new ReentrantLock();
     private final boolean needReconnect;
     protected volatile ExecutorService executor;
-    private ExecutorRepository executorRepository = ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();
+    private ExecutorRepository executorRepository;
 
     public AbstractClient(URL url, ChannelHandler handler) throws RemotingException {
         super(url, handler);
+        executorRepository = url.getOrDefaultApplicationModel().getExtensionLoader(ExecutorRepository.class).getDefaultExtension();
         // set default needReconnect true when channel is not connected
         needReconnect = url.getParameter(Constants.SEND_RECONNECT_KEY, true);
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractServer.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.remoting.transport;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
@@ -50,10 +49,11 @@ public abstract class AbstractServer extends AbstractEndpoint implements Remotin
     private InetSocketAddress bindAddress;
     private int accepts;
 
-    private ExecutorRepository executorRepository = ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();
+    private ExecutorRepository executorRepository;
 
     public AbstractServer(URL url, ChannelHandler handler) throws RemotingException {
         super(url, handler);
+        executorRepository = url.getOrDefaultApplicationModel().getExtensionLoader(ExecutorRepository.class).getDefaultExtension();
         localAddress = getUrl().toInetSocketAddress();
 
         String bindIp = getUrl().getParameter(Constants.BIND_IP_KEY, getUrl().getHost());

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/CodecSupport.java
Patch:
@@ -79,7 +79,7 @@ public static Byte getIDByName(String name) {
     }
 
     public static Serialization getSerialization(URL url) {
-        return ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(
+        return url.getOrDefaultFrameworkModel().getExtensionLoader(Serialization.class).getExtension(
                 url.getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION));
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/ChannelHandlers.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.remoting.transport.dispatcher;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.Dispatcher;
 import org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler;
@@ -43,7 +42,7 @@ static void setTestingChannelHandlers(ChannelHandlers instance) {
     }
 
     protected ChannelHandler wrapInternal(ChannelHandler handler, URL url) {
-        return new MultiMessageHandler(new HeartbeatHandler(ExtensionLoader.getExtensionLoader(Dispatcher.class)
+        return new MultiMessageHandler(new HeartbeatHandler(url.getOrDefaultFrameworkModel().getExtensionLoader(Dispatcher.class)
                 .getAdaptiveExtension().dispatch(handler, url)));
     }
 }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java
Patch:
@@ -211,7 +211,7 @@ private void addInvocationAttachments(RpcInvocation invocation) {
         }
 
         // server context attachment
-        ExtensionLoader<PenetrateAttachmentSelector> selectorExtensionLoader = ExtensionLoader.getExtensionLoader(PenetrateAttachmentSelector.class);
+        ExtensionLoader<PenetrateAttachmentSelector> selectorExtensionLoader = invocation.getModuleModel().getExtensionLoader(PenetrateAttachmentSelector.class);
         Set<String> supportedSelectors = selectorExtensionLoader.getSupportedExtensions();
         if (CollectionUtils.isNotEmpty(supportedSelectors)) {
             // custom context attachment
@@ -293,7 +293,7 @@ private void waitForResultIfSync(AsyncRpcResult asyncResult, RpcInvocation invoc
     // -- Protected api
 
     protected ExecutorService getCallbackExecutor(URL url, Invocation inv) {
-        ExecutorService sharedExecutor = ExtensionLoader.getExtensionLoader(ExecutorRepository.class)
+        ExecutorService sharedExecutor = url.getOrDefaultApplicationModel().getExtensionLoader(ExecutorRepository.class)
                 .getDefaultExtension()
                 .getExecutor(url);
         if (InvokeMode.SYNC == RpcUtils.getInvokeMode(getUrl(), inv)) {

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
Patch:
@@ -37,7 +37,6 @@
 import org.apache.dubbo.rpc.model.FrameworkModel;
 import org.apache.dubbo.rpc.model.ModuleModel;
 import org.apache.dubbo.rpc.model.ProviderModel;
-import org.apache.dubbo.rpc.model.ScopeModelUtil;
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
 import org.apache.dubbo.rpc.model.ServiceMetadata;
 
@@ -199,7 +198,7 @@ private Object referOrDestroyCallbackService(Channel channel, URL url, Class<?>
                 URL referurl = URL.valueOf("callback://" + url.getAddress() + "/" + clazz.getName() + "?" + INTERFACE_KEY + "=" + clazz.getName());
                 referurl = referurl.addParametersIfAbsent(url.getParameters()).removeParameter(METHODS_KEY);
                 if (!isInstancesOverLimit(channel, referurl, clazz.getName(), instid, true)) {
-                    ScopeModelUtil.getApplicationModel(url.getScopeModel()).getDefaultModule().getServiceRepository().registerService(clazz);
+                    url.getOrDefaultApplicationModel().getDefaultModule().getServiceRepository().registerService(clazz);
                     @SuppressWarnings("rawtypes")
                     Invoker<?> invoker = new ChannelWrappedInvoker(clazz, channel, referurl, String.valueOf(instid));
                     proxy = proxyFactory.getProxy(invoker);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodecSupport.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.protocol.dubbo;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.serialize.Serialization;
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.transport.CodecSupport;
@@ -34,7 +33,7 @@ public static Serialization getRequestSerialization(URL url, Invocation invocati
         if (serializationTypeObj != null) {
             return CodecSupport.getSerializationById((byte) serializationTypeObj);
         }
-        return ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(
+        return url.getOrDefaultFrameworkModel().getExtensionLoader(Serialization.class).getExtension(
                 url.getParameter(org.apache.dubbo.remoting.Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION));
     }
 
@@ -47,7 +46,7 @@ public static Serialization getResponseSerialization(URL url, AppResponse appRes
                 return CodecSupport.getSerializationById((byte) serializationTypeObj);
             }
         }
-        return ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(
+        return url.getOrDefaultFrameworkModel().getExtensionLoader(Serialization.class).getExtension(
                 url.getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION));
     }
 }

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmInvoker.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.protocol.injvm;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;
 import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.AsyncRpcResult;
@@ -48,12 +47,13 @@ public class InjvmInvoker<T> extends AbstractInvoker<T> {
 
     private final Map<String, Exporter<?>> exporterMap;
 
-    private final ExecutorRepository executorRepository = ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();
+    private final ExecutorRepository executorRepository;
 
     InjvmInvoker(Class<T> type, URL url, String key, Map<String, Exporter<?>> exporterMap) {
         super(type, url);
         this.key = key;
         this.exporterMap = exporterMap;
+        this.executorRepository = url.getOrDefaultApplicationModel().getExtensionLoader(ExecutorRepository.class).getDefaultExtension();
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractServerStream.java
Patch:
@@ -64,7 +64,7 @@ protected AbstractServerStream(URL url, Executor executor, ProviderModel provide
         super(url, executor);
         this.providerModel = providerModel;
         this.serialize(getUrl().getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION));
-        this.headerFilters = ExtensionLoader.getExtensionLoader(HeaderFilter.class).getActivateExtension(url, HEADER_FILTER_KEY);
+        this.headerFilters = url.getOrDefaultApplicationModel().getExtensionLoader(HeaderFilter.class).getActivateExtension(url, HEADER_FILTER_KEY);
     }
 
     private static Executor lookupExecutor(URL url, ProviderModel providerModel) {

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/DefaultMultipleSerialization.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dubbo.common.serialize;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.utils.ClassUtils;
 
 import java.io.IOException;
@@ -30,7 +29,7 @@ public class DefaultMultipleSerialization implements MultipleSerialization {
     @Override
     public void serialize(URL url, String serializeType, String clz, Object obj, OutputStream os) throws IOException {
         serializeType = convertHessian(serializeType);
-        final Serialization serialization = ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(serializeType);
+        final Serialization serialization = url.getOrDefaultFrameworkModel().getExtensionLoader(Serialization.class).getExtension(serializeType);
         final ObjectOutput serialize = serialization.serialize(null, os);
         serialize.writeObject(obj);
         serialize.flushBuffer();
@@ -39,7 +38,7 @@ public void serialize(URL url, String serializeType, String clz, Object obj, Out
     @Override
     public Object deserialize(URL url, String serializeType, String clz, InputStream os) throws IOException, ClassNotFoundException {
         serializeType = convertHessian(serializeType);
-        final Serialization serialization = ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(serializeType);
+        final Serialization serialization = url.getOrDefaultFrameworkModel().getExtensionLoader(Serialization.class).getExtension(serializeType);
         final Class<?> aClass = ClassUtils.forName(clz);
         final ObjectInput in = serialization.deserialize(null, os);
         return in.readObject(aClass);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/Connection.java
Patch:
@@ -113,7 +113,7 @@ protected void initChannel(SocketChannel ch) {
                 // TODO support IDLE
 //                int heartbeatInterval = UrlUtils.getHeartbeat(getUrl());
                 p.addLast(connectionHandler);
-                protocol.configClientPipeline(p, sslContext);
+                protocol.configClientPipeline(url, p, sslContext);
                 // TODO support Socks5
             }
         });

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/PortUnificationServer.java
Patch:
@@ -119,7 +119,7 @@ protected void initChannel(SocketChannel ch) throws Exception {
                         p.addLast("negotiation-ssl", new SslServerTlsHandler(getUrl()));
                     }
 
-                    final PortUnificationServerHandler puHandler = new PortUnificationServerHandler(protocols);
+                    final PortUnificationServerHandler puHandler = new PortUnificationServerHandler(url, protocols);
                     p.addLast("server-idle-handler", new IdleStateHandler(0, 0, idleTimeout, MILLISECONDS));
                     p.addLast("negotiation-protocol", puHandler);
                     channelGroup = puHandler.getChannels();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/WireProtocol.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.remoting.api;
 
+import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
@@ -27,9 +28,9 @@ public interface WireProtocol {
 
     ProtocolDetector detector();
 
-    void configServerPipeline(ChannelPipeline pipeline, SslContext sslContext);
+    void configServerPipeline(URL url, ChannelPipeline pipeline, SslContext sslContext);
 
-    void configClientPipeline(ChannelPipeline pipeline, SslContext sslContext);
+    void configClientPipeline(URL url, ChannelPipeline pipeline, SslContext sslContext);
 
     void close();
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleClientHandler.java
Patch:
@@ -75,7 +75,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
     private void writeRequest(ChannelHandlerContext ctx, final Request req, final ChannelPromise promise) {
         final RpcInvocation inv = (RpcInvocation) req.getData();
         final URL url = inv.getInvoker().getUrl();
-        ConsumerModel consumerModel = (ConsumerModel) url.getServiceModel();
+        ConsumerModel consumerModel = inv.getServiceModel() != null ? (ConsumerModel) inv.getServiceModel() : (ConsumerModel) url.getServiceModel();
 
         MethodDescriptor methodDescriptor = getTriMethodDescriptor(consumerModel,inv);
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -81,6 +81,7 @@ public TripleInvoker(Class<T> serviceType, URL url, Set<Invoker<?>> invokers) th
     protected Result doInvoke(final Invocation invocation) throws Throwable {
         RpcInvocation inv = (RpcInvocation) invocation;
         final String methodName = RpcUtils.getMethodName(invocation);
+        inv.setServiceModel(RpcContext.getServiceContext().getConsumerUrl().getServiceModel());
         inv.setAttachment(PATH_KEY, getUrl().getPath());
         inv.setAttachment(Constants.SERIALIZATION_KEY,
                 getUrl().getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION));

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcInvocation.java
Patch:
@@ -57,7 +57,9 @@ public class RpcInvocation implements Invocation, Serializable {
     private String protocolServiceKey;
 
     private ServiceModel serviceModel;
+
     private String methodName;
+
     private String serviceName;
 
     private transient Class<?>[] parameterTypes;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractServerStream.java
Patch:
@@ -154,8 +154,9 @@ protected Object[] deserializeRequest(byte[] data) {
                 }
                 if (getMethodDescriptor() == null) {
                     final String[] paramTypes = wrapper.getArgTypesList().toArray(new String[wrapper.getArgsCount()]);
-
+                    // wrapper mode the method can overload so maybe list
                     for (MethodDescriptor descriptor : getMethodDescriptors()) {
+                        // params type is array
                         if (Arrays.equals(descriptor.getCompatibleParamSignatures(), paramTypes)) {
                             method(descriptor);
                             break;

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ApplicationModel.java
Patch:
@@ -205,7 +205,7 @@ public void destroy() {
             serviceRepository.destroy();
             serviceRepository = null;
         }
-
+        super.destroy();
     }
 
     public FrameworkModel getFrameworkModel() {

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/FrameworkModel.java
Patch:
@@ -67,6 +67,7 @@ public void destroy() {
                 defaultInstance = null;
             }
         }
+        super.destroy();
     }
 
     public static FrameworkModel defaultModel() {

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ModuleModel.java
Patch:
@@ -39,6 +39,7 @@ public ModuleModel(ApplicationModel applicationModel) {
         initialize();
     }
 
+    @Override
     protected void initialize() {
         super.initialize();
         this.serviceRepository = new ModuleServiceRepository(this);
@@ -79,9 +80,9 @@ public void destroy() {
             serviceRepository = null;
         }
 
-        super.destroy();
         // TODO destroy module resources
         applicationModel.removeModule(this);
+        super.destroy();
     }
 
     public ApplicationModel getApplicationModel() {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -200,7 +200,7 @@ public void unexport() {
     public void init() {
         if (this.initialized.compareAndSet(false, true)) {
             if (this.bootstrap == null) {
-                this.bootstrap = DubboBootstrap.getInstance();
+                this.bootstrap = DubboBootstrap.getInstance(getScopeModel().getApplicationModel());
                 this.bootstrap.initialize();
             }
             this.bootstrap.service(this);

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
Patch:
@@ -801,7 +801,7 @@ public void testConstructWithReferenceAnnotation() throws NoSuchFieldException {
     public void testDifferentClassLoader() throws Exception {
         ApplicationConfig applicationConfig = new ApplicationConfig("TestApp");
         ApplicationModel applicationModel = new ApplicationModel(FrameworkModel.defaultModel());
-        applicationConfig.getConfigManager().setApplication(applicationConfig);
+        applicationModel.getApplicationConfigManager().setApplication(applicationConfig);
         ModuleModel moduleModel = new ModuleModel(applicationModel);
 
         DemoService demoService = new DemoServiceImpl();

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -389,7 +389,7 @@ public void testSelect_multiInvokers(String lbname) throws Exception {
         int min = 100, max = 500;
         Double d = (Math.random() * (max - min + 1) + min);
         int runs = d.intValue();
-        Assertions.assertTrue(runs > min);
+        Assertions.assertTrue(runs >= min);
         LoadBalance lb = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(lbname);
         initlistsize5();
         for (int i = 0; i < runs; i++) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcException.java
Patch:
@@ -26,7 +26,8 @@
  * @see org.apache.dubbo.rpc.Invoker#invoke(Invocation)
  * @since 1.0
  */
-public /**final**/ class RpcException extends RuntimeException {
+public /**final**/
+class RpcException extends RuntimeException {
 
     public static final int UNKNOWN_EXCEPTION = 0;
     public static final int NETWORK_EXCEPTION = 1;
@@ -39,6 +40,7 @@
     public static final int TIMEOUT_TERMINATE = 8;
     public static final int REGISTRY_EXCEPTION = 9;
     public static final int ROUTER_CACHE_NOT_BUILD = 10;
+    public static final int METHOD_NOT_FOUND = 11;
     private static final long serialVersionUID = 7815426752583648734L;
     /**
      * RpcException cannot be extended, use error code for exception type to keep compatibility

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ClientStream.java
Patch:
@@ -70,7 +70,7 @@ public void onComplete() {
                     if (GrpcStatus.Code.isOk(status.code.code)) {
                         getStreamSubscriber().onCompleted();
                     } else {
-                        getStreamSubscriber().onError(status.asException(getTrailers()));
+                        getStreamSubscriber().onError(status.asException());
                     }
                 });
             }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceInstance.java
Patch:
@@ -54,7 +54,7 @@ public interface ServiceInstance extends Serializable {
     String getAddress();
 
     /**
-     * The enable status of the registered service instance.
+     * The enabled status of the registered service instance.
      *
      * @return if <code>true</code>, indicates current instance is enabled, or disable, the client should remove this one.
      * The default value is <code>true</code>
@@ -66,7 +66,7 @@ default boolean isEnabled() {
     /**
      * The registered service instance is health or not.
      *
-     * @return if <code>true</code>, indicates current instance is enabled, or disable, the client may ignore this one.
+     * @return if <code>true</code>, indicates current instance is healthy, or unhealthy, the client may ignore this one.
      * The default value is <code>true</code>
      */
     default boolean isHealthy() {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/model/ConditionRouterRule.java
Patch:
@@ -22,6 +22,8 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
+import static org.apache.dubbo.rpc.cluster.Constants.CONDITIONS_KEY;
+
 /**
  *
  */
@@ -33,7 +35,7 @@ public static ConditionRouterRule parseFromMap(Map<String, Object> map) {
         ConditionRouterRule conditionRouterRule = new ConditionRouterRule();
         conditionRouterRule.parseFromMap0(map);
 
-        Object conditions = map.get("conditions");
+        Object conditions = map.get(CONDITIONS_KEY);
         if (conditions != null && List.class.isAssignableFrom(conditions.getClass())) {
             conditionRouterRule.setConditions(((List<Object>) conditions).stream()
                     .map(String::valueOf).collect(Collectors.toList()));

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagDynamicStateRouter.java
Patch:
@@ -121,7 +121,7 @@ public boolean isRuntime() {
 
     @Override
     public boolean isEnable() {
-        return true;
+        return tagRouterRule != null && tagRouterRule.isEnabled();
     }
 
     @Override
@@ -240,7 +240,7 @@ public <T> void notify(List<Invoker<T>> invokers) {
 
         synchronized (this) {
             if (!providerApplication.equals(application)) {
-                if (!StringUtils.isEmpty(application)) {
+                if (StringUtils.isNotEmpty(application)) {
                     ruleRepository.removeListener(application + RULE_SUFFIX, this);
                 }
                 String key = providerApplication + RULE_SUFFIX;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java
Patch:
@@ -241,7 +241,7 @@ public <T> void notify(List<Invoker<T>> invokers) {
 
         synchronized (this) {
             if (!providerApplication.equals(application)) {
-                if (!StringUtils.isEmpty(application)) {
+                if (StringUtils.isNotEmpty(application)) {
                     this.getRuleRepository().removeListener(application + RULE_SUFFIX, this);
                 }
                 String key = providerApplication + RULE_SUFFIX;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/model/TagRouterRule.java
Patch:
@@ -25,6 +25,8 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
+import static org.apache.dubbo.rpc.cluster.Constants.TAGS_KEY;
+
 /**
  * %YAML1.2
  * ---
@@ -51,7 +53,7 @@ public static TagRouterRule parseFromMap(Map<String, Object> map) {
         TagRouterRule tagRouterRule = new TagRouterRule();
         tagRouterRule.parseFromMap0(map);
 
-        Object tags = map.get("tags");
+        Object tags = map.get(TAGS_KEY);
         if (tags != null && List.class.isAssignableFrom(tags.getClass())) {
             tagRouterRule.setTags(((List<Map<String, Object>>) tags).stream()
                     .map(Tag::parseFromMap).collect(Collectors.toList()));

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/AbstractCluster.java
Patch:
@@ -40,11 +40,10 @@
 import static org.apache.dubbo.common.constants.CommonConstants.CLUSTER_INTERCEPTOR_COMPATIBLE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INVOCATION_INTERCEPTOR_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.REFERENCE_FILTER_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.REFERENCE_INTERCEPTOR_KEY;
 
 public abstract class AbstractCluster implements Cluster {
 
-    private <T> Invoker<T> buildClusterInterceptors(AbstractClusterInvoker<T> clusterInvoker, String key) {
+    private <T> Invoker<T> buildClusterInterceptors(AbstractClusterInvoker<T> clusterInvoker) {
 //        AbstractClusterInvoker<T> last = clusterInvoker;
         AbstractClusterInvoker<T> last = buildInterceptorInvoker(new ClusterFilterInvoker<>(clusterInvoker));
 
@@ -59,7 +58,7 @@ public <T> Invoker<T> join(Directory<T> directory) throws RpcException {
         if (directory instanceof StaticDirectory) {
             return doJoin(directory);
         }
-        return buildClusterInterceptors(doJoin(directory), directory.getUrl().getParameter(REFERENCE_INTERCEPTOR_KEY));
+        return buildClusterInterceptors(doJoin(directory));
     }
 
     private <T> AbstractClusterInvoker<T> buildInterceptorInvoker(AbstractClusterInvoker<T> invoker) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/model/MigrationRule.java
Patch:
@@ -37,6 +37,7 @@
 import static org.apache.dubbo.registry.Constants.MIGRATION_STEP_KEY;
 import static org.apache.dubbo.registry.Constants.MIGRATION_THRESHOLD_KEY;
 import static org.apache.dubbo.registry.client.migration.MigrationRuleHandler.DUBBO_SERVICEDISCOVERY_MIGRATION;
+import static org.apache.dubbo.rpc.cluster.Constants.FORCE_KEY;
 
 /**
  * # key = demo-consumer.migration
@@ -105,7 +106,7 @@ private static MigrationRule parseFromMap(Map<String, Object> map) {
             migrationRule.setDelay(Integer.valueOf(delay.toString()));
         }
 
-        Object force = map.get("force");
+        Object force = map.get(FORCE_KEY);
         if (force != null) {
             migrationRule.setForce(Boolean.valueOf(force.toString()));
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/model/SubMigrationRule.java
Patch:
@@ -18,6 +18,8 @@
 
 import java.util.Map;
 
+import static org.apache.dubbo.rpc.cluster.Constants.FORCE_KEY;
+
 public class SubMigrationRule {
     private String serviceKey;
     private MigrationStep step;
@@ -50,7 +52,7 @@ public static SubMigrationRule parseFromMap(Map<String, Object> map) {
             interfaceMigrationRule.setDelay(Integer.valueOf(delay.toString()));
         }
 
-        Object force = map.get("force");
+        Object force = map.get(FORCE_KEY);
         if (force != null) {
             interfaceMigrationRule.setForce(Boolean.valueOf(force.toString()));
         }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -386,7 +386,7 @@ public void testSelectAgainAndCheckAvailable() {
 
     public void testSelect_multiInvokers(String lbname) throws Exception {
 
-        int min = 1000, max = 5000;
+        int min = 100, max = 500;
         Double d = (Math.random() * (max - min + 1) + min);
         int runs = d.intValue();
         Assertions.assertTrue(runs > min);

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/registrycenter/AbstractRegistryCenter.java
Patch:
@@ -60,7 +60,7 @@ abstract class AbstractRegistryCenter implements RegistryCenter {
     /**
      * The default value is -1.
      */
-    private static final int DEFAULT_MAX_CLIENT_CNXNS = -1;
+    private static final int DEFAULT_MAX_CLIENT_CNXNS = 200;
 
     /**
      * The minimum session timeout.

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/reference/localcall/LocalCallTest.java
Patch:
@@ -61,9 +61,6 @@ public static void afterAll() {
     //@Qualifier("localHelloService")
     private HelloService localHelloService;
 
-    @Autowired
-    private ApplicationContext applicationContext;
-
     @Test
     public void testLocalCall() {
         // see also: org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker.doInvoke

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/reference/localcallam/LocalCallMultipleReferenceAnnotationsTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.config.spring.ReferenceBean;
 import org.apache.dubbo.config.spring.api.HelloService;
 import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
+import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.rpc.RpcContext;
 import org.junit.jupiter.api.AfterAll;
@@ -48,7 +49,7 @@
 @DirtiesContext(classMode = AFTER_EACH_TEST_METHOD)
 public class LocalCallMultipleReferenceAnnotationsTest {
 
-    private static ZookeeperSingleRegistryCenter registryCenter;
+    private static RegistryCenter registryCenter;
 
     @BeforeAll
     public static void setUp() {

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/PortTelnetTest.java
Patch:
@@ -73,7 +73,7 @@ public void after() {
     public void testListClient() throws Exception {
         ExchangeClient client1 = Exchangers.connect("dubbo://127.0.0.1:" + availablePort + "/demo");
         ExchangeClient client2 = Exchangers.connect("dubbo://127.0.0.1:" + availablePort + "/demo");
-        Thread.sleep(5000);
+        Thread.sleep(100);
         String result = port.execute(mockCommandContext, new String[]{"-l", availablePort + ""});
         String client1Addr = client1.getLocalAddress().toString();
         String client2Addr = client2.getLocalAddress().toString();

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocolTest.java
Patch:
@@ -190,7 +190,7 @@ public void testPerm() throws Exception {
         service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf("dubbo://127.0.0.1:" + port + "/" + DemoService.class.getName() + "?codec=exchange").addParameter("timeout",
                 3000L)));
         long start = System.currentTimeMillis();
-        for (int i = 0; i < 1000; i++)
+        for (int i = 0; i < 100; i++)
             service.getSize(new String[]{"", "", ""});
         System.out.println("take:" + (System.currentTimeMillis() - start));
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ServiceConfigBase.java
Patch:
@@ -319,6 +319,7 @@ public void setInterface(Class<?> interfaceClass) {
         }
         this.interfaceClass = interfaceClass;
         setInterface(interfaceClass == null ? null : interfaceClass.getName());
+        setInterfaceClassLoader(interfaceClass == null ? null : interfaceClass.getClassLoader());
     }
 
     public T getRef() {

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -729,9 +729,7 @@ private AbstractInterfaceConfig checkDuplicatedInterfaceConfig(AbstractInterface
         String uniqueServiceName;
         Map<String, AbstractInterfaceConfig> configCache;
         if (config instanceof ReferenceConfigBase) {
-            ReferenceConfigBase<?> referenceConfig = (ReferenceConfigBase<?>) config;
-            uniqueServiceName = referenceConfig.getUniqueServiceName();
-            configCache = referenceConfigCache;
+            return null;
         } else if (config instanceof ServiceConfigBase) {
             ServiceConfigBase serviceConfig = (ServiceConfigBase) config;
             uniqueServiceName = serviceConfig.getUniqueServiceName();

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -197,6 +197,8 @@ public void unexport() {
         }
         unexported = true;
         onUnexpoted();
+        ModuleServiceRepository repository = getScopeModel().getServiceRepository();
+        repository.unregisterProvider(providerModel);
     }
 
     public void init() {

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/DubboBootstrapTest.java
Patch:
@@ -63,7 +63,6 @@
 import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_METADATA_STORAGE_TYPE;
 import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_SECONDS_KEY;
-import static org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfig;
 import static org.hamcrest.CoreMatchers.anything;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.hasEntry;
@@ -338,7 +337,7 @@ private void assertMetadataService(DubboBootstrap bootstrap, int availablePort,
         ServiceConfig<MetadataService> serviceConfig = new ServiceConfig<>();
         serviceConfig.setRegistry(new RegistryConfig("N/A"));
         serviceConfig.setInterface(MetadataService.class);
-        serviceConfig.setGroup(getApplicationConfig().getName());
+        serviceConfig.setGroup(ApplicationModel.defaultModel().getCurrentConfig().getName());
         serviceConfig.setVersion(MetadataService.VERSION);
         assertThat(exporters, hasEntry(is(serviceConfig.getUniqueServiceName() + ":" + availablePort), anything()));
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/DubboComponentScanRegistrarTest.java
Patch:
@@ -21,6 +21,8 @@
 import org.apache.dubbo.config.spring.context.annotation.consumer.ConsumerConfiguration;
 import org.apache.dubbo.config.spring.context.annotation.provider.DemoServiceImpl;
 import org.apache.dubbo.config.spring.context.annotation.provider.ProviderConfiguration;
+import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -71,7 +73,7 @@ public void test() {
         Assertions.assertNotNull(findAnnotation(beanClass, Transactional.class));
 
         // reset ConfigManager of provider context
-        DubboBootstrap.reset(false);
+        ApplicationModel.defaultModel().getApplicationConfigManager().destroy();
 
         AnnotationConfigApplicationContext consumerContext = new AnnotationConfigApplicationContext();
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/propertyconfigurer/consumer/PropertyConfigurerTest.java
Patch:
@@ -21,6 +21,8 @@
 import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
 import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
+import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
@@ -57,7 +59,7 @@ public void testEarlyInit() {
             providerContext.start();
 
             // reset ConfigManager of provider context
-            DubboBootstrap.reset(false);
+            ApplicationModel.defaultModel().getApplicationConfigManager().destroy();
 
             try {
                 Thread.sleep(1000);

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/propertyconfigurer/consumer2/PropertySourcesConfigurerTest.java
Patch:
@@ -22,6 +22,8 @@
 import org.apache.dubbo.config.spring.propertyconfigurer.consumer.DemoBeanFactoryPostProcessor;
 import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
+import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
@@ -63,7 +65,7 @@ public void testEarlyInit() {
             }
 
             // reset ConfigManager of provider context
-            DubboBootstrap.reset(false);
+            ApplicationModel.defaultModel().getApplicationConfigManager().destroy();
 
             // Resolve placeholder by PropertySourcesPlaceholderConfigurer in dubbo-consumer.xml, without import property source.
             AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class);

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/reference/javaconfig/JavaConfigReferenceBeanTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;
@@ -89,6 +90,7 @@ public void testAnnotationAtField() {
     }
 
     @Test
+    @Disabled("support multi reference config")
     public void testAnnotationAtField2() {
         AnnotationConfigApplicationContext context = null;
         try {

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/registrycenter/AbstractRegistryCenter.java
Patch:
@@ -55,7 +55,7 @@ abstract class AbstractRegistryCenter implements RegistryCenter {
     /**
      * The default tick time is 10000
      */
-    private static final int DEFAULT_TICK_TIME = 10 * 1000;
+    private static final int DEFAULT_TICK_TIME = 100 * 1000;
 
     /**
      * The default value is -1.
@@ -70,7 +70,7 @@ abstract class AbstractRegistryCenter implements RegistryCenter {
     /**
      * The maximum session timeout.
      */
-    private static final int DEFAULT_MAXIMUM_SESSION_TIMEOUT = 60 * 1000;
+    private static final int DEFAULT_MAXIMUM_SESSION_TIMEOUT = 600 * 1000;
 
     /**
      * The default customer properties.

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/BaseOffline.java
Patch:
@@ -23,18 +23,18 @@
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.RegistryFactory;
-import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.rpc.model.FrameworkModel;
+import org.apache.dubbo.rpc.model.FrameworkServiceRepository;
 import org.apache.dubbo.rpc.model.ProviderModel;
 import org.apache.dubbo.rpc.model.ServiceMetadata;
-import org.apache.dubbo.rpc.model.ServiceRepository;
 
 import java.util.Collection;
 import java.util.List;
 
 public class BaseOffline implements BaseCommand {
     private Logger logger = LoggerFactory.getLogger(OfflineInterface.class);
     public static RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();
-    public static ServiceRepository serviceRepository = ApplicationModel.defaultModel().getApplicationServiceRepository();
+    public static FrameworkServiceRepository serviceRepository = FrameworkModel.defaultModel().getServiceRepository();
 
     @Override
     public String execute(CommandContext commandContext, String[] args) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/BaseOnline.java
Patch:
@@ -24,18 +24,18 @@
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.RegistryFactory;
-import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.rpc.model.FrameworkModel;
+import org.apache.dubbo.rpc.model.FrameworkServiceRepository;
 import org.apache.dubbo.rpc.model.ProviderModel;
 import org.apache.dubbo.rpc.model.ServiceMetadata;
-import org.apache.dubbo.rpc.model.ServiceRepository;
 
 import java.util.Collection;
 import java.util.List;
 
 public class BaseOnline implements BaseCommand {
     private static final Logger logger = LoggerFactory.getLogger(Online.class);
     public static RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();
-    public static ServiceRepository serviceRepository = ApplicationModel.defaultModel().getApplicationServiceRepository();
+    public static FrameworkServiceRepository serviceRepository = FrameworkModel.defaultModel().getServiceRepository();
 
     @Override
     public String execute(CommandContext commandContext, String[] args) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/probe/impl/ProviderReadinessProbe.java
Patch:
@@ -18,16 +18,16 @@
 
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.qos.probe.ReadinessProbe;
-import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.rpc.model.FrameworkModel;
+import org.apache.dubbo.rpc.model.FrameworkServiceRepository;
 import org.apache.dubbo.rpc.model.ProviderModel;
-import org.apache.dubbo.rpc.model.ServiceRepository;
 
 import java.util.Collection;
 import java.util.List;
 
 @Activate
 public class ProviderReadinessProbe implements ReadinessProbe {
-    private static ServiceRepository serviceRepository = ApplicationModel.defaultModel().getApplicationServiceRepository();
+    private static FrameworkServiceRepository serviceRepository = FrameworkModel.defaultModel().getServiceRepository();
 
     @Override
     public boolean check() {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/ProviderFirstParams.java
Patch:
@@ -18,7 +18,9 @@
 
 import org.apache.dubbo.common.extension.SPI;
 
+import java.util.Set;
+
 @SPI
 public interface ProviderFirstParams {
-    String[] params();
+    Set<String> params();
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -365,8 +365,7 @@ private <T> void doReExport(final Invoker<T> originInvoker, ExporterChangeableWr
     }
 
     private ProviderModel.RegisterStatedURL getStatedUrl(URL registryUrl, URL providerUrl) {
-        ApplicationModel applicationModel = getApplicationModel(registryUrl.getScopeModel());
-        ProviderModel providerModel = applicationModel.getApplicationServiceRepository()
+        ProviderModel providerModel = frameworkModel.getServiceRepository()
             .lookupExportedService(providerUrl.getServiceKey());
 
         List<ProviderModel.RegisterStatedURL> statedUrls = providerModel.getStatedUrl();

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/ProtocolPortsMetadataCustomizerTest.java
Patch:
@@ -59,7 +59,7 @@ public static DefaultServiceInstance createInstance() {
     @BeforeAll
     public static void setUp() {
         ApplicationConfig applicationConfig = new ApplicationConfig("test");
-        ApplicationModel.getConfigManager().setApplication(applicationConfig);
+        ApplicationModel.defaultModel().getApplicationConfigManager().setApplication(applicationConfig);
     }
 
     @AfterAll

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataCustomizerTest.java
Patch:
@@ -54,7 +54,7 @@ public static DefaultServiceInstance createInstance() {
     @BeforeAll
     public static void setUp() {
         ApplicationConfig applicationConfig = new ApplicationConfig("test");
-        ApplicationModel.getConfigManager().setApplication(applicationConfig);
+        ApplicationModel.defaultModel().getApplicationConfigManager().setApplication(applicationConfig);
     }
 
     @AfterAll

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/store/InMemoryMetadataServiceTest.java
Patch:
@@ -51,7 +51,7 @@ public class InMemoryMetadataServiceTest {
     public static void setUp() {
         ApplicationConfig applicationConfig = new ApplicationConfig();
         applicationConfig.setName("demo-provider2");
-        ApplicationModel.getConfigManager().setApplication(applicationConfig);
+        ApplicationModel.defaultModel().getApplicationConfigManager().setApplication(applicationConfig);
     }
 
     @AfterAll

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/jdk/JdkProxyFactory.java
Patch:
@@ -33,7 +33,7 @@ public class JdkProxyFactory extends AbstractProxyFactory {
     @Override
     @SuppressWarnings("unchecked")
     public <T> T getProxy(Invoker<T> invoker, Class<?>[] interfaces) {
-        return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), interfaces, new InvokerInvocationHandler(invoker));
+        return (T) Proxy.newProxyInstance(invoker.getInterface().getClassLoader(), interfaces, new InvokerInvocationHandler(invoker));
     }
 
     @Override

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/UrlTestBase.java
Patch:
@@ -51,7 +51,7 @@ public class UrlTestBase {
     private static final int TESTVALUE5 = 8;
     private static final int TESTVALUE6 = 9;
     private static final int TESTVALUE7 = 10;
-    protected ApplicationConfig application = new ApplicationConfig();
+    protected ApplicationConfig application;
     protected RegistryConfig regConfForProvider;
     protected RegistryConfig regConfForService;
     protected ProviderConfig provConf;
@@ -144,6 +144,7 @@ protected void initServConf() {
         servConf = new ServiceConfig<DemoService>();
 
 //        provConf.setApplication(appConfForProvider);
+        application = new ApplicationConfig();
         application.setMetadataServicePort(20881);
         servConf.setApplication(application);
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/reference/javaconfig/JavaConfigReferenceBeanTest.java
Patch:
@@ -53,17 +53,17 @@ public class JavaConfigReferenceBeanTest {
 
     @BeforeEach
     public void setUp() {
+        DubboBootstrap.reset();
         multipleRegistryCenter = new ZookeeperMultipleRegistryCenter();
         multipleRegistryCenter.startup();
-        DubboBootstrap.reset();
         SpringExtensionInjector.clearContexts();
     }
 
     @AfterEach
     public void tearDown() {
-        DubboBootstrap.reset();
         multipleRegistryCenter.shutdown();
         SpringExtensionInjector.clearContexts();
+        DubboBootstrap.reset();
     }
 
     @Test

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -208,7 +208,7 @@ public static void resetExtensionLoader(Class type) {
     }
 
     public void destroy() {
-        extensionInstances.forEach((_type, instance) -> {
+        extensionInstances.forEach((type, instance) -> {
             if (instance instanceof Lifecycle) {
                 Lifecycle lifecycle = (Lifecycle) instance;
                 try {

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/PropertiesConfiguration.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.utils.ConfigUtils;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -30,9 +31,9 @@
  */
 public class PropertiesConfiguration implements Configuration {
 
-    public PropertiesConfiguration() {
+    public PropertiesConfiguration(ApplicationModel applicationModel) {
 
-        ExtensionLoader<OrderedPropertiesProvider> propertiesProviderExtensionLoader = ExtensionLoader.getExtensionLoader(OrderedPropertiesProvider.class);
+        ExtensionLoader<OrderedPropertiesProvider> propertiesProviderExtensionLoader = applicationModel.getExtensionLoader(OrderedPropertiesProvider.class);
         Set<String> propertiesProviderNames = propertiesProviderExtensionLoader.getSupportedExtensions();
         if (propertiesProviderNames == null || propertiesProviderNames.isEmpty()) {
             return;

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.config.support.Parameter;
-import org.apache.dubbo.rpc.model.ScopeModel;
 import org.apache.dubbo.rpc.model.ServiceMetadata;
 import org.apache.dubbo.rpc.service.GenericService;
 import org.apache.dubbo.rpc.support.ProtocolUtils;
@@ -201,8 +200,8 @@ public static Class<?> determineInterfaceClass(String generic, String interfaceN
     }
 
     @Override
-    public void setScopeModel(ScopeModel scopeModel) {
-        super.setScopeModel(scopeModel);
+    protected void postProcessAfterScopeModelChanged() {
+        super.postProcessAfterScopeModelChanged();
         if (this.consumer != null && this.consumer.getScopeModel() != scopeModel) {
             this.consumer.setScopeModel(scopeModel);
         }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ServiceConfigBase.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.annotation.Service;
 import org.apache.dubbo.config.support.Parameter;
-import org.apache.dubbo.rpc.model.ScopeModel;
 import org.apache.dubbo.rpc.model.ServiceMetadata;
 import org.apache.dubbo.rpc.service.GenericService;
 import org.apache.dubbo.rpc.support.ProtocolUtils;
@@ -106,8 +105,8 @@ private static List<ProtocolConfig> convertProviderToProtocol(List<ProviderConfi
     }
 
     @Override
-    public void setScopeModel(ScopeModel scopeModel) {
-        super.setScopeModel(scopeModel);
+    protected void postProcessAfterScopeModelChanged() {
+        super.postProcessAfterScopeModelChanged();
         if (this.provider != null && this.provider.getScopeModel() != scopeModel) {
             this.provider.setScopeModel(scopeModel);
         }

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/PropertiesConfigurationTest.java
Patch:
@@ -17,14 +17,15 @@
 package org.apache.dubbo.common.config;
 
 
+import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class PropertiesConfigurationTest {
 
     @Test
     public void testOrderPropertiesProviders() {
-        PropertiesConfiguration configuration = new PropertiesConfiguration();
+        PropertiesConfiguration configuration = new PropertiesConfiguration(ApplicationModel.defaultModel());
         Assertions.assertEquals("999", configuration.getInternalProperty("testKey"));
     }
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionDirectorTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.extension.director.FooAppService;
 import org.apache.dubbo.common.extension.director.FooFrameworkService;
-import org.apache.dubbo.common.extension.director.FooModuleProvider;
 import org.apache.dubbo.common.extension.director.FooModuleService;
 import org.apache.dubbo.common.extension.director.impl.TestAppService;
 import org.apache.dubbo.common.extension.director.impl.TestFrameworkService;
@@ -175,7 +174,6 @@ public void testModelDataIsolation() {
         Assertions.assertFalse(applicationsOfFw1.contains(applicationModel21));
 
         Collection<ModuleModel> modulesOfApp11 = applicationModel11.getModuleModels();
-        Assertions.assertEquals(2, modulesOfApp11.size());
         Assertions.assertTrue(modulesOfApp11.contains(moduleModel111));
         Assertions.assertTrue(modulesOfApp11.contains(moduleModel112));
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/generic/GenericServiceTest.java
Patch:
@@ -18,6 +18,8 @@
 package org.apache.dubbo.generic;
 
 
+import com.alibaba.dubbo.config.ReferenceConfig;
+import com.alibaba.fastjson.JSON;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
@@ -33,9 +35,6 @@
 import org.apache.dubbo.service.ComplexObject;
 import org.apache.dubbo.service.DemoService;
 import org.apache.dubbo.service.DemoServiceImpl;
-
-import com.alibaba.dubbo.config.ReferenceConfig;
-import com.alibaba.fastjson.JSON;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -82,7 +82,7 @@ public ConfigurableMetadataServiceExporter export() {
 
             ApplicationConfig applicationConfig = getApplicationConfig();
             ServiceConfig<MetadataService> serviceConfig = new ServiceConfig<>();
-            serviceConfig.setScopeModel(applicationModel.getDefaultModule());
+            serviceConfig.setScopeModel(applicationModel.getInternalModule());
             serviceConfig.setBootstrap(applicationModel.getBeanFactory().getBean(DubboBootstrap.class));
             serviceConfig.setApplication(applicationConfig);
             serviceConfig.setRegistry(new RegistryConfig("N/A"));

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/boot/configprops/SpringBootConfigPropsTest.java
Patch:
@@ -28,12 +28,12 @@
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
 import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
+import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.ZookeeperMultipleRegistryCenter;
+import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/boot/configprops/SpringBootMultipleConfigPropsTest.java
Patch:
@@ -28,12 +28,12 @@
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
 import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
+import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.ZookeeperMultipleRegistryCenter;
+import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/BaseOffline.java
Patch:
@@ -60,7 +60,7 @@ protected boolean doExecute(String servicePattern) {
     public boolean offline(String servicePattern) {
         boolean hasService = false;
 
-        Collection<ProviderModel> providerModelList = serviceRepository.getExportedServices();
+        Collection<ProviderModel> providerModelList = serviceRepository.allProviderModels();
         for (ProviderModel providerModel : providerModelList) {
             ServiceMetadata metadata = providerModel.getServiceMetadata();
             if (metadata.getServiceKey().matches(servicePattern) || metadata.getDisplayServiceKey().matches(servicePattern)) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/BaseOnline.java
Patch:
@@ -56,7 +56,7 @@ public String execute(CommandContext commandContext, String[] args) {
     public boolean online(String servicePattern) {
         boolean hasService = false;
 
-        Collection<ProviderModel> providerModelList = serviceRepository.getExportedServices();
+        Collection<ProviderModel> providerModelList = serviceRepository.allProviderModels();
         for (ProviderModel providerModel : providerModelList) {
             ServiceMetadata metadata = providerModel.getServiceMetadata();
             if (metadata.getServiceKey().matches(servicePattern) || metadata.getDisplayServiceKey().matches(servicePattern)) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/probe/impl/ProviderReadinessProbe.java
Patch:
@@ -31,7 +31,7 @@ public class ProviderReadinessProbe implements ReadinessProbe {
 
     @Override
     public boolean check() {
-        Collection<ProviderModel> providerModelList = serviceRepository.getExportedServices();
+        Collection<ProviderModel> providerModelList = serviceRepository.allProviderModels();
         if (providerModelList.isEmpty()) {
             return true;
         }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/ProtocolSerializationWrapper.java
Patch:
@@ -26,7 +26,7 @@
 
 import java.util.List;
 
-import static org.apache.dubbo.rpc.model.ScopeModelUtil.getApplicationModel;
+import static org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel;
 
 @Activate
 public class ProtocolSerializationWrapper implements Protocol {
@@ -43,7 +43,7 @@ public int getDefaultPort() {
 
     @Override
     public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
-        getApplicationModel(invoker.getUrl().getScopeModel()).getApplicationServiceRepository().registerProviderUrl(invoker.getUrl());
+        getFrameworkModel(invoker.getUrl().getScopeModel()).getServiceRepository().registerProviderUrl(invoker.getUrl());
         return protocol.export(invoker);
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/RpcUtilsTest.java
Patch:
@@ -22,8 +22,7 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-import org.apache.dubbo.rpc.model.ServiceRepository;
-
+import org.apache.dubbo.rpc.model.ModuleServiceRepository;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -368,7 +367,7 @@ public void testIsReturnTypeFuture() {
         RpcInvocation inv = new RpcInvocation("testReturnType", serviceName, "", new Class<?>[] {String.class}, null, null, invoker, null);
         Assertions.assertFalse(RpcUtils.isReturnTypeFuture(inv));
 
-        ServiceRepository repository = ApplicationModel.defaultModel().getApplicationServiceRepository();
+        ModuleServiceRepository repository = ApplicationModel.defaultModel().getDefaultModule().getServiceRepository();
         repository.registerService(demoServiceClass);
 
         inv = new RpcInvocation("testReturnType4", serviceName, "", new Class<?>[] {String.class}, null, null, invoker, null);

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/MultiThreadTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.dubbo.rpc.protocol.dubbo.support.DemoService;
 import org.apache.dubbo.rpc.protocol.dubbo.support.DemoServiceImpl;
 import org.apache.dubbo.rpc.protocol.dubbo.support.ProtocolUtils;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -44,12 +43,12 @@ public class MultiThreadTest {
     @AfterEach
     public void after() {
         ProtocolUtils.closeAll();
-        ApplicationModel.defaultModel().getApplicationServiceRepository().destroy();
+        ApplicationModel.defaultModel().getDefaultModule().getServiceRepository().destroy();
     }
 
     @Test
     public void testDubboMultiThreadInvoke() throws Exception {
-        ApplicationModel.defaultModel().getApplicationServiceRepository().registerService("TestService", DemoService.class);
+        ApplicationModel.defaultModel().getDefaultModule().getServiceRepository().registerService("TestService", DemoService.class);
         int port = NetUtils.getAvailablePort();
         Exporter<?> rpcExporter = protocol.export(proxy.getInvoker(new DemoServiceImpl(), DemoService.class, URL.valueOf("dubbo://127.0.0.1:" + port + "/TestService")));
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/RpcFilterTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.dubbo.rpc.protocol.dubbo.support.DemoServiceImpl;
 import org.apache.dubbo.rpc.protocol.dubbo.support.ProtocolUtils;
 import org.apache.dubbo.rpc.service.EchoService;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -45,7 +44,7 @@ public void testRpcFilter() throws Exception {
         DemoService service = new DemoServiceImpl();
         int port = NetUtils.getAvailablePort();
         URL url = URL.valueOf("dubbo://127.0.0.1:" + port + "/org.apache.dubbo.rpc.protocol.dubbo.support.DemoService?service.filter=echo");
-        ApplicationModel.defaultModel().getApplicationServiceRepository().registerService(DemoService.class);
+        ApplicationModel.defaultModel().getDefaultModule().getServiceRepository().registerService(DemoService.class);
         protocol.export(proxy.getInvoker(service, DemoService.class, url));
         service = proxy.getProxy(protocol.refer(DemoService.class, url));
         Assertions.assertEquals("123", service.echo("123"));

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolTest.java
Patch:
@@ -28,9 +28,8 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.rpc.model.ModuleServiceRepository;
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
-import org.apache.dubbo.rpc.model.ServiceRepository;
-
 import org.hamcrest.CoreMatchers;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
@@ -50,7 +49,7 @@ public class RestProtocolTest {
     private ProxyFactory proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
     private final int availablePort = NetUtils.getAvailablePort();
     private final URL exportUrl = URL.valueOf("rest://127.0.0.1:" + availablePort + "/rest?interface=org.apache.dubbo.rpc.protocol.rest.DemoService");
-    private final ServiceRepository repository = ApplicationModel.defaultModel().getApplicationServiceRepository();
+    private final ModuleServiceRepository repository = ApplicationModel.defaultModel().getDefaultModule().getServiceRepository();
 
     @AfterEach
     public void tearDown() {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/service/TriBuiltinService.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.rpc.model.ModuleServiceRepository;
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
 import org.apache.dubbo.rpc.model.ServiceMetadata;
-import org.apache.dubbo.rpc.model.ServiceRepository;
 import org.apache.dubbo.rpc.protocol.tri.PathResolver;
 
 import java.util.HashMap;
@@ -46,7 +46,7 @@ public class TriBuiltinService {
     private static final PathResolver PATH_RESOLVER = ExtensionLoader.getExtensionLoader(PathResolver.class)
         .getDefaultExtension();
 
-    private static final ServiceRepository repository = ApplicationModel.getServiceRepository();
+    private static final ModuleServiceRepository repository = ApplicationModel.defaultModel().getDefaultModule().getServiceRepository();
 
     private static final Map<Class<?>, Object> TRI_SERVICES = new HashMap<>();
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/FilterChainBuilder.java
Patch:
@@ -28,7 +28,9 @@
 import org.apache.dubbo.rpc.cluster.ClusterInvoker;
 import org.apache.dubbo.rpc.cluster.Directory;
 
-@SPI("default")
+import static org.apache.dubbo.common.extension.ExtensionScope.APPLICATION;
+
+@SPI(value = "default", scope = APPLICATION)
 public interface FilterChainBuilder {
     /**
      * build consumer/provider filter chain

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/governance/GovernanceRuleRepository.java
Patch:
@@ -19,7 +19,9 @@
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.extension.SPI;
 
-@SPI("default")
+import static org.apache.dubbo.common.extension.ExtensionScope.APPLICATION;
+
+@SPI(value = "default", scope = APPLICATION)
 public interface GovernanceRuleRepository {
 
     String DEFAULT_GROUP = "dubbo";

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleManager.java
Patch:
@@ -42,7 +42,7 @@ public synchronized static void subscribeAppRule(String app) {
 
         MeshAppRuleListener meshAppRuleListener = new MeshAppRuleListener(app);
         String appRuleDataId = app + MESH_RULE_DATA_ID_SUFFIX;
-        DynamicConfiguration configuration = ApplicationModel.getEnvironment().getDynamicConfiguration()
+        DynamicConfiguration configuration = ApplicationModel.defaultModel().getApplicationEnvironment().getDynamicConfiguration()
             .orElse(null);
 
         Set<MeshEnvListenerFactory> envListenerFactories = ExtensionLoader.getExtensionLoader(MeshEnvListenerFactory.class).getSupportedExtensionInstances();

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/AbstractCluster.java
Patch:
@@ -48,7 +48,7 @@ private <T> Invoker<T> buildClusterInterceptors(AbstractClusterInvoker<T> cluste
 //        AbstractClusterInvoker<T> last = clusterInvoker;
         AbstractClusterInvoker<T> last = buildInterceptorInvoker(new ClusterFilterInvoker<>(clusterInvoker));
 
-        if (Boolean.parseBoolean(ConfigurationUtils.getProperty(CLUSTER_INTERCEPTOR_COMPATIBLE_KEY, "false"))) {
+        if (Boolean.parseBoolean(ConfigurationUtils.getProperty(clusterInvoker.getDirectory().getConsumerUrl().getScopeModel(), CLUSTER_INTERCEPTOR_COMPATIBLE_KEY, "false"))) {
             return build27xCompatibleClusterInterceptors(clusterInvoker, last);
         }
         return last;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/StickyTest.java
Patch:
@@ -18,7 +18,6 @@
 
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
@@ -72,7 +71,6 @@ public void setUp() throws Exception {
 
         clusterinvoker = new StickyClusterInvoker<StickyTest>(dic);
 
-        ExtensionLoader.resetExtensionLoader(LoadBalance.class);
     }
 
     @Test

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/Compiler.java
Patch:
@@ -16,12 +16,13 @@
  */
 package org.apache.dubbo.common.compiler;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
  * Compiler. (SPI, Singleton, ThreadSafe)
  */
-@SPI("javassist")
+@SPI(value = "javassist", scope = ExtensionScope.FRAMEWORK)
 public interface Compiler {
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/OrderedPropertiesProvider.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.common.config;
 
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.util.Properties;
@@ -26,7 +27,7 @@
  * The smaller value, the higher priority
  * 
  */
-@SPI
+@SPI(scope = ExtensionScope.APPLICATION)
 public interface OrderedPropertiesProvider {
     /**
      * order

File: dubbo-common/src/main/java/org/apache/dubbo/common/context/FrameworkExt.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.dubbo.common.context;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
-@SPI
+@SPI(scope = ExtensionScope.APPLICATION)
 public interface FrameworkExt extends Lifecycle {
 
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/convert/Converter.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.common.convert;
 
 import org.apache.dubbo.common.extension.ExtensionLoader;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.common.lang.Prioritized;
 
@@ -31,7 +32,7 @@
  * @param <T> The target type
  * @since 2.7.6
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 @FunctionalInterface
 public interface Converter<S, T> extends Prioritized {
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/convert/multiple/MultiValueConverter.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.common.convert.multiple;
 
 import org.apache.dubbo.common.extension.ExtensionLoader;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.common.lang.Prioritized;
 
@@ -32,7 +33,7 @@
  * @param <S> The source type
  * @since 2.7.6
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface MultiValueConverter<S> extends Prioritized {
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/infra/InfraAdapter.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.infra;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.util.Map;
@@ -26,7 +27,7 @@
  * 2. get configurations from third-party systems which maybe useful for a specific component.
  */
 
-@SPI
+@SPI(scope = ExtensionScope.APPLICATION)
 public interface InfraAdapter {
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/lang/ShutdownHookCallback.java
Patch:
@@ -16,14 +16,15 @@
  */
 package org.apache.dubbo.common.lang;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
  * Dubbo ShutdownHook callback interface
  *
  * @since 2.7.5
  */
-@SPI
+@SPI(scope = ExtensionScope.APPLICATION)
 public interface ShutdownHookCallback extends Prioritized {
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/LoggerAdapter.java
Patch:
@@ -16,14 +16,15 @@
  */
 package org.apache.dubbo.common.logger;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.io.File;
 
 /**
  * Logger provider
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface LoggerAdapter {
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/status/StatusChecker.java
Patch:
@@ -16,12 +16,13 @@
  */
 package org.apache.dubbo.common.status;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
  * StatusChecker
  */
-@SPI
+@SPI(scope = ExtensionScope.APPLICATION)
 public interface StatusChecker {
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/store/DataStore.java
Patch:
@@ -17,11 +17,12 @@
 
 package org.apache.dubbo.common.store;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.util.Map;
 
-@SPI("simple")
+@SPI(value = "simple", scope = ExtensionScope.APPLICATION)
 public interface DataStore {
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/ThreadPool.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Adaptive;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.util.concurrent.Executor;
@@ -27,7 +28,8 @@
 /**
  * ThreadPool
  */
-@SPI("fixed")
+//TODO which scope for ThreadPool? APPLICATION or FRAMEWORK
+@SPI(value = "fixed", scope = ExtensionScope.FRAMEWORK)
 public interface ThreadPool {
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/manager/ExecutorRepository.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.common.threadpool.manager;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.util.concurrent.ExecutorService;
@@ -25,7 +26,7 @@
 /**
  *
  */
-@SPI("default")
+@SPI(value = "default", scope = ExtensionScope.APPLICATION)
 public interface ExecutorRepository {
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/param/DynamicParamSource.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.dubbo.common.url.component.param;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.util.List;
 
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface DynamicParamSource {
 
     void init(List<String> keys, List<ParamValue> values);

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.logger.support.FailsafeLogger;
+import org.apache.dubbo.rpc.model.ScopeModel;
 
 import java.io.IOException;
 import java.net.Inet4Address;
@@ -237,8 +238,8 @@ public static String filterLocalHost(String host) {
         return host;
     }
 
-    public static String getIpByConfig() {
-        String configIp = ConfigurationUtils.getProperty(DUBBO_IP_TO_BIND);
+    public static String getIpByConfig(ScopeModel scopeModel) {
+        String configIp = ConfigurationUtils.getProperty(scopeModel, DUBBO_IP_TO_BIND);
         if (configIp != null) {
             return configIp;
         }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ConfigCenterConfig.java
Patch:
@@ -149,7 +149,9 @@ public URL toUrl() {
         if (StringUtils.isEmpty(map.get(PROTOCOL_KEY))) {
             map.put(PROTOCOL_KEY, ZOOKEEPER_PROTOCOL);
         }
-        return UrlUtils.parseURL(address, map);
+        URL url = UrlUtils.parseURL(address, map);
+        url.setScopeModel(getScopeModel());
+        return url;
     }
 
     public boolean checkOrUpdateInitialized(boolean update) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java
Patch:
@@ -124,7 +124,7 @@ public URL toUrl() throws IllegalArgumentException {
             throw new IllegalArgumentException("The address of metadata report is invalid.");
         }
         Map<String, String> map = new HashMap<String, String>();
-        URL url = URL.valueOf(address);
+        URL url = URL.valueOf(address, getScopeModel());
         // Issue : https://github.com/apache/dubbo/issues/6491
         // Append the parameters from address
         map.putAll(url.getParameters());
@@ -135,7 +135,7 @@ public URL toUrl() throws IllegalArgumentException {
         // put the protocol of URL as the "metadata"
         map.put("metadata", url.getProtocol());
         return new ServiceConfigURL("metadata", url.getUsername(), url.getPassword(), url.getHost(),
-                url.getPort(), url.getPath(), map);
+                url.getPort(), url.getPath(), map).setScopeModel(getScopeModel());
 
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/MethodConfig.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.annotation.Method;
 import org.apache.dubbo.config.support.Parameter;
-import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.AsyncMethodInfo;
 
 import java.util.ArrayList;
@@ -231,7 +230,7 @@ protected void processExtraRefresh(String preferredPrefix, InmemoryConfiguration
     private void refreshArgument(ArgumentConfig argument, InmemoryConfiguration subPropsConfiguration) {
         if (argument.getIndex() != null && argument.getIndex() >= 0) {
             String prefix = argument.getIndex() + ".";
-            Environment environment = ApplicationModel.getEnvironment();
+            Environment environment = getApplicationModel().getApplicationEnvironment();
             java.lang.reflect.Method[] methods = argument.getClass().getMethods();
             for (java.lang.reflect.Method method : methods) {
                 if (MethodUtils.isSetter(method)) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -327,7 +327,7 @@ public String getTransporter() {
     }
 
     public void setTransporter(String transporter) {
-        /*if(transporter != null && transporter.length() > 0 && ! ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(transporter)){
+        /*if(transporter != null && transporter.length() > 0 && ! this.getExtensionLoader(Transporter.class).hasExtension(transporter)){
             throw new IllegalStateException("No such transporter type : " + transporter);
         }*/
         this.transporter = transporter;
@@ -338,7 +338,7 @@ public String getServer() {
     }
 
     public void setServer(String server) {
-        /*if(server != null && server.length() > 0 && ! ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(server)){
+        /*if(server != null && server.length() > 0 && ! this.getExtensionLoader(Transporter.class).hasExtension(server)){
             throw new IllegalStateException("No such server type : " + server);
         }*/
         this.server = server;
@@ -349,7 +349,7 @@ public String getClient() {
     }
 
     public void setClient(String client) {
-        /*if(client != null && client.length() > 0 && ! ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(client)){
+        /*if(client != null && client.length() > 0 && ! this.getExtensionLoader(Transporter.class).hasExtension(client)){
             throw new IllegalStateException("No such client type : " + client);
         }*/
         this.client = client;

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ApplicationInitListener.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.dubbo.rpc.model;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
-@SPI
+@SPI(scope = ExtensionScope.APPLICATION)
 public interface ApplicationInitListener {
     /**
      * init the application

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/BuiltinServiceDetector.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.dubbo.rpc.model;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface BuiltinServiceDetector {
 
     Class<?> getService();

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/EnvironmentTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.common.config;
 
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.junit.jupiter.api.Test;
 
 import java.util.LinkedHashMap;
@@ -31,7 +32,7 @@ public class EnvironmentTest {
 
     @Test
     public void testResolvePlaceholders1() {
-        Environment environment = ApplicationModel.getEnvironment();
+        Environment environment = ApplicationModel.defaultModel().getApplicationEnvironment();
 
         Map<String, String> externalMap = new LinkedHashMap<>();
         externalMap.put("zookeeper.address", "127.0.0.1");

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/configcenter/file/FileSystemDynamicConfigurationFactoryTest.java
Patch:
@@ -16,8 +16,9 @@
  */
 package org.apache.dubbo.common.config.configcenter.file;
 
-import org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory;
+import org.apache.dubbo.common.config.ConfigurationUtils;
 
+import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -31,6 +32,6 @@ public class FileSystemDynamicConfigurationFactoryTest {
 
     @Test
     public void testGetFactory() {
-        assertEquals(FileSystemDynamicConfigurationFactory.class, DynamicConfigurationFactory.getDynamicConfigurationFactory("file").getClass());
+        assertEquals(FileSystemDynamicConfigurationFactory.class, ConfigurationUtils.getDynamicConfigurationFactory(ApplicationModel.defaultModel(), "file").getClass());
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/common/extension/ExtensionFactory.java
Patch:
@@ -16,10 +16,11 @@
  */
 package com.alibaba.dubbo.common.extension;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 @Deprecated
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface ExtensionFactory extends org.apache.dubbo.common.extension.ExtensionFactory {
 
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/DubboShutdownHook.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.common.lang.ShutdownHookCallbacks;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -57,8 +56,7 @@ public static DubboShutdownHook getDubboShutdownHook() {
 
     @Override
     public void run() {
-        String disableShutdownHookValue = (String) ApplicationModel.getEnvironment().getConfiguration()
-            .getProperty(ConfigKeys.DUBBO_LIFECYCLE_DISABLE_SHUTDOWN_HOOK, "false");
+        String disableShutdownHookValue = System.getProperty(ConfigKeys.DUBBO_LIFECYCLE_DISABLE_SHUTDOWN_HOOK, "false");
         if (Boolean.parseBoolean(disableShutdownHookValue)) {
             if (logger.isWarnEnabled()) {
                 logger.warn("Shutdown hook is disabled, please shutdown dubbo services by qos manually");

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ServiceInstanceHostPortCustomizer.java
Patch:
@@ -40,13 +40,14 @@ public void customize(ServiceInstance serviceInstance) {
             return;
         }
 
-        WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension();
+        WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension(serviceInstance.getApplicationModel());
 
         String host = null;
         int port = -1;
         Set<URL> urls = writableMetadataService.getExportedServiceURLs();
         if (CollectionUtils.isNotEmpty(urls)) {
-            String preferredProtocol = ApplicationModel.getApplicationConfig().getProtocol();
+            ApplicationModel applicationModel = serviceInstance.getApplicationModel();
+            String preferredProtocol = applicationModel.getCurrentConfig().getProtocol();
             if (preferredProtocol != null) {
                 for (URL exportedURL : urls) {
                     if (preferredProtocol.equals(exportedURL.getProtocol())) {

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dubbo.config;
 
-import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.UrlUtils;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
@@ -227,7 +227,7 @@ public void testOverrideConfigBySystemProps() {
         DubboBootstrap.getInstance()
             .application("demo-app")
             .initialize();
-        Collection<RegistryConfig> registries = ApplicationModel.getConfigManager().getRegistries();
+        Collection<RegistryConfig> registries = ApplicationModel.defaultModel().getApplicationConfigManager().getRegistries();
         Assertions.assertEquals(1, registries.size());
         RegistryConfig registryConfig = registries.iterator().next();
         Assertions.assertEquals("zookeeper://localhost:2188", registryConfig.getAddress());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/cache/CacheTest.java
Patch:
@@ -55,7 +55,7 @@ public void setUp() {
 
     @AfterEach
     public void tearDown() {
-//        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.defaultModel().getConfigManager().clear();
     }
 
     private void testCache(String type) throws Exception {

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/InvokerSideConfigUrlTest.java
Patch:
@@ -136,13 +136,13 @@ public static void start() {
     public void setUp() {
         initServConf();
         initRefConf();
-//        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.defaultModel().getConfigManager().clear();
     }
 
     @AfterEach()
     public void teardown() {
         //RegistryServer.reloadCache();
-//        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.defaultModel().getConfigManager().clear();
     }
 
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/single/SingleRegistryCenterDubboProtocolIntegrationTest.java
Patch:
@@ -234,7 +234,7 @@ private void afterExport() {
         Assertions.assertTrue(services.contains(PROVIDER_APPLICATION_NAME));
 
         // obtain InMemoryWritableMetadataService instance
-        InMemoryWritableMetadataService inMemoryWritableMetadataService = (InMemoryWritableMetadataService) WritableMetadataService.getDefaultExtension();
+        InMemoryWritableMetadataService inMemoryWritableMetadataService = (InMemoryWritableMetadataService) WritableMetadataService.getDefaultExtension(serviceConfig.getScopeModel());
         // Exported url is right or not in InMemoryWritableMetadataService
         Assertions.assertEquals(inMemoryWritableMetadataService.getExportedURLs().size(), 1);
         // MetadataInfo exists or not in InMemoryWritableMetadataService

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ConfigCenterBean.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.ConfigCenterConfig;
-import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;
+import org.apache.dubbo.config.spring.extension.SpringExtensionInjector;
 
 import org.springframework.beans.factory.DisposableBean;
 import org.springframework.context.ApplicationContext;
@@ -46,7 +46,7 @@ public class ConfigCenterBean extends ConfigCenterConfig implements ApplicationC
     @Override
     public void setApplicationContext(ApplicationContext applicationContext) {
         this.applicationContext = applicationContext;
-        SpringExtensionFactory.addApplicationContext(applicationContext);
+        SpringExtensionInjector.addApplicationContext(applicationContext);
     }
 
     @Override

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/DataSourceStatusChecker.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.common.status.Status;
 import org.apache.dubbo.common.status.StatusChecker;
 import org.apache.dubbo.common.utils.CollectionUtils;
-import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;
+import org.apache.dubbo.config.spring.extension.SpringExtensionInjector;
 
 import org.springframework.context.ApplicationContext;
 
@@ -45,7 +45,7 @@ public class DataSourceStatusChecker implements StatusChecker {
     @Override
     public Status check() {
         Optional<ApplicationContext> context =
-                SpringExtensionFactory.getContexts().stream().filter(Objects::nonNull).findFirst();
+                SpringExtensionInjector.getContexts().stream().filter(Objects::nonNull).findFirst();
 
         if (!context.isPresent()) {
             return new Status(Status.Level.UNKNOWN);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/SpringStatusChecker.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.status.Status;
 import org.apache.dubbo.common.status.StatusChecker;
-import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;
+import org.apache.dubbo.config.spring.extension.SpringExtensionInjector;
 
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.Lifecycle;
@@ -40,7 +40,7 @@ public class SpringStatusChecker implements StatusChecker {
     @Override
     public Status check() {
         ApplicationContext context = null;
-        for (ApplicationContext c : SpringExtensionFactory.getContexts()) {
+        for (ApplicationContext c : SpringExtensionInjector.getContexts()) {
             // [Issue] SpringStatusChecker execute errors on non-XML Spring configuration
             // issue : https://github.com/apache/dubbo/issues/3615
             if(c instanceof GenericWebApplicationContext) { // ignore GenericXmlApplicationContext

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/JavaConfigBeanTest.java
Patch:
@@ -32,10 +32,11 @@
 import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.rpc.Constants;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
+import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
@@ -88,7 +89,7 @@ public void testBean() {
         try {
             consumerContext.start();
 
-            ConfigManager configManager = ApplicationModel.getConfigManager();
+            ConfigManager configManager = ApplicationModel.defaultModel().getApplicationConfigManager();
             ApplicationConfig application = configManager.getApplication().get();
             Assertions.assertEquals(false, application.getQosEnable());
             Assertions.assertEquals("Tom", application.getOwner());

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/DubboComponentScanRegistrarTest.java
Patch:
@@ -76,10 +76,10 @@ public void test() {
         // Test @Transactional is present or not
         Assertions.assertNotNull(findAnnotation(beanClass, Transactional.class));
 
-        ConcurrentMap<String, Set<URL>> tmp = ApplicationModel.getServiceRepository().getProviderUrlsWithoutGroup();
+        ConcurrentMap<String, Set<URL>> tmp = ApplicationModel.defaultModel().getApplicationServiceRepository().getProviderUrlsWithoutGroup();
         // reset ConfigManager of provider context
         DubboBootstrap.reset(false);
-        ApplicationModel.getServiceRepository().setProviderUrlsWithoutGroup(tmp);
+        ApplicationModel.defaultModel().getApplicationServiceRepository().setProviderUrlsWithoutGroup(tmp);
 
         AnnotationConfigApplicationContext consumerContext = new AnnotationConfigApplicationContext();
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java
Patch:
@@ -23,12 +23,12 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
-
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.ZookeeperMultipleRegistryCenter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -118,7 +118,7 @@ public void testMultiple() {
         RegistryConfig registry2 = context.getBean("registry2", RegistryConfig.class);
         Assertions.assertEquals(2182, registry2.getPort());
 
-        ConfigManager configManager = ApplicationModel.getConfigManager();
+        ConfigManager configManager = ApplicationModel.defaultModel().getApplicationConfigManager();
         Collection<ProtocolConfig> protocolConfigs = configManager.getProtocols();
         Assertions.assertEquals(3, protocolConfigs.size());
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/issues/issue7003/Issue7003Test.java
Patch:
@@ -22,9 +22,10 @@
 import org.apache.dubbo.config.spring.ReferenceBean;
 import org.apache.dubbo.config.spring.api.HelloService;
 import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
-import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
+import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
@@ -72,7 +73,7 @@ public void test() throws Exception {
             Map<String, ReferenceBean> referenceBeanMap = context.getBeansOfType(ReferenceBean.class);
             Assertions.assertEquals(1, referenceBeanMap.size());
 
-            Collection<ReferenceConfigBase<?>> references = ApplicationModel.getConfigManager().getReferences();
+            Collection<ReferenceConfigBase<?>> references = ApplicationModel.defaultModel().getApplicationConfigManager().getReferences();
             Assertions.assertEquals(1, references.size());
 
         } finally {

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/propertyconfigurer/consumer/PropertyConfigurerTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.spring.api.HelloService;
 import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
-import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
+import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.AfterAll;
@@ -62,10 +62,10 @@ public void testEarlyInit() {
         try {
             providerContext.start();
 
-            ConcurrentMap<String, Set<URL>> tmp = ApplicationModel.getServiceRepository().getProviderUrlsWithoutGroup();
+            ConcurrentMap<String, Set<URL>> tmp = ApplicationModel.defaultModel().getApplicationServiceRepository().getProviderUrlsWithoutGroup();
             // reset ConfigManager of provider context
             DubboBootstrap.reset(false);
-            ApplicationModel.getServiceRepository().setProviderUrlsWithoutGroup(tmp);
+            ApplicationModel.defaultModel().getApplicationServiceRepository().setProviderUrlsWithoutGroup(tmp);
 
             try {
                 Thread.sleep(1000);

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/propertyconfigurer/consumer2/PropertySourcesConfigurerTest.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.dubbo.config.spring.api.HelloService;
 import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
 import org.apache.dubbo.config.spring.propertyconfigurer.consumer.DemoBeanFactoryPostProcessor;
-import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.config.spring.registrycenter.RegistryCenter;
+import org.apache.dubbo.config.spring.registrycenter.ZookeeperSingleRegistryCenter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.AfterAll;
@@ -68,10 +68,10 @@ public void testEarlyInit() {
             } catch (InterruptedException e) {
             }
 
-            ConcurrentMap<String, Set<URL>> tmp = ApplicationModel.getServiceRepository().getProviderUrlsWithoutGroup();
+            ConcurrentMap<String, Set<URL>> tmp = ApplicationModel.defaultModel().getApplicationServiceRepository().getProviderUrlsWithoutGroup();
             // reset ConfigManager of provider context
             DubboBootstrap.reset(false);
-            ApplicationModel.getServiceRepository().setProviderUrlsWithoutGroup(tmp);
+            ApplicationModel.defaultModel().getApplicationServiceRepository().setProviderUrlsWithoutGroup(tmp);
 
             // Resolve placeholder by PropertySourcesPlaceholderConfigurer in dubbo-consumer.xml, without import property source.
             AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class);

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandlerTest.java
Patch:
@@ -127,7 +127,7 @@ public void testMultiProtocol() {
         Map<String, ProtocolConfig> protocolConfigMap = ctx.getBeansOfType(ProtocolConfig.class);
         assertThat(protocolConfigMap.size(), is(2));
 
-        ConfigManager configManager = ApplicationModel.getConfigManager();
+        ConfigManager configManager = ApplicationModel.defaultModel().getApplicationConfigManager();
         Collection<ProtocolConfig> protocolConfigs = configManager.getProtocols();
         assertThat(protocolConfigs.size(), is(2));
 
@@ -176,7 +176,7 @@ public void testTimeoutConfig() {
         ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(resourcePath + "/provider-nested-service.xml");
         ctx.start();
 
-        ConfigManager configManager = ApplicationModel.getConfigManager();
+        ConfigManager configManager = ApplicationModel.defaultModel().getApplicationConfigManager();
         Collection<ProviderConfig> providerConfigs = configManager.getProviders();
         Assertions.assertEquals(2, providerConfigs.size());
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/DataSourceStatusCheckerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.status.Status;
 import org.apache.dubbo.config.spring.ServiceBean;
-import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;
+import org.apache.dubbo.config.spring.extension.SpringExtensionInjector;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -50,7 +50,7 @@ public class DataSourceStatusCheckerTest {
 
     @BeforeEach
     public void setUp() throws Exception {
-        SpringExtensionFactory.clearContexts();
+        SpringExtensionInjector.clearContexts();
         initMocks(this);
         this.dataSourceStatusChecker = new DataSourceStatusChecker();
         new ServiceBean<Object>().setApplicationContext(applicationContext);

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataConstants.java
Patch:
@@ -23,8 +23,8 @@ public class MetadataConstants {
     public static final String META_DATA_STORE_TAG = ".metaData";
     public static final String SERVICE_META_DATA_STORE_TAG = ".smd";
     public static final String CONSUMER_META_DATA_STORE_TAG = ".cmd";
-    public static final String METADATA_PUBLISH_DELAY_KEY = "dubbo.application.metadata.delay";
+    public static final String METADATA_PUBLISH_DELAY_KEY = "dubbo.application.metadata.publish.delay";
     public static final int DEFAULT_METADATA_PUBLISH_DELAY = 10000;
-    public static final String METADATA_PROXY_TIMEOUT_KEY = "dubbo.application.metadata.delay";
+    public static final String METADATA_PROXY_TIMEOUT_KEY = "dubbo.application.metadata.proxy.delay";
     public static final int DEFAULT_METADATA_TIMEOUT_VALUE = 5000;
 }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataServiceExporter.java
Patch:
@@ -24,6 +24,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_METADATA_STORAGE_TYPE;
 import static org.apache.dubbo.common.extension.ExtensionLoader.getExtensionLoader;
+import static org.apache.dubbo.common.extension.ExtensionScope.APPLICATION;
 
 /**
  * The exporter of {@link MetadataService}
@@ -33,7 +34,7 @@
  * @see #unexport()
  * @since 2.7.5
  */
-@SPI(DEFAULT_METADATA_STORAGE_TYPE)
+@SPI(value = DEFAULT_METADATA_STORAGE_TYPE, scope = APPLICATION)
 public interface MetadataServiceExporter extends Prioritized {
 
     /**

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/ServiceNameMappingTest.java
Patch:
@@ -64,13 +64,13 @@ public void init() {
 
         applicationName = getClass().getSimpleName();
 
-        ApplicationModel.getConfigManager().setApplication(new ApplicationConfig(applicationName));
+        ApplicationModel.defaultModel().getConfigManager().setApplication(new ApplicationConfig(applicationName));
 
         configuration = new FileSystemDynamicConfiguration();
 
         FileUtils.deleteQuietly(configuration.getRootDirectory());
 
-        ApplicationModel.getEnvironment().setDynamicConfiguration(configuration);
+        ApplicationModel.defaultModel().getEnvironment().setDynamicConfiguration(configuration);
 
         serviceNameMapping = getDefaultExtension();
     }

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/report/support/AbstractMetadataReportTest.java
Patch:
@@ -73,7 +73,7 @@ public void before() {
         URL url = URL.valueOf("zookeeper://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService?version=1.0.0&application=vic");
         abstractMetadataReport = new NewMetadataReport(url);
         // set the simple name of current class as the application name
-        ApplicationModel.getConfigManager().setApplication(new ApplicationConfig(getClass().getSimpleName()));
+        ApplicationModel.defaultModel().getConfigManager().setApplication(new ApplicationConfig(getClass().getSimpleName()));
     }
 
     @AfterEach

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/BaseOffline.java
Patch:
@@ -34,7 +34,7 @@
 public class BaseOffline implements BaseCommand {
     private Logger logger = LoggerFactory.getLogger(OfflineInterface.class);
     public static RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();
-    public static ServiceRepository serviceRepository = ApplicationModel.getServiceRepository();
+    public static ServiceRepository serviceRepository = ApplicationModel.defaultModel().getApplicationServiceRepository();
 
     @Override
     public String execute(CommandContext commandContext, String[] args) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/BaseOnline.java
Patch:
@@ -35,7 +35,7 @@
 public class BaseOnline implements BaseCommand {
     private static final Logger logger = LoggerFactory.getLogger(Online.class);
     public static RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();
-    public static ServiceRepository serviceRepository = ApplicationModel.getServiceRepository();
+    public static ServiceRepository serviceRepository = ApplicationModel.defaultModel().getApplicationServiceRepository();
 
     @Override
     public String execute(CommandContext commandContext, String[] args) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/InvokeTelnet.java
Patch:
@@ -87,7 +87,7 @@ public String execute(CommandContext commandContext, String[] args) {
             selectedProvider = channel.attr(INVOKE_METHOD_PROVIDER_KEY).get();
             invokeMethod = channel.attr(SelectTelnet.SELECT_METHOD_KEY).get();
         } else {
-            for (ProviderModel provider : ApplicationModel.allProviderModels()) {
+            for (ProviderModel provider : ApplicationModel.defaultModel().allProviderModels()) {
                 if (!isServiceMatch(service, provider)) {
                     continue;
                 }

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Live.java
Patch:
@@ -33,7 +33,7 @@ public class Live implements BaseCommand {
     @Override
     public String execute(CommandContext commandContext, String[] args) {
         URL url = URL.valueOf("application://")
-                .addParameter(CommonConstants.QOS_LIVE_PROBE_EXTENSION, ApplicationModel.getApplicationConfig().getLivenessProbe());
+                .addParameter(CommonConstants.QOS_LIVE_PROBE_EXTENSION, ApplicationModel.defaultModel().getCurrentConfig().getLivenessProbe());
         List<LivenessProbe> livenessProbes = ExtensionLoader.getExtensionLoader(LivenessProbe.class)
                 .getActivateExtension(url, CommonConstants.QOS_LIVE_PROBE_EXTENSION);
         if (!livenessProbes.isEmpty()) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Ls.java
Patch:
@@ -43,7 +43,7 @@ public String execute(CommandContext commandContext, String[] args) {
     public String listProvider() {
         StringBuilder stringBuilder = new StringBuilder();
         stringBuilder.append("As Provider side:" + System.lineSeparator());
-        Collection<ProviderModel> providerModelList = ApplicationModel.allProviderModels();
+        Collection<ProviderModel> providerModelList = ApplicationModel.defaultModel().allProviderModels();
 
         TTable tTable = new TTable(new TTable.ColumnDefine[]{
                 new TTable.ColumnDefine(TTable.Align.MIDDLE),
@@ -65,7 +65,7 @@ public String listProvider() {
     public String listConsumer() {
         StringBuilder stringBuilder = new StringBuilder();
         stringBuilder.append("As Consumer side:" + System.lineSeparator());
-        Collection<ConsumerModel> consumerModelList = ApplicationModel.allConsumerModels();
+        Collection<ConsumerModel> consumerModelList = ApplicationModel.defaultModel().allConsumerModels();
 
         TTable tTable = new TTable(new TTable.ColumnDefine[]{
                 new TTable.ColumnDefine(TTable.Align.MIDDLE),

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Ready.java
Patch:
@@ -33,7 +33,7 @@ public class Ready implements BaseCommand {
     @Override
     public String execute(CommandContext commandContext, String[] args) {
         URL url = URL.valueOf("application://")
-                .addParameter(CommonConstants.QOS_READY_PROBE_EXTENSION, ApplicationModel.getApplicationConfig().getReadinessProbe());
+                .addParameter(CommonConstants.QOS_READY_PROBE_EXTENSION, ApplicationModel.defaultModel().getCurrentConfig().getReadinessProbe());
         List<ReadinessProbe> readinessProbes = ExtensionLoader.getExtensionLoader(ReadinessProbe.class)
                 .getActivateExtension(url, CommonConstants.QOS_READY_PROBE_EXTENSION);
         if (!readinessProbes.isEmpty()) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Startup.java
Patch:
@@ -33,7 +33,7 @@ public class Startup implements BaseCommand {
     @Override
     public String execute(CommandContext commandContext, String[] args) {
         URL url = URL.valueOf("application://")
-                .addParameter(CommonConstants.QOS_STARTUP_PROBE_EXTENSION, ApplicationModel.getApplicationConfig().getStartupProbe());
+                .addParameter(CommonConstants.QOS_STARTUP_PROBE_EXTENSION, ApplicationModel.defaultModel().getCurrentConfig().getStartupProbe());
         List<StartupProbe> startupProbes = ExtensionLoader.getExtensionLoader(StartupProbe.class)
                 .getActivateExtension(url, CommonConstants.QOS_STARTUP_PROBE_EXTENSION);
         if (!startupProbes.isEmpty()) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/probe/impl/ProviderReadinessProbe.java
Patch:
@@ -27,7 +27,7 @@
 
 @Activate
 public class ProviderReadinessProbe implements ReadinessProbe {
-    private static ServiceRepository serviceRepository = ApplicationModel.getServiceRepository();
+    private static ServiceRepository serviceRepository = ApplicationModel.defaultModel().getApplicationServiceRepository();
 
     @Override
     public boolean check() {

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/InvokeTelnetTest.java
Patch:
@@ -46,14 +46,15 @@ public class InvokeTelnetTest {
     private Channel mockChannel;
     private CommandContext mockCommandContext;
     private final DefaultAttributeMap defaultAttributeMap = new DefaultAttributeMap();
-    private final ServiceRepository repository = ApplicationModel.getServiceRepository();
+    private ServiceRepository repository;
 
     @BeforeEach
     public void setup() {
         DubboBootstrap.reset();
         mockChannel = mock(Channel.class);
         mockCommandContext = mock(CommandContext.class);
         given(mockCommandContext.getRemote()).willReturn(mockChannel);
+        repository = ApplicationModel.defaultModel().getApplicationServiceRepository();
     }
 
     @AfterEach

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/LsTest.java
Patch:
@@ -52,7 +52,7 @@
 //        when(providerUrl.toFullString()).thenReturn("dubbo://localhost:8888/org.apache.dubbo.BarService");
 //        when(providerInvoker.getUrl()).thenReturn(providerUrl);
 //        ApplicationModel.registerProviderInvoker(providerInvoker, registryUrl, providerUrl);
-//        for (ProviderInvokerWrapper wrapper : ApplicationModel.getProviderInvokers("org.apache.dubbo.BarService")) {
+//        for (ProviderInvokerWrapper wrapper : ApplicationModel.defaultModel().getProviderInvokers("org.apache.dubbo.BarService")) {
 //            wrapper.setReg(true);
 //        }
 //

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/OfflineTest.java
Patch:
@@ -47,7 +47,7 @@
 //        when(providerUrl.toFullString()).thenReturn("dubbo://localhost:8888/org.apache.dubbo.BarService");
 //        when(providerInvoker.getUrl()).thenReturn(providerUrl);
 //        ApplicationModel.registerProviderInvoker(providerInvoker, registryUrl, providerUrl);
-//        for (ProviderInvokerWrapper wrapper : ApplicationModel.getProviderInvokers("org.apache.dubbo.BarService")) {
+//        for (ProviderInvokerWrapper wrapper : ApplicationModel.defaultModel().getProviderInvokers("org.apache.dubbo.BarService")) {
 //            wrapper.setReg(true);
 //        }
 //
@@ -58,7 +58,7 @@
 //        String output = offline.execute(mock(CommandContext.class), new String[]{"org.apache.dubbo.BarService"});
 //        assertThat(output, containsString("OK"));
 //        Mockito.verify(registry).unregister(providerUrl);
-//        for (ProviderInvokerWrapper wrapper : ApplicationModel.getProviderInvokers("org.apache.dubbo.BarService")) {
+//        for (ProviderInvokerWrapper wrapper : ApplicationModel.defaultModel().getProviderInvokers("org.apache.dubbo.BarService")) {
 //            assertThat(wrapper.isReg(), is(false));
 //        }
 //

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/OnlineTest.java
Patch:
@@ -53,7 +53,7 @@
 //        Online online = new Online();
 //        String output = online.execute(mock(CommandContext.class), new String[]{"org.apache.dubbo.BarService"});
 //        assertThat(output, equalTo("OK"));
-//        for (ProviderInvokerWrapper wrapper : ApplicationModel.getProviderInvokers("org.apache.dubbo.BarService")) {
+//        for (ProviderInvokerWrapper wrapper : ApplicationModel.defaultModel().getProviderInvokers("org.apache.dubbo.BarService")) {
 //            assertTrue(wrapper.isReg());
 //        }
 //    }

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/SelectTelnetTest.java
Patch:
@@ -49,7 +49,7 @@ public class SelectTelnetTest {
     private Channel mockChannel;
     private CommandContext mockCommandContext;
 
-    private final ServiceRepository repository = ApplicationModel.getServiceRepository();
+    private final ServiceRepository repository = ApplicationModel.defaultModel().getApplicationServiceRepository();
     private final DefaultAttributeMap defaultAttributeMap = new DefaultAttributeMap();
     private List<Method> methods;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryFactory.java
Patch:
@@ -20,12 +20,14 @@
 import org.apache.dubbo.common.extension.Adaptive;
 import org.apache.dubbo.common.extension.SPI;
 
+import static org.apache.dubbo.common.extension.ExtensionScope.APPLICATION;
+
 /**
  * RegistryFactory. (SPI, Singleton, ThreadSafe)
  *
  * @see org.apache.dubbo.registry.support.AbstractRegistryFactory
  */
-@SPI("dubbo")
+@SPI(value = "dubbo", scope = APPLICATION)
 public interface RegistryFactory {
 
     /**

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/RegistryClusterIdentifier.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.extension.SPI;
+import org.apache.dubbo.rpc.model.ScopeModelUtil;
 
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_CLUSTER_TYPE_KEY;
 
@@ -30,7 +31,7 @@ public interface RegistryClusterIdentifier {
 
     static RegistryClusterIdentifier getExtension(URL url) {
         ExtensionLoader<RegistryClusterIdentifier> loader
-                = ExtensionLoader.getExtensionLoader(RegistryClusterIdentifier.class);
+                = ScopeModelUtil.getExtensionLoader(RegistryClusterIdentifier.class, url.getScopeModel());
         return loader.getExtension(url.getParameter(REGISTRY_CLUSTER_TYPE_KEY, "default"));
     }
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscovery.java
Patch:
@@ -35,13 +35,14 @@
 import static java.util.Collections.unmodifiableList;
 import static java.util.Collections.unmodifiableMap;
 import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_DELAY_NOTIFICATION_KEY;
+import static org.apache.dubbo.common.extension.ExtensionScope.APPLICATION;
 
 /**
  * The common operations of Service Discovery
  *
  * @since 2.7.5
  */
-@SPI("zookeeper")
+@SPI(value = "zookeeper", scope = APPLICATION)
 public interface ServiceDiscovery extends Prioritized {
 
     // ==================================== Lifecycle ==================================== //

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceInstanceCustomizer.java
Patch:
@@ -19,13 +19,15 @@
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.common.lang.Prioritized;
 
+import static org.apache.dubbo.common.extension.ExtensionScope.APPLICATION;
+
 /**
  * The interface to customize {@link ServiceInstance the service instance}
  *
  * @see ServiceInstance#getMetadata()
  * @since 2.7.5
  */
-@SPI
+@SPI(scope = APPLICATION)
 public interface ServiceInstanceCustomizer extends Prioritized {
 
     /**

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListener.java
Patch:
@@ -335,7 +335,7 @@ protected MetadataInfo doGetMetadataInfo(ServiceInstance instance) {
                 logger.debug("Instance " + instance.getAddress() + " is using metadata type " + metadataType);
             }
             if (REMOTE_METADATA_STORAGE_TYPE.equals(metadataType)) {
-                RemoteMetadataServiceImpl remoteMetadataService = MetadataUtils.getRemoteMetadataService();
+                RemoteMetadataServiceImpl remoteMetadataService = MetadataUtils.getRemoteMetadataService(instance.getApplicationModel());
                 metadataInfo = remoteMetadataService.getMetadata(instance);
             } else {
                 // change the instance used to communicate to avoid all requests route to the same instance

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceURLParamsMetadataCustomizer.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Map;
 
 import static org.apache.dubbo.common.utils.StringUtils.isBlank;
-import static org.apache.dubbo.metadata.WritableMetadataService.getDefaultExtension;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.METADATA_SERVICE_URL_PARAMS_PROPERTY_NAME;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter;
 
@@ -50,7 +49,7 @@ private String resolveMetadataPropertyName(ServiceInstance serviceInstance) {
     }
 
     private String resolveMetadataPropertyValue(ServiceInstance serviceInstance) {
-        WritableMetadataService writableMetadataService = getDefaultExtension();
+        WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension(serviceInstance.getApplicationModel());
         return getMetadataServiceParameter(writableMetadataService.getMetadataServiceURL());
     }
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ProtocolPortsMetadataCustomizer.java
Patch:
@@ -36,7 +36,7 @@ public class ProtocolPortsMetadataCustomizer implements ServiceInstanceCustomize
 
     @Override
     public void customize(ServiceInstance serviceInstance) {
-        WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension();
+        WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension(serviceInstance.getApplicationModel());
 
         Map<String, Integer> protocols = new HashMap<>();
         writableMetadataService.getExportedServiceURLs()

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtils.java
Patch:
@@ -222,7 +222,7 @@ public static void calInstanceRevision(ServiceDiscovery serviceDiscovery, Servic
         if (registryCluster == null) {
             registryCluster = DEFAULT_KEY;
         }
-        WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension();
+        WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension(instance.getApplicationModel());
         MetadataInfo metadataInfo = writableMetadataService.getMetadataInfos().get(registryCluster);
         if (metadataInfo == null) {
             metadataInfo = ((InMemoryWritableMetadataService) writableMetadataService).getDefaultMetadataInfo();
@@ -294,8 +294,8 @@ public static void customizeInstance(ServiceInstance instance) {
 
     private static void reportMetadataToRemote(ServiceInstance serviceInstance) {
         if (REMOTE_METADATA_STORAGE_TYPE.equalsIgnoreCase(getMetadataStorageType(serviceInstance))) {
-            RemoteMetadataServiceImpl remoteMetadataService = MetadataUtils.getRemoteMetadataService();
-            remoteMetadataService.publishMetadata(serviceInstance.getServiceName());
+            RemoteMetadataServiceImpl remoteMetadataService = MetadataUtils.getRemoteMetadataService(serviceInstance.getApplicationModel());
+            remoteMetadataService.publishMetadata(serviceInstance.getApplicationModel().getApplicationName());
         }
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/DefaultMigrationAddressComparator.java
Patch:
@@ -68,7 +68,7 @@ public <T> boolean shouldMigrate(ClusterInvoker<T> newInvoker, ClusterInvoker<T>
         if (configedThreshold != null && configedThreshold >= 0) {
             rawThreshold = String.valueOf(configedThreshold);
         }
-        rawThreshold = StringUtils.isNotEmpty(rawThreshold) ? rawThreshold : ConfigurationUtils.getCachedDynamicProperty(MIGRATION_THRESHOLD, DEFAULT_THRESHOLD_STRING);
+        rawThreshold = StringUtils.isNotEmpty(rawThreshold) ? rawThreshold : ConfigurationUtils.getCachedDynamicProperty(newInvoker.getUrl().getScopeModel(), MIGRATION_THRESHOLD, DEFAULT_THRESHOLD_STRING);
         float threshold;
         try {
             threshold = Float.parseFloat(rawThreshold);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/InterfaceCompatibleRegistryProtocol.java
Patch:
@@ -60,7 +60,7 @@ public <T> ClusterInvoker<T> getInvoker(Cluster cluster, Registry registry, Clas
 
     @Override
     public <T> ClusterInvoker<T> getServiceDiscoveryInvoker(Cluster cluster, Registry registry, Class<T> type, URL url) {
-        registry = registryFactory.getRegistry(super.getRegistryUrl(url));
+        registry = getRegistry(super.getRegistryUrl(url));
         DynamicDirectory<T> directory = new ServiceDiscoveryRegistryDirectory<>(type, url);
         return doCreateInvoker(directory, cluster, registry, type);
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocolListener.java
Patch:
@@ -21,11 +21,13 @@
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.cluster.ClusterInvoker;
 
+import static org.apache.dubbo.common.extension.ExtensionScope.APPLICATION;
+
 /**
  * RegistryProtocol listener is introduced to provide a chance to user to customize or change export and refer behavior
  * of RegistryProtocol. For example: re-export or re-refer on the fly when certain condition meets.
  */
-@SPI
+@SPI(scope = APPLICATION)
 public interface RegistryProtocolListener {
     /**
      * Notify RegistryProtocol's listeners when a service is registered

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -37,9 +37,9 @@
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.stream.Collectors;
 
+import static org.apache.dubbo.common.constants.CommonConstants.CHECK_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMESTAMP_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.CHECK_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/InstanceAddressURLTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.metadata.MetadataInfo;
 import org.apache.dubbo.registry.ProviderFirstParams;
 import org.apache.dubbo.rpc.RpcServiceContext;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -64,7 +65,7 @@ public class InstanceAddressURLTest {
         "&version=1.0.0&timeout=9000&a.timeout=8888&dubbo.tag=consumer&protocol=dubbo");
 
     private DefaultServiceInstance createInstance() {
-        DefaultServiceInstance instance = new DefaultServiceInstance("demo-provider", "127.0.0.1", 8080);
+        DefaultServiceInstance instance = new DefaultServiceInstance("demo-provider", "127.0.0.1", 8080, ApplicationModel.defaultModel());
         Map<String, String> metadata = instance.getMetadata();
         metadata.put("key1", "value1");
         metadata.put("key2", "value2");

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/MetadataServiceURLBuilderTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.registry.client.DefaultServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstance;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 /**
  * {@link MetadataServiceURLBuilder} Test
@@ -26,7 +27,7 @@
  */
 public class MetadataServiceURLBuilderTest {
 
-    static ServiceInstance serviceInstance = new DefaultServiceInstance("127.0.0.1", "test", 8080);
+    static ServiceInstance serviceInstance = new DefaultServiceInstance("127.0.0.1", "test", 8080, ApplicationModel.defaultModel());
 
     static {
         serviceInstance.getMetadata().put("dubbo.metadata-service.urls", "[ \"dubbo://192.168.0.102:20881/com.alibaba.cloud.dubbo.service.DubboMetadataService?anyhost=true&application=spring-cloud-alibaba-dubbo-provider&bind.ip=192.168.0.102&bind.port=20881&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&group=spring-cloud-alibaba-dubbo-provider&interface=com.alibaba.cloud.dubbo.service.DubboMetadataService&methods=getAllServiceKeys,getServiceRestMetadata,getExportedURLs,getAllExportedURLs&pid=17134&qos.enable=false&register=true&release=2.7.3&revision=1.0.0&side=provider&timestamp=1564826098503&version=1.0.0\" ]");

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/ProtocolPortsMetadataCustomizerTest.java
Patch:
@@ -53,7 +53,7 @@ public class ProtocolPortsMetadataCustomizerTest {
     private InMemoryWritableMetadataService metadataService;
 
     public static DefaultServiceInstance createInstance() {
-        return new DefaultServiceInstance("A", "127.0.0.1", 20880);
+        return new DefaultServiceInstance("A", "127.0.0.1", 20880, ApplicationModel.defaultModel());
     }
 
     @BeforeAll
@@ -86,7 +86,7 @@ public void init() {
     public void test() {
         ProtocolPortsMetadataCustomizer customizer = new ProtocolPortsMetadataCustomizer();
         try (MockedStatic<WritableMetadataService> mockMetadataService = Mockito.mockStatic(WritableMetadataService.class)) {
-            mockMetadataService.when(() -> WritableMetadataService.getDefaultExtension()).thenReturn(metadataService);
+            mockMetadataService.when(() -> WritableMetadataService.getDefaultExtension(ApplicationModel.defaultModel())).thenReturn(metadataService);
             customizer.customize(instance);
             String endpoints = instance.getMetadata().get(ENDPOINTS);
             assertNotNull(endpoints);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataCustomizerTest.java
Patch:
@@ -48,7 +48,7 @@ public class ServiceInstanceMetadataCustomizerTest {
     private InMemoryWritableMetadataService metadataService;
 
     public static DefaultServiceInstance createInstance() {
-        return new DefaultServiceInstance("A", "127.0.0.1", 20880);
+        return new DefaultServiceInstance("A", "127.0.0.1", 20880, ApplicationModel.defaultModel());
     }
 
     @BeforeAll
@@ -81,8 +81,8 @@ public void test() {
         ServiceInstanceMetadataCustomizer customizer = new ServiceInstanceMetadataCustomizer();
         try (MockedStatic<ConfigurationUtils> mockedUtils = Mockito.mockStatic(ConfigurationUtils.class)) {
             try (MockedStatic<WritableMetadataService> mockMetadataService = Mockito.mockStatic(WritableMetadataService.class)) {
-                mockMetadataService.when(() -> WritableMetadataService.getDefaultExtension()).thenReturn(metadataService);
-                mockedUtils.when(() -> ConfigurationUtils.getProperty(DUBBO_LABELS)).thenReturn("k1=v1;k2=v2");
+                mockMetadataService.when(() -> WritableMetadataService.getDefaultExtension(ApplicationModel.defaultModel())).thenReturn(metadataService);
+                mockedUtils.when(() -> ConfigurationUtils.getProperty(ApplicationModel.defaultModel(), DUBBO_LABELS)).thenReturn("k1=v1;k2=v2");
 //            mockedUtils.when(() -> ConfigurationUtils.getProperty(DUBBO_ENV_KEYS)).thenReturn("ENV_KEY1;ENV_KEY1");
 //            mockedUtils.when(() -> ConfigurationUtils.getProperty(ENV_KEY1)).thenReturn("");
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/SpringCloudMetadataServiceURLBuilderTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.registry.client.DefaultServiceInstance;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.Test;
 
@@ -37,7 +38,7 @@ public class SpringCloudMetadataServiceURLBuilderTest {
 
     @Test
     public void testBuild() {
-        List<URL> urls = builder.build(new DefaultServiceInstance("127.0.0.1", "test", 8080));
+        List<URL> urls = builder.build(new DefaultServiceInstance("127.0.0.1", "test", 8080, ApplicationModel.defaultModel()));
         assertEquals(0, urls.size());
 
         urls = builder.build(serviceInstance);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/store/InMemoryMetadataServiceTest.java
Patch:
@@ -69,6 +69,7 @@ public static void clearUp() {
     @Test
     public void testExport() {
         InMemoryWritableMetadataService metadataService = new InMemoryWritableMetadataService();
+        metadataService.setApplicationModel(ApplicationModel.defaultModel());
         // export normal url
         URL url = URL.valueOf("dubbo://30.225.21.30:20880/org.apache.dubbo.registry.service.DemoService?" +
             "REGISTRY_CLUSTER=registry1&anyhost=true&application=demo-provider2&delay=5000&deprecated=false&dubbo=2.0.2" +
@@ -155,6 +156,7 @@ public void run() {
     @Test
     public void testUnExport() {
         InMemoryWritableMetadataService metadataService = new InMemoryWritableMetadataService();
+        metadataService.setApplicationModel(ApplicationModel.defaultModel());
         // export normal url
         URL url = URL.valueOf("dubbo://30.225.21.30:20880/org.apache.dubbo.registry.service.DemoService?" +
             "REGISTRY_CLUSTER=registry1&anyhost=true&application=demo-provider2&delay=5000&deprecated=false&dubbo=2.0.2" +

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/MigrationInvokerTest.java
Patch:
@@ -39,9 +39,10 @@
 public class MigrationInvokerTest {
     @BeforeEach
     public void before() {
+        ApplicationModel.reset();
         ApplicationConfig applicationConfig = new ApplicationConfig();
         applicationConfig.setName("Test");
-        ApplicationModel.getConfigManager().setApplication(applicationConfig);
+        ApplicationModel.defaultModel().getApplicationConfigManager().setApplication(applicationConfig);
     }
 
     @AfterEach

File: dubbo-registry/dubbo-registry-dns/src/main/java/org/apache/dubbo/registry/dns/DNSServiceDiscovery.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dubbo.registry.dns.util.DNSClientConst;
 import org.apache.dubbo.registry.dns.util.DNSResolver;
 import org.apache.dubbo.registry.dns.util.ResolveResult;
+import org.apache.dubbo.rpc.model.ScopeModelUtil;
 
 import java.util.Collections;
 import java.util.Comparator;
@@ -142,7 +143,7 @@ private List<ServiceInstance> toServiceInstance(String serviceName, ResolveResul
         List<ServiceInstance> instanceList = new LinkedList<>();
 
         for (String host : resolveResult.getHostnameList()) {
-            DefaultServiceInstance serviceInstance = new DefaultServiceInstance(serviceName, host, port);
+            DefaultServiceInstance serviceInstance = new DefaultServiceInstance(serviceName, host, port, ScopeModelUtil.getApplicationModel(getUrl().getScopeModel()));
             fillServiceInstance(serviceInstance);
             instanceList.add(serviceInstance);
         }

File: dubbo-registry/dubbo-registry-kubernetes/src/main/java/org/apache/dubbo/registry/kubernetes/KubernetesServiceDiscovery.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener;
 import org.apache.dubbo.registry.kubernetes.util.KubernetesClientConst;
 import org.apache.dubbo.registry.kubernetes.util.KubernetesConfigUtils;
+import org.apache.dubbo.rpc.model.ScopeModelUtil;
 
 import com.alibaba.fastjson.JSONObject;
 import io.fabric8.kubernetes.api.model.EndpointAddress;
@@ -362,7 +363,7 @@ private List<ServiceInstance> toServiceInstance(Endpoints endpoints, String serv
                 }
 
                 instancePorts.forEach(port -> {
-                    ServiceInstance serviceInstance = new DefaultServiceInstance(serviceName, ip, port);
+                    ServiceInstance serviceInstance = new DefaultServiceInstance(serviceName, ip, port, ScopeModelUtil.getApplicationModel(getUrl().getScopeModel()));
 
                     String properties = pod.getMetadata().getAnnotations().get(KUBERNETES_PROPERTIES_KEY);
                     if (StringUtils.isNotEmpty(properties)) {

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosServiceDiscovery.java
Patch:
@@ -110,8 +110,8 @@ public Set<String> getServices() {
     @Override
     public List<ServiceInstance> getInstances(String serviceName) throws NullPointerException {
         return ThrowableFunction.execute(namingService, service ->
-                service.selectInstances(serviceName, Constants.DEFAULT_GROUP, true)
-                        .stream().map(NacosNamingServiceUtils::toServiceInstance)
+            service.selectInstances(serviceName, Constants.DEFAULT_GROUP, true)
+                .stream().map((i)->NacosNamingServiceUtils.toServiceInstance(registryURL, i))
                         .collect(Collectors.toList())
         );
     }
@@ -144,7 +144,7 @@ private void handleEvent(NamingEvent event, ServiceInstancesChangedListener list
         String serviceName = event.getServiceName();
         List<ServiceInstance> serviceInstances = event.getInstances()
                 .stream()
-                .map(NacosNamingServiceUtils::toServiceInstance)
+                .map((i)->NacosNamingServiceUtils.toServiceInstance(registryURL, i))
                 .collect(Collectors.toList());
         listener.onEvent(new ServiceInstancesChangedEvent(serviceName, serviceInstances));
     }

File: dubbo-registry/dubbo-registry-xds/src/main/java/org/apache/dubbo/registry/xds/XdsServiceDiscovery.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener;
 import org.apache.dubbo.registry.xds.util.PilotExchanger;
 import org.apache.dubbo.registry.xds.util.protocol.message.Endpoint;
+import org.apache.dubbo.rpc.model.ScopeModelUtil;
 
 import java.util.Collection;
 import java.util.Comparator;
@@ -74,7 +75,7 @@ private List<ServiceInstance> changedToInstances(String serviceName, Collection<
         List<ServiceInstance> instances = new LinkedList<>();
         endpoints.forEach(endpoint -> {
             try {
-                DefaultServiceInstance serviceInstance = new DefaultServiceInstance(serviceName, endpoint.getAddress(), endpoint.getPortValue());
+                DefaultServiceInstance serviceInstance = new DefaultServiceInstance(serviceName, endpoint.getAddress(), endpoint.getPortValue(), ScopeModelUtil.getApplicationModel(getUrl().getScopeModel()));
                 // fill metadata by SelfHostMetaServiceDiscovery, will be fetched by RPC request
                 fillServiceInstance(serviceInstance);
                 instances.add(serviceInstance);

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java
Patch:
@@ -119,7 +119,7 @@ public Set<String> getServices() {
 
     @Override
     public List<ServiceInstance> getInstances(String serviceName) throws NullPointerException {
-        return doInServiceDiscovery(s -> build(s.queryForInstances(serviceName)));
+        return doInServiceDiscovery(s -> build(registryURL, s.queryForInstances(serviceName)));
     }
 
     @Override
@@ -148,7 +148,7 @@ public Page<ServiceInstance> getInstances(String serviceName, int offset, int pa
                 for (int i = 0; i < pageSize; i++) {
                     if (iterator.hasNext()) {
                         String serviceId = iterator.next();
-                        ServiceInstance serviceInstance = build(serviceDiscovery.queryForInstance(serviceName, serviceId));
+                        ServiceInstance serviceInstance = build(registryURL, serviceDiscovery.queryForInstance(serviceName, serviceId));
                         serviceInstances.add(serviceInstance);
                     }
                 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/ChannelHandler.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.remoting;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 
@@ -25,7 +26,7 @@
  * @see org.apache.dubbo.remoting.Transporter#bind(org.apache.dubbo.common.URL, ChannelHandler)
  * @see org.apache.dubbo.remoting.Transporter#connect(org.apache.dubbo.common.URL, ChannelHandler)
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface ChannelHandler {
 
     /**

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Codec.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.remoting;
 
 import org.apache.dubbo.common.extension.Adaptive;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.io.IOException;
@@ -27,7 +28,7 @@
  * Codec. (SPI, Singleton, ThreadSafe)
  */
 @Deprecated
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface Codec {
 
     /**

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Codec2.java
Patch:
@@ -17,12 +17,13 @@
 package org.apache.dubbo.remoting;
 
 import org.apache.dubbo.common.extension.Adaptive;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.remoting.buffer.ChannelBuffer;
 
 import java.io.IOException;
 
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface Codec2 {
 
     @Adaptive({Constants.CODEC_KEY})

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Dispatcher.java
Patch:
@@ -18,13 +18,14 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Adaptive;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher;
 
 /**
  * ChannelHandlerWrapper (SPI, Singleton, ThreadSafe)
  */
-@SPI(AllDispatcher.NAME)
+@SPI(value = AllDispatcher.NAME, scope = ExtensionScope.FRAMEWORK)
 public interface Dispatcher {
 
     /**

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Transporter.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Adaptive;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
@@ -28,7 +29,7 @@
  *
  * @see org.apache.dubbo.remoting.Transporters
  */
-@SPI("netty")
+@SPI(value = "netty", scope = ExtensionScope.FRAMEWORK)
 public interface Transporter {
 
     /**

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/ConnectionManager.java
Patch:
@@ -17,12 +17,13 @@
 package org.apache.dubbo.remoting.api;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.remoting.RemotingException;
 
 import java.util.function.Consumer;
 
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface ConnectionManager {
 
     Connection connect(URL url) throws RemotingException;

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/WireProtocol.java
Patch:
@@ -16,12 +16,13 @@
  */
 package org.apache.dubbo.remoting.api;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import io.netty.channel.ChannelPipeline;
 import io.netty.handler.ssl.SslContext;
 
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface WireProtocol {
 
     ProtocolDetector detector();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/Exchanger.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Adaptive;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
@@ -29,7 +30,7 @@
  * <a href="http://en.wikipedia.org/wiki/Message_Exchange_Pattern">Message Exchange Pattern</a>
  * <a href="http://en.wikipedia.org/wiki/Request-response">Request-Response</a>
  */
-@SPI(HeaderExchanger.NAME)
+@SPI(value = HeaderExchanger.NAME, scope = ExtensionScope.FRAMEWORK)
 public interface Exchanger {
 
     /**

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java
Patch:
@@ -429,7 +429,7 @@ protected Object decodeEventData(Channel channel, ObjectInput in, byte[] eventBy
         try {
             if (eventBytes != null) {
                 int dataLen = eventBytes.length;
-                int threshold = ConfigurationUtils.getSystemConfiguration().getInt("deserialization.event.size", 50);
+                int threshold = ConfigurationUtils.getSystemConfiguration(channel.getUrl().getScopeModel()).getInt("deserialization.event.size", 50);
                 if (dataLen > threshold) {
                     throw new IllegalArgumentException("Event data too long, actual size " + threshold + ", threshold " + threshold + " rejected for security consideration.");
                 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/TelnetHandler.java
Patch:
@@ -16,14 +16,15 @@
  */
 package org.apache.dubbo.remoting.telnet;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.RemotingException;
 
 /**
  * TelnetHandler
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface TelnetHandler {
 
     /**

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/CodecSupport.java
Patch:
@@ -158,7 +158,8 @@ public static boolean isHeartBeat(byte[] payload, byte proto) {
     }
 
     public static void checkSerialization(String path, String version, Byte id) throws IOException {
-        ServiceRepository repository = ApplicationModel.getServiceRepository();
+        // TODO: fetch from FrameworkModel
+        ServiceRepository repository = ApplicationModel.defaultModel().getApplicationServiceRepository();
         Set<URL> urls = repository.lookupRegisteredProviderUrlsWithoutGroup(keyWithoutGroup(path, version));
         if (CollectionUtils.isEmpty(urls)) {
             throw new IOException("Service " + path + " with version " + version + " not found, invocation rejected.");

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/zookeeper/ZookeeperTransporter.java
Patch:
@@ -18,11 +18,12 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import static org.apache.dubbo.common.extension.ExtensionLoader.getExtensionLoader;
 
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface ZookeeperTransporter {
 
     String CURATOR_5 = "curator5";

File: dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/HttpBinder.java
Patch:
@@ -18,13 +18,14 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Adaptive;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.remoting.Constants;
 
 /**
  * HttpBinder
  */
-@SPI("jetty")
+@SPI(value = "jetty", scope = ExtensionScope.FRAMEWORK)
 public interface HttpBinder {
 
     /**

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/ExporterListener.java
Patch:
@@ -16,12 +16,13 @@
  */
 package org.apache.dubbo.rpc;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
  * ExporterListener. (SPI, Singleton, ThreadSafe)
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface ExporterListener {
 
     /**

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Protocol.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Adaptive;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.util.Collections;
@@ -26,7 +27,7 @@
 /**
  * Protocol. (API/SPI, Singleton, ThreadSafe)
  */
-@SPI("dubbo")
+@SPI(value = "dubbo", scope = ExtensionScope.FRAMEWORK)
 public interface Protocol {
 
     /**

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/ProxyFactory.java
Patch:
@@ -20,12 +20,13 @@
 import org.apache.dubbo.common.extension.Adaptive;
 import org.apache.dubbo.common.extension.SPI;
 
+import static org.apache.dubbo.common.extension.ExtensionScope.FRAMEWORK;
 import static org.apache.dubbo.rpc.Constants.PROXY_KEY;
 
 /**
  * ProxyFactory. (API/SPI, Singleton, ThreadSafe)
  */
-@SPI("javassist")
+@SPI(value = "javassist", scope = FRAMEWORK)
 public interface ProxyFactory {
 
     /**

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/ProtocolListenerWrapper.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
-import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.common.utils.UrlUtils;
 import org.apache.dubbo.rpc.Exporter;
@@ -30,6 +29,7 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.listener.ListenerExporterWrapper;
 import org.apache.dubbo.rpc.listener.ListenerInvokerWrapper;
+import org.apache.dubbo.rpc.model.ScopeModelUtil;
 
 import java.util.Collections;
 import java.util.List;
@@ -64,7 +64,7 @@ public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
             return protocol.export(invoker);
         }
         return new ListenerExporterWrapper<T>(protocol.export(invoker),
-                Collections.unmodifiableList(ExtensionLoader.getExtensionLoader(ExporterListener.class)
+                Collections.unmodifiableList(ScopeModelUtil.getExtensionLoader(ExporterListener.class, invoker.getUrl().getScopeModel())
                         .getActivateExtension(invoker.getUrl(), EXPORTER_LISTENER_KEY)));
     }
 
@@ -78,7 +78,7 @@ public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {
         if (StringUtils.isEmpty(url.getParameter(REGISTRY_CLUSTER_TYPE_KEY))) {
             invoker = new ListenerInvokerWrapper<>(invoker,
                     Collections.unmodifiableList(
-                            ExtensionLoader.getExtensionLoader(InvokerListener.class)
+                        ScopeModelUtil.getExtensionLoader(InvokerListener.class, invoker.getUrl().getScopeModel())
                                     .getActivateExtension(url, INVOKER_LISTENER_KEY)));
         }
         return invoker;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/ProtocolSerializationWrapper.java
Patch:
@@ -23,10 +23,11 @@
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProtocolServer;
 import org.apache.dubbo.rpc.RpcException;
-import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import java.util.List;
 
+import static org.apache.dubbo.rpc.model.ScopeModelUtil.getApplicationModel;
+
 @Activate
 public class ProtocolSerializationWrapper implements Protocol {
     private Protocol protocol;
@@ -42,7 +43,7 @@ public int getDefaultPort() {
 
     @Override
     public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
-        ApplicationModel.getServiceRepository().registerProviderUrl(invoker.getUrl());
+        getApplicationModel(invoker.getUrl().getScopeModel()).getApplicationServiceRepository().registerProviderUrl(invoker.getUrl());
         return protocol.export(invoker);
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/RpcUtilsTest.java
Patch:
@@ -368,7 +368,7 @@ public void testIsReturnTypeFuture() {
         RpcInvocation inv = new RpcInvocation("testReturnType", serviceName, "", new Class<?>[] {String.class}, null, null, invoker, null);
         Assertions.assertFalse(RpcUtils.isReturnTypeFuture(inv));
 
-        ServiceRepository repository = ApplicationModel.getServiceRepository();
+        ServiceRepository repository = ApplicationModel.defaultModel().getApplicationServiceRepository();
         repository.registerService(demoServiceClass);
 
         inv = new RpcInvocation("testReturnType4", serviceName, "", new Class<?>[] {String.class}, null, null, invoker, null);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.protocol.dubbo;
 
 
-import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.serialize.Cleanable;
@@ -123,7 +122,7 @@ public Object decode(Channel channel, InputStream input) throws IOException {
         setParameterTypesDesc(desc);
 
         try {
-            if (ConfigurationUtils.getSystemConfiguration().getBoolean(SERIALIZATION_SECURITY_CHECK_KEY, true)) {
+            if (Boolean.parseBoolean(System.getProperty(SERIALIZATION_SECURITY_CHECK_KEY, "true"))) {
                 CodecSupport.checkSerialization(path, version, serializationType);
             }
             Object[] args = DubboCodec.EMPTY_OBJECT_ARRAY;
@@ -132,7 +131,8 @@ public Object decode(Channel channel, InputStream input) throws IOException {
 //                if (RpcUtils.isGenericCall(path, getMethodName()) || RpcUtils.isEcho(path, getMethodName())) {
 //                    pts = ReflectUtils.desc2classArray(desc);
 //                } else {
-                ServiceRepository repository = ApplicationModel.getServiceRepository();
+                // TODO: fetch from FrameworkModel
+                ServiceRepository repository = ApplicationModel.defaultModel().getApplicationServiceRepository();
                 ServiceDescriptor serviceDescriptor = repository.lookupService(path);
                 if (serviceDescriptor != null) {
                     MethodDescriptor methodDescriptor = serviceDescriptor.getMethod(getMethodName(), desc);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java
Patch:
@@ -119,7 +119,7 @@ public void decode() throws Exception {
         if (!hasDecoded && channel != null && inputStream != null) {
             try {
                 if (invocation != null) {
-                    if (ConfigurationUtils.getSystemConfiguration().getBoolean(SERIALIZATION_SECURITY_CHECK_KEY, true)) {
+                    if (ConfigurationUtils.getSystemConfiguration(channel.getUrl().getScopeModel()).getBoolean(SERIALIZATION_SECURITY_CHECK_KEY, true)) {
                         Object serializationTypeObj = invocation.get(SERIALIZATION_ID_KEY);
                         if (serializationTypeObj != null) {
                             if ((byte) serializationTypeObj != serializationType) {
@@ -128,6 +128,7 @@ public void decode() throws Exception {
                         }
                     }
                 }
+
                 decode(channel, inputStream);
             } catch (Throwable e) {
                 if (log.isWarnEnabled()) {

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocolTest.java
Patch:
@@ -64,12 +64,12 @@ public class DubboProtocolTest {
     @AfterAll
     public static void after() {
         ProtocolUtils.closeAll();
-        ApplicationModel.getServiceRepository().unregisterService(DemoService.class);
+        ApplicationModel.defaultModel().getApplicationServiceRepository().unregisterService(DemoService.class);
     }
 
     @BeforeAll
     public static void setup() {
-        ApplicationModel.getServiceRepository().registerService(DemoService.class);
+        ApplicationModel.defaultModel().getApplicationServiceRepository().registerService(DemoService.class);
     }
 
     @Test
@@ -165,7 +165,7 @@ public void testDubboProtocolMultiService() throws Exception {
 
         RemoteService remote = new RemoteServiceImpl();
 
-        ApplicationModel.getServiceRepository().registerService(RemoteService.class);
+        ApplicationModel.defaultModel().getApplicationServiceRepository().registerService(RemoteService.class);
 
         int port = NetUtils.getAvailablePort();
         protocol.export(proxy.getInvoker(remote, RemoteService.class, URL.valueOf("dubbo://127.0.0.1:" + port + "/" + RemoteService.class.getName())));

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/MultiThreadTest.java
Patch:
@@ -44,12 +44,12 @@ public class MultiThreadTest {
     @AfterEach
     public void after() {
         ProtocolUtils.closeAll();
-        ApplicationModel.getServiceRepository().destroy();
+        ApplicationModel.defaultModel().getApplicationServiceRepository().destroy();
     }
 
     @Test
     public void testDubboMultiThreadInvoke() throws Exception {
-        ApplicationModel.getServiceRepository().registerService("TestService", DemoService.class);
+        ApplicationModel.defaultModel().getApplicationServiceRepository().registerService("TestService", DemoService.class);
         int port = NetUtils.getAvailablePort();
         Exporter<?> rpcExporter = protocol.export(proxy.getInvoker(new DemoServiceImpl(), DemoService.class, URL.valueOf("dubbo://127.0.0.1:" + port + "/TestService")));
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/RpcFilterTest.java
Patch:
@@ -45,7 +45,7 @@ public void testRpcFilter() throws Exception {
         DemoService service = new DemoServiceImpl();
         int port = NetUtils.getAvailablePort();
         URL url = URL.valueOf("dubbo://127.0.0.1:" + port + "/org.apache.dubbo.rpc.protocol.dubbo.support.DemoService?service.filter=echo");
-        ApplicationModel.getServiceRepository().registerService(DemoService.class);
+        ApplicationModel.defaultModel().getApplicationServiceRepository().registerService(DemoService.class);
         protocol.export(proxy.getInvoker(service, DemoService.class, url));
         service = proxy.getProxy(protocol.refer(DemoService.class, url));
         Assertions.assertEquals("123", service.echo("123"));

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/decode/DubboTelnetDecodeTest.java
Patch:
@@ -69,13 +69,13 @@ public class DubboTelnetDecodeTest {
 
     @BeforeAll
     public static void setup() {
-        ApplicationModel.getServiceRepository().destroy();
-        ApplicationModel.getServiceRepository().registerService(DemoService.class);
+        ApplicationModel.defaultModel().getApplicationServiceRepository().destroy();
+        ApplicationModel.defaultModel().getApplicationServiceRepository().registerService(DemoService.class);
     }
 
     @AfterAll
     public static void teardown() {
-        ApplicationModel.getServiceRepository().destroy();
+        ApplicationModel.defaultModel().getApplicationServiceRepository().destroy();
     }
 
     /**

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/EnumBak.java
Patch:
@@ -47,7 +47,7 @@ public void testNormal() {
         );
         DemoService demo = new DemoServiceImpl();
 
-        ApplicationModel.getServiceRepository().registerService("test", DemoService.class);
+        ApplicationModel.defaultModel().getApplicationServiceRepository().registerService("test", DemoService.class);
 
         Invoker<DemoService> invoker = proxy.getInvoker(demo, DemoService.class, serviceurl);
         protocol.export(invoker);
@@ -93,7 +93,7 @@ public void testNormalEnum() {
         );
         DemoService demo = new DemoServiceImpl();
 
-        ApplicationModel.getServiceRepository().registerService("test", DemoService.class);
+        ApplicationModel.defaultModel().getApplicationServiceRepository().registerService("test", DemoService.class);
 
         Invoker<DemoService> invoker = proxy.getInvoker(demo, DemoService.class, serviceurl);
         protocol.export(invoker);
@@ -117,7 +117,7 @@ public void testEnumCompat() {
         URL consumerurl = URL.valueOf("dubbo://127.0.0.1:" + port + "/test?timeout=" + Integer.MAX_VALUE
         );
 
-        ApplicationModel.getServiceRepository().registerService(DemoService.class);
+        ApplicationModel.defaultModel().getApplicationServiceRepository().registerService(DemoService.class);
 
         Invoker<DemoService> reference = protocol.refer(DemoService.class, consumerurl);
         DemoService demoProxy = (DemoService) proxy.getProxy(reference);

File: dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/GrpcOptionsUtils.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.config.SslConfig;
 import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.rpc.model.ScopeModelUtil;
 import org.apache.dubbo.rpc.protocol.grpc.interceptors.ClientInterceptor;
 import org.apache.dubbo.rpc.protocol.grpc.interceptors.GrpcConfigurator;
 import org.apache.dubbo.rpc.protocol.grpc.interceptors.ServerInterceptor;
@@ -153,7 +153,7 @@ static CallOptions buildCallOptions(URL url) {
     }
 
     private static SslContext buildServerSslContext(URL url) {
-        ConfigManager globalConfigManager = ApplicationModel.getConfigManager();
+        ConfigManager globalConfigManager = ScopeModelUtil.getApplicationModel(url.getScopeModel()).getApplicationConfigManager();
         SslConfig sslConfig = globalConfigManager.getSsl().orElseThrow(() -> new IllegalStateException("Ssl enabled, but no ssl cert information provided!"));
 
         SslContextBuilder sslClientContextBuilder = null;
@@ -183,7 +183,7 @@ private static SslContext buildServerSslContext(URL url) {
     }
 
     private static SslContext buildClientSslContext(URL url) {
-        ConfigManager globalConfigManager = ApplicationModel.getConfigManager();
+        ConfigManager globalConfigManager = ScopeModelUtil.getApplicationModel(url.getScopeModel()).getApplicationConfigManager();
         SslConfig sslConfig = globalConfigManager.getSsl().orElseThrow(() -> new IllegalStateException("Ssl enabled, but no ssl cert information provided!"));
 
 

File: dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/interceptors/ClientInterceptor.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.dubbo.rpc.protocol.grpc.interceptors;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
  * Adapt to the standard Dubbo SPI, so that we can leverage the advantages of Dubbo ExtensionLoader.
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface ClientInterceptor extends io.grpc.ClientInterceptor {
 }

File: dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/interceptors/GrpcConfigurator.java
Patch:
@@ -17,13 +17,14 @@
 package org.apache.dubbo.rpc.protocol.grpc.interceptors;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import io.grpc.CallOptions;
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.netty.NettyServerBuilder;
 
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface GrpcConfigurator {
 
     default NettyServerBuilder configureServerBuilder(NettyServerBuilder builder, URL url) {

File: dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/interceptors/ServerInterceptor.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.dubbo.rpc.protocol.grpc.interceptors;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
  * Adapt to the standard Dubbo SPI, so that we can leverage the advantages of Dubbo ExtensionLoader.
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface ServerInterceptor extends io.grpc.ServerInterceptor {
 }

File: dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/interceptors/ServerTransportFilter.java
Patch:
@@ -16,12 +16,13 @@
  */
 package org.apache.dubbo.rpc.protocol.grpc.interceptors;
 
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 /**
  * Adapt to the standard Dubbo SPI, so that we can leverage the advantages of Dubbo ExtensionLoader.
  */
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface ServerTransportFilter {
     io.grpc.ServerTransportFilter grpcTransportFilter();
 }

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolTest.java
Patch:
@@ -50,7 +50,7 @@ public class RestProtocolTest {
     private ProxyFactory proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
     private final int availablePort = NetUtils.getAvailablePort();
     private final URL exportUrl = URL.valueOf("rest://127.0.0.1:" + availablePort + "/rest?interface=org.apache.dubbo.rpc.protocol.rest.DemoService");
-    private final ServiceRepository repository = ApplicationModel.getServiceRepository();
+    private final ServiceRepository repository = ApplicationModel.defaultModel().getApplicationServiceRepository();
 
     @AfterEach
     public void tearDown() {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/PathResolver.java
Patch:
@@ -17,10 +17,11 @@
 package org.apache.dubbo.rpc.protocol.tri;
 
 import org.apache.dubbo.common.constants.CommonConstants;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.rpc.Invoker;
 
-@SPI(CommonConstants.TRIPLE)
+@SPI(value = CommonConstants.TRIPLE, scope = ExtensionScope.FRAMEWORK)
 public interface PathResolver {
 
     void add(String path, Invoker<?> invoker);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleClientHandler.java
Patch:
@@ -67,7 +67,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
     private void writeRequest(ChannelHandlerContext ctx, final Request req, final ChannelPromise promise) {
         final RpcInvocation inv = (RpcInvocation) req.getData();
         final URL url = inv.getInvoker().getUrl();
-        ServiceRepository repo = ApplicationModel.getServiceRepository();
+        ServiceRepository repo = ApplicationModel.defaultModel().getApplicationServiceRepository();
         MethodDescriptor methodDescriptor = repo.lookupMethod(inv.getServiceName(), inv.getMethodName());
         String serviceKey = url.getServiceKey();
         // If it is InstanceAddressURL, the serviceKey may not be obtained.

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2FrameServerHandler.java
Patch:
@@ -159,7 +159,7 @@ public void onHeadersRead(ChannelHandlerContext ctx, Http2HeadersFrame msg) thro
                     GrpcStatus.fromCode(Code.UNIMPLEMENTED).withDescription("Service not found:" + serviceName));
             return;
         }
-        ServiceRepository repo = ApplicationModel.getServiceRepository();
+        ServiceRepository repo = ApplicationModel.defaultModel().getApplicationServiceRepository();
         final ServiceDescriptor serviceDescriptor = repo.lookupService(invoker.getUrl().getServiceKey());
         if (serviceDescriptor == null) {
             responseErr(ctx,

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/MultipleSerialization.java
Patch:
@@ -18,13 +18,14 @@
 package org.apache.dubbo.common.serialize;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 
-@SPI
+@SPI(scope = ExtensionScope.FRAMEWORK)
 public interface MultipleSerialization {
 
     void serialize(URL url, String serializeType, String clz, Object obj, OutputStream os) throws IOException;

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/Serialization.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Adaptive;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 
 import java.io.IOException;
@@ -32,7 +33,7 @@
  *     e.g. &lt;dubbo:protocol serialization="xxx" /&gt;
  * </pre>
  */
-@SPI("hessian2")
+@SPI(value = "hessian2", scope = ExtensionScope.FRAMEWORK)
 public interface Serialization {
 
     /**

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/dubbo/Hessian2FactoryInitializer.java
Patch:
@@ -16,14 +16,14 @@
  */
 package org.apache.dubbo.common.serialize.hessian2.dubbo;
 
-import org.apache.dubbo.common.config.ConfigurationUtils;
 import org.apache.dubbo.common.extension.ExtensionLoader;
+import org.apache.dubbo.common.extension.ExtensionScope;
 import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.common.utils.StringUtils;
 
 import com.alibaba.com.caucho.hessian.io.SerializerFactory;
 
-@SPI("default")
+@SPI(value = "default", scope = ExtensionScope.FRAMEWORK)
 public interface Hessian2FactoryInitializer {
     String WHITELIST = "dubbo.application.hessian2.whitelist";
     String ALLOW = "dubbo.application.hessian2.allow";
@@ -33,7 +33,7 @@ public interface Hessian2FactoryInitializer {
     SerializerFactory getSerializerFactory();
 
     static Hessian2FactoryInitializer getInstance() {
-        String whitelist = ConfigurationUtils.getProperty(WHITELIST);
+        String whitelist = System.getProperty(WHITELIST);
         if (StringUtils.isNotEmpty(whitelist)) {
             return loader.getExtension("whitelist");
         }

File: dubbo-rpc/dubbo-rpc-grpc/src/test/java/org/apache/dubbo/rpc/protocol/grpc/support/DubboGreeterGrpc.java
Patch:
@@ -44,7 +44,8 @@ public static class DubboGreeterStub implements IGreeter {
         protected GreeterGrpc.GreeterFutureStub futureStub;
         protected GreeterGrpc.GreeterStub stub;
 
-        public DubboGreeterStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions, URL url, ReferenceConfigBase<?> referenceConfig) {
+        public DubboGreeterStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions, URL url,
+                                ReferenceConfigBase<?> referenceConfig) {
             this.url = url;
             this.referenceConfig = referenceConfig;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/DubboServiceAddressURL.java
Patch:
@@ -42,6 +42,7 @@ public DubboServiceAddressURL(URLAddress urlAddress, URLParam urlParam, URL cons
         this.overrideURL = overrideURL;
     }
 
+    @Override
     protected <T extends URL> T newURL(URLAddress urlAddress, URLParam urlParam) {
         return (T) new DubboServiceAddressURL(urlAddress, urlParam, this.consumerURL, this.overrideURL);
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/InstanceAddressURL.java
Patch:
@@ -65,10 +65,12 @@ public String getServiceInterface() {
         return RpcContext.getServiceContext().getInterfaceName();
     }
 
+    @Override
     public String getGroup() {
         return RpcContext.getServiceContext().getGroup();
     }
 
+    @Override
     public String getVersion() {
         return RpcContext.getServiceContext().getVersion();
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/InterfaceCompatibleRegistryProtocol.java
Patch:
@@ -65,6 +65,7 @@ public <T> ClusterInvoker<T> getServiceDiscoveryInvoker(Cluster cluster, Registr
         return doCreateInvoker(directory, cluster, registry, type);
     }
 
+    @Override
     protected <T> ClusterInvoker<T> getMigrationInvoker(RegistryProtocol registryProtocol, Cluster cluster, Registry registry, Class<T> type, URL url, URL consumerUrl) {
 //        ClusterInvoker<T> invoker = getInvoker(cluster, registry, type, url);
         return new MigrationInvoker<T>(registryProtocol, cluster, registry, type, url, consumerUrl);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/RegistryFactoryWrapperTest.java
Patch:
@@ -33,7 +33,7 @@ public void test() throws Exception {
         RegistryServiceListener listener2 = Mockito.mock(RegistryServiceListener.class);
         RegistryServiceListener2.delegate = listener2;
 
-        Registry registry = registryFactory.getRegistry(URL.valueOf("simple://localhost:8080/registry-service"));
+        Registry registry = registryFactory.getRegistry(URL.valueOf("simple://localhost:8080/registry-service?registry.listeners=listener-one,listener-two"));
         URL url = URL.valueOf("dubbo://localhost:8081/simple.service");
         registry.register(url);
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/RegistryServiceListener1.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
 
-@Activate(order = 1)
+@Activate(order = 1, value = "listener-one")
 public class RegistryServiceListener1 implements RegistryServiceListener {
     static RegistryServiceListener delegate;
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/RegistryServiceListener2.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Activate;
 
-@Activate(order = 2)
+@Activate(order = 2, value = "listener-two")
 public class RegistryServiceListener2 implements RegistryServiceListener {
     static RegistryServiceListener delegate;
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/MigrationRuleHandlerTest.java
Patch:
@@ -30,7 +30,7 @@ public void test() {
         MigrationClusterInvoker invoker = Mockito.mock(MigrationClusterInvoker.class);
         URL url = Mockito.mock(URL.class);
         Mockito.when(url.getDisplayServiceKey()).thenReturn("test");
-        Mockito.when(url.getParameter((String) Mockito.any(), (String) Mockito.any())).thenAnswer(i->i.getArgument(1));
+        Mockito.when(url.getParameter(Mockito.any(), (String) Mockito.any())).thenAnswer(i->i.getArgument(1));
         MigrationRuleHandler handler = new MigrationRuleHandler(invoker, url);
 
         Mockito.when(invoker.migrateToForceApplicationInvoker(Mockito.any())).thenReturn(true);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/integration/DemoService.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.registry;
+package org.apache.dubbo.registry.integration;
 
-public class DelayedRegistryNotifierTest {
 
+public interface DemoService {
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractClientStream.java
Patch:
@@ -169,9 +169,9 @@ protected class ClientStreamObserver implements StreamObserver<Object> {
         public void onNext(Object data) {
             RpcInvocation invocation = (RpcInvocation) data;
             final Metadata metadata = createRequestMeta(invocation);
-            getTransportSubscriber().tryOnMetadata(metadata, false);
+            getTransportSubscriber().onMetadata(metadata, false);
             final byte[] bytes = encodeRequest(invocation);
-            getTransportSubscriber().tryOnData(bytes, false);
+            getTransportSubscriber().onData(bytes, false);
         }
 
         @Override
@@ -181,7 +181,7 @@ public void onError(Throwable throwable) {
 
         @Override
         public void onCompleted() {
-            getTransportSubscriber().tryOnComplete();
+            getTransportSubscriber().onComplete();
         }
     }
 

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ClientTransportObserver.java
Patch:
@@ -59,7 +59,7 @@ public ClientTransportObserver(ChannelHandlerContext ctx, AbstractClientStream s
     }
 
     @Override
-    public void onMetadata(Metadata metadata, boolean endStream, Stream.OperationHandler handler) {
+    public void onMetadata(Metadata metadata, boolean endStream) {
         if (!headerSent) {
             final Http2Headers headers = new DefaultHttp2Headers(true)
                     .path(metadata.get(TripleHeaderEnum.PATH_KEY.getHeader()))
@@ -78,7 +78,7 @@ public void onMetadata(Metadata metadata, boolean endStream, Stream.OperationHan
     }
 
     @Override
-    public void onData(byte[] data, boolean endStream, Stream.OperationHandler handler) {
+    public void onData(byte[] data, boolean endStream) {
         ByteBuf buf = ctx.alloc().buffer();
         buf.writeByte(0);
         buf.writeInt(data.length);
@@ -92,7 +92,7 @@ public void onData(byte[] data, boolean endStream, Stream.OperationHandler handl
     }
 
     @Override
-    public void onComplete(Stream.OperationHandler handler) {
+    public void onComplete() {
         if (!endStreamSent) {
             endStreamSent = true;
             streamChannel.writeAndFlush(new DefaultHttp2DataFrame(true))

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleClientInboundHandler.java
Patch:
@@ -27,7 +27,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
         final byte[] data = (byte[]) msg;
         if (clientStream != null) {
             clientStream.asTransportObserver()
-                    .tryOnData(data, false);
+                    .onData(data, false);
         }
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2ClientResponseHandler.java
Patch:
@@ -60,9 +60,9 @@ private void onHeadersRead(ChannelHandlerContext ctx, Http2HeadersFrame msg) {
         Http2Headers headers = msg.headers();
         AbstractClientStream clientStream = TripleUtil.getClientStream(ctx);
         final TransportObserver observer = clientStream.asTransportObserver();
-        observer.tryOnMetadata(new Http2HeaderMeta(headers), false);
+        observer.onMetadata(new Http2HeaderMeta(headers), false);
         if (msg.isEndStream()) {
-            observer.tryOnComplete();
+            observer.onComplete();
         }
     }
 
@@ -85,7 +85,7 @@ public void onDataRead(ChannelHandlerContext ctx, Http2DataFrame msg) throws Exc
             final AbstractClientStream clientStream = TripleUtil.getClientStream(ctx);
             // stream already closed;
             if (clientStream != null) {
-                clientStream.asTransportObserver().tryOnComplete();
+                clientStream.asTransportObserver().onComplete();
             }
         }
     }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2FrameServerHandler.java
Patch:
@@ -86,7 +86,7 @@ public void onDataRead(ChannelHandlerContext ctx, Http2DataFrame msg) throws Exc
         if (msg.isEndStream()) {
             final AbstractServerStream serverStream = TripleUtil.getServerStream(ctx);
             if (serverStream != null) {
-                serverStream.asTransportObserver().tryOnComplete();
+                serverStream.asTransportObserver().onComplete();
             }
         }
     }
@@ -201,9 +201,9 @@ public void onHeadersRead(ChannelHandlerContext ctx, Http2HeadersFrame msg) thro
             stream.methods(methodDescriptors);
         }
         final TransportObserver observer = stream.asTransportObserver();
-        observer.tryOnMetadata(new Http2HeaderMeta(headers), false);
+        observer.onMetadata(new Http2HeaderMeta(headers), false);
         if (msg.isEndStream()) {
-            observer.tryOnComplete();
+            observer.onComplete();
         }
 
         ctx.channel().attr(TripleUtil.SERVER_STREAM_KEY).set(stream);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleServerInboundHandler.java
Patch:
@@ -26,7 +26,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
         final byte[] data = (byte[]) msg;
         if (serverStream != null) {
             serverStream.asTransportObserver()
-                    .tryOnData(data, false);
+                    .onData(data, false);
         }
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/UnaryClientStream.java
Patch:
@@ -51,7 +51,7 @@ protected TransportObserver createTransportObserver() {
     private class UnaryClientTransportObserver extends UnaryTransportObserver implements TransportObserver {
 
         @Override
-        public void doOnComplete(OperationHandler handler) {
+        public void doOnComplete() {
             execute(() -> {
                 try {
                     AppResponse result;

File: dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/UnaryClientStreamTest.java
Patch:
@@ -55,7 +55,7 @@ public void testInit() {
         stream.subscribe(transportObserver);
         // no method descriptor
         Assertions.assertThrows(NullPointerException.class, () -> observer.onNext(inv));
-        Mockito.verify(transportObserver).tryOnMetadata(any(), anyBoolean());
+        Mockito.verify(transportObserver).onMetadata(any(), anyBoolean());
 
         MethodDescriptor md = Mockito.mock(MethodDescriptor.class);
         when(md.isNeedWrap()).thenReturn(true);

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -723,6 +723,7 @@ private T createExtension(String name, boolean wrap) {
                 }
             }
 
+            // Warning: After an instance of Lifecycle is wrapped by cachedWrapperClasses, it may not still be Lifecycle instance, this application may not invoke the lifecycle.initialize hook.
             initExtension(instance);
             return instance;
         } catch (Throwable t) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -193,9 +193,9 @@ public class DubboBootstrap {
 
     private final List<CompletableFuture<?>> asyncReferringFutures = new ArrayList<>();
 
-    private boolean asyncExportFinish = true;
+    private volatile boolean asyncExportFinish = true;
 
-    private boolean asyncReferFinish = true;
+    private volatile boolean asyncReferFinish = true;
 
     private static boolean ignoreConfigState;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/AppRouter.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.cluster.router.condition.config;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.constants.CommonConstants;
 
 /**
  * Application level router, "application.condition-router"
@@ -30,7 +29,7 @@ public class AppRouter extends ListenableRouter {
     private static final int APP_ROUTER_DEFAULT_PRIORITY = 150;
 
     public AppRouter(URL url) {
-        super(url, url.getParameter(CommonConstants.APPLICATION_KEY));
+        super(url, url.getApplication());
         this.setPriority(APP_ROUTER_DEFAULT_PRIORITY);
     }
 }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/multiple/servicediscoveryregistry/MultipleRegistryCenterServiceDiscoveryRegistryRegistryServiceListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.integration.multiple.servicediscoveryregistry;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.metadata.WritableMetadataService;
 import org.apache.dubbo.registry.Registry;
@@ -49,7 +48,7 @@ private ServiceDiscoveryRegistryInfoWrapper createServiceDiscoveryRegistryInfoWr
      * Checks if the registry is checked application
      */
     private boolean isCheckedApplication(Registry registry){
-        return registry.getUrl().getParameter(CommonConstants.APPLICATION_KEY)
+        return registry.getUrl().getApplication()
             .equals(MultipleRegistryCenterServiceDiscoveryRegistryIntegrationTest
                 .PROVIDER_APPLICATION_NAME);
     }

File: dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/AccessKeyAuthenticator.java
Patch:
@@ -32,7 +32,7 @@ public class AccessKeyAuthenticator implements Authenticator {
     @Override
     public void sign(Invocation invocation, URL url) {
         String currentTime = String.valueOf(System.currentTimeMillis());
-        String consumer = url.getParameter(CommonConstants.APPLICATION_KEY);
+        String consumer = url.getApplication();
         AccessKeyPair accessKeyPair = getAccessKeyPair(invocation, url);
         invocation.setAttachment(Constants.REQUEST_SIGNATURE_KEY, getSignature(url, invocation, accessKeyPair.getSecretKey(), currentTime));
         invocation.setAttachment(Constants.REQUEST_TIMESTAMP_KEY, currentTime);

File: dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/AccessKeyAuthenticatorTest.java
Patch:
@@ -58,7 +58,7 @@ void testSignForRequest() {
         when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);
 
         helper.sign(invocation, url);
-        assertEquals(String.valueOf(invocation.getAttachment(CommonConstants.CONSUMER)), url.getParameter(CommonConstants.APPLICATION_KEY));
+        assertEquals(String.valueOf(invocation.getAttachment(CommonConstants.CONSUMER)), url.getApplication());
         assertNotNull(invocation.getAttachments().get(Constants.REQUEST_SIGNATURE_KEY));
         assertEquals(invocation.getAttachments().get(Constants.REQUEST_SIGNATURE_KEY), "dubbo");
     }

File: dubbo-registry/dubbo-registry-multiple/src/main/java/org/apache/dubbo/registry/multiple/MultipleRegistry.java
Patch:
@@ -68,7 +68,7 @@ public MultipleRegistry(URL url) {
     public MultipleRegistry(URL url, boolean initServiceRegistry, boolean initReferenceRegistry) {
         super(url);
         this.registryUrl = url;
-        this.applicationName = url.getParameter(CommonConstants.APPLICATION_KEY);
+        this.applicationName = url.getApplication();
         init();
         checkApplicationName(this.applicationName);
         // This urls contain parameter and it donot inherit from the parameter of url in MultipleRegistry

File: dubbo-registry/dubbo-registry-multiple/src/main/java/org/apache/dubbo/registry/multiple/MultipleServiceDiscovery.java
Patch:
@@ -45,7 +45,7 @@ public class MultipleServiceDiscovery implements ServiceDiscovery {
     @Override
     public void initialize(URL registryURL) throws Exception {
         this.registryURL = registryURL;
-        this.applicationName = registryURL.getParameter(CommonConstants.APPLICATION_KEY);
+        this.applicationName = registryURL.getApplication();
 
         Map<String, String> parameters = registryURL.getParameters();
         for (String key : parameters.keySet()) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -570,7 +570,7 @@ protected boolean shouldJvmRefer(Map<String, String> map) {
         boolean isJvmRefer;
         if (isInjvm() == null) {
             // if an url is specified, don't do local reference
-            if (url != null && url.length() > 0) {
+            if (StringUtils.isNotEmpty(url)) {
                 isJvmRefer = false;
             } else {
                 // by default, reference local service if there is

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmExporter.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * InjvmExporter
  */
-class InjvmExporter<T> extends AbstractExporter<T> {
+public class InjvmExporter<T> extends AbstractExporter<T> {
 
     private final String key;
 

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmInvoker.java
Patch:
@@ -42,7 +42,7 @@
 /**
  * InjvmInvoker
  */
-class InjvmInvoker<T> extends AbstractInvoker<T> {
+public class InjvmInvoker<T> extends AbstractInvoker<T> {
 
     private final String key;
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java
Patch:
@@ -120,9 +120,9 @@ public void decode() throws Exception {
             try {
                 if (invocation != null) {
                     if (ConfigurationUtils.getSystemConfiguration().getBoolean(SERIALIZATION_SECURITY_CHECK_KEY, true)) {
-                        Object serializationType_obj = invocation.get(SERIALIZATION_ID_KEY);
-                        if (serializationType_obj != null) {
-                            if ((byte) serializationType_obj != serializationType) {
+                        Object serializationTypeObj = invocation.get(SERIALIZATION_ID_KEY);
+                        if (serializationTypeObj != null) {
+                            if ((byte) serializationTypeObj != serializationType) {
                                 throw new IOException("Unexpected serialization id:" + serializationType + " received from network, please check if the peer send the right id.");
                             }
                         }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -199,8 +199,6 @@ public void init() {
             // load ServiceListeners from extension
             ExtensionLoader<ServiceListener> extensionLoader = ExtensionLoader.getExtensionLoader(ServiceListener.class);
             this.serviceListeners.addAll(extensionLoader.getSupportedExtensionInstances());
-
-            this.checkAndUpdateSubConfigs();
         }
 
         initServiceMetadata(provider);

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/ConfigTest.java
Patch:
@@ -1114,6 +1114,7 @@ public void testProtocolRandomPort() throws Exception {
     }
 
     @Test
+    @Disabled("waiting-to-fix, see: https://github.com/apache/dubbo/pull/8534")
     public void testReferGenericExport() throws Exception {
         RegistryConfig rc = new RegistryConfig();
         rc.setAddress(RegistryConfig.NO_AVAILABLE);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/RemoteMetadataServiceImpl.java
Patch:
@@ -103,7 +103,7 @@ public MetadataInfo getMetadata(ServiceInstance instance) {
 
     private void checkRemoteConfigured() {
         if (getMetadataReports().size() == 0) {
-            String msg = "Remote Metadata Report Server not hasn't been configured. Unable to get Metadata from remote!";
+            String msg = "Remote Metadata Report Server not hasn't been configured or unavailable . Unable to get Metadata from remote!";
             logger.error(msg);
             throw new IllegalStateException(msg);
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListener.java
Patch:
@@ -336,6 +336,7 @@ protected MetadataInfo doGetMetadataInfo(ServiceInstance instance) {
                 // change the instance used to communicate to avoid all requests route to the same instance
                 MetadataService metadataServiceProxy = MetadataUtils.getMetadataServiceProxy(instance);
                 metadataInfo = metadataServiceProxy.getMetadataInfo(ServiceInstanceMetadataUtils.getExportedServicesRevision(instance));
+                MetadataUtils.destroyMetadataServiceProxy(instance);
             }
         } catch (Exception e) {
             logger.error("Failed to load service metadata, meta type is " + metadataType, e);

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConfigUtils.java
Patch:
@@ -384,7 +384,8 @@ public static int getPid() {
         if (PID < 0) {
             try {
                 RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();
-                String name = runtime.getName(); // format: "pid@hostname"
+                // format: "pid@hostname"
+                String name = runtime.getName();
                 PID = Integer.parseInt(name.substring(0, name.indexOf('@')));
             } catch (Throwable e) {
                 PID = 0;

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -146,7 +146,7 @@ private static void appendParameters0(Map<String, String> parameters, Object con
 
         // How to select the appropriate one from multiple getter methods of the property?
         // e.g. Using String getGeneric() or Boolean isGeneric()? Judge by field type ?
-        // Currently use @Parameter.attribute() to determine whether it is an attribute.
+        // Currently, use @Parameter.attribute() to determine whether it is an attribute.
 
         BeanInfo beanInfo = getBeanInfo(config.getClass());
         for (MethodDescriptor methodDescriptor : beanInfo.getMethodDescriptors()) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/ModuleConfig.java
Patch:
@@ -87,6 +87,7 @@ public void setVersion(String version) {
         this.version = version;
     }
 
+    @Parameter(key = "module.owner")
     public String getOwner() {
         return owner;
     }
@@ -95,6 +96,7 @@ public void setOwner(String owner) {
         this.owner = owner;
     }
 
+    @Parameter(key = "module.organization")
     public String getOrganization() {
         return organization;
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -570,7 +570,7 @@ protected boolean shouldJvmRefer(Map<String, String> map) {
         URL tmpUrl = new ServiceConfigURL("temp", "localhost", 0, map);
         boolean isJvmRefer;
         if (isInjvm() == null) {
-            // if a url is specified, don't do local reference
+            // if an url is specified, don't do local reference
             if (url != null && url.length() > 0) {
                 isJvmRefer = false;
             } else {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/registry/ZoneAwareClusterInvoker.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dubbo.rpc.cluster.Directory;
 import org.apache.dubbo.rpc.cluster.LoadBalance;
 import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker;
-import org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker;
 
 import java.util.List;
 import java.util.stream.Collectors;
@@ -79,7 +78,7 @@ public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, L
             if (StringUtils.isNotEmpty(force) && "true".equalsIgnoreCase(force)) {
                 throw new IllegalStateException("No registry instance in zone or no available providers in the registry, zone: "
                         + zone
-                        + ", registries: " + invokers.stream().map(invoker -> ((MockClusterInvoker<T>) invoker).getRegistryUrl().toString()).collect(Collectors.joining(",")));
+                        + ", registries: " + invokers.stream().map(invoker -> ((ClusterInvoker<T>) invoker).getRegistryUrl().toString()).collect(Collectors.joining(",")));
             }
         }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java
Patch:
@@ -164,7 +164,7 @@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
             List<BeanPostProcessor> beanPostProcessors = ((AbstractBeanFactory) beanFactory).getBeanPostProcessors();
             for (BeanPostProcessor beanPostProcessor : beanPostProcessors) {
                 if (beanPostProcessor == this) {
-                    // This bean has bean register as BeanPostProcessor at org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor.postProcessBeanFactory()
+                    // This bean has been registered as BeanPostProcessor at org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor.postProcessBeanFactory()
                     // so destroy this bean here, prevent register it as BeanPostProcessor again, avoid cause BeanPostProcessorChecker detection error
                     beanDefinitionRegistry.removeBeanDefinition(BEAN_NAME);
                     break;
@@ -334,7 +334,7 @@ private boolean isReferenceBean(BeanDefinition beanDefinition) {
 
     protected void prepareInjection(AnnotatedInjectionMetadata metadata) throws BeansException {
         try {
-            //find and registry bean definition for @DubboReference/@Reference
+            //find and register bean definition for @DubboReference/@Reference
             for (AnnotatedFieldElement fieldElement : metadata.getFieldElements()) {
                 if (fieldElement.injectedObject != null) {
                     continue;

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -90,7 +90,7 @@ public abstract class AbstractInterfaceConfig extends AbstractMethodConfig {
     protected MonitorConfig monitor;
 
     /**
-     * Strategies for generating dynamic agents，there are two strategies can be choosed: jdk and javassist
+     * Strategies for generating dynamic agents，there are two strategies can be chosen: jdk and javassist
      */
     protected String proxy;
 
@@ -227,7 +227,7 @@ public static void appendRuntimeParameters(Map<String, String> map) {
     protected String[] methods(Class<?> interfaceClass) {
         boolean isNative = ApplicationModel.getEnvironment().getConfiguration().getBoolean(NATIVE, false);
         if (isNative) {
-            return Arrays.stream(interfaceClass.getMethods()).map(it -> it.getName()).toArray(String[]::new);
+            return Arrays.stream(interfaceClass.getMethods()).map(Method::getName).toArray(String[]::new);
         } else {
             return Wrapper.getWrapper(interfaceClass).getMethodNames();
         }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -134,7 +134,7 @@ public List<String> getPrefixes() {
     public Map<String, String> getMetaData() {
         Map<String, String> metaData = new HashMap<>();
         ConsumerConfig consumer = this.getConsumer();
-        // consumer should be inited at preProcessRefresh()
+        // consumer should be initialized at preProcessRefresh()
         if (isRefreshed() && consumer == null) {
             throw new IllegalStateException("Consumer is not initialized");
         }
@@ -150,7 +150,7 @@ public Map<String, String> getMetaData() {
      * @return
      */
     public Class<?> getServiceInterfaceClass() {
-        Class actualInterface = interfaceClass;
+        Class<?> actualInterface = interfaceClass;
         if (interfaceClass == GenericService.class) {
             try {
                 actualInterface = Class.forName(interfaceName);

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java
Patch:
@@ -112,7 +112,7 @@ public void testConvertMethodConfig2AsyncInfo() throws Exception{
         methodConfig.setOninvokeMethod("setName");
         methodConfig.setOninvoke(new Person());
 
-        AsyncMethodInfo methodInfo = org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(methodConfig);
+        AsyncMethodInfo methodInfo = methodConfig.convertMethodConfig2AsyncInfo();
 
         assertEquals(methodInfo.getOninvokeMethod(), Person.class.getMethod("setName", String.class));
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -138,7 +138,7 @@ public class RegistryProtocol implements Protocol {
     private final Map<String, ServiceConfigurationListener> serviceConfigurationListeners = new ConcurrentHashMap<>();
     private final ProviderConfigurationListener providerConfigurationListener = new ProviderConfigurationListener();
     //To solve the problem of RMI repeated exposure port conflicts, the services that have been exposed are no longer exposed.
-    //providerurl <--> exporter
+    //provider url <--> exporter
     private final ConcurrentMap<String, ExporterChangeableWrapper<?>> bounds = new ConcurrentHashMap<>();
     protected Protocol protocol;
     protected RegistryFactory registryFactory;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/BroadcastClusterInvoker.java
Patch:
@@ -96,7 +96,7 @@ public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, L
                         String.format("The number of BroadcastCluster call failures has reached the threshold %s", failThresholdIndex));
             } else {
                 logger.debug(String.format("The number of BroadcastCluster call failures has not reached the threshold %s, fail size is %s",
-                        failIndex));
+                        failThresholdIndex, failIndex));
             }
             throw exception;
         }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -443,7 +443,9 @@ public interface CommonConstants {
      * use native image to compile dubbo's identifier
      */
     String NATIVE = "native";
-  
+
+    String DUBBO_MONITOR_ADDRESS = "dubbo.monitor.address";
+
     String SERVICE_NAME_MAPPING_KEY = "service-name-mapping";
 
 }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/multiple/injvm/MultipleRegistryCenterInjvmIntegrationTest.java
Patch:
@@ -87,7 +87,7 @@ public void setUp() throws Exception {
         logger.info(getClass().getSimpleName() + " testcase is beginning...");
         DubboBootstrap.reset();
         //start all zookeeper services only once
-        registryCenter = new DefaultMultipleRegistryCenter();
+        registryCenter = new DefaultMultipleRegistryCenter(-1);
         registryCenter.startup();
         // initialize service config
         serviceConfig = new ServiceConfig<>();

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/single/SingleRegistryCenterDubboProtocolIntegrationTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.extension.ExtensionLoader;
+import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.ServiceConfig;
 import org.apache.dubbo.config.ReferenceConfig;
@@ -109,7 +110,7 @@ public class SingleRegistryCenterDubboProtocolIntegrationTest implements Integra
     public void setUp() throws Exception {
         logger.info(getClass().getSimpleName() + " testcase is beginning...");
         DubboBootstrap.reset();
-        registryCenter = new DefaultSingleRegistryCenter();
+        registryCenter = new DefaultSingleRegistryCenter(NetUtils.getAvailablePort());
         registryCenter.startup();
         // initialize ServiceConfig
         serviceConfig = new ServiceConfig<>();

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/single/injvm/SingleRegistryCenterInjvmIntegrationTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.integration.single.injvm;
 
 import org.apache.dubbo.common.extension.ExtensionLoader;
+import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.config.ServiceConfig;
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.ServiceListener;
@@ -84,7 +85,7 @@ public class SingleRegistryCenterInjvmIntegrationTest implements IntegrationTest
     public void setUp() throws Exception {
         logger.info(getClass().getSimpleName() + " testcase is beginning...");
         DubboBootstrap.reset();
-        registryCenter = new DefaultSingleRegistryCenter();
+        registryCenter = new DefaultSingleRegistryCenter(NetUtils.getAvailablePort());
         registryCenter.startup();
         // initialize service config
         serviceConfig = new ServiceConfig<>();

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvoker.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.rpc.cluster.support;
 
+import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
@@ -83,9 +84,10 @@ public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, L
             final AtomicInteger count = new AtomicInteger();
             final BlockingQueue<Object> ref = new LinkedBlockingQueue<>();
             for (final Invoker<T> invoker : selected) {
+                URL consumerUrl = RpcContext.getServiceContext().getConsumerUrl();
                 executor.execute(() -> {
                     try {
-                        Result result = invokeWithContext(invoker, invocation);
+                        Result result = invokeWithContextAsync(invoker, invocation, consumerUrl);
                         ref.offer(result);
                     } catch (Throwable e) {
                         int value = count.incrementAndGet();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/SingleProtocolConnectionManager.java
Patch:
@@ -35,7 +35,7 @@ public Connection connect(URL url) throws RemotingException {
         return connections.compute(url.getAddress(), (address, conn) -> {
             if (conn == null) {
                 final Connection created = new Connection(url);
-                created.getCloseFuture().addListener(future -> connections.remove(address, created));
+                created.getClosePromise().addListener(future -> connections.remove(address, created));
                 return created;
             } else {
                 conn.retain();

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractClientStream.java
Patch:
@@ -44,8 +44,8 @@ protected AbstractClientStream(URL url, Executor executor) {
         super(url, executor);
     }
 
-    public static UnaryClientStream unary(URL url, Executor executor) {
-        return new UnaryClientStream(url, executor);
+    public static UnaryClientStream unary(URL url) {
+        return new UnaryClientStream(url);
     }
 
     public static AbstractClientStream stream(URL url) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -94,15 +94,15 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
             req.setTwoWay(true);
             req.setData(inv);
 
-            connection.connectSync();
+            // try connect
+            connection.isAvailable();
 
             DefaultFuture2 future = DefaultFuture2.newFuture(this.connection, req, timeout, executor);
             final CompletableFuture<AppResponse> respFuture = future.thenApply(obj -> (AppResponse) obj);
             // save for 2.6.x compatibility, for example, TraceFilter in Zipkin uses com.alibaba.xxx.FutureAdapter
             FutureContext.getContext().setCompatibleFuture(respFuture);
             AsyncRpcResult result = new AsyncRpcResult(respFuture, inv);
             result.setExecutor(executor);
-            inv.put("callback.executor", executor);
 
             if (!connection.isAvailable()) {
                 Response response = new Response(req.getId(), req.getVersion());

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/UnaryClientStream.java
Patch:
@@ -30,13 +30,12 @@
 
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.Executor;
 
 public class UnaryClientStream extends AbstractClientStream implements Stream {
 
 
-    protected UnaryClientStream(URL url, Executor executor) {
-        super(url, executor);
+    protected UnaryClientStream(URL url) {
+        super(url);
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/UnaryClientStream.java
Patch:
@@ -76,6 +76,9 @@ protected void onError(GrpcStatus status) {
             response.setErrorMessage(status.description);
             final AppResponse result = new AppResponse();
             result.setException(getThrowable(this.getTrailers()));
+            // avoid subsequent parse header problems
+            this.getTrailers().remove(TripleConstant.EXCEPTION_TW_BIN);
+            this.getTrailers().remove(TripleConstant.STATUS_KEY);
             result.setObjectAttachments(UnaryClientStream.this.parseMetadataToMap(this.getTrailers()));
             response.setResult(result);
             if (!result.hasException()) {
@@ -103,8 +106,6 @@ private Throwable getThrowable(Metadata metadata) {
                     } finally {
                         ClassLoadUtil.switchContextLoader(tccl);
                     }
-                    // avoid subsequent parse header problems
-                    metadata.remove(TripleConstant.EXCEPTION_TW_BIN);
                 }
             } catch (Throwable t) {
                 LOGGER.warn(String.format("Decode exception instance from triple trailers:%s failed", metadata), t);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractServerStream.java
Patch:
@@ -146,9 +146,9 @@ protected Object[] deserializeRequest(byte[] data) {
                         TripleWrapper.TripleRequestWrapper.class);
                 if (!getSerializeType().equals(TripleUtil.convertHessianFromWrapper(wrapper.getSerializeType()))) {
                     transportError(GrpcStatus.fromCode(GrpcStatus.Code.INVALID_ARGUMENT)
-                        .withDescription("Received inconsistent serialization type from client, " +
-                            "reject to deserialize! Expected:" + getSerializeType() +
-                            " Actual:" + TripleUtil.convertHessianFromWrapper(wrapper.getSerializeType())));
+                            .withDescription("Received inconsistent serialization type from client, " +
+                                    "reject to deserialize! Expected:" + getSerializeType() +
+                                    " Actual:" + TripleUtil.convertHessianFromWrapper(wrapper.getSerializeType())));
                     return null;
                 }
                 if (getMethodDescriptor() == null) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/Metadata.java
Patch:
@@ -34,4 +34,6 @@ default Metadata putIfNotNull(CharSequence key, CharSequence value) {
 
     boolean contains(CharSequence key);
 
+    boolean remove(CharSequence key);
+
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleClientHandler.java
Patch:
@@ -71,7 +71,7 @@ private void writeRequest(ChannelHandlerContext ctx, final Request req, final Ch
         MethodDescriptor methodDescriptor = repo.lookupMethod(inv.getServiceName(), inv.getMethodName());
         String serviceKey = url.getServiceKey();
         // If it is InstanceAddressURL, the serviceKey may not be obtained.
-        if(null == serviceKey) {
+        if (null == serviceKey) {
             serviceKey = inv.getTargetServiceUniqueName();
         }
         final ConsumerModel service = repo.lookupReferredService(serviceKey);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/DubboBeanUtils.java
Patch:
@@ -117,15 +117,15 @@ static boolean registerInfrastructureBean(BeanDefinitionRegistry beanDefinitionR
     }
 
     /**
-     * Register some beans later
+     * Register a placeholder configurer beans if not exists.
      * Call this method in BeanDefinitionRegistryPostProcessor,
      * in order to enable the registered BeanFactoryPostProcessor bean to be loaded and executed.
      * @see DubboInfraBeanRegisterPostProcessor
      * @see org.springframework.context.support.PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.util.List)
      * @param beanFactory
      * @param registry
      */
-    static void registerBeansIfNotExists(ConfigurableListableBeanFactory beanFactory, BeanDefinitionRegistry registry) {
+    static void registerPlaceholderConfigurerBeanIfNotExists(ConfigurableListableBeanFactory beanFactory, BeanDefinitionRegistry registry) {
         // Auto register a PropertyPlaceholderConfigurer bean to resolve placeholders with Spring Environment PropertySources
         // when loading dubbo xml config with @ImportResource
         if (!checkBeanExists(beanFactory, PropertySourcesPlaceholderConfigurer.class)) {

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/CountTelnetTest.java
Patch:
@@ -17,13 +17,15 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.qos.command.impl.channel.MockNettyChannel;
 import org.apache.dubbo.qos.legacy.ProtocolUtils;
 import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.remoting.telnet.support.TelnetUtils;
 import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.RpcStatus;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
 
@@ -76,7 +78,7 @@ public void test() throws Exception {
         String methodName = "sayHello";
         String[] args = new String[]{"org.apache.dubbo.qos.legacy.service.DemoService", "sayHello", "1"};
 
-        DubboProtocol.getDubboProtocol().export(mockInvoker);
+        ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);
         RpcStatus.beginCount(url, methodName);
         RpcStatus.endCount(url, methodName, 10L, true);
         count.execute(mockCommandContext, args);

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/PortTelnetTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.qos.command.BaseCommand;
 import org.apache.dubbo.qos.command.CommandContext;
@@ -26,6 +27,7 @@
 import org.apache.dubbo.remoting.exchange.ExchangeClient;
 import org.apache.dubbo.remoting.exchange.Exchangers;
 import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
 
 import org.junit.jupiter.api.AfterEach;
@@ -54,7 +56,7 @@ public void before() {
         given(mockInvoker.getInterface()).willReturn(DemoService.class);
         given(mockInvoker.getUrl()).willReturn(URL.valueOf("dubbo://127.0.0.1:" + availablePort + "/demo"));
 
-        DubboProtocol.getDubboProtocol().export(mockInvoker);
+        ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);
     }
 
     @AfterEach

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -41,6 +42,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.CALLBACK_INSTANCES_LIMIT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_CALLBACK_INSTANCES;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PROTOCOL;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
@@ -58,7 +60,7 @@ class CallbackServiceCodec {
     private static final Logger logger = LoggerFactory.getLogger(CallbackServiceCodec.class);
 
     private static final ProxyFactory PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
-    private static final DubboProtocol PROTOCOL = DubboProtocol.getDubboProtocol();
+    private static final Protocol PROTOCOL = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DUBBO_PROTOCOL);
     private static final byte CALLBACK_NONE = 0x0;
     private static final byte CALLBACK_CREATE = 0x1;
     private static final byte CALLBACK_DESTROY = 0x2;

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ReferenceCountExchangeClientTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.remoting.exchange.ExchangeClient;
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.protocol.dubbo.support.ProtocolUtils;
 
@@ -47,7 +48,6 @@
 public class ReferenceCountExchangeClientTest {
 
     public static ProxyFactory proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
-    private static DubboProtocol protocol = DubboProtocol.getDubboProtocol();
     Exporter<?> demoExporter;
     Exporter<?> helloExporter;
     Invoker<IDemoService> demoServiceInvoker;
@@ -68,15 +68,15 @@ public static void tearDownAfterClass() {
     }
 
     public static Invoker<?> referInvoker(Class<?> type, URL url) {
-        return (Invoker<?>) protocol.refer(type, url);
+        return (Invoker<?>) DubboProtocol.getDubboProtocol().refer(type, url);
     }
 
     public static <T> Exporter<T> export(T instance, Class<T> type, String url) {
         return export(instance, type, URL.valueOf(url));
     }
 
     public static <T> Exporter<T> export(T instance, Class<T> type, URL url) {
-        return protocol.export(proxy.getInvoker(instance, type, url));
+        return ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(proxy.getInvoker(instance, type, url));
     }
 
     @BeforeEach

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/integration/multiple/injvm/MultipleRegistryCenterInjvmServiceImpl.java
Patch:
@@ -25,6 +25,6 @@ public class MultipleRegistryCenterInjvmServiceImpl implements MultipleRegistryC
      */
     @Override
     public String hello(String name) {
-        return null;
+        return "Hello " + name;
     }
 }

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java
Patch:
@@ -26,7 +26,7 @@
 
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.config.spring.ZooKeeperServer;
+import org.apache.dubbo.config.spring.registrycenter.ZooKeeperServer;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/reference/ReferenceBeanSupport.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.spring.Constants;
 import org.apache.dubbo.config.spring.ReferenceBean;
+import org.apache.dubbo.config.spring.util.DubboAnnotationUtils;
 import org.apache.dubbo.rpc.service.GenericService;
 import org.springframework.beans.MutablePropertyValues;
 import org.springframework.beans.PropertyValue;
@@ -46,7 +47,6 @@
 import java.util.TreeMap;
 
 import static org.apache.dubbo.common.utils.StringUtils.join;
-import static org.apache.dubbo.config.spring.reference.ReferenceCreator.convertStringArrayToMap;
 
 public class ReferenceBeanSupport {
 
@@ -153,7 +153,7 @@ private static String convertToString(String key, Object obj) {
         }
         if (ReferenceAttributes.PARAMETERS.equals(key) && obj instanceof String[]) {
             //convert parameters array pairs to map
-            obj = convertStringArrayToMap((String[]) obj);
+            obj = DubboAnnotationUtils.convertParameters((String[]) obj);
         }
 
         //to string

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
+import org.apache.dubbo.remoting.api.SslClientTlsHandler;
 import org.apache.dubbo.remoting.transport.AbstractClient;
 import org.apache.dubbo.remoting.utils.UrlUtils;
 
@@ -107,7 +108,7 @@ protected void initChannel(SocketChannel ch) throws Exception {
                 int heartbeatInterval = UrlUtils.getHeartbeat(getUrl());
 
                 if (getUrl().getParameter(SSL_ENABLED_KEY, false)) {
-                    ch.pipeline().addLast("negotiation", SslHandlerInitializer.sslClientHandler(getUrl(), nettyClientHandler));
+                    ch.pipeline().addLast("negotiation", new SslClientTlsHandler(getUrl()));
                 }
 
                 NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyClient.this);

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.RemotingServer;
+import org.apache.dubbo.remoting.api.SslServerTlsHandler;
 import org.apache.dubbo.remoting.transport.AbstractServer;
 import org.apache.dubbo.remoting.transport.dispatcher.ChannelHandlers;
 import org.apache.dubbo.remoting.utils.UrlUtils;
@@ -111,8 +112,7 @@ protected void initChannel(SocketChannel ch) throws Exception {
                         int idleTimeout = UrlUtils.getIdleTimeout(getUrl());
                         NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyServer.this);
                         if (getUrl().getParameter(SSL_ENABLED_KEY, false)) {
-                            ch.pipeline().addLast("negotiation",
-                                    SslHandlerInitializer.sslServerHandler(getUrl(), nettyServerHandler));
+                            ch.pipeline().addLast("negotiation", new SslServerTlsHandler(getUrl()));
                         }
                         ch.pipeline()
                                 .addLast("decoder", adapter.getDecoder())

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigValidationUtils.java
Patch:
@@ -702,7 +702,7 @@ public static void checkProperty(String property, String value, int maxlength, P
             return;
         }
         if (value.length() > maxlength) {
-            throw new IllegalStateException("Invalid " + property + "=\"" + value + "\" is longer than " + maxlength);
+            logger.error("Invalid " + property + "=\"" + value + "\" is longer than " + maxlength);
         }
         if (pattern != null) {
             Matcher matcher = pattern.matcher(value);

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java
Patch:
@@ -209,7 +209,7 @@ public void checkMultiExtension2() throws Exception {
 
     @Test
     public void checkLength() throws Exception {
-        Assertions.assertThrows(IllegalStateException.class, () -> {
+        Assertions.assertDoesNotThrow(() -> {
             StringBuilder builder = new StringBuilder();
             for (int i = 0; i <= 200; i++) {
                 builder.append('a');
@@ -220,7 +220,7 @@ public void checkLength() throws Exception {
 
     @Test
     public void checkPathLength() throws Exception {
-        Assertions.assertThrows(IllegalStateException.class, () -> {
+        Assertions.assertDoesNotThrow(() -> {
             StringBuilder builder = new StringBuilder();
             for (int i = 0; i <= 200; i++) {
                 builder.append('a');

File: dubbo-registry/dubbo-registry-kubernetes/src/main/java/org/apache/dubbo/registry/kubernetes/KubernetesServiceDiscovery.java
Patch:
@@ -96,6 +96,8 @@ public void doInitialize(URL registryURL) throws Exception {
                     " Master URL: " + config.getMasterUrl() +
                     " Hostname: " + currentHostname;
             logger.error(message);
+        } else {
+            KubernetesMeshEnvListener.injectKubernetesEnv(kubernetesClient, namespace);
         }
     }
 

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/dubbo/DefaultHessian2FactoryInitializer.java
Patch:
@@ -23,6 +23,8 @@
 public class DefaultHessian2FactoryInitializer extends AbstractHessian2FactoryInitializer {
     @Override
     protected SerializerFactory createSerializerFactory() {
-        return new Hessian2SerializerFactory();
+        Hessian2SerializerFactory hessian2SerializerFactory = new Hessian2SerializerFactory();
+        hessian2SerializerFactory.getClassFactory().allow(RuntimeException.class.getName());
+        return hessian2SerializerFactory;
     }
 }

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ExecuteLimitFilterTest.java
Patch:
@@ -85,6 +85,7 @@ public void testExecuteLimitInvokeWitException() throws Exception {
             executeLimitFilter.onError(e, invoker, invocation);
         }
         Assertions.assertEquals(1, RpcStatus.getStatus(url, invocation.getMethodName()).getFailed());
+        RpcStatus.removeStatus(url, invocation.getMethodName());
     }
 
     @Test

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java
Patch:
@@ -94,7 +94,7 @@
  * @see org.apache.dubbo.config.annotation.DubboReference
  * @see org.apache.dubbo.config.spring.reference.ReferenceBeanBuilder
  */
-public class ReferenceBean<T> implements FactoryBean,
+public class ReferenceBean<T> implements FactoryBean<T>,
         ApplicationContextAware, BeanClassLoaderAware, BeanNameAware, InitializingBean, DisposableBean {
 
     private transient ApplicationContext applicationContext;
@@ -181,11 +181,11 @@ public void setBeanName(String name) {
      * @see org.apache.dubbo.config.bootstrap.DubboBootstrap
      */
     @Override
-    public Object getObject() {
+    public T getObject() {
         if (lazyProxy == null) {
             createLazyProxy();
         }
-        return lazyProxy;
+        return (T) lazyProxy;
     }
 
     @Override

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataInfo.java
Patch:
@@ -41,6 +41,8 @@
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_CHAR_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.PID_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.TIMESTAMP_KEY;
 import static org.apache.dubbo.common.constants.FilterConstants.VALIDATION_KEY;
 import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP;
 import static org.apache.dubbo.common.constants.QosConstants.QOS_ENABLE;
@@ -232,7 +234,7 @@ public ServiceInfo(URL url) {
                 params.putAll(
                         url.removeParameters(
                                 MONITOR_KEY, BIND_IP_KEY, BIND_PORT_KEY, QOS_ENABLE,
-                                QOS_HOST, QOS_PORT, ACCEPT_FOREIGN_IP, VALIDATION_KEY, INTERFACES)
+                                QOS_HOST, QOS_PORT, ACCEPT_FOREIGN_IP, VALIDATION_KEY, INTERFACES, PID_KEY, TIMESTAMP_KEY)
                                 .getParameters());
             }
             for (MetadataParamsFilter filter : filters) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleManager.java
Patch:
@@ -31,7 +31,6 @@ public final class MeshRuleManager {
     public static final Logger logger = LoggerFactory.getLogger(MeshRuleManager.class);
 
     private static final String MESH_RULE_DATA_ID_SUFFIX = ".MESHAPPRULE";
-    private static final String GROUP = "DEFAULT_GROUP";
 
     private static final ConcurrentHashMap<String, MeshAppRuleListener> APP_RULE_LISTENERS = new ConcurrentHashMap<>();
 
@@ -48,15 +47,15 @@ public synchronized static void subscribeAppRule(String app) {
         }
 
         try {
-            String rawConfig = configuration.getConfig(appRuleDataId, GROUP, 5000L);
+            String rawConfig = configuration.getConfig(appRuleDataId, DynamicConfiguration.DEFAULT_GROUP, 5000L);
             if (rawConfig != null) {
                 meshAppRuleListener.receiveConfigInfo(rawConfig);
             }
         } catch (Throwable throwable) {
             logger.error("get MeshRuleManager app rule failed.", throwable);
         }
 
-        configuration.addListener(appRuleDataId, GROUP, meshAppRuleListener);
+        configuration.addListener(appRuleDataId, DynamicConfiguration.DEFAULT_GROUP, meshAppRuleListener);
         APP_RULE_LISTENERS.put(app, meshAppRuleListener);
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/DefaultServiceInstance.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.metadata.MetadataInfo;
 
 import com.alibaba.fastjson.JSON;
-import org.eclipse.collections.impl.map.mutable.UnifiedMap;
 
 import java.util.HashMap;
 import java.util.List;
@@ -52,7 +51,7 @@ public class DefaultServiceInstance implements ServiceInstance {
 
     private boolean healthy = true;
 
-    private Map<String, String> metadata = new UnifiedMap<>();
+    private Map<String, String> metadata = new HashMap<>();
 
     private transient String address;
     private transient MetadataInfo serviceMetadata;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryDirectory.java
Patch:
@@ -36,8 +36,6 @@
 import org.apache.dubbo.rpc.cluster.RouterChain;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
-import org.eclipse.collections.impl.map.mutable.UnifiedMap;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -258,7 +256,7 @@ private void refreshInvoker(List<URL> invokerUrls) {
      * @return invokers
      */
     private Map<String, Invoker<T>> toInvokers(List<URL> urls) {
-        Map<String, Invoker<T>> newUrlInvokerMap = new UnifiedMap<>();
+        Map<String, Invoker<T>> newUrlInvokerMap = new HashMap<>();
         if (urls == null || urls.isEmpty()) {
             return newUrlInvokerMap;
         }

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosServiceDiscovery.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.registry.client.AbstractServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceInstance;
+import org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent;
 import org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener;
 import org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils;
 
@@ -122,7 +123,7 @@ public void addServiceInstancesChangedListener(ServiceInstancesChangedListener l
                         }
                     });
                 } catch (NacosException e) {
-                    e.printStackTrace();
+                    logger.error("add nacos service instances changed listener fail ", e);
                 }
             });
         });
@@ -139,6 +140,6 @@ private void handleEvent(NamingEvent event, ServiceInstancesChangedListener list
                 .stream()
                 .map(NacosNamingServiceUtils::toServiceInstance)
                 .collect(Collectors.toList());
-        dispatchServiceInstancesChangedEvent(serviceName, serviceInstances);
+        listener.onEvent(new ServiceInstancesChangedEvent(serviceName, serviceInstances));
     }
 }

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -103,7 +103,6 @@ public class ConfigManager extends LifecycleAdapter implements FrameworkExt {
         for (Class<? extends AbstractConfig> configType : uniqueConfigTypes) {
             configNames.add(configType.getSimpleName());
         }
-        logger.info("Unique config types: " + configNames);
     }
 
     public ConfigManager() {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/builder/EnumTypeBuilder.java
Patch:
@@ -52,6 +52,7 @@ public TypeDefinition build(Type type, Class<?> clazz, Map<String, TypeDefinitio
 
         try {
             Method methodValues = clazz.getDeclaredMethod("values");
+            methodValues.setAccessible(true);
             Object[] values = (Object[]) methodValues.invoke(clazz, new Object[0]);
             int length = values.length;
             for (int i = 0; i < length; i++) {
@@ -62,7 +63,7 @@ public TypeDefinition build(Type type, Class<?> clazz, Map<String, TypeDefinitio
         } catch (Throwable t) {
             logger.error("There is an error while process class " + clazz, t);
         }
-        return null;
+        return td;
     }
 
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/manager/ExecutorRepositoryTest.java
Patch:
@@ -34,7 +34,8 @@ public void testGetExecutor() {
         testGet(URL.valueOf("dubbo://127.0.0.1:23456?side=consumer"));
 
         Assertions.assertNotNull(executorRepository.getSharedExecutor());
-        Assertions.assertNotNull(executorRepository.getExportReferExecutor());
+        Assertions.assertNotNull(executorRepository.getServiceExportExecutor());
+        Assertions.assertNotNull(executorRepository.getServiceReferExecutor());
         executorRepository.nextScheduledExecutor();
     }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboBootstrapApplicationListener.java
Patch:
@@ -119,6 +119,7 @@ private void onContextRefreshedEvent(ContextRefreshedEvent event) {
 
     private void onContextClosedEvent(ContextClosedEvent event) {
         if (dubboBootstrap.getTakeoverMode() == BootstrapTakeoverMode.SPRING) {
+            // will call dubboBootstrap.stop() through shutdown callback.
             DubboShutdownHook.getDubboShutdownHook().run();
         }
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -134,7 +134,7 @@ private static MetadataService referProxy(String key, ServiceInstance instance)
 
         List<URL> urls = builder.build(instance);
         if (CollectionUtils.isEmpty(urls)) {
-            throw new IllegalStateException("You have enabled introspection service discovery mode for instance "
+            throw new IllegalStateException("Introspection service discovery mode is enabled "
                     + instance + ", but no metadata service can build from it.");
         }
 

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/MigrationRuleListenerTest.java
Patch:
@@ -56,12 +56,13 @@ public void test() throws InterruptedException {
         Mockito.when(consumerURL.getParameter("timestamp")).thenReturn("1");
 
         System.setProperty("dubbo.application.migration.delay", "1000");
-        MigrationRuleHandler handler = Mockito.mock(MigrationRuleHandler.class);
+        MigrationRuleHandler<?> handler = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());
 
         MigrationRuleListener migrationRuleListener = new MigrationRuleListener();
-        MigrationInvoker migrationInvoker = Mockito.mock(MigrationInvoker.class);
+        MigrationInvoker<?> migrationInvoker = Mockito.mock(MigrationInvoker.class);
         migrationRuleListener.getHandlers().put(migrationInvoker, handler);
 
+        Thread.sleep(5000);
         Mockito.verify(handler, Mockito.timeout(5000)).doMigrate(Mockito.any());
 
         migrationRuleListener.onRefer(null, migrationInvoker, consumerURL, null);

File: dubbo-registry/dubbo-registry-dns/src/test/java/org/apache/dubbo/registry/dns/DNSServiceDiscoveryTest.java
Patch:
@@ -150,6 +150,7 @@ public void testConsumer() throws Exception {
 
         dnsServiceDiscovery.addServiceInstancesChangedListener(changedListener);
         ArgumentCaptor<ServiceInstancesChangedEvent> argument = ArgumentCaptor.forClass(ServiceInstancesChangedEvent.class);
+        Thread.sleep(1000);
         Mockito.verify(changedListener, Mockito.timeout(1000)).onEvent(argument.capture());
         assertEquals("c", argument.getValue().getServiceInstances().get(0).getMetadata("a"));
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/URLAddress.java
Patch:
@@ -24,6 +24,8 @@
 import java.net.URLDecoder;
 import java.util.Objects;
 
+import static org.apache.dubbo.common.constants.CommonConstants.PATH_SEPARATOR;
+
 public class URLAddress implements Serializable {
     private static final long serialVersionUID = -1985165475234910535L;
 
@@ -168,7 +170,7 @@ public static URLAddress parse(String rawAddress, String defaultProtocol, boolea
                 decodeStr = URLDecoder.decode(rawAddress, "UTF-8");
             }
 
-            boolean isPathAddress = !Character.isDigit(decodeStr.charAt(0));
+            boolean isPathAddress = decodeStr.contains(PATH_SEPARATOR);
             if (isPathAddress) {
                 return createPathURLAddress(decodeStr, rawAddress, defaultProtocol);
             }

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistryTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.registry.NotifyListener;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.status.RegistryStatusChecker;
-import org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter;
 
 import org.apache.curator.test.TestingServer;
 import org.junit.jupiter.api.AfterEach;
@@ -59,7 +58,6 @@ public void setUp() throws Exception {
 
         this.registryUrl = URL.valueOf("zookeeper://localhost:" + zkServerPort);
         zookeeperRegistryFactory = new ZookeeperRegistryFactory();
-        zookeeperRegistryFactory.setZookeeperTransporter(new CuratorZookeeperTransporter());
         this.zookeeperRegistry = (ZookeeperRegistry) zookeeperRegistryFactory.createRegistry(registryUrl);
     }
 

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.dubbo.remoting.zookeeper.DataListener;
 import org.apache.dubbo.remoting.zookeeper.EventType;
 import org.apache.dubbo.remoting.zookeeper.StateListener;
-import org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperClient;
+import org.apache.dubbo.remoting.zookeeper.AbstractZookeeperClient;
 
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperTransporter.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.remoting.zookeeper.ZookeeperClient;
-import org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter;
+import org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter;
 
 public class CuratorZookeeperTransporter extends AbstractZookeeperTransporter {
     @Override

File: dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/org/apache/dubbo/remoting/zookeeper/curator/support/AbstractZookeeperTransporterTest.java
Patch:
@@ -14,10 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.remoting.zookeeper.support;
+package org.apache.dubbo.remoting.zookeeper.curator.support;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.NetUtils;
+import org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter;
 import org.apache.dubbo.remoting.zookeeper.ZookeeperClient;
 import org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/DefaultServiceInstance.java
Patch:
@@ -275,6 +275,9 @@ public static class Endpoint {
         Integer port;
         String protocol;
 
+        public Endpoint() {
+        }
+
         public Endpoint(Integer port, String protocol) {
             this.port = port;
             this.protocol = protocol;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigValidationUtils.java
Patch:
@@ -707,7 +707,7 @@ public static void checkProperty(String property, String value, int maxlength, P
         if (pattern != null) {
             Matcher matcher = pattern.matcher(value);
             if (!matcher.matches()) {
-                throw new IllegalStateException("Invalid " + property + "=\"" + value + "\" contains illegal " +
+                logger.error("Invalid " + property + "=\"" + value + "\" contains illegal " +
                     "character, only digit, letter, '-', '_' or '.' is legal.");
             }
         }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.config.utils.ConfigValidationUtils;
 import org.apache.dubbo.rpc.model.ApplicationModel;
+
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
@@ -229,7 +230,7 @@ public void checkPathLength() throws Exception {
 
     @Test
     public void checkName() throws Exception {
-        Assertions.assertThrows(IllegalStateException.class, () -> ConfigValidationUtils.checkName("hello", "world%"));
+        Assertions.assertDoesNotThrow(() -> ConfigValidationUtils.checkName("hello", "world%"));
     }
 
     @Test
@@ -279,9 +280,9 @@ public void checkMethodName() throws Exception {
 
         try {
             ConfigValidationUtils.checkMethodName("hello", "0a");
-            fail("the value should be illegal.");
         } catch (Exception e) {
             // ignore
+            fail("the value should be legal.");
         }
     }
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/activate/impl/ActivateExt1Impl1.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.extension.activate.ActivateExt1;
 
-@Activate(group = {"default_group"})
+@Activate(order = 1, group = {"default_group"})
 public class ActivateExt1Impl1 implements ActivateExt1 {
     public String echo(String msg) {
         return msg;

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/activate/impl/OrderActivateExtImpl1.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.extension.activate.ActivateExt1;
 
-@Activate(order = 1, group = {"order"})
+@Activate(order = 2, group = {"order"})
 public class OrderActivateExtImpl1 implements ActivateExt1 {
 
     public String echo(String msg) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/activate/impl/OrderActivateExtImpl2.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.extension.activate.ActivateExt1;
 
-@Activate(order = 2, group = {"order"})
+@Activate(order = 100, group = {"order"})
 public class OrderActivateExtImpl2 implements ActivateExt1 {
 
     public String echo(String msg) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleListener.java
Patch:
@@ -180,7 +180,7 @@ public void setRawRule(String rawRule) {
     }
 
     private MigrationRule parseRule(String rawRule) {
-        MigrationRule tmpRule = rule;
+        MigrationRule tmpRule = rule == null ? MigrationRule.INIT : rule;
         if (INIT.equals(rawRule)) {
             tmpRule = MigrationRule.INIT;
         } else {

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java
Patch:
@@ -69,7 +69,7 @@ public class UrlUtils {
 
     public static URL parseURL(String address, Map<String, String> defaults) {
         if (address == null || address.length() == 0) {
-            return null;
+            throw new IllegalArgumentException("Address is not allowed to be empty, please re-enter.");
         }
         String url;
         if (address.contains("://") || address.contains(URL_PARAM_STARTING_SYMBOL)) {
@@ -166,11 +166,11 @@ public static URL parseURL(String address, Map<String, String> defaults) {
 
     public static List<URL> parseURLs(String address, Map<String, String> defaults) {
         if (address == null || address.length() == 0) {
-            return null;
+            throw new IllegalArgumentException("Address is not allowed to be empty, please re-enter.");
         }
         String[] addresses = REGISTRY_SPLIT_PATTERN.split(address);
         if (addresses == null || addresses.length == 0) {
-            return null; //here won't be empty
+            throw new IllegalArgumentException("Addresses is not allowed to be empty, please re-enter."); //here won't be empty
         }
         List<URL> registries = new ArrayList<URL>();
         for (String addr : addresses) {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.utils.ClassUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.ReferenceConfig;
+import org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer;
 import org.apache.dubbo.config.spring.reference.ReferenceBeanManager;
 import org.apache.dubbo.config.spring.reference.ReferenceBeanSupport;
 import org.apache.dubbo.config.spring.reference.ReferenceAttributes;
@@ -172,11 +173,11 @@ public void setBeanName(String name) {
      * In this way, the influence of Spring is eliminated, and the dubbo configuration initialization is controllable.
      *
      * <p/>
-     * Dubbo config beans are initialized in DubboConfigInitializationPostProcessor.
+     * Dubbo config beans are initialized in DubboConfigBeanInitializer.
      * <br/>
      * The actual references will be processing in DubboBootstrap.referServices().
      *
-     * @see org.apache.dubbo.config.spring.context.DubboConfigInitializationPostProcessor
+     * @see DubboConfigBeanInitializer
      * @see org.apache.dubbo.config.bootstrap.DubboBootstrap
      */
     @Override

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/reference/ReferenceBeanManager.java
Patch:
@@ -60,7 +60,7 @@ public void addReference(ReferenceBean referenceBean) throws Exception {
 
         if (!initialized) {
             //TODO add issue url to describe early initialization
-            logger.warn("Early initialize reference bean before DubboConfigInitializationPostProcessor," +
+            logger.warn("Early initialize reference bean before DubboConfigBeanInitializer," +
                     " the BeanPostProcessor has not been loaded at this time, which may cause abnormalities in some components (such as seata): " +
                     referenceBeanName + " = " + ReferenceBeanSupport.generateReferenceKey(referenceBean, applicationContext));
         }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/DubboBeanUtils.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder;
-import org.apache.dubbo.config.spring.context.DubboConfigInitializationPostProcessor;
+import org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer;
 import org.apache.dubbo.config.spring.reference.ReferenceBeanManager;
 import org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
@@ -80,8 +80,8 @@ static void registerCommonBeans(BeanDefinitionRegistry registry) {
         registerInfrastructureBean(registry, DubboConfigDefaultPropertyValueBeanPostProcessor.BEAN_NAME,
                 DubboConfigDefaultPropertyValueBeanPostProcessor.class);
 
-        // Dubbo config initialization processor
-        registerInfrastructureBean(registry, DubboConfigInitializationPostProcessor.BEAN_NAME, DubboConfigInitializationPostProcessor.class);
+        // Dubbo config initializer
+        registerInfrastructureBean(registry, DubboConfigBeanInitializer.BEAN_NAME, DubboConfigBeanInitializer.class);
 
         // register infra bean if not exists later
         registerInfrastructureBean(registry, DubboInfraBeanRegisterPostProcessor.BEAN_NAME, DubboInfraBeanRegisterPostProcessor.class);

File: dubbo-common/src/main/java/org/apache/dubbo/config/MethodConfig.java
Patch:
@@ -216,6 +216,7 @@ public List<String> getPrefixes() {
 
     @Override
     protected void processExtraRefresh(String preferredPrefix, InmemoryConfiguration subPropsConfiguration) {
+        // refresh ArgumentConfigs
         if (this.getArguments() != null && this.getArguments().size() > 0) {
             for (ArgumentConfig argument : this.getArguments()) {
                 refreshArgument(argument, subPropsConfiguration);

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.dubbo.config.AbstractInterfaceConfig;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ConfigCenterConfig;
+import org.apache.dubbo.config.ConfigKeys;
 import org.apache.dubbo.config.ConsumerConfig;
 import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.MethodConfig;
@@ -74,7 +75,7 @@ public class ConfigManager extends LifecycleAdapter implements FrameworkExt {
     public static final String NAME = "config";
     public static final String BEAN_NAME = "dubboConfigManager";
     private static final String CONFIG_NAME_READ_METHOD = "getName";
-    public static final String DUBBO_CONFIG_MODE = "dubbo.config.mode";
+    public static final String DUBBO_CONFIG_MODE = ConfigKeys.DUBBO_CONFIG_MODE;
 
     private final ReadWriteLock lock = new ReentrantReadWriteLock();
 

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/autoconfigure/DubboConfigurationProperties.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.spring.boot.autoconfigure;
 
 import org.apache.dubbo.config.ApplicationConfig;
+import org.apache.dubbo.config.ConfigKeys;
 import org.apache.dubbo.config.ConsumerConfig;
 import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.ModuleConfig;
@@ -43,6 +44,7 @@
 /**
  * Dubbo {@link ConfigurationProperties Config Properties} only used to generate JSON metadata(non-public class)
  *
+ * @see ConfigKeys
  * @since 2.7.1
  */
 @ConfigurationProperties(DUBBO_PREFIX)

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigValidationUtils.java
Patch:
@@ -208,7 +208,6 @@ public static List<URL> loadRegistries(AbstractInterfaceConfig interfaceConfig,
                     List<URL> urls = UrlUtils.parseURLs(address, map);
 
                     for (URL url : urls) {
-
                         url = URLBuilder.from(url)
                             .addParameter(REGISTRY_KEY, url.getProtocol())
                             .setProtocol(extractRegistryType(url))

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -1528,6 +1528,7 @@ private void destroyServiceDiscoveries() {
 
     private void destroyMetadataReports() {
         AbstractMetadataReportFactory.destroy();
+        MetadataReportInstance.reset();
         ExtensionLoader.resetExtensionLoader(MetadataReportFactory.class);
     }
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/boot/configprops/SpringBootMultipleConfigPropsTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.config.spring.ZooKeeperServer;
 import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
@@ -68,6 +69,7 @@ public class SpringBootMultipleConfigPropsTest {
     @BeforeAll
     public static void setUp() {
         ZooKeeperServer.start();
+        DubboBootstrap.reset();
     }
 
     @Autowired

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/propertyconfigurer/consumer/PropertyConfigurerTest.java
Patch:
@@ -48,14 +48,14 @@ public void testEarlyInit() {
             providerContext.start();
 
             // clear config manager
-            //ApplicationModel.getConfigManager().clear();
             DubboBootstrap.reset(false);
 
             try {
                 Thread.sleep(1000);
             } catch (InterruptedException e) {
             }
 
+            // Resolve placeholder by PropertyPlaceholderConfigurer in dubbo-consumer.xml, without import property source.
             AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class);
             context.start();
 
@@ -76,7 +76,6 @@ public void testEarlyInit() {
     @EnableDubbo(scanBasePackages = "org.apache.dubbo.config.spring.propertyconfigurer.consumer")
     @ComponentScan(value = {"org.apache.dubbo.config.spring.propertyconfigurer.consumer"})
     @ImportResource("classpath:/org/apache/dubbo/config/spring/propertyconfigurer/consumer/dubbo-consumer.xml")
-    @PropertySource("classpath:/org/apache/dubbo/config/spring/propertyconfigurer/consumer/app.properties")
     static class ConsumerConfiguration {
         @Bean
         public DemoBeanFactoryPostProcessor bizBeanFactoryPostProcessor(HelloService service) {

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/propertyconfigurer/consumer2/PropertySourcesConfigurerTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.config.spring.api.HelloService;
 import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
 import org.apache.dubbo.config.spring.propertyconfigurer.consumer.DemoBeanFactoryPostProcessor;
-import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
@@ -30,7 +29,6 @@
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.ImportResource;
-import org.springframework.context.annotation.PropertySource;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 
 public class PropertySourcesConfigurerTest {
@@ -56,6 +54,7 @@ public void testEarlyInit() {
             // reset config
             DubboBootstrap.reset(false);
 
+            // Resolve placeholder by PropertySourcesPlaceholderConfigurer in dubbo-consumer.xml, without import property source.
             AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class);
             try {
                 context.start();
@@ -76,7 +75,6 @@ public void testEarlyInit() {
     @EnableDubbo(scanBasePackages = "org.apache.dubbo.config.spring.propertyconfigurer.consumer2")
     @ComponentScan(value = {"org.apache.dubbo.config.spring.propertyconfigurer.consumer2"})
     @ImportResource("classpath:/org/apache/dubbo/config/spring/propertyconfigurer/consumer2/dubbo-consumer.xml")
-    @PropertySource("classpath:/org/apache/dubbo/config/spring/propertyconfigurer/consumer2/app.properties")
     static class ConsumerConfiguration {
         @Bean
         public DemoBeanFactoryPostProcessor bizBeanFactoryPostProcessor(HelloService service) {

File: dubbo-spring-boot/dubbo-spring-boot-compatible/actuator/src/main/java/org/apache/dubbo/spring/boot/actuate/endpoint/metadata/AbstractDubboMetadata.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
 
+import org.apache.dubbo.config.spring.util.DubboBeanUtils;
 import org.springframework.beans.BeansException;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
@@ -38,7 +39,6 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import static org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.BEAN_NAME;
 import static org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors;
 import static org.springframework.util.ClassUtils.isPrimitiveOrWrapper;
 
@@ -113,7 +113,7 @@ protected Map<String, ServiceBean> getServiceBeansMap() {
     }
 
     protected ReferenceAnnotationBeanPostProcessor getReferenceAnnotationBeanPostProcessor() {
-        return applicationContext.getBean(BEAN_NAME, ReferenceAnnotationBeanPostProcessor.class);
+        return DubboBeanUtils.getReferenceAnnotationBeanPostProcessor(applicationContext);
     }
 
     protected Map<String, ProtocolConfig> getProtocolConfigsBeanMap() {

File: dubbo-common/src/main/java/org/apache/dubbo/common/BaseServiceMetadata.java
Patch:
@@ -38,11 +38,11 @@ public static String buildServiceKey(String path, String group, String version)
         length += 3;
         StringBuilder buf = new StringBuilder(length);
         if (group != null && group.length() > 0) {
-            buf.append(group).append("/");
+            buf.append(group).append('/');
         }
         buf.append(path);
         if (version != null && version.length() > 0) {
-            buf.append(":").append(version);
+            buf.append(':').append(version);
         }
         return buf.toString().intern();
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java
Patch:
@@ -106,7 +106,7 @@ public static Mixin mixin(Class<?>[] ics, Class<?>[] dcs, ClassLoader cl) {
 
                 ccp.addField("private " + dcs[i].getName() + " d" + i + ";");
 
-                code.append("d").append(i).append(" = (").append(dcs[i].getName()).append(")$1[").append(i).append("];\n");
+                code.append('d').append(i).append(" = (").append(dcs[i].getName()).append(")$1[").append(i).append("];\n");
                 if (MixinAware.class.isAssignableFrom(dcs[i])) {
                     code.append("d").append(i).append(".setMixinInstance(this);\n");
                 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java
Patch:
@@ -199,7 +199,7 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {
                     }
                     code.append(" Object ret = handler.invoke(this, methods[").append(ix).append("], args);");
                     if (!Void.TYPE.equals(rt)) {
-                        code.append(" return ").append(asArgument(rt, "ret")).append(";");
+                        code.append(" return ").append(asArgument(rt, "ret")).append(';');
                     }
 
                     methods.add(method);

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java
Patch:
@@ -150,7 +150,7 @@ private static Wrapper makeWrapper(Class<?> c) {
                 continue;
             }
 
-            c1.append(" if( $2.equals(\"").append(fn).append("\") ){ w.").append(fn).append("=").append(arg(ft, "$3")).append("; return; }");
+            c1.append(" if( $2.equals(\"").append(fn).append("\") ){ w.").append(fn).append('=').append(arg(ft, "$3")).append("; return; }");
             c2.append(" if( $2.equals(\"").append(fn).append("\") ){ return ($w)w.").append(fn).append("; }");
             pts.put(fn, ft);
         }
@@ -242,7 +242,7 @@ private static Wrapper makeWrapper(Class<?> c) {
             } else if ((matcher = ReflectUtils.SETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {
                 Class<?> pt = method.getParameterTypes()[0];
                 String pn = propertyName(matcher.group(1));
-                c1.append(" if( $2.equals(\"").append(pn).append("\") ){ w.").append(method.getName()).append("(").append(arg(pt, "$3")).append("); return; }");
+                c1.append(" if( $2.equals(\"").append(pn).append("\") ){ w.").append(method.getName()).append('(').append(arg(pt, "$3")).append("); return; }");
                 pts.put(pn, pt);
             }
         }

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/ClassUtils.java
Patch:
@@ -349,7 +349,7 @@ public static String getMethodName(Method method, Class<?>[] parameterClasses, S
             StringBuilder buf = new StringBuilder(rightCode);
             for (int i = parameterClasses.length; i < types.length; i++) {
                 if (buf.length() > 0) {
-                    buf.append(",");
+                    buf.append(',');
                 }
                 Class<?> type = types[i];
                 String def;

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/AdaptiveClassCodeGenerator.java
Patch:
@@ -101,7 +101,7 @@ public String generate() {
         for (Method method : methods) {
             code.append(generateMethod(method));
         }
-        code.append("}");
+        code.append('}');
 
         if (logger.isDebugEnabled()) {
             logger.debug(code.toString());

File: dubbo-common/src/main/java/org/apache/dubbo/common/status/support/StatusUtils.java
Patch:
@@ -36,15 +36,15 @@ public static Status getSummaryStatus(Map<String, Status> statuses) {
             if (Level.ERROR.equals(l)) {
                 level = Level.ERROR;
                 if (msg.length() > 0) {
-                    msg.append(",");
+                    msg.append(',');
                 }
                 msg.append(key);
             } else if (Level.WARN.equals(l)) {
                 if (!Level.ERROR.equals(level)) {
                     level = Level.WARN;
                 }
                 if (msg.length() > 0) {
-                    msg.append(",");
+                    msg.append(',');
                 }
                 msg.append(key);
             }

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/PathURLAddress.java
Patch:
@@ -162,13 +162,13 @@ public String toString() {
         if (StringUtils.isNotEmpty(host)) {
             buf.append(host);
             if (port > 0) {
-                buf.append(":");
+                buf.append(':');
                 buf.append(port);
             }
         }
 
         if (StringUtils.isNotEmpty(path)) {
-            buf.append("/");
+            buf.append('/');
             buf.append(path);
         }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/URLAddress.java
Patch:
@@ -154,7 +154,7 @@ public String toString() {
         if (StringUtils.isNotEmpty(host)) {
             buf.append(host);
             if (port > 0) {
-                buf.append(":");
+                buf.append(':');
                 buf.append(port);
             }
         }

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -681,11 +681,11 @@ public String toString() {
 
                         Object value = method.invoke(this);
                         if (value != null) {
-                            buf.append(" ");
+                            buf.append(' ');
                             buf.append(key);
                             buf.append("=\"");
                             buf.append(key.equals("password") ? "******" : value);
-                            buf.append("\"");
+                            buf.append('\"');
                         }
                     }
                 } catch (Exception e) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/model/media/Image.java
Patch:
@@ -70,7 +70,7 @@ public String toString() {
         sb.append(", width=").append(width);
         sb.append(", height=").append(height);
         sb.append(", size=").append(size);
-        sb.append("]");
+        sb.append(']');
         return sb.toString();
     }
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/model/media/Media.java
Patch:
@@ -106,7 +106,7 @@ public String toString() {
         sb.append(", persons=").append(persons);
         sb.append(", player=").append(player);
         sb.append(", copyright=").append(copyright);
-        sb.append("]");
+        sb.append(']');
         return sb.toString();
     }
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/model/person/FullAddress.java
Patch:
@@ -185,15 +185,15 @@ public String toString() {
             sb.append(countryName);
         }
         if (provinceName != null && provinceName.length() > 0) {
-            sb.append(" ");
+            sb.append(' ');
             sb.append(provinceName);
         }
         if (cityName != null && cityName.length() > 0) {
-            sb.append(" ");
+            sb.append(' ');
             sb.append(cityName);
         }
         if (streetAddress != null && streetAddress.length() > 0) {
-            sb.append(" ");
+            sb.append(' ');
             sb.append(streetAddress);
         }
         return sb.toString();

File: dubbo-common/src/test/java/org/apache/dubbo/common/model/person/Phone.java
Patch:
@@ -120,17 +120,17 @@ public String toString() {
         StringBuilder sb = new StringBuilder();
         if (country != null && country.length() > 0) {
             sb.append(country);
-            sb.append("-");
+            sb.append('-');
         }
         if (area != null && area.length() > 0) {
             sb.append(area);
-            sb.append("-");
+            sb.append('-');
         }
         if (number != null && number.length() > 0) {
             sb.append(number);
         }
         if (extensionNumber != null && extensionNumber.length() > 0) {
-            sb.append("-");
+            sb.append('-');
             sb.append(extensionNumber);
         }
         return sb.toString();

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/media/Image.java
Patch:
@@ -70,7 +70,7 @@ public String toString() {
         sb.append(", width=").append(width);
         sb.append(", height=").append(height);
         sb.append(", size=").append(size);
-        sb.append("]");
+        sb.append(']');
         return sb.toString();
     }
 

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/media/Media.java
Patch:
@@ -106,7 +106,7 @@ public String toString() {
         sb.append(", persons=").append(persons);
         sb.append(", player=").append(player);
         sb.append(", copyright=").append(copyright);
-        sb.append("]");
+        sb.append(']');
         return sb.toString();
     }
 

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/person/FullAddress.java
Patch:
@@ -185,15 +185,15 @@ public String toString() {
             sb.append(countryName);
         }
         if (provinceName != null && provinceName.length() > 0) {
-            sb.append(" ");
+            sb.append(' ');
             sb.append(provinceName);
         }
         if (cityName != null && cityName.length() > 0) {
-            sb.append(" ");
+            sb.append(' ');
             sb.append(cityName);
         }
         if (streetAddress != null && streetAddress.length() > 0) {
-            sb.append(" ");
+            sb.append(' ');
             sb.append(streetAddress);
         }
         return sb.toString();

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/model/person/Phone.java
Patch:
@@ -120,17 +120,17 @@ public String toString() {
         StringBuilder sb = new StringBuilder();
         if (country != null && country.length() > 0) {
             sb.append(country);
-            sb.append("-");
+            sb.append('-');
         }
         if (area != null && area.length() > 0) {
             sb.append(area);
-            sb.append("-");
+            sb.append('-');
         }
         if (number != null && number.length() > 0) {
             sb.append(number);
         }
         if (extensionNumber != null && extensionNumber.length() > 0) {
-            sb.append("-");
+            sb.append('-');
             sb.append(extensionNumber);
         }
         return sb.toString();

File: dubbo-common/src/test/java/org/apache/dubbo/rpc/support/ProtocolUtilsTest.java
Patch:
@@ -60,14 +60,14 @@ private static String serviceKeyOldImpl(int port, String serviceName, String ser
         StringBuilder buf = new StringBuilder();
         if (serviceGroup != null && serviceGroup.length() > 0) {
             buf.append(serviceGroup);
-            buf.append("/");
+            buf.append('/');
         }
         buf.append(serviceName);
         if (serviceVersion != null && serviceVersion.length() > 0 && !"0.0.0".equals(serviceVersion)) {
-            buf.append(":");
+            buf.append(':');
             buf.append(serviceVersion);
         }
-        buf.append(":");
+        buf.append(':');
         buf.append(port);
         return buf.toString();
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java
Patch:
@@ -56,11 +56,11 @@ public class ReferenceConfigCache {
 
         StringBuilder ret = new StringBuilder();
         if (!StringUtils.isBlank(referenceConfig.getGroup())) {
-            ret.append(referenceConfig.getGroup()).append("/");
+            ret.append(referenceConfig.getGroup()).append('/');
         }
         ret.append(iName);
         if (!StringUtils.isBlank(referenceConfig.getVersion())) {
-            ret.append(":").append(referenceConfig.getVersion());
+            ret.append(':').append(referenceConfig.getVersion());
         }
         return ret.toString();
     };

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java
Patch:
@@ -210,7 +210,7 @@ public void checkLength() throws Exception {
         Assertions.assertThrows(IllegalStateException.class, () -> {
             StringBuilder builder = new StringBuilder();
             for (int i = 0; i <= 200; i++) {
-                builder.append("a");
+                builder.append('a');
             }
             ConfigValidationUtils.checkLength("hello", builder.toString());
         });
@@ -221,7 +221,7 @@ public void checkPathLength() throws Exception {
         Assertions.assertThrows(IllegalStateException.class, () -> {
             StringBuilder builder = new StringBuilder();
             for (int i = 0; i <= 200; i++) {
-                builder.append("a");
+                builder.append('a');
             }
             ConfigValidationUtils.checkPathLength("hello", builder.toString());
         });

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/properties/DefaultDubboConfigBinder.java
Patch:
@@ -63,7 +63,7 @@ private String buildErrorMsg(List<FieldError> errors, String prefix, String conf
                 builder.append(", " + errors.get(i).getField());
             });
         }
-        builder.append("]");
+        builder.append(']');
         return builder.toString();
     }
 }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/reference/ReferenceBeanSupport.java
Patch:
@@ -96,11 +96,11 @@ public static String generateReferenceKey(Map<String, Object> attributes, Proper
         //ReferenceBean:group/interface:version
         StringBuilder beanNameBuilder = new StringBuilder("ReferenceBean:");
         if (StringUtils.isNotEmpty(group)) {
-            beanNameBuilder.append(group).append("/");
+            beanNameBuilder.append(group).append('/');
         }
         beanNameBuilder.append(interfaceClass);
         if (StringUtils.isNotEmpty(version)) {
-            beanNameBuilder.append(":").append(version);
+            beanNameBuilder.append(':').append(version);
         }
 
         // append attributes

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/DataSourceStatusChecker.java
Patch:
@@ -73,11 +73,11 @@ public Status check() {
                     }
                 }
                 buf.append(metaData.getURL());
-                buf.append("(");
+                buf.append('(');
                 buf.append(metaData.getDatabaseProductName());
-                buf.append("-");
+                buf.append('-');
                 buf.append(metaData.getDatabaseProductVersion());
-                buf.append(")");
+                buf.append(')');
             } catch (Throwable e) {
                 logger.warn(e.getMessage(), e);
                 return new Status(level, e.getMessage());

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/SpringStatusChecker.java
Patch:
@@ -86,7 +86,7 @@ public Status check() {
                 if (configs != null && configs.length > 0) {
                     for (String config : configs) {
                         if (buf.length() > 0) {
-                            buf.append(",");
+                            buf.append(',');
                         }
                         buf.append(config);
                     }

File: dubbo-configcenter/dubbo-configcenter-nacos/src/main/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfiguration.java
Patch:
@@ -128,13 +128,13 @@ private Properties buildNacosProperties(URL url) {
     private void setServerAddr(URL url, Properties properties) {
         StringBuilder serverAddrBuilder =
                 new StringBuilder(url.getHost()) // Host
-                        .append(":")
+                        .append(':')
                         .append(url.getPort()); // Port
 
         // Append backup parameter as other servers
         String backup = url.getParameter(BACKUP_KEY);
         if (backup != null) {
-            serverAddrBuilder.append(",").append(backup);
+            serverAddrBuilder.append(',').append(backup);
         }
         String serverAddr = serverAddrBuilder.toString();
         properties.put(SERVER_ADDR, serverAddr);

File: dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/jvalidation/JValidator.java
Patch:
@@ -185,13 +185,13 @@ private static Class<?> generateMethodParameterClass(Class<?> clazz, Method meth
 
     private static String generateMethodParameterClassName(Class<?> clazz, Method method) {
         StringBuilder builder = new StringBuilder().append(clazz.getName())
-                .append("_")
+                .append('_')
                 .append(toUpperMethoName(method.getName()))
                 .append("Parameter");
 
         Class<?>[] parameterTypes = method.getParameterTypes();
         for (Class<?> parameterType : parameterTypes) {
-            builder.append("_").append(parameterType.getName());
+            builder.append('_').append(parameterType.getName());
         }
 
         return builder.toString();

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/util/ClassUtils.java
Patch:
@@ -121,7 +121,7 @@ public static String getCanonicalNameForParameterizedType(ParameterizedType para
                 sb.append(ownerType.toString());
             }
 
-            sb.append(".");
+            sb.append('.');
 
             if (ownerType instanceof ParameterizedType) {
                 // Find simple name of nested type by removing the
@@ -137,7 +137,7 @@ public static String getCanonicalNameForParameterizedType(ParameterizedType para
 
         if (actualTypeArguments != null &&
                 actualTypeArguments.length > 0) {
-            sb.append("<");
+            sb.append('<');
             boolean first = true;
             for (Type t : actualTypeArguments) {
                 if (!first) {
@@ -153,7 +153,7 @@ public static String getCanonicalNameForParameterizedType(ParameterizedType para
                 }
                 first = false;
             }
-            sb.append(">");
+            sb.append('>');
         }
 
         return sb.toString();

File: dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/AbstractServiceAnnotationProcessor.java
Patch:
@@ -78,7 +78,7 @@ public static String getMethodSignature(ExecutableElement method) {
         StringBuilder methodSignatureBuilder = new StringBuilder();
 
         method.getModifiers().forEach(member -> {
-            methodSignatureBuilder.append(member).append(" ");
+            methodSignatureBuilder.append(member).append(' ');
         });
 
         methodSignatureBuilder.append(method.getReturnType())

File: dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/rest/DefaultServiceRestMetadataResolver.java
Patch:
@@ -112,7 +112,7 @@ protected String resolveRequestPath(ProcessingEnvironment processingEnv, TypeEle
             // If "-parameters" option is enabled, take the parameter name as the path variable name,
             // or use the index of parameter
             String pathVariableName = isEnabledParametersCompilerOption(parameterName) ? parameterName : valueOf(i);
-            requestPathBuilder.append(PATH_SEPARATOR).append("{").append(pathVariableName).append("}");
+            requestPathBuilder.append(PATH_SEPARATOR).append('{').append(pathVariableName).append('}');
         }
 
         return requestPathBuilder.toString();

File: dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/util/TypeUtils.java
Patch:
@@ -384,14 +384,14 @@ static String toString(TypeMirror type) {
             if (!typeParameterElements.isEmpty()) {
                 List<TypeMirror> typeMirrors = invokeMethod(type, "getTypeArguments");
                 StringBuilder typeBuilder = new StringBuilder(element.toString());
-                typeBuilder.append("<");
+                typeBuilder.append('<');
                 for (int i = 0; i < typeMirrors.size(); i++) {
                     if (i > 0) {
                         typeBuilder.append(", ");
                     }
                     typeBuilder.append(typeMirrors.get(i).toString());
                 }
-                typeBuilder.append(">");
+                typeBuilder.append('>');
                 return typeBuilder.toString();
             }
         }

File: dubbo-metadata/dubbo-metadata-report-nacos/src/main/java/org/apache/dubbo/metadata/store/nacos/NacosMetadataReport.java
Patch:
@@ -110,12 +110,12 @@ private Properties buildNacosProperties(URL url) {
     private void setServerAddr(URL url, Properties properties) {
         StringBuilder serverAddrBuilder =
                 new StringBuilder(url.getHost()) // Host
-                        .append(":")
+                        .append(':')
                         .append(url.getPort()); // Port
         // Append backup parameter as other servers
         String backup = url.getParameter(BACKUP_KEY);
         if (backup != null) {
-            serverAddrBuilder.append(",").append(backup);
+            serverAddrBuilder.append(',').append(backup);
         }
         String serverAddr = serverAddrBuilder.toString();
         properties.put(SERVER_ADDR, serverAddr);

File: dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java
Patch:
@@ -127,12 +127,12 @@ private String buildMethodName(Invocation invocation) {
         StringBuilder method = new StringBuilder(methodName);
         Class<?>[] argTypes = RpcUtils.getParameterTypes(invocation);
 
-        method.append("(");
+        method.append('(');
 
         for (int i = 0; i < argTypes.length; i++) {
             method.append((i == 0 ? "" : ", ") + argTypes[i].getSimpleName());
         }
-        method.append(")");
+        method.append(')');
         Class<?> returnType = RpcUtils.getReturnType(invocation);
         String typeName = null;
         if(returnType != null) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Help.java
Patch:
@@ -68,7 +68,7 @@ private String commandHelp(String commandName) {
     private String drawExample(Cmd cmd) {
         final StringBuilder drawExampleStringBuilder = new StringBuilder();
         for (String example : cmd.example()) {
-            drawExampleStringBuilder.append(example).append("\n");
+            drawExampleStringBuilder.append(example).append('\n');
         }
         return drawExampleStringBuilder.toString();
     }

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Version.java
Patch:
@@ -30,7 +30,7 @@ public String execute(CommandContext commandContext, String[] args) {
         StringBuilder versionDescBuilder = new StringBuilder();
         versionDescBuilder.append("dubbo version \"");
         versionDescBuilder.append(org.apache.dubbo.common.Version.getVersion());
-        versionDescBuilder.append("\"");
+        versionDescBuilder.append('\"');
         return versionDescBuilder.toString();
     }
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/legacy/ChangeTelnetHandler.java
Patch:
@@ -41,7 +41,7 @@ public String telnet(Channel channel, String message) {
         if ("/".equals(message) || "..".equals(message)) {
             String service = (String) channel.getAttribute(SERVICE_KEY);
             channel.removeAttribute(SERVICE_KEY);
-            buf.append("Cancelled default service ").append(service).append(".");
+            buf.append("Cancelled default service ").append(service).append('.');
         } else {
             boolean found = false;
             for (Exporter<?> exporter : DubboProtocol.getDubboProtocol().getExporters()) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/legacy/CurrentTelnetHandler.java
Patch:
@@ -36,7 +36,7 @@ public String telnet(Channel channel, String message) {
         String service = (String) channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY);
         StringBuilder buf = new StringBuilder();
         if (service == null || service.length() == 0) {
-            buf.append("/");
+            buf.append('/');
         } else {
             buf.append(service);
         }

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/legacy/InvokeTelnetHandler.java
Patch:
@@ -243,12 +243,12 @@ private void printSelectMessage(StringBuilder buf, List<Method> methods) {
         buf.append("Methods:\r\n");
         for (int i = 0; i < methods.size(); i++) {
             Method method = methods.get(i);
-            buf.append(i + 1).append(". ").append(method.getName()).append("(");
+            buf.append(i + 1).append(". ").append(method.getName()).append('(');
             Class<?>[] parameterTypes = method.getParameterTypes();
             for (int n = 0; n < parameterTypes.length; n++) {
                 buf.append(parameterTypes[n].getSimpleName());
                 if (n != parameterTypes.length - 1) {
-                    buf.append(",");
+                    buf.append(',');
                 }
             }
             buf.append(")\r\n");

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/textui/TTree.java
Patch:
@@ -69,7 +69,7 @@ public void callback(int deep, boolean isLast, String prefix, Node node) {
 
                 int costPrefixLength = 0;
                 if (hasChild) {
-                    treeSB.append("+");
+                    treeSB.append('+');
                 }
                 if (isPrintCost
                         && !node.isRoot()) {
@@ -82,7 +82,7 @@ public void callback(int deep, boolean isLast, String prefix, Node node) {
                     boolean isFirst = true;
                     while (scanner.hasNextLine()) {
                         if (isFirst) {
-                            treeSB.append(scanner.nextLine()).append("\n");
+                            treeSB.append(scanner.nextLine()).append('\n');
                             isFirst = false;
                         } else {
                             treeSB.append(prefix)

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/status/RegistryStatusChecker.java
Patch:
@@ -41,7 +41,7 @@ public Status check() {
         StringBuilder buf = new StringBuilder();
         for (Registry registry : registries) {
             if (buf.length() > 0) {
-                buf.append(",");
+                buf.append(',');
             }
             buf.append(registry.getUrl().getAddress());
             if (!registry.isAvailable()) {

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/util/NacosNamingServiceUtils.java
Patch:
@@ -125,13 +125,13 @@ private static Properties buildNacosProperties(URL url) {
     private static void setServerAddr(URL url, Properties properties) {
         StringBuilder serverAddrBuilder =
                 new StringBuilder(url.getHost()) // Host
-                        .append(":")
+                        .append(':')
                         .append(url.getPort()); // Port
 
         // Append backup parameter as other servers
         String backup = url.getParameter(BACKUP_KEY);
         if (backup != null) {
-            serverAddrBuilder.append(",").append(backup);
+            serverAddrBuilder.append(',').append(backup);
         }
 
         String serverAddr = serverAddrBuilder.toString();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/codec/TelnetCodec.java
Patch:
@@ -226,13 +226,13 @@ protected Object decode(Channel channel, ChannelBuffer buffer, int readable, byt
                     String ov = history.get(old);
                     StringBuilder buf = new StringBuilder();
                     for (int i = 0; i < ov.length(); i++) {
-                        buf.append("\b");
+                        buf.append('\b');
                     }
                     for (int i = 0; i < ov.length(); i++) {
-                        buf.append(" ");
+                        buf.append(' ');
                     }
                     for (int i = 0; i < ov.length(); i++) {
-                        buf.append("\b");
+                        buf.append('\b');
                     }
                     value = buf.toString() + value;
                 }

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/PerformanceClientTest.java
Patch:
@@ -78,7 +78,7 @@ public void testClient() throws Throwable {
         // Create some data for test
         StringBuilder buf = new StringBuilder(length);
         for (int i = 0; i < length; i++) {
-            buf.append("A");
+            buf.append('A');
         }
         final String data = buf.toString();
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/transport/codec/DeprecatedTelnetCodec.java
Patch:
@@ -255,13 +255,13 @@ protected Object decode(Channel channel, InputStream is, int readable, byte[] me
                     String ov = history.get(old);
                     StringBuilder buf = new StringBuilder();
                     for (int i = 0; i < ov.length(); i++) {
-                        buf.append("\b");
+                        buf.append('\b');
                     }
                     for (int i = 0; i < ov.length(); i++) {
-                        buf.append(" ");
+                        buf.append(' ');
                     }
                     for (int i = 0; i < ov.length(); i++) {
-                        buf.append("\b");
+                        buf.append('\b');
                     }
                     value = buf.toString() + value;
                 }

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/ReplierDispatcherTest.java
Patch:
@@ -70,7 +70,7 @@ public void testDataPackage() throws Exception {
         for (int i = 5; i < 100; i++) {
             StringBuilder sb = new StringBuilder();
             for (int j = 0; j < i * 100; j++)
-                sb.append("(").append(random.nextLong()).append(")");
+                sb.append('(').append(random.nextLong()).append(')');
             Data d = new Data();
             d.setData(sb.toString());
             Assertions.assertEquals(client.request(d).get().toString(), "hello world");

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java
Patch:
@@ -121,10 +121,10 @@ List<String> getURLBackupAddress(URL url) {
             StringBuilder buf = new StringBuilder();
             buf.append(url.getUsername());
             if (StringUtils.isNotEmpty(url.getPassword())) {
-                buf.append(":");
+                buf.append(':');
                 buf.append(url.getPassword());
             }
-            buf.append("@");
+            buf.append('@');
             authPrefix = buf.toString();
         }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/DeprecatedFilter.java
Patch:
@@ -58,7 +58,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
 
     private String getMethodSignature(Invocation invocation) {
         StringBuilder buf = new StringBuilder(invocation.getMethodName());
-        buf.append("(");
+        buf.append('(');
         Class<?>[] types = invocation.getParameterTypes();
         if (types != null && types.length > 0) {
             boolean first = true;
@@ -71,7 +71,7 @@ private String getMethodSignature(Invocation invocation) {
                 buf.append(type.getSimpleName());
             }
         }
-        buf.append(")");
+        buf.append(')');
         return buf.toString();
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/tps/StatItem.java
Patch:
@@ -79,7 +79,7 @@ public String toString() {
         return new StringBuilder(32).append("StatItem ")
                 .append("[name=").append(name).append(", ")
                 .append("rate = ").append(rate).append(", ")
-                .append("interval = ").append(interval).append("]")
+                .append("interval = ").append(interval).append(']')
                 .toString();
     }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/status/ServerStatusChecker.java
Patch:
@@ -48,12 +48,12 @@ public Status check() {
                 break;
             }
             if (buf.length() > 0) {
-                buf.append(",");
+                buf.append(',');
             }
             buf.append(server.getLocalAddress());
             buf.append("(clients:");
             buf.append(server.getChannels().size());
-            buf.append(")");
+            buf.append(')');
         }
         return new Status(level, buf.toString());
     }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/status/ThreadPoolStatusChecker.java
Patch:
@@ -54,7 +54,7 @@ public Status check() {
                 }
 
                 if (msg.length() > 0) {
-                    msg.append(";");
+                    msg.append(';');
                 }
                 msg.append("Pool status:").append(lvl).append(", max:").append(tp.getMaximumPoolSize()).append(", core:")
                         .append(tp.getCorePoolSize()).append(", largest:").append(tp.getLargestPoolSize()).append(", active:")

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/support/LoggingFilter.java
Patch:
@@ -99,7 +99,7 @@ protected void logHttpHeaders(MultivaluedMap<String, String> headers) {
                     msg.append(", ");
                 }
             }
-            msg.append("\n");
+            msg.append('\n');
         }
         logger.info(msg.toString());
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -753,7 +753,8 @@ public int hashCode() {
         for (Method method : methods) {
             if (MethodUtils.isGetter(method)) {
                 Parameter parameter = method.getAnnotation(Parameter.class);
-                if (parameter != null && parameter.excluded()) {
+                // filter non attribute
+                if (parameter != null && !parameter.attribute()) {
                     continue;
                 }
                 try {

File: dubbo-common/src/main/java/org/apache/dubbo/config/MethodConfig.java
Patch:
@@ -202,7 +202,7 @@ public static List<MethodConfig> constructMethodConfig(Method[] methods) {
      * @return
      */
     @Override
-    @Parameter(excluded = true)
+    @Parameter(excluded = true, attribute = false)
     public List<String> getPrefixes() {
         // parent prefix + method name
         if (parentPrefix != null) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/ProtocolConfig.java
Patch:
@@ -263,7 +263,7 @@ public final void setPort(Integer port) {
     }
 
     @Deprecated
-    @Parameter(excluded = true)
+    @Parameter(excluded = true, attribute = false)
     public String getPath() {
         return getContextpath();
     }
@@ -473,7 +473,7 @@ public void setExchanger(String exchanger) {
      * @deprecated {@link #getDispatcher()}
      */
     @Deprecated
-    @Parameter(excluded = true)
+    @Parameter(excluded = true, attribute = false)
     public String getDispather() {
         return getDispatcher();
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ProviderConfig.java
Patch:
@@ -186,7 +186,7 @@ public void setPort(Integer port) {
     }
 
     @Deprecated
-    @Parameter(excluded = true)
+    @Parameter(excluded = true, attribute = false)
     public String getPath() {
         return getContextpath();
     }
@@ -391,7 +391,7 @@ public void setExchanger(String exchanger) {
      * @deprecated {@link #getDispatcher()}
      */
     @Deprecated
-    @Parameter(excluded = true)
+    @Parameter(excluded = true, attribute = false)
     public String getDispather() {
         return getDispatcher();
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -296,7 +296,7 @@ protected void computeValidRegistryIds() {
         super.computeValidRegistryIds();
     }
 
-    @Parameter(excluded = true)
+    @Parameter(excluded = true, attribute = false)
     public String getUniqueServiceName() {
         return interfaceName != null ? URL.buildKey(interfaceName, getGroup(), getVersion()) : null;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -307,7 +307,7 @@ public void setFile(String file) {
      * @deprecated
      */
     @Deprecated
-    @Parameter(excluded = true)
+    @Parameter(excluded = true, attribute = false)
     public String getTransport() {
         return getTransporter();
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ServiceConfigBase.java
Patch:
@@ -403,7 +403,7 @@ public List<String> getPrefixes() {
         return prefixes;
     }
 
-    @Parameter(excluded = true)
+    @Parameter(excluded = true, attribute = false)
     public String getUniqueServiceName() {
         return interfaceName != null ? URL.buildKey(interfaceName, getGroup(), getVersion()) : null;
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.config.spring.reference.ReferenceBeanSupport;
 import org.apache.dubbo.config.spring.reference.ReferenceAttributes;
 import org.apache.dubbo.config.support.Parameter;
-import org.apache.dubbo.config.utils.ReferenceConfigCache;
 import org.apache.dubbo.rpc.proxy.AbstractProxyFactory;
 import org.springframework.aop.framework.ProxyFactory;
 import org.springframework.aop.target.AbstractLazyCreationTargetSource;
@@ -341,7 +340,7 @@ private Object getCallProxy() throws Exception {
             throw new IllegalStateException("ReferenceBean is not ready yet, please make sure to call reference interface method after dubbo is started.");
         }
         //get reference proxy
-        return ReferenceConfigCache.getCache().get(referenceConfig);
+        return referenceConfig.get();
     }
 
     private class DubboReferenceLazyInitTargetSource extends AbstractLazyCreationTargetSource {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/reference/ReferenceBeanManager.java
Patch:
@@ -132,6 +132,8 @@ private synchronized void  initReferenceBean(ReferenceBean referenceBean) throws
             return;
         }
 
+        // TOTO check same unique service name but difference reference key (means difference attributes).
+
         // reference key
         String referenceKey = ReferenceBeanSupport.generateReferenceKey(referenceBean, applicationContext.getEnvironment());
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/consumer/test/TestConsumerConfiguration.java
Patch:
@@ -78,7 +78,7 @@ public Child c() {
 
     public static abstract class Ancestor {
 
-        @DubboReference(version = "2.5.7", url = remoteURL, application = "dubbo-demo-application")
+        @DubboReference(version = "2.5.7", url = remoteURL,filter = "mymock", application = "dubbo-demo-application")
         private DemoService demoServiceFromAncestor;
 
         public DemoService getDemoServiceFromAncestor() {
@@ -98,7 +98,7 @@ public DemoService getDemoServiceFromParent() {
             return demoServiceFromParent;
         }
 
-        @com.alibaba.dubbo.config.annotation.Reference(version = "2.5.7", url = remoteURL, application = "dubbo-demo-application")
+        @com.alibaba.dubbo.config.annotation.Reference(version = "2.5.7", url = remoteURL, filter = "mymock", application = "dubbo-demo-application")
         public void setDemoServiceFromParent(DemoService demoServiceFromParent) {
             this.demoServiceFromParent = demoServiceFromParent;
         }
@@ -107,7 +107,7 @@ public void setDemoServiceFromParent(DemoService demoServiceFromParent) {
 
     public static class Child extends Parent {
 
-        @Reference(version = "2.5.7", url = remoteURL, application = "dubbo-demo-application")
+        @Reference(version = "2.5.7", url = remoteURL, filter = "mymock", application = "dubbo-demo-application")
         private DemoService demoServiceFromChild;
 
         public DemoService getDemoServiceFromChild() {

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/reference/ReferenceKeyTest.java
Patch:
@@ -266,7 +266,7 @@ static class ConsumerConfiguration2 {
     static class ConsumerConfiguration3 {
 
         //both are reference beans, same bean name but difference interface type
-        @DubboReference(group = "demo", version = "1.2.3", consumer="my-consumer", init=false,
+        @DubboReference(group = "demo", version = "1.2.4", consumer="my-consumer", init=false,
                 url="dubbo://127.0.0.1:20813")
         private HelloService demoService;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -678,7 +678,7 @@ public synchronized void doOverrideIfNecessary() {
             //The current, may have been merged many times
             URL currentUrl = exporter.getInvoker().getUrl();
             //Merged with this configuration
-            URL newUrl = getConfigedInvokerUrl(configurators, currentUrl);
+            URL newUrl = getConfigedInvokerUrl(configurators, originUrl);
             newUrl = getConfigedInvokerUrl(providerConfigurationListener.getConfigurators(), newUrl);
             newUrl = getConfigedInvokerUrl(serviceConfigurationListeners.get(originUrl.getServiceKey())
                     .getConfigurators(), newUrl);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvoker.java
Patch:
@@ -52,7 +52,7 @@ public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBal
             }
             throw new RpcException(e instanceof RpcException ? ((RpcException) e).getCode() : 0,
                     "Failfast invoke providers " + invoker.getUrl() + " " + loadbalance.getClass().getSimpleName()
-                            + " select from all providers " + invokers + " for service " + getInterface().getName()
+                            + " for service " + getInterface().getName()
                             + " method " + invocation.getMethodName() + " on consumer " + NetUtils.getLocalHost()
                             + " use dubbo version " + Version.getVersion()
                             + ", but no luck to perform the invocation. Last error is: " + e.getMessage(),

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -535,7 +535,7 @@ private boolean checkClientCanUse(List<ReferenceCountExchangeClient> referenceCo
 
         for (ReferenceCountExchangeClient referenceCountExchangeClient : referenceCountExchangeClients) {
             // As long as one client is not available, you need to replace the unavailable client with the available one.
-            if (referenceCountExchangeClient == null || referenceCountExchangeClient.isClosed()) {
+            if (referenceCountExchangeClient == null || referenceCountExchangeClient.getCount() <= 0 || referenceCountExchangeClient.isClosed()) {
                 return false;
             }
         }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java
Patch:
@@ -35,8 +35,8 @@
 import java.util.concurrent.locks.ReentrantLock;
 
 import static org.apache.dubbo.remoting.Constants.SEND_RECONNECT_KEY;
-import static org.apache.dubbo.rpc.protocol.dubbo.Constants.LAZY_CONNECT_INITIAL_STATE_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.DEFAULT_LAZY_CONNECT_INITIAL_STATE;
+import static org.apache.dubbo.rpc.protocol.dubbo.Constants.LAZY_CONNECT_INITIAL_STATE_KEY;
 
 /**
  * dubbo protocol support class.
@@ -135,7 +135,7 @@ public CompletableFuture<Object> request(Object request, int timeout, ExecutorSe
     private void warning() {
         if (requestWithWarning) {
             if (warningcount.get() % warning_period == 0) {
-                logger.warn(new IllegalStateException("safe guard client , should not be called ,must have a bug."));
+                logger.warn(url.getAddress() + " " + url.getServiceKey() + " safe guard client , should not be called ,must have a bug.");
             }
             warningcount.incrementAndGet();
         }

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -223,7 +223,8 @@ protected void processExtraRefresh(String preferredPrefix, InmemoryConfiguration
             try {
                 interfaceClass = ClassUtils.forName(interfaceName);
             } catch (ClassNotFoundException e) {
-                throw new IllegalStateException("The interface class is not found", e);
+                // There may be no interface class when generic call
+                return;
             }
             if (!interfaceClass.isInterface()) {
                 throw new IllegalStateException(interfaceName+" is not an interface");

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -190,9 +190,10 @@ public void unexport() {
     public void init() {
         if (this.initialized.compareAndSet(false, true)) {
             if (this.bootstrap == null) {
-                this.setBootstrap(DubboBootstrap.getInstance());
+                this.bootstrap = DubboBootstrap.getInstance();
                 this.bootstrap.initialize();
             }
+            this.bootstrap.service(this);
 
             // load ServiceListeners from extension
             ExtensionLoader<ServiceListener> extensionLoader = ExtensionLoader.getExtensionLoader(ServiceListener.class);

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java
Patch:
@@ -357,7 +357,8 @@ public void testServiceListener() {
         service.export();
 
         Map<String, ServiceConfig> exportedServices = mockServiceListener.getExportedServices();
-        assertEquals(1, exportedServices.size());
+        // MetadataService, DemoService
+        assertEquals(2, exportedServices.size());
         ServiceConfig serviceConfig = exportedServices.get(service.getUniqueServiceName());
         assertSame(service, serviceConfig);
     }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataInfo.java
Patch:
@@ -62,6 +62,7 @@ public class MetadataInfo implements Serializable {
     private transient AtomicBoolean reported = new AtomicBoolean(false);
 
     public MetadataInfo() {
+        this(null);
     }
 
     public MetadataInfo(String app) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -259,10 +259,13 @@ public void doUnsubscribe(URL url, NotifyListener listener) {
             String serviceNamesKey = toStringKeys(serviceNames);
             ServiceInstancesChangedListener instancesChangedListener = serviceListeners.get(serviceNamesKey);
             if (instancesChangedListener != null) {
+                String listenerId = createListenerId(url, instancesChangedListener);
+
                 instancesChangedListener.removeListener(protocolServiceKey);
                 if (!instancesChangedListener.hasListeners()) {
                     serviceListeners.remove(serviceNamesKey);
                 }
+                registeredListeners.remove(listenerId);
             }
         }
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboBootstrapApplicationListener.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring.context;
 
 import org.apache.dubbo.config.DubboShutdownHook;
+import org.apache.dubbo.config.bootstrap.BootstrapTakeoverMode;
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 
 import com.alibaba.spring.context.OnceApplicationContextEventListener;
@@ -46,11 +47,13 @@ public class DubboBootstrapApplicationListener extends OnceApplicationContextEve
 
     public DubboBootstrapApplicationListener() {
         this.dubboBootstrap = DubboBootstrap.getInstance();
+        this.dubboBootstrap.setTakeoverMode(BootstrapTakeoverMode.SPRING);
     }
 
     public DubboBootstrapApplicationListener(ApplicationContext applicationContext) {
         super(applicationContext);
         this.dubboBootstrap = DubboBootstrap.getInstance();
+        this.dubboBootstrap.setTakeoverMode(BootstrapTakeoverMode.SPRING);
         DubboBootstrapStartStopListenerSpringAdapter.applicationContext = applicationContext;
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleListener.java
Patch:
@@ -103,7 +103,9 @@ private int getDelay() {
     public synchronized void process(ConfigChangedEvent event) {
         String rawRule = event.getContent();
         if (StringUtils.isEmpty(rawRule)) {
-            logger.warn("Received empty migration rule, will ignore.");
+            // fail back to startup status
+            setRawRule(INIT);
+            //logger.warn("Received empty migration rule, will ignore.");
             return;
         }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/LoggerFactory.java
Patch:
@@ -95,8 +95,7 @@ public static void setLoggerAdapter(LoggerAdapter loggerAdapter) {
             if (loggerAdapter == LOGGER_ADAPTER) {
                 return;
             }
-            Logger logger = loggerAdapter.getLogger(LoggerFactory.class.getName());
-            logger.info("using logger: " + loggerAdapter.getClass().getName());
+            loggerAdapter.getLogger(LoggerFactory.class.getName());
             LoggerFactory.LOGGER_ADAPTER = loggerAdapter;
             for (Map.Entry<String, FailsafeLogger> entry : LOGGERS.entrySet()) {
                 entry.getValue().setLogger(LOGGER_ADAPTER.getLogger(entry.getKey()));

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -730,11 +730,11 @@ protected void initServiceMetadata(AbstractInterfaceConfig interfaceConfig) {
     }
     
     public String getGroup(AbstractInterfaceConfig interfaceConfig) {
-        return StringUtils.isEmpty(this.group) ? (interfaceConfig != null ? interfaceConfig.getGroup() : this.group) : this.group;
+        return StringUtils.isEmpty(getGroup()) ? (interfaceConfig != null ? interfaceConfig.getGroup() : getGroup()) : getGroup();
     }
 
     public String getVersion(AbstractInterfaceConfig interfaceConfig) {
-        return StringUtils.isEmpty(this.version) ? (interfaceConfig != null ? interfaceConfig.getVersion() : this.version) : this.version;
+        return StringUtils.isEmpty(getVersion()) ? (interfaceConfig != null ? interfaceConfig.getVersion() : getVersion()) : getVersion();
     }
     
     public String getVersion() {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/InMemoryWritableMetadataService.java
Patch:
@@ -212,7 +212,7 @@ public void publishServiceDefinition(URL providerUrl) {
                 return;
             }
             logger.error("publishProvider interfaceName is empty . providerUrl: " + providerUrl.toFullString());
-        } catch (ClassNotFoundException e) {
+        } catch (Throwable e) {
             //ignore error
             logger.error("publishProvider getServiceDescriptor error. providerUrl: " + providerUrl.toFullString(), e);
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/DynamicDirectory.java
Patch:
@@ -173,7 +173,7 @@ public Class<T> getInterface() {
 
     @Override
     public List<Invoker<T>> getAllInvokers() {
-        return invokers;
+        return this.invokers == null ? Collections.emptyList() : this.invokers;
     }
 
     // The currently effective consumer url

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -527,7 +527,7 @@ public Class<T> getInterface() {
 
     @Override
     public List<Invoker<T>> getAllInvokers() {
-        return invokers;
+        return this.invokers == null ? Collections.emptyList() : this.invokers;
     }
 
     @Override

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java
Patch:
@@ -162,6 +162,9 @@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
     private boolean isAnnotatedReferenceBean(BeanDefinition beanDefinition) {
         if (beanDefinition instanceof AnnotatedBeanDefinition) {
             AnnotatedBeanDefinition annotatedBeanDefinition = (AnnotatedBeanDefinition) beanDefinition;
+            if (annotatedBeanDefinition.getFactoryMethodMetadata() == null) {
+                return false;
+            }
             String beanClassName = annotatedBeanDefinition.getFactoryMethodMetadata().getReturnTypeName();
             if (ReferenceBean.class.getName().equals(beanClassName)) {
                 return true;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java
Patch:
@@ -123,7 +123,7 @@ public Object decode(Channel channel, InputStream input) throws IOException {
         setParameterTypesDesc(desc);
 
         try {
-            if (ConfigurationUtils.getSystemConfiguration().getBoolean(SERIALIZATION_SECURITY_CHECK_KEY, false)) {
+            if (ConfigurationUtils.getSystemConfiguration().getBoolean(SERIALIZATION_SECURITY_CHECK_KEY, true)) {
                 CodecSupport.checkSerialization(path, version, serializationType);
             }
             Object[] args = DubboCodec.EMPTY_OBJECT_ARRAY;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java
Patch:
@@ -118,7 +118,7 @@ public Object decode(Channel channel, InputStream input) throws IOException {
     public void decode() throws Exception {
         if (!hasDecoded && channel != null && inputStream != null) {
             try {
-                if (ConfigurationUtils.getSystemConfiguration().getBoolean(SERIALIZATION_SECURITY_CHECK_KEY, false)) {
+                if (ConfigurationUtils.getSystemConfiguration().getBoolean(SERIALIZATION_SECURITY_CHECK_KEY, true)) {
                     Object serializationType_obj = invocation.get(SERIALIZATION_ID_KEY);
                     if (serializationType_obj != null) {
                         if ((byte) serializationType_obj != serializationType) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -37,13 +37,13 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
 import java.util.TreeSet;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
 
 import static java.lang.String.format;
@@ -104,7 +104,7 @@ public class ServiceDiscoveryRegistry implements Registry {
     private final Set<String> registeredListeners = new LinkedHashSet<>();
 
     /* apps - listener */
-    private final Map<String, ServiceInstancesChangedListener> serviceListeners = new HashMap<>();
+    private final Map<String, ServiceInstancesChangedListener> serviceListeners = new ConcurrentHashMap<>();
 
     private URL registryURL;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/manager/ExecutorRepositoryTest.java
Patch:
@@ -34,7 +34,7 @@ public void testGetExecutor() {
         testGet(URL.valueOf("dubbo://127.0.0.1:23456?side=consumer"));
 
         Assertions.assertNotNull(executorRepository.getSharedExecutor());
-        Assertions.assertNotNull(executorRepository.getServiceExporterExecutor());
+        Assertions.assertNotNull(executorRepository.getExportReferExecutor());
         executorRepository.nextScheduledExecutor();
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -200,9 +200,11 @@ public synchronized T get() {
         if (destroyed) {
             throw new IllegalStateException("The invoker of ReferenceConfig(" + url + ") has already destroyed!");
         }
+
         if (ref == null) {
             init();
         }
+
         return ref;
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/param/DynamicParamSource.java
Patch:
@@ -19,8 +19,9 @@
 import org.apache.dubbo.common.extension.SPI;
 
 import java.util.List;
+
 @SPI
 public interface DynamicParamSource {
 
-    void init(List<String> KEYS, List<ParamValue> VALUES);
+    void init(List<String> keys, List<ParamValue> values);
 }

File: dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/MonitorFilter.java
Patch:
@@ -131,7 +131,7 @@ private void collect(Invoker<?> invoker, Invocation invocation, Result result, S
                     return;
                 }
                 URL statisticsURL = createStatisticsUrl(invoker, invocation, result, remoteHost, start, error);
-                monitor.collect(statisticsURL);
+                monitor.collect(statisticsURL.toSerializableURL());
             }
         } catch (Throwable t) {
             logger.warn("Failed to monitor count service " + invoker.getUrl() + ", cause: " + t.getMessage(), t);

File: dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/DubboMonitor.java
Patch:
@@ -119,7 +119,7 @@ public void send() {
                             MonitorService.MAX_CONCURRENT, String.valueOf(maxConcurrent),
                             DEFAULT_PROTOCOL, protocol
                     );
-            monitorService.collect(url);
+            monitorService.collect(url.toSerializableURL());
 
             // reset
             long[] current;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/migration/MigrationRuleListenerTest.java
Patch:
@@ -59,11 +59,12 @@ public void test() throws InterruptedException {
         MigrationRuleHandler handler = Mockito.mock(MigrationRuleHandler.class);
 
         MigrationRuleListener migrationRuleListener = new MigrationRuleListener();
-        migrationRuleListener.getHandlers().put("Test1", handler);
+        MigrationInvoker migrationInvoker = Mockito.mock(MigrationInvoker.class);
+        migrationRuleListener.getHandlers().put(migrationInvoker, handler);
 
         Mockito.verify(handler, Mockito.timeout(5000)).doMigrate(Mockito.any());
 
-        migrationRuleListener.onRefer(null, null, consumerURL, null);
+        migrationRuleListener.onRefer(null, migrationInvoker, consumerURL, null);
         Mockito.verify(handler, Mockito.times(2)).doMigrate(Mockito.any());
 
         ApplicationModel.reset();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/DynamicDirectory.java
Patch:
@@ -231,15 +231,15 @@ public void destroy() {
                 registry.unregister(getRegisteredConsumerUrl());
             }
         } catch (Throwable t) {
-            logger.warn("unexpected error when unregister service " + serviceKey + "from registry" + registry.getUrl(), t);
+            logger.warn("unexpected error when unregister service " + serviceKey + " from registry: " + registry.getUrl(), t);
         }
         // unsubscribe.
         try {
-            if (getConsumerUrl() != null && registry != null && registry.isAvailable()) {
+            if (getSubscribeUrl() != null && registry != null && registry.isAvailable()) {
                 registry.unsubscribe(getSubscribeUrl(), this);
             }
         } catch (Throwable t) {
-            logger.warn("unexpected error when unsubscribe service " + serviceKey + "from registry " + registry.getUrl(), t);
+            logger.warn("unexpected error when unsubscribe service " + serviceKey + " from registry: " + registry.getUrl(), t);
         }
 
         ExtensionLoader<AddressListener> addressListenerExtensionLoader = ExtensionLoader.getExtensionLoader(AddressListener.class);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -101,15 +101,15 @@ public RegistryDirectory(Class<T> serviceType, URL url) {
 
     @Override
     public void subscribe(URL url) {
-        setConsumerUrl(url);
+        setSubscribeUrl(url);
         CONSUMER_CONFIGURATION_LISTENER.addNotifyListener(this);
         referenceConfigurationListener = new ReferenceConfigurationListener(this, url);
         registry.subscribe(url, this);
     }
 
     @Override
     public void unSubscribe(URL url) {
-        setConsumerUrl(null);
+        setSubscribeUrl(null);
         CONSUMER_CONFIGURATION_LISTENER.removeNotifyListener(this);
         referenceConfigurationListener.stop();
         registry.unsubscribe(url, this);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -503,8 +503,9 @@ protected <T> ClusterInvoker<T> doCreateInvoker(DynamicDirectory<T> directory, C
         directory.setProtocol(protocol);
         // all attributes of REFER_KEY
         Map<String, String> parameters = new HashMap<String, String>(directory.getConsumerUrl().getParameters());
-        URL urlToRegistry = new ServiceConfigURL(parameters.get(PROTOCOL_KEY) == null ? DUBBO : parameters.get(PROTOCOL_KEY), parameters.remove(REGISTER_IP_KEY), 0, getPath(parameters, type), parameters);
-        URL consumerURL = directory.getConsumerUrl();
+        URL urlToRegistry = new ServiceConfigURL(
+                parameters.get(PROTOCOL_KEY) == null ? DUBBO : parameters.get(PROTOCOL_KEY),
+                parameters.remove(REGISTER_IP_KEY), 0, getPath(parameters, type), parameters);
         if (directory.isShouldRegister()) {
             directory.setRegisteredConsumerUrl(urlToRegistry);
             registry.register(directory.getRegisteredConsumerUrl());

File: compiler/src/main/java/org/apache/dubbo/gen/dubbo/DubboGenerator.java
Patch:
@@ -39,4 +39,4 @@ protected String getClassPrefix() {
     protected String getClassSuffix() {
         return "Dubbo";
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/main/java/org/apache/dubbo/registry/AddressListener.java
Patch:
@@ -38,4 +38,4 @@ default void destroy(URL consumerUrl, Directory registryDirectory) {
 
     }
 
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/RouterCache.java
Patch:
@@ -46,4 +46,4 @@ public Object getAddrMetadata() {
     public void setAddrMetadata(Object addrMetadata) {
         this.addrMetadata = addrMetadata;
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/merger/DefaultProviderURLMergeProcessor.java
Patch:
@@ -120,4 +120,4 @@ public URL mergeUrl(URL remoteUrl, Map<String, String> localParametersMap) {
         return remoteUrl.clearParameters().addParameters(map);
     }
 
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/registry/ZoneAwareCluster.java
Patch:
@@ -30,4 +30,4 @@ protected <T> AbstractClusterInvoker<T> doJoin(Directory<T> directory) throws Rp
         return new ZoneAwareClusterInvoker<T>(directory);
     }
 
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/registry/ZoneAwareClusterInvoker.java
Patch:
@@ -102,4 +102,4 @@ public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, L
         return invokers.get(0).invoke(invocation);
     }
 
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/directory/MockDirInvocation.java
Patch:
@@ -156,4 +156,4 @@ public Object getObjectAttachment(String key, Object defaultValue) {
         return result;
     }
 
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshAppRuleListenerTest.java
Patch:
@@ -177,4 +177,4 @@ public void process() {
         assertTrue(vsDestinationGroup1.getVirtualServiceRuleList().size() == 0);
 
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleManagerTest.java
Patch:
@@ -157,4 +157,4 @@ public void unregister() {
             ApplicationModel.getEnvironment().setDynamicConfiguration(before.orElse(null));
         }
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleRouterFactoryTest.java
Patch:
@@ -33,4 +33,4 @@ public void getRouter() {
         when(url.getServiceKey()).thenReturn("demoService");
         ruleRouterFactory.getRouter(url);
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/route/MeshRuleRouterTest.java
Patch:
@@ -1404,4 +1404,4 @@ public void routeFallback() {
             assertNotNull(meshRuleRouter.route((List) inputInvokers, inputURL, invocation));
         }
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/DestinationRuleTest.java
Patch:
@@ -99,4 +99,4 @@ public void parserMultiRuleTest() {
         }
     }
 
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/VirtualServiceRuleTest.java
Patch:
@@ -35,4 +35,4 @@ public void parserTest() {
         assertNotNull(virtualServiceRule);
     }
 
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/DubboMatchRequestTest.java
Patch:
@@ -137,4 +137,4 @@ public void isMatch() {
 
         assertFalse(DubboMatchRequest.isMatch(dubboMatchRequest, "sayHello", new String[]{}, new Object[]{}, inputSourceLablesMap, invokeEagleEyeContextMap, invokeDubboContextMap2, new HashMap()));
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/BoolMatchTest.java
Patch:
@@ -39,4 +39,4 @@ public void isMatch() {
         assertTrue(BoolMatch.isMatch(boolMatch,false));
 
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/DoubleMatchTest.java
Patch:
@@ -98,4 +98,4 @@ public void modMatch() {
         assertTrue(DoubleMatch.isMatch(doubleMatch, 3.0));
     }
 
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/DubboAttachmentMatchTest.java
Patch:
@@ -175,4 +175,4 @@ public void contextMatch() {
         assertFalse(DubboAttachmentMatch.isMatch(dubboAttachmentMatch, invokeEagleEyeContextMap2, invokeDubboContextMap2));
 
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/DubboMethodMatchTest.java
Patch:
@@ -153,4 +153,4 @@ public void parametersMatch() {
         assertTrue(DubboMethodMatch.isMatch(dubboMethodMatch, "test", new String[]{"int", "java.lang.String", "boolean"}, new Object[]{10, "sayHello", true}));
         assertFalse(DubboMethodMatch.isMatch(dubboMethodMatch, "test", new String[]{"int", "java.lang.String", "boolean"}, new Object[]{10, "sayHello", false}));
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListDoubleMatchTest.java
Patch:
@@ -49,4 +49,4 @@ public void isMatch() {
         assertTrue(ListDoubleMatch.isMatch(listDoubleMatch, 11.0));
         assertFalse(ListDoubleMatch.isMatch(listDoubleMatch, 12.0));
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListStringMatchTest.java
Patch:
@@ -51,4 +51,4 @@ public void isMatch() {
         assertFalse(ListStringMatch.isMatch(listStringMatch, "3"));
 
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/StringMatchTest.java
Patch:
@@ -78,4 +78,4 @@ public void noEmptyMatch() {
         assertFalse(StringMatch.isMatch(stringMatch, ""));
         assertFalse(StringMatch.isMatch(stringMatch, null));
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/mesh/util/VsDestinationGroupRuleDispatcherTest.java
Patch:
@@ -71,4 +71,4 @@ public void unregister() {
 
         verify(vsDestinationGroupRuleListener, times(1)).onRuleChange(anyObject());
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvokerTest.java
Patch:
@@ -124,4 +124,4 @@ public void testNoInvoke() {
         }
     }
 
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvokerTest.java
Patch:
@@ -154,4 +154,4 @@ public void testInvokeNoException() {
         Assertions.assertSame(result, ret);
     }
 
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/extension/Activate.java
Patch:
@@ -42,4 +42,4 @@
     String[] after() default {};
 
     int order() default 0;
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/org/apache/dubbo/common/Resetable.java
Patch:
@@ -28,4 +28,4 @@ public interface Resetable {
      */
     void reset(URL url);
 
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java
Patch:
@@ -385,4 +385,4 @@ private CtConstructor getCtConstructor(Constructor<?> c) throws NotFoundExceptio
     public static interface DC {
 
     } // dynamic class tag interface.
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/file/FileSystemDynamicConfiguration.java
Patch:
@@ -604,4 +604,4 @@ private static ThreadPoolExecutor newWatchEventsLoopThreadPool() {
                 new SynchronousQueue(),
                 new NamedThreadFactory("dubbo-config-center-watch-events-loop", true));
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/Adaptive.java
Patch:
@@ -57,4 +57,4 @@
      */
     String[] value() default {};
 
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/support/WrapperComparator.java
Patch:
@@ -92,4 +92,4 @@ private OrderInfo parseOrder(Class<?> clazz) {
     private static class OrderInfo {
         private int order;
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java
Patch:
@@ -933,4 +933,4 @@ private static MessageDigest getMessageDigest() {
         }
         return ret;
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java
Patch:
@@ -104,4 +104,4 @@ public void flush() {
     public String toString() {
         return mBuffer.toString();
     }
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONConverter.java
Patch:
@@ -41,4 +41,4 @@ public interface JSONConverter {
      * @throws IOException
      */
     Object readValue(Class<?> type, Object jv) throws IOException;
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONReader.java
Patch:
@@ -65,4 +65,4 @@ public JSONToken nextToken(int expect) throws IOException, ParseException {
         }
         return ret;
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/governance/DefaultGovernanceRuleRepositoryImpl.java
Patch:
@@ -21,20 +21,21 @@
 
 public class DefaultGovernanceRuleRepositoryImpl implements GovernanceRuleRepository {
 
-    private DynamicConfiguration dynamicConfiguration = DynamicConfiguration.getDynamicConfiguration();
-
     @Override
     public void addListener(String key, String group, ConfigurationListener listener) {
+        DynamicConfiguration dynamicConfiguration = DynamicConfiguration.getDynamicConfiguration();
         dynamicConfiguration.addListener(key, group, listener);
     }
 
     @Override
     public void removeListener(String key, String group, ConfigurationListener listener) {
+        DynamicConfiguration dynamicConfiguration = DynamicConfiguration.getDynamicConfiguration();
         dynamicConfiguration.removeListener(key, group, listener);
     }
 
     @Override
     public String getRule(String key, String group, long timeout) throws IllegalStateException {
+        DynamicConfiguration dynamicConfiguration = DynamicConfiguration.getDynamicConfiguration();
         return dynamicConfiguration.getConfig(key, group, timeout);
     }
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Configuration.java
Patch:
@@ -18,6 +18,8 @@
 
 import java.util.NoSuchElementException;
 
+import static org.apache.dubbo.common.config.ConfigurationUtils.isEmptyValue;
+
 /**
  * Configuration interface, to fetch the value for the specified key.
  */
@@ -133,7 +135,7 @@ default Object getProperty(String key, Object defaultValue) {
      * key, {@code false} otherwise
      */
     default boolean containsKey(String key) {
-        return getProperty(key) != null;
+        return !isEmptyValue(getProperty(key));
     }
 
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/MonitorConfig.java
Patch:
@@ -139,7 +139,7 @@ public void setInterval(String interval) {
     }
 
     @Override
-    @Parameter(excluded = true)
+    @Parameter(excluded = true, attribute = false)
     public boolean isValid() {
         return StringUtils.isNotEmpty(address) || RegistryConstants.REGISTRY_PROTOCOL.equals(protocol);
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/annotation/DubboReference.java
Patch:
@@ -270,7 +270,9 @@
 
     /**
      * Application associated name
+     * @deprecated Do not set it and use the global Application Config
      */
+    @Deprecated
     String application() default "";
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/config/annotation/DubboService.java
Patch:
@@ -236,7 +236,9 @@
 
     /**
      * Application spring bean name
+     * @deprecated Do not set it and use the global Application Config
      */
+    @Deprecated
     String application() default "";
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/config/annotation/Reference.java
Patch:
@@ -234,7 +234,9 @@
 
     /**
      * Application associated name
+     * @deprecated Do not set it and use the global Application Config
      */
+    @Deprecated
     String application() default "";
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/config/annotation/Service.java
Patch:
@@ -236,7 +236,9 @@
 
     /**
      * Application spring bean name
+     * @deprecated Do not set it and use the global Application Config
      */
+    @Deprecated
     String application() default "";
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ApplicationModel.java
Patch:
@@ -127,7 +127,7 @@ public static void setApplication(String application) {
     public static void reset() {
         getServiceRepository().destroy();
         getConfigManager().destroy();
-        getEnvironment().destroy();
+        getEnvironment().reset();
     }
 
 }

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ConfigTest.java
Patch:
@@ -35,14 +35,14 @@ public class ConfigTest {
 
     @AfterEach
     public void tearDown() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @BeforeEach
     public void setup() {
         // In IDE env, make sure adding the following argument to VM options
         System.setProperty("java.net.preferIPv4Stack", "true");
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ModuleConfigTest.java
Patch:
@@ -40,7 +40,7 @@ public void testName2() throws Exception {
         ModuleConfig module = new ModuleConfig();
         module.setName("module-name");
         assertThat(module.getName(), equalTo("module-name"));
-        assertThat(module.getId(), equalTo("module-name"));
+        assertThat(module.getId(), equalTo(null));
         Map<String, String> parameters = new HashMap<String, String>();
         ModuleConfig.appendParameters(parameters, module);
         assertThat(parameters, hasEntry("module", "module-name"));

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java
Patch:
@@ -39,7 +39,7 @@ public void testName() throws Exception {
         Map<String, String> parameters = new HashMap<String, String>();
         ProtocolConfig.appendParameters(parameters, protocol);
         assertThat(protocol.getName(), equalTo("name"));
-        assertThat(protocol.getId(), equalTo("name"));
+        assertThat(protocol.getId(), equalTo(null));
         assertThat(parameters.isEmpty(), is(true));
     }
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dubbo.config;
 
 import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.service.DemoService;
 import org.apache.dubbo.service.DemoServiceImpl;
 
@@ -38,12 +37,12 @@ public class ReferenceConfigTest {
 
     @BeforeEach
     public void setUp() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @AfterEach
     public void tearDown() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/AbstractMethodBuilderTest.java
Patch:
@@ -150,15 +150,14 @@ void forks() {
     @Test
     void build() {
         MethodBuilder builder = new MethodBuilder();
-        builder.id("id").prefix("prefix").timeout(1).retries(2).actives(3).loadbalance("mockloadbalance").async(true)
+        builder.id("id").timeout(1).retries(2).actives(3).loadbalance("mockloadbalance").async(true)
                 .sent(false).mock("mock").merger("merger").cache("cache").validation("validation")
                 .appendParameter("default.num", "one");
 
         MethodConfig config = builder.build();
         MethodConfig config2 = builder.build();
 
         Assertions.assertEquals("id", config.getId());
-        Assertions.assertEquals("prefix", config.getPrefix());
         Assertions.assertEquals(1, config.getTimeout());
         Assertions.assertEquals(2, config.getRetries());
         Assertions.assertEquals(3, config.getActives());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/AbstractReferenceBuilderTest.java
Patch:
@@ -111,13 +111,12 @@ void group() {
     void build() {
         ReferenceBuilder builder = new ReferenceBuilder();
         builder.check(true).init(false).generic(true).injvm(false).lazy(true).reconnect("reconnect").sticky(false)
-                .version("version").group("group").id("id").prefix("prefix");
+                .version("version").group("group").id("id");
 
         ReferenceConfig config = builder.build();
         ReferenceConfig config2 = builder.build();
 
         Assertions.assertEquals("id", config.getId());
-        Assertions.assertEquals("prefix", config.getPrefix());
         Assertions.assertTrue(config.isCheck());
         Assertions.assertFalse(config.isInit());
         Assertions.assertTrue(config.isGeneric());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/AbstractServiceBuilderTest.java
Patch:
@@ -197,13 +197,12 @@ void build() {
         builder.version("version").group("group").deprecated(true).delay(1000).export(false).weight(1)
                 .document("document").dynamic(true).token("token").accesslog("accesslog")
                 .addProtocol(protocol).protocolIds("protocolIds").tag("tag").executes(100).register(false)
-                .warmup(200).serialization("serialization").id("id").prefix("prefix");
+                .warmup(200).serialization("serialization").id("id");
 
         ServiceConfig config = builder.build();
         ServiceConfig config2 = builder.build();
 
         Assertions.assertEquals("id", config.getId());
-        Assertions.assertEquals("prefix", config.getPrefix());
         Assertions.assertEquals("version", config.getVersion());
         Assertions.assertEquals("group", config.getGroup());
         Assertions.assertEquals("document", config.getDocument());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/ApplicationBuilderTest.java
Patch:
@@ -247,7 +247,7 @@ void build() {
         RegistryConfig registry = new RegistryConfig();
 
         ApplicationBuilder builder = new ApplicationBuilder();
-        builder.id("id").prefix("prefix").name("name").version("version").owner("owner").organization("organization").architecture("architecture")
+        builder.id("id").name("name").version("version").owner("owner").organization("organization").architecture("architecture")
                 .environment("develop").compiler("compiler").logger("log4j").monitor(monitor).isDefault(false)
                 .dumpDirectory("dumpDirectory").qosEnable(true).qosPort(8080).qosAcceptForeignIp(false)
                 .shutwait("shutwait").registryIds("registryIds").addRegistry(registry)
@@ -258,7 +258,6 @@ void build() {
         ApplicationConfig config2 = builder.build();
 
         Assertions.assertEquals("id", config.getId());
-        Assertions.assertEquals("prefix", config.getPrefix());
         Assertions.assertEquals("name", config.getName());
         Assertions.assertEquals("version", config.getVersion());
         Assertions.assertEquals("owner", config.getOwner());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/ConfigCenterBuilderTest.java
Patch:
@@ -142,7 +142,7 @@ void build() {
         builder.check(true).protocol("protocol").address("address").appConfigFile("appConfigFile")
                 .cluster("cluster").configFile("configFile").group("group").highestPriority(false)
                 .namespace("namespace").password("password").timeout(1000L).username("usernama")
-                .appendParameter("default.num", "one").id("id").prefix("prefix");
+                .appendParameter("default.num", "one").id("id");
 
         ConfigCenterConfig config = builder.build();
         ConfigCenterConfig config2 = builder.build();
@@ -162,7 +162,6 @@ void build() {
         Assertions.assertTrue(config.getParameters().containsKey("default.num"));
         Assertions.assertEquals("one", config.getParameters().get("default.num"));
         Assertions.assertEquals("id", config.getId());
-        Assertions.assertEquals("prefix", config.getPrefix());
 
         Assertions.assertNotSame(config, config2);
     }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/ConsumerBuilderTest.java
Patch:
@@ -76,7 +76,7 @@ void shareConnections() {
     void build() {
         ConsumerBuilder builder = new ConsumerBuilder();
         builder.isDefault(true).client("client").threadPool("threadPool").coreThreads(10).threads(100).queues(200)
-                .shareConnections(300).id("id").prefix("prefix");
+                .shareConnections(300).id("id");
 
         ConsumerConfig config = builder.build();
         ConsumerConfig config2 = builder.build();
@@ -85,7 +85,6 @@ void build() {
         Assertions.assertEquals("client", config.getClient());
         Assertions.assertEquals("threadPool", config.getThreadpool());
         Assertions.assertEquals("id", config.getId());
-        Assertions.assertEquals("prefix", config.getPrefix());
         Assertions.assertEquals(10, config.getCorethreads());
         Assertions.assertEquals(100, config.getThreads());
         Assertions.assertEquals(200, config.getQueues());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/MetadataReportBuilderTest.java
Patch:
@@ -128,7 +128,7 @@ void build() {
         MetadataReportBuilder builder = new MetadataReportBuilder();
         builder.address("address").username("username").password("password").timeout(1000).group("group")
                 .retryTimes(1).retryPeriod(2).cycleReport(true).syncReport(false)
-                .appendParameter("default.num", "one").id("id").prefix("prefix");
+                .appendParameter("default.num", "one").id("id");
 
         MetadataReportConfig config = builder.build();
         MetadataReportConfig config2 = builder.build();
@@ -145,7 +145,6 @@ void build() {
         Assertions.assertTrue(config.getParameters().containsKey("default.num"));
         Assertions.assertEquals("one", config.getParameters().get("default.num"));
         Assertions.assertEquals("id", config.getId());
-        Assertions.assertEquals("prefix", config.getPrefix());
         Assertions.assertNotSame(config, config2);
     }
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/MonitorBuilderTest.java
Patch:
@@ -113,7 +113,7 @@ void build() {
         MonitorBuilder builder = new MonitorBuilder();
         builder.protocol("protocol").address("address").group("group").interval("interval").isDefault(true)
                 .password("password").username("username").version("version")
-                .appendParameter("default.num", "one").id("id").prefix("prefix");
+                .appendParameter("default.num", "one").id("id");
 
         MonitorConfig config = builder.build();
         MonitorConfig config2 = builder.build();
@@ -129,7 +129,6 @@ void build() {
         Assertions.assertTrue(config.getParameters().containsKey("default.num"));
         Assertions.assertEquals("one", config.getParameters().get("default.num"));
         Assertions.assertEquals("id", config.getId());
-        Assertions.assertEquals("prefix", config.getPrefix());
         Assertions.assertNotSame(config, config2);
     }
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/ProtocolBuilderTest.java
Patch:
@@ -293,7 +293,7 @@ void build() {
                 .dispatcher("mockdispatcher").networker("networker").server("server").client("client")
                 .telnet("mocktelnethandler").prompt("prompt").status("mockstatuschecker").register(true).keepAlive(false)
                 .optimizer("optimizer").extension("extension").isDefault(true)
-                .appendParameter("default.num", "one").id("id").prefix("prefix");
+                .appendParameter("default.num", "one").id("id");
 
         ProtocolConfig config = builder.build();
         ProtocolConfig config2 = builder.build();
@@ -332,7 +332,6 @@ void build() {
         Assertions.assertTrue(config.getParameters().containsKey("default.num"));
         Assertions.assertEquals("one", config.getParameters().get("default.num"));
         Assertions.assertEquals("id", config.getId());
-        Assertions.assertEquals("prefix", config.getPrefix());
         Assertions.assertNotSame(config, config2);
     }
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/ProviderBuilderTest.java
Patch:
@@ -192,7 +192,7 @@ void build() {
                 .charset("utf-8").payload(6).buffer(1024).transporter("mocktransporter").exchanger("mockexchanger")
                 .dispatcher("mockdispatcher").networker("networker").server("server").client("client")
                 .telnet("mocktelnethandler").prompt("prompt").status("mockstatuschecker").wait(Integer.valueOf(1000))
-                .isDefault(true).id("id").prefix("prefix");
+                .isDefault(true).id("id");
 
         ProviderConfig config = builder.build();
         ProviderConfig config2 = builder.build();
@@ -221,7 +221,6 @@ void build() {
         Assertions.assertEquals("mockstatuschecker", config.getStatus());
         Assertions.assertTrue(config.isDefault());
         Assertions.assertEquals("id", config.getId());
-        Assertions.assertEquals("prefix", config.getPrefix());
         Assertions.assertNotSame(config, config2);
     }
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/RegistryBuilderTest.java
Patch:
@@ -220,7 +220,7 @@ void build() {
                 .transporter("transporter").server("server").client("client").cluster("cluster").group("group")
                 .version("version").timeout(1000).session(2000).file("file").wait(Integer.valueOf(10)).isCheck(true)
                 .isDynamic(false).register(true).subscribe(false).isDefault(true).simplified(false).extraKeys("A")
-                .parameter("default.num", "one").id("id").prefix("prefix");
+                .parameter("default.num", "one").id("id");
 
         RegistryConfig config = builder.build();
         RegistryConfig config2 = builder.build();
@@ -250,7 +250,6 @@ void build() {
         Assertions.assertTrue(config.getParameters().containsKey("default.num"));
         Assertions.assertEquals("one", config.getParameters().get("default.num"));
         Assertions.assertEquals("id", config.getId());
-        Assertions.assertEquals("prefix", config.getPrefix());
         Assertions.assertNotSame(config, config2);
     }
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/cache/CacheTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.ServiceConfig;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.RpcInvocation;
 
@@ -49,7 +50,7 @@ public class CacheTest {
 
     @BeforeEach
     public void setUp() {
-//        ApplicationModel.getConfigManager().clear();
+        DubboBootstrap.reset();
     }
 
     @AfterEach

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/event/listener/PublishingServiceDefinitionListenerTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.ServiceConfig;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.bootstrap.EchoService;
 import org.apache.dubbo.config.bootstrap.EchoServiceImpl;
 import org.apache.dubbo.config.context.ConfigManager;
@@ -51,7 +52,7 @@ public class PublishingServiceDefinitionListenerTest {
 
     @BeforeEach
     public void init() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
         String metadataType = DEFAULT_METADATA_STORAGE_TYPE;
         ConfigManager configManager = ApplicationModel.getConfigManager();
         ApplicationConfig applicationConfig = new ApplicationConfig("dubbo-demo-provider");
@@ -62,7 +63,7 @@ public void init() {
 
     @AfterEach
     public void reset() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     /**

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/ExporterSideConfigUrlTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeAll;
@@ -43,13 +43,13 @@ public static void start() {
 
     @BeforeEach
     public void setUp() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
         initServConf();
     }
 
     @AfterEach()
     public void teardown() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/ReferenceConfigCacheTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.RegistryConfig;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.utils.service.FooService;
 
 import org.junit.jupiter.api.BeforeEach;
@@ -31,6 +32,7 @@ public class ReferenceConfigCacheTest {
 
     @BeforeEach
     public void setUp() throws Exception {
+        DubboBootstrap.reset();
         MockReferenceConfig.setCounter(0);
         ReferenceConfigCache.CACHE_HOLDER.clear();
     }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/metadata/MetadataServiceExporterTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
@@ -41,16 +42,15 @@ public class MetadataServiceExporterTest {
 
     @BeforeAll
     public static void init() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
         ApplicationModel.getConfigManager().setApplication(new ApplicationConfig("Test"));
         ApplicationModel.getConfigManager().addRegistry(new RegistryConfig("multicast://224.5.6.7:1234"));
         ApplicationModel.getConfigManager().addProtocol(new ProtocolConfig("injvm"));
     }
 
     @AfterAll
     public static void destroy() {
-        ApplicationModel.getConfigManager().setApplication(null);
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @Test

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboLifecycleComponentApplicationListener.java
Patch:
@@ -39,7 +39,9 @@
  * @see {@link Lifecycle Dubbo Lifecycle}
  * @see SmartApplicationListener
  * @since 2.7.5
+ * @deprecated Binding the life cycle of Dubbo components with spring is not a good way. Now control components life cycle in DubboBootstrap.
  */
+@Deprecated
 public class DubboLifecycleComponentApplicationListener extends OnceApplicationContextEventListener {
 
     /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboLifecycleComponentRegistrar.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.context.Lifecycle;
 import org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener;
-import org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener;
 
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
@@ -38,7 +37,7 @@ public class DubboLifecycleComponentRegistrar implements ImportBeanDefinitionReg
 
     @Override
     public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {
-        registerBeans(registry, DubboLifecycleComponentApplicationListener.class);
+        //registerBeans(registry, DubboLifecycleComponentApplicationListener.class);
         registerBeans(registry, DubboBootstrapApplicationListener.class);
     }
 }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/AnnotationBeanDefinitionParser.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.config.spring.schema;
 
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
-import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor;
 
+import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;
@@ -30,7 +30,7 @@
 
 /**
  * @link BeanDefinitionParser}
- * @see ServiceAnnotationBeanPostProcessor
+ * @see ServiceAnnotationPostProcessor
  * @see ReferenceAnnotationBeanPostProcessor
  * @since 2.5.9
  */
@@ -73,7 +73,7 @@ protected boolean shouldGenerateIdAsFallback() {
 
     @Override
     protected Class<?> getBeanClass(Element element) {
-        return ServiceAnnotationBeanPostProcessor.class;
+        return ServiceAnnotationPostProcessor.class;
     }
 
 }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/DubboBeanUtils.java
Patch:
@@ -69,8 +69,8 @@ static void registerCommonBeans(BeanDefinitionRegistry registry) {
                 DubboConfigAliasPostProcessor.class);
 
         // Since 2.7.5 Register DubboLifecycleComponentApplicationListener as an infrastructure Bean
-        registerInfrastructureBean(registry, DubboLifecycleComponentApplicationListener.BEAN_NAME,
-                DubboLifecycleComponentApplicationListener.class);
+//        registerInfrastructureBean(registry, DubboLifecycleComponentApplicationListener.BEAN_NAME,
+//                DubboLifecycleComponentApplicationListener.class);
 
         // Since 2.7.4 Register DubboBootstrapApplicationListener as an infrastructure Bean
         registerInfrastructureBean(registry, DubboBootstrapApplicationListener.BEAN_NAME,

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceCreatorTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.dubbo.config.spring.impl.NotifyService;
 import org.apache.dubbo.config.spring.reference.ReferenceCreator;
 import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -104,8 +104,8 @@ public class ReferenceCreatorTest {
     @Autowired
     private NotifyService notifyService;
 
-    @BeforeEach
-    public void init() {
+    @BeforeAll
+    public static void setUp() {
         DubboBootstrap.reset();
     }
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/DubboComponentScanRegistrarTest.java
Patch:
@@ -70,6 +70,9 @@ public void test() {
         // Test @Transactional is present or not
         Assertions.assertNotNull(findAnnotation(beanClass, Transactional.class));
 
+        // reset ConfigManager of provider context
+        DubboBootstrap.reset(false);
+
         AnnotationConfigApplicationContext consumerContext = new AnnotationConfigApplicationContext();
 
         consumerContext.register(ConsumerConfiguration.class);

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/issues/issue6252/Issue6252Test.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.config.spring.ZooKeeperServer;
 import org.apache.dubbo.config.spring.api.DemoService;
 import org.apache.dubbo.config.spring.context.annotation.EnableDubboConfig;
-import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Configuration;
@@ -37,8 +37,8 @@
 @PropertySource("classpath:/META-INF/issues/issue6252/config.properties")
 public class Issue6252Test {
 
-    @BeforeEach
-    public void setUp() {
+    @BeforeAll
+    public static void setUp() {
         DubboBootstrap.reset();
     }
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/issues/issue7003/Issue7003Test.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.ComponentScan;
@@ -47,8 +47,8 @@
 @PropertySource("classpath:/META-INF/issues/issue7003/config.properties")
 public class Issue7003Test {
 
-    @BeforeEach
-    public void setUp() {
+    @BeforeAll
+    public static void setUp() {
         DubboBootstrap.reset();
     }
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/schema/GenericServiceTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.config.spring.ReferenceBean;
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.junit.jupiter.api.AfterEach;
-import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -39,8 +39,8 @@
 @ImportResource(locations = "classpath:/META-INF/spring/dubbo-generic-consumer.xml")
 public class GenericServiceTest {
 
-    @BeforeEach
-    public void setUp() {
+    @BeforeAll
+    public static void setUp() {
         DubboBootstrap.reset();
     }
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
 import org.mockito.Mockito;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/MetadataReport.java
Patch:
@@ -66,6 +66,8 @@ default void registerServiceAppMapping(String serviceKey, String application, UR
 
     List<String> getExportedURLs(ServiceMetadataIdentifier metadataIdentifier);
 
+    void destroy();
+
     void saveServiceMetadata(ServiceMetadataIdentifier metadataIdentifier, URL url);
 
     void removeServiceMetadata(ServiceMetadataIdentifier metadataIdentifier);

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/MetadataReportInstance.java
Patch:
@@ -84,7 +84,7 @@ private static void checkInit() {
         }
     }
 
-    public static void destroy() {
+    public static void reset() {
         metadataReports.clear();
         init.set(false);
     }

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/InvokerTelnetHandlerTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.NetUtils;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.qos.legacy.service.DemoServiceImpl;
 import org.apache.dubbo.remoting.Channel;
@@ -54,7 +55,7 @@ public class InvokerTelnetHandlerTest {
 
     @BeforeEach
     public void setup() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @AfterEach

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/SelectTelnetHandlerTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.qos.legacy;
 
 import org.apache.dubbo.common.utils.NetUtils;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.qos.legacy.service.DemoService;
 import org.apache.dubbo.qos.legacy.service.DemoServiceImpl;
 import org.apache.dubbo.remoting.Channel;
@@ -58,7 +59,7 @@ public void setup() {
             }
         }
 
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @AfterEach

File: dubbo-spring-boot/dubbo-spring-boot-actuator/src/test/java/org/apache/dubbo/spring/boot/actuate/autoconfigure/DubboEndpointAnnotationAutoConfigurationTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.common.BaseServiceMetadata;
 import org.apache.dubbo.config.annotation.DubboReference;
 import org.apache.dubbo.config.annotation.DubboService;
-import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboConfigsMetadataEndpoint;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboMetadataEndpoint;
 import org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint;
@@ -113,12 +113,12 @@ public class DubboEndpointAnnotationAutoConfigurationTest {
 
     @BeforeEach
     public void init() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @AfterEach
     public void destroy() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @Test

File: dubbo-spring-boot/dubbo-spring-boot-actuator/src/test/java/org/apache/dubbo/spring/boot/actuate/endpoint/DubboEndpointTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.spring.boot.actuate.endpoint;
 
-import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 import org.apache.dubbo.spring.boot.util.DubboUtils;
 
 import org.junit.Assert;
@@ -57,12 +57,12 @@ public class DubboEndpointTest {
 
     @BeforeEach
     public void init() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @AfterEach
     public void destroy() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @Test

File: dubbo-spring-boot/dubbo-spring-boot-compatible/actuator/src/main/java/org/apache/dubbo/spring/boot/actuate/endpoint/metadata/DubboPropertiesMetadata.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.SortedMap;
 
-import static org.apache.dubbo.spring.boot.util.DubboUtils.filterDubboProperties;
+import static org.apache.dubbo.config.spring.util.EnvironmentUtils.filterDubboProperties;
 
 /**
  * Dubbo Properties Metadata
@@ -31,6 +31,6 @@
 public class DubboPropertiesMetadata extends AbstractDubboMetadata {
 
     public SortedMap<String, Object> properties() {
-        return filterDubboProperties(environment);
+        return (SortedMap) filterDubboProperties(environment);
     }
 }
\ No newline at end of file

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/env/DubboDefaultPropertiesEnvironmentPostProcessor.java
Patch:
@@ -74,7 +74,7 @@ private Map<String, Object> createDefaultProperties(ConfigurableEnvironment envi
         setDubboApplicationNameProperty(environment, defaultProperties);
         setDubboConfigMultipleProperty(defaultProperties);
         setDubboApplicationQosEnableProperty(defaultProperties);
-        setAllowBeanDefinitionOverriding(defaultProperties);
+        //setAllowBeanDefinitionOverriding(defaultProperties);
         return defaultProperties;
     }
 

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/test/java/org/apache/dubbo/spring/boot/autoconfigure/RelaxedDubboConfigBinderTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
-import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 
 import com.alibaba.spring.context.config.ConfigurationBeanBinder;
 import org.junit.After;
@@ -59,12 +59,12 @@ public class RelaxedDubboConfigBinderTest {
 
     @Before
     public void init() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @After
     public void destroy() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @Test

File: dubbo-spring-boot/dubbo-spring-boot-compatible/autoconfigure/src/test/java/org/apache/dubbo/spring/boot/context/event/AwaitingNonWebApplicationListenerTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.spring.boot.context.event;
 
 import org.apache.dubbo.common.lang.ShutdownHookCallbacks;
-import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.apache.dubbo.config.bootstrap.DubboBootstrap;
 
 import org.junit.After;
 import org.junit.Assert;
@@ -34,12 +34,12 @@ public class AwaitingNonWebApplicationListenerTest {
 
     @Before
     public void before() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @After
     public void after() {
-        ApplicationModel.reset();
+        DubboBootstrap.reset();
     }
 
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/manager/ExecutorRepositoryTest.java
Patch:
@@ -39,8 +39,6 @@ public void testGetExecutor() {
     }
 
     private void testGet(URL url) {
-        Assertions.assertNull(executorRepository.getExecutor(url));
-
         ExecutorService executorService = executorRepository.createExecutorIfAbsent(url);
         executorService.shutdown();
         executorService = executorRepository.createExecutorIfAbsent(url);

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/ThreadNameTest.java
Patch:
@@ -43,7 +43,7 @@ public class ThreadNameTest {
     private ThreadNameVerifyHandler clientHandler;
 
     private static String serverRegex = "DubboServerHandler\\-localhost:(\\d+)\\-thread\\-(\\d+)";
-    private static String clientRegex = "DubboClientHandler\\-localhost:(\\d+)\\-thread\\-(\\d+)";
+    private static String clientRegex = "DubboClientHandler\\-thread\\-(\\d+)";
 
     private final CountDownLatch serverLatch = new CountDownLatch(1);
     private final CountDownLatch clientLatch = new CountDownLatch(1);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Cluster.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcException;
-import org.apache.dubbo.rpc.cluster.support.FailoverCluster;
 
 /**
  * Cluster. (SPI, Singleton, ThreadSafe)
@@ -33,7 +32,8 @@
  */
 @SPI(Cluster.DEFAULT)
 public interface Cluster {
-    String DEFAULT = FailoverCluster.NAME;
+
+    String DEFAULT = "failover";
 
     /**
      * Merge the directory invokers to a virtual invoker.
@@ -56,4 +56,4 @@ static Cluster getCluster(String name, boolean wrap) {
         }
         return ExtensionLoader.getExtensionLoader(Cluster.class).getExtension(name, wrap);
     }
-}
\ No newline at end of file
+}

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/governance/GovernanceRuleRepository.java
Patch:
@@ -35,7 +35,7 @@ default void addListener(String key, ConfigurationListener listener) {
     }
 
 
-    /*
+    /**
      * {@link #removeListener(String, String, ConfigurationListener)}
      *
      * @param key      the key to represent a configuration

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouterFactory.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * ConditionRouterFactory
- *
+ * Load when "override://" is configured {@link ConditionRouter}
  */
 public class ConditionRouterFactory implements RouterFactory {
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java
Patch:
@@ -113,7 +113,7 @@ protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, Load
         if (resultList.isEmpty()) {
             return AsyncRpcResult.newDefaultAsyncResult(invocation);
         } else if (resultList.size() == 1) {
-            return resultList.iterator().next();
+            return AsyncRpcResult.newDefaultAsyncResult(resultList.get(0).getValue(), invocation);
         }
 
         if (returnType == void.class) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/registry/ZoneAwareClusterInvoker.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.stream.Collectors;
 
 import static org.apache.dubbo.common.constants.CommonConstants.PREFERRED_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_ZONE;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_ZONE_FORCE;
 import static org.apache.dubbo.common.constants.RegistryConstants.ZONE_KEY;
@@ -62,7 +61,7 @@ public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, L
         for (Invoker<T> invoker : invokers) {
             ClusterInvoker<T> clusterInvoker = (ClusterInvoker<T>) invoker;
             if (clusterInvoker.isAvailable() && clusterInvoker.getRegistryUrl()
-                    .getParameter(REGISTRY_KEY + "." + PREFERRED_KEY, false)) {
+                    .getParameter(PREFERRED_KEY, false)) {
                 return clusterInvoker.invoke(invocation);
             }
         }
@@ -72,7 +71,7 @@ public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, L
         if (StringUtils.isNotEmpty(zone)) {
             for (Invoker<T> invoker : invokers) {
                 ClusterInvoker<T> clusterInvoker = (ClusterInvoker<T>) invoker;
-                if (clusterInvoker.isAvailable() && zone.equals(clusterInvoker.getRegistryUrl().getParameter(REGISTRY_KEY + "." + ZONE_KEY))) {
+                if (clusterInvoker.isAvailable() && zone.equals(clusterInvoker.getRegistryUrl().getParameter(ZONE_KEY))) {
                     return clusterInvoker.invoke(invocation);
                 }
             }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/AbstractCluster.java
Patch:
@@ -256,7 +256,7 @@ public String toString() {
 
         @Override
         protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
-            // The only purpose is to build a interceptor chain, so the cluster related logic doesn't matter.
+            // The only purpose is to build an interceptor chain, so the cluster related logic doesn't matter.
             return null;
         }
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -162,7 +162,7 @@ private String getMockExceptionMessage(Throwable t, Throwable mt) {
     /**
      * Return MockInvoker
      * Contract：
-     * directory.list() will return a list of normal invokers if Constants.INVOCATION_NEED_MOCK is present in invocation, otherwise, a list of mock invokers will return.
+     * directory.list() will return a list of normal invokers if Constants.INVOCATION_NEED_MOCK is absent or not true in invocation, otherwise, a list of mock invokers will return.
      * if directory.list() returns more than one mock invoker, only one of them will be used.
      *
      * @param invocation
@@ -174,7 +174,7 @@ private List<Invoker<T>> selectMockInvoker(Invocation invocation) {
         if (invocation instanceof RpcInvocation) {
             //Note the implicit contract (although the description is added to the interface declaration, but extensibility is a problem. The practice placed in the attachment needs to be improved)
             ((RpcInvocation) invocation).setAttachment(INVOCATION_NEED_MOCK, Boolean.TRUE.toString());
-            //directory will return a list of normal invokers if Constants.INVOCATION_NEED_MOCK is present in invocation, otherwise, a list of mock invokers will return.
+            //directory will return a list of normal invokers if Constants.INVOCATION_NEED_MOCK is absent or not true in invocation, otherwise, a list of mock invokers will return.
             try {
                 invokers = directory.list(invocation);
             } catch (RpcException e) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/Parameters.java
Patch:
@@ -244,6 +244,9 @@ public boolean hasMethodParameter(String method, String key) {
 
     @Override
     public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
         return parameters.equals(o);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -48,7 +48,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Predicate;
 
-import static org.apache.dubbo.common.BaseServiceMetadata.COLON_SEPERATOR;
+import static org.apache.dubbo.common.BaseServiceMetadata.COLON_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;
 import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
@@ -1281,7 +1281,7 @@ public String getDisplayServiceKey() {
             return getServiceInterface();
         }
         return getServiceInterface() +
-                COLON_SEPERATOR + getVersion();
+                COLON_SEPARATOR + getVersion();
     }
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/URLStrParser.java
Patch:
@@ -221,7 +221,7 @@ public static Map<String, String> parseParams(String rawParams, boolean encoded)
      */
     public static URL parseEncodedStr(String encodedURLStr, boolean modifiable) {
         Map<String, String> parameters = null;
-        int pathEndIdx = encodedURLStr.indexOf("%3F");// '?'
+        int pathEndIdx = encodedURLStr.toUpperCase().indexOf("%3F");// '?'
         if (pathEndIdx >= 0) {
             parameters = parseEncodedParams(encodedURLStr, pathEndIdx + 3);
         } else {

File: dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java
Patch:
@@ -349,7 +349,7 @@ private static Object instantiate(Class<?> cl) throws Exception {
             }
         }
 
-        return cl.newInstance();
+        return cl.getDeclaredConstructor().newInstance();
     }
 
     public static Object getConstructorArg(Class<?> cl) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java
Patch:
@@ -340,9 +340,7 @@ public Class<?> toClass(ClassLoader loader, ProtectionDomain pd) {
             return mCtc.toClass(loader, pd);
         } catch (RuntimeException e) {
             throw e;
-        } catch (NotFoundException e) {
-            throw new RuntimeException(e.getMessage(), e);
-        } catch (CannotCompileException e) {
+        } catch (NotFoundException | CannotCompileException e) {
             throw new RuntimeException(e.getMessage(), e);
         }
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/CustomizedLoaderClassPath.java
Patch:
@@ -49,8 +49,9 @@ public CustomizedLoaderClassPath(ClassLoader cl) {
 
     public String toString() {
         Object cl = null;
-        if (clref != null)
+        if (clref != null) {
             cl = clref.get();
+        }
 
         return cl == null ? "<null>" : cl.toString();
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java
Patch:
@@ -174,7 +174,7 @@ public static Mixin mixin(Class<?>[] ics, Class<?>[] dcs, ClassLoader cl) {
             ccm.setSuperClass(Mixin.class.getName());
             ccm.addMethod("public Object newInstance(Object[] delegates){ return new " + micn + "($1); }");
             Class<?> mixin = ccm.toClass();
-            return (Mixin) mixin.newInstance();
+            return (Mixin) mixin.getDeclaredConstructor().newInstance();
         } catch (RuntimeException e) {
             throw e;
         } catch (Exception e) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java
Patch:
@@ -187,9 +187,6 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {
                     if (worked.contains(desc) || Modifier.isStatic(method.getModifiers())) {
                         continue;
                     }
-                    if (ics[i].isInterface() && Modifier.isStatic(method.getModifiers())) {
-                        continue;
-                    }
                     worked.add(desc);
 
                     int ix = methods.size();

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/AbstractDynamicConfiguration.java
Patch:
@@ -130,7 +130,7 @@ public final void close() throws Exception {
 
     @Override
     public boolean removeConfig(String key, String group) {
-        return execute(() -> doRemoveConfig(key, group), -1L);
+        return Boolean.TRUE.equals(execute(() -> doRemoveConfig(key, group), -1L));
     }
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/Constants.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.config.configcenter;
 
+@Deprecated
 public interface Constants {
     String CONFIG_CLUSTER_KEY = "config.cluster";
     String CONFIG_NAMESPACE_KEY = "config.namespace";

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/TreePathDynamicConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 
 import static java.util.Collections.emptySortedSet;
 import static java.util.Collections.unmodifiableSortedSet;
-import static org.apache.dubbo.common.config.configcenter.Constants.CONFIG_NAMESPACE_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.CONFIG_NAMESPACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_SEPARATOR;
 import static org.apache.dubbo.common.utils.CollectionUtils.isEmpty;
 import static org.apache.dubbo.common.utils.PathUtils.buildPath;
@@ -87,7 +87,7 @@ protected final String doGetConfig(String key, String group) throws Exception {
     @Override
     public final boolean publishConfig(String key, String group, String content) {
         String pathKey = buildPathKey(group, key);
-        return execute(() -> doPublishConfig(pathKey, content), getDefaultTimeout());
+        return Boolean.TRUE.equals(execute(() -> doPublishConfig(pathKey, content), getDefaultTimeout()));
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/common/lang/Prioritized.java
Patch:
@@ -63,7 +63,7 @@ public interface Prioritized extends Comparable<Prioritized> {
     /**
      * Get the priority
      *
-     * @return the default is {@link #MIN_PRIORITY minimum one}
+     * @return the default is {@link #NORMAL_PRIORITY}
      */
     default int getPriority() {
         return NORMAL_PRIORITY;

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadlocal/InternalThreadLocal.java
Patch:
@@ -58,7 +58,7 @@ public static void removeAll() {
             if (v != null && v != InternalThreadLocalMap.UNSET) {
                 Set<InternalThreadLocal<?>> variablesToRemove = (Set<InternalThreadLocal<?>>) v;
                 InternalThreadLocal<?>[] variablesToRemoveArray =
-                        variablesToRemove.toArray(new InternalThreadLocal[variablesToRemove.size()]);
+                        variablesToRemove.toArray(new InternalThreadLocal[0]);
                 for (InternalThreadLocal<?> tlv : variablesToRemoveArray) {
                     tlv.remove(threadLocalMap);
                 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadlocal/NamedInternalThreadFactory.java
Patch:
@@ -40,7 +40,7 @@ public NamedInternalThreadFactory(String prefix, boolean daemon) {
     @Override
     public Thread newThread(Runnable runnable) {
         String name = mPrefix + mThreadNum.getAndIncrement();
-        InternalThread ret = new InternalThread(mGroup, runnable, name, 0);
+        InternalThread ret = new InternalThread(mGroup, InternalRunnable.Wrap(runnable), name, 0);
         ret.setDaemon(mDaemon);
         return ret;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/config/Constants.java
Patch:
@@ -119,4 +119,6 @@ public interface Constants {
     String MULTI_SERIALIZATION_KEY = "serialize.multiple";
 
     String[] DOT_COMPATIBLE_KEYS = new String[]{"qos-enable", "qos-port", "qos-accept-foreign-ip"};
+
+    String IGNORE_CHECK_KEYS = "ignoreCheckKeys";
 }

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigConfigurationAdapter.java
Patch:
@@ -32,7 +32,7 @@ public class ConfigConfigurationAdapter implements Configuration {
 
     public ConfigConfigurationAdapter(AbstractConfig config) {
         Map<String, String> configMetadata = config.getMetaData();
-        metaData = new HashMap<>(configMetadata.size());
+        metaData = new HashMap<>(configMetadata.size(), 1.0f);
         for (Map.Entry<String, String> entry : configMetadata.entrySet()) {
             String prefix = config.getPrefix().endsWith(".") ? config.getPrefix() : config.getPrefix() + ".";
             String id = StringUtils.isEmpty(config.getId()) ? "" : config.getId() + ".";

File: dubbo-common/src/main/java/org/apache/dubbo/event/DirectEventDispatcher.java
Patch:
@@ -23,6 +23,7 @@
  * @since 2.7.5
  */
 public final class DirectEventDispatcher extends AbstractEventDispatcher {
+    public static final String NAME = "direct";
 
     public DirectEventDispatcher() {
         super(DIRECT_EXECUTOR);

File: dubbo-common/src/main/java/org/apache/dubbo/event/EventDispatcher.java
Patch:
@@ -29,7 +29,7 @@
  * @see DirectEventDispatcher
  * @since 2.7.5
  */
-@SPI("direct")
+@SPI(DirectEventDispatcher.NAME)
 public interface EventDispatcher extends Listenable<EventListener<?>> {
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/event/ParallelEventDispatcher.java
Patch:
@@ -25,6 +25,7 @@
  * @since 2.7.5
  */
 public class ParallelEventDispatcher extends AbstractEventDispatcher {
+    public static final String NAME = "parallel";
 
     public ParallelEventDispatcher() {
         super(ForkJoinPool.commonPool());

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalTest.java
Patch:
@@ -79,6 +79,7 @@ public void testSize() throws InterruptedException {
         final InternalThreadLocal<String> internalThreadLocalString = new InternalThreadLocal<String>();
         internalThreadLocalString.set("value");
         Assertions.assertEquals(2, InternalThreadLocal.size(), "size method is wrong!");
+        InternalThreadLocal.removeAll();
     }
 
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/CollectionUtilsTest.java
Patch:
@@ -141,7 +141,7 @@ public void testJoinAll() throws Exception {
 
     @Test
     public void testJoinList() throws Exception {
-        List<String> list = Arrays.asList();
+        List<String> list = emptyList();
         assertEquals("", CollectionUtils.join(list, "/"));
 
         list = Arrays.asList("x");

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/CompatibleTypeUtilsTest.java
Patch:
@@ -84,7 +84,7 @@ public void testCompatibleTypeConvert() throws Exception {
             result = CompatibleTypeUtils.compatibleTypeConvert("2011-12-11T12:24:12.047", java.time.LocalTime.class);
             assertEquals(DateTimeFormatter.ofPattern("HH:mm:ss").format((java.time.LocalTime) result), "12:24:12");
 
-            result = CompatibleTypeUtils.compatibleTypeConvert("2011-12-11T12:24:12.047", java.time.LocalDate.class);
+            result = CompatibleTypeUtils.compatibleTypeConvert("2011-12-11", java.time.LocalDate.class);
             assertEquals(DateTimeFormatter.ofPattern("yyyy-MM-dd").format((java.time.LocalDate) result), "2011-12-11");
 
             result = CompatibleTypeUtils.compatibleTypeConvert("ab", char[].class);

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/ConfigUtilsTest.java
Patch:
@@ -91,7 +91,7 @@ public void testMergeValuesAddDefault() {
     @Test
     public void testMergeValuesDeleteDefault() {
         List<String> merged = ConfigUtils.mergeValues(ThreadPool.class, "-default", asList("fixed", "default.limited", "cached"));
-        assertEquals(asList(), merged);
+        assertEquals(Collections.emptyList(), merged);
     }
 
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/echo/EchoServiceTest.java
Patch:
@@ -23,11 +23,10 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
+import org.apache.dubbo.rpc.service.EchoService;
 import org.apache.dubbo.service.DemoService;
 import org.apache.dubbo.service.DemoServiceImpl;
 
-import com.alibaba.dubbo.rpc.service.EchoService;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/ReferenceBuilder.java
Patch:
@@ -31,7 +31,7 @@
  *
  * @since 2.7
  */
-public class ReferenceBuilder<T> extends AbstractReferenceBuilder<ReferenceConfig, ReferenceBuilder<T>> {
+public class ReferenceBuilder<T> extends AbstractReferenceBuilder<ReferenceConfig<T>, ReferenceBuilder<T>> {
     /**
      * The interface name of the reference service
      */
@@ -74,8 +74,8 @@ public class ReferenceBuilder<T> extends AbstractReferenceBuilder<ReferenceConfi
      */
     private String services;
 
-    public static ReferenceBuilder newBuilder() {
-        return new ReferenceBuilder();
+    public static <T> ReferenceBuilder<T> newBuilder() {
+        return new ReferenceBuilder<>();
     }
 
     public ReferenceBuilder<T> id(String id) {

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/event/listener/PublishingServiceDefinitionListenerTest.java
Patch:
@@ -51,6 +51,7 @@ public class PublishingServiceDefinitionListenerTest {
 
     @BeforeEach
     public void init() {
+        ApplicationModel.reset();
         String metadataType = DEFAULT_METADATA_STORAGE_TYPE;
         ConfigManager configManager = ApplicationModel.getConfigManager();
         ApplicationConfig applicationConfig = new ApplicationConfig("dubbo-demo-provider");

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
 
+import com.alibaba.spring.beans.factory.annotation.EnableConfigurationBeanBinding;
 import org.springframework.context.annotation.Import;
 
 import java.lang.annotation.Documented;
@@ -34,7 +35,7 @@
 import java.lang.annotation.Target;
 
 /**
- * As  a convenient and multiple {@link EnableDubboConfigBinding}
+ * As a convenient and multiple {@link EnableConfigurationBeanBinding}
  * in default behavior , is equal to single bean bindings with below convention prefixes of properties:
  * <ul>
  * <li>{@link ApplicationConfig} binding to property : "dubbo.application"</li>
@@ -57,7 +58,7 @@
  * <li>{@link ConsumerConfig} binding to property :  "dubbo.consumers"</li>
  * </ul>
  *
- * @see EnableDubboConfigBinding
+ * @see EnableConfigurationBeanBinding
  * @see DubboConfigConfiguration
  * @see DubboConfigConfigurationRegistrar
  * @since 2.5.8

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/extension/SpringExtensionFactory.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
+import org.apache.dubbo.config.DubboShutdownHook;
 
 import com.alibaba.spring.util.BeanFactoryUtils;
 import org.springframework.context.ApplicationContext;
@@ -40,6 +41,8 @@ public static void addApplicationContext(ApplicationContext context) {
         CONTEXTS.add(context);
         if (context instanceof ConfigurableApplicationContext) {
             ((ConfigurableApplicationContext) context).registerShutdownHook();
+            // see https://github.com/apache/dubbo/issues/7093
+            DubboShutdownHook.getDubboShutdownHook().unregister();
         }
     }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -66,7 +66,7 @@ public void init() {
         registerBeanDefinitionParser("consumer", new DubboBeanDefinitionParser(ConsumerConfig.class, true));
         registerBeanDefinitionParser("protocol", new DubboBeanDefinitionParser(ProtocolConfig.class, true));
         registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true));
-        registerBeanDefinitionParser("reference", new DubboBeanDefinitionParser(ReferenceBean.class, false));
+        registerBeanDefinitionParser("reference", new DubboBeanDefinitionParser(ReferenceBean.class, true));
         registerBeanDefinitionParser("annotation", new AnnotationBeanDefinitionParser());
     }
 

File: dubbo-configcenter/dubbo-configcenter-apollo/src/main/java/org/apache/dubbo/configcenter/support/apollo/ApolloDynamicConfiguration.java
Patch:
@@ -42,11 +42,11 @@
 import java.util.concurrent.CopyOnWriteArraySet;
 import java.util.stream.Collectors;
 
-import static org.apache.dubbo.common.config.configcenter.Constants.CONFIG_NAMESPACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;
 import static org.apache.dubbo.common.constants.CommonConstants.CHECK_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.CLUSTER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SPLIT_PATTERN;
+import static org.apache.dubbo.common.constants.CommonConstants.CONFIG_NAMESPACE_KEY;
 
 /**
  * Apollo implementation, https://github.com/ctripcorp/apollo

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/filter/CacheFilter.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * CacheFilter is a core component of dubbo.Enabling <b>cache</b> key of service,method,consumer or provider dubbo will cache method return value.
  * Along with cache key we need to configure cache type. Dubbo default implemented cache types are
- * <li>lur</li>
+ * <li>lru</li>
  * <li>threadlocal</li>
  * <li>jcache</li>
  * <li>expiring</li>

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/DynamicConfigurationServiceNameMapping.java
Patch:
@@ -69,7 +69,7 @@ public void map(URL url) {
             dynamicConfiguration.publishConfig(key, ServiceNameMapping.buildGroup(serviceInterface, group, version, protocol), content);
             if (logger.isDebugEnabled()) {
                 logger.info(String.format("Dubbo service[%s] mapped to interface name[%s].",
-                        group, serviceInterface, group));
+                        group, serviceInterface));
             }
         });
     }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/MetadataReportInstance.java
Patch:
@@ -20,11 +20,13 @@
 import org.apache.dubbo.common.URLBuilder;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.config.MetadataReportConfig;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_DIRECTORY;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY;
 import static org.apache.dubbo.metadata.report.support.Constants.METADATA_REPORT_KEY;
@@ -51,6 +53,7 @@ public static void init(MetadataReportConfig config) {
                     .removeParameter(METADATA_REPORT_KEY)
                     .build();
         }
+        url = url.addParameterIfAbsent(APPLICATION_KEY, ApplicationModel.getApplicationConfig().getName());
         String relatedRegistryId = config.getRegistry() == null ? DEFAULT_KEY : config.getRegistry();
 //        RegistryConfig registryConfig = ApplicationModel.getConfigManager().getRegistry(relatedRegistryId)
 //                .orElseThrow(() -> new IllegalStateException("Registry id " + relatedRegistryId + " does not exist."));

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/rest/SpringRestService.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.metadata.rest;
 
-import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.DubboService;
 
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -35,7 +35,7 @@
  *
  * @since 2.7.6
  */
-@Service(version = "2.0.0")
+@DubboService(version = "2.0.0", group = "spring")
 @RestController
 public class SpringRestService implements RestService {
 

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/rest/StandardRestService.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.metadata.rest;
 
-import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.DubboService;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.FormParam;
@@ -34,7 +34,7 @@
 /**
  * JAX-RS {@link RestService}
  */
-@Service(version = "3.0.0", protocol = {"dubbo", "rest"}, group = "standard")
+@DubboService(version = "3.0.0", protocol = {"dubbo", "rest"}, group = "standard")
 @Path("/")
 public class StandardRestService implements RestService {
 

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/rest/jaxrs/JAXRSServiceRestMetadataResolverTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metadata.rest.resolver.jaxrs;
+package org.apache.dubbo.metadata.rest.jaxrs;
 
 import org.apache.dubbo.metadata.rest.ClassPathServiceRestMetadataReader;
 import org.apache.dubbo.metadata.rest.DefaultRestService;
@@ -23,7 +23,6 @@
 import org.apache.dubbo.metadata.rest.ServiceRestMetadata;
 import org.apache.dubbo.metadata.rest.SpringRestService;
 import org.apache.dubbo.metadata.rest.StandardRestService;
-import org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver;
 
 import org.junit.jupiter.api.Test;
 

File: dubbo-metadata/dubbo-metadata-definition-protobuf/src/test/java/org/apache/dubbo/metadata/definition/protobuf/ProtobufTypeBuilderTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.metadata.definition.model.MethodDefinition;
 import org.apache.dubbo.metadata.definition.model.TypeDefinition;
 import org.apache.dubbo.metadata.definition.protobuf.model.ServiceInterface;
+
 import org.junit.jupiter.api.Test;
 
 import java.util.List;
@@ -70,7 +71,7 @@ public void testProtobufBuilder() {
                 equalTo("java.util.List<org.apache.dubbo.metadata.definition.protobuf.model.GooglePB.PhoneNumber>"));
         assertThat(propertiesMap.containsKey("doubleMap"), is(true));
         assertThat(getTypeName(propertiesMap.get("doubleMap"), types),
-                equalTo("java.util.Map<java.lang.String,org.apache.dubbo.metadata.definition.protobuf.model.GooglePB.PhoneNumber>"));
+                equalTo("java.util.Map<java.lang.String,org.apache.dubbo.metadata.definition.protobuf.model.GooglePB$PhoneNumber>"));
         assertThat(getTypeName(propertiesMap.get("bytesList"), types),
                 equalTo("java.util.List<com.google.protobuf.ByteString>"));
         assertThat(getTypeName(propertiesMap.get("bytesMap"), types),

File: dubbo-metadata/dubbo-metadata-processor/src/test/java/org/apache/dubbo/metadata/rest/DefaultRestService.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.metadata.rest;
 
-import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.DubboService;
 
 import java.util.Map;
 
@@ -25,7 +25,7 @@
  *
  * @since 2.7.6
  */
-@Service(version = "1.0.0", group = "default")
+@DubboService(version = "1.0.0", group = "default")
 public class DefaultRestService implements RestService {
 
     @Override

File: dubbo-metadata/dubbo-metadata-processor/src/test/java/org/apache/dubbo/metadata/rest/SpringRestService.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.metadata.rest;
 
-import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.DubboService;
 
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -35,7 +35,7 @@
  *
  * @since 2.7.6
  */
-@Service(version = "2.0.0", group = "spring")
+@DubboService(version = "2.0.0", group = "spring")
 @RestController
 public class SpringRestService implements RestService {
 

File: dubbo-metadata/dubbo-metadata-processor/src/test/java/org/apache/dubbo/metadata/rest/StandardRestService.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.metadata.rest;
 
-import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.DubboService;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.FormParam;
@@ -34,7 +34,7 @@
 /**
  * JAX-RS {@link RestService}
  */
-@Service(version = "3.0.0", protocol = {"dubbo", "rest"}, group = "standard")
+@DubboService(version = "3.0.0", protocol = {"dubbo", "rest"}, group = "standard")
 @Path("/")
 public class StandardRestService implements RestService {
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/legacy/ListTelnetHandler.java
Patch:
@@ -112,6 +112,7 @@ private void printAllReferredServices(StringBuilder buf, boolean detail) {
                 buf.append(" addresses: ");
                 buf.append(ServiceCheckUtils.getConsumerAddressNum(consumer));
             }
+            buf.append("\r\n");
         }
     }
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/legacy/LogTelnetHandler.java
Patch:
@@ -44,7 +44,7 @@ public class LogTelnetHandler implements TelnetHandler {
     public String telnet(Channel channel, String message) {
         long size;
         File file = LoggerFactory.getFile();
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         if (message == null || message.trim().length() == 0) {
             buf.append("EXAMPLE: log error / log 100");
         } else {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.qos.server.handler;
 
+import org.apache.dubbo.common.utils.ExecutorUtil;
+
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.ChannelHandlerContext;
@@ -30,7 +32,6 @@
 import io.netty.handler.timeout.IdleStateHandler;
 import io.netty.util.CharsetUtil;
 import io.netty.util.concurrent.ScheduledFuture;
-import org.apache.dubbo.common.utils.ExecutorUtil;
 
 import java.util.List;
 import java.util.concurrent.TimeUnit;
@@ -90,6 +91,7 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t
             p.addLast(new StringDecoder(CharsetUtil.UTF_8));
             p.addLast(new StringEncoder(CharsetUtil.UTF_8));
             p.addLast(new IdleStateHandler(0, 0, 5 * 60));
+            p.addLast(new TelnetIdleEventHandler());
             p.addLast(new TelnetProcessHandler());
             p.remove(this);
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryDirectory.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.registry.AddressListener;
-import org.apache.dubbo.registry.NotifyListener;
 import org.apache.dubbo.registry.integration.DynamicDirectory;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
@@ -44,7 +43,7 @@
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_TYPE_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.SERVICE_REGISTRY_TYPE;
 
-public class ServiceDiscoveryRegistryDirectory<T> extends DynamicDirectory<T> implements NotifyListener {
+public class ServiceDiscoveryRegistryDirectory<T> extends DynamicDirectory<T> {
     private static final Logger logger = LoggerFactory.getLogger(ServiceDiscoveryRegistryDirectory.class);
 
     // instance address to invoker mapping.

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/RemoteMetadataServiceImpl.java
Patch:
@@ -59,7 +59,6 @@ public void publishMetadata(String serviceName) {
         metadataInfos.forEach((registryCluster, metadataInfo) -> {
             if (!metadataInfo.hasReported()) {
                 SubscriberMetadataIdentifier identifier = new SubscriberMetadataIdentifier(serviceName, metadataInfo.calAndGetRevision());
-                metadataInfo.calAndGetRevision();
                 metadataInfo.getExtendParams().put(REGISTRY_CLUSTER_KEY, registryCluster);
                 if (getMetadataReports().size() > 0) {
                     MetadataReport metadataReport = getMetadataReports().get(registryCluster);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleHandler.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.ConfigurationUtils;
-import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
@@ -28,7 +27,6 @@
 
 import java.util.Set;
 
-@Activate
 public class MigrationRuleHandler<T> {
     public static final String DUBBO_SERVICEDISCOVERY_MIGRATION = "dubbo.application.service-discovery.migration";
     private static final Logger logger = LoggerFactory.getLogger(MigrationRuleHandler.class);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -132,7 +132,7 @@ public class RegistryProtocol implements Protocol {
             APPLICATION_KEY, VERSION_KEY, GROUP_KEY, DUBBO_VERSION_KEY, RELEASE_KEY
     };
 
-    private final static Logger logger = LoggerFactory.getLogger(InterfaceCompatibleRegistryProtocol.class);
+    private final static Logger logger = LoggerFactory.getLogger(RegistryProtocol.class);
     private final Map<URL, NotifyListener> overrideListeners = new ConcurrentHashMap<>();
     private final Map<String, ServiceConfigurationListener> serviceConfigurationListeners = new ConcurrentHashMap<>();
     private final ProviderConfigurationListener providerConfigurationListener = new ProviderConfigurationListener();

File: dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java
Patch:
@@ -361,9 +361,7 @@ protected void subscribed(URL url, NotifyListener listener) {
     private List<URL> toList(Set<URL> urls) {
         List<URL> list = new ArrayList<URL>();
         if (CollectionUtils.isNotEmpty(urls)) {
-            for (URL url : urls) {
-                list.add(url);
-            }
+            list.addAll(urls);
         }
         return list;
     }

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryChangeWatcher.java
Patch:
@@ -49,7 +49,7 @@ public class ZookeeperServiceDiscoveryChangeWatcher implements CuratorWatcher {
 
     private final RegistryNotifier notifier;
 
-    private boolean keepWatching = true;
+    private volatile boolean keepWatching = true;
 
     private final String serviceName;
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/DefaultFuture.java
Patch:
@@ -261,7 +261,7 @@ private String getTimeoutMessage(boolean scan) {
     }
 
     private Request getRequestWithoutData() {
-        Request newRequest = request;
+        Request newRequest = request.copy();
         newRequest.setData(null);
         return newRequest;
     }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/TelnetUtils.java
Patch:
@@ -115,7 +115,7 @@ public static String toTable(List<String> header, List<List<String>> table) {
         buf.append("\r\n");
         //content
         for (List<String> row : table) {
-            StringBuffer rowbuf = new StringBuffer();
+            StringBuilder rowbuf = new StringBuilder();
             rowbuf.append("|");
             for (int j = 0; j < widths.length; j++) {
                 String cell = row.get(j);
@@ -125,7 +125,7 @@ public static String toTable(List<String> header, List<List<String>> table) {
 
                     if (rowbuf.length() >= totalWidth) {
                         buf.append(rowbuf.toString());
-                        rowbuf = new StringBuffer();
+                        rowbuf = new StringBuilder();
 //                        for(int m = 0;m < maxcountbefore && maxcountbefore < totalWidth ; m++){
 //                            rowbuf.append(" ");
 //                        }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/LogTelnetHandler.java
Patch:
@@ -44,7 +44,7 @@ public class LogTelnetHandler implements TelnetHandler {
     public String telnet(Channel channel, String message) {
         long size = 0;
         File file = LoggerFactory.getFile();
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         if (message == null || message.trim().length() == 0) {
             buf.append("EXAMPLE: log error / log 100");
         } else {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/StatusTelnetHandler.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.common.status.StatusChecker;
 import org.apache.dubbo.common.status.support.StatusUtils;
 import org.apache.dubbo.common.utils.CollectionUtils;
+import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.telnet.TelnetHandler;
 import org.apache.dubbo.remoting.telnet.support.Help;
@@ -81,7 +82,7 @@ public String telnet(Channel channel, String message) {
         }
         String status = channel.getUrl().getParameter("status");
         Map<String, Status> statuses = new HashMap<String, Status>();
-        if (CollectionUtils.isNotEmptyMap(statuses)) {
+        if (StringUtils.isNotEmpty(status)) {
             String[] ss = COMMA_SPLIT_PATTERN.split(status);
             for (String s : ss) {
                 StatusChecker handler = extensionLoader.getExtension(s);
@@ -97,5 +98,4 @@ public String telnet(Channel channel, String message) {
         Status stat = StatusUtils.getSummaryStatus(statuses);
         return String.valueOf(stat.getLevel());
     }
-
 }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java
Patch:
@@ -94,7 +94,7 @@ public void setValue(Object value) {
             if (responseFuture.isDone()) {
                 responseFuture.get().setValue(value);
             } else {
-                AppResponse appResponse = new AppResponse();
+                AppResponse appResponse = new AppResponse(invocation);
                 appResponse.setValue(value);
                 responseFuture.complete(appResponse);
             }
@@ -116,7 +116,7 @@ public void setException(Throwable t) {
             if (responseFuture.isDone()) {
                 responseFuture.get().setException(t);
             } else {
-                AppResponse appResponse = new AppResponse();
+                AppResponse appResponse = new AppResponse(invocation);
                 appResponse.setException(t);
                 responseFuture.complete(appResponse);
             }
@@ -319,7 +319,7 @@ public static AsyncRpcResult newDefaultAsyncResult(Throwable t, Invocation invoc
 
     public static AsyncRpcResult newDefaultAsyncResult(Object value, Throwable t, Invocation invocation) {
         CompletableFuture<AppResponse> future = new CompletableFuture<>();
-        AppResponse result = new AppResponse();
+        AppResponse result = new AppResponse(invocation);
         if (t != null) {
             result.setException(t);
         } else {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AttachmentsAdapter.java
Patch:
@@ -30,9 +30,9 @@ public static class ObjectToStringMap extends HashMap<String, String> {
 
         public ObjectToStringMap(Map<String, Object> attachments) {
             for (Entry<String, Object> entry : attachments.entrySet()) {
-                String converResult = convert(entry.getValue());
-                if (converResult != null) {
-                    super.put(entry.getKey(), converResult);
+                String convertResult = convert(entry.getValue());
+                if (convertResult != null) {
+                    super.put(entry.getKey(), convertResult);
                 }
             }
             this.attachments = attachments;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java
Patch:
@@ -101,7 +101,8 @@ public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {
         try {
             String accessLogKey = invoker.getUrl().getParameter(ACCESS_LOG_KEY);
             if (ConfigUtils.isNotEmpty(accessLogKey)) {
-                AccessLogData logData = buildAccessLogData(invoker, inv);
+                AccessLogData logData = AccessLogData.newLogData(); 
+                logData.buildAccessLogData(invoker, inv);
                 log(accessLogKey, logData);
             }
         } catch (Throwable t) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ExceptionFilter.java
Patch:
@@ -65,8 +65,8 @@ public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invoca
                 // directly throw if the exception appears in the signature
                 try {
                     Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());
-                    Class<?>[] exceptionClassses = method.getExceptionTypes();
-                    for (Class<?> exceptionClass : exceptionClassses) {
+                    Class<?>[] exceptionClasses = method.getExceptionTypes();
+                    for (Class<?> exceptionClass : exceptionClasses) {
                         if (exception.getClass().equals(exceptionClass)) {
                             return;
                         }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericImplFilter.java
Patch:
@@ -107,7 +107,7 @@ else if (isMakingGenericCall(generic, invocation)) {
             if (ProtocolUtils.isJavaGenericSerialization(generic)) {
 
                 for (Object arg : args) {
-                    if (!(byte[].class == arg.getClass())) {
+                    if (byte[].class != arg.getClass()) {
                         error(generic, byte[].class.getName(), arg.getClass().getName());
                     }
                 }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/TokenFilter.java
Patch:
@@ -48,7 +48,9 @@ public Result invoke(Invoker<?> invoker, Invocation inv)
             Map<String, Object> attachments = inv.getObjectAttachments();
             String remoteToken = (attachments == null ? null : (String) attachments.get(TOKEN_KEY));
             if (!token.equals(remoteToken)) {
-                throw new RpcException("Invalid token! Forbid invoke remote service " + serviceType + " method " + inv.getMethodName() + "() from consumer " + RpcContext.getServiceContext().getRemoteHost() + " to provider " + RpcContext.getServiceContext().getLocalHost());
+                throw new RpcException("Invalid token! Forbid invoke remote service " + serviceType + " method " + inv.getMethodName() +
+                        "() from consumer " + RpcContext.getServiceContext().getRemoteHost() + " to provider " +
+                        RpcContext.getServiceContext().getLocalHost()+ ", consumer incorrect token is " + remoteToken);
             }
         }
         return invoker.invoke(inv);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/tps/StatItem.java
Patch:
@@ -49,7 +49,7 @@ public boolean isAllowable() {
             lastResetTime = now;
         }
 
-        if (token.sum() < 0) {
+        if (token.sum() <= 0) {
             return false;
         }
         token.decrement();

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyFactory.java
Patch:
@@ -22,10 +22,9 @@
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.service.Destroyable;
+import org.apache.dubbo.rpc.service.EchoService;
 import org.apache.dubbo.rpc.service.GenericService;
 
-import com.alibaba.dubbo.rpc.service.EchoService;
-
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
@@ -60,7 +59,7 @@ public <T> T getProxy(Invoker<T> invoker, boolean generic) throws RpcException {
         }
 
         if (generic) {
-            if (!GenericService.class.isAssignableFrom(invoker.getInterface())) {
+            if (GenericService.class.equals(invoker.getInterface()) || !GenericService.class.isAssignableFrom(invoker.getInterface())) {
                 interfaces.add(com.alibaba.dubbo.rpc.service.GenericService.class);
             }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyInvoker.java
Patch:
@@ -82,9 +82,9 @@ public void destroy() {
     public Result invoke(Invocation invocation) throws RpcException {
         try {
             Object value = doInvoke(proxy, invocation.getMethodName(), invocation.getParameterTypes(), invocation.getArguments());
-			CompletableFuture<Object> future = wrapWithFuture(value);
+            CompletableFuture<Object> future = wrapWithFuture(value);
             CompletableFuture<AppResponse> appResponseFuture = future.handle((obj, t) -> {
-                AppResponse result = new AppResponse();
+                AppResponse result = new AppResponse(invocation);
                 if (t != null) {
                     if (t instanceof CompletionException) {
                         result.setException(t.getCause());

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java
Patch:
@@ -62,7 +62,7 @@ public static Class<?> getReturnType(Invocation invocation) {
                 String service = invocation.getInvoker().getUrl().getServiceInterface();
                 if (StringUtils.isNotEmpty(service)) {
                     Method method = getMethodByService(invocation, service);
-                    return method.getReturnType();
+                    return method == null ? null : method.getReturnType();
                 }
             }
         } catch (Throwable t) {

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/RpcContextTest.java
Patch:
@@ -139,6 +139,7 @@ public void testObject() {
 
         map.keySet().forEach(context::remove);
         Assertions.assertNull(context.get("_11"));
+        RpcContext.removeContext();
     }
 
     @Test

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/AccessLogFilterTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.filter;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.DubboAppender;
 import org.apache.dubbo.common.utils.LogUtil;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
@@ -51,6 +52,7 @@ public void testInvokeException() {
         accessLogFilter.invoke(invoker, invocation);
         assertEquals(1, LogUtil.findMessage("Exception in AccessLogFilter of service"));
         LogUtil.stop();
+        DubboAppender.clear();
     }
 
     // TODO how to assert thread action

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/ServiceAddressURL.java
Patch:
@@ -111,6 +111,9 @@ public String getVersion() {
 
     @Override
     public String getParameter(String key) {
+        if (GROUP_KEY.equals(key)) {
+            return getGroup();
+        }
         String value = null;
         if (consumerURL != null) {
             value = consumerURL.getParameter(key);

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/cache/CacheTest.java
Patch:
@@ -83,6 +83,7 @@ private void testCache(String type) throws Exception {
                 // verify cache, same result is returned for multiple invocations (in fact, the return value increases
                 // on every invocation on the server side)
                 String fix = null;
+                cacheService.findCache("0");
                 for (int i = 0; i < 3; i++) {
                     String result = cacheService.findCache("0");
                     assertTrue(fix == null || fix.equals(result));
@@ -94,6 +95,7 @@ private void testCache(String type) throws Exception {
                     // default cache.size is 1000 for LRU, should have cache expired if invoke more than 1001 times
                     for (int n = 0; n < 1001; n++) {
                         String pre = null;
+                        cacheService.findCache(String.valueOf(n));
                         for (int i = 0; i < 10; i++) {
                             String result = cacheService.findCache(String.valueOf(n));
                             assertTrue(pre == null || pre.equals(result));

File: dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java
Patch:
@@ -70,7 +70,7 @@
 public class MetricsFilter implements Filter {
 
     private static final Logger logger = LoggerFactory.getLogger(MetricsFilter.class);
-    private static volatile AtomicBoolean exported = new AtomicBoolean(false);
+    protected static volatile AtomicBoolean exported = new AtomicBoolean(false);
     private Integer port;
     private String protocolName;
 

File: dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/ReferenceCountManagedChannel.java
Patch:
@@ -40,8 +40,8 @@ public ReferenceCountManagedChannel(ManagedChannel delegated) {
     /**
      * The reference count of current ExchangeClient, connection will be closed if all invokers destroyed.
      */
-    public void incrementAndGetCount() {
-        referenceCount.incrementAndGet();
+    public int incrementAndGetCount() {
+        return referenceCount.incrementAndGet();
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/common/URLBuilder.java
Patch:
@@ -336,7 +336,9 @@ public URLBuilder addParametersIfAbsent(Map<String, String> parameters) {
         if (CollectionUtils.isEmptyMap(parameters)) {
             return this;
         }
-        this.parameters.putAll(parameters);
+        for(Map.Entry<String, String> entry : parameters.entrySet()) {
+            this.parameters.putIfAbsent(entry.getKey(), entry.getValue());
+        }
         return this;
     }
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java
Patch:
@@ -97,6 +97,8 @@ public void tagRouterRuleParseTest(){
         TagRouterRule tagRouterRule = TagRuleParser.parse(tagRouterRuleConfig);
 
         // assert tags
+        assert tagRouterRule.getKey().equals("demo-provider");
+        assert tagRouterRule.getPriority() == 1;
         assert tagRouterRule.getTagNames().contains("tag1");
         assert tagRouterRule.getTagNames().contains("tag2");
         assert tagRouterRule.getTagNames().contains("tag3");

File: dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.LogHelper;
 import org.apache.dubbo.common.utils.ReflectUtils;
+import org.apache.dubbo.common.utils.SerializeClassChecker;
 
 import java.lang.reflect.Array;
 import java.lang.reflect.Constructor;
@@ -464,6 +465,7 @@ public static Class<?> name2Class(ClassLoader loader, String name) throws ClassN
         if (isReferenceType(name)) {
             name = name.substring(1, name.length() - 1);
         }
+        SerializeClassChecker.getInstance().validateClass(name);
         return Class.forName(name, false, loader);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java
Patch:
@@ -386,6 +386,7 @@ private static Object realize0(Object pojo, Class<?> type, Type genericType, fin
         if (pojo instanceof Map<?, ?> && type != null) {
             Object className = ((Map<Object, Object>) pojo).get("class");
             if (className instanceof String) {
+                SerializeClassChecker.getInstance().validateClass((String) className);
                 try {
                     type = ClassUtils.forName((String) className);
                 } catch (ClassNotFoundException e) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java
Patch:
@@ -94,6 +94,7 @@ public void destroy() {
     public void buildRouterChain() {
         RouterChain<T> routerChain = RouterChain.buildChain(getUrl());
         routerChain.setInvokers(invokers);
+        routerChain.loop(true);
         this.setRouterChain(routerChain);
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcException.java
Patch:
@@ -38,6 +38,7 @@
     public static final int LIMIT_EXCEEDED_EXCEPTION = 7;
     public static final int TIMEOUT_TERMINATE = 8;
     public static final int REGISTRY_EXCEPTION = 9;
+    public static final int ROUTER_CACHE_NOT_BUILD = 10;
     private static final long serialVersionUID = 7815426752583648734L;
     /**
      * RpcException cannot be extended, use error code for exception type to keep compatibility

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/ConfigTest.java
Patch:
@@ -993,7 +993,7 @@ public void testAnnotation() {
 
     @Test
     public void testDubboProtocolPortOverride() throws Exception {
-        int port = 55555;
+        int port = NetUtils.getAvailablePort();
         System.setProperty("dubbo.protocol.dubbo.port", String.valueOf(port));
         ServiceConfig<DemoService> service = null;
         DubboBootstrap bootstrap = null;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/AbstractInterfaceBuilderTest.java
Patch:
@@ -247,6 +247,7 @@ void scope() {
     void build() {
         MonitorConfig monitorConfig = new MonitorConfig("123");
         ApplicationConfig applicationConfig = new ApplicationConfig();
+        applicationConfig.setName("appName");
         ModuleConfig moduleConfig = new ModuleConfig();
         RegistryConfig registryConfig = new RegistryConfig();
         MetadataReportConfig metadataReportConfig = new MetadataReportConfig();

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/test/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationTest.java
Patch:
@@ -141,11 +141,12 @@ public void testPublishConfig() {
 
     @Test
     public void testPublishConfigCas() {
-        String key = "user-service";
+        String key = "user-service-cas";
         String group = "org.apache.dubbo.service.UserService";
         String content = "test";
-        assertTrue(configuration.publishConfigCas(key, group, content, null));
         ConfigItem configItem = configuration.getConfigItem(key, group);
+        assertTrue(configuration.publishConfigCas(key, group, content, configItem.getStat()));
+        configItem = configuration.getConfigItem(key, group);
         assertEquals("test", configItem.getContent());
         assertTrue(configuration.publishConfigCas(key, group, "newtest", configItem.getStat()));
         try {

File: dubbo-metadata/dubbo-metadata-processor/src/test/java/org/apache/dubbo/metadata/annotation/processing/util/TypeUtilsTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.metadata.tools.GenericTestService;
 import org.apache.dubbo.metadata.tools.TestServiceImpl;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import javax.lang.model.element.Element;
@@ -450,6 +451,7 @@ public void testListTypeElements() {
     }
 
     @Test
+    @Disabled
     public void testGetResource() throws URISyntaxException {
         URL resource = getResource(processingEnv, testType);
         assertNotNull(resource);

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -177,7 +177,7 @@ public URL(String protocol,
         }
 
         this.urlAddress = new PathURLAddress(protocol, username, password, path, host, port);
-        this.urlParam = new URLParam(parameters);
+        this.urlParam = URLParam.parse(parameters);
     }
 
     protected URL(String protocol,
@@ -194,7 +194,7 @@ protected URL(String protocol,
         }
 
         this.urlAddress = new PathURLAddress(protocol, username, password, path, host, port);
-        this.urlParam = new URLParam(parameters);
+        this.urlParam = URLParam.parse(parameters);
     }
 
     public static URL cacheableValueOf(String url) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/ServiceConfigURL.java
Patch:
@@ -45,7 +45,7 @@ public ServiceConfigURL(String protocol,
                int port,
                String path,
                Map<String, String> parameters) {
-        this(new PathURLAddress(protocol, username, password, path, host, port), new URLParam(parameters), null);
+        this(new PathURLAddress(protocol, username, password, path, host, port), URLParam.parse(parameters), null);
     }
 
     public ServiceConfigURL(String protocol,
@@ -56,7 +56,7 @@ public ServiceConfigURL(String protocol,
                             String path,
                             Map<String, String> parameters,
                             Map<String, Object> attributes) {
-        this(new PathURLAddress(protocol, username, password, path, host, port), new URLParam(parameters), attributes);
+        this(new PathURLAddress(protocol, username, password, path, host, port), URLParam.parse(parameters), attributes);
     }
 
     protected <T extends URL> T newURL(URLAddress urlAddress, URLParam urlParam) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -234,6 +234,8 @@ public interface CommonConstants {
      */
     String RELEASE_KEY = "release";
 
+    String PROTOBUF_MESSAGE_CLASS_NAME = "com.google.protobuf.Message";
+
     int MAX_PROXY_COUNT = 65535;
 
     String MONITOR_KEY = "monitor";

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/Connection.java
Patch:
@@ -168,6 +168,7 @@ public boolean isClosed() {
         return closed.get();
     }
 
+    //TODO replace channelFuture with intermediate future
     public ChannelFuture write(Object request) throws RemotingException {
         if (!isAvailable()) {
             throw new RemotingException(null, null, "Failed to send request " + request + ", cause: The channel to " + remote + " is closed!");

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/GracefulShutdown.java
Patch:
@@ -33,8 +33,8 @@ public class GracefulShutdown {
     private static final long GRACEFUL_SHUTDOWN_PING_TIMEOUT_NANOS = TimeUnit.SECONDS.toNanos(10);
     private final ChannelHandlerContext ctx;
     private final ChannelPromise originPromise;
-    private boolean pingAckedOrTimeout;
     private final String goAwayMessage;
+    private boolean pingAckedOrTimeout;
     private Future<?> pingFuture;
 
     public GracefulShutdown(ChannelHandlerContext ctx, String goAwayMessage, ChannelPromise originPromise) {
@@ -66,7 +66,8 @@ void secondGoAwayAndClose(ChannelHandlerContext ctx) {
         pingFuture.cancel(false);
 
         try {
-            Http2GoAwayFrame goAwayFrame = new DefaultHttp2GoAwayFrame(Http2Error.NO_ERROR, ByteBufUtil.writeAscii(this.ctx.alloc(), this.goAwayMessage));
+            Http2GoAwayFrame goAwayFrame = new DefaultHttp2GoAwayFrame(Http2Error.NO_ERROR,
+                    ByteBufUtil.writeAscii(this.ctx.alloc(), this.goAwayMessage));
             ctx.write(goAwayFrame);
             ctx.flush();
             //TODO support customize graceful shutdown timeout mills

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TriplePathResolver.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.rpc.protocol.tri;
 
-
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.rpc.Invoker;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleServerConnectionHandler.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.rpc.protocol.tri;
 
-
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/CacheableFailbackRegistry.java
Patch:
@@ -164,6 +164,8 @@ protected List<URL> toUrlsWithEmpty(URL consumer, String path, Collection<String
         List<URL> urls;
         if (CollectionUtils.isEmpty(providers)) {
             urls = new ArrayList<>(1);
+            // clear cache on empty notification: unsubscribe or provider offline
+            stringUrls.remove(consumer);
         } else {
             String rawProvider = providers.iterator().next();
             if (rawProvider.startsWith(OVERRIDE_PROTOCOL) || rawProvider.startsWith(ROUTE_PROTOCOL) || rawProvider.startsWith(ROUTE_SCRIPT_PROTOCOL)) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/RegistryConstants.java
Patch:
@@ -55,6 +55,8 @@ public interface RegistryConstants {
 
     String ROUTE_PROTOCOL = "route";
 
+    String ROUTE_SCRIPT_PROTOCOL = "script";
+
     String OVERRIDE_PROTOCOL = "override";
 
     String COMPATIBLE_CONFIG_KEY = "compatible_config";

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/CacheableFailbackRegistry.java
Patch:
@@ -57,6 +57,7 @@
 import static org.apache.dubbo.common.constants.RegistryConstants.EMPTY_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.OVERRIDE_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.ROUTE_PROTOCOL;
+import static org.apache.dubbo.common.constants.RegistryConstants.ROUTE_SCRIPT_PROTOCOL;
 import static org.apache.dubbo.common.url.component.DubboServiceAddressURL.PROVIDER_FIRST_KEYS;
 
 /**
@@ -165,7 +166,7 @@ protected List<URL> toUrlsWithEmpty(URL consumer, String path, Collection<String
             urls = new ArrayList<>(1);
         } else {
             String rawProvider = providers.iterator().next();
-            if (rawProvider.startsWith(OVERRIDE_PROTOCOL) || rawProvider.startsWith(ROUTE_PROTOCOL)) {
+            if (rawProvider.startsWith(OVERRIDE_PROTOCOL) || rawProvider.startsWith(ROUTE_PROTOCOL) || rawProvider.startsWith(ROUTE_SCRIPT_PROTOCOL)) {
                 urls = toConfiguratorsWithoutEmpty(consumer, providers);
             } else {
                 urls = toUrlsWithoutEmpty(consumer, providers);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java
Patch:
@@ -252,8 +252,8 @@ private ReferenceBean getReferenceBean(Class<?> injectedType, AnnotationAttribut
 
                 beanDefinitionRegistry.registerBeanDefinition(referenceBeanName, beanDefinition);
                 getBeanFactory().registerSingleton(referenceBeanName, referenceBean);
-
-                //referenceBeanManager.addReference(referenceBean);
+                //cache reference bean, avoid re-inject same element after prepare reference bean
+                referenceBeanManager.addReference(referenceBean);
             } catch (Exception e) {
                 throw new Exception("Create dubbo reference bean failed", e);
             }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java
Patch:
@@ -107,7 +107,7 @@ public void afterPropertiesSet() throws Exception {
         if (referenceProps == null) {
             Assert.notEmptyString(getId(), "The id of ReferenceBean cannot be empty");
             ConfigurableListableBeanFactory beanFactory = getBeanFactory();
-            BeanDefinition beanDefinition = beanFactory.getMergedBeanDefinition(getId());
+            BeanDefinition beanDefinition = beanFactory.getBeanDefinition(getId());
             propertyValues = beanDefinition.getPropertyValues();
         }
     }
@@ -187,7 +187,7 @@ public Class<?> getInterfaceClass() {
                 String consumer = (String) referenceProps.get("consumer");
                 if (StringUtils.isBlank(generic) && consumer != null) {
                     // get generic from consumerConfig
-                    BeanDefinition consumerBeanDefinition = getBeanFactory().getMergedBeanDefinition(consumer);
+                    BeanDefinition consumerBeanDefinition = getBeanFactory().getBeanDefinition(consumer);
                     if (consumerBeanDefinition != null) {
                         generic = (String) consumerBeanDefinition.getPropertyValues().get("generic");
                     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java
Patch:
@@ -114,7 +114,7 @@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
         for (String beanName : beanNames) {
             Class<?> beanType;
             if (beanFactory.isFactoryBean(beanName)){
-                BeanDefinition beanDefinition = beanFactory.getMergedBeanDefinition(beanName);
+                BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);
                 if (isReferenceBean(beanDefinition)) {
                     continue;
                 }
@@ -253,7 +253,7 @@ private ReferenceBean getReferenceBean(Class<?> injectedType, AnnotationAttribut
                 beanDefinitionRegistry.registerBeanDefinition(referenceBeanName, beanDefinition);
                 getBeanFactory().registerSingleton(referenceBeanName, referenceBean);
 
-                referenceBeanManager.addReference(referenceBean);
+                //referenceBeanManager.addReference(referenceBean);
             } catch (Exception e) {
                 throw new Exception("Create dubbo reference bean failed", e);
             }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.cluster.support;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.URLBuilder;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -39,6 +38,7 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
@@ -156,7 +156,7 @@ protected Result doInvoke(Invocation invocation, List invokers, LoadBalance load
 
     }
 
-
+    @Disabled("RpcContext attachments will be set to Invocation twice, first in ConsumerContextFilter, second AbstractInvoker")
     @Test
     public void testBindingAttachment() {
         final String attachKey = "attach";

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/interceptor/ClusterInterceptor.java
Patch:
@@ -26,6 +26,7 @@
 /**
  * Different from {@link Filter}, ClusterInterceptor works at the outmost layer, before one specific address/invoker is picked.
  */
+@Deprecated
 @SPI
 public interface ClusterInterceptor {
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/URLAddress.java
Patch:
@@ -252,7 +252,7 @@ private static PathURLAddress createPathURLAddress(String decodeStr, String rawA
         }
 
         // check cache
-        protocol = URLItemCache.checkProtocol(protocol);
+        protocol = URLItemCache.intern(protocol);
         path = URLItemCache.checkPath(path);
 
         return new PathURLAddress(protocol, username, password, path, host, port, rawAddress);

File: dubbo-common/src/main/java/org/apache/dubbo/common/url/component/URLParam.java
Patch:
@@ -21,6 +21,8 @@
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 
+import org.eclipse.collections.impl.map.mutable.UnifiedMap;
+
 import java.io.Serializable;
 import java.util.Collections;
 import java.util.HashMap;
@@ -263,7 +265,7 @@ public static URLParam parse(String rawParam, boolean encoded, Map<String, Strin
 
     public static URLParam parse(String rawParam) {
         String[] parts = rawParam.split("&");
-        Map<String, String> parameters = new HashMap<>((int) (parts.length/.75f) + 1);
+        Map<String, String> parameters = new UnifiedMap<>((int) (parts.length/.75f) + 1);
         for (String part : parts) {
             part = part.trim();
             if (part.length() > 0) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -36,6 +36,7 @@
 import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -336,7 +337,7 @@ protected static Map<String, String> convert(Map<String, String> parameters, Str
             String value = entry.getValue();
             result.put(pre + key, value);
             // For compatibility, key like "registry-type" will has a duplicate key "registry.type"
-            if (key.contains("-")) {
+            if (Arrays.binarySearch(Constants.DOT_COMPATIBLE_KEYS, key) != -1) {
                 result.put(pre + key.replace('-', '.'), value);
             }
         }

File: dubbo-common/src/main/java/org/apache/dubbo/config/Constants.java
Patch:
@@ -117,4 +117,6 @@ public interface Constants {
     String REGISTER_KEY = "register";
 
     String MULTI_SERIALIZATION_KEY = "serialize.multiple";
+
+    String[] DOT_COMPATIBLE_KEYS = new String[]{"qos-enable", "qos-port", "qos-accept-foreign-ip"};
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -520,6 +520,7 @@ public void initialize() {
         }
 
         ApplicationModel.initFrameworkExts();
+        
 
         startConfigCenter();
 
@@ -1162,7 +1163,7 @@ private void registerServiceInstance() {
 
     private void doRegisterServiceInstance(ServiceInstance serviceInstance) {
         // register instance only when at least one service is exported.
-        if (serviceInstance.getPort() != null && serviceInstance.getPort() != -1) {
+        if (serviceInstance.getPort() > 0) {
             publishMetadataToRemote(serviceInstance);
             logger.info("Start registering instance address to registry.");
             getServiceDiscoveries().forEach(serviceDiscovery ->

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ServiceInstanceHostPortCustomizer.java
Patch:
@@ -36,14 +36,14 @@ public class ServiceInstanceHostPortCustomizer implements ServiceInstanceCustomi
     @Override
     public void customize(ServiceInstance serviceInstance) {
 
-        if (serviceInstance.getPort() != null) {
+        if (serviceInstance.getPort() > 0) {
             return;
         }
 
         WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension();
 
         String host = null;
-        Integer port = null;
+        int port = -1;
         Set<URL> urls = writableMetadataService.getExportedServiceURLs();
         if (CollectionUtils.isNotEmpty(urls)) {
             String preferredProtocol = ApplicationModel.getApplicationConfig().getProtocol();
@@ -64,7 +64,6 @@ public void customize(ServiceInstance serviceInstance) {
                 DefaultServiceInstance instance = (DefaultServiceInstance) serviceInstance;
                 instance.setHost(host);
                 instance.setPort(port);
-                instance.setId(host + ":" + port);
             }
         }
     }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java
Patch:
@@ -116,8 +116,6 @@ public void testAppendParameters1() throws Exception {
         Assertions.assertEquals("ONE,1", parameters.get("prefix.num"));
         Assertions.assertEquals("hello%2Fworld", parameters.get("prefix.naming"));
         Assertions.assertEquals("30", parameters.get("prefix.age"));
-        Assertions.assertTrue(parameters.containsKey("prefix.key-2"));
-        Assertions.assertTrue(parameters.containsKey("prefix.key.2"));
         Assertions.assertFalse(parameters.containsKey("prefix.secret"));
     }
 
@@ -807,7 +805,7 @@ public void setSecret(String secret) {
         public Map getParameters() {
             Map<String, String> map = new HashMap<String, String>();
             map.put("key.1", "one");
-            map.put("key-2", "two");
+            map.put("key.2", "two");
             return map;
         }
     }

File: dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/MonitorFilter.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER;
 import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER_SIDE;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
@@ -49,7 +48,7 @@
 /**
  * MonitorFilter. (SPI, Singleton, ThreadSafe)
  */
-@Activate(group = {PROVIDER, CONSUMER})
+@Activate(group = {PROVIDER})
 public class MonitorFilter implements Filter, Filter.Listener {
 
     private static final Logger logger = LoggerFactory.getLogger(MonitorFilter.class);

File: dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/filter/ConsumerSignFilter.java
Patch:
@@ -33,7 +33,7 @@
  *
  * @see org.apache.dubbo.rpc.Filter
  */
-@Activate(group = CommonConstants.CONSUMER, order = -10000)
+@Activate(group = CommonConstants.CONSUMER, value = Constants.SERVICE_AUTH, order = -10000)
 public class ConsumerSignFilter implements Filter {
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/FileSystemServiceDiscovery.java
Patch:
@@ -110,7 +110,7 @@ private void removeFile(File file) {
     }
 
     private String getServiceInstanceId(ServiceInstance serviceInstance) {
-        String id = serviceInstance.getId();
+        String id = serviceInstance.getAddress();
         if (StringUtils.isBlank(id)) {
             return serviceInstance.getHost() + "." + serviceInstance.getPort();
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/SelfHostMetaServiceDiscovery.java
Patch:
@@ -207,7 +207,7 @@ public URL getUrl() {
 
     @SuppressWarnings("unchecked")
     public final void fillServiceInstance(DefaultServiceInstance serviceInstance) {
-        String hostId = serviceInstance.getId();
+        String hostId = serviceInstance.getAddress();
         if (metadataMap.containsKey(hostId)) {
             // Use cached metadata.
             // Metadata will be updated by provider callback

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -291,7 +291,7 @@ protected void subscribeURLs(URL url, NotifyListener listener, Set<String> servi
 
         // register ServiceInstancesChangedListener
         ServiceInstancesChangedListener serviceListener = serviceListeners.computeIfAbsent(serviceNamesKey, k -> {
-            ServiceInstancesChangedListener serviceInstancesChangedListener = new ServiceInstancesChangedListener(serviceNames, serviceDiscovery);
+            ServiceInstancesChangedListener serviceInstancesChangedListener = serviceDiscovery.createListener(serviceNames);
             serviceInstancesChangedListener.setUrl(url);
             serviceNames.forEach(serviceName -> {
                 List<ServiceInstance> serviceInstances = serviceDiscovery.getInstances(serviceName);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryDirectory.java
Patch:
@@ -32,9 +32,10 @@
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.cluster.RouterChain;
 
+import org.eclipse.collections.impl.map.mutable.UnifiedMap;
+
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -152,7 +153,7 @@ private void refreshInvoker(List<URL> invokerUrls) {
      * @return invokers
      */
     private Map<String, Invoker<T>> toInvokers(List<URL> urls) {
-        Map<String, Invoker<T>> newUrlInvokerMap = new HashMap<>();
+        Map<String, Invoker<T>> newUrlInvokerMap = new UnifiedMap<>();
         if (urls == null || urls.isEmpty()) {
             return newUrlInvokerMap;
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataUtils.java
Patch:
@@ -86,7 +86,7 @@ public static void publishServiceDefinition(URL url) {
     }
 
     public static String computeKey(ServiceInstance serviceInstance) {
-        return serviceInstance.getServiceName() + "##" + serviceInstance.getId() + "##" +
+        return serviceInstance.getServiceName() + "##" + serviceInstance.getAddress() + "##" +
                 ServiceInstanceMetadataUtils.getExportedServicesRevision(serviceInstance);
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/RemoteMetadataServiceImpl.java
Patch:
@@ -85,7 +85,7 @@ public MetadataInfo getMetadata(ServiceInstance instance) {
         SubscriberMetadataIdentifier identifier = new SubscriberMetadataIdentifier(instance.getServiceName(),
                 ServiceInstanceMetadataUtils.getExportedServicesRevision(instance));
 
-        String registryCluster = instance.getExtendParams().get(REGISTRY_CLUSTER_KEY);
+        String registryCluster = instance.getRegistryCluster();
 
         checkRemoteConfigured();
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/DefaultMigrationAddressComparator.java
Patch:
@@ -39,11 +39,11 @@ public class DefaultMigrationAddressComparator implements MigrationAddressCompar
     @Override
     public <T> boolean shouldMigrate(ClusterInvoker<T> serviceDiscoveryInvoker, ClusterInvoker<T> invoker, MigrationRule rule) {
         if (!serviceDiscoveryInvoker.hasProxyInvokers()) {
-            logger.info("No instance address available, will not migrate.");
+            logger.info("No instance address available, stop compare.");
             return false;
         }
         if (!invoker.hasProxyInvokers()) {
-            logger.info("No interface address available, will migrate.");
+            logger.info("No interface address available, stop compare.");
             return true;
         }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleHandler.java
Patch:
@@ -30,8 +30,8 @@
 
 @Activate
 public class MigrationRuleHandler<T> {
+    public static final String DUBBO_SERVICEDISCOVERY_MIGRATION = "dubbo.application.service-discovery.migration";
     private static final Logger logger = LoggerFactory.getLogger(MigrationRuleHandler.class);
-    private static final String DUBBO_SERVICEDISCOVERY_MIGRATION = "dubbo.application.service-discovery.migration";
 
     private MigrationClusterInvoker<T> migrationInvoker;
     private MigrationStep currentStep;
@@ -119,8 +119,10 @@ private void refreshInvoker(MigrationStep step, Float threshold) {
         }
 
         if (step == MigrationStep.APPLICATION_FIRST) {
+            setCurrentStepAndThreshold(step, threshold);
             migrationInvoker.refreshServiceDiscoveryInvokerOnMappingCallback(false);
         } else if (step == MigrationStep.FORCE_APPLICATION) {
+            setCurrentStepAndThreshold(step, threshold);
             migrationInvoker.refreshServiceDiscoveryInvokerOnMappingCallback(true);
         }
     }

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/DefaultServiceInstanceTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import static java.lang.String.valueOf;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.METADATA_SERVICE_URLS_PROPERTY_NAME;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.METADATA_SERVICE_URL_PARAMS_PROPERTY_NAME;
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -37,7 +36,7 @@ public class DefaultServiceInstanceTest {
     public DefaultServiceInstance instance;
 
     public static DefaultServiceInstance createInstance() {
-        DefaultServiceInstance instance = new DefaultServiceInstance(valueOf(System.nanoTime()), "A", "127.0.0.1", 8080);
+        DefaultServiceInstance instance = new DefaultServiceInstance("A", "127.0.0.1", 8080);
         instance.getMetadata().put("dubbo.metadata-service.urls", "[ \"dubbo://192.168.0.102:20881/com.alibaba.cloud.dubbo.service.DubboMetadataService?anyhost=true&application=spring-cloud-alibaba-dubbo-provider&bind.ip=192.168.0.102&bind.port=20881&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&group=spring-cloud-alibaba-dubbo-provider&interface=com.alibaba.cloud.dubbo.service.DubboMetadataService&methods=getAllServiceKeys,getServiceRestMetadata,getExportedURLs,getAllExportedURLs&pid=17134&qos.enable=false&register=true&release=2.7.3&revision=1.0.0&side=provider&timestamp=1564826098503&version=1.0.0\" ]");
         instance.getMetadata().put("dubbo.metadata-service.url-params", "{\"dubbo\":{\"application\":\"dubbo-provider-demo\",\"deprecated\":\"false\",\"group\":\"dubbo-provider-demo\",\"version\":\"1.0.0\",\"timestamp\":\"1564845042651\",\"dubbo\":\"2.0.2\",\"provider.host\":\"192.168.0.102\",\"provider.port\":\"20880\"}}");
         return instance;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/FileSystemServiceDiscoveryTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.apache.dubbo.registry.client.DefaultServiceInstanceTest.createInstance;
@@ -29,6 +30,7 @@
  *
  * @since 2.7.5
  */
+@Disabled("FileSystemServiceDiscovery implementation is not stable enough at present")
 public class FileSystemServiceDiscoveryTest {
 
     private FileSystemServiceDiscovery serviceDiscovery;

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/util/NacosNamingServiceUtils.java
Patch:
@@ -57,7 +57,6 @@ public class NacosNamingServiceUtils {
      */
     public static Instance toInstance(ServiceInstance serviceInstance) {
         Instance instance = new Instance();
-        instance.setInstanceId(serviceInstance.getId());
         instance.setServiceName(serviceInstance.getServiceName());
         instance.setIp(serviceInstance.getHost());
         instance.setPort(serviceInstance.getPort());
@@ -75,8 +74,7 @@ public static Instance toInstance(ServiceInstance serviceInstance) {
      * @since 2.7.5
      */
     public static ServiceInstance toServiceInstance(Instance instance) {
-        DefaultServiceInstance serviceInstance = new DefaultServiceInstance(instance.getInstanceId(),
-                NamingUtils.getServiceName(instance.getServiceName()), instance.getIp(), instance.getPort());
+        DefaultServiceInstance serviceInstance = new DefaultServiceInstance(NamingUtils.getServiceName(instance.getServiceName()), instance.getIp(), instance.getPort());
         serviceInstance.setMetadata(instance.getMetadata());
         serviceInstance.setEnabled(instance.isEnabled());
         serviceInstance.setHealthy(instance.isHealthy());

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/util/CuratorFrameworkUtils.java
Patch:
@@ -85,7 +85,7 @@ public static ServiceInstance build(org.apache.curator.x.discovery.ServiceInstan
         String host = instance.getAddress();
         int port = instance.getPort();
         ZookeeperInstance zookeeperInstance = instance.getPayload();
-        DefaultServiceInstance serviceInstance = new DefaultServiceInstance(instance.getId(), name, host, port);
+        DefaultServiceInstance serviceInstance = new DefaultServiceInstance(name, host, port);
         serviceInstance.setMetadata(zookeeperInstance.getMetadata());
         return serviceInstance;
     }

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryTest.java
Patch:
@@ -34,7 +34,6 @@
 import static java.util.Arrays.asList;
 import static org.apache.dubbo.common.utils.NetUtils.getAvailablePort;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.INSTANCE_REVISION_UPDATED_KEY;
-import static org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkUtils.generateId;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -104,7 +103,7 @@ public void testRegistration() throws InterruptedException {
     }
 
     private DefaultServiceInstance createServiceInstance(String serviceName, String host, int port) {
-        return new DefaultServiceInstance(generateId(host, port), serviceName, host, port);
+        return new DefaultServiceInstance(serviceName, host, port);
     }
 
 //    @Test

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java
Patch:
@@ -52,7 +52,7 @@
  */
 public abstract class AbstractInvoker<T> implements Invoker<T> {
 
-    protected final Logger logger = LoggerFactory.getLogger(getClass());
+    protected static final Logger logger = LoggerFactory.getLogger(AbstractInvoker.class);
 
     private final Class<T> type;
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java
Patch:
@@ -20,11 +20,11 @@
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
+import org.apache.dubbo.rpc.cluster.filter.ClusterFilter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.AsyncMethodInfo;
 import org.apache.dubbo.rpc.model.ConsumerModel;
@@ -39,7 +39,7 @@
  * EventFilter
  */
 @Activate(group = CommonConstants.CONSUMER)
-public class FutureFilter implements Filter, Filter.Listener {
+public class FutureFilter implements ClusterFilter, ClusterFilter.Listener {
 
     protected static final Logger logger = LoggerFactory.getLogger(FutureFilter.class);
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/FutureFilterTest.java
Patch:
@@ -18,11 +18,11 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.rpc.AppResponse;
-import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
+import org.apache.dubbo.rpc.cluster.filter.ClusterFilter;
 import org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter;
 import org.apache.dubbo.rpc.protocol.dubbo.support.DemoService;
 
@@ -40,7 +40,7 @@
  */
 public class FutureFilterTest {
     private static RpcInvocation invocation;
-    private Filter eventFilter = new FutureFilter();
+    private ClusterFilter eventFilter = new FutureFilter();
 
     @BeforeAll
     public static void setUp() {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -258,7 +258,7 @@ public Result invoke(final Invocation invocation) throws RpcException {
         // binding attachments into invocation.
         Map<String, Object> contextAttachments = RpcContext.getContext().getObjectAttachments();
         if (contextAttachments != null && contextAttachments.size() != 0) {
-            ((RpcInvocation) invocation).addObjectAttachments(contextAttachments);
+            ((RpcInvocation) invocation).addObjectAttachmentsIfAbsent(contextAttachments);
         }
 
         List<Invoker<T>> invokers = list(invocation);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/Connection.java
Patch:
@@ -34,7 +34,6 @@
 import io.netty.channel.ChannelOption;
 import io.netty.channel.ChannelPipeline;
 import io.netty.channel.ChannelPromise;
-import io.netty.channel.DefaultChannelPromise;
 import io.netty.channel.socket.SocketChannel;
 import io.netty.util.AbstractReferenceCounted;
 import io.netty.util.AttributeKey;
@@ -99,7 +98,7 @@ public ChannelPromise connect() {
                 .remoteAddress(getConnectAddress())
                 .channel(socketChannelClass());
 
-        final ConnectionHandler connectionHandler = new ConnectionHandler(this,bootstrap, TIMER);
+        final ConnectionHandler connectionHandler = new ConnectionHandler(this, bootstrap, TIMER);
         bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, connectTimeout);
         bootstrap.handler(new ChannelInitializer<SocketChannel>() {
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/ConnectionHandler.java
Patch:
@@ -51,7 +51,8 @@ public ConnectionHandler(Connection connection, Bootstrap bootstrap, Timer timer
         this.timer = timer;
 
     }
-    public ChannelPromise connect(){
+
+    public ChannelPromise connect() {
         final ChannelFuture init = bootstrap.connect();
         final DefaultChannelPromise promise = new DefaultChannelPromise(init.channel());
         init.addListener(future -> {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ClientStream.java
Patch:
@@ -47,8 +47,6 @@
 import io.netty.handler.codec.http2.Http2StreamChannel;
 import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;
 import io.netty.util.AsciiString;
-import io.netty.util.concurrent.Future;
-import io.netty.util.concurrent.GenericFutureListener;
 
 import java.io.IOException;
 import java.io.InputStream;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2Protocol.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.remoting.api.Http2WireProtocol;
 
 import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.ChannelInboundHandlerAdapter;
 import io.netty.channel.ChannelPipeline;
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.handler.codec.http2.Http2FrameCodec;

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -93,14 +93,15 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
             req.setTwoWay(true);
             req.setData(inv);
 
+            connection.connectSync();
+
             DefaultFuture2 future = DefaultFuture2.newFuture(this.connection, req, timeout, executor);
             final CompletableFuture<AppResponse> respFuture = future.thenApply(obj -> (AppResponse) obj);
             // save for 2.6.x compatibility, for example, TraceFilter in Zipkin uses com.alibaba.xxx.FutureAdapter
             FutureContext.getContext().setCompatibleFuture(respFuture);
             AsyncRpcResult result = new AsyncRpcResult(respFuture, inv);
             result.setExecutor(executor);
 
-            connection.connectSync();
 
             if (!connection.isAvailable()) {
                 Response response = new Response(req.getId(), req.getVersion());

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ServerStream.java
Patch:
@@ -190,7 +190,8 @@ private void unaryInvoke() {
                     convertAttachment(trailers, attachments);
                 }
                 ctx.write(new DefaultHttp2HeadersFrame(http2Headers));
-                ctx.write(new DefaultHttp2DataFrame(buf));
+                final DefaultHttp2DataFrame data = new DefaultHttp2DataFrame(buf);
+                ctx.write(data);
                 ctx.writeAndFlush(new DefaultHttp2HeadersFrame(trailers, true));
             } catch (Throwable e) {
                 LOGGER.warn("Exception processing triple message", e);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleClientInboundHandler.java
Patch:
@@ -25,8 +25,9 @@ public class TripleClientInboundHandler extends ChannelInboundHandlerAdapter {
     @Override
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
         final ClientStream invoker = TripleUtil.getClientStream(ctx);
+        final ByteBuf buffer = (ByteBuf) msg;
         if (invoker != null) {
-            invoker.onData(new ByteBufInputStream((ByteBuf) msg));
+            invoker.onData(new ByteBufInputStream(buffer, buffer.readableBytes(),true));
         }
     }
 }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleHttp2FrameServerHandler.java
Patch:
@@ -36,6 +36,7 @@
 import io.netty.handler.codec.http2.Http2Frame;
 import io.netty.handler.codec.http2.Http2Headers;
 import io.netty.handler.codec.http2.Http2HeadersFrame;
+import io.netty.util.ReferenceCountUtil;
 
 import static org.apache.dubbo.rpc.protocol.tri.TripleUtil.responseErr;
 import static org.apache.dubbo.rpc.protocol.tri.TripleUtil.responsePlainTextError;
@@ -52,6 +53,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
             onDataRead(ctx, (Http2DataFrame) msg);
         } else if (msg instanceof Http2Frame) {
             // ignored
+            ReferenceCountUtil.release(msg);
         } else {
             super.channelRead(ctx, msg);
         }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleServerConnectionHandler.java
Patch:
@@ -25,6 +25,7 @@
 import io.netty.handler.codec.http2.Http2ChannelDuplexHandler;
 import io.netty.handler.codec.http2.Http2GoAwayFrame;
 import io.netty.handler.codec.http2.Http2PingFrame;
+import io.netty.util.ReferenceCountUtil;
 
 import static org.apache.dubbo.rpc.protocol.tri.GracefulShutdown.GRACEFUL_SHUTDOWN_PING;
 
@@ -44,6 +45,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                 }
             }
         } else if (msg instanceof Http2GoAwayFrame) {
+            ReferenceCountUtil.release(msg);
         } else {
             super.channelRead(ctx, msg);
         }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleServerInboundHandler.java
Patch:
@@ -25,8 +25,9 @@ public class TripleServerInboundHandler extends ChannelInboundHandlerAdapter {
     @Override
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
         final ServerStream serverStream = TripleUtil.getServerStream(ctx);
+        final ByteBuf buffer = (ByteBuf) msg;
         if (serverStream != null) {
-            serverStream.onData(new ByteBufInputStream((ByteBuf) msg));
+            serverStream.onData(new ByteBufInputStream(buffer,buffer.readableBytes(),true));
         }
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java
Patch:
@@ -49,7 +49,7 @@ public StaticDirectory(URL url, List<Invoker<T>> invokers) {
     }
 
     public StaticDirectory(URL url, List<Invoker<T>> invokers, RouterChain<T> routerChain) {
-        super(url == null && CollectionUtils.isNotEmpty(invokers) ? invokers.get(0).getUrl() : url, routerChain);
+        super(url == null && CollectionUtils.isNotEmpty(invokers) ? invokers.get(0).getUrl() : url, routerChain, false);
         if (CollectionUtils.isEmpty(invokers)) {
             throw new IllegalArgumentException("invokers == null");
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
-import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
@@ -248,7 +247,7 @@ public <T> void notify(List<Invoker<T>> invokers) {
 
         Invoker<T> invoker = invokers.get(0);
         URL url = invoker.getUrl();
-        String providerApplication = url.getParameter(CommonConstants.REMOTE_APPLICATION_KEY);
+        String providerApplication = url.getRemoteApplication();
 
         if (StringUtils.isEmpty(providerApplication)) {
             logger.error("TagRouter must getConfig from or subscribe to a specific application, but the application " +

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/configcenter/file/FileSystemDynamicConfigurationTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;
 
 import java.io.File;
 import java.util.TreeSet;
@@ -43,6 +44,8 @@
 /**
  * {@link FileSystemDynamicConfiguration} Test
  */
+// Test often failed on Github Actions Platform because of file system on Azure
+@DisabledIfEnvironmentVariable(named = "DISABLE_FILE_SYSTEM_TEST", matches = "true")
 public class FileSystemDynamicConfigurationTest {
 
     private final Logger logger = LoggerFactory.getLogger(getClass());

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleListener.java
Patch:
@@ -46,6 +46,7 @@
 import static java.util.stream.Collectors.toSet;
 import static java.util.stream.Stream.of;
 import static org.apache.dubbo.common.constants.CommonConstants.MAPPING_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.TIMESTAMP_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.INIT;
 import static org.apache.dubbo.common.constants.RegistryConstants.PROVIDED_BY;
 import static org.apache.dubbo.common.constants.RegistryConstants.SUBSCRIBED_SERVICE_NAMES_KEY;
@@ -123,7 +124,7 @@ public synchronized void onExport(RegistryProtocol registryProtocol, Exporter<?>
 
     @Override
     public synchronized void onRefer(RegistryProtocol registryProtocol, ClusterInvoker<?> invoker, URL consumerUrl, URL registryURL) {
-        MigrationRuleHandler<?> migrationRuleHandler = handlers.computeIfAbsent(consumerUrl.getServiceKey(), _key -> {
+        MigrationRuleHandler<?> migrationRuleHandler = handlers.computeIfAbsent(consumerUrl.getServiceKey() + consumerUrl.getParameter(TIMESTAMP_KEY), _key -> {
             return new MigrationRuleHandler<>((MigrationInvoker<?>)invoker, consumerUrl);
         });
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/DynamicDirectory.java
Patch:
@@ -88,7 +88,7 @@ public abstract class DynamicDirectory<T> extends AbstractDirectory<T> implement
     protected ServiceInstancesChangedListener serviceListener;
 
     public DynamicDirectory(Class<T> serviceType, URL url) {
-        super(url);
+        super(url, true);
         if (serviceType == null) {
             throw new IllegalArgumentException("service type is null.");
         }

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleInvoker.java
Patch:
@@ -100,6 +100,8 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
             AsyncRpcResult result = new AsyncRpcResult(respFuture, inv);
             result.setExecutor(executor);
 
+            connection.connectSync();
+
             if (!connection.isAvailable()) {
                 Response response = new Response(req.getId(), req.getVersion());
                 response.setStatus(Response.CHANNEL_INACTIVE);

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/AbstractStream.java
Patch:
@@ -161,7 +161,7 @@ protected void convertAttachment(Http2Headers trailers, Map<String, Object> atta
                 if (v instanceof String) {
                     trailers.addObject(key, v);
                 } else if (v instanceof byte[]) {
-                    trailers.addObject(key + "-bin", TripleUtil.encodeBase64((byte[]) v));
+                    trailers.add(key + "-bin", TripleUtil.encodeBase64ASCII((byte[]) v));
                 }
             } else {
                 if (v instanceof String || serializeType == null) {

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleConstant.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.protocol.tri;
 
 public interface TripleConstant {
-    String TRI_CHANNEL_CTX_KEY = "tri-ctx-channel";
     String STATUS_KEY = "grpc-status";
     String MESSAGE_KEY = "grpc-message";
     String CONTENT_TYPE_KEY = "content-type";

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Constants.java
Patch:
@@ -95,6 +95,8 @@ public interface Constants {
      * The key name for reference URL in register center
      */
     String REFER_KEY = "refer";
+
+    String TIMESTAMP_KEY = "timestamp";
     /**
      * The key name for export URL in register center
      */

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -40,6 +40,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.TIMESTAMP_KEY;
 
 /**
  * AbstractRegistryFactory. (SPI, Singleton, ThreadSafe)
@@ -120,7 +121,7 @@ public Registry getRegistry(URL url) {
         url = URLBuilder.from(url)
                 .setPath(RegistryService.class.getName())
                 .addParameter(INTERFACE_KEY, RegistryService.class.getName())
-                .removeParameters(EXPORT_KEY, REFER_KEY)
+                .removeParameters(EXPORT_KEY, REFER_KEY, TIMESTAMP_KEY)
                 .build();
         String key = createRegistryCacheKey(url);
         // Lock the registry access process to ensure a single instance of the registry

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Constants.java
Patch:
@@ -100,5 +100,7 @@ public interface Constants {
      */
     String EXPORT_KEY = "export";
 
+    String PEER_KEY = "peer";
+
     String CONSUMER_URL_KEY = "CONSUMER_URL";
 }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/InvokerSideConfigUrlTest.java
Patch:
@@ -35,7 +35,7 @@
 
 import static org.apache.dubbo.rpc.Constants.SCOPE_REMOTE;
 
-
+@Disabled
 public class InvokerSideConfigUrlTest extends UrlTestBase {
     private static final Logger log = LoggerFactory.getLogger(InvokerSideConfigUrlTest.class);
 

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/model/MethodDefinition.java
Patch:
@@ -95,6 +95,6 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
-        return Objects.hash(getName(), getReturnType(), getParameterTypes());
+        return Objects.hash(getName(), getReturnType(), Arrays.toString(getParameterTypes()));
     }
 }

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/SimpleRegistryFactory.java
Patch:
@@ -21,8 +21,9 @@
 import org.mockito.Mockito;
 
 public class SimpleRegistryFactory implements RegistryFactory {
+    static Registry registry = Mockito.mock(Registry.class);
     @Override
     public Registry getRegistry(URL url) {
-        return Mockito.mock(Registry.class);
+        return registry;
     }
 }

File: dubbo-rpc/dubbo-rpc-injvm/src/test/java/org/apache/dubbo/rpc/protocol/injvm/DemoService.java
Patch:
@@ -38,7 +38,4 @@ public interface DemoService {
     int stringLength(String str);
 
     Type enumlength(Type... types);
-
-
-    String getRemoteApplicationName();
 }
\ No newline at end of file

File: dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleProtocol.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.common.utils.ExecutorUtil;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.PortUnificationExchanger;
-import org.apache.dubbo.remoting.transport.AbstractClient;
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/nop/NopDynamicConfiguration.java
Patch:
@@ -20,6 +20,8 @@
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 
+import static java.util.Collections.emptySortedSet;
+
 import java.util.SortedSet;
 
 /**
@@ -67,6 +69,6 @@ public boolean publishConfig(String key, String group, String content) {
      */
     @Override
     public SortedSet<String> getConfigKeys(String group) {
-        return null;
+        return emptySortedSet();
     }
 }

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/api/ConnectionTest.java
Patch:
@@ -14,10 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.remoting.netty4;
+package org.apache.dubbo.remoting.api;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.remoting.api.Connection;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/api/NettyServerTest.java
Patch:
@@ -14,12 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.remoting.netty4;
+package org.apache.dubbo.remoting.api;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
-import org.apache.dubbo.remoting.api.PortUnificationServer;
 
 public class NettyServerTest {
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.dubbo.metadata.MetadataServiceExporter;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/model/TypeDefinition.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.Serializable;
 import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

File: dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/builder/TypeDefinitionBuilder.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.metadata.annotation.processing.builder;
 
 import org.apache.dubbo.common.lang.Prioritized;
-import org.apache.dubbo.metadata.annotation.processing.builder.TypeBuilder;
 import org.apache.dubbo.metadata.definition.model.TypeDefinition;
 
 import javax.annotation.processing.ProcessingEnvironment;

File: dubbo-common/src/test/java/org/apache/dubbo/common/InterfaceAddressURLTest.java
Patch:
@@ -51,7 +51,6 @@ public void testGetParameter() {
         ServiceAddressURL interfaceAddressURL = new DubboServiceAddressURL(url.getUrlAddress(), url.getUrlParam(), consumerURL, null);
 
         assertEquals("3000", interfaceAddressURL.getParameter(TIMEOUT_KEY));
-        assertNotEquals("1.0.0", interfaceAddressURL.getVersion());
 
         assertEquals("morgan", interfaceAddressURL.getApplication());
         assertEquals("provider", interfaceAddressURL.getRemoteApplication());

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigValidationUtils.java
Patch:
@@ -97,7 +97,6 @@
 import static org.apache.dubbo.common.constants.RegistryConstants.SERVICE_REGISTRY_PROTOCOL;
 import static org.apache.dubbo.common.constants.RemotingConstants.BACKUP_KEY;
 import static org.apache.dubbo.common.extension.ExtensionLoader.getExtensionLoader;
-import static org.apache.dubbo.common.utils.UrlUtils.isServiceDiscoveryRegistryType;
 import static org.apache.dubbo.config.Constants.ARCHITECTURE;
 import static org.apache.dubbo.config.Constants.CONTEXTPATH_KEY;
 import static org.apache.dubbo.config.Constants.DUBBO_IP_TO_REGISTRY;
@@ -547,7 +546,7 @@ public static void validateMethodConfig(MethodConfig config) {
     }
 
     private static String extractRegistryType(URL url) {
-        return isServiceDiscoveryRegistryType(url) ? SERVICE_REGISTRY_PROTOCOL : getRegistryProtocolType(url);
+        return UrlUtils.hasServiceDiscoveryRegistryTypeKey(url) ? SERVICE_REGISTRY_PROTOCOL : getRegistryProtocolType(url);
     }
 
     private static String getRegistryProtocolType(URL url) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/OfflineApp.java
Patch:
@@ -31,7 +31,7 @@ public class OfflineApp extends BaseOffline {
 
     @Override
     protected void doUnexport(ProviderModel.RegisterStatedURL statedURL) {
-        if (UrlUtils.isServiceDiscoveryRegistryType(statedURL.getRegistryUrl())) {
+        if (UrlUtils.isServiceDiscoveryURL(statedURL.getRegistryUrl())) {
             super.doUnexport(statedURL);
         }
     }

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/OfflineInterface.java
Patch:
@@ -26,7 +26,7 @@
 })
 public class OfflineInterface extends BaseOffline {
     protected void doUnexport(ProviderModel.RegisterStatedURL statedURL) {
-        if (!UrlUtils.isServiceDiscoveryRegistryType(statedURL.getRegistryUrl())) {
+        if (!UrlUtils.isServiceDiscoveryURL(statedURL.getRegistryUrl())) {
             super.doUnexport(statedURL);
         }
     }

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/OnlineApp.java
Patch:
@@ -27,7 +27,7 @@ public class OnlineApp extends BaseOnline {
 
     @Override
     protected void doExport(ProviderModel.RegisterStatedURL statedURL) {
-        if (UrlUtils.isServiceDiscoveryRegistryType(statedURL.getRegistryUrl())) {
+        if (UrlUtils.isServiceDiscoveryURL(statedURL.getRegistryUrl())) {
            super.doExport(statedURL);
         }
     }

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/OnlineInterface.java
Patch:
@@ -22,7 +22,7 @@
 public class OnlineInterface extends BaseOnline {
     @Override
     protected void doExport(ProviderModel.RegisterStatedURL statedURL) {
-        if (!UrlUtils.isServiceDiscoveryRegistryType(statedURL.getRegistryUrl())) {
+        if (!UrlUtils.isServiceDiscoveryURL(statedURL.getRegistryUrl())) {
             super.doExport(statedURL);
         }
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryFactory.java
Patch:
@@ -17,18 +17,18 @@
 package org.apache.dubbo.registry.client;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.UrlUtils;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.support.AbstractRegistryFactory;
 
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.SERVICE_REGISTRY_PROTOCOL;
 import static org.apache.dubbo.registry.Constants.DEFAULT_REGISTRY;
 
 public class ServiceDiscoveryRegistryFactory extends AbstractRegistryFactory {
 
     @Override
     protected Registry createRegistry(URL url) {
-        if (SERVICE_REGISTRY_PROTOCOL.equalsIgnoreCase(url.getProtocol())) {
+        if (UrlUtils.hasServiceDiscoveryRegistryProtocol(url)) {
             String protocol = url.getParameter(REGISTRY_KEY, DEFAULT_REGISTRY);
             url = url.setProtocol(protocol).removeParameter(REGISTRY_KEY);
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleListener.java
Patch:
@@ -48,7 +48,7 @@ public class MigrationRuleListener implements RegistryProtocolListener, Configur
     private volatile String rawRule;
 
     public MigrationRuleListener() {
-        this.configuration = ApplicationModel.getEnvironment().getDynamicConfiguration().orElseGet(null);
+        this.configuration = ApplicationModel.getEnvironment().getDynamicConfiguration().orElse(null);
 
         logger.info("Listening for migration rules on dataId-" + RULE_KEY + " group-" + DUBBO_SERVICEDISCOVERY_MIGRATION);
         configuration.addListener(RULE_KEY, DUBBO_SERVICEDISCOVERY_MIGRATION, this);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/InstanceAddressURL.java
Patch:
@@ -310,7 +310,7 @@ public String getAnyMethodParameter(String key) {
         }
         String protocolServiceKey = getProtocolServiceKey();
         if (StringUtils.isNotEmpty(protocolServiceKey)) {
-            for (String fullKey : metadataInfo.getParameters(protocolServiceKey).keySet()) {
+            for (String fullKey : metadataInfo.getServiceInfo(protocolServiceKey).getParams().keySet()) {
                 if (fullKey.endsWith(suffix)) {
                     return getParameter(fullKey);
                 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListener.java
Patch:
@@ -48,6 +48,7 @@
 import java.util.TreeSet;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.Semaphore;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_METADATA_STORAGE_TYPE;
@@ -138,7 +139,7 @@ public synchronized void onEvent(ServiceInstancesChangedEvent event) {
 
         if (hasEmptyMetadata(newRevisionToMetadata)) {// retry every 10 seconds
             if (retryPermission.tryAcquire()) {
-                scheduler.submit(new AddressRefreshRetryTask(retryPermission));
+                scheduler.scheduleAtFixedRate(new AddressRefreshRetryTask(retryPermission), 10000, 10000, TimeUnit.MILLISECONDS);
                 logger.warn("Address refresh try task submitted.");
             }
             logger.warn("Address refresh failed because of Metadata Server failure, wait for retry or new address refresh event.");

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleHandler.java
Patch:
@@ -57,7 +57,7 @@ public void doMigrate(String rawRule) {
             try {
                 rule = MigrationRule.parse(rawRule);
                 // FIXME, consumerURL.getHost() might not exactly the ip expected.
-                if (rule.getTargetIps() != null && rule.getTargetIps().contains(consumerURL.getHost())) {
+                if (rule.getTargetIps() == null || (rule.getTargetIps() != null && rule.getTargetIps().contains(consumerURL.getHost()))) {
                     setMigrationRule(rule);
                     step = rule.getStep(consumerURL.getServiceKey());
                     threshold = rule.getThreshold(consumerURL.getServiceKey());

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.concurrent.TimeUnit;
 
 import static org.apache.dubbo.common.constants.CommonConstants.FILE_KEY;
-import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
 import static org.apache.dubbo.registry.Constants.DEFAULT_REGISTRY_RETRY_PERIOD;
 import static org.apache.dubbo.registry.Constants.REGISTRY_RETRY_PERIOD_KEY;
 
@@ -244,7 +243,7 @@ public void register(URL url) {
             // If the startup detection is opened, the Exception is thrown directly.
             boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)
                     && url.getParameter(Constants.CHECK_KEY, true)
-                    && !CONSUMER_PROTOCOL.equals(url.getProtocol());
+                    && !(url.getPort() == 0);
             boolean skipFailback = t instanceof SkipFailbackWrapperException;
             if (check || skipFailback) {
                 if (skipFailback) {
@@ -293,7 +292,7 @@ public void unregister(URL url) {
             // If the startup detection is opened, the Exception is thrown directly.
             boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)
                     && url.getParameter(Constants.CHECK_KEY, true)
-                    && !CONSUMER_PROTOCOL.equals(url.getProtocol());
+                    && !(url.getPort() == 0);
             boolean skipFailback = t instanceof SkipFailbackWrapperException;
             if (check || skipFailback) {
                 if (skipFailback) {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataInfo.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.SortedSet;
+import java.util.TreeMap;
 import java.util.TreeSet;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -97,7 +98,7 @@ public String calAndGetRevision() {
 
         StringBuilder sb = new StringBuilder();
         sb.append(app);
-        for (Map.Entry<String, ServiceInfo> entry : services.entrySet()) {
+        for (Map.Entry<String, ServiceInfo> entry : new TreeMap<>(services).entrySet()) {
             sb.append(entry.getValue().toDescString());
         }
         this.revision = RevisionResolver.calRevision(sb.toString());
@@ -365,7 +366,7 @@ public boolean hasMethodParameter(String method) {
         }
 
         public String toDescString() {
-            return this.getMatchKey() + getMethodSignaturesString() + getParams();
+            return this.getMatchKey() + getMethodSignaturesString() + new TreeMap<>(getParams());
         }
 
         private String getMethodSignaturesString() {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/DefaultServiceInstance.java
Patch:
@@ -184,7 +184,7 @@ public boolean equals(Object o) {
             if (entry.getKey().equals(REVISION_KEY)) {
                 continue;
             }
-            equals = equals && !entry.getValue().equals(that.getMetadata().get(entry.getKey()));
+            equals = equals && entry.getValue().equals(that.getMetadata().get(entry.getKey()));
         }
 
         return equals;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationClusterInvoker.java
Patch:
@@ -29,7 +29,9 @@ public interface MigrationClusterInvoker<T> extends ClusterInvoker<T> {
 
     boolean isServiceDiscovery();
 
-    MigrationStep getCurrentStep();
+    MigrationStep getMigrationStep();
+
+    void setMigrationStep(MigrationStep step);
 
     boolean invokersChanged();
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/ServiceDiscoveryMigrationInvoker.java
Patch:
@@ -40,13 +40,13 @@ public boolean isServiceDiscovery() {
     }
 
     @Override
-    public synchronized void fallbackToInterfaceInvoker() {
+    public void fallbackToInterfaceInvoker() {
         logger.error("Service discovery registry type does not support discovery of interface level addresses, " + getRegistryUrl());
         migrateToServiceDiscoveryInvoker(true);
     }
 
     @Override
-    public synchronized void migrateToServiceDiscoveryInvoker(boolean forceMigrate) {
+    public void migrateToServiceDiscoveryInvoker(boolean forceMigrate) {
         refreshServiceDiscoveryInvoker();
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java
Patch:
@@ -128,7 +128,7 @@ public boolean isDestroyed() {
 
     @Override
     public String toString() {
-        return getInterface() + " -> " + (getUrl() == null ? "" : getUrl().toString());
+        return getInterface() + " -> " + (getUrl() == null ? "" : getUrl().getAddress());
     }
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java
Patch:
@@ -159,7 +159,7 @@ public Configuration getConfiguration() {
 
     public Configuration getDynamicGlobalConfiguration() {
         if (dynamicGlobalConfiguration == null) {
-            if (dynamicConfiguration != null) {
+            if (dynamicConfiguration == null) {
                 throw new IllegalStateException("Init dynamic configuration before use.");
             }
             dynamicGlobalConfiguration = new CompositeConfiguration();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -267,6 +267,7 @@ public void doSubscribe(URL url, NotifyListener listener) {
             if (check) {
                 throw new IllegalStateException("Should has at least one way to know which services this interface belongs to, subscription url: " + url);
             }
+            return;
         }
 
         subscribeURLs(url, listener, serviceNames);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/ServiceDiscoveryMigrationInvoker.java
Patch:
@@ -38,7 +38,7 @@ public boolean isServiceDiscovery() {
 
     @Override
     public synchronized void fallbackToInterfaceInvoker() {
-        destroyServiceDiscoveryInvoker();
+        destroyServiceDiscoveryInvoker(this.getServiceDiscoveryInvoker());
     }
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryDirectory.java
Patch:
@@ -127,6 +127,9 @@ private void refreshInvoker(List<URL> invokerUrls) {
                 logger.warn("destroyUnusedInvokers error. ", e);
             }
         }
+
+        // notify invokers refreshed
+        this.invokersChanged();
     }
 
     /**

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/DefaultMigrationAddressComparator.java
Patch:
@@ -62,7 +62,7 @@ public <T> boolean shouldMigrate(ClusterInvoker<T> serviceDiscoveryInvoker, Clus
             return false;
         }
 
-        if ((float) (newAddressSize / oldAddressSize) >= threshold) {
+        if (((float)newAddressSize / (float)oldAddressSize) >= threshold) {
             return true;
         }
         return false;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/ZKTools.java
Patch:
@@ -71,7 +71,7 @@ public void eventReceived(CuratorFramework client, CuratorEvent event) throws Ex
     public static void testMigrationRule() {
         String serviceStr = "---\n" +
                 "key: demo-consumer\n" +
-                "step: APPLICATION_FIRST\n" +
+                "step: INTERFACE_FIRST\n" +
                 "...";
         try {
             String servicePath = "/dubbo/config/DUBBO_SERVICEDISCOVERY_MIGRATION/demo-consumer.migration";

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java
Patch:
@@ -157,7 +157,7 @@ public Configuration getConfiguration() {
             globalConfiguration.addConfiguration(propertiesConfiguration);
         } else {
             if (!globalConfiguration.isDynamicIncluded() && dynamicConfiguration != null) {
-                globalConfiguration.addConfiguration(dynamicConfiguration);
+                globalConfiguration.addConfigurationFirst(dynamicConfiguration);
                 globalConfiguration.setDynamicIncluded(true);
             }
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/InstanceAddressURL.java
Patch:
@@ -27,6 +27,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_APPLICATION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 
 public class InstanceAddressURL extends URL {
@@ -105,6 +106,8 @@ public String getParameter(String key) {
             return getGroup();
         } else if (INTERFACE_KEY.equals(key)) {
             return getServiceInterface();
+        } else if (REMOTE_APPLICATION_KEY.equals(key)) {
+            return instance.getServiceName();
         }
 
         String protocolServiceKey = getProtocolServiceKey();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataCustomizer.java
Patch:
@@ -51,7 +51,7 @@ public void customize(ServiceInstance serviceInstance) {
         // FIXME, check the same key in different urls has the same value
         MetadataInfo metadataInfo = localMetadataService.getMetadataInfos().values().iterator().next();
         MetadataInfo.ServiceInfo serviceInfo = metadataInfo.getServices().values().iterator().next();
-        Map<String, String> allParams = new HashMap<>(serviceInfo.getParams());
+        Map<String, String> allParams = new HashMap<>(serviceInfo.getUrl().getParameters());
 
         // load instance params users want to load.
         // TODO, duplicate logic with that in ApplicationConfig

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/RemoteMetadataServiceImpl.java
Patch:
@@ -85,7 +85,7 @@ public MetadataInfo getMetadata(ServiceInstance instance) {
         if (metadataReport == null) {
             metadataReport = getMetadataReports().entrySet().iterator().next().getValue();
         }
-        return metadataReport.getAppMetadata(identifier, instance.getMetadata());
+        return metadataReport.getAppMetadata(identifier, instance.getExtendParams());
     }
 
     public void publishServiceDefinition(URL url) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/InMemoryWritableMetadataService.java
Patch:
@@ -125,7 +125,7 @@ public SortedSet<String> getExportedURLs(String serviceInterface, String group,
 
     @Override
     public boolean exportURL(URL url) {
-        String registryCluster = RegistryClusterIdentifier.getExtension().providerKey(url);
+        String registryCluster = RegistryClusterIdentifier.getExtension(url).providerKey(url);
         String[] clusters = registryCluster.split(",");
         for (String cluster : clusters) {
             MetadataInfo metadataInfo = metadataInfos.computeIfAbsent(cluster, k -> {
@@ -139,7 +139,7 @@ public boolean exportURL(URL url) {
 
     @Override
     public boolean unexportURL(URL url) {
-        String registryCluster = RegistryClusterIdentifier.getExtension().providerKey(url);
+        String registryCluster = RegistryClusterIdentifier.getExtension(url).providerKey(url);
         String[] clusters = registryCluster.split(",");
         for (String cluster : clusters) {
             MetadataInfo metadataInfo = metadataInfos.get(cluster);

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/event/listener/PublishingServiceDefinitionListenerTest.java
Patch:
@@ -59,7 +59,7 @@ public void init() {
         ApplicationConfig applicationConfig = new ApplicationConfig("dubbo-demo-provider");
         applicationConfig.setMetadataType(metadataType);
         configManager.setApplication(applicationConfig);
-        this.writableMetadataService = WritableMetadataService.getExtension(metadataType);
+        this.writableMetadataService = WritableMetadataService.getDefaultExtension();
     }
 
     @AfterEach

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataInfo.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DOT_SEPARATOR;
-import static org.apache.dubbo.common.constants.CommonConstants.GROUP_CHAR_SEPERATOR;
+import static org.apache.dubbo.common.constants.CommonConstants.GROUP_CHAR_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
@@ -236,7 +236,7 @@ public String getMatchKey() {
         private String buildMatchKey() {
             matchKey = getServiceKey();
             if (StringUtils.isNotEmpty(protocol)) {
-                matchKey = getServiceKey() + GROUP_CHAR_SEPERATOR + protocol;
+                matchKey = getServiceKey() + GROUP_CHAR_SEPARATOR + protocol;
             }
             return matchKey;
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -53,7 +53,7 @@
 import static java.util.stream.Collectors.toSet;
 import static java.util.stream.Stream.of;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO;
-import static org.apache.dubbo.common.constants.CommonConstants.GROUP_CHAR_SEPERATOR;
+import static org.apache.dubbo.common.constants.CommonConstants.GROUP_CHAR_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MAPPING_KEY;
@@ -318,7 +318,7 @@ protected void subscribeURLs(URL url, NotifyListener listener, Set<String> servi
             List<ServiceInstance> serviceInstances = serviceDiscovery.getInstances(serviceName);
             serviceListener.onEvent(new ServiceInstancesChangedEvent(serviceName, serviceInstances));
         });
-        listener.notify(serviceListener.getUrls(url.getServiceKey() + GROUP_CHAR_SEPERATOR + url.getParameter(PROTOCOL_KEY, DUBBO)));
+        listener.notify(serviceListener.getUrls(url.getServiceKey() + GROUP_CHAR_SEPARATOR + url.getParameter(PROTOCOL_KEY, DUBBO)));
 
         serviceListener.addListener(url.getProtocolServiceKey(), listener);
         registerServiceInstancesChangedListener(url, serviceListener);

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolTest.java
Patch:
@@ -177,7 +177,7 @@ public void testInvoke() {
 
         Exporter<DemoService> exporter = protocol.export(proxy.getInvoker(server, DemoService.class, exportUrl));
 
-        RpcInvocation rpcInvocation = new RpcInvocation("hello", DemoService.class.getName(), new Class[]{Integer.class, Integer.class}, new Integer[]{2, 3});
+        RpcInvocation rpcInvocation = new RpcInvocation("hello", DemoService.class.getName(), "", new Class[]{Integer.class, Integer.class}, new Integer[]{2, 3});
 
         Result result = exporter.getInvoker().invoke(rpcInvocation);
         assertThat(result.getValue(), CoreMatchers.<Object>is(5));

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataCustomizer.java
Patch:
@@ -51,7 +51,7 @@ public void customize(ServiceInstance serviceInstance) {
         // FIXME, check the same key in different urls has the same value
         MetadataInfo metadataInfo = localMetadataService.getMetadataInfos().values().iterator().next();
         MetadataInfo.ServiceInfo serviceInfo = metadataInfo.getServices().values().iterator().next();
-        Map<String, String> allParams = new HashMap<>(serviceInfo.getParams());
+        Map<String, String> allParams = new HashMap<>(serviceInfo.getUrl().getParameters());
 
         // load instance params users want to load.
         // TODO, duplicate logic with that in ApplicationConfig

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/RemoteMetadataServiceImpl.java
Patch:
@@ -85,7 +85,7 @@ public MetadataInfo getMetadata(ServiceInstance instance) {
         if (metadataReport == null) {
             metadataReport = getMetadataReports().entrySet().iterator().next().getValue();
         }
-        return metadataReport.getAppMetadata(identifier, instance.getMetadata());
+        return metadataReport.getAppMetadata(identifier, instance.getExtendParams());
     }
 
     public void publishServiceDefinition(URL url) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/InMemoryWritableMetadataService.java
Patch:
@@ -125,7 +125,7 @@ public SortedSet<String> getExportedURLs(String serviceInterface, String group,
 
     @Override
     public boolean exportURL(URL url) {
-        String registryCluster = RegistryClusterIdentifier.getExtension().providerKey(url);
+        String registryCluster = RegistryClusterIdentifier.getExtension(url).providerKey(url);
         String[] clusters = registryCluster.split(",");
         for (String cluster : clusters) {
             MetadataInfo metadataInfo = metadataInfos.computeIfAbsent(cluster, k -> {
@@ -139,7 +139,7 @@ public boolean exportURL(URL url) {
 
     @Override
     public boolean unexportURL(URL url) {
-        String registryCluster = RegistryClusterIdentifier.getExtension().providerKey(url);
+        String registryCluster = RegistryClusterIdentifier.getExtension(url).providerKey(url);
         String[] clusters = registryCluster.split(",");
         for (String cluster : clusters) {
             MetadataInfo metadataInfo = metadataInfos.get(cluster);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -55,6 +55,7 @@
 import org.apache.dubbo.config.bootstrap.builders.RegistryBuilder;
 import org.apache.dubbo.config.bootstrap.builders.ServiceBuilder;
 import org.apache.dubbo.config.context.ConfigManager;
+import org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter;
 import org.apache.dubbo.config.utils.ConfigValidationUtils;
 import org.apache.dubbo.config.utils.ReferenceConfigCache;
 import org.apache.dubbo.event.EventDispatcher;
@@ -80,7 +81,6 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
-import java.util.Optional;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.concurrent.CompletableFuture;
@@ -93,7 +93,6 @@
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
-import java.util.stream.Collectors;
 
 import static java.lang.String.format;
 import static java.util.Arrays.asList;
@@ -868,7 +867,7 @@ private void loadRemoteConfigs() {
      * Initialize {@link MetadataService} from {@link WritableMetadataService}'s extension
      */
     private void initMetadataService() {
-        startMetadataReport();
+        startMetadataCenter();
         this.metadataService = getDefaultExtension();
         this.metadataServiceExporter = new ConfigurableMetadataServiceExporter(metadataService);
     }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/event/listener/PublishingServiceDefinitionListenerTest.java
Patch:
@@ -59,7 +59,7 @@ public void init() {
         ApplicationConfig applicationConfig = new ApplicationConfig("dubbo-demo-provider");
         applicationConfig.setMetadataType(metadataType);
         configManager.setApplication(applicationConfig);
-        this.writableMetadataService = WritableMetadataService.getExtension(metadataType);
+        this.writableMetadataService = WritableMetadataService.getDefaultExtension();
     }
 
     @AfterEach

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataInfo.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DOT_SEPARATOR;
-import static org.apache.dubbo.common.constants.CommonConstants.GROUP_CHAR_SEPERATOR;
+import static org.apache.dubbo.common.constants.CommonConstants.GROUP_CHAR_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
@@ -236,7 +236,7 @@ public String getMatchKey() {
         private String buildMatchKey() {
             matchKey = getServiceKey();
             if (StringUtils.isNotEmpty(protocol)) {
-                matchKey = getServiceKey() + GROUP_CHAR_SEPERATOR + protocol;
+                matchKey = getServiceKey() + GROUP_CHAR_SEPARATOR + protocol;
             }
             return matchKey;
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -53,7 +53,7 @@
 import static java.util.stream.Collectors.toSet;
 import static java.util.stream.Stream.of;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO;
-import static org.apache.dubbo.common.constants.CommonConstants.GROUP_CHAR_SEPERATOR;
+import static org.apache.dubbo.common.constants.CommonConstants.GROUP_CHAR_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MAPPING_KEY;
@@ -318,7 +318,7 @@ protected void subscribeURLs(URL url, NotifyListener listener, Set<String> servi
             List<ServiceInstance> serviceInstances = serviceDiscovery.getInstances(serviceName);
             serviceListener.onEvent(new ServiceInstancesChangedEvent(serviceName, serviceInstances));
         });
-        listener.notify(serviceListener.getUrls(url.getServiceKey() + GROUP_CHAR_SEPERATOR + url.getParameter(PROTOCOL_KEY, DUBBO)));
+        listener.notify(serviceListener.getUrls(url.getServiceKey() + GROUP_CHAR_SEPARATOR + url.getParameter(PROTOCOL_KEY, DUBBO)));
 
         serviceListener.addListener(url.getProtocolServiceKey(), listener);
         registerServiceInstancesChangedListener(url, serviceListener);

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolTest.java
Patch:
@@ -177,7 +177,7 @@ public void testInvoke() {
 
         Exporter<DemoService> exporter = protocol.export(proxy.getInvoker(server, DemoService.class, exportUrl));
 
-        RpcInvocation rpcInvocation = new RpcInvocation("hello", DemoService.class.getName(), new Class[]{Integer.class, Integer.class}, new Integer[]{2, 3});
+        RpcInvocation rpcInvocation = new RpcInvocation("hello", DemoService.class.getName(), "", new Class[]{Integer.class, Integer.class}, new Integer[]{2, 3});
 
         Result result = exporter.getInvoker().invoke(rpcInvocation);
         assertThat(result.getValue(), CoreMatchers.<Object>is(5));

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/ZookeeperDubboServiceProviderBootstrap.java
Patch:
@@ -31,7 +31,7 @@ public class ZookeeperDubboServiceProviderBootstrap {
     public static void main(String[] args) {
         DubboBootstrap.getInstance()
                 .application("zookeeper-dubbo-provider", app -> app.metadata(COMPOSITE_METADATA_STORAGE_TYPE))
-                .registry(builder -> builder.address("zookeeper://127.0.0.1:2181")
+                .registry(builder -> builder.address("127.0.0.1:2181").protocol("zookeeper")
                         .parameter(REGISTRY_TYPE_KEY, SERVICE_REGISTRY_TYPE))
                 .protocol("dubbo", builder -> builder.port(-1).name("dubbo"))
                 .protocol("rest", builder -> builder.port(8081).name("rest"))

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/RegistryBuilder.java
Patch:
@@ -344,7 +344,6 @@ public RegistryConfig build() {
         RegistryConfig registry = new RegistryConfig();
         super.build(registry);
 
-        registry.setAddress(address);
         registry.setCheck(check);
         registry.setClient(client);
         registry.setCluster(cluster);
@@ -372,6 +371,7 @@ public RegistryConfig build() {
         registry.setAccepts(accepts);
         registry.setPreferred(preferred);
         registry.setWeight(weight);
+        registry.setAddress(address);
 
         return registry;
     }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/ZookeeperDubboServiceProviderBootstrap.java
Patch:
@@ -32,9 +32,7 @@ public static void main(String[] args) {
         DubboBootstrap.getInstance()
                 .application("zookeeper-dubbo-provider", app -> app.metadata(COMPOSITE_METADATA_STORAGE_TYPE))
                 .registry(builder -> builder.address("zookeeper://127.0.0.1:2181")
-                        .parameter(REGISTRY_TYPE_KEY, SERVICE_REGISTRY_TYPE)
-                        .useAsConfigCenter(true)
-                        .useAsMetadataCenter(true))
+                        .parameter(REGISTRY_TYPE_KEY, SERVICE_REGISTRY_TYPE))
                 .protocol("dubbo", builder -> builder.port(-1).name("dubbo"))
                 .protocol("rest", builder -> builder.port(8081).name("rest"))
                 .service("echo", builder -> builder.interfaceClass(EchoService.class).ref(new EchoServiceImpl()).protocolIds("dubbo"))

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/identifier/BaseServiceMetadataIdentifier.java
Patch:
@@ -79,7 +79,7 @@ private String getFilePathKey(String pathTag, String... params) {
                 + joinParams(PATH_SEPARATOR, params);
     }
 
-    private String toServicePath() {
+    public String toServicePath() {
         if (ANY_VALUE.equals(serviceInterface)) {
             return "";
         }

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/Hessian2SerializerFactory.java
Patch:
@@ -28,4 +28,4 @@ public ClassLoader getClassLoader() {
         return Thread.currentThread().getContextClassLoader();
     }
 
-}
+}
\ No newline at end of file

File: dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/tomcat/TomcatHttpServer.java
Patch:
@@ -51,14 +51,13 @@ public TomcatHttpServer(URL url, final HttpHandler handler) {
         String baseDir = new File(System.getProperty("java.io.tmpdir")).getAbsolutePath();
         tomcat = new Tomcat();
 
-        Connector connector = new Connector("org.apache.coyote.http11.Http11NioProtocol");
+        Connector connector = tomcat.getConnector();
         connector.setPort(url.getPort());
         connector.setProperty("maxThreads", String.valueOf(url.getParameter(THREADS_KEY, DEFAULT_THREADS)));
         connector.setProperty("maxConnections", String.valueOf(url.getParameter(ACCEPTS_KEY, -1)));
         connector.setProperty("URIEncoding", "UTF-8");
         connector.setProperty("connectionTimeout", "60000");
         connector.setProperty("maxKeepAliveRequests", "-1");
-        tomcat.setConnector(connector);
 
         tomcat.setBaseDir(baseDir);
         tomcat.setPort(url.getPort());

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Configurator.java
Patch:
@@ -27,9 +27,9 @@
 import java.util.Map;
 import java.util.Optional;
 
-import static org.apache.dubbo.rpc.cluster.Constants.PRIORITY_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.EMPTY_PROTOCOL;
+import static org.apache.dubbo.rpc.cluster.Constants.PRIORITY_KEY;
 
 /**
  * Configurator. (SPI, Prototype, ThreadSafe)

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/AbstractDynamicConfigurationFactory.java
Patch:
@@ -35,7 +35,7 @@ public abstract class AbstractDynamicConfigurationFactory implements DynamicConf
 
     @Override
     public final DynamicConfiguration getDynamicConfiguration(URL url) {
-        String key = url == null ? DEFAULT_KEY : url.getAddress();
+        String key = url == null ? DEFAULT_KEY : url.toServiceString();
         return dynamicConfigurations.computeIfAbsent(key, k -> createDynamicConfiguration(url));
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/RegistryConstants.java
Patch:
@@ -76,6 +76,8 @@ public interface RegistryConstants {
 
     /**
      * The parameter key of the subscribed service names for Service-Oriented Registry
+     * <p>
+     * If there is a multiple-values, the  "comma" is the separator.
      *
      * @since 2.7.5
      */

File: dubbo-common/src/main/java/org/apache/dubbo/event/EventListener.java
Patch:
@@ -56,7 +56,7 @@ public interface EventListener<E extends Event> extends java.util.EventListener,
      * The comparison rule , refer to {@link #compareTo}.
      */
     default int getPriority() {
-        return MIN_PRIORITY;
+        return NORMAL_PRIORITY;
     }
 
     /**

File: dubbo-common/src/test/java/org/apache/dubbo/common/convert/multiple/StringToArrayConverterTest.java
Patch:
@@ -14,9 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.convert.multiple;
-
-import org.apache.dubbo.common.convert.multiple.StringToArrayConverter;
+package org.apache.dubbo.common.convert.multiple;
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dubbo-common/src/test/java/org/apache/dubbo/common/convert/multiple/StringToBlockingDequeConverterTest.java
Patch:
@@ -14,10 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.convert.multiple;
+package org.apache.dubbo.common.convert.multiple;
 
-import org.apache.dubbo.common.convert.multiple.MultiValueConverter;
-import org.apache.dubbo.common.convert.multiple.StringToBlockingDequeConverter;
 import org.apache.dubbo.common.utils.CollectionUtils;
 
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-common/src/test/java/org/apache/dubbo/common/convert/multiple/StringToBlockingQueueConverterTest.java
Patch:
@@ -14,10 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.convert.multiple;
+package org.apache.dubbo.common.convert.multiple;
 
-import org.apache.dubbo.common.convert.multiple.MultiValueConverter;
-import org.apache.dubbo.common.convert.multiple.StringToBlockingQueueConverter;
 import org.apache.dubbo.common.utils.CollectionUtils;
 
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-common/src/test/java/org/apache/dubbo/common/convert/multiple/StringToDequeConverterTest.java
Patch:
@@ -14,10 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.convert.multiple;
+package org.apache.dubbo.common.convert.multiple;
 
-import org.apache.dubbo.common.convert.multiple.MultiValueConverter;
-import org.apache.dubbo.common.convert.multiple.StringToDequeConverter;
 import org.apache.dubbo.common.utils.CollectionUtils;
 
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-common/src/test/java/org/apache/dubbo/common/convert/multiple/StringToListConverterTest.java
Patch:
@@ -14,10 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.convert.multiple;
+package org.apache.dubbo.common.convert.multiple;
 
-import org.apache.dubbo.common.convert.multiple.MultiValueConverter;
-import org.apache.dubbo.common.convert.multiple.StringToListConverter;
 import org.apache.dubbo.common.utils.CollectionUtils;
 
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-common/src/test/java/org/apache/dubbo/common/convert/multiple/StringToQueueConverterTest.java
Patch:
@@ -14,9 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.convert.multiple;
+package org.apache.dubbo.common.convert.multiple;
 
-import org.apache.dubbo.common.convert.multiple.StringToQueueConverter;
 import org.apache.dubbo.common.utils.CollectionUtils;
 
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-common/src/test/java/org/apache/dubbo/common/convert/multiple/StringToSetConverterTest.java
Patch:
@@ -14,9 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.convert.multiple;
+package org.apache.dubbo.common.convert.multiple;
 
-import org.apache.dubbo.common.convert.multiple.StringToSetConverter;
 import org.apache.dubbo.common.utils.CollectionUtils;
 
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/PojoUtilsTest.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.common.utils;
 
-import com.alibaba.fastjson.JSONObject;
 import org.apache.dubbo.common.model.Person;
 import org.apache.dubbo.common.model.SerializablePerson;
 import org.apache.dubbo.common.model.User;
@@ -26,6 +25,7 @@
 import org.apache.dubbo.common.model.person.PersonStatus;
 import org.apache.dubbo.common.model.person.Phone;
 
+import com.alibaba.fastjson.JSONObject;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-common/src/test/java/org/apache/dubbo/event/EchoEventListener2.java
Patch:
@@ -41,7 +41,7 @@ public void onEvent(Event event) {
 
     @Override
     public int getPriority() {
-        return 0;
+        return -1;
     }
 
     public int getEventOccurs() {

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ConfigTest.java
Patch:
@@ -35,14 +35,14 @@ public class ConfigTest {
 
     @AfterEach
     public void tearDown() {
-        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
     }
 
     @BeforeEach
     public void setup() {
         // In IDE env, make sure adding the following argument to VM options
         System.setProperty("java.net.preferIPv4Stack", "true");
-        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
     }
 
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
Patch:
@@ -38,12 +38,12 @@ public class ReferenceConfigTest {
 
     @BeforeEach
     public void setUp() {
-        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
     }
 
     @AfterEach
     public void tearDown() {
-        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
     }
 
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.config.api.DemoService;
 import org.apache.dubbo.config.provider.impl.DemoServiceImpl;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
@@ -33,12 +34,12 @@ public class ReferenceConfigTest {
 
     @BeforeEach
     public void setUp() {
-//        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
     }
 
     @AfterEach
     public void tearDown() {
-//        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
     }
 
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/RegistryBuilderTest.java
Patch:
@@ -220,7 +220,7 @@ void build() {
                 .transporter("transporter").server("server").client("client").cluster("cluster").group("group")
                 .version("version").timeout(1000).session(2000).file("file").wait(Integer.valueOf(10)).isCheck(true)
                 .isDynamic(false).register(true).subscribe(false).isDefault(true).simplified(false).extraKeys("A")
-                .appendParameter("default.num", "one").id("id").prefix("prefix");
+                .parameter("default.num", "one").id("id").prefix("prefix");
 
         RegistryConfig config = builder.build();
         RegistryConfig config2 = builder.build();

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/ExporterSideConfigUrlTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeAll;
@@ -42,13 +43,13 @@ public static void start() {
 
     @BeforeEach
     public void setUp() {
+        ApplicationModel.reset();
         initServConf();
-//        ApplicationModel.getConfigManager().clear();
     }
 
     @AfterEach()
     public void teardown() {
-//        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
     }
 
     @Test

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/DubboComponentScanRegistrarTest.java
Patch:
@@ -41,12 +41,12 @@ public class DubboComponentScanRegistrarTest {
 
     @BeforeEach
     public void setUp() {
-        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
     }
 
     @AfterEach
     public void tearDown() {
-        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
     }
 
     @Test

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboTest.java
Patch:
@@ -52,13 +52,13 @@ public class EnableDubboTest {
 
     @BeforeEach
     public void setUp() {
-        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
         context = new AnnotationConfigApplicationContext();
     }
 
     @AfterEach
     public void tearDown() {
-        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
         context.close();
     }
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandlerTest.java
Patch:
@@ -49,12 +49,12 @@
 public class DubboNamespaceHandlerTest {
     @BeforeEach
     public void setUp() {
-        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
     }
 
     @AfterEach
     public void tearDown() {
-        ApplicationModel.getConfigManager().clear();
+        ApplicationModel.reset();
     }
 
     @Configuration

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/test/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationTest.java
Patch:
@@ -58,7 +58,7 @@ public class ZookeeperDynamicConfigurationTest {
     public static void setUp() throws Exception {
         zkServer = new TestingServer(zkServerPort, true);
 
-        client = CuratorFrameworkFactory.newClient("localhost:" + zkServerPort, 60 * 1000, 60 * 1000,
+        client = CuratorFrameworkFactory.newClient("127.0.0.1:" + zkServerPort, 60 * 1000, 60 * 1000,
                 new ExponentialBackoffRetry(1000, 3));
         client.start();
 
@@ -73,7 +73,7 @@ public static void setUp() throws Exception {
         }
 
 
-        configUrl = URL.valueOf("zookeeper://localhost:" + zkServerPort);
+        configUrl = URL.valueOf("zookeeper://127.0.0.1:" + zkServerPort);
 
         configuration = ExtensionLoader.getExtensionLoader(DynamicConfigurationFactory.class).getExtension(configUrl.getProtocol()).getDynamicConfiguration(configUrl);
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/event/listener/CustomizableServiceInstanceListener.java
Patch:
@@ -26,7 +26,9 @@
  * Customize the {@link ServiceInstance} before registering to Registry.
  *
  * @since 2.7.5
+ * @deprecated 2.7.8 Current class will be removed since 3.0.0
  */
+@Deprecated
 public class CustomizableServiceInstanceListener implements EventListener<ServiceInstancePreRegisteredEvent> {
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ExportedServicesRevisionMetadataCustomizer.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.client.metadata;
 
+import org.apache.dubbo.metadata.URLRevisionResolver;
 import org.apache.dubbo.metadata.WritableMetadataService;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstanceMetadataCustomizer;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtils.java
Patch:
@@ -207,10 +207,10 @@ public static boolean isDubboServiceInstance(ServiceInstance serviceInstance) {
                 || metadata.containsKey(METADATA_SERVICE_URLS_PROPERTY_NAME);
     }
 
-    public static void setEndpoints(ServiceInstance serviceInstance, Map<String, Integer> protocolPortss) {
+    public static void setEndpoints(ServiceInstance serviceInstance, Map<String, Integer> protocolPorts) {
         Map<String, String> metadata = serviceInstance.getMetadata();
         List<Endpoint> endpoints = new ArrayList<>();
-        protocolPortss.forEach((k, v) -> {
+        protocolPorts.forEach((k, v) -> {
             Endpoint endpoint = new Endpoint(v, k);
             endpoints.add(endpoint);
         });

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/StandardMetadataServiceURLBuilder.java
Patch:
@@ -37,6 +37,7 @@
  * @since 2.7.5
  */
 public class StandardMetadataServiceURLBuilder implements MetadataServiceURLBuilder {
+    
     public static final String NAME = "standard";
 
     /**

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/SubscribedServicesRevisionMetadataCustomizer.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.client.metadata;
 
+import org.apache.dubbo.metadata.URLRevisionResolver;
 import org.apache.dubbo.metadata.WritableMetadataService;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstanceMetadataCustomizer;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/proxy/MetadataServiceProxyFactory.java
Patch:
@@ -31,7 +31,6 @@
  * @since 2.7.5
  */
 @SPI(DEFAULT_METADATA_STORAGE_TYPE)
-
 public interface MetadataServiceProxyFactory {
 
     /**

File: dubbo-registry/dubbo-registry-eureka/src/main/java/org/apache/dubbo/registry/eureka/EurekaServiceDiscovery.java
Patch:
@@ -46,9 +46,8 @@
 import java.util.Set;
 
 import static java.util.Collections.emptyList;
-import static org.apache.dubbo.common.constants.RegistryConstants.SUBSCRIBED_SERVICE_NAMES_KEY;
 import static org.apache.dubbo.event.EventDispatcher.getDefaultExtension;
-import static org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.parseServices;
+import static org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.getSubscribedServices;
 
 /**
  * Eureka {@link ServiceDiscovery} implementation based on Eureka API
@@ -100,7 +99,7 @@ private Properties buildEurekaConfigProperties(URL registryURL) {
      * @param registryURL the {@link URL url} to connect Eureka
      */
     private void initSubscribedServices(URL registryURL) {
-        this.subscribedServices = parseServices(registryURL.getParameter(SUBSCRIBED_SERVICE_NAMES_KEY));
+        this.subscribedServices = getSubscribedServices(registryURL);
     }
 
     private boolean filterEurekaProperty(Map.Entry<String, String> propertyEntry) {

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.remoting.transport.netty4;
 
-import io.netty.channel.socket.SocketChannel;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
@@ -37,6 +36,7 @@
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
+import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.timeout.IdleStateHandler;
 
 import java.net.InetSocketAddress;

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/RpcContextTest.java
Patch:
@@ -25,8 +25,6 @@
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ExecutionException;
 
 public class RpcContextTest {
 

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/RegistryDirectoryTest.java
Patch:
@@ -768,7 +768,7 @@ public void testNofityOverrideUrls_Clean1() {
         List<Invoker<?>> invokers = registryDirectory.list(invocation);
         Invoker<?> aInvoker = invokers.get(0);
         //Need to be restored to the original providerUrl
-        Assertions.assertEquals("1", aInvoker.getUrl().getParameter("timeout"));
+        Assertions.assertEquals("3", aInvoker.getUrl().getParameter("timeout"));
     }
 
     /**

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -197,6 +197,7 @@ public interface CommonConstants {
      */
     String $INVOKE = "$invoke";
     String $INVOKE_ASYNC = "$invokeAsync";
+    String GENERIC_PARAMETER_DESC = "Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/Object;";
 
     /**
      * package version in the manifest

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Constants.java
Patch:
@@ -27,6 +27,7 @@ public interface Constants {
     String DEPRECATED_KEY = "deprecated";
 
     String $ECHO = "$echo";
+    String $ECHO_PARAMETER_DESC = "Ljava/lang/Object;";
 
     String RETURN_PREFIX = "return ";
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericImplFilter.java
Patch:
@@ -43,6 +43,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.$INVOKE;
 import static org.apache.dubbo.common.constants.CommonConstants.$INVOKE_ASYNC;
+import static org.apache.dubbo.common.constants.CommonConstants.GENERIC_PARAMETER_DESC;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
 
 /**
@@ -55,8 +56,6 @@ public class GenericImplFilter implements Filter, Filter.Listener {
 
     private static final Class<?>[] GENERIC_PARAMETER_TYPES = new Class<?>[]{String.class, String[].class, Object[].class};
 
-    private static final String GENERIC_PARAMETER_DESC = "Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/Object;";
-
     private static final String GENERIC_IMPL_MARKER = "GENERIC_IMPL";
 
     @Override

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java
Patch:
@@ -130,7 +130,7 @@ public Object decode(Channel channel, InputStream input) throws IOException {
                     }
                 }
                 if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {
-                    if (!RpcUtils.isGenericCall(path, getMethodName()) && !RpcUtils.isEcho(path, getMethodName())) {
+                    if (!RpcUtils.isGenericCall(desc, getMethodName()) && !RpcUtils.isEcho(desc, getMethodName())) {
                         throw new IllegalArgumentException("Service not found:" + path + ", " + getMethodName());
                     }
                     pts = ReflectUtils.desc2classArray(desc);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/registry/ZoneAwareClusterInvoker.java
Patch:
@@ -40,7 +40,7 @@
 
 /**
  * When there're more than one registry for subscription.
- *
+ * <p>
  * This extension provides a strategy to decide how to distribute traffics among them:
  * 1. registry marked as 'preferred=true' has the highest priority.
  * 2. check the zone the current request belongs, pick the registry that has the same zone first.

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/store/InMemoryWritableMetadataService.java
Patch:
@@ -143,10 +143,10 @@ public void publishServiceDefinition(URL providerUrl) {
                 serviceDefinitions.put(providerUrl.getServiceKey(), data);
                 return;
             }
-            logger.info("publishProvider interfaceName is empty . providerUrl: " + providerUrl.toFullString());
-        } catch (ClassNotFoundException e) {
+            logger.error("publishProvider interfaceName is empty . providerUrl: " + providerUrl.toFullString());
+        } catch (Throwable t) {
             //ignore error
-            logger.error("publishProvider getServiceDescriptor error. providerUrl: " + providerUrl.toFullString(), e);
+            logger.error("publishProvider getServiceDescriptor error. providerUrl: " + providerUrl.toFullString(), t.getCause());
         }
     }
 

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/store/RemoteWritableMetadataService.java
Patch:
@@ -100,9 +100,9 @@ private void publishProvider(URL providerUrl) throws RpcException {
                 return;
             }
             logger.error("publishProvider interfaceName is empty . providerUrl: " + providerUrl.toFullString());
-        } catch (ClassNotFoundException e) {
+        } catch (Throwable t) {
             //ignore error
-            logger.error("publishProvider getServiceDescriptor error. providerUrl: " + providerUrl.toFullString(), e);
+            logger.error("publishProvider getServiceDescriptor error. providerUrl: " + providerUrl.toFullString(), t.getCause());
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -112,21 +112,21 @@ public interface CommonConstants {
 
     // used by invocation attachments to transfer timeout from Consumer to Provider.
     // works as a replacement of TIMEOUT_KEY on wire, which seems to be totally useless in previous releases).
-    String TIMEOUT_ATTACHENT_KEY = "_TO";
+    String TIMEOUT_ATTACHMENT_KEY = "_TO";
 
     String TIME_COUNTDOWN_KEY = "timeout-countdown";
 
     String ENABLE_TIMEOUT_COUNTDOWN_KEY = "enable-timeout-countdown";
 
     String REMOVE_VALUE_PREFIX = "-";
 
-    String PROPERTIES_CHAR_SEPERATOR = "-";
+    String PROPERTIES_CHAR_SEPARATOR = "-";
 
     String UNDERLINE_SEPARATOR = "_";
 
     String SEPARATOR_REGEX = "_|-";
 
-    String GROUP_CHAR_SEPERATOR = ":";
+    String GROUP_CHAR_SEPARATOR = ":";
 
     String HIDE_KEY_PREFIX = ".";
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Map;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO;
-import static org.apache.dubbo.common.constants.CommonConstants.PROPERTIES_CHAR_SEPERATOR;
+import static org.apache.dubbo.common.constants.CommonConstants.PROPERTIES_CHAR_SEPARATOR;
 
 /**
  * MetadataReportConfig
@@ -38,7 +38,7 @@ public class MetadataReportConfig extends AbstractConfig {
      * the value is : metadata-report
      */
     private static final String PREFIX_TAG = StringUtils.camelToSplitName(
-            MetadataReportConfig.class.getSimpleName().substring(0, MetadataReportConfig.class.getSimpleName().length() - 6), PROPERTIES_CHAR_SEPERATOR);
+            MetadataReportConfig.class.getSimpleName().substring(0, MetadataReportConfig.class.getSimpleName().length() - 6), PROPERTIES_CHAR_SEPARATOR);
 
     // Register center address
     private String address;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -40,7 +40,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER;
 import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_APPLICATION_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_ATTACHENT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_ATTACHMENT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIME_COUNTDOWN_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
@@ -71,7 +71,7 @@ public class ContextFilter implements Filter, Filter.Listener {
         UNLOADING_KEYS.add(DUBBO_VERSION_KEY);
         UNLOADING_KEYS.add(TOKEN_KEY);
         UNLOADING_KEYS.add(TIMEOUT_KEY);
-        UNLOADING_KEYS.add(TIMEOUT_ATTACHENT_KEY);
+        UNLOADING_KEYS.add(TIMEOUT_ATTACHMENT_KEY);
 
         // Remove async property to avoid being passed to the following invoke chain.
         UNLOADING_KEYS.add(ASYNC_KEY);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java
Patch:
@@ -34,7 +34,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.$INVOKE;
 import static org.apache.dubbo.common.constants.CommonConstants.$INVOKE_ASYNC;
-import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_ATTACHENT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_ATTACHMENT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.rpc.Constants.$ECHO;
 import static org.apache.dubbo.rpc.Constants.ASYNC_KEY;
@@ -217,7 +217,7 @@ private static Method getMethodByService(Invocation invocation, String service)
 
     public static long getTimeout(Invocation invocation, long defaultTimeout) {
         long timeout = defaultTimeout;
-        Object genericTimeout = invocation.getObjectAttachment(TIMEOUT_ATTACHENT_KEY);
+        Object genericTimeout = invocation.getObjectAttachment(TIMEOUT_ATTACHMENT_KEY);
         if (genericTimeout != null) {
             timeout = convertToNumber(genericTimeout, defaultTimeout);
         }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -47,7 +47,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_ATTACHENT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_ATTACHMENT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIME_COUNTDOWN_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
@@ -168,12 +168,12 @@ private int calculateTimeout(Invocation invocation, String methodName) {
         if (countdown == null) {
             timeout = (int) RpcUtils.getTimeout(getUrl(), methodName, RpcContext.getContext(), DEFAULT_TIMEOUT);
             if (getUrl().getParameter(ENABLE_TIMEOUT_COUNTDOWN_KEY, false)) {
-                invocation.setObjectAttachment(TIMEOUT_ATTACHENT_KEY, timeout); // pass timeout to remote server
+                invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout); // pass timeout to remote server
             }
         } else {
             TimeoutCountDown timeoutCountDown = (TimeoutCountDown) countdown;
             timeout = (int) timeoutCountDown.timeRemaining(TimeUnit.MILLISECONDS);
-            invocation.setObjectAttachment(TIMEOUT_ATTACHENT_KEY, timeout);// pass timeout to remote server
+            invocation.setObjectAttachment(TIMEOUT_ATTACHMENT_KEY, timeout);// pass timeout to remote server
         }
         return timeout;
     }

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/service/DemoService.java
Patch:
@@ -66,4 +66,6 @@ public interface DemoService {
     String getPerson(Man man);
 
     String getRemoteApplicationName();
+
+    Map<Integer, Object> getMap(Map<Integer, Object> map);
 }
\ No newline at end of file

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -60,8 +60,7 @@ public AbstractDirectory(URL url, RouterChain<T> routerChain) {
         }
 
         this.url = url.removeParameter(REFER_KEY).removeParameter(MONITOR_KEY);
-        this.consumerUrl = url.addParameters(StringUtils.parseQueryString(url.getParameterAndDecoded(REFER_KEY)))
-                .removeParameter(MONITOR_KEY);
+        this.consumerUrl = this.url.addParameters(StringUtils.parseQueryString(url.getParameterAndDecoded(REFER_KEY)));
 
         setRouterChain(routerChain);
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java
Patch:
@@ -36,7 +36,7 @@
 public class MockInvokersSelector extends AbstractRouter {
 
     public static final String NAME = "MOCK_ROUTER";
-    private static final int MOCK_INVOKERS_DEFAULT_PRIORITY = Integer.MIN_VALUE;
+    private static final int MOCK_INVOKERS_DEFAULT_PRIORITY = -100;
 
     public MockInvokersSelector() {
         this.priority = MOCK_INVOKERS_DEFAULT_PRIORITY;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
+import org.apache.dubbo.rpc.cluster.ClusterInvoker;
 import org.apache.dubbo.rpc.cluster.Directory;
 import org.apache.dubbo.rpc.cluster.LoadBalance;
 import org.apache.dubbo.rpc.support.RpcUtils;
@@ -49,7 +50,7 @@
 /**
  * AbstractClusterInvoker
  */
-public abstract class AbstractClusterInvoker<T> implements Invoker<T> {
+public abstract class AbstractClusterInvoker<T> implements ClusterInvoker<T> {
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractClusterInvoker.class);
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -227,7 +227,7 @@ public void testSelect_multiInvokers() throws Exception {
     public void testCloseAvailablecheck() {
         LoadBalance lb = mock(LoadBalance.class);
         Map<String, String> queryMap = StringUtils.parseQueryString(url.getParameterAndDecoded(REFER_KEY));
-        URL tmpUrl = url.addParameters(queryMap).removeParameter(MONITOR_KEY);
+        URL tmpUrl = url.addParameters(queryMap).removeParameter(REFER_KEY).removeParameter(MONITOR_KEY);
         given(lb.select(invokers, tmpUrl, invocation)).willReturn(invoker1);
         initlistsize5();
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigValidationUtils.java
Patch:
@@ -97,7 +97,6 @@
 import static org.apache.dubbo.config.Constants.DUBBO_IP_TO_REGISTRY;
 import static org.apache.dubbo.config.Constants.ENVIRONMENT;
 import static org.apache.dubbo.config.Constants.LAYER_KEY;
-import static org.apache.dubbo.config.Constants.LISTENER_KEY;
 import static org.apache.dubbo.config.Constants.NAME;
 import static org.apache.dubbo.config.Constants.ORGANIZATION;
 import static org.apache.dubbo.config.Constants.OWNER;
@@ -297,7 +296,6 @@ public static void validateAbstractInterfaceConfig(AbstractInterfaceConfig confi
         checkExtension(ProxyFactory.class, PROXY_KEY, config.getProxy());
         checkExtension(Cluster.class, CLUSTER_KEY, config.getCluster());
         checkMultiExtension(Filter.class, FILE_KEY, config.getFilter());
-        checkMultiExtension(InvokerListener.class, LISTENER_KEY, config.getListener());
         checkNameHasSymbol(LAYER_KEY, config.getLayer());
 
         List<MethodConfig> methods = config.getMethods();

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/extension/SpringExtensionFactory.java
Patch:
@@ -72,7 +72,7 @@ public <T> T getExtension(Class<T> type, String name) {
             }
         }
 
-        logger.warn("No spring extension (bean) named:" + name + ", try to find an extension (bean) of type " + type.getName());
+        //logger.warn("No spring extension (bean) named:" + name + ", try to find an extension (bean) of type " + type.getName());
 
         return null;
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -748,7 +748,7 @@ void stop() {
         @Override
         protected void notifyOverrides() {
             // to notify configurator/router changes
-            directory.refreshInvoker(Collections.emptyList());
+            directory.refreshOverrideAndInvoker(Collections.emptyList());
         }
     }
 
@@ -769,7 +769,7 @@ void removeNotifyListener(RegistryDirectory listener) {
 
         @Override
         protected void notifyOverrides() {
-            listeners.forEach(listener -> listener.refreshInvoker(Collections.emptyList()));
+            listeners.forEach(listener -> listener.refreshOverrideAndInvoker(Collections.emptyList()));
         }
     }
 

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/RegistryProtocolTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.Result;
-import org.apache.dubbo.rpc.cluster.support.FailfastCluster;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ServiceDescriptor;
 import org.apache.dubbo.rpc.protocol.AbstractInvoker;
@@ -86,7 +85,7 @@ public void testDefaultPort() {
     public void testExportUrlNull() {
         Assertions.assertThrows(IllegalArgumentException.class, () -> {
             RegistryProtocol registryProtocol = getRegistryProtocol();
-            registryProtocol.setCluster(new FailfastCluster());
+//            registryProtocol.setCluster(new FailfastCluster());
 
             Protocol dubboProtocol = DubboProtocol.getDubboProtocol();
             registryProtocol.setProtocol(dubboProtocol);
@@ -99,7 +98,7 @@ public void testExportUrlNull() {
     @Test
     public void testExport() {
         RegistryProtocol registryProtocol = getRegistryProtocol();
-        registryProtocol.setCluster(new FailfastCluster());
+//        registryProtocol.setCluster(new FailfastCluster());
         registryProtocol.setRegistryFactory(ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension());
 
         Protocol dubboProtocol = DubboProtocol.getDubboProtocol();

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/ProtocolFilterWrapper.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.constants.CommonConstants;
+import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.utils.UrlUtils;
 import org.apache.dubbo.rpc.Exporter;
@@ -38,6 +39,7 @@
 /**
  * ListenerProtocol
  */
+@Activate(order = 100)
 public class ProtocolFilterWrapper implements Protocol {
 
     private final Protocol protocol;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/ProtocolListenerWrapper.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.protocol;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.utils.UrlUtils;
 import org.apache.dubbo.rpc.Exporter;
@@ -38,6 +39,7 @@
 /**
  * ListenerProtocol
  */
+@Activate(order = 200)
 public class ProtocolListenerWrapper implements Protocol {
 
     private final Protocol protocol;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/builder/TypeBuilder.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.metadata.definition.builder;
 
 import org.apache.dubbo.common.extension.SPI;
+import org.apache.dubbo.common.lang.Prioritized;
 import org.apache.dubbo.metadata.definition.model.TypeDefinition;
 
 import java.lang.reflect.Type;
@@ -26,7 +27,7 @@
  * 2015/1/27.
  */
 @SPI
-public interface TypeBuilder {
+public interface TypeBuilder extends Prioritized {
 
     /**
      * Whether the build accept the type or class passed in.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java
Patch:
@@ -92,7 +92,7 @@ public <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation
 
     @Override
     public int getPriority() {
-        return DEFAULT_PRIORITY;
+        return priority;
     }
 
     @Override

File: dubbo-configcenter/dubbo-configcenter-consul/src/main/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfiguration.java
Patch:
@@ -145,7 +145,7 @@ public boolean publishConfig(String key, String group, String content) throws Un
 //        }
 //        return true;
         String normalizedKey = convertKey(group, key);
-        return kvClient.putValue(normalizedKey + PATH_SEPARATOR + content);
+        return kvClient.putValue(normalizedKey, content);
     }
 
     @Override

File: dubbo-registry/dubbo-registry-consul/src/main/java/org/apache/dubbo/registry/consul/ConsulRegistry.java
Patch:
@@ -45,8 +45,8 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 
@@ -86,7 +86,7 @@ public ConsulRegistry(URL url) {
         int port = url.getPort() != 0 ? url.getPort() : DEFAULT_PORT;
         client = new ConsulClient(host, port);
         checkPassInterval = url.getParameter(CHECK_PASS_INTERVAL, DEFAULT_CHECK_PASS_INTERVAL);
-        ttlConsulCheckExecutor = Executors.newSingleThreadScheduledExecutor();
+        ttlConsulCheckExecutor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory("Ttl-Consul-Check-Executor", true));
         ttlConsulCheckExecutor.scheduleAtFixedRate(this::checkPass, checkPassInterval / 8,
                 checkPassInterval / 8, TimeUnit.MILLISECONDS);
     }

File: dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/jvalidation/JValidator.java
Patch:
@@ -186,7 +186,7 @@ private static Class<?> generateMethodParameterClass(Class<?> clazz, Method meth
     private static String generateMethodParameterClassName(Class<?> clazz, Method method) {
         StringBuilder builder = new StringBuilder().append(clazz.getName())
                 .append("_")
-                .append(toUpperMethoName(method.getName()))
+                .append(toUpperMethodName(method.getName()))
                 .append("Parameter");
 
         Class<?>[] parameterTypes = method.getParameterTypes();
@@ -211,7 +211,7 @@ private static boolean hasConstraintParameter(Method method) {
         return false;
     }
 
-    private static String toUpperMethoName(String methodName) {
+    private static String toUpperMethodName(String methodName) {
         return methodName.substring(0, 1).toUpperCase() + methodName.substring(1);
     }
 
@@ -292,7 +292,7 @@ public void validate(String methodName, Class<?>[] parameterTypes, Object[] argu
 
     private Class methodClass(String methodName) {
         Class<?> methodClass = null;
-        String methodClassName = clazz.getName() + "$" + toUpperMethoName(methodName);
+        String methodClassName = clazz.getName() + "$" + toUpperMethodName(methodName);
         Class cached = methodClassMap.get(methodClassName);
         if (cached != null) {
             return cached == clazz ? null : cached;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigValidationUtils.java
Patch:
@@ -297,6 +297,7 @@ public static void validateAbstractInterfaceConfig(AbstractInterfaceConfig confi
         checkExtension(ProxyFactory.class, PROXY_KEY, config.getProxy());
         checkExtension(Cluster.class, CLUSTER_KEY, config.getCluster());
         checkMultiExtension(Filter.class, FILE_KEY, config.getFilter());
+        checkMultiExtension(InvokerListener.class, LISTENER_KEY, config.getListener());
         checkNameHasSymbol(LAYER_KEY, config.getLayer());
 
         List<MethodConfig> methods = config.getMethods();
@@ -311,7 +312,7 @@ public static void validateServiceConfig(ServiceConfig config) {
         checkName(TOKEN_KEY, config.getToken());
         checkPathName(PATH_KEY, config.getPath());
 
-        checkMultiExtension(ExporterListener.class, LISTENER_KEY, config.getListener());
+        checkMultiExtension(ExporterListener.class, "listener", config.getListener());
 
         validateAbstractInterfaceConfig(config);
 
@@ -336,7 +337,7 @@ public static void validateServiceConfig(ServiceConfig config) {
     }
 
     public static void validateReferenceConfig(ReferenceConfig config) {
-        checkMultiExtension(InvokerListener.class, LISTENER_KEY, config.getListener());
+        checkMultiExtension(InvokerListener.class, "listener", config.getListener());
         checkKey(VERSION_KEY, config.getVersion());
         checkKey(GROUP_KEY, config.getGroup());
         checkName(CLIENT_KEY, config.getClient());

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigValidationUtils.java
Patch:
@@ -297,6 +297,7 @@ public static void validateAbstractInterfaceConfig(AbstractInterfaceConfig confi
         checkExtension(ProxyFactory.class, PROXY_KEY, config.getProxy());
         checkExtension(Cluster.class, CLUSTER_KEY, config.getCluster());
         checkMultiExtension(Filter.class, FILE_KEY, config.getFilter());
+        checkMultiExtension(InvokerListener.class, LISTENER_KEY, config.getListener());
         checkNameHasSymbol(LAYER_KEY, config.getLayer());
 
         List<MethodConfig> methods = config.getMethods();
@@ -311,7 +312,7 @@ public static void validateServiceConfig(ServiceConfig config) {
         checkName(TOKEN_KEY, config.getToken());
         checkPathName(PATH_KEY, config.getPath());
 
-        checkMultiExtension(ExporterListener.class, LISTENER_KEY, config.getListener());
+        checkMultiExtension(ExporterListener.class, "listener", config.getListener());
 
         validateAbstractInterfaceConfig(config);
 
@@ -336,7 +337,7 @@ public static void validateServiceConfig(ServiceConfig config) {
     }
 
     public static void validateReferenceConfig(ReferenceConfig config) {
-        checkMultiExtension(InvokerListener.class, LISTENER_KEY, config.getListener());
+        checkMultiExtension(InvokerListener.class, "listener", config.getListener());
         checkKey(VERSION_KEY, config.getVersion());
         checkKey(GROUP_KEY, config.getGroup());
         checkName(CLIENT_KEY, config.getClient());

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigValidationUtils.java
Patch:
@@ -297,7 +297,6 @@ public static void validateAbstractInterfaceConfig(AbstractInterfaceConfig confi
         checkExtension(ProxyFactory.class, PROXY_KEY, config.getProxy());
         checkExtension(Cluster.class, CLUSTER_KEY, config.getCluster());
         checkMultiExtension(Filter.class, FILE_KEY, config.getFilter());
-        checkMultiExtension(InvokerListener.class, LISTENER_KEY, config.getListener());
         checkNameHasSymbol(LAYER_KEY, config.getLayer());
 
         List<MethodConfig> methods = config.getMethods();
@@ -312,7 +311,7 @@ public static void validateServiceConfig(ServiceConfig config) {
         checkName(TOKEN_KEY, config.getToken());
         checkPathName(PATH_KEY, config.getPath());
 
-        checkMultiExtension(ExporterListener.class, "listener", config.getListener());
+        checkMultiExtension(ExporterListener.class, LISTENER_KEY, config.getListener());
 
         validateAbstractInterfaceConfig(config);
 
@@ -337,7 +336,7 @@ public static void validateServiceConfig(ServiceConfig config) {
     }
 
     public static void validateReferenceConfig(ReferenceConfig config) {
-        checkMultiExtension(InvokerListener.class, "listener", config.getListener());
+        checkMultiExtension(InvokerListener.class, LISTENER_KEY, config.getListener());
         checkKey(VERSION_KEY, config.getVersion());
         checkKey(GROUP_KEY, config.getGroup());
         checkName(CLIENT_KEY, config.getClient());

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/util/NacosNamingServiceUtils.java
Patch:
@@ -27,6 +27,7 @@
 import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.api.naming.NamingService;
 import com.alibaba.nacos.api.naming.pojo.Instance;
+import com.alibaba.nacos.api.naming.utils.NamingUtils;
 
 import java.util.Properties;
 
@@ -90,7 +91,7 @@ public static Instance toInstance(ServiceInstance serviceInstance) {
      */
     public static ServiceInstance toServiceInstance(Instance instance) {
         DefaultServiceInstance serviceInstance = new DefaultServiceInstance(instance.getInstanceId(),
-                instance.getServiceName(), instance.getIp(), instance.getPort());
+                NamingUtils.getServiceName(instance.getServiceName()), instance.getIp(), instance.getPort());
         serviceInstance.setMetadata(instance.getMetadata());
         serviceInstance.setEnabled(instance.isEnabled());
         serviceInstance.setHealthy(instance.isHealthy());

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceClassPostProcessor.java
Patch:
@@ -68,7 +68,7 @@
 import java.util.Objects;
 import java.util.Set;
 
-import static com.alibaba.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
+import static com.alibaba.spring.util.BeanRegistrar.registerInfrastructureBean;
 import static com.alibaba.spring.util.ObjectUtils.of;
 import static java.util.Arrays.asList;
 import static org.apache.dubbo.config.spring.beans.factory.annotation.ServiceBeanNameBuilder.create;
@@ -126,7 +126,7 @@ public ServiceClassPostProcessor(Set<String> packagesToScan) {
     public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {
 
         // @since 2.7.5
-        registerBeans(registry, DubboBootstrapApplicationListener.class);
+        registerInfrastructureBean(registry, DubboBootstrapApplicationListener.BEAN_NAME, DubboBootstrapApplicationListener.class);
 
         Set<String> resolvedPackagesToScan = resolvePackagesToScan(packagesToScan);
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -399,9 +399,9 @@ public void checkAndUpdateSubConfigs() {
         }
 
         //init serivceMetadata
-        serviceMetadata.setVersion(version);
-        serviceMetadata.setGroup(group);
-        serviceMetadata.setDefaultGroup(group);
+        serviceMetadata.setVersion(getVersion());
+        serviceMetadata.setGroup(getGroup());
+        serviceMetadata.setDefaultGroup(getGroup());
         serviceMetadata.setServiceType(getActualInterface());
         serviceMetadata.setServiceInterfaceName(interfaceName);
         // TODO, uncomment this line once service key is unified

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -193,9 +193,9 @@ public synchronized void export() {
         checkAndUpdateSubConfigs();
 
         //init serviceMetadata
-        serviceMetadata.setVersion(version);
-        serviceMetadata.setGroup(group);
-        serviceMetadata.setDefaultGroup(group);
+        serviceMetadata.setVersion(getVersion());
+        serviceMetadata.setGroup(getGroup());
+        serviceMetadata.setDefaultGroup(getGroup());
         serviceMetadata.setServiceType(getInterfaceClass());
         serviceMetadata.setServiceInterfaceName(getInterface());
         serviceMetadata.setTarget(getRef());

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java
Patch:
@@ -34,6 +34,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.$INVOKE;
 import static org.apache.dubbo.common.constants.CommonConstants.$INVOKE_ASYNC;
+import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_ATTACHENT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.rpc.Constants.$ECHO;
 import static org.apache.dubbo.rpc.Constants.ASYNC_KEY;
@@ -216,7 +217,7 @@ private static Method getMethodByService(Invocation invocation, String service)
 
     public static long getTimeout(Invocation invocation, long defaultTimeout) {
         long timeout = defaultTimeout;
-        Object genericTimeout = invocation.getObjectAttachment(TIMEOUT_KEY);
+        Object genericTimeout = invocation.getObjectAttachment(TIMEOUT_ATTACHENT_KEY);
         if (genericTimeout != null) {
             timeout = convertToNumber(genericTimeout, defaultTimeout);
         }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/ChannelWrappedInvoker.java
Patch:
@@ -38,7 +38,6 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.remoting.Constants.SENT_KEY;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.CALLBACK_SERVICE_KEY;
@@ -54,7 +53,7 @@ class ChannelWrappedInvoker<T> extends AbstractInvoker<T> {
     private final ExchangeClient currentClient;
 
     ChannelWrappedInvoker(Class<T> serviceType, Channel channel, URL url, String serviceKey) {
-        super(serviceType, url, new String[]{GROUP_KEY, TOKEN_KEY, TIMEOUT_KEY});
+        super(serviceType, url, new String[]{GROUP_KEY, TOKEN_KEY});
         this.channel = channel;
         this.serviceKey = serviceKey;
         this.currentClient = new HeaderExchangeClient(new ChannelWrapper(this.channel), false);

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftInvoker.java
Patch:
@@ -64,7 +64,7 @@ public ThriftInvoker(Class<T> service, URL url, ExchangeClient[] clients) {
     }
 
     public ThriftInvoker(Class<T> type, URL url, ExchangeClient[] clients, Set<Invoker<?>> invokers) {
-        super(type, url, new String[]{INTERFACE_KEY, GROUP_KEY, TOKEN_KEY, TIMEOUT_KEY});
+        super(type, url, new String[]{INTERFACE_KEY, GROUP_KEY, TOKEN_KEY});
         this.clients = clients;
         this.invokers = invokers;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/DynamicConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.config.Configuration;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
+import java.util.Collections;
 import java.util.Optional;
 import java.util.Set;
 import java.util.SortedSet;
@@ -152,7 +153,7 @@ default boolean publishConfig(String key, String content) throws UnsupportedOper
      * @since 2.7.5
      */
     default boolean publishConfig(String key, String group, String content) throws UnsupportedOperationException {
-        throw new UnsupportedOperationException("No support");
+        return false;
     }
 
     /**
@@ -164,7 +165,7 @@ default boolean publishConfig(String key, String group, String content) throws U
      * @since 2.7.5
      */
     default SortedSet<String> getConfigKeys(String group) throws UnsupportedOperationException {
-        throw new UnsupportedOperationException("No support");
+        return Collections.emptySortedSet();
     }
 
     /**

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/DefaultFuture.java
Patch:
@@ -176,9 +176,9 @@ public static void received(Channel channel, Response response, boolean timeout)
             } else {
                 logger.warn("The timeout response finally returned at "
                         + (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date()))
-                        + ", response " + response
+                        + ", response status is " + response.getStatus()
                         + (channel == null ? "" : ", channel: " + channel.getLocalAddress()
-                        + " -> " + channel.getRemoteAddress()));
+                        + " -> " + channel.getRemoteAddress()) + ", please check provider side for detailed result.");
             }
         } finally {
             CHANNELS.remove(response.getId());

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcException.java
Patch:
@@ -36,6 +36,7 @@
     public static final int SERIALIZATION_EXCEPTION = 5;
     public static final int NO_INVOKER_AVAILABLE_AFTER_FILTER = 6;
     public static final int LIMIT_EXCEEDED_EXCEPTION = 7;
+    public static final int TIMEOUT_TERMINATE = 8;
     private static final long serialVersionUID = 7815426752583648734L;
     /**
      * RpcException cannot be extended, use error code for exception type to keep compatibility

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java
Patch:
@@ -143,6 +143,7 @@ public Result invoke(Invocation inv) throws RpcException {
         if (CollectionUtils.isNotEmptyMap(attachment)) {
             invocation.addObjectAttachmentsIfAbsent(attachment);
         }
+
         Map<String, Object> contextAttachments = RpcContext.getContext().getObjectAttachments();
         if (CollectionUtils.isNotEmptyMap(contextAttachments)) {
             /**

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ServiceMetadata.java
Patch:
@@ -73,7 +73,7 @@ public void addAttribute(String key, Object value) {
     }
 
     public void addAttachment(String key, Object value) {
-        this.attributeMap.put(key, value);
+        this.attachments.put(key, value);
     }
 
     public Class<?> getServiceType() {

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/DynamicConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.config.Configuration;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
+import java.util.Collections;
 import java.util.Optional;
 import java.util.Set;
 import java.util.SortedSet;
@@ -152,7 +153,7 @@ default boolean publishConfig(String key, String content) throws UnsupportedOper
      * @since 2.7.5
      */
     default boolean publishConfig(String key, String group, String content) throws UnsupportedOperationException {
-        throw new UnsupportedOperationException("No support");
+        return false;
     }
 
     /**
@@ -164,7 +165,7 @@ default boolean publishConfig(String key, String group, String content) throws U
      * @since 2.7.5
      */
     default SortedSet<String> getConfigKeys(String group) throws UnsupportedOperationException {
-        throw new UnsupportedOperationException("No support");
+        return Collections.emptySortedSet();
     }
 
     /**

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/consumer/test/TestConsumerConfiguration.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config.spring.context.annotation.consumer.test;
 
+import org.apache.dubbo.config.annotation.DubboReference;
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.config.spring.api.DemoService;
 import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
@@ -63,7 +64,7 @@ public Child c() {
 
     public static abstract class Ancestor {
 
-        @Reference(version = "2.5.7", url = remoteURL, application = "dubbo-demo-application")
+        @DubboReference(version = "2.5.7", url = remoteURL, application = "dubbo-demo-application")
         private DemoService demoServiceFromAncestor;
 
         public DemoService getDemoServiceFromAncestor() {
@@ -83,7 +84,7 @@ public DemoService getDemoServiceFromParent() {
             return demoServiceFromParent;
         }
 
-        @Reference(version = "2.5.7", url = remoteURL, application = "dubbo-demo-application")
+        @com.alibaba.dubbo.config.annotation.Reference(version = "2.5.7", url = remoteURL, application = "dubbo-demo-application")
         public void setDemoServiceFromParent(DemoService demoServiceFromParent) {
             this.demoServiceFromParent = demoServiceFromParent;
         }

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DefaultHelloService.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config.spring.context.annotation.provider;
 
+import org.apache.dubbo.config.annotation.DubboService;
 import org.apache.dubbo.config.spring.api.HelloService;
 
 import org.springframework.stereotype.Service;
@@ -27,7 +28,7 @@
  * @since TODO
  */
 @Service
-@org.apache.dubbo.config.annotation.Service
+@DubboService
 public class DefaultHelloService implements HelloService {
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -61,7 +62,7 @@ public abstract class AbstractRegistryFactory implements RegistryFactory {
      * @return all registries
      */
     public static Collection<Registry> getRegistries() {
-        return Collections.unmodifiableCollection(REGISTRIES.values());
+        return Collections.unmodifiableCollection(new LinkedList<>(REGISTRIES.values()));
     }
 
     public static Registry getRegistry(String key) {

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -503,7 +503,7 @@ static <C extends AbstractConfig> String getId(C config) {
     }
 
     static <C extends AbstractConfig> boolean isDefaultConfig(C config) {
-        Boolean isDefault = getProperty(config, "default");
+        Boolean isDefault = getProperty(config, "isDefault");
         return isDefault == null || TRUE.equals(isDefault);
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -631,8 +631,9 @@ private void startMetadataReport() {
     }
 
     /**
-     * For compatibility purpose, use registry as the default config center when the registry protocol is zookeeper and
-     * there's no config center specified explicitly.
+     * For compatibility purpose, use registry as the default config center when
+     * there's no config center specified explicitly and
+     * useAsConfigCenter of registryConfig is null or true
      */
     private void useRegistryAsConfigCenterIfNecessary() {
         // we use the loading status of DynamicConfiguration to decide whether ConfigCenter has been initiated.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/LeastActiveLoadBalance.java
Patch:
@@ -86,8 +86,7 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
                 // Accumulate the total weight of the least active invoker
                 totalWeight += afterWarmup;
                 // If every invoker has the same weight?
-                if (sameWeight && i > 0
-                        && afterWarmup != firstWeight) {
+                if (sameWeight && afterWarmup != firstWeight) {
                     sameWeight = false;
                 }
             }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ExecuteLimitFilter.java
Patch:
@@ -37,7 +37,7 @@
 @Activate(group = CommonConstants.PROVIDER, value = EXECUTES_KEY)
 public class ExecuteLimitFilter implements Filter, Filter.Listener {
 
-    private static final String EXECUTELIMIT_FILTER_START_TIME = "execugtelimit_filter_start_time";
+    private static final String EXECUTE_LIMIT_FILTER_START_TIME = "execute_limit_filter_start_time";
 
     @Override
     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
@@ -51,7 +51,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
                             "\" /> limited.");
         }
 
-        invocation.put(EXECUTELIMIT_FILTER_START_TIME, System.currentTimeMillis());
+        invocation.put(EXECUTE_LIMIT_FILTER_START_TIME, System.currentTimeMillis());
         try {
             return invoker.invoke(invocation);
         } catch (Throwable t) {
@@ -80,7 +80,7 @@ public void onError(Throwable t, Invoker<?> invoker, Invocation invocation) {
     }
 
     private long getElapsed(Invocation invocation) {
-        Object beginTime = invocation.get(EXECUTELIMIT_FILTER_START_TIME);
+        Object beginTime = invocation.get(EXECUTE_LIMIT_FILTER_START_TIME);
         return beginTime != null ? System.currentTimeMillis() - (Long) beginTime : 0;
     }
 }

File: dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/rest/ServiceRestMetadataStorage.java
Patch:
@@ -23,7 +23,6 @@
 
 import javax.annotation.processing.ProcessingEnvironment;
 import java.io.IOException;
-import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -767,15 +767,15 @@ private void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, S
         try {
             Enumeration<java.net.URL> urls = null;
             ClassLoader classLoader = findClassLoader();
-            
+
             // try to load from ExtensionLoader's ClassLoader first
             if (extensionLoaderClassLoaderFirst) {
                 ClassLoader extensionLoaderClassLoader = ExtensionLoader.class.getClassLoader();
                 if (ClassLoader.getSystemClassLoader() != extensionLoaderClassLoader) {
                     urls = extensionLoaderClassLoader.getResources(fileName);
                 }
             }
-            
+
             if(urls == null || !urls.hasMoreElements()) {
                 if (classLoader != null) {
                     urls = classLoader.getResources(fileName);

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/NetUtilsTest.java
Patch:
@@ -51,7 +51,7 @@ public void testGetRandomPort() throws Exception {
     public void testGetAvailablePort() throws Exception {
         assertThat(NetUtils.getAvailablePort(), greaterThan(0));
         assertThat(NetUtils.getAvailablePort(12345), greaterThanOrEqualTo(12345));
-        assertThat(NetUtils.getAvailablePort(-1), greaterThanOrEqualTo(30000));
+        assertThat(NetUtils.getAvailablePort(-1), greaterThanOrEqualTo(0));
     }
 
     @Test

File: dubbo-registry/dubbo-registry-consul/src/test/java/org/apache/dubbo/registry/consul/ConsulRegistryTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.pszymczyk.consul.ConsulStarterBuilder;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.status.Status;
+import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.registry.NotifyListener;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.status.RegistryStatusChecker;
@@ -43,7 +44,7 @@ public class ConsulRegistryTest {
     private static ConsulProcess consul;
     private ConsulRegistry consulRegistry;
     private String service = "org.apache.dubbo.test.injvmServie";
-    private URL serviceUrl = URL.valueOf("consul://127.0.0.1:8012/" + service + "?notify=false&methods=test1,test2");
+    private URL serviceUrl = URL.valueOf("consul://127.0.0.1:" + NetUtils.getAvailablePort() + "/" + service + "?notify=false&methods=test1,test2");
     private URL registryUrl;
     private ConsulRegistryFactory consulRegistryFactory;
 

File: dubbo-registry/dubbo-registry-eureka/src/test/java/org/apache/dubbo/registry/eureka/EurekaServiceDiscoveryTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.registry.eureka;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.registry.client.DefaultServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstance;
 
@@ -37,13 +38,13 @@ public class EurekaServiceDiscoveryTest {
 
     private ServiceInstance serviceInstance;
 
-    private URL registryURL = URL.valueOf("eureka://127.0.0.1:8761/eureka");
+    private URL registryURL = URL.valueOf("eureka://127.0.0.1:" + NetUtils.getAvailablePort() + "/eureka");
 
     @BeforeEach
     public void init() throws Exception {
         serviceDiscovery = new EurekaServiceDiscovery();
         serviceDiscovery.initialize(registryURL);
-        serviceInstance = new DefaultServiceInstance("test", "127.0.0.1", 8080);
+        serviceInstance = new DefaultServiceInstance("test", "127.0.0.1", NetUtils.getAvailablePort());
         serviceDiscovery.register(serviceInstance);
     }
 

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.registry.zookeeper;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.event.EventDispatcher;
 import org.apache.dubbo.registry.client.DefaultServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstance;
@@ -74,7 +75,7 @@ public void close() throws Exception {
     @Test
     public void testRegistration() {
 
-        DefaultServiceInstance serviceInstance = createServiceInstance(SERVICE_NAME, LOCALHOST, 8080);
+        DefaultServiceInstance serviceInstance = createServiceInstance(SERVICE_NAME, LOCALHOST, NetUtils.getAvailablePort());
 
         discovery.register(serviceInstance);
 

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/NettyStringTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.remoting.transport.netty;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.remoting.exchange.ExchangeChannel;
 import org.apache.dubbo.remoting.exchange.ExchangeServer;
 import org.apache.dubbo.remoting.exchange.Exchangers;
@@ -36,7 +37,8 @@ public class NettyStringTest {
     @BeforeAll
     public static void setUp() throws Exception {
         //int port = (int) (1000 * Math.random() + 10000);
-        int port = 10001;
+        //int port = 10001;
+        int port = NetUtils.getAvailablePort();
         System.out.println(port);
         server = Exchangers.bind(URL.valueOf("telnet://0.0.0.0:" + port + "?server=netty3"), new TelnetServerHandler());
         client = Exchangers.connect(URL.valueOf("telnet://127.0.0.1:" + port + "?client=netty3"), new TelnetClientHandler());

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/ThreadNameTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.remoting.transport.netty;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.RemotingException;
@@ -42,7 +43,7 @@ public class ThreadNameTest {
 
     @BeforeEach
     public void before() throws Exception {
-        int port = 55555;
+        int port = NetUtils.getAvailablePort();
         serverURL = URL.valueOf("netty://localhost?side=provider").setPort(port);
         clientURL = URL.valueOf("netty://localhost?side=consumer").setPort(port);
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ArgumentCallbackTest.java
Patch:
@@ -37,7 +37,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.CALLBACK_INSTANCES_LIMIT_KEY;
 
-public class ExplicitCallbackTest {
+public class ArgumentCallbackTest {
 
     protected Exporter<IDemoService> exporter = null;
     protected Exporter<IHelloService> hello_exporter = null;
@@ -243,8 +243,8 @@ private void assertCallbackCount(int runs, int sleep, AtomicInteger count) throw
     @Test
     public void startProvider() throws Exception {
         exportService();
-        synchronized (ExplicitCallbackTest.class) {
-            ExplicitCallbackTest.class.wait();
+        synchronized (ArgumentCallbackTest.class) {
+            ArgumentCallbackTest.class.wait();
         }
     }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/RpcFilterTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
+import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
@@ -42,7 +43,8 @@ public void after() {
     @Test
     public void testRpcFilter() throws Exception {
         DemoService service = new DemoServiceImpl();
-        URL url = URL.valueOf("dubbo://127.0.0.1:9010/org.apache.dubbo.rpc.protocol.dubbo.support.DemoService?service.filter=echo");
+        int port = NetUtils.getAvailablePort();
+        URL url = URL.valueOf("dubbo://127.0.0.1:" + port + "/org.apache.dubbo.rpc.protocol.dubbo.support.DemoService?service.filter=echo");
         ApplicationModel.getServiceRepository().registerService(DemoService.class);
         protocol.export(proxy.getInvoker(service, DemoService.class, url));
         service = proxy.getProxy(protocol.refer(DemoService.class, url));

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoService.java
Patch:
@@ -51,7 +51,7 @@ public interface DemoService {
 
     String get(CustomArgument arg1);
 
-    byte getbyte(byte arg);
+    int getInt(int arg);
 
     void nonSerializedParameter(NonSerialized ns);
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoServiceImpl.java
Patch:
@@ -84,7 +84,7 @@ public String get(CustomArgument arg1) {
         return arg1.toString();
     }
 
-    public byte getbyte(byte arg) {
+    public int getInt(int arg) {
         return arg;
     }
 

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/RequestMetadata.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Set;
 
 import static java.util.Collections.unmodifiableMap;
-import static org.apache.dubbo.common.utils.HttpUtils.normalizePath;
+import static org.apache.dubbo.common.utils.PathUtils.normalize;
 import static org.apache.dubbo.common.utils.StringUtils.isBlank;
 
 /**
@@ -73,7 +73,7 @@ public String getPath() {
     }
 
     public void setPath(String path) {
-        this.path = normalizePath(path);
+        this.path = normalize(path);
     }
 
     public Map<String, List<String>> getParams() {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/jaxrs/JAXRSServiceRestMetadataResolver.java
Patch:
@@ -28,7 +28,7 @@
 import static org.apache.dubbo.common.utils.AnnotationUtils.findMetaAnnotation;
 import static org.apache.dubbo.common.utils.AnnotationUtils.getValue;
 import static org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent;
-import static org.apache.dubbo.common.utils.HttpUtils.buildPath;
+import static org.apache.dubbo.common.utils.PathUtils.buildPath;
 import static org.apache.dubbo.metadata.rest.RestMetadataConstants.JAX_RS.CONSUMES_ANNOTATION_CLASS_NAME;
 import static org.apache.dubbo.metadata.rest.RestMetadataConstants.JAX_RS.HTTP_METHOD_ANNOTATION_CLASS_NAME;
 import static org.apache.dubbo.metadata.rest.RestMetadataConstants.JAX_RS.PATH_ANNOTATION_CLASS_NAME;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/rest/springmvc/SpringMvcServiceRestMetadataResolver.java
Patch:
@@ -34,7 +34,7 @@
 import static org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent;
 import static org.apache.dubbo.common.utils.ArrayUtils.isEmpty;
 import static org.apache.dubbo.common.utils.ArrayUtils.isNotEmpty;
-import static org.apache.dubbo.common.utils.HttpUtils.buildPath;
+import static org.apache.dubbo.common.utils.PathUtils.buildPath;
 import static org.apache.dubbo.metadata.rest.RestMetadataConstants.SPRING_MVC.CONTROLLER_ANNOTATION_CLASS_NAME;
 import static org.apache.dubbo.metadata.rest.RestMetadataConstants.SPRING_MVC.REQUEST_MAPPING_ANNOTATION_CLASS_NAME;
 

File: dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/rest/jaxrs/JAXRSServiceRestMetadataResolver.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Set;
 import java.util.stream.Stream;
 
-import static org.apache.dubbo.common.utils.HttpUtils.buildPath;
+import static org.apache.dubbo.common.utils.PathUtils.buildPath;
 import static org.apache.dubbo.metadata.annotation.processing.util.AnnotationUtils.findAnnotation;
 import static org.apache.dubbo.metadata.annotation.processing.util.AnnotationUtils.findMetaAnnotation;
 import static org.apache.dubbo.metadata.annotation.processing.util.AnnotationUtils.getAnnotation;

File: dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/rest/springmvc/SpringMvcServiceRestMetadataResolver.java
Patch:
@@ -34,7 +34,7 @@
 import static org.apache.dubbo.common.function.Streams.filterFirst;
 import static org.apache.dubbo.common.utils.ArrayUtils.isEmpty;
 import static org.apache.dubbo.common.utils.ArrayUtils.isNotEmpty;
-import static org.apache.dubbo.common.utils.HttpUtils.buildPath;
+import static org.apache.dubbo.common.utils.PathUtils.buildPath;
 import static org.apache.dubbo.metadata.annotation.processing.util.AnnotationUtils.findAnnotation;
 import static org.apache.dubbo.metadata.annotation.processing.util.AnnotationUtils.findMetaAnnotation;
 import static org.apache.dubbo.metadata.annotation.processing.util.AnnotationUtils.getAllAnnotations;

File: dubbo-configcenter/dubbo-configcenter-consul/src/main/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfiguration.java
Patch:
@@ -151,7 +151,7 @@ public boolean publishConfig(String key, String group, String content) throws Un
     @Override
     public Object getInternalProperty(String key) {
         logger.info("getting config from: " + key);
-        return kvClient.getValueAsString(key, Charsets.UTF_8).orElseThrow(() -> new IllegalArgumentException(key + " does not exit."));
+        return kvClient.getValueAsString(key, Charsets.UTF_8).orElse(null);
     }
 
     @Override

File: dubbo-configcenter/dubbo-configcenter-consul/src/test/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfigurationTest.java
Patch:
@@ -71,7 +71,7 @@ public void testGetConfig() {
         assertEquals("bar", configuration.getConfig("foo", "dubbo"));
         // test does not block
         assertEquals("bar", configuration.getConfig("foo", "dubbo"));
-        Assertions.assertThrows(IllegalArgumentException.class, () -> configuration.getConfig("not-exist", "dubbo"));
+        Assertions.assertNull(configuration.getConfig("not-exist", "dubbo"));
     }
 
     @Test

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -337,6 +337,7 @@ private T createProxy(Map<String, String> map) {
         }
 
         if (shouldCheck() && !invoker.isAvailable()) {
+            invoker.destroy();
             throw new IllegalStateException("Failed to check the status of the service "
                     + interfaceName
                     + ". No provider available for the service "

File: dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java
Patch:
@@ -70,7 +70,7 @@
 import static org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper.UTF_8;
 
 /**
- * etct3 client.
+ * etcd3 client.
  */
 public class JEtcdClient extends AbstractEtcdClient<JEtcdClient.EtcdWatcher> {
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -87,9 +87,9 @@ public class ExtensionLoader<T> {
 
     private static final Pattern NAME_SEPARATOR = Pattern.compile("\\s*[,]+\\s*");
 
-    private static final ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS = new ConcurrentHashMap<>();
+    private static final ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS = new ConcurrentHashMap<>(64);
 
-    private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();
+    private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>(64);
 
     private final Class<?> type;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -141,7 +141,7 @@ public RegistryDirectory(Class<T> serviceType, URL url) {
         }
 
         shouldRegister = !ANY_VALUE.equals(url.getServiceInterface()) && url.getParameter(REGISTER_KEY, true);
-        shouldSimplified = !url.getParameter(SIMPLIFIED_KEY, false);
+        shouldSimplified = url.getParameter(SIMPLIFIED_KEY, false);
         if (url.getServiceKey() == null || url.getServiceKey().length() == 0) {
             throw new IllegalArgumentException("registry serviceKey is null.");
         }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java
Patch:
@@ -62,7 +62,7 @@ public void onResponse(Result result, Invoker<?> invoker, Invocation invocation)
 
     @Override
     public void onError(Throwable t, Invoker<?> invoker, Invocation invocation) {
-
+        fireThrowCallback(invoker, invocation, t);
     }
 
     private void fireInvokeCallback(final Invoker<?> invoker, final Invocation invocation) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -141,7 +141,7 @@ public RegistryDirectory(Class<T> serviceType, URL url) {
         }
 
         shouldRegister = !ANY_VALUE.equals(url.getServiceInterface()) && url.getParameter(REGISTER_KEY, true);
-        shouldSimplified = !url.getParameter(SIMPLIFIED_KEY, false);
+        shouldSimplified = url.getParameter(SIMPLIFIED_KEY, false);
         if (url.getServiceKey() == null || url.getServiceKey().length() == 0) {
             throw new IllegalArgumentException("registry serviceKey is null.");
         }

File: dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java
Patch:
@@ -70,7 +70,7 @@
 import static org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper.UTF_8;
 
 /**
- * etct3 client.
+ * etcd3 client.
  */
 public class JEtcdClient extends AbstractEtcdClient<JEtcdClient.EtcdWatcher> {
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -87,9 +87,9 @@ public class ExtensionLoader<T> {
 
     private static final Pattern NAME_SEPARATOR = Pattern.compile("\\s*[,]+\\s*");
 
-    private static final ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS = new ConcurrentHashMap<>();
+    private static final ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS = new ConcurrentHashMap<>(64);
 
-    private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();
+    private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>(64);
 
     private final Class<?> type;
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java
Patch:
@@ -62,7 +62,7 @@ public void onResponse(Result result, Invoker<?> invoker, Invocation invocation)
 
     @Override
     public void onError(Throwable t, Invoker<?> invoker, Invocation invocation) {
-
+        fireThrowCallback(invoker, invocation, t);
     }
 
     private void fireInvokeCallback(final Invoker<?> invoker, final Invocation invocation) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -1038,6 +1038,7 @@ public void destroy() {
 
         if (started.compareAndSet(true, false)
                 && destroyed.compareAndSet(false, true)) {
+
             unregisterServiceInstance();
             unexportMetadataService();
             unexportServices();

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -1033,11 +1033,12 @@ private ServiceInstance createServiceInstance(String serviceName, String host, i
     }
 
     public void destroy() {
-        // for compatibility purpose
-        DubboShutdownHook.destroyAll();
 
         if (started.compareAndSet(true, false)
                 && destroyed.compareAndSet(false, true)) {
+            // for compatibility purpose
+            DubboShutdownHook.destroyAll();
+
             unregisterServiceInstance();
             unexportMetadataService();
             unexportServices();

File: dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/GrpcInvoker.java
Patch:
@@ -111,8 +111,6 @@ private int getErrorCode(Throwable e) {
             Status status = statusException.getStatus();
             if (status.getCode() == Status.Code.DEADLINE_EXCEEDED) {
                 return RpcException.TIMEOUT_EXCEPTION;
-            } else if (status.getCode() == Status.Code.DEADLINE_EXCEEDED) {
-                //
             }
         }
         return RpcException.UNKNOWN_EXCEPTION;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericImplFilter.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.service.GenericException;
 import org.apache.dubbo.rpc.service.GenericService;
 import org.apache.dubbo.rpc.support.ProtocolUtils;
 import org.apache.dubbo.rpc.support.RpcUtils;
@@ -169,8 +168,8 @@ public void onMessage(Result appResponse, Invoker<?> invoker, Invocation invocat
                 } catch (NoSuchMethodException e) {
                     throw new RpcException(e.getMessage(), e);
                 }
-            } else if (appResponse.getException() instanceof GenericException) {
-                GenericException exception = (GenericException) appResponse.getException();
+            } else if (appResponse.getException() instanceof com.alibaba.dubbo.rpc.service.GenericException) {
+                com.alibaba.dubbo.rpc.service.GenericException exception = (com.alibaba.dubbo.rpc.service.GenericException) appResponse.getException();
                 try {
                     String className = exception.getExceptionClass();
                     Class<?> clazz = ReflectUtils.forName(className);

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/GenericImplFilterTest.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.service.GenericException;
 import org.apache.dubbo.rpc.service.GenericService;
 import org.apache.dubbo.rpc.support.DemoService;
 import org.apache.dubbo.rpc.support.Person;
 
+import com.alibaba.dubbo.rpc.service.GenericException;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java
Patch:
@@ -167,11 +167,12 @@ public void doSubscribe(final URL url, final NotifyListener listener) {
 
     private void doSubscribe(final URL url, final NotifyListener listener, final Set<String> serviceNames) {
         execute(namingService -> {
+            List<Instance> instances = new LinkedList();
             for (String serviceName : serviceNames) {
-                List<Instance> instances = namingService.getAllInstances(serviceName);
-                notifySubscriber(url, listener, instances);
+                instances.addAll(namingService.getAllInstances(serviceName));
                 subscribeEventListener(serviceName, url, listener);
             }
+            notifySubscriber(url, listener, instances);
         });
     }
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -166,7 +166,7 @@ private List<Invoker<T>> selectMockInvoker(Invocation invocation) {
                 if (logger.isInfoEnabled()) {
                     logger.info("Exception when try to invoke mock. Get mock invokers error for service:"
                             + directory.getConsumerUrl().getServiceInterface() + ", method:" + invocation.getMethodName()
-                            + ", will contruct a new mock with 'new MockInvoker()'.", e);
+                            + ", will construct a new mock with 'new MockInvoker()'.", e);
                 }
             }
         }

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java
Patch:
@@ -272,7 +272,7 @@ public static Object parse(String json, JSONVisitor handler) throws ParseExcepti
      *
      * @param reader  json source.
      * @param handler handler.
-     * @return resule.
+     * @return result.
      * @throws IOException
      * @throws ParseException
      */

File: dubbo-common/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java
Patch:
@@ -64,7 +64,7 @@ public class MetadataReportConfig extends AbstractConfig {
 
     private Integer retryPeriod;
     /**
-     * By default the metadatastore will store full metadata repeatly every day .
+     * By default the metadatastore will store full metadata repeatedly every day .
      */
     private Boolean cycleReport;
 

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ServiceDescriptor.java
Patch:
@@ -34,7 +34,7 @@
 public class ServiceDescriptor {
     private final String serviceName;
     private final Class<?> serviceInterfaceClass;
-    // to accelarate search
+    // to accelerate search
     private final Map<String, List<MethodDescriptor>> methods = new HashMap<>();
     private final Map<String, Map<String, MethodDescriptor>> descToMethods = new HashMap<>();
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/MetadataReportBuilder.java
Patch:
@@ -51,7 +51,7 @@ public class MetadataReportBuilder extends AbstractBuilder<MetadataReportConfig,
 
     private Integer retryPeriod;
     /**
-     * By default the metadatastore will store full metadata repeatly every day .
+     * By default the metadatastore will store full metadata repeatedly every day .
      */
     private Boolean cycleReport;
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java
Patch:
@@ -65,7 +65,7 @@
 public class DubboBeanDefinitionParser implements BeanDefinitionParser {
 
     private static final Logger logger = LoggerFactory.getLogger(DubboBeanDefinitionParser.class);
-    private static final Pattern GROUP_AND_VERION = Pattern.compile("^[\\-.0-9_a-zA-Z]+(\\:[\\-.0-9_a-zA-Z]+)?$");
+    private static final Pattern GROUP_AND_VERSION = Pattern.compile("^[\\-.0-9_a-zA-Z]+(\\:[\\-.0-9_a-zA-Z]+)?$");
     private static final String ONRETURN = "onreturn";
     private static final String ONTHROW = "onthrow";
     private static final String ONINVOKE = "oninvoke";

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/DubboBeanUtils.java
Patch:
@@ -61,7 +61,7 @@ static void registerCommonBeans(BeanDefinitionRegistry registry) {
         registerInfrastructureBean(registry, DubboBootstrapApplicationListener.BEAN_NAME,
                 DubboBootstrapApplicationListener.class);
 
-        // ince 2.7.6 Register DubboConfigDefaultPropertyValueBeanPostProcessor as an infrastructure Bean
+        // Since 2.7.6 Register DubboConfigDefaultPropertyValueBeanPostProcessor as an infrastructure Bean
         registerInfrastructureBean(registry, DubboConfigDefaultPropertyValueBeanPostProcessor.BEAN_NAME,
                 DubboConfigDefaultPropertyValueBeanPostProcessor.class);
     }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/store/RemoteWritableMetadataService.java
Patch:
@@ -98,7 +98,7 @@ public void publishServiceDefinition(URL providerUrl) {
     @Deprecated
     public void publishProvider(URL providerUrl) throws RpcException {
         //first add into the list
-        // remove the individul param
+        // remove the individual param
         providerUrl = providerUrl.removeParameters(PID_KEY, TIMESTAMP_KEY, Constants.BIND_IP_KEY,
                 Constants.BIND_PORT_KEY, TIMESTAMP_KEY);
 

File: dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/Constants.java
Patch:
@@ -41,5 +41,5 @@ public interface Constants {
 
     String SIGNATURE_STRING_FORMAT = "%s#%s#%s#%s";
 
-    String PARAMTER_SIGNATURE_ENABLE_KEY = "param.sign";
+    String PARAMETER_SIGNATURE_ENABLE_KEY = "param.sign";
 }

File: dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/DefaultAccessKeyStorage.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.rpc.Invocation;
 
 /**
- *  The default implemention of {@link AccessKeyStorage}
+ *  The default implementation of {@link AccessKeyStorage}
  */
 public class DefaultAccessKeyStorage implements AccessKeyStorage {
     @Override

File: dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/AccessKeyAuthenticatorTest.java
Patch:
@@ -118,7 +118,7 @@ void testGetSignatureNoParameter() {
     @Test
     void testGetSignatureWithParameter() {
         URL url = mock(URL.class);
-        when(url.getParameter(Constants.PARAMTER_SIGNATURE_ENABLE_KEY, false)).thenReturn(true);
+        when(url.getParameter(Constants.PARAMETER_SIGNATURE_ENABLE_KEY, false)).thenReturn(true);
         Invocation invocation = mock(Invocation.class);
         String secretKey = "123456";
         Object[] params = {"dubbo", new ArrayList()};

File: dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/filter/ProviderAuthFilterTest.java
Patch:
@@ -130,7 +130,7 @@ void testAuthFailedWhenParameterError() {
                 .addParameter(Constants.ACCESS_KEY_ID_KEY, "ak")
                 .addParameter(Constants.SECRET_ACCESS_KEY_KEY, "sk")
                 .addParameter(CommonConstants.APPLICATION_KEY, "test-provider")
-                .addParameter(Constants.PARAMTER_SIGNATURE_ENABLE_KEY, true)
+                .addParameter(Constants.PARAMETER_SIGNATURE_ENABLE_KEY, true)
                 .addParameter(Constants.SERVICE_AUTH, true);
 
         Invoker invoker = mock(Invoker.class);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/EventPublishingServiceDiscovery.java
Patch:
@@ -44,7 +44,7 @@
 import static java.util.Optional.of;
 
 /**
- * The decorating implementation of {@link ServiceDiscovery} to publishe the {@link Event Dubbo event} when some actions are
+ * The decorating implementation of {@link ServiceDiscovery} to published the {@link Event Dubbo event} when some actions are
  * executing, including:
  * <ul>
  * <li>Lifecycle actions:</li>

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/SubscribedURLsSynthesizer.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.List;
 
 /**
- * The inteface to synthesize the subscribed {@link URL URLs}
+ * The interface to synthesize the subscribed {@link URL URLs}
  *
  * @since 2.7.5
  */

File: dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/EtcdClient.java
Patch:
@@ -53,7 +53,7 @@ public interface EtcdClient {
     /**
      * save the specified path to the etcd registry.
      * if node disconnect from etcd, it will be deleted
-     * automatically by etcd when sessian timeout.
+     * automatically by etcd when session timeout.
      *
      * @param path the path to be saved
      * @return the lease of current path.

File: dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClientWrapper.java
Patch:
@@ -314,7 +314,7 @@ public void createPersistent(String path) {
     /**
      * create new ephemeral path save to etcd .
      * if node disconnect from etcd, it will be deleted
-     * automatically by etcd when sessian timeout.
+     * automatically by etcd when session timeout.
      *
      * @param path the path to be saved
      * @return the lease of current path.

File: dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaClient.java
Patch:
@@ -159,7 +159,7 @@ protected void doDisConnect() throws Throwable {
 
     @Override
     protected void doClose() throws Throwable {
-        //release mina resouces.
+        //release mina resources.
     }
 
     @Override

File: dubbo-compatible/src/test/java/org/apache/dubbo/generic/GenericServiceTest.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.dubbo.service.DemoServiceImpl;
 
 import com.alibaba.fastjson.JSON;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -184,7 +183,7 @@ Map<String, Object> createComplexObject(FullServiceDefinition fullServiceDefinit
             }
         }
         Assertions.assertEquals(topTypeDefinition.getProperties().get("v").getType(), "long");
-        Assertions.assertEquals(topTypeDefinition.getProperties().get("maps").getType(), "java.util.Map<java.lang.String, java.lang.String>");
+        Assertions.assertEquals(topTypeDefinition.getProperties().get("maps").getType(), "java.util.Map<java.lang.String,java.lang.String>");
         Assertions.assertEquals(topTypeDefinition.getProperties().get("innerObject").getType(), "org.apache.dubbo.service.ComplexObject$InnerObject");
         Assertions.assertEquals(topTypeDefinition.getProperties().get("intList").getType(), "java.util.List<java.lang.Integer>");
         Assertions.assertEquals(topTypeDefinition.getProperties().get("strArrays").getType(), "java.lang.String[]");

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java
Patch:
@@ -38,8 +38,7 @@
  * @export
  */
 public class ServiceBean<T> extends ServiceConfig<T> implements InitializingBean, DisposableBean,
-        ApplicationContextAware, BeanNameAware,
-        ApplicationEventPublisherAware {
+        ApplicationContextAware, BeanNameAware, ApplicationEventPublisherAware {
 
 
     private static final long serialVersionUID = 213195494150089726L;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/TypeDefinitionBuilder.java
Patch:
@@ -29,6 +29,8 @@
 import java.util.List;
 import java.util.Map;
 
+import static org.apache.dubbo.common.utils.ClassUtils.isSimpleType;
+
 /**
  * 2015/1/27.
  */
@@ -55,7 +57,7 @@ public static TypeDefinition build(Type type, Class<?> clazz, Map<Class<?>, Type
             td = DefaultTypeBuilder.build(clazz, typeCache);
             td.setTypeBuilderName(DefaultTypeBuilder.class.getName());
         }
-        if (clazz.equals(String.class)) {
+        if (isSimpleType(clazz)) { // changed since 2.7.6
             td.setProperties(null);
         }
         return td;

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/definition/ServiceDefinitionBuilderTest.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * 2018/11/6
  */
-public class ServiceDefinitionBuildderTest {
+public class ServiceDefinitionBuilderTest {
 
     @Test
     public void testBuilderComplextObject() {
@@ -77,7 +77,7 @@ void checkComplextObjectAsParam(FullServiceDefinition fullServiceDefinition) {
             }
         }
         Assertions.assertEquals(topTypeDefinition.getProperties().get("v").getType(), "long");
-        Assertions.assertEquals(topTypeDefinition.getProperties().get("maps").getType(), "java.util.Map<java.lang.String, java.lang.String>");
+        Assertions.assertEquals(topTypeDefinition.getProperties().get("maps").getType(), "java.util.Map<java.lang.String,java.lang.String>");
         Assertions.assertEquals(topTypeDefinition.getProperties().get("innerObject").getType(), ComplexObject.InnerObject.class.getName());
         Assertions.assertEquals(topTypeDefinition.getProperties().get("intList").getType(), "java.util.List<java.lang.Integer>");
         Assertions.assertEquals(topTypeDefinition.getProperties().get("strArrays").getType(), "java.lang.String[]");

File: dubbo-metadata/dubbo-metadata-definition-protobuf/src/test/java/org/apache/dubbo/metadata/definition/protobuf/ProtobufTypeBuilderTest.java
Patch:
@@ -66,8 +66,8 @@ public void testProtobufBuilder() {
         assertThat(propertiesMap.containsKey("phone"), is(true));
         assertThat(propertiesMap.get("phone").getType(), equalTo("java.util.List<org.apache.dubbo.metadata.definition.protobuf.model.GooglePB$PhoneNumber>"));
         assertThat(propertiesMap.containsKey("doubleMap"), is(true));
-        assertThat(propertiesMap.get("doubleMap").getType(), equalTo("java.util.Map<java.lang.String, org.apache.dubbo.metadata.definition.protobuf.model.GooglePB$PhoneNumber>"));
+        assertThat(propertiesMap.get("doubleMap").getType(), equalTo("java.util.Map<java.lang.String,org.apache.dubbo.metadata.definition.protobuf.model.GooglePB$PhoneNumber>"));
         assertThat(propertiesMap.get("bytesList").getType(), equalTo("java.util.List<com.google.protobuf.ByteString>"));
-        assertThat(propertiesMap.get("bytesMap").getType(), equalTo("java.util.Map<java.lang.String, com.google.protobuf.ByteString>"));
+        assertThat(propertiesMap.get("bytesMap").getType(), equalTo("java.util.Map<java.lang.String,com.google.protobuf.ByteString>"));
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -276,7 +276,7 @@ protected void checkInvokers(List<Invoker<T>> invokers, Invocation invocation) {
         if (CollectionUtils.isEmpty(invokers)) {
             throw new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER, "Failed to invoke the method "
                     + invocation.getMethodName() + " in the service " + getInterface().getName()
-                    + ". No provider available for the service " + directory.getUrl().getServiceKey()
+                    + ". No provider available for the service " + directory.getConsumerUrl().getServiceKey()
                     + " from registry " + directory.getUrl().getAddress()
                     + " on the consumer " + NetUtils.getLocalHost()
                     + " using the dubbo version " + Version.getVersion()

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/config/DubboConfigBeanCustomizer.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.config.spring.context.config;
 
 import org.apache.dubbo.config.AbstractConfig;
-import org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigBindingBeanPostProcessor;
 import org.apache.dubbo.config.spring.context.properties.DubboConfigBinder;
 
 import com.alibaba.spring.context.config.ConfigurationBeanCustomizer;
@@ -33,7 +32,6 @@
  * are executed orderly, thus the subclass should be aware to implement the {@link #getOrder()} method.
  *
  * @see DubboConfigBinder#bind(String, AbstractConfig)
- * @see DubboConfigBindingBeanPostProcessor
  * @since 2.6.6
  */
 public interface DubboConfigBeanCustomizer extends ConfigurationBeanCustomizer, Ordered {

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/RpcContextTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc;
 
 import org.apache.dubbo.common.URL;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboLifecycleComponentRegistrar.java
Patch:
@@ -30,7 +30,10 @@
  * A {@link ImportBeanDefinitionRegistrar register} for the {@link Lifecycle Dubbo Lifecycle} components
  *
  * @since 2.7.5
+ * @deprecated as 2.7.6,  Dubbo {@link Lifecycle} components will be registered automatically. Current class may be
+ * removed in the future
  */
+@Deprecated
 public class DubboLifecycleComponentRegistrar implements ImportBeanDefinitionRegistrar {
 
     @Override

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java
Patch:
@@ -43,7 +43,6 @@
 @Documented
 @EnableDubboConfig
 @DubboComponentScan
-@EnableDubboLifecycle
 public @interface EnableDubbo {
 
     /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/config/NamePropertyDefaultValueDubboConfigBeanCustomizer.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring.context.config;
 
 import org.apache.dubbo.config.AbstractConfig;
+import org.apache.dubbo.config.spring.beans.factory.config.DubboConfigDefaultPropertyValueBeanPostProcessor;
 
 import org.springframework.util.ReflectionUtils;
 
@@ -32,7 +33,9 @@
  * if absent.
  *
  * @since 2.6.6
+ * @deprecated As 2.7.6, use {@link DubboConfigDefaultPropertyValueBeanPostProcessor}
  */
+@Deprecated
 public class NamePropertyDefaultValueDubboConfigBeanCustomizer implements DubboConfigBeanCustomizer {
 
     /**

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -413,7 +413,7 @@ private ExchangeClient[] getClients(URL url) {
         if (connections == 0) {
             useShareConnect = true;
 
-            /**
+            /*
              * The xml configuration should have a higher priority than properties.
              */
             String shareConnectionsStr = url.getParameter(SHARE_CONNECTIONS_KEY, (String) null);
@@ -480,7 +480,7 @@ private List<ReferenceCountExchangeClient> getSharedClient(URL url, int connectN
                 }
             }
 
-            /**
+            /*
              * I understand that the purpose of the remove operation here is to avoid the expired url key
              * always occupying this memory space.
              */
@@ -650,7 +650,7 @@ private void closeReferenceCountExchangeClient(ReferenceCountExchangeClient clie
             client.close(ConfigurationUtils.getServerShutdownTimeout());
 
             // TODO
-            /**
+            /*
              * At this time, ReferenceCountExchangeClient#client has been replaced with LazyConnectExchangeClient.
              * Do you need to call client.close again to ensure that LazyConnectExchangeClient is also closed?
              */

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Directory.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.rpc.cluster;
 
 import org.apache.dubbo.common.Node;
+import org.apache.dubbo.common.URL;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcException;
@@ -48,4 +49,6 @@ public interface Directory<T> extends Node {
 
     List<Invoker<T>> getAllInvokers();
 
+    URL getConsumerUrl();
+
 }
\ No newline at end of file

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvoker.java
Patch:
@@ -58,7 +58,7 @@ public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, L
         List<Invoker<T>> copyInvokers = invokers;
         checkInvokers(copyInvokers, invocation);
         String methodName = RpcUtils.getMethodName(invocation);
-        int len = getUrl().getMethodParameter(methodName, RETRIES_KEY, DEFAULT_RETRIES) + 1;
+        int len = getConsumerUrl().getMethodParameter(methodName, RETRIES_KEY, DEFAULT_RETRIES) + 1;
         if (len <= 0) {
             len = 1;
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvoker.java
Patch:
@@ -65,8 +65,8 @@ public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, L
         try {
             checkInvokers(invokers, invocation);
             final List<Invoker<T>> selected;
-            final int forks = getUrl().getParameter(FORKS_KEY, DEFAULT_FORKS);
-            final int timeout = getUrl().getParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT);
+            final int forks = getConsumerUrl().getParameter(FORKS_KEY, DEFAULT_FORKS);
+            final int timeout = getConsumerUrl().getParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT);
             if (forks <= 0 || forks >= invokers.size()) {
                 selected = invokers;
             } else {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java
Patch:
@@ -63,7 +63,7 @@ public MergeableClusterInvoker(Directory<T> directory) {
     @Override
     protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
         checkInvokers(invokers, invocation);
-        String merger = getUrl().getMethodParameter(invocation.getMethodName(), MERGER_KEY);
+        String merger = getConsumerUrl().getMethodParameter(invocation.getMethodName(), MERGER_KEY);
         if (ConfigUtils.isEmpty(merger)) { // If a method doesn't have a merger, only invoke one Group
             for (final Invoker<T> invoker : invokers) {
                 if (invoker.isAvailable()) {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/StickyTest.java
Patch:
@@ -59,9 +59,11 @@ public class StickyTest {
     @BeforeEach
     public void setUp() throws Exception {
         dic = mock(Directory.class);
+
         invocation = new RpcInvocation();
 
         given(dic.getUrl()).willReturn(url);
+        given(dic.getConsumerUrl()).willReturn(url);
         given(dic.list(invocation)).willReturn(invokers);
         given(dic.getInterface()).willReturn(StickyTest.class);
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.utils.NetUtils;
-import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
@@ -66,6 +65,7 @@ public class AbstractClusterInvokerTest {
     StaticDirectory<IHelloService> dic;
     RpcInvocation invocation = new RpcInvocation();
     URL url = URL.valueOf("registry://localhost:9090/org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService?refer=" + URL.encode("application=abstractClusterInvokerTest"));
+    URL tmpUrl = url.removeParameter(REFER_KEY).removeParameter(MONITOR_KEY);
 
     Invoker<IHelloService> invoker1;
     Invoker<IHelloService> invoker2;
@@ -124,6 +124,7 @@ public void setUp() throws Exception {
 
         invokers.add(invoker1);
         dic = new StaticDirectory<IHelloService>(url, invokers, null);
+
         cluster = new AbstractClusterInvoker(dic) {
             @Override
             protected Result doInvoke(Invocation invocation, List invokers, LoadBalance loadbalance)
@@ -225,8 +226,6 @@ public void testSelect_multiInvokers() throws Exception {
     @Test
     public void testCloseAvailablecheck() {
         LoadBalance lb = mock(LoadBalance.class);
-        Map<String, String> queryMap = StringUtils.parseQueryString(url.getParameterAndDecoded(REFER_KEY));
-        URL tmpUrl = url.addParameters(queryMap).removeParameter(MONITOR_KEY);
         given(lb.select(invokers, tmpUrl, invocation)).willReturn(invoker1);
         initlistsize5();
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailSafeClusterInvokerTest.java
Patch:
@@ -60,6 +60,7 @@ public void setUp() throws Exception {
         dic = mock(Directory.class);
 
         given(dic.getUrl()).willReturn(url);
+        given(dic.getConsumerUrl()).willReturn(url);
         given(dic.list(invocation)).willReturn(invokers);
         given(dic.getInterface()).willReturn(DemoService.class);
         invocation.setMethodName("method1");
@@ -103,6 +104,7 @@ public void testNoInvoke() {
         dic = mock(Directory.class);
 
         given(dic.getUrl()).willReturn(url);
+        given(dic.getConsumerUrl()).willReturn(url);
         given(dic.list(invocation)).willReturn(null);
         given(dic.getInterface()).willReturn(DemoService.class);
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvokerTest.java
Patch:
@@ -70,6 +70,7 @@ public void setUp() throws Exception {
 
         dic = mock(Directory.class);
         given(dic.getUrl()).willReturn(url);
+        given(dic.getConsumerUrl()).willReturn(url);
         given(dic.list(invocation)).willReturn(invokers);
         given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);
 
@@ -128,6 +129,7 @@ public void testNoInvoke() {
         dic = mock(Directory.class);
 
         given(dic.getUrl()).willReturn(url);
+        given(dic.getConsumerUrl()).willReturn(url);
         given(dic.list(invocation)).willReturn(null);
         given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvokerTest.java
Patch:
@@ -59,6 +59,7 @@ public void setUp() throws Exception {
         dic = mock(Directory.class);
 
         given(dic.getUrl()).willReturn(url);
+        given(dic.getConsumerUrl()).willReturn(url);
         given(dic.list(invocation)).willReturn(invokers);
         given(dic.getInterface()).willReturn(FailfastClusterInvokerTest.class);
 
@@ -104,6 +105,7 @@ public void testNoInvoke() {
         dic = mock(Directory.class);
 
         given(dic.getUrl()).willReturn(url);
+        given(dic.getConsumerUrl()).willReturn(url);
         given(dic.list(invocation)).willReturn(null);
         given(dic.getInterface()).willReturn(FailfastClusterInvokerTest.class);
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvokerTest.java
Patch:
@@ -68,6 +68,7 @@ public void setUp() throws Exception {
         dic = mock(Directory.class);
 
         given(dic.getUrl()).willReturn(url);
+        given(dic.getConsumerUrl()).willReturn(url);
         given(dic.list(invocation)).willReturn(invokers);
         given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);
         invocation.setMethodName("method1");
@@ -146,6 +147,7 @@ public void testNoInvoke() {
         dic = mock(Directory.class);
 
         given(dic.getUrl()).willReturn(url);
+        given(dic.getConsumerUrl()).willReturn(url);
         given(dic.list(invocation)).willReturn(null);
         given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);
         invocation.setMethodName("method1");

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvokerTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.cluster.Directory;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -57,6 +58,7 @@ public void setUp() throws Exception {
         dic = mock(Directory.class);
 
         given(dic.getUrl()).willReturn(url);
+        given(dic.getConsumerUrl()).willReturn(url);
         given(dic.list(invocation)).willReturn(invokers);
         given(dic.getInterface()).willReturn(ForkingClusterInvokerTest.class);
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -419,7 +419,7 @@ private <T> Invoker<T> doRefer(Cluster cluster, Registry registry, Class<T> type
         directory.setRegistry(registry);
         directory.setProtocol(protocol);
         // all attributes of REFER_KEY
-        Map<String, String> parameters = new HashMap<String, String>(directory.getUrl().getParameters());
+        Map<String, String> parameters = new HashMap<String, String>(directory.getConsumerUrl().getParameters());
         URL subscribeUrl = new URL(CONSUMER_PROTOCOL, parameters.remove(REGISTER_IP_KEY), 0, type.getName(), parameters);
         if (directory.isShouldRegister()) {
             directory.setRegisteredConsumerUrl(subscribeUrl);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyInvoker.java
Patch:
@@ -82,7 +82,7 @@ public void destroy() {
     public Result invoke(Invocation invocation) throws RpcException {
         try {
             Object value = doInvoke(proxy, invocation.getMethodName(), invocation.getParameterTypes(), invocation.getArguments());
-            CompletableFuture<Object> future = wrapWithFuture(value, invocation);
+			CompletableFuture<Object> future = wrapWithFuture(value);
             CompletableFuture<AppResponse> appResponseFuture = future.handle((obj, t) -> {
                 AppResponse result = new AppResponse();
                 if (t != null) {
@@ -107,7 +107,7 @@ public Result invoke(Invocation invocation) throws RpcException {
         }
     }
 
-    private CompletableFuture<Object> wrapWithFuture (Object value, Invocation invocation) {
+	private CompletableFuture<Object> wrapWithFuture(Object value) {
         if (RpcContext.getContext().isAsyncStarted()) {
             return ((AsyncContextImpl)(RpcContext.getContext().getAsyncContext())).getInternalFuture();
         } else if (value instanceof CompletableFuture) {

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/legacy/SelectTelnetHandler.java
Patch:
@@ -51,7 +51,7 @@ public String telnet(Channel channel, String message) {
         if (!StringUtils.isInteger(message) || Integer.parseInt(message) < 1 || Integer.parseInt(message) > methodList.size()) {
             return "Illegal index ,please input select 1~" + methodList.size();
         }
-        Method method = methodList.get(Integer.parseInt(message));
+        Method method = methodList.get(Integer.parseInt(message) - 1);
         channel.setAttribute(SELECT_METHOD_KEY, method);
         channel.setAttribute(SELECT_KEY, Boolean.TRUE);
         String invokeMessage = (String) channel.getAttribute(InvokeTelnetHandler.INVOKE_MESSAGE_KEY);

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/InvokerTelnetHandlerTest.java
Patch:
@@ -150,6 +150,8 @@ public void testInvokeOverriddenMethodBySelect() throws RemotingException {
         result = select.telnet(mockChannel, "1");
         //result dependent on method order.
         assertTrue(result.contains("result: 8") || result.contains("result: \"Dubbo\""));
+        result = select.telnet(mockChannel, "2");
+        assertTrue(result.contains("result: 8") || result.contains("result: \"Dubbo\""));
     }
 
     @Test

File: dubbo-rpc/dubbo-rpc-http/src/main/java/org/apache/dubbo/rpc/protocol/http/JsonRemoteInvocation.java
Patch:
@@ -17,9 +17,10 @@
 
 package org.apache.dubbo.rpc.protocol.http;
 
-import org.aopalliance.intercept.MethodInvocation;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.rpc.RpcContext;
+
+import org.aopalliance.intercept.MethodInvocation;
 import org.springframework.remoting.support.RemoteInvocation;
 
 import java.lang.reflect.InvocationTargetException;
@@ -44,7 +45,7 @@ public JsonRemoteInvocation(MethodInvocation methodInvocation) {
     public Object invoke(Object targetObject) throws NoSuchMethodException, IllegalAccessException,
             InvocationTargetException {
         RpcContext context = RpcContext.getContext();
-        context.setAttachments((Map<String, String>) getAttribute(DUBBO_ATTACHMENTS_ATTR_NAME));
+        context.setAttachments((Map<String, Object>) getAttribute(DUBBO_ATTACHMENTS_ATTR_NAME));
 
         String generic = (String) getAttribute(GENERIC_KEY);
         if (StringUtils.isNotEmpty(generic)) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -357,7 +357,7 @@ private T createProxy(Map<String, String> map) {
             metadataService.publishServiceDefinition(consumerURL);
         }
         // create service proxy
-        return (T) PROXY_FACTORY.getProxy(invoker);
+        return (T) PROXY_FACTORY.getProxy(invoker, ProtocolUtils.isGeneric(generic));
     }
 
     /**

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java
Patch:
@@ -107,7 +107,7 @@ public <T> T get(ReferenceConfigBase<T> referenceConfig) {
         String key = generator.generateKey(referenceConfig);
         Class<?> type = referenceConfig.getInterfaceClass();
 
-        proxies.computeIfAbsent(type, _t -> new ConcurrentHashMap());
+        proxies.computeIfAbsent(type, _t -> new ConcurrentHashMap<>());
 
         ConcurrentMap<String, Object> proxiesOfType = proxies.get(type);
         proxiesOfType.computeIfAbsent(key, _k -> {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Constants.java
Patch:
@@ -70,6 +70,8 @@ public interface Constants {
 
     String TOKEN_KEY = "token";
 
+    String INTERFACE = "interface";
+
     String INTERFACES = "interfaces";
 
     String GENERIC_KEY = "generic";

File: dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/MonitorFilter.java
Patch:
@@ -83,7 +83,7 @@ public void setMonitorFactory(MonitorFactory monitorFactory) {
     @Override
     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
         if (invoker.getUrl().hasParameter(MONITOR_KEY)) {
-            invocation.setAttachment(MONITOR_FILTER_START_TIME, String.valueOf(System.currentTimeMillis()));
+            invocation.put(MONITOR_FILTER_START_TIME, System.currentTimeMillis());
             getConcurrent(invoker, invocation).incrementAndGet(); // count up
         }
         return invoker.invoke(invocation); // proceed invocation chain
@@ -98,15 +98,15 @@ private AtomicInteger getConcurrent(Invoker<?> invoker, Invocation invocation) {
     @Override
     public void onMessage(Result result, Invoker<?> invoker, Invocation invocation) {
         if (invoker.getUrl().hasParameter(MONITOR_KEY)) {
-            collect(invoker, invocation, result, RpcContext.getContext().getRemoteHost(), Long.valueOf((String) invocation.getAttachment(MONITOR_FILTER_START_TIME)), false);
+            collect(invoker, invocation, result, RpcContext.getContext().getRemoteHost(), (long) invocation.get(MONITOR_FILTER_START_TIME), false);
             getConcurrent(invoker, invocation).decrementAndGet(); // count down
         }
     }
 
     @Override
     public void onError(Throwable t, Invoker<?> invoker, Invocation invocation) {
         if (invoker.getUrl().hasParameter(MONITOR_KEY)) {
-            collect(invoker, invocation, null, RpcContext.getContext().getRemoteHost(), Long.valueOf((String) invocation.getAttachment(MONITOR_FILTER_START_TIME)), true);
+            collect(invoker, invocation, null, RpcContext.getContext().getRemoteHost(), (long) invocation.get(MONITOR_FILTER_START_TIME), true);
             getConcurrent(invoker, invocation).decrementAndGet(); // count down
         }
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -356,7 +356,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r
                         if (argument.getType() != null && argument.getType().length() > 0) {
                             Method[] methods = interfaceClass.getMethods();
                             // visit all methods
-                            if (methods != null && methods.length > 0) {
+                            if (methods.length > 0) {
                                 for (int i = 0; i < methods.length; i++) {
                                     String methodName = methods[i].getName();
                                     // target the method, and get its signature
@@ -636,7 +636,7 @@ private Integer findConfigedPorts(ProtocolConfig protocolConfig,
             if (portToBind == null || portToBind == 0) {
                 portToBind = defaultPort;
             }
-            if (portToBind == null || portToBind <= 0) {
+            if (portToBind <= 0) {
                 portToBind = getRandomPort(name);
                 if (portToBind == null || portToBind < 0) {
                     portToBind = getAvailablePort(defaultPort);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -642,6 +642,7 @@ private void useRegistryAsConfigCenterIfNecessary() {
                     }
                     cc.getParameters().put(CLIENT_KEY, registryConfig.getClient());
                     cc.setProtocol(registryConfig.getProtocol());
+                    cc.setPort(registryConfig.getPort());
                     cc.setAddress(registryConfig.getAddress());
                     cc.setNamespace(registryConfig.getGroup());
                     cc.setUsername(registryConfig.getUsername());

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -168,9 +168,7 @@ public interface CommonConstants {
 
     String REVISION_KEY = "revision";
 
-    String METADATA_REVISION = "metadata.revision";
-
-    String METADATA_KEY = "metadata";
+    String METADATA_KEY = "metadata-type";
 
     String DEFAULT_METADATA_STORAGE_TYPE = "local";
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -36,6 +36,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DUMP_DIRECTORY;
 import static org.apache.dubbo.common.constants.CommonConstants.HOST_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.METADATA_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
 import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP;
 import static org.apache.dubbo.common.constants.QosConstants.QOS_ENABLE;
@@ -419,6 +420,7 @@ public boolean isValid() {
         return !StringUtils.isEmpty(name);
     }
 
+    @Parameter(key = METADATA_KEY)
     public String getMetadataType() {
         return metadataType;
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalance.java
Patch:
@@ -93,13 +93,14 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
         WeightedRoundRobin selectedWRR = null;
         for (Invoker<T> invoker : invokers) {
             String identifyString = invoker.getUrl().toIdentityString();
-            WeightedRoundRobin weightedRoundRobin = map.get(identifyString);
             int weight = getWeight(invoker, invocation);
+            WeightedRoundRobin weightedRoundRobin = map.get(identifyString);
 
             if (weightedRoundRobin == null) {
                 weightedRoundRobin = new WeightedRoundRobin();
                 weightedRoundRobin.setWeight(weight);
                 map.putIfAbsent(identifyString, weightedRoundRobin);
+                weightedRoundRobin = map.get(identifyString);
             }
             if (weight != weightedRoundRobin.getWeight()) {
                 //weight changed

File: dubbo-configcenter/dubbo-configcenter-nacos/src/main/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfiguration.java
Patch:
@@ -260,7 +260,7 @@ public boolean publishConfig(String key, String group, String content) {
         boolean published = false;
         String resolvedGroup = resolveGroup(group);
         try {
-            String value = configService.getConfig(key, resolvedGroup, -1L);
+            String value = configService.getConfig(key, resolvedGroup, DEFAULT_TIMEOUT);
             if (StringUtils.isNotEmpty(value)) {
                 content = value + "," + content;
             }

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -532,6 +532,7 @@ public MonitorConfig getMonitor() {
         if (monitor != null) {
             return monitor;
         }
+        // FIXME: instead of return null, we should set default monitor when getMonitor() return null in ConfigManager
         return ApplicationModel.getConfigManager().getMonitor().orElse(null);
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -993,6 +993,9 @@ private ServiceInstance createServiceInstance(String serviceName, String host, i
     }
 
     public void destroy() {
+        // for compatibility purpose
+        DubboShutdownHook.destroyAll();
+
         if (started.compareAndSet(true, false)
                 && destroyed.compareAndSet(false, true)) {
             unregisterServiceInstance();

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/AdaptiveClassCodeGenerator.java
Patch:
@@ -75,7 +75,7 @@ public AdaptiveClassCodeGenerator(Class<?> type, String defaultExtName) {
     }
 
     /**
-     * test if given type has at least one method annotated with <code>SPI</code>
+     * test if given type has at least one method annotated with <code>Adaptive</code>
      */
     private boolean hasAdaptiveMethod() {
         return Arrays.stream(type.getMethods()).anyMatch(m -> m.isAnnotationPresent(Adaptive.class));

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ConsumerModel.java
Patch:
@@ -54,7 +54,6 @@ public ConsumerModel(String serviceKey
             , ReferenceConfigBase<?> referenceConfig) {
 
         Assert.notEmptyString(serviceKey, "Service name can't be null or blank");
-//        Assert.notNull(proxyObject, "Proxy object can't be null");
 
         this.serviceKey = serviceKey;
         this.proxyObject = proxyObject;
@@ -172,7 +171,7 @@ public ConsumerMethodModel getMethodModel(String method) {
     }
 
     /**
-     * @param method   metodName
+     * @param method   methodName
      * @param argsType method arguments type
      * @return
      */

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/support/SerializationOptimizer.java
Patch:
@@ -28,5 +28,5 @@ public interface SerializationOptimizer {
      *
      * @return serializable classes
      * */
-    Collection<Class> getSerializableClasses();
+    Collection<Class<?>> getSerializableClasses();
 }

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/support/SerializableClassRegistryTest.java
Patch:
@@ -32,7 +32,7 @@ public void testAddClasses() {
         SerializableClassRegistry.registerClass(SerializablePerson.class);
         SerializableClassRegistry.registerClass(Phone.class);
 
-        Map<Class, Object> registeredClasses = SerializableClassRegistry.getRegisteredClasses();
+        Map<Class<?>, Object> registeredClasses = SerializableClassRegistry.getRegisteredClasses();
         assertThat(registeredClasses.size(), equalTo(2));
     }
 }
\ No newline at end of file

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/CacheableRouterFactory.java
Patch:
@@ -30,8 +30,7 @@ public abstract class CacheableRouterFactory implements RouterFactory {
 
     @Override
     public Router getRouter(URL url) {
-        routerMap.computeIfAbsent(url.getServiceKey(), k -> createRouter(url));
-        return routerMap.get(url.getServiceKey());
+        return routerMap.computeIfAbsent(url.getServiceKey(), k -> createRouter(url));
     }
 
     protected abstract Router createRouter(URL url);

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/ThreadlessExecutor.java
Patch:
@@ -32,7 +32,7 @@
  * any thread.
  *
  * Tasks submitted to this executor through {@link #execute(Runnable)} will not get scheduled to a specific thread, though normal executors always do the schedule.
- * Those tasks are stored in a blocking queue and will only be executed when a thead calls {@link #waitAndDrain()}, the thead executing the task
+ * Those tasks are stored in a blocking queue and will only be executed when a thread calls {@link #waitAndDrain()}, the thread executing the task
  * is exactly the same as the one calling waitAndDrain.
  */
 public class ThreadlessExecutor extends AbstractExecutorService {

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -246,7 +246,7 @@ public interface CommonConstants {
     String METRICS_PROTOCOL = "metrics.protocol";
 
     /**
-     * After simplify the registry, should add some paramter individually for provider.
+     * After simplify the registry, should add some parameter individually for provider.
      *
      * @since 2.7.0
      */

File: dubbo-common/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -146,7 +146,7 @@ public class RegistryConfig extends AbstractConfig {
      */
     private Boolean simplified;
     /**
-     * After simplify the registry, should add some paramter individually. just for provider.
+     * After simplify the registry, should add some parameter individually. just for provider.
      * <p>
      * such as: extra-keys = A,b,c,d
      *

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/RegistryBuilder.java
Patch:
@@ -126,7 +126,7 @@ public class RegistryBuilder extends AbstractBuilder<RegistryConfig, RegistryBui
      */
     private Boolean simplified;
     /**
-     * After simplify the registry, should add some paramter individually. just for provider.
+     * After simplify the registry, should add some parameter individually. just for provider.
      * <p>
      * such as: extra-keys = A,b,c,d
      *

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -618,6 +618,9 @@ private void useRegistryAsConfigCenterIfNecessary() {
                     cc.setNamespace(registryConfig.getGroup());
                     cc.setUsername(registryConfig.getUsername());
                     cc.setPassword(registryConfig.getPassword());
+                    if (registryConfig.getTimeout() != null) {
+                        cc.setTimeout(registryConfig.getTimeout().longValue());
+                    }
                     cc.setHighestPriority(false);
                     configManager.addConfigCenter(cc);
                 });

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Constants.java
Patch:
@@ -52,8 +52,8 @@ public interface Constants {
     String DEFAULT_CHARSET = "UTF-8";
 
     /**
-     * Every heartbeat duration / HEATBEAT_CHECK_TICK, check if a heartbeat should be sent. Every heartbeat timeout
-     * duration / HEATBEAT_CHECK_TICK, check if a connection should be closed on server side, and if reconnect on
+     * Every heartbeat duration / HEARTBEAT_CHECK_TICK, check if a heartbeat should be sent. Every heartbeat timeout
+     * duration / HEARTBEAT_CHECK_TICK, check if a connection should be closed on server side, and if reconnect on
      * client side
      */
     int HEARTBEAT_CHECK_TICK = 3;

File: dubbo-common/src/main/java/org/apache/dubbo/config/ReferenceConfigBase.java
Patch:
@@ -136,6 +136,9 @@ public void completeCompoundConfigs() {
             if (monitor == null) {
                 setMonitor(consumer.getMonitor());
             }
+            if (StringUtils.isEmpty(registryIds)) {
+                setRegistryIds(consumer.getRegistryIds());
+            }
         }
         if (module != null) {
             if (registries == null) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -207,7 +207,7 @@ public synchronized void export() {
     }
 
     private void checkAndUpdateSubConfigs() {
-        // Use default configs defined explicitly on global scope
+        // Use default configs defined explicitly with global scope
         completeCompoundConfigs();
         checkDefault();
         checkProtocol();

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ReflectUtils;
 import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.config.AbstractServiceConfig;
 import org.apache.dubbo.config.ArgumentConfig;
 import org.apache.dubbo.config.ConsumerConfig;
 import org.apache.dubbo.config.MethodConfig;
@@ -176,7 +177,7 @@ private static BeanDefinition parse(Element element, ParserContext parserContext
                                 RegistryConfig registryConfig = new RegistryConfig();
                                 registryConfig.setAddress(RegistryConfig.NO_AVAILABLE);
                                 beanDefinition.getPropertyValues().addPropertyValue(beanProperty, registryConfig);
-                            } else if ("provider".equals(property) || "registry".equals(property) || ("protocol".equals(property) && ServiceBean.class.equals(beanClass))) {
+                            } else if ("provider".equals(property) || "registry".equals(property) || ("protocol".equals(property) && AbstractServiceConfig.class.isAssignableFrom(beanClass))) {
                                 /**
                                  * For 'provider' 'protocol' 'registry', keep literal value (should be id/name) and set the value to 'registryIds' 'providerIds' protocolIds'
                                  * The following process should make sure each id refers to the corresponding instance, here's how to find the instance for different use cases:

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboLifecycleComponentRegistrar.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring.context.annotation;
 
 import org.apache.dubbo.common.context.Lifecycle;
+import org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener;
 import org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener;
 
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
@@ -35,5 +36,6 @@ public class DubboLifecycleComponentRegistrar implements ImportBeanDefinitionReg
     @Override
     public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {
         registerBeans(registry, DubboLifecycleComponentApplicationListener.class);
+        registerBeans(registry, DubboBootstrapApplicationListener.class);
     }
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java
Patch:
@@ -494,7 +494,7 @@ private static boolean ipPatternContainExpression(String pattern) {
     private static void checkHostPattern(String pattern, String[] mask, boolean isIpv4) {
         if (!isIpv4) {
             if (mask.length != 8 && ipPatternContainExpression(pattern)) {
-                throw new IllegalArgumentException("If you config ip expression that contains '*' or '-', please fill qulified ip pattern like 234e:0:4567:0:0:0:3d:*. ");
+                throw new IllegalArgumentException("If you config ip expression that contains '*' or '-', please fill qualified ip pattern like 234e:0:4567:0:0:0:3d:*. ");
             }
             if (mask.length != 8 && !pattern.contains("::")) {
                 throw new IllegalArgumentException("The host is ipv6, but the pattern is not ipv6 pattern : " + pattern);

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java
Patch:
@@ -1204,7 +1204,7 @@ public static Set<ParameterizedType> findParameterizedTypes(Class<?> sourceClass
     }
 
     /**
-     * Find the hierarchical types form the source {@link Class class} by specified {@link Class type}.
+     * Find the hierarchical types from the source {@link Class class} by specified {@link Class type}.
      *
      * @param sourceClass the source {@link Class class}
      * @param matchType   the type to match

File: dubbo-common/src/main/java/org/apache/dubbo/common/Version.java
Patch:
@@ -172,7 +172,7 @@ public static String getVersion(Class<?> cls, String defaultVersion) {
                 }
             }
 
-            // guess version fro jar file name if nothing's found from MANIFEST.MF
+            // guess version from jar file name if nothing's found from MANIFEST.MF
             CodeSource codeSource = cls.getProtectionDomain().getCodeSource();
             if (codeSource == null) {
                 logger.info("No codeSource for class " + cls.getName() + " when getVersion, use default version " + defaultVersion);

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ApplicationModel.java
Patch:
@@ -77,7 +77,7 @@ public static ConsumerModel getConsumerModel(String serviceKey) {
 
     private static final ExtensionLoader<FrameworkExt> loader = ExtensionLoader.getExtensionLoader(FrameworkExt.class);
 
-    public static void iniFrameworkExts() {
+    public static void initFrameworkExts() {
         Set<FrameworkExt> exts = ExtensionLoader.getExtensionLoader(FrameworkExt.class).getSupportedExtensionInstances();
         for (FrameworkExt ext : exts) {
             ext.initialize();

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
Patch:
@@ -498,7 +498,7 @@ private void initialize() {
             return;
         }
 
-        ApplicationModel.iniFrameworkExts();
+        ApplicationModel.initFrameworkExts();
 
         startConfigCenter();
 

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java
Patch:
@@ -77,7 +77,7 @@ public class NettyClient extends AbstractClient {
      */
     public NettyClient(final URL url, final ChannelHandler handler) throws RemotingException {
     	// you can customize name and type of client thread pool by THREAD_NAME_KEY and THREADPOOL_KEY in CommonConstants.
-    	// the handler will be warped: MultiMessageHandler->HeartbeatHandler->handler
+    	// the handler will be wrapped: MultiMessageHandler->HeartbeatHandler->handler
     	super(url, wrapChannelHandler(url, handler));
     }
 

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java
Patch:
@@ -76,7 +76,7 @@ public class NettyServer extends AbstractServer implements RemotingServer {
 
     public NettyServer(URL url, ChannelHandler handler) throws RemotingException {
         // you can customize name and type of client thread pool by THREAD_NAME_KEY and THREADPOOL_KEY in CommonConstants.
-        // the handler will be warped: MultiMessageHandler->HeartbeatHandler->handler
+        // the handler will be wrapped: MultiMessageHandler->HeartbeatHandler->handler
         super(ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME), ChannelHandlers.wrap(handler, url));
     }
 

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/Server.java
Patch:
@@ -90,8 +90,8 @@ public void start() throws Throwable {
         ServerBootstrap serverBootstrap = new ServerBootstrap();
         serverBootstrap.group(boss, worker);
         serverBootstrap.channel(NioServerSocketChannel.class);
+        serverBootstrap.option(ChannelOption.SO_REUSEADDR, true);
         serverBootstrap.childOption(ChannelOption.TCP_NODELAY, true);
-        serverBootstrap.childOption(ChannelOption.SO_REUSEADDR, true);
         serverBootstrap.childHandler(new ChannelInitializer<Channel>() {
 
             @Override

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java
Patch:
@@ -98,8 +98,8 @@ protected void doOpen() throws Throwable {
 
         bootstrap.group(bossGroup, workerGroup)
                 .channel(NioServerSocketChannel.class)
+                .option(ChannelOption.SO_REUSEADDR, Boolean.TRUE)
                 .childOption(ChannelOption.TCP_NODELAY, Boolean.TRUE)
-                .childOption(ChannelOption.SO_REUSEADDR, Boolean.TRUE)
                 .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)
                 .childHandler(new ChannelInitializer<NioSocketChannel>() {
                     @Override

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/javassist/JavassistProxyFactory.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dubbo.rpc.proxy.InvokerInvocationHandler;
 
 /**
- * JavaassistRpcProxyFactory
+ * JavassistRpcProxyFactory
  */
 public class JavassistProxyFactory extends AbstractProxyFactory {
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvoker.java
Patch:
@@ -133,7 +133,7 @@ protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, Load
                 method = returnType.getMethod(merger, returnType);
             } catch (NoSuchMethodException e) {
                 throw new RpcException("Can not merge result because missing method [ " + merger + " ] in class [ " +
-                        returnType.getClass().getName() + " ]");
+                        returnType.getName() + " ]");
             }
             if (!Modifier.isPublic(method.getModifiers())) {
                 method.setAccessible(true);

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -262,6 +262,8 @@ public interface CommonConstants {
 
     String GENERIC_SERIALIZATION_PROTOBUF = "protobuf-json";
 
+    String GENERIC_WITH_CLZ_KEY = "generic.include.class";
+
     /**
      * The limit of callback service instances for one interface on every client
      */

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ServiceRepository.java
Patch:
@@ -129,7 +129,8 @@ public MethodDescriptor lookupMethod(String interfaceName, String methodName) {
         if (serviceDescriptor == null) {
             return null;
         }
-        Set<MethodDescriptor> methods = serviceDescriptor.getMethods(methodName);
+
+        List<MethodDescriptor> methods = serviceDescriptor.getMethods(methodName);
         if (CollectionUtils.isEmpty(methods)) {
             return null;
         }

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/UrlUtilsTest.java
Patch:
@@ -61,7 +61,7 @@ public void testParseUrl() {
     @Test
     public void testParseURLWithSpecial() {
         String address = "127.0.0.1:2181?backup=127.0.0.1:2182,127.0.0.1:2183";
-        assertEquals("dubbo://" + address,UrlUtils.parseURL(address, null).toString());
+        assertEquals("dubbo://" + address, UrlUtils.parseURL(address, null).toString());
     }
 
     @Test

File: dubbo-common/src/main/java/org/apache/dubbo/config/ProtocolConfig.java
Patch:
@@ -120,7 +120,7 @@ public class ProtocolConfig extends AbstractConfig {
     private String accesslog;
 
     /**
-     * Transfort
+     * Transporter
      */
     private String transporter;
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/ProtocolBuilder.java
Patch:
@@ -112,7 +112,7 @@ public class ProtocolBuilder extends AbstractBuilder<ProtocolConfig, ProtocolBui
     private String accesslog;
 
     /**
-     * Transfort
+     * Transporter
      */
     private String transporter;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationUtils.java
Patch:
@@ -74,7 +74,7 @@ public static String getProperty(String property, String defaultValue) {
     public static Map<String, String> parseProperties(String content) throws IOException {
         Map<String, String> map = new HashMap<>();
         if (StringUtils.isEmpty(content)) {
-            logger.warn("You specified the config centre, but there's not even one single config item in it.");
+            logger.warn("You specified the config center, but there's not even one single config item in it.");
         } else {
             Properties properties = new Properties();
             properties.load(new StringReader(content));

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/nop/NopDynamicConfiguration.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.SortedSet;
 
 /**
- * The default extension of {@link DynamicConfiguration}. If user does not specify a config centre, or specifies one
+ * The default extension of {@link DynamicConfiguration}. If user does not specify a config center, or specifies one
  * that is not a valid extension, it will default to this one.
  */
 @Deprecated

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/RegistryStatusCheckerTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.registry.RegistryFactory;
 import org.apache.dubbo.registry.status.RegistryStatusChecker;
 import org.apache.dubbo.registry.support.AbstractRegistryFactory;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -45,7 +46,7 @@ public class RegistryStatusCheckerTest {
 
     @BeforeEach
     public void setUp() {
-        AbstractRegistryFactory.destroyAll();
+        AbstractRegistryFactory.clearRegistryNotDestroy();
     }
 
     @Test
@@ -55,6 +56,7 @@ public void testCheckUnknown() {
 
     @Test
     public void testCheckOK() {
+        ApplicationModel.setApplication("testCheckOK");
         ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension().getRegistry(registryUrl);
         ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension().getRegistry(registryUrl2);
         assertEquals(Status.Level.OK, new RegistryStatusChecker().check().getLevel());

File: dubbo-common/src/main/java/org/apache/dubbo/config/ServiceConfigBase.java
Patch:
@@ -462,4 +462,4 @@ protected void computeValidRegistryIds() {
 
     public abstract boolean isUnexported();
 
-}
+}
\ No newline at end of file

File: dubbo-common/src/main/java/org/apache/dubbo/config/AbstractReferenceConfig.java
Patch:
@@ -59,7 +59,7 @@ public abstract class AbstractReferenceConfig extends AbstractInterfaceConfig {
     /**
      * Lazy create connection
      */
-    protected Boolean lazy = false;
+    protected Boolean lazy;
 
     protected String reconnect;
 

File: dubbo-common/src/main/java/org/apache/dubbo/config/ServiceConfigBase.java
Patch:
@@ -462,4 +462,4 @@ protected void computeValidRegistryIds() {
 
     public abstract boolean isUnexported();
 
-}
\ No newline at end of file
+}

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -292,4 +292,6 @@ public interface CommonConstants {
 
     String INTERFACES = "interfaces";
 
+    String SSL_ENABLED_KEY = "ssl-enabled";
+
 }

File: dubbo-common/src/main/java/org/apache/dubbo/config/ProtocolConfig.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Map;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SSL_ENABLED_KEY;
 import static org.apache.dubbo.config.Constants.PROTOCOLS_SUFFIX;
 
 /**
@@ -476,6 +477,7 @@ public void setDefault(Boolean isDefault) {
         this.isDefault = isDefault;
     }
 
+    @Parameter(key = SSL_ENABLED_KEY)
     public Boolean getSslEnabled() {
         return sslEnabled;
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.RegistryConfig;
+import org.apache.dubbo.config.SslConfig;
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;
 import org.apache.dubbo.config.support.Parameter;
@@ -92,6 +93,7 @@ private void prepareDubboConfigBeans() {
         beansOfTypeIncludingAncestors(applicationContext, ConfigCenterBean.class);
         beansOfTypeIncludingAncestors(applicationContext, MetadataReportConfig.class);
         beansOfTypeIncludingAncestors(applicationContext, MetricsConfig.class);
+        beansOfTypeIncludingAncestors(applicationContext, SslConfig.class);
     }
 
     @Override

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
+import org.apache.dubbo.config.SslConfig;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
 
 import com.alibaba.spring.beans.factory.annotation.EnableConfigurationBeanBinding;
@@ -64,7 +65,8 @@ public class DubboConfigConfiguration {
             @EnableConfigurationBeanBinding(prefix = "dubbo.consumer", type = ConsumerConfig.class),
             @EnableConfigurationBeanBinding(prefix = "dubbo.config-center", type = ConfigCenterBean.class),
             @EnableConfigurationBeanBinding(prefix = "dubbo.metadata-report", type = MetadataReportConfig.class),
-            @EnableConfigurationBeanBinding(prefix = "dubbo.metrics", type = MetricsConfig.class)
+            @EnableConfigurationBeanBinding(prefix = "dubbo.metrics", type = MetricsConfig.class),
+            @EnableConfigurationBeanBinding(prefix = "dubbo.ssl", type = SslConfig.class)
     })
     public static class Single {
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
+import org.apache.dubbo.config.SslConfig;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
 import org.apache.dubbo.config.spring.ReferenceBean;
 import org.apache.dubbo.config.spring.ServiceBean;
@@ -62,6 +63,7 @@ public void init() {
         registerBeanDefinitionParser("metadata-report", new DubboBeanDefinitionParser(MetadataReportConfig.class, true));
         registerBeanDefinitionParser("monitor", new DubboBeanDefinitionParser(MonitorConfig.class, true));
         registerBeanDefinitionParser("metrics", new DubboBeanDefinitionParser(MetricsConfig.class, true));
+        registerBeanDefinitionParser("ssl", new DubboBeanDefinitionParser(SslConfig.class, true));
         registerBeanDefinitionParser("provider", new DubboBeanDefinitionParser(ProviderConfig.class, true));
         registerBeanDefinitionParser("consumer", new DubboBeanDefinitionParser(ConsumerConfig.class, true));
         registerBeanDefinitionParser("protocol", new DubboBeanDefinitionParser(ProtocolConfig.class, true));

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java
Patch:
@@ -43,7 +43,7 @@
 import java.net.InetSocketAddress;
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
-import static org.apache.dubbo.remoting.Constants.SSL_ENABLED_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SSL_ENABLED_KEY;
 
 /**
  * NettyClient.

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java
Patch:
@@ -49,7 +49,7 @@
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.apache.dubbo.common.constants.CommonConstants.IO_THREADS_KEY;
-import static org.apache.dubbo.remoting.Constants.SSL_ENABLED_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SSL_ENABLED_KEY;
 
 /**
  * NettyServer.

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -216,9 +216,9 @@ public synchronized void init() {
             }
         }
         map.put(INTERFACE_KEY, interfaceName);
-        AbstractConfig.appendParameters(map, metrics);
-        AbstractConfig.appendParameters(map, application);
-        AbstractConfig.appendParameters(map, module);
+        AbstractConfig.appendParameters(map, getMetrics());
+        AbstractConfig.appendParameters(map, getApplication());
+        AbstractConfig.appendParameters(map, getModule());
         // remove 'default.' prefix for configs from ConsumerConfig
         // appendParameters(map, consumer, Constants.DEFAULT_KEY);
         AbstractConfig.appendParameters(map, consumer);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -326,9 +326,9 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r
         map.put(SIDE_KEY, PROVIDER_SIDE);
 
         ServiceConfig.appendRuntimeParameters(map);
-        AbstractConfig.appendParameters(map, metrics);
-        AbstractConfig.appendParameters(map, application);
-        AbstractConfig.appendParameters(map, module);
+        AbstractConfig.appendParameters(map, getMetrics());
+        AbstractConfig.appendParameters(map, getApplication());
+        AbstractConfig.appendParameters(map, getModule());
         // remove 'default.' prefix for configs from ProviderConfig
         // appendParameters(map, provider, Constants.DEFAULT_KEY);
         AbstractConfig.appendParameters(map, provider);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.config.annotation.Service;
 import org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent;
 import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;
+import org.apache.dubbo.config.support.Parameter;
 
 import org.springframework.aop.support.AopUtils;
 import org.springframework.beans.factory.BeanNameAware;
@@ -98,6 +99,7 @@ public void afterPropertiesSet() throws Exception {
      * @return {@link ServiceBean}'s name
      * @since 2.6.5
      */
+    @Parameter(excluded = true)
     public String getBeanName() {
         return this.beanName;
     }

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/AdaptiveClassCodeGeneratorTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.io.InputStreamReader;
 import java.net.URL;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * {@link AdaptiveClassCodeGenerator} Test
@@ -42,7 +42,7 @@ public void testGenerate() throws IOException {
         URL url = getClass().getResource("/org/apache/dubbo/common/extension/adaptive/HasAdaptiveExt$Adaptive");
         try (InputStream inputStream = url.openStream()) {
             String content = IOUtils.read(new InputStreamReader(inputStream, "UTF-8"));
-            assertEquals(content, value);
+            assertTrue(content.contains(value));
         }
     }
 }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvokerTest.java
Patch:
@@ -28,8 +28,6 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import java.lang.reflect.InvocationHandler;
-import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.ArrayList;
 import java.util.Arrays;

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/store/RemoteWritableMeatadataServiceTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.NetUtils;
-import org.apache.dubbo.metadata.WritableMetadataService;
 import org.apache.dubbo.metadata.definition.model.FullServiceDefinition;
 import org.apache.dubbo.metadata.report.MetadataReportInstance;
 import org.apache.dubbo.metadata.report.identifier.KeyTypeEnum;
@@ -34,8 +33,6 @@
 
 import java.util.Map;
 
-import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_METADATA_STORAGE_TYPE;
-
 /**
  * 2018/9/14
  */

File: dubbo-metadata/dubbo-metadata-report-etcd/src/test/java/org/apache/dubbo/metadata/store/etcd/EtcdMetadataReportTest.java
Patch:
@@ -34,7 +34,6 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import java.net.URI;

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractServer.java
Patch:
@@ -35,7 +35,6 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;
-import static org.apache.dubbo.common.constants.CommonConstants.THREADS_KEY;
 import static org.apache.dubbo.remoting.Constants.ACCEPTS_KEY;
 import static org.apache.dubbo.remoting.Constants.DEFAULT_ACCEPTS;
 import static org.apache.dubbo.remoting.Constants.DEFAULT_IDLE_TIMEOUT;

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ApplicationModel.java
Patch:
@@ -124,4 +124,5 @@ public static void reset() {
         getConfigManager().destroy();
         getEnvironment().destroy();
     }
+
 }

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ConsumerModel.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Set;
 
 /**
- * This model is bind to your reference's configuration, for example, group, version or method level configuration.
+ * This model is bound to your reference's configuration, for example, group, version or method level configuration.
  */
 public class ConsumerModel {
     private final String serviceKey;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractInterfaceConfigTest.java
Patch:
@@ -57,12 +57,13 @@ public void tearMethodAfterEachUT() {
 
     @Test
     public void testCheckRegistry1() {
-        System.setProperty("dubbo.registry.address", "addr1|addr2");
+        System.setProperty("dubbo.registry.address", "addr1");
         try {
             InterfaceConfig interfaceConfig = new InterfaceConfig();
             interfaceConfig.setApplication(new ApplicationConfig("testCheckRegistry1"));
             interfaceConfig.checkRegistry();
-            Assertions.assertEquals(2, interfaceConfig.getRegistries().size());
+            Assertions.assertEquals(1, interfaceConfig.getRegistries().size());
+            Assertions.assertEquals("addr1", interfaceConfig.getRegistries().get(0).getAddress());
         } finally {
             System.clearProperty("dubbo.registry.address");
         }

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessorTest.java
Patch:
@@ -82,7 +82,7 @@ public ReferenceAnnotationBeanPostProcessor referenceAnnotationBeanPostProcessor
     private HelloService helloServiceImpl;
 
     // #4 ReferenceBean (Field Injection #2)
-    @Reference(id = "helloService", methods = @Method(name = "sayName", timeout = 100))
+    @Reference(id = "helloService", methods = @Method(name = "sayHello", timeout = 100))
     private HelloService helloService;
 
     // #5 ReferenceBean (Field Injection #3)

File: dubbo-filter/dubbo-filter-cache/src/test/java/org/apache/dubbo/cache/support/jcache/JCacheFactoryTest.java
Patch:
@@ -22,11 +22,12 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.RpcInvocation;
+
 import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.junit.jupiter.api.Assertions.assertNull;
-import static org.hamcrest.MatcherAssert.assertThat;
 
 public class JCacheFactoryTest extends AbstractCacheFactoryTest {
 
@@ -38,7 +39,7 @@ public void testJCacheFactory() throws Exception {
 
     @Test
     public void testJCacheGetExpired() throws Exception {
-        URL url = URL.valueOf("test://test:12/test?cache=jacache&.cache.write.expire=1");
+        URL url = URL.valueOf("test://test:12/test?cache=jacache&cache.write.expire=1");
         AbstractCacheFactory cacheFactory = getCacheFactory();
         Invocation invocation = new RpcInvocation();
         Cache cache = cacheFactory.getCache(url, invocation);

File: dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/filter/ValidationFilterTest.java
Patch:
@@ -49,7 +49,7 @@ public void setUp() throws Exception {
 
     @Test
     public void testItWithNotExistClass() throws Exception {
-        URL url = URL.valueOf("test://test:11/test?default.validation=true");
+        URL url = URL.valueOf("test://test:11/test?validation=true");
 
         given(validation.getValidator(url)).willThrow(new IllegalStateException("Not found class test, cause: test"));
         given(invoker.invoke(invocation)).willReturn(new AppResponse("success"));
@@ -67,7 +67,7 @@ public void testItWithNotExistClass() throws Exception {
 
     @Test
     public void testItWithExistClass() throws Exception {
-        URL url = URL.valueOf("test://test:11/test?default.validation=true");
+        URL url = URL.valueOf("test://test:11/test?validation=true");
 
         given(validation.getValidator(url)).willReturn(validator);
         given(invoker.invoke(invocation)).willReturn(new AppResponse("success"));
@@ -121,7 +121,7 @@ public void testItWhileMethodNameStartWithDollar() throws Exception {
     @Test
     public void testItWhileThrowoutRpcException() throws Exception {
         Assertions.assertThrows(RpcException.class, () -> {
-            URL url = URL.valueOf("test://test:11/test?default.validation=true");
+            URL url = URL.valueOf("test://test:11/test?validation=true");
 
             given(validation.getValidator(url)).willThrow(new RpcException("rpc exception"));
             given(invoker.invoke(invocation)).willReturn(new AppResponse("success"));

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/ChangeTelnetHandlerTest.java
Patch:
@@ -86,8 +86,8 @@ public void testChangeSimpleName() throws RemotingException {
     @Test
     public void testChangeName() throws RemotingException {
         DubboProtocol.getDubboProtocol().export(mockInvoker);
-        String result = change.telnet(mockChannel, "org.apache.dubbo.rpc.protocol.dubbo.support.DemoService");
-        assertEquals("Used the org.apache.dubbo.rpc.protocol.dubbo.support.DemoService as default.\r\nYou can cancel default service by command: cd /",
+        String result = change.telnet(mockChannel, "org.apache.dubbo.qos.legacy.service.DemoService");
+        assertEquals("Used the org.apache.dubbo.qos.legacy.service.DemoService as default.\r\nYou can cancel default service by command: cd /",
                 result);
     }
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/InvokerTelnetHandlerTest.java
Patch:
@@ -130,7 +130,7 @@ public void testOverriddenMethodWithSpecifyParamType() throws RemotingException
 
         registerProvider(DemoService.class.getName(), new DemoServiceImpl(), DemoService.class);
 
-        String result = invoke.telnet(mockChannel, "getPerson({\"name\":\"zhangsan\",\"age\":12,\"class\":\"org.apache.dubbo.rpc.protocol.dubbo.support.Person\"})");
+        String result = invoke.telnet(mockChannel, "getPerson({\"name\":\"zhangsan\",\"age\":12,\"class\":\"org.apache.dubbo.qos.legacy.service.Person\"})");
         assertTrue(result.contains("result: 12"));
     }
 

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/RegistryDirectoryTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance;
 import org.apache.dubbo.rpc.cluster.router.script.ScriptRouterFactory;
 import org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker;
+import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.service.GenericService;
 
 import org.junit.jupiter.api.Assertions;
@@ -91,7 +92,7 @@ public class RegistryDirectoryTest {
 
     @BeforeEach
     public void setUp() {
-
+        ApplicationModel.setApplication("RegistryDirectoryTest");
     }
 
     private RegistryDirectory getRegistryDirectory(URL url) {

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolTest.java
Patch:
@@ -271,7 +271,7 @@ public void testRemoteApplicationName() {
     private void registerProvider(URL url, Object impl, Class<?> interfaceClass) {
         ServiceDescriptor serviceDescriptor = repository.registerService(interfaceClass);
         repository.registerProvider(
-                url.getPathKey(),
+                url.getServiceKey(),
                 impl,
                 serviceDescriptor,
                 null,

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/configcenter/DynamicConfigurationFactoryTest.java
Patch:
@@ -34,6 +34,6 @@ public class DynamicConfigurationFactoryTest {
     public void testDefaultExtension() {
         DynamicConfigurationFactory factory = getExtensionLoader(DynamicConfigurationFactory.class).getDefaultExtension();
         assertEquals(NopDynamicConfigurationFactory.class, factory.getClass());
-        assertEquals(factory, getExtensionLoader(DynamicConfigurationFactory.class).getExtension("nop"));
+        assertEquals(NopDynamicConfigurationFactory.class, getExtensionLoader(DynamicConfigurationFactory.class).getExtension("nop").getClass());
     }
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/StackTest.java
Patch:
@@ -22,9 +22,9 @@
 
 import java.util.EmptyStackException;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
 
 public class StackTest {
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/NacosDubboServiceProviderBootstrap.java
Patch:
@@ -34,7 +34,7 @@ public static void main(String[] args) {
         DubboBootstrap.getInstance()
                 .application(applicationConfig)
                 // Zookeeper in service registry type
-                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service"))
+                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service").useAsConfigCenter(true))
                 // Nacos
 //                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry.type=service"))
 //                .registry(RegistryBuilder.newBuilder().address("etcd3://127.0.0.1:2379?registry.type=service").build())

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/ConfigTest.java
Patch:
@@ -839,7 +839,7 @@ public void testSystemPropertyOverrideProperties() throws Exception {
                 URL url = service.getExportedUrls().get(0);
                 // from api
                 assertEquals("aaa", url.getParameter("application"));
-                // from dubbo.properties
+                // from dubbo-binder.properties
                 assertEquals("world", url.getParameter("owner"));
                 // from system property
                 assertEquals(1234, url.getPort());

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/properties/DefaultDubboConfigBinderTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@TestPropertySource(locations = "classpath:/dubbo.properties")
+@TestPropertySource(locations = "classpath:/dubbo-binder.properties")
 @ContextConfiguration(classes = DefaultDubboConfigBinder.class)
 public class DefaultDubboConfigBinderTest {
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java
Patch:
@@ -109,15 +109,15 @@ public void testAppendProperties3() throws Exception {
     @Test
     public void testAppendParameters1() throws Exception {
         Map<String, String> parameters = new HashMap<String, String>();
-        parameters.put("default.num", "one");
         parameters.put("num", "ONE");
         AbstractConfig.appendParameters(parameters, new ParameterConfig(1, "hello/world", 30, "password"), "prefix");
         Assertions.assertEquals("one", parameters.get("prefix.key.1"));
         Assertions.assertEquals("two", parameters.get("prefix.key.2"));
-        Assertions.assertEquals("ONE,one,1", parameters.get("prefix.num"));
+        Assertions.assertEquals("ONE,1", parameters.get("prefix.num"));
         Assertions.assertEquals("hello%2Fworld", parameters.get("prefix.naming"));
         Assertions.assertEquals("30", parameters.get("prefix.age"));
-        Assertions.assertFalse(parameters.containsKey("prefix.key-2"));
+        Assertions.assertTrue(parameters.containsKey("prefix.key-2"));
+        Assertions.assertTrue(parameters.containsKey("prefix.key.2"));
         Assertions.assertFalse(parameters.containsKey("prefix.secret"));
     }
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.config.api.DemoService;
 import org.apache.dubbo.config.provider.impl.DemoServiceImpl;
-import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
@@ -34,12 +33,12 @@ public class ReferenceConfigTest {
 
     @BeforeEach
     public void setUp() {
-        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.getConfigManager().clear();
     }
 
     @AfterEach
     public void tearDown() {
-        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.getConfigManager().clear();
     }
 
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
-import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.service.GenericService;
 
 import org.junit.jupiter.api.AfterEach;
@@ -125,12 +124,12 @@ public void setUp() throws Exception {
         delayService.setMethods(Collections.singletonList(method));
         delayService.setDelay(100);
 
-        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.getConfigManager().clear();
     }
 
     @AfterEach
     public void tearDown() {
-        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.getConfigManager().clear();
     }
 
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/cache/CacheTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.dubbo.config.ServiceConfig;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -49,12 +48,12 @@ public class CacheTest {
 
     @BeforeEach
     public void setUp() {
-        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.getConfigManager().clear();
     }
 
     @AfterEach
     public void tearDown() {
-        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.getConfigManager().clear();
     }
 
     private void testCache(String type) throws Exception {

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/ExporterSideConfigUrlTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeAll;
@@ -44,12 +43,12 @@ public static void start() {
     @BeforeEach
     public void setUp() {
         initServConf();
-        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.getConfigManager().clear();
     }
 
     @AfterEach()
     public void teardown() {
-        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.getConfigManager().clear();
     }
 
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/InvokerSideConfigUrlTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.api.DemoService;
 import org.apache.dubbo.config.mock.MockRegistry;
-import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeAll;
@@ -137,13 +136,13 @@ public static void start() {
     public void setUp() {
         initServConf();
         initRefConf();
-        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.getConfigManager().clear();
     }
 
     @AfterEach()
     public void teardown() {
         //RegistryServer.reloadCache();
-        ApplicationModel.getConfigManager().clear();
+//        ApplicationModel.getConfigManager().clear();
     }
 
 

File: dubbo-registry/dubbo-registry-consul/src/main/java/org/apache/dubbo/registry/consul/ConsulServiceDiscovery.java
Patch:
@@ -306,7 +306,7 @@ public void run() {
         }
 
         private void processService() {
-            Response<List<HealthService>> response = getHealthServices(serviceName, -1, Integer.MAX_VALUE);
+            Response<List<HealthService>> response = getHealthServices(serviceName, consulIndex, Integer.MAX_VALUE);
             Long currentIndex = response.getConsulIndex();
             if (currentIndex != null && currentIndex > consulIndex) {
                 consulIndex = currentIndex;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -130,7 +130,7 @@ protected Invoker<T> select(LoadBalance loadbalance, Invocation invocation,
         if (CollectionUtils.isEmpty(invokers)) {
             return null;
         }
-        String methodName = invocation == null ? StringUtils.EMPTY : invocation.getMethodName();
+        String methodName = invocation == null ? StringUtils.EMPTY_STRING : invocation.getMethodName();
 
         boolean sticky = invokers.get(0).getUrl()
                 .getMethodParameter(methodName, CLUSTER_STICKY_KEY, DEFAULT_CLUSTER_STICKY);

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/file/FileSystemDynamicConfiguration.java
Patch:
@@ -368,7 +368,7 @@ public boolean publishConfig(String key, String group, String content) {
     }
 
     @Override
-    public SortedSet<String> getConfigKeys(String group, String key) {
+    public SortedSet<String> getConfigKeys(String group) {
         File[] files = groupDirectory(group).listFiles(File::isFile);
         if (files == null) {
             return new TreeSet<>();

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/nop/NopDynamicConfiguration.java
Patch:
@@ -66,7 +66,7 @@ public boolean publishConfig(String key, String group, String content) {
      * @since 2.7.5
      */
     @Override
-    public SortedSet<String> getConfigKeys(String group, String key) {
+    public SortedSet<String> getConfigKeys(String group) {
         return null;
     }
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/wrapper/CompositeDynamicConfiguration.java
Patch:
@@ -78,8 +78,8 @@ public boolean publishConfig(String key, String group, String content) throws Un
 
     @Override
     @SuppressWarnings("unchecked")
-    public SortedSet<String> getConfigKeys(String group, String key) throws UnsupportedOperationException {
-        return (SortedSet<String>) iterateConfigOperation(configuration -> configuration.getConfigKeys(group, key));
+    public SortedSet<String> getConfigKeys(String group) throws UnsupportedOperationException {
+        return (SortedSet<String>) iterateConfigOperation(configuration -> configuration.getConfigKeys(group));
     }
 
     private void iterateListenerOperation(Consumer<DynamicConfiguration> consumer) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/configcenter/AbstractDynamicConfigurationTest.java
Patch:
@@ -111,7 +111,7 @@ public void testPublishConfig() {
 
     @Test
     public void testGetConfigKeys() {
-        assertThrows(UnsupportedOperationException.class, () -> configuration.getConfigKeys(null, null), "No support");
+        assertThrows(UnsupportedOperationException.class, () -> configuration.getConfigKeys(null), "No support");
     }
 
     @Test

File: dubbo-configcenter/dubbo-configcenter-consul/src/main/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfiguration.java
Patch:
@@ -46,6 +46,7 @@
 
 import static org.apache.dubbo.common.config.configcenter.Constants.CONFIG_NAMESPACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_SEPARATOR;
+import static org.apache.dubbo.common.utils.StringUtils.EMPTY_STRING;
 
 /**
  * config center implementation for consul
@@ -95,9 +96,9 @@ public String getConfig(String key, String group, long timeout) throws IllegalSt
     }
 
     @Override
-    public SortedSet<String> getConfigKeys(String group, String key) throws UnsupportedOperationException {
+    public SortedSet<String> getConfigKeys(String group) throws UnsupportedOperationException {
         SortedSet<String> configKeys = new TreeSet<>();
-        String normalizedKey = convertKey(group, key);
+        String normalizedKey = convertKey(group, EMPTY_STRING);
         List<String> keys = kvClient.getKeys(normalizedKey);
         if (CollectionUtils.isNotEmpty(keys)) {
             keys.stream()

File: dubbo-configcenter/dubbo-configcenter-nacos/src/test/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfigurationTest.java
Patch:
@@ -106,7 +106,7 @@ public void testGetConfigKeys() {
         put("key1", "a");
         put("key2", "b");
 
-        SortedSet<String> keys = config.getConfigKeys(DynamicConfiguration.DEFAULT_GROUP, null);
+        SortedSet<String> keys = config.getConfigKeys(DynamicConfiguration.DEFAULT_GROUP);
 
         Assertions.assertFalse(keys.isEmpty());
 

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/test/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationTest.java
Patch:
@@ -149,7 +149,7 @@ public void testGetConfigKeysAndContents() {
         assertTrue(configuration.publishConfig(key, group, content));
         assertTrue(configuration.publishConfig(key2, group, content));
 
-        Set<String> configKeys = configuration.getConfigKeys(group, key);
+        Set<String> configKeys = configuration.getConfigKeys(group);
 
         assertEquals(new TreeSet(asList(content)), configKeys);
     }

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/textui/TTree.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Scanner;
 
 import static java.lang.System.currentTimeMillis;
-import static org.apache.dubbo.common.utils.StringUtils.EMPTY;
+import static org.apache.dubbo.common.utils.StringUtils.EMPTY_STRING;
 import static org.apache.dubbo.common.utils.StringUtils.length;
 import static org.apache.dubbo.common.utils.StringUtils.repeat;
 
@@ -87,7 +87,7 @@ public void callback(int deep, boolean isLast, String prefix, Node node) {
                         } else {
                             treeSB.append(prefix)
                                     .append(repeat(' ', stepStringLength))
-                                    .append(hasChild ? "|" : EMPTY)
+                                    .append(hasChild ? "|" : EMPTY_STRING)
                                     .append(repeat(' ', costPrefixLength))
                                     .append(scanner.nextLine())
                                     .append(System.lineSeparator());

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/FileSystemServiceDiscovery.java
Patch:
@@ -45,7 +45,7 @@
 import static com.alibaba.fastjson.JSON.toJSONString;
 import static java.lang.String.format;
 import static java.nio.channels.FileChannel.open;
-import static org.apache.dubbo.common.config.configcenter.DynamicConfiguration.DEFAULT_MAPPING_GROUP;
+import static org.apache.dubbo.common.config.configcenter.DynamicConfiguration.DEFAULT_GROUP;
 import static org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration.CONFIG_CENTER_DIR_PARAM_NAME;
 
 /**
@@ -80,7 +80,7 @@ private void registerDubboShutdownHook() {
 
     private void registerListener() {
         getServices().forEach(serviceName -> {
-            dynamicConfiguration.getConfigKeys(DEFAULT_MAPPING_GROUP, serviceName).forEach(serviceInstanceId -> {
+            dynamicConfiguration.getConfigKeys(DEFAULT_GROUP).forEach(serviceInstanceId -> {
                 dynamicConfiguration.addListener(serviceInstanceId, serviceName, this::onConfigChanged);
             });
         });
@@ -121,7 +121,7 @@ private String getServiceName(ServiceInstance serviceInstance) {
 
     @Override
     public List<ServiceInstance> getInstances(String serviceName) {
-        return dynamicConfiguration.getConfigKeys(DEFAULT_MAPPING_GROUP, serviceName)
+        return dynamicConfiguration.getConfigKeys(DEFAULT_GROUP)
                 .stream()
                 .map(serviceInstanceId -> dynamicConfiguration.getConfig(serviceInstanceId, serviceName))
                 .map(content -> JSON.parseObject(content, DefaultServiceInstance.class))

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapter.java
Patch:
@@ -24,8 +24,7 @@
 import java.lang.annotation.Annotation;
 import java.util.Map;
 
-import static org.apache.dubbo.config.spring.util.AnnotationUtils.getAttributes;
-import static org.apache.dubbo.config.spring.util.AnnotationUtils.resolvePlaceholders;
+import static com.alibaba.spring.util.AnnotationUtils.getAttributes;
 
 /**
  * {@link Annotation} {@link PropertyValues} Adapter
@@ -46,7 +45,7 @@ class AnnotationPropertyValuesAdapter implements PropertyValues {
      */
     public AnnotationPropertyValuesAdapter(Map<String, Object> attributes, PropertyResolver propertyResolver,
                                            String... ignoreAttributeNames) {
-        this.delegate = new MutablePropertyValues(resolvePlaceholders(attributes, propertyResolver, ignoreAttributeNames));
+        this.delegate = new MutablePropertyValues(getAttributes(attributes, propertyResolver, ignoreAttributeNames));
     }
 
     public AnnotationPropertyValuesAdapter(Annotation annotation, PropertyResolver propertyResolver,

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigAliasPostProcessor.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
 
-import static org.apache.dubbo.config.spring.util.BeanRegistrar.hasAlias;
+import static com.alibaba.spring.util.BeanRegistrar.hasAlias;
 import static org.springframework.util.ObjectUtils.nullSafeEquals;
 import static org.springframework.util.StringUtils.hasText;
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java
Patch:
@@ -63,9 +63,9 @@
 import java.util.Map;
 import java.util.Set;
 
+import static com.alibaba.spring.util.ObjectUtils.of;
 import static org.apache.dubbo.config.spring.beans.factory.annotation.ServiceBeanNameBuilder.create;
-import static org.apache.dubbo.config.spring.util.AnnotationUtils.resolveServiceInterfaceClass;
-import static org.apache.dubbo.config.spring.util.ObjectUtils.of;
+import static org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveServiceInterfaceClass;
 import static org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition;
 import static org.springframework.context.annotation.AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR;
 import static org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotation;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceBeanNameBuilder.java
Patch:
@@ -25,8 +25,8 @@
 import org.springframework.core.env.Environment;
 import org.springframework.util.StringUtils;
 
-import static org.apache.dubbo.config.spring.util.AnnotationUtils.getAttribute;
-import static org.apache.dubbo.config.spring.util.AnnotationUtils.resolveInterfaceName;
+import static com.alibaba.spring.util.AnnotationUtils.getAttribute;
+import static org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveInterfaceName;
 import static org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes;
 
 /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboComponentScanRegistrar.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.config.annotation.Service;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor;
-import org.apache.dubbo.config.spring.util.BeanRegistrar;
 
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.config.BeanDefinition;
@@ -37,6 +36,7 @@
 import java.util.LinkedHashSet;
 import java.util.Set;
 
+import static com.alibaba.spring.util.BeanRegistrar.registerInfrastructureBean;
 import static org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition;
 
 /**
@@ -87,7 +87,7 @@ private void registerServiceAnnotationBeanPostProcessor(Set<String> packagesToSc
     private void registerReferenceAnnotationBeanPostProcessor(BeanDefinitionRegistry registry) {
 
         // Register @Reference Annotation Bean Processor
-        BeanRegistrar.registerInfrastructureBean(registry,
+        registerInfrastructureBean(registry,
                 ReferenceAnnotationBeanPostProcessor.BEAN_NAME, ReferenceAnnotationBeanPostProcessor.class);
 
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigBindingsRegistrar.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.config.AbstractConfig;
 
+import com.alibaba.spring.beans.factory.annotation.ConfigurationBeanBindingsRegister;
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.context.EnvironmentAware;
 import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
@@ -33,7 +34,9 @@
  * @see EnableDubboConfigBindings
  * @see DubboConfigBindingRegistrar
  * @since 2.5.8
+ * @deprecated it will be removed in future, please use {@link ConfigurationBeanBindingsRegister} for replacement
  */
+@Deprecated
 public class DubboConfigBindingsRegistrar implements ImportBeanDefinitionRegistrar, EnvironmentAware {
 
     private ConfigurableEnvironment environment;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java
Patch:
@@ -25,8 +25,8 @@
 import org.springframework.core.annotation.AnnotationAttributes;
 import org.springframework.core.type.AnnotationMetadata;
 
-import static org.apache.dubbo.config.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
-import static org.apache.dubbo.config.spring.util.BeanRegistrar.registerInfrastructureBean;
+import static com.alibaba.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
+import static com.alibaba.spring.util.BeanRegistrar.registerInfrastructureBean;
 
 /**
  * Dubbo {@link AbstractConfig Config} {@link ImportBeanDefinitionRegistrar register}, which order can be configured

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboLifecycleComponentRegistrar.java
Patch:
@@ -23,7 +23,7 @@
 import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
 import org.springframework.core.type.AnnotationMetadata;
 
-import static org.apache.dubbo.config.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
+import static com.alibaba.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
 
 /**
  * A {@link ImportBeanDefinitionRegistrar register} for the {@link Lifecycle Dubbo Lifecycle} components

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/config/NamePropertyDefaultValueDubboConfigBeanCustomizer.java
Patch:
@@ -24,7 +24,7 @@
 import java.lang.reflect.Method;
 import java.util.Arrays;
 
-import static org.apache.dubbo.config.spring.util.ObjectUtils.of;
+import static com.alibaba.spring.util.ObjectUtils.of;
 import static org.springframework.beans.BeanUtils.getPropertyDescriptor;
 
 /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/properties/DefaultDubboConfigBinder.java
Patch:
@@ -23,7 +23,7 @@
 
 import java.util.Map;
 
-import static org.apache.dubbo.config.spring.util.PropertySourcesUtils.getPrefixedProperties;
+import static com.alibaba.spring.util.PropertySourcesUtils.getSubProperties;
 
 /**
  * Default {@link DubboConfigBinder} implementation based on Spring {@link DataBinder}
@@ -37,7 +37,7 @@ public <C extends AbstractConfig> void bind(String prefix, C dubboConfig) {
         dataBinder.setIgnoreInvalidFields(isIgnoreInvalidFields());
         dataBinder.setIgnoreUnknownFields(isIgnoreUnknownFields());
         // Get properties under specified prefix from PropertySources
-        Map<String, Object> properties = getPrefixedProperties(getPropertySources(), prefix);
+        Map<String, Object> properties = getSubProperties(getPropertySources(), prefix);
         // Convert Map to MutablePropertyValues
         MutablePropertyValues propertyValues = new MutablePropertyValues(properties);
         // Bind

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/extension/SpringExtensionFactory.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
 import org.apache.dubbo.config.DubboShutdownHook;
-import org.apache.dubbo.config.spring.util.BeanFactoryUtils;
+import org.apache.dubbo.config.spring.util.ApplicationContextUtils;
 
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.beans.factory.NoUniqueBeanDefinitionException;
@@ -49,7 +49,7 @@ public static void addApplicationContext(ApplicationContext context) {
             ((ConfigurableApplicationContext) context).registerShutdownHook();
             DubboShutdownHook.getDubboShutdownHook().unregister();
         }
-        BeanFactoryUtils.addApplicationListener(context, SHUTDOWN_HOOK_LISTENER);
+        ApplicationContextUtils.addApplicationListener(context, SHUTDOWN_HOOK_LISTENER);
     }
 
     public static void removeApplicationContext(ApplicationContext context) {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/AnnotationBeanDefinitionParser.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor;
-import org.apache.dubbo.config.spring.util.BeanRegistrar;
 
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.config.BeanDefinition;
@@ -28,12 +27,12 @@
 import org.springframework.beans.factory.xml.ParserContext;
 import org.w3c.dom.Element;
 
+import static com.alibaba.spring.util.BeanRegistrar.registerInfrastructureBean;
 import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;
 import static org.springframework.util.StringUtils.trimArrayElements;
 
 /**
  * @link BeanDefinitionParser}
- *
  * @see ServiceAnnotationBeanPostProcessor
  * @see ReferenceAnnotationBeanPostProcessor
  * @since 2.5.9
@@ -79,7 +78,7 @@ protected boolean shouldGenerateIdAsFallback() {
     private void registerReferenceAnnotationBeanPostProcessor(BeanDefinitionRegistry registry) {
 
         // Register @Reference Annotation Bean Processor
-        BeanRegistrar.registerInfrastructureBean(registry,
+        registerInfrastructureBean(registry,
                 ReferenceAnnotationBeanPostProcessor.BEAN_NAME, ReferenceAnnotationBeanPostProcessor.class);
 
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java
Patch:
@@ -53,8 +53,8 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
+import static com.alibaba.spring.util.BeanRegistrar.registerInfrastructureBean;
 import static org.apache.dubbo.common.constants.CommonConstants.HIDE_KEY_PREFIX;
-import static org.apache.dubbo.config.spring.util.BeanRegistrar.registerInfrastructureBean;
 
 /**
  * AbstractBeanDefinitionParser

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -31,16 +31,16 @@
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.apache.dubbo.config.spring.beans.factory.config.ConfigurableSourceBeanMetadataElement;
 import org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener;
-import org.apache.dubbo.config.spring.util.AnnotatedBeanDefinitionRegistryUtils;
 
+import com.alibaba.spring.util.AnnotatedBeanDefinitionRegistryUtils;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.beans.factory.xml.NamespaceHandlerSupport;
 import org.springframework.beans.factory.xml.ParserContext;
 import org.springframework.context.annotation.AnnotationConfigUtils;
 import org.w3c.dom.Element;
 
-import static org.apache.dubbo.config.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
+import static com.alibaba.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
 
 /**
  * DubboNamespaceHandler

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java
Patch:
@@ -32,10 +32,11 @@
 
 import java.util.Map;
 
-import static org.apache.dubbo.config.spring.util.BeanRegistrar.hasAlias;
+import static com.alibaba.spring.util.BeanRegistrar.hasAlias;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
+
 /**
  * {@link EnableDubboConfig} Test
  *

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/DynamicConfigurationFactory.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * The factory interface to create the instance of {@link DynamicConfiguration}
  */
-@SPI("nop")
+@SPI("file") // 2.7.5 change the default SPI implementation
 public interface DynamicConfigurationFactory {
 
     DynamicConfiguration getDynamicConfiguration(URL url);

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -62,9 +62,11 @@
 import static org.apache.dubbo.config.Constants.REGISTRIES_SUFFIX;
 
 public class ConfigManager extends LifecycleAdapter implements FrameworkExt {
-    public static final String NAME = "config";
+
     private static final Logger logger = LoggerFactory.getLogger(ConfigManager.class);
 
+    public static final String NAME = "config";
+
     private final Map<String, Map<String, AbstractConfig>> configsCache = newMap();
 
     private final ReadWriteLock lock = new ReentrantReadWriteLock();

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/NacosDubboServiceConsumerBootstrap.java
Patch:
@@ -36,7 +36,7 @@ public static void main(String[] args) throws Exception {
                 // Zookeeper
 //                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry.type=service&subscribed.services=dubbo-nacos-provider-demo"))
 //                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service&subscribed-services=dubbo-nacos-provider-demo"))
-                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service&subscribed-services=service-provider"))
+                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service&subscribed-services=dubbo-nacos-provider-demo"))
                 .metadataReport(new MetadataReportConfig("nacos://127.0.0.1:8848"))
                 .reference("user", builder -> builder.interfaceClass(UserService.class).protocol("rest"))
                 .start();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/proxy/RemoteMetadataServiceProxy.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.TreeSet;
 
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
+import static org.apache.dubbo.registry.client.metadata.URLRevisionResolver.NO_REVISION;
 
 /**
  * 2019-08-09
@@ -32,7 +33,7 @@ public RemoteMetadataServiceProxy(ServiceInstance serviceInstance) {
         this.serviceName = serviceInstance.getServiceName();
         // this is ServiceInstance of registry(Provider)
         this.revision = serviceInstance.getMetadata()
-                .getOrDefault(ServiceInstanceMetadataUtils.EXPORTED_SERVICES_REVISION_PROPERTY_NAME, "");
+                .getOrDefault(ServiceInstanceMetadataUtils.EXPORTED_SERVICES_REVISION_PROPERTY_NAME, NO_REVISION);
     }
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/proxy/MetadataServiceProxyFactory.java
Patch:
@@ -31,12 +31,11 @@
  * @since 2.7.5
  */
 @SPI(DEFAULT_METADATA_STORAGE_TYPE)
-
 public interface MetadataServiceProxyFactory {
 
     /**
      * Create a {@link MetadataService} proxy via the specified {@link ServiceInstance}
-     *WritableMetadataService
+     *
      * @param serviceInstance the instance of {@link ServiceInstance}
      * @return non-null
      */

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/proxy/RemoteMetadataServiceProxy.java
Patch:
@@ -9,14 +9,15 @@
 import org.apache.dubbo.metadata.report.identifier.MetadataIdentifier;
 import org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier;
 import org.apache.dubbo.registry.client.ServiceInstance;
-import org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils;
 
 import java.util.Collection;
 import java.util.Collections;
 import java.util.SortedSet;
 import java.util.TreeSet;
 
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
+import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.EXPORTED_SERVICES_REVISION_PROPERTY_NAME;
+import static org.apache.dubbo.registry.client.metadata.URLRevisionResolver.NO_REVISION;
 
 /**
  * 2019-08-09
@@ -31,8 +32,7 @@ public class RemoteMetadataServiceProxy implements MetadataService {
     public RemoteMetadataServiceProxy(ServiceInstance serviceInstance) {
         this.serviceName = serviceInstance.getServiceName();
         // this is ServiceInstance of registry(Provider)
-        this.revision = serviceInstance.getMetadata()
-                .getOrDefault(ServiceInstanceMetadataUtils.EXPORTED_SERVICES_REVISION_PROPERTY_NAME, "");
+        this.revision = serviceInstance.getMetadata().getOrDefault(EXPORTED_SERVICES_REVISION_PROPERTY_NAME, NO_REVISION);
     }
 
     @Override

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/store/RemoteWritableMetadataServiceDelegate.java
Patch:
@@ -1,7 +1,6 @@
 package org.apache.dubbo.metadata.store;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.config.InmemoryConfiguration;
 import org.apache.dubbo.metadata.WritableMetadataService;
 
 import java.util.SortedSet;

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/report/identifier/MetadataIdentifierTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.metadata.report.identifier;
 
 import org.apache.dubbo.metadata.MetadataConstants;
-import org.apache.dubbo.metadata.report.identifier.KeyTypeEnum;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/store/InMemoryWritableMetadataServiceTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.NetUtils;
-import org.apache.dubbo.metadata.report.MetadataReportInstance;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/store/RemoteWritableMeatadataServiceTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.NetUtils;
-import org.apache.dubbo.metadata.WritableMetadataService;
 import org.apache.dubbo.metadata.definition.model.FullServiceDefinition;
 import org.apache.dubbo.metadata.report.MetadataReportInstance;
 import org.apache.dubbo.metadata.report.identifier.KeyTypeEnum;
@@ -34,8 +33,6 @@
 
 import java.util.Map;
 
-import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_METADATA_STORAGE_TYPE;
-
 /**
  * 2018/9/14
  */

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapter.java
Patch:
@@ -24,8 +24,7 @@
 import java.lang.annotation.Annotation;
 import java.util.Map;
 
-import static org.apache.dubbo.config.spring.util.AnnotationUtils.getAttributes;
-import static org.apache.dubbo.config.spring.util.AnnotationUtils.resolvePlaceholders;
+import static com.alibaba.spring.util.AnnotationUtils.getAttributes;
 
 /**
  * {@link Annotation} {@link PropertyValues} Adapter
@@ -46,7 +45,7 @@ class AnnotationPropertyValuesAdapter implements PropertyValues {
      */
     public AnnotationPropertyValuesAdapter(Map<String, Object> attributes, PropertyResolver propertyResolver,
                                            String... ignoreAttributeNames) {
-        this.delegate = new MutablePropertyValues(resolvePlaceholders(attributes, propertyResolver, ignoreAttributeNames));
+        this.delegate = new MutablePropertyValues(getAttributes(attributes, propertyResolver, ignoreAttributeNames));
     }
 
     public AnnotationPropertyValuesAdapter(Annotation annotation, PropertyResolver propertyResolver,

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigAliasPostProcessor.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
 
-import static org.apache.dubbo.config.spring.util.BeanRegistrar.hasAlias;
+import static com.alibaba.spring.util.BeanRegistrar.hasAlias;
 import static org.springframework.util.ObjectUtils.nullSafeEquals;
 import static org.springframework.util.StringUtils.hasText;
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java
Patch:
@@ -63,9 +63,9 @@
 import java.util.Map;
 import java.util.Set;
 
+import static com.alibaba.spring.util.ObjectUtils.of;
 import static org.apache.dubbo.config.spring.beans.factory.annotation.ServiceBeanNameBuilder.create;
-import static org.apache.dubbo.config.spring.util.AnnotationUtils.resolveServiceInterfaceClass;
-import static org.apache.dubbo.config.spring.util.ObjectUtils.of;
+import static org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveServiceInterfaceClass;
 import static org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition;
 import static org.springframework.context.annotation.AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR;
 import static org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotation;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceBeanNameBuilder.java
Patch:
@@ -25,8 +25,8 @@
 import org.springframework.core.env.Environment;
 import org.springframework.util.StringUtils;
 
-import static org.apache.dubbo.config.spring.util.AnnotationUtils.getAttribute;
-import static org.apache.dubbo.config.spring.util.AnnotationUtils.resolveInterfaceName;
+import static com.alibaba.spring.util.AnnotationUtils.getAttribute;
+import static org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveInterfaceName;
 import static org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes;
 
 /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboComponentScanRegistrar.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.config.annotation.Service;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor;
-import org.apache.dubbo.config.spring.util.BeanRegistrar;
 
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.config.BeanDefinition;
@@ -37,6 +36,7 @@
 import java.util.LinkedHashSet;
 import java.util.Set;
 
+import static com.alibaba.spring.util.BeanRegistrar.registerInfrastructureBean;
 import static org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition;
 
 /**
@@ -87,7 +87,7 @@ private void registerServiceAnnotationBeanPostProcessor(Set<String> packagesToSc
     private void registerReferenceAnnotationBeanPostProcessor(BeanDefinitionRegistry registry) {
 
         // Register @Reference Annotation Bean Processor
-        BeanRegistrar.registerInfrastructureBean(registry,
+        registerInfrastructureBean(registry,
                 ReferenceAnnotationBeanPostProcessor.BEAN_NAME, ReferenceAnnotationBeanPostProcessor.class);
 
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigBindingsRegistrar.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.config.AbstractConfig;
 
+import com.alibaba.spring.beans.factory.annotation.ConfigurationBeanBindingsRegister;
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.context.EnvironmentAware;
 import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
@@ -33,7 +34,9 @@
  * @see EnableDubboConfigBindings
  * @see DubboConfigBindingRegistrar
  * @since 2.5.8
+ * @deprecated it will be removed in future, please use {@link ConfigurationBeanBindingsRegister} for replacement
  */
+@Deprecated
 public class DubboConfigBindingsRegistrar implements ImportBeanDefinitionRegistrar, EnvironmentAware {
 
     private ConfigurableEnvironment environment;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java
Patch:
@@ -25,8 +25,8 @@
 import org.springframework.core.annotation.AnnotationAttributes;
 import org.springframework.core.type.AnnotationMetadata;
 
-import static org.apache.dubbo.config.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
-import static org.apache.dubbo.config.spring.util.BeanRegistrar.registerInfrastructureBean;
+import static com.alibaba.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
+import static com.alibaba.spring.util.BeanRegistrar.registerInfrastructureBean;
 
 /**
  * Dubbo {@link AbstractConfig Config} {@link ImportBeanDefinitionRegistrar register}, which order can be configured

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboLifecycleComponentRegistrar.java
Patch:
@@ -23,7 +23,7 @@
 import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
 import org.springframework.core.type.AnnotationMetadata;
 
-import static org.apache.dubbo.config.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
+import static com.alibaba.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
 
 /**
  * A {@link ImportBeanDefinitionRegistrar register} for the {@link Lifecycle Dubbo Lifecycle} components

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/config/NamePropertyDefaultValueDubboConfigBeanCustomizer.java
Patch:
@@ -24,7 +24,7 @@
 import java.lang.reflect.Method;
 import java.util.Arrays;
 
-import static org.apache.dubbo.config.spring.util.ObjectUtils.of;
+import static com.alibaba.spring.util.ObjectUtils.of;
 import static org.springframework.beans.BeanUtils.getPropertyDescriptor;
 
 /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/properties/DefaultDubboConfigBinder.java
Patch:
@@ -23,7 +23,7 @@
 
 import java.util.Map;
 
-import static org.apache.dubbo.config.spring.util.PropertySourcesUtils.getPrefixedProperties;
+import static com.alibaba.spring.util.PropertySourcesUtils.getSubProperties;
 
 /**
  * Default {@link DubboConfigBinder} implementation based on Spring {@link DataBinder}
@@ -37,7 +37,7 @@ public <C extends AbstractConfig> void bind(String prefix, C dubboConfig) {
         dataBinder.setIgnoreInvalidFields(isIgnoreInvalidFields());
         dataBinder.setIgnoreUnknownFields(isIgnoreUnknownFields());
         // Get properties under specified prefix from PropertySources
-        Map<String, Object> properties = getPrefixedProperties(getPropertySources(), prefix);
+        Map<String, Object> properties = getSubProperties(getPropertySources(), prefix);
         // Convert Map to MutablePropertyValues
         MutablePropertyValues propertyValues = new MutablePropertyValues(properties);
         // Bind

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/extension/SpringExtensionFactory.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ConcurrentHashSet;
 import org.apache.dubbo.config.DubboShutdownHook;
-import org.apache.dubbo.config.spring.util.BeanFactoryUtils;
+import org.apache.dubbo.config.spring.util.ApplicationContextUtils;
 
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.beans.factory.NoUniqueBeanDefinitionException;
@@ -49,7 +49,7 @@ public static void addApplicationContext(ApplicationContext context) {
             ((ConfigurableApplicationContext) context).registerShutdownHook();
             DubboShutdownHook.getDubboShutdownHook().unregister();
         }
-        BeanFactoryUtils.addApplicationListener(context, SHUTDOWN_HOOK_LISTENER);
+        ApplicationContextUtils.addApplicationListener(context, SHUTDOWN_HOOK_LISTENER);
     }
 
     public static void removeApplicationContext(ApplicationContext context) {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/AnnotationBeanDefinitionParser.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor;
-import org.apache.dubbo.config.spring.util.BeanRegistrar;
 
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.config.BeanDefinition;
@@ -28,12 +27,12 @@
 import org.springframework.beans.factory.xml.ParserContext;
 import org.w3c.dom.Element;
 
+import static com.alibaba.spring.util.BeanRegistrar.registerInfrastructureBean;
 import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;
 import static org.springframework.util.StringUtils.trimArrayElements;
 
 /**
  * @link BeanDefinitionParser}
- *
  * @see ServiceAnnotationBeanPostProcessor
  * @see ReferenceAnnotationBeanPostProcessor
  * @since 2.5.9
@@ -79,7 +78,7 @@ protected boolean shouldGenerateIdAsFallback() {
     private void registerReferenceAnnotationBeanPostProcessor(BeanDefinitionRegistry registry) {
 
         // Register @Reference Annotation Bean Processor
-        BeanRegistrar.registerInfrastructureBean(registry,
+        registerInfrastructureBean(registry,
                 ReferenceAnnotationBeanPostProcessor.BEAN_NAME, ReferenceAnnotationBeanPostProcessor.class);
 
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java
Patch:
@@ -53,8 +53,8 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
+import static com.alibaba.spring.util.BeanRegistrar.registerInfrastructureBean;
 import static org.apache.dubbo.common.constants.CommonConstants.HIDE_KEY_PREFIX;
-import static org.apache.dubbo.config.spring.util.BeanRegistrar.registerInfrastructureBean;
 
 /**
  * AbstractBeanDefinitionParser

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -31,16 +31,16 @@
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.apache.dubbo.config.spring.beans.factory.config.ConfigurableSourceBeanMetadataElement;
 import org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener;
-import org.apache.dubbo.config.spring.util.AnnotatedBeanDefinitionRegistryUtils;
 
+import com.alibaba.spring.util.AnnotatedBeanDefinitionRegistryUtils;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.beans.factory.xml.NamespaceHandlerSupport;
 import org.springframework.beans.factory.xml.ParserContext;
 import org.springframework.context.annotation.AnnotationConfigUtils;
 import org.w3c.dom.Element;
 
-import static org.apache.dubbo.config.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
+import static com.alibaba.spring.util.AnnotatedBeanDefinitionRegistryUtils.registerBeans;
 
 /**
  * DubboNamespaceHandler

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java
Patch:
@@ -32,10 +32,11 @@
 
 import java.util.Map;
 
-import static org.apache.dubbo.config.spring.util.BeanRegistrar.hasAlias;
+import static com.alibaba.spring.util.BeanRegistrar.hasAlias;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
+
 /**
  * {@link EnableDubboConfig} Test
  *

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/DynamicConfigurationFactory.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * The factory interface to create the instance of {@link DynamicConfiguration}
  */
-@SPI("nop")
+@SPI("file") // 2.7.5 change the default SPI implementation
 public interface DynamicConfigurationFactory {
 
     DynamicConfiguration getDynamicConfiguration(URL url);

File: dubbo-common/src/main/java/org/apache/dubbo/config/context/ConfigManager.java
Patch:
@@ -62,9 +62,11 @@
 import static org.apache.dubbo.config.Constants.REGISTRIES_SUFFIX;
 
 public class ConfigManager extends LifecycleAdapter implements FrameworkExt {
-    public static final String NAME = "config";
+
     private static final Logger logger = LoggerFactory.getLogger(ConfigManager.class);
 
+    public static final String NAME = "config";
+
     private final Map<String, Map<String, AbstractConfig>> configsCache = newMap();
 
     private final ReadWriteLock lock = new ReentrantReadWriteLock();

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/NacosDubboServiceConsumerBootstrap.java
Patch:
@@ -36,7 +36,7 @@ public static void main(String[] args) throws Exception {
                 // Zookeeper
 //                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry.type=service&subscribed.services=dubbo-nacos-provider-demo"))
 //                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service&subscribed-services=dubbo-nacos-provider-demo"))
-                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service&subscribed-services=service-provider"))
+                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service&subscribed-services=dubbo-nacos-provider-demo"))
                 .metadataReport(new MetadataReportConfig("nacos://127.0.0.1:8848"))
                 .reference("user", builder -> builder.interfaceClass(UserService.class).protocol("rest"))
                 .start();

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericImplFilter.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.service.GenericException;
+import org.apache.dubbo.rpc.service.GenericService;
 import org.apache.dubbo.rpc.support.ProtocolUtils;
 import org.apache.dubbo.rpc.support.RpcUtils;
 
@@ -130,6 +131,7 @@ public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invoca
             String methodName = invocation.getMethodName();
             Class<?>[] parameterTypes = invocation.getParameterTypes();
             if (ProtocolUtils.isGeneric(generic)
+                    && GenericService.class != invoker.getInterface()
                     && (!$INVOKE.equals(invocation.getMethodName()) && !$INVOKE_ASYNC.equals(invocation.getMethodName()))
                     && invocation instanceof RpcInvocation) {
                 if (!appResponse.hasException()) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.InvokeMode;
 import org.apache.dubbo.rpc.RpcInvocation;
+import org.apache.dubbo.rpc.service.GenericService;
 
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
@@ -48,6 +49,7 @@ public static Class<?> getReturnType(Invocation invocation) {
         try {
             if (invocation != null && invocation.getInvoker() != null
                     && invocation.getInvoker().getUrl() != null
+                    && invocation.getInvoker().getInterface() != GenericService.class
                     && !invocation.getMethodName().startsWith("$")) {
                 String service = invocation.getInvoker().getUrl().getServiceInterface();
                 if (StringUtils.isNotEmpty(service)) {
@@ -71,6 +73,7 @@ public static Type[] getReturnTypes(Invocation invocation) {
         try {
             if (invocation != null && invocation.getInvoker() != null
                     && invocation.getInvoker().getUrl() != null
+                    && invocation.getInvoker().getInterface() != GenericService.class
                     && !invocation.getMethodName().startsWith("$")) {
                 String service = invocation.getInvoker().getUrl().getServiceInterface();
                 if (StringUtils.isNotEmpty(service)) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericImplFilter.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.service.GenericException;
+import org.apache.dubbo.rpc.service.GenericService;
 import org.apache.dubbo.rpc.support.ProtocolUtils;
 import org.apache.dubbo.rpc.support.RpcUtils;
 
@@ -130,6 +131,7 @@ public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invoca
             String methodName = invocation.getMethodName();
             Class<?>[] parameterTypes = invocation.getParameterTypes();
             if (ProtocolUtils.isGeneric(generic)
+                    && GenericService.class != invoker.getInterface()
                     && (!$INVOKE.equals(invocation.getMethodName()) && !$INVOKE_ASYNC.equals(invocation.getMethodName()))
                     && invocation instanceof RpcInvocation) {
                 if (!appResponse.hasException()) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java
Patch:
@@ -62,7 +62,7 @@ public static Class<?> getReturnType(Invocation invocation) {
                 }
             }
         } catch (Throwable t) {
-            logger.warn(t.getMessage(), t);
+            // ignore
         }
         return null;
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java
Patch:
@@ -107,6 +107,9 @@ public Service getService() {
 
     @Override
     public void onApplicationEvent(ContextRefreshedEvent event) {
+        if (event.getApplicationContext() != this.applicationContext) {
+            return;
+        }
         if (!isExported() && !isUnexported()) {
             if (logger.isInfoEnabled()) {
                 logger.info("The service ready on spring started. service: " + getInterface());

File: dubbo-common/src/main/java/org/apache/dubbo/rpc/model/ProviderModel.java
Patch:
@@ -136,6 +136,7 @@ public ProviderModel(String serviceKey,
         this(serviceKey, serviceInstance, serviceModel, serviceConfig);
 
         this.serviceMetadata = serviceMetadata;
+        initMethod(serviceModel.getServiceInterfaceClass());
     }
 
     public String getServiceName() {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -624,6 +624,8 @@ private void useRegistryForConfigIfNecessary() {
                     Map<String, String> configParams = cc.getParameters() == null ? new HashMap<>() : cc.getParameters();
                     configParams.putAll(rc.getParameters());
                     cc.setParameters(configParams);
+                } else {
+                    rc.setParameters(new HashMap<>());
                 }
                 cc.getParameters().put(org.apache.dubbo.remoting.Constants.CLIENT_KEY,rc.getClient());
                 cc.setProtocol(rc.getProtocol());

File: dubbo-bootstrap/dubbo-bootstrap-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -85,7 +85,7 @@ public ConfigurableMetadataServiceExporter export() {
             serviceConfig.setVersion(metadataService.version());
 
             // export
-            exporters = DubboBootstrap.Helper.export(serviceConfig);
+            exporters = DubboBootstrap.Helper.exportSync(serviceConfig);
             exported = true;
 
             if (logger.isInfoEnabled()) {

File: dubbo-bootstrap/dubbo-bootstrap-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessorTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config.spring.beans.factory.annotation;
 
+import org.apache.dubbo.bootstrap.ReferenceConfigCache;
 import org.apache.dubbo.config.annotation.Method;
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.config.spring.ReferenceBean;
@@ -140,7 +141,7 @@ public void testGetReferenceBeans() {
 
         ReferenceBean<?> referenceBean = referenceBeans.iterator().next();
 
-        Assert.assertNotNull(referenceBean.get());
+        Assert.assertNotNull(ReferenceConfigCache.getCache().get(referenceBean));
 
     }
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvocation.java
Patch:
@@ -23,11 +23,11 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 
 /**

File: dubbo-compatible/src/test/java/org/apache/dubbo/service/MockInvocation.java
Patch:
@@ -22,11 +22,11 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 
 /**

File: dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/DubboMonitorFactoryTest.java
Patch:
@@ -21,21 +21,21 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;
+
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 
+import static org.apache.dubbo.common.constants.CommonConstants.REFERENCE_FILTER_KEY;
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.nullValue;
-import static org.hamcrest.Matchers.not;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.not;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.verify;
 import static org.mockito.MockitoAnnotations.initMocks;
 
-import static org.apache.dubbo.rpc.Constants.REFERENCE_FILTER_KEY;
-
 public class DubboMonitorFactoryTest {
     private DubboMonitorFactory dubboMonitorFactory;
     @Mock

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/RegistryDirectoryTest.java
Patch:
@@ -56,6 +56,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER_SIDE;
 import static org.apache.dubbo.common.constants.CommonConstants.DISABLED_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ENABLED_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.LOADBALANCE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CATEGORY_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONFIGURATORS_CATEGORY;
@@ -65,7 +66,6 @@
 import static org.apache.dubbo.common.constants.RegistryConstants.ROUTE_PROTOCOL;
 import static org.apache.dubbo.rpc.Constants.MOCK_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.INVOCATION_NEED_MOCK;
-import static org.apache.dubbo.rpc.cluster.Constants.LOADBALANCE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.MOCK_PROTOCOL;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.ROUTER_KEY;

File: dubbo-bootstrap/src/main/java/org/apache/dubbo/bootstrap/BootstrapUtils.java
Patch:
@@ -71,6 +71,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.HOST_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.LOADBALANCE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PASSWORD_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
@@ -113,7 +114,6 @@
 import static org.apache.dubbo.rpc.Constants.RETURN_PREFIX;
 import static org.apache.dubbo.rpc.Constants.THROW_PREFIX;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
-import static org.apache.dubbo.rpc.cluster.Constants.LOADBALANCE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 
 /**

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -39,12 +39,12 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_LOADBALANCE;
+import static org.apache.dubbo.common.constants.CommonConstants.LOADBALANCE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_AVAILABLE_CHECK_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_STICKY_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.DEFAULT_CLUSTER_AVAILABLE_CHECK;
 import static org.apache.dubbo.rpc.cluster.Constants.DEFAULT_CLUSTER_STICKY;
-import static org.apache.dubbo.rpc.cluster.Constants.DEFAULT_LOADBALANCE;
-import static org.apache.dubbo.rpc.cluster.Constants.LOADBALANCE_KEY;
 
 /**
  * AbstractClusterInvoker

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvoker.java
Patch:
@@ -35,8 +35,8 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-import static org.apache.dubbo.rpc.cluster.Constants.DEFAULT_FAILBACK_TIMES;
-import static org.apache.dubbo.rpc.cluster.Constants.RETRIES_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_FAILBACK_TIMES;
+import static org.apache.dubbo.common.constants.CommonConstants.RETRIES_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.DEFAULT_FAILBACK_TASKS;
 import static org.apache.dubbo.rpc.cluster.Constants.FAIL_BACK_TASKS_KEY;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvoker.java
Patch:
@@ -34,8 +34,8 @@
 import java.util.List;
 import java.util.Set;
 
-import static org.apache.dubbo.rpc.cluster.Constants.DEFAULT_RETRIES;
-import static org.apache.dubbo.rpc.cluster.Constants.RETRIES_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_RETRIES;
+import static org.apache.dubbo.common.constants.CommonConstants.RETRIES_KEY;
 
 /**
  * When invoke fails, log the initial error and retry other invokers (retry n times, which means at most n different invokers will be invoked)

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvoker.java
Patch:
@@ -34,10 +34,10 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static org.apache.dubbo.rpc.cluster.Constants.DEFAULT_FORKS;
-import static org.apache.dubbo.rpc.cluster.Constants.FORKS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
+import static org.apache.dubbo.common.constants.CommonConstants.FORKS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.DEFAULT_FORKS;
 
 /**
  * NOTICE! This implementation does not work well with async call.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/AbstractCluster.java
Patch:
@@ -28,7 +28,7 @@
 
 import java.util.List;
 
-import static org.apache.dubbo.rpc.Constants.REFERENCE_INTERCEPTOR_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.REFERENCE_INTERCEPTOR_KEY;
 
 public abstract class AbstractCluster implements Cluster {
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config.spring.beans.factory.annotation;
 
+import org.apache.dubbo.bootstrap.ReferenceConfigCache;
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.config.spring.ReferenceBean;
 import org.apache.dubbo.config.spring.ServiceBean;
@@ -266,7 +267,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
         }
 
         private void init() {
-            this.bean = referenceBean.get();
+            this.bean = ReferenceConfigCache.ReferHelper.refer(referenceBean);
         }
     }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -67,7 +67,7 @@ public void init() {
         registerBeanDefinitionParser("protocol", new DubboBeanDefinitionParser(ProtocolConfig.class, true));
         registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true));
         registerBeanDefinitionParser("reference", new DubboBeanDefinitionParser(ReferenceBean.class, false));
-        registerBeanDefinitionParser("annotation", new AnnotationBeanDefinitionParser());
+        registerBeanDefinitionParser("com/alibaba/dubbo/config/annotation", new AnnotationBeanDefinitionParser());
     }
 
     /**

File: dubbo-demo/dubbo-demo-xml/dubbo-demo-xml-consumer/src/main/java/org/apache/dubbo/demo/consumer/Application.java
Patch:
@@ -28,7 +28,6 @@ public class Application {
      * launch the application
      */
     public static void main(String[] args) throws Exception {
-    public static void main(String[] args) {
         ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("spring/dubbo-consumer.xml");
         context.start();
         DemoService demoService = context.getBean("demoService", DemoService.class);

File: dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/DubboMonitorFactory.java
Patch:
@@ -29,8 +29,8 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PROTOCOL;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.REFERENCE_FILTER_KEY;
 import static org.apache.dubbo.remoting.Constants.CHECK_KEY;
-import static org.apache.dubbo.rpc.Constants.REFERENCE_FILTER_KEY;
 
 /**
  * DefaultMonitorFactory

File: dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java
Patch:
@@ -58,14 +58,14 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_PROTOCOL;
 import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_SERVICE_COMPONENT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.METRICS_PORT;
+import static org.apache.dubbo.common.constants.CommonConstants.METRICS_PROTOCOL;
 import static org.apache.dubbo.monitor.Constants.DUBBO_CONSUMER;
 import static org.apache.dubbo.monitor.Constants.DUBBO_CONSUMER_METHOD;
 import static org.apache.dubbo.monitor.Constants.DUBBO_GROUP;
 import static org.apache.dubbo.monitor.Constants.DUBBO_PROVIDER;
 import static org.apache.dubbo.monitor.Constants.DUBBO_PROVIDER_METHOD;
 import static org.apache.dubbo.monitor.Constants.METHOD;
-import static org.apache.dubbo.monitor.Constants.METRICS_PORT;
-import static org.apache.dubbo.monitor.Constants.METRICS_PROTOCOL;
 import static org.apache.dubbo.monitor.Constants.SERVICE;
 
 public class MetricsFilter implements Filter {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/RestProtocolSubscribedURLsSynthesizer.java
Patch:
@@ -28,14 +28,14 @@
 import java.util.stream.Collectors;
 
 import static java.lang.Boolean.TRUE;
+import static org.apache.dubbo.common.constants.CommonConstants.LAZY_CONNECT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PID_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER;
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMESTAMP_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CATEGORY_KEY;
 import static org.apache.dubbo.registry.Constants.REGISTER_KEY;
-import static org.apache.dubbo.rpc.Constants.LAZY_CONNECT_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_STICKY_KEY;
 
 /**

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -59,9 +59,12 @@
 import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.CLUSTER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SPLIT_PATTERN;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.EXTRA_KEYS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.HIDE_KEY_PREFIX;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.LOADBALANCE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
@@ -86,7 +89,6 @@
 import static org.apache.dubbo.registry.Constants.CONFIGURATORS_SUFFIX;
 import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
 import static org.apache.dubbo.registry.Constants.DEFAULT_REGISTRY;
-import static org.apache.dubbo.registry.Constants.EXTRA_KEYS_KEY;
 import static org.apache.dubbo.registry.Constants.PROVIDER_PROTOCOL;
 import static org.apache.dubbo.registry.Constants.REGISTER_IP_KEY;
 import static org.apache.dubbo.registry.Constants.REGISTER_KEY;
@@ -96,15 +98,13 @@
 import static org.apache.dubbo.remoting.Constants.CHECK_KEY;
 import static org.apache.dubbo.remoting.Constants.CODEC_KEY;
 import static org.apache.dubbo.remoting.Constants.CONNECTIONS_KEY;
-import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.remoting.Constants.EXCHANGER_KEY;
 import static org.apache.dubbo.remoting.Constants.SERIALIZATION_KEY;
 import static org.apache.dubbo.rpc.Constants.DEPRECATED_KEY;
 import static org.apache.dubbo.rpc.Constants.INTERFACES;
 import static org.apache.dubbo.rpc.Constants.MOCK_KEY;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
-import static org.apache.dubbo.rpc.cluster.Constants.LOADBALANCE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.WARMUP_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.WEIGHT_KEY;

File: dubbo-registry/dubbo-registry-default/src/main/java/org/apache/dubbo/registry/dubbo/DubboRegistryFactory.java
Patch:
@@ -36,16 +36,16 @@
 import java.util.HashSet;
 import java.util.List;
 
+import static org.apache.dubbo.common.constants.CommonConstants.CALLBACK_INSTANCES_LIMIT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SPLIT_PATTERN;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.LAZY_CONNECT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.RemotingConstants.BACKUP_KEY;
 import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
 import static org.apache.dubbo.remoting.Constants.CONNECT_TIMEOUT_KEY;
 import static org.apache.dubbo.remoting.Constants.RECONNECT_KEY;
-import static org.apache.dubbo.rpc.Constants.CALLBACK_INSTANCES_LIMIT_KEY;
-import static org.apache.dubbo.rpc.Constants.LAZY_CONNECT_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_STICKY_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
Patch:
@@ -37,12 +37,12 @@
 import java.util.Map;
 import java.util.Set;
 
+import static org.apache.dubbo.common.constants.CommonConstants.CALLBACK_INSTANCES_LIMIT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_CALLBACK_INSTANCES;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.rpc.Constants.CALLBACK_INSTANCES_LIMIT_KEY;
-import static org.apache.dubbo.rpc.Constants.DEFAULT_CALLBACK_INSTANCES;
 import static org.apache.dubbo.rpc.Constants.IS_SERVER_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.CALLBACK_SERVICE_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.CALLBACK_SERVICE_PROXY_KEY;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java
Patch:
@@ -41,10 +41,10 @@
 import java.util.Optional;
 
 import static org.apache.dubbo.common.URL.buildKey;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec.decodeInvocationArgument;
 
 public class DecodeableRpcInvocation extends RpcInvocation implements Codec, Decodeable {
@@ -138,7 +138,7 @@ public Object decode(Channel channel, InputStream input) throws IOException {
             }
             setParameterTypes(pts);
 
-            Map<String, String> map = in.readAttachments();
+            Map<String, Object> map = in.readAttachments();
             if (map != null && map.size() > 0) {
                 Map<String, Object> attachment = getAttachments();
                 if (attachment == null) {

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -36,9 +36,9 @@
 import java.io.IOException;
 import java.io.InputStream;
 
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec.encodeInvocationArgument;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.DECODE_IN_IO_THREAD_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.DEFAULT_DECODE_IN_IO_THREAD;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -62,7 +62,9 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.LAZY_CONNECT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.STUB_EVENT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.remoting.Constants.CHANNEL_READONLYEVENT_SENT_KEY;
 import static org.apache.dubbo.remoting.Constants.CLIENT_KEY;
@@ -75,8 +77,6 @@
 import static org.apache.dubbo.rpc.Constants.DEFAULT_REMOTING_SERVER;
 import static org.apache.dubbo.rpc.Constants.DEFAULT_STUB_EVENT;
 import static org.apache.dubbo.rpc.Constants.IS_SERVER_KEY;
-import static org.apache.dubbo.rpc.Constants.LAZY_CONNECT_KEY;
-import static org.apache.dubbo.rpc.Constants.STUB_EVENT_KEY;
 import static org.apache.dubbo.rpc.Constants.STUB_EVENT_METHODS_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.CALLBACK_SERVICE_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.DEFAULT_SHARE_CONNECTIONS;

File: dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/GrpcOptionsUtils.java
Patch:
@@ -163,7 +163,7 @@ static CallOptions buildCallOptions(URL url) {
         return configurator.configureCallOptions(callOptions, url);
     }
 
-    static SslContext buildServerSslContext(URL url) {
+    private static SslContext buildServerSslContext(URL url) {
         SslContextBuilder sslClientContextBuilder = null;
         try {
             String password = url.getParameter(SSL_SERVER_KEY_PASSWORD_KEY);
@@ -190,7 +190,7 @@ static SslContext buildServerSslContext(URL url) {
         }
     }
 
-    static SslContext buildClientSslContext(URL url) {
+    private static SslContext buildClientSslContext(URL url) {
         SslContextBuilder builder = GrpcSslContexts.forClient();
         String trustCertCollectionFilePath = url.getParameter(SSL_CLIENT_TRUST_CERT_PATH_KEY);
         try {

File: dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/interceptors/RpcContextInterceptor.java
Patch:
@@ -44,9 +44,9 @@ public class RpcContextInterceptor implements ClientInterceptor, ServerIntercept
     @Override
     public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {
         RpcContext rpcContext = RpcContext.getContext();
-        Map<String, String> attachments = rpcContext.getAttachments();
+        Map<String, Object> attachments = rpcContext.getAttachments();
         if (attachments != null) {
-            for (Map.Entry<String, String> entry : attachments.entrySet()) {
+            for (Map.Entry<String, Object> entry : attachments.entrySet()) {
                 callOptions = callOptions.withOption(CallOptions.Key.create(DUBBO + entry.getKey()), entry.getValue());
             }
         }

File: dubbo-rpc/dubbo-rpc-http-invoker/src/main/java/org/apache/dubbo/rpc/protocol/httpinvoker/HttpInvokerProtocol.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.rpc.protocol.httpinvoker;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.common.Version;
+import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.http.HttpBinder;
 import org.apache.dubbo.remoting.http.HttpHandler;
@@ -48,9 +48,9 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.RELEASE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
-import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
 
 /**

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.protocol.AbstractProxyProtocol;
-import org.apache.dubbo.rpc.support.RpcUtils;
 
 import org.apache.http.HeaderElement;
 import org.apache.http.HeaderElementIterator;
@@ -199,9 +198,10 @@ protected <T> T doRefer(Class<T> serviceType, URL url) throws RpcException {
         return target.proxy(serviceType);
     }
 
+    @Override
     protected int getErrorCode(Throwable e) {
         // TODO
-        return RpcUtils.getErrorCode(e);
+        return super.getErrorCode(e);
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-rmi/src/main/java/org/apache/dubbo/rpc/protocol/rmi/RmiProtocol.java
Patch:
@@ -33,8 +33,8 @@
 
 import static org.apache.dubbo.common.Version.isRelease263OrHigher;
 import static org.apache.dubbo.common.Version.isRelease270OrHigher;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.RELEASE_KEY;
-import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
 
 /**

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/ObjectInput.java
Patch:
@@ -83,7 +83,7 @@ default Object readEvent() throws IOException, ClassNotFoundException {
         return readObject();
     }
 
-    default Map<String, String> readAttachments() throws IOException, ClassNotFoundException {
+    default Map<String, Object> readAttachments() throws IOException, ClassNotFoundException {
         return readObject(Map.class);
     }
 }
\ No newline at end of file

File: dubbo-serialization/dubbo-serialization-api/src/main/java/org/apache/dubbo/common/serialize/ObjectOutput.java
Patch:
@@ -53,7 +53,7 @@ default void writeEvent(Object data) throws IOException {
         writeObject(data);
     }
 
-    default void writeAttachments(Map<String, String> attachments) throws IOException {
+    default void writeAttachments(Map<String, Object> attachments) throws IOException {
         writeObject(attachments);
     }
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/LsTest.java
Patch:
@@ -72,6 +72,6 @@ public void testExecute() throws Exception {
         Ls ls = new Ls();
         String output = ls.execute(mock(CommandContext.class), null);
         assertThat(output, containsString("org.apache.dubbo.FooService|100"));
-        assertThat(output, containsString("org.apache.dubbo.BarService| Y"));
+        assertThat(output, containsString("org.apache.dubbo.BarService"));
     }
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
Patch:
@@ -138,7 +138,7 @@ private void removeFailedUnregistered(URL url) {
         }
     }
 
-    private void addFailedSubscribed(URL url, NotifyListener listener) {
+    protected void addFailedSubscribed(URL url, NotifyListener listener) {
         Holder h = new Holder(url, listener);
         FailedSubscribedTask oldOne = failedSubscribed.get(h);
         if (oldOne != null) {

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperClient.java
Patch:
@@ -36,6 +36,9 @@ public abstract class AbstractZookeeperClient<TargetDataListener, TargetChildLis
 
     protected static final Logger logger = LoggerFactory.getLogger(AbstractZookeeperClient.class);
 
+    protected int DEFAULT_CONNECTION_TIMEOUT_MS = 5 * 1000;
+    protected int DEFAULT_SESSION_TIMEOUT_MS = 60 * 1000;
+
     private final URL url;
 
     private final Set<StateListener> stateListeners = new CopyOnWriteArraySet<StateListener>();

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java
Patch:
@@ -65,7 +65,7 @@ public ZookeeperClient connect(URL url) {
                 return zookeeperClient;
             }
 
-            zookeeperClient = createZookeeperClient(toClientURL(url));
+            zookeeperClient = createZookeeperClient(url);
             logger.info("No valid zookeeper client found from cache, therefore create a new client for url. " + url);
             writeToClientMap(addressList, zookeeperClient);
         }
@@ -143,6 +143,7 @@ URL toClientURL(URL url) {
         if (url.getParameter(RemotingConstants.BACKUP_KEY) != null) {
             parameterMap.put(RemotingConstants.BACKUP_KEY, url.getParameter(RemotingConstants.BACKUP_KEY));
         }
+
         return new URL(url.getProtocol(), url.getUsername(), url.getPassword(), url.getHost(), url.getPort(),
                 ZookeeperTransporter.class.getName(), parameterMap);
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -624,6 +624,8 @@ private void useRegistryForConfigIfNecessary() {
                 cc.getParameters().put(org.apache.dubbo.remoting.Constants.CLIENT_KEY,rc.getClient());
                 cc.setProtocol(rc.getProtocol());
                 cc.setAddress(rc.getAddress());
+                cc.setUsername(rc.getUsername());
+                cc.setPassword(rc.getPassword());
                 cc.setHighestPriority(false);
                 setConfigCenter(cc);
                 startConfigCenter();

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReport.java
Patch:
@@ -93,7 +93,8 @@ public abstract class AbstractMetadataReport implements MetadataReport {
     public AbstractMetadataReport(URL reportServerURL) {
         setUrl(reportServerURL);
         // Start file save timer
-        String filename = reportServerURL.getParameter(FILE_KEY, System.getProperty("user.home") + "/.dubbo/dubbo-metadata-" + reportServerURL.getParameter(APPLICATION_KEY) + "-" + reportServerURL.getAddress() + ".cache");
+        String defaultFilename = System.getProperty("user.home") + "/.dubbo/dubbo-metadata-" + reportServerURL.getParameter(APPLICATION_KEY) + "-" + reportServerURL.getAddress().replaceAll(":", "-") + ".cache";
+        String filename = reportServerURL.getParameter(FILE_KEY, defaultFilename);
         File file = null;
         if (ConfigUtils.isNotEmpty(filename)) {
             file = new File(filename);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java
Patch:
@@ -92,7 +92,8 @@ public AbstractRegistry(URL url) {
         setUrl(url);
         // Start file save timer
         syncSaveFile = url.getParameter(REGISTRY_FILESAVE_SYNC_KEY, false);
-        String filename = url.getParameter(FILE_KEY, System.getProperty("user.home") + "/.dubbo/dubbo-registry-" + url.getParameter(APPLICATION_KEY) + "-" + url.getAddress() + ".cache");
+        String defaultFilename = System.getProperty("user.home") + "/.dubbo/dubbo-registry-" + url.getParameter(APPLICATION_KEY) + "-" + url.getAddress().replaceAll(":", "-") + ".cache";
+        String filename = url.getParameter(FILE_KEY, defaultFilename);
         File file = null;
         if (ConfigUtils.isNotEmpty(filename)) {
             file = new File(filename);

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java
Patch:
@@ -112,7 +112,7 @@ public void testConvertMethodConfig2AsyncInfo() throws Exception{
         methodConfig.setOninvokeMethod("setName");
         methodConfig.setOninvoke(new Person());
 
-        ConsumerModel.AsyncMethodInfo methodInfo = org.apache.dubbo.config.MethodConfig.convertMethodConfig2AyncInfo(methodConfig);
+        ConsumerModel.AsyncMethodInfo methodInfo = org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(methodConfig);
 
         assertEquals(methodInfo.getOninvokeMethod(), Person.class.getMethod("setName", String.class));
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -248,7 +248,7 @@ protected static void appendAttributes(Map<String, Object> parameters, Object co
         }
     }
 
-    protected static ConsumerModel.AsyncMethodInfo convertMethodConfig2AyncInfo(MethodConfig methodConfig) {
+    protected static ConsumerModel.AsyncMethodInfo convertMethodConfig2AsyncInfo(MethodConfig methodConfig) {
         if (methodConfig == null || (methodConfig.getOninvoke() == null && methodConfig.getOnreturn() == null && methodConfig.getOnthrow() == null)) {
             return null;
         }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -38,7 +38,6 @@
 import org.apache.dubbo.rpc.cluster.support.ClusterUtils;
 import org.apache.dubbo.rpc.cluster.support.RegistryAwareCluster;
 import org.apache.dubbo.rpc.model.ApplicationModel;
-import org.apache.dubbo.rpc.model.ConsumerMethodModel;
 import org.apache.dubbo.rpc.model.ConsumerModel;
 import org.apache.dubbo.rpc.model.ServiceMetadata;
 import org.apache.dubbo.rpc.model.ServiceModel;
@@ -338,7 +337,7 @@ private void init() {
                         map.put(methodConfig.getName() + ".retries", "0");
                     }
                 }
-                ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = convertMethodConfig2AsyncInfo(methodConfig);
+                ConsumerModel.AsyncMethodInfo asyncMethodInfo = convertMethodConfig2AsyncInfo(methodConfig);
                 if (asyncMethodInfo != null) {
 //                    consumerModel.getMethodModel(methodConfig.getName()).addAttribute(ASYNC_KEY, asyncMethodInfo);
                     attributes.put(methodConfig.getName(), asyncMethodInfo);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -624,6 +624,8 @@ private void useRegistryForConfigIfNecessary() {
                 cc.getParameters().put(org.apache.dubbo.remoting.Constants.CLIENT_KEY,rc.getClient());
                 cc.setProtocol(rc.getProtocol());
                 cc.setAddress(rc.getAddress());
+                cc.setUsername(rc.getUsername());
+                cc.setPassword(rc.getPassword());
                 cc.setHighestPriority(false);
                 setConfigCenter(cc);
                 startConfigCenter();

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java
Patch:
@@ -141,7 +141,7 @@ private void handleValue(ObjectInput in) throws IOException {
 
     private void handleException(ObjectInput in) throws IOException {
         try {
-            Object obj = in.readObject();
+            Object obj = in.readObject(Throwable.class);
             if (!(obj instanceof Throwable)) {
                 throw new IOException("Response data error, expect Throwable, but get " + obj);
             }

File: dubbo-serialization/dubbo-serialization-gson/src/main/java/org/apache/dubbo/common/serialize/gson/GsonJsonObjectInput.java
Patch:
@@ -90,7 +90,7 @@ public byte[] readBytes() throws IOException {
     @Override
     public Object readObject() throws IOException, ClassNotFoundException {
         String json = readLine();
-        return gson.fromJson(json, String.class);
+        return gson.fromJson(json, Object.class);
     }
 
     @Override

File: dubbo-metadata-report/dubbo-metadata-definition-protobuf/src/test/java/org/apache/dubbo/metadata/definition/protobuf/ProtobufTypeBuilderTest.java
Patch:
@@ -48,7 +48,7 @@ public void testProtobufBuilder() {
             }
         }
         Map<String, TypeDefinition> propertiesMap = typeDefinition.getProperties();
-        assertThat(propertiesMap.size(), is(9));
+        assertThat(propertiesMap.size(), is(11));
         assertThat(propertiesMap.containsKey("money"), is(true));
         assertThat(propertiesMap.get("money").getType(), equalTo("double"));
         assertThat(propertiesMap.containsKey("cash"), is(true));
@@ -67,5 +67,7 @@ public void testProtobufBuilder() {
         assertThat(propertiesMap.get("phone").getType(), equalTo("java.util.List<org.apache.dubbo.metadata.definition.protobuf.model.GooglePB$PhoneNumber>"));
         assertThat(propertiesMap.containsKey("doubleMap"), is(true));
         assertThat(propertiesMap.get("doubleMap").getType(), equalTo("java.util.Map<java.lang.String, org.apache.dubbo.metadata.definition.protobuf.model.GooglePB$PhoneNumber>"));
+        assertThat(propertiesMap.get("bytesList").getType(), equalTo("java.util.List<com.google.protobuf.ByteString>"));
+        assertThat(propertiesMap.get("bytesMap").getType(), equalTo("java.util.Map<java.lang.String, com.google.protobuf.ByteString>"));
     }
 }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/common/Constants.java
Patch:
@@ -36,7 +36,6 @@ public class Constants implements CommonConstants,
         org.apache.dubbo.rpc.Constants,
         org.apache.dubbo.rpc.protocol.dubbo.Constants,
         org.apache.dubbo.common.serialize.Constants,
-        org.apache.dubbo.configcenter.Constants,
         org.apache.dubbo.metadata.support.Constants,
         org.apache.dubbo.rpc.protocol.rest.Constants,
         org.apache.dubbo.registry.Constants {

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConfigCenterConfigTest.java
Patch:
@@ -37,9 +37,9 @@ public void testToUrl() {
         config.setGroup("group");
         config.setAddress("zookeeper://127.0.0.1:2181");
 
-        Assertions.assertEquals("zookeeper://127.0.0.1:2181/ConfigCenterConfig?config.check=true&" +
-                        "config.config-file=dubbo.properties&config.group=group&config.highest-priority=true&" +
-                        "config.namespace=namespace&config.timeout=3000",
+        Assertions.assertEquals("zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&" +
+                        "config-file=dubbo.properties&group=group&highest-priority=true&" +
+                        "namespace=namespace&timeout=3000",
                 config.toUrl().toFullString()
         );
     }

File: dubbo-configcenter/dubbo-configcenter-consul/src/main/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfiguration.java
Patch:
@@ -39,9 +39,9 @@
 import java.util.concurrent.ExecutorService;
 
 import static java.util.concurrent.Executors.newCachedThreadPool;
+import static org.apache.dubbo.common.constants.CommonConstants.CONFIG_NAMESPACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_SEPARATOR;
 import static org.apache.dubbo.configcenter.ConfigChangeType.ADDED;
-import static org.apache.dubbo.configcenter.Constants.CONFIG_NAMESPACE_KEY;
 
 /**
  * config center implementation for consul

File: dubbo-configcenter/dubbo-configcenter-etcd/src/main/java/org/apache/dubbo/configcenter/support/etcd/EtcdDynamicConfiguration.java
Patch:
@@ -40,8 +40,8 @@
 import java.util.concurrent.ConcurrentMap;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
+import static org.apache.dubbo.common.constants.CommonConstants.CONFIG_NAMESPACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_SEPARATOR;
-import static org.apache.dubbo.configcenter.Constants.CONFIG_NAMESPACE_KEY;
 
 /**
  * The etcd implementation of {@link DynamicConfiguration}

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfiguration.java
Patch:
@@ -32,8 +32,8 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 
+import static org.apache.dubbo.common.constants.CommonConstants.CONFIG_NAMESPACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_SEPARATOR;
-import static org.apache.dubbo.configcenter.Constants.CONFIG_NAMESPACE_KEY;
 
 /**
  *

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationFactory.java
Patch:
@@ -32,7 +32,6 @@ public void setZookeeperTransporter(ZookeeperTransporter zookeeperTransporter) {
         this.zookeeperTransporter = zookeeperTransporter;
     }
 
-
     @Override
     protected DynamicConfiguration createDynamicConfiguration(URL url) {
         return new ZookeeperDynamicConfiguration(url, zookeeperTransporter);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeChannel.java
Patch:
@@ -131,6 +131,8 @@ public boolean isClosed() {
     @Override
     public void close() {
         try {
+            // graceful close
+            DefaultFuture.closeChannel(channel);
             channel.close();
         } catch (Throwable e) {
             logger.warn(e.getMessage(), e);

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/TypeDefinitionBuilder.java
Patch:
@@ -55,6 +55,9 @@ public static TypeDefinition build(Type type, Class<?> clazz, Map<Class<?>, Type
             td = DefaultTypeBuilder.build(clazz, typeCache);
             td.setTypeBuilderName(DefaultTypeBuilder.class.getName());
         }
+        if (clazz.equals(String.class)) {
+            td.setProperties(null);
+        }
         return td;
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -215,7 +215,7 @@ public <T> Exporter<T> export(final Invoker<T> originInvoker) throws RpcExceptio
         ProviderInvokerWrapper<T> providerInvokerWrapper = ProviderConsumerRegTable.registerProvider(originInvoker,
                 registryUrl, registeredProviderUrl);
         //to judge if we need to delay publish
-        boolean register = registeredProviderUrl.getParameter("register", true);
+        boolean register = providerUrl.getParameter(REGISTER_KEY, true);
         if (register) {
             register(registryUrl, registeredProviderUrl);
             providerInvokerWrapper.setReg(true);

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/filter/CacheFilter.java
Patch:
@@ -82,7 +82,7 @@ public void setCacheFactory(CacheFactory cacheFactory) {
 
     /**
      * If cache is configured, dubbo will invoke method on each method call. If cache value is returned by cache store
-     * then it will return otherwise call the remote method and return value. If remote method's return valeu has error
+     * then it will return otherwise call the remote method and return value. If remote method's return value has error
      * then it will not cache the value.
      * @param invoker    service
      * @param invocation invocation.

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java
Patch:
@@ -484,7 +484,6 @@ public static boolean isProvider(URL url) {
                 PROVIDERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, PROVIDERS_CATEGORY));
     }
 
-
     /**
      * Check if the given value matches the given pattern. The pattern supports wildcard "*".
      *

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java
Patch:
@@ -209,7 +209,7 @@ public void afterPropertiesSet() throws Exception {
 
                 if (registryConfigs.isEmpty()) {
                     for (RegistryConfig config : registryConfigMap.values()) {
-                        if (StringUtils.isEmpty(registryIds)) {
+                        if (StringUtils.isEmpty(registryIds) && (config.isDefault() == null || config.isDefault().booleanValue())) {
                             registryConfigs.add(config);
                         }
                     }

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoService.java
Patch:
@@ -64,4 +64,6 @@ public interface DemoService {
     int getPerson(Person person1, Person perso2);
 
     String getPerson(Man man);
+
+    String getRemoteApplicationName();
 }
\ No newline at end of file

File: dubbo-rpc/dubbo-rpc-hessian/src/test/java/org/apache/dubbo/rpc/protocol/hessian/HessianService.java
Patch:
@@ -32,4 +32,6 @@ public interface HessianService {
 
     String context(String name);
 
+    String getRemoteApplicationName();
+
 }

File: dubbo-rpc/dubbo-rpc-http-invoker/src/test/java/org/apache/dubbo/rpc/protocol/httpinvoker/HttpService.java
Patch:
@@ -30,4 +30,6 @@ public interface HttpService {
 
     String customException();
 
+    String getRemoteApplicationName();
+
 }

File: dubbo-rpc/dubbo-rpc-http/src/test/java/org/apache/dubbo/rpc/protocol/http/HttpService.java
Patch:
@@ -16,10 +16,12 @@
  */
 package org.apache.dubbo.rpc.protocol.http;
 
-public interface JsonRpcService {
+public interface HttpService {
     String sayHello(String name);
 
     void timeOut(int millis);
 
     String customException();
+
+    String getRemoteApplicationName();
 }

File: dubbo-rpc/dubbo-rpc-injvm/src/test/java/org/apache/dubbo/rpc/protocol/injvm/DemoService.java
Patch:
@@ -38,4 +38,7 @@ public interface DemoService {
     int stringLength(String str);
 
     Type enumlength(Type... types);
+
+
+    String getRemoteApplicationName();
 }
\ No newline at end of file

File: dubbo-rpc/dubbo-rpc-rmi/src/test/java/org/apache/dubbo/rpc/protocol/rmi/DemoService.java
Patch:
@@ -42,4 +42,6 @@ public interface DemoService {
     int stringLength(String str);
 
     Type enumlength(Type... types);
+
+    String getRemoteApplicationName();
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractReferenceConfig.java
Patch:
@@ -102,11 +102,13 @@ public void setInit(Boolean init) {
         this.init = init;
     }
 
+    @Deprecated
     @Parameter(excluded = true)
     public Boolean isGeneric() {
-        return ProtocolUtils.isGeneric(generic);
+        return this.generic != null ? ProtocolUtils.isGeneric(generic) : null;
     }
 
+    @Deprecated
     public void setGeneric(Boolean generic) {
         if (generic != null) {
             this.generic = generic.toString();

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -104,7 +104,7 @@ public abstract class AbstractServiceConfig extends AbstractInterfaceConfig {
     /**
      * Whether to register
      */
-    private Boolean register = true;
+    private Boolean register;
 
     /**
      * Warm up period

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/Constants.java
Patch:
@@ -114,4 +114,6 @@ public interface Constants {
     String REGISTRIES_SUFFIX = "dubbo.registries.";
 
     String ZOOKEEPER_PROTOCOL = "zookeeper";
+
+    String REGISTER_KEY = "register";
 }

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/ZookeeperDubboServiceProviderBootstrap.java
Patch:
@@ -29,7 +29,7 @@ public static void main(String[] args) {
                 .application("zookeeper-dubbo-provider")
                 .registry(builder -> builder.address("zookeeper://127.0.0.1:2181?registry-type=service"))
                 .protocol("dubbo", builder -> builder.port(-1).name("dubbo"))
-                .protocol("rest", builder -> builder.port(8082).name("rest"))
+                .protocol("rest", builder -> builder.port(8081).name("rest"))
                 .service("echo", builder -> builder.interfaceClass(EchoService.class).ref(new EchoServiceImpl()).protocolIds("dubbo"))
                 .service("user", builder -> builder.interfaceClass(UserService.class).ref(new UserServiceImpl()).protocolIds("rest"))
                 .start()

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/file/FileSystemDynamicConfiguration.java
Patch:
@@ -582,13 +582,13 @@ private static Optional<WatchService> newWatchService() {
     }
 
     protected static File initDirectory(URL url) {
-        String directoryPath = url.getParameter(CONFIG_CENTER_DIR_PARAM_NAME, url.getPath());
+        String directoryPath = getParameter(url, CONFIG_CENTER_DIR_PARAM_NAME, url == null ? null : url.getPath());
         File rootDirectory = null;
         if (!StringUtils.isBlank(directoryPath)) {
             rootDirectory = new File("/" + directoryPath);
         }
 
-        if (!rootDirectory.exists()) { // If the directory does not exist
+        if (directoryPath == null || !rootDirectory.exists()) { // If the directory does not exist
             rootDirectory = new File(DEFAULT_CONFIG_CENTER_DIR_PATH);
         }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/lang/ShutdownHookCallbacks.java
Patch:
@@ -35,7 +35,7 @@ public class ShutdownHookCallbacks {
 
     private final List<ShutdownHookCallback> callbacks = new LinkedList<>();
 
-    public ShutdownHookCallbacks() {
+    ShutdownHookCallbacks() {
         loadCallbacks();
     }
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/lang/PrioritizedTest.java
Patch:
@@ -41,7 +41,7 @@ public void testConstants() {
 
     @Test
     public void testGetPriority() {
-        assertEquals(Prioritized.MIN_PRIORITY, new Prioritized() {
+        assertEquals(Prioritized.NORMAL_PRIORITY, new Prioritized() {
         }.getPriority());
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ServiceInstancePortCustomizer.java
Patch:
@@ -31,8 +31,7 @@ public class ServiceInstancePortCustomizer implements ServiceInstanceCustomizer
     @Override
     public void customize(ServiceInstance serviceInstance) {
 
-        if (serviceInstance.getPort() != null
-                || serviceInstance.getPort().intValue() < 1) {
+        if (serviceInstance.getPort() != null) {
             return;
         }
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporterTest.java
Patch:
@@ -81,7 +81,7 @@ public void testExportAndUnexport() {
         assertEquals(MetadataService.class.getName(), url.getServiceInterface());
         assertEquals("test", url.getParameter(GROUP_KEY));
         assertEquals(MetadataService.VERSION, url.getParameter(VERSION_KEY));
-        assertEquals("mockprotocol", url.getProtocol());
+        assertEquals("dubbo", url.getProtocol());
 
         exporter.unexport();
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboLifecycle.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.dubbo.config.spring.context.annotation;
 
-import org.springframework.context.Lifecycle;
+import org.apache.dubbo.common.context.Lifecycle;
+
 import org.springframework.context.annotation.Import;
 
 import java.lang.annotation.Documented;

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/model/TypeDefinition.java
Patch:
@@ -39,6 +39,9 @@ public class TypeDefinition {
     private Map<String, TypeDefinition> properties;
     private String typeBuilderName;
 
+    public TypeDefinition() {
+    }
+
     public TypeDefinition(String type) {
         this.type = type;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -167,9 +167,9 @@ public interface CommonConstants {
 
     String METADATA_KEY = "metadata";
 
-    String METADATA_DEFAULT = "local";
+    String DEFAULT_METADATA_STORAGE_TYPE = "default";
 
-    String METADATA_REMOTE = "remote";
+    String REMOTE_METADATA_STORAGE_TYPE = "remote";
 
     /**
      * package version in the manifest

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -64,10 +64,10 @@
 import static org.apache.dubbo.common.constants.CommonConstants.CLUSTER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SEPARATOR;
 import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER_SIDE;
+import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_METADATA_STORAGE_TYPE;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.LOCALHOST_VALUE;
-import static org.apache.dubbo.common.constants.CommonConstants.METADATA_DEFAULT;
 import static org.apache.dubbo.common.constants.CommonConstants.METADATA_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
@@ -444,7 +444,7 @@ private T createProxy(Map<String, String> map) {
          * ServiceData Store
          */
         String metadata = map.get(METADATA_KEY);
-        WritableMetadataService metadataService = WritableMetadataService.getExtension(metadata == null ? METADATA_DEFAULT : metadata);
+        WritableMetadataService metadataService = WritableMetadataService.getExtension(metadata == null ? DEFAULT_METADATA_STORAGE_TYPE : metadata);
         if (metadataService != null) {
             URL consumerURL = new URL(CONSUMER_PROTOCOL, map.remove(REGISTER_IP_KEY), 0, map.get(INTERFACE_KEY), map);
             metadataService.publishServiceDefinition(consumerURL);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -67,10 +67,10 @@
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ANY_VALUE;
 import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SPLIT_PATTERN;
+import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_METADATA_STORAGE_TYPE;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO;
 import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_IP_TO_BIND;
 import static org.apache.dubbo.common.constants.CommonConstants.LOCALHOST_VALUE;
-import static org.apache.dubbo.common.constants.CommonConstants.METADATA_DEFAULT;
 import static org.apache.dubbo.common.constants.CommonConstants.METADATA_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
@@ -633,7 +633,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r
                  * @since 2.7.0
                  * ServiceData Store
                  */
-                WritableMetadataService metadataService = WritableMetadataService.getExtension(url.getParameter(METADATA_KEY, METADATA_DEFAULT));
+                WritableMetadataService metadataService = WritableMetadataService.getExtension(url.getParameter(METADATA_KEY, DEFAULT_METADATA_STORAGE_TYPE));
                 if (metadataService != null) {
                     metadataService.publishServiceDefinition(url);
                 }

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/WritableMetadataService.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.metadata.store.InMemoryWritableMetadataService;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
-import static org.apache.dubbo.common.constants.CommonConstants.METADATA_DEFAULT;
+import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_METADATA_STORAGE_TYPE;
 import static org.apache.dubbo.common.extension.ExtensionLoader.getExtensionLoader;
 
 /**
@@ -31,7 +31,7 @@
  *
  * @since 2.7.4
  */
-@SPI(METADATA_DEFAULT)
+@SPI(DEFAULT_METADATA_STORAGE_TYPE)
 public interface WritableMetadataService extends MetadataService {
     /**
      * Gets the current Dubbo Service name

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/store/RemoteWritableMeatadataServiceTest.java
Patch:
@@ -30,7 +30,7 @@
 
 import java.util.Map;
 
-import static org.apache.dubbo.common.constants.CommonConstants.METADATA_REMOTE;
+import static org.apache.dubbo.common.constants.CommonConstants.REMOTE_METADATA_STORAGE_TYPE;
 
 /**
  * 2018/9/14
@@ -41,14 +41,14 @@ public class RemoteWritableMeatadataServiceTest {
 
     @BeforeEach
     public void before() {
-        metadataReportService1 = (RemoteWritableMetadataService) WritableMetadataService.getExtension(METADATA_REMOTE);
+        metadataReportService1 = (RemoteWritableMetadataService) WritableMetadataService.getExtension(REMOTE_METADATA_STORAGE_TYPE);
         MetadataReportInstance.init(url);
     }
 
     @Test
     public void testInstance() {
 
-        RemoteWritableMetadataService metadataReportService2 = (RemoteWritableMetadataService) WritableMetadataService.getExtension(METADATA_REMOTE);
+        RemoteWritableMetadataService metadataReportService2 = (RemoteWritableMetadataService) WritableMetadataService.getExtension(REMOTE_METADATA_STORAGE_TYPE);
         Assertions.assertSame(metadataReportService1, metadataReportService2);
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtils.java
Patch:
@@ -30,8 +30,8 @@
 import java.util.Map;
 
 import static java.util.Collections.emptyMap;
-import static org.apache.dubbo.common.constants.CommonConstants.METADATA_DEFAULT;
 import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_METADATA_STORAGE_TYPE;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMESTAMP_KEY;
 import static org.apache.dubbo.common.utils.StringUtils.isBlank;
@@ -175,7 +175,7 @@ public static String getSubscribedServicesRevision(ServiceInstance serviceInstan
      * @return if not found in {@link URL#getParameters() parameters} of {@link URL registry URL}, return
      */
     public static String getMetadataStorageType(URL registryURL) {
-        return registryURL.getParameter(METADATA_STORAGE_TYPE_PROPERTY_NAME, METADATA_DEFAULT);
+        return registryURL.getParameter(METADATA_STORAGE_TYPE_PROPERTY_NAME, DEFAULT_METADATA_STORAGE_TYPE);
     }
 
     /**
@@ -186,7 +186,7 @@ public static String getMetadataStorageType(URL registryURL) {
      */
     public static String getMetadataStorageType(ServiceInstance serviceInstance) {
         Map<String, String> metadata = serviceInstance.getMetadata();
-        return metadata.getOrDefault(METADATA_STORAGE_TYPE_PROPERTY_NAME, METADATA_DEFAULT);
+        return metadata.getOrDefault(METADATA_STORAGE_TYPE_PROPERTY_NAME, DEFAULT_METADATA_STORAGE_TYPE);
     }
 
     /**

File: dubbo-registry/dubbo-registry-eureka/src/main/java/org/apache/dubbo/registry/eureka/EurekaServiceDiscovery.java
Patch:
@@ -60,7 +60,7 @@ public class EurekaServiceDiscovery implements ServiceDiscovery {
 
     private EurekaClient eurekaClient;
 
-    private Map<String, String> subscribedServices;
+    private Set<String> subscribedServices;
 
     /**
      * last apps hash code is used to identify the {@link Applications} is changed or not
@@ -184,7 +184,7 @@ private void onCacheRefreshedEvent(CacheRefreshedEvent event) {
     }
 
     private void dispatchServiceInstancesChangedEvent() {
-        subscribedServices.forEach((serviceName, protocol) -> {
+        subscribedServices.forEach((serviceName) -> {
             eventDispatcher.dispatch(new ServiceInstancesChangedEvent(serviceName, getInstances(serviceName)));
         });
     }

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/NacosDubboServiceConsumerBootstrap.java
Patch:
@@ -32,11 +32,11 @@ public class NacosDubboServiceConsumerBootstrap {
     public static void main(String[] args) throws Exception {
 
         ApplicationConfig applicationConfig = new ApplicationConfig("dubbo-nacos-consumer-demo");
-        applicationConfig.setMetadataType("remote");
+//        applicationConfig.setMetadataType("remote");
         new DubboBootstrap()
                 .application(applicationConfig)
                 // Zookeeper
-                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry.type=service&subscribed.services=dubbo-nacos-provider-demo"))
+                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service&subscribed-services=dubbo-nacos-provider-demo"))
                 .metadataReport(new MetadataReportConfig("nacos://127.0.0.1:8848"))
                 // Nacos
 //                .registry("consul", builder -> builder.address("consul://127.0.0.1:8500?registry.type=service&subscribed.services=dubbo-provider-demo").group("namespace1"))

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/NacosDubboServiceProviderBootstrap.java
Patch:
@@ -30,11 +30,11 @@ public class NacosDubboServiceProviderBootstrap {
 
     public static void main(String[] args) {
         ApplicationConfig applicationConfig = new ApplicationConfig("dubbo-nacos-provider-demo");
-        applicationConfig.setMetadataType("remote");
+//        applicationConfig.setMetadataType("remote");
         new DubboBootstrap()
                 .application(applicationConfig)
                 // Zookeeper in service registry type
-                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry.type=service"))
+                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service"))
                 // Nacos
 //                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry.type=service"))
 //                .registry(RegistryBuilder.newBuilder().address("etcd3://127.0.0.1:2379?registry.type=service").build())

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/selector/RandomServiceInstanceSelector.java
Patch:
@@ -37,7 +37,7 @@ public ServiceInstance select(URL registryURL, List<ServiceInstance> serviceInst
         if (size < 1) {
             return null;
         }
-        int index = selectIndexRandomly(size);
+        int index = size == 1 ? 0 : selectIndexRandomly(size);
         return serviceInstances.get(index);
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/CompositeMetadataServiceURLBuilder.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.metadata.MetadataService;
 import org.apache.dubbo.registry.client.ServiceInstance;
-import org.apache.dubbo.registry.client.metadata.proxy.MetadataServiceProxy;
 
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -34,10 +33,9 @@
 /**
  * The implementation of {@link MetadataServiceURLBuilder} composites the multiple {@link MetadataServiceURLBuilder}
  * instances are loaded by Java standard {@link ServiceLoader} will aggregate {@link URL URLs} for
- * {@link MetadataServiceProxy}
+ * {@link MetadataService}
  *
  * @see MetadataServiceURLBuilder
- * @see MetadataServiceProxy
  * @see MetadataService
  * @see URL
  * @see ServiceLoader

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/EventPublishingServiceDiscovery.java
Patch:
@@ -220,6 +220,7 @@ public String toString() {
     @Override
     public void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener) throws NullPointerException, IllegalArgumentException {
         serviceDiscovery.addServiceInstancesChangedListener(listener);
+        eventDispatcher.addEventListener(listener);
     }
 
     @Override

File: dubbo-registry/dubbo-registry-etcd3/src/main/java/org/apache/dubbo/registry/etcd/EtcdServiceDiscovery.java
Patch:
@@ -161,7 +161,6 @@ public Set<String> getServices() {
     @Override
     public void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener) throws NullPointerException, IllegalArgumentException {
         registerServiceWatcher(listener.getServiceName());
-        dispatcher.addEventListener(listener);
     }
 
     @Override
@@ -190,7 +189,7 @@ protected void registerServiceWatcher(String serviceName) {
                         .orElseGet(() -> {
                             ChildListener watchListener, prev;
                             prev = childListenerMap.putIfAbsent(serviceName, watchListener = (parentPath, currentChildren) ->
-                                    dispatcher.dispatch(new ServiceInstancesChangedEvent(serviceName, getInstances(serviceName))));
+                                    dispatchServiceInstancesChangedEvent(serviceName));
                             return prev != null ? prev : watchListener;
                         });
 

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosServiceDiscovery.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.registry.client.ServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceInstance;
-import org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent;
 import org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener;
 import org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils;
 
@@ -125,6 +124,6 @@ private void handleEvent(NamingEvent event, ServiceInstancesChangedListener list
                 .stream()
                 .map(NacosNamingServiceUtils::toServiceInstance)
                 .collect(Collectors.toList());
-        listener.onEvent(new ServiceInstancesChangedEvent(serviceName, serviceInstances));
+        dispatchServiceInstancesChangedEvent(serviceName, serviceInstances);
     }
 }

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java
Patch:
@@ -148,7 +148,6 @@ public Page<ServiceInstance> getInstances(String serviceName, int offset, int pa
     public void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener)
             throws NullPointerException, IllegalArgumentException {
         registerServiceWatcher(listener.getServiceName());
-        dispatcher.addEventListener(listener);
     }
 
     private void doInServiceRegistry(ThrowableConsumer<org.apache.curator.x.discovery.ServiceDiscovery> consumer) {
@@ -164,7 +163,7 @@ private <R> R doInServiceDiscovery(ThrowableFunction<org.apache.curator.x.discov
     protected void registerServiceWatcher(String serviceName) {
         String path = buildServicePath(serviceName);
         CuratorWatcher watcher = watcherCaches.computeIfAbsent(path, key ->
-                new ZookeeperServiceDiscoveryChangeWatcher(this, serviceName, dispatcher));
+                new ZookeeperServiceDiscoveryChangeWatcher(this, serviceName));
         try {
             curatorFramework.getChildren().usingWatcher(watcher).forPath(path);
         } catch (KeeperException.NoNodeException e) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ExportedServicesRevisionMetadataCustomizer.java
Patch:
@@ -36,12 +36,12 @@
 public class ExportedServicesRevisionMetadataCustomizer extends ServiceInstanceMetadataCustomizer {
 
     @Override
-    protected String buildMetadataKey(ServiceInstance serviceInstance) {
+    protected String resolveMetadataPropertyName(ServiceInstance serviceInstance) {
         return EXPORTED_SERVICES_REVISION_PROPERTY_NAME;
     }
 
     @Override
-    protected String buildMetadataValue(ServiceInstance serviceInstance) {
+    protected String resolveMetadataPropertyValue(ServiceInstance serviceInstance) {
 
         String metadataStorageType = getMetadataStorageType(serviceInstance);
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceURLParamsMetadataCustomizer.java
Patch:
@@ -40,12 +40,12 @@
 public class MetadataServiceURLParamsMetadataCustomizer extends ServiceInstanceMetadataCustomizer {
 
     @Override
-    public String buildMetadataKey(ServiceInstance serviceInstance) {
+    public String resolveMetadataPropertyName(ServiceInstance serviceInstance) {
         return METADATA_SERVICE_URL_PARAMS_PROPERTY_NAME;
     }
 
     @Override
-    public String buildMetadataValue(ServiceInstance serviceInstance) {
+    public String resolveMetadataPropertyValue(ServiceInstance serviceInstance) {
 
         String metadataStorageType = getMetadataStorageType(serviceInstance);
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/SubscribedServicesRevisionMetadataCustomizer.java
Patch:
@@ -36,12 +36,12 @@
 public class SubscribedServicesRevisionMetadataCustomizer extends ServiceInstanceMetadataCustomizer {
 
     @Override
-    protected String buildMetadataKey(ServiceInstance serviceInstance) {
+    protected String resolveMetadataPropertyName(ServiceInstance serviceInstance) {
         return SUBSCRIBER_SERVICES_REVISION_PROPERTY_NAME;
     }
 
     @Override
-    protected String buildMetadataValue(ServiceInstance serviceInstance) {
+    protected String resolveMetadataPropertyValue(ServiceInstance serviceInstance) {
 
         String metadataStorageType = getMetadataStorageType(serviceInstance);
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceURLParamsMetadataCustomizer.java
Patch:
@@ -26,7 +26,7 @@
 
 import static org.apache.dubbo.metadata.MetadataService.toURLs;
 import static org.apache.dubbo.metadata.WritableMetadataService.getExtension;
-import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.METADATA_SERVICE_URL_PARAMS_KEY;
+import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.METADATA_SERVICE_URL_PARAMS_PROPERTY_NAME;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType;
 
@@ -41,7 +41,7 @@ public class MetadataServiceURLParamsMetadataCustomizer extends ServiceInstanceM
 
     @Override
     public String buildMetadataKey(ServiceInstance serviceInstance) {
-        return METADATA_SERVICE_URL_PARAMS_KEY;
+        return METADATA_SERVICE_URL_PARAMS_PROPERTY_NAME;
     }
 
     @Override

File: dubbo-registry/dubbo-registry-consul/src/main/java/org/apache/dubbo/registry/consul/ConsulServiceDiscovery.java
Patch:
@@ -125,7 +125,7 @@ public List<ServiceInstance> getInstances(String serviceName) throws NullPointer
     private List<ServiceInstance> convert(List<HealthService> services) {
         return services.stream()
                 .map(HealthService::getService)
-                .filter(service -> Objects.nonNull(service) && service.getMeta().containsKey(ServiceInstanceMetadataUtils.METADATA_SERVICE_URL_PARAMS_KEY))
+                .filter(service -> Objects.nonNull(service) && service.getMeta().containsKey(ServiceInstanceMetadataUtils.METADATA_SERVICE_URL_PARAMS_PROPERTY_NAME))
                 .map(service -> {
                     ServiceInstance instance = new DefaultServiceInstance(
                             service.getService(),

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceProviderBootstrap.java
Patch:
@@ -49,7 +49,7 @@ private static void multipleRegistries() {
 
         RegistryConfig serviceRegistry = new RegistryConfig();
         serviceRegistry.setId("serviceRegistry");
-        serviceRegistry.setAddress("zookeeper://127.0.0.1:2181?registry.type=service");
+        serviceRegistry.setAddress("zookeeper://127.0.0.1:2181?registry-type=service");
 
         ServiceConfig<EchoService> echoService = new ServiceConfig<>();
         echoService.setInterface(EchoService.class.getName());

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceProviderMinimumBootstrap.java
Patch:
@@ -25,7 +25,7 @@ public static void main(String[] args) {
         new DubboBootstrap()
                 .application("dubbo-provider-demo")
 //                .registry(builder -> builder.address("zookeeper://127.0.0.1:2181?registry.type=service"))
-                .registry(builder -> builder.address("file://?registry.type=service"))
+                .registry(builder -> builder.address("eureka://127.0.0.1:8761?registry-type=service"))
                 .protocol(builder -> builder.port(-1).name("dubbo"))
                 .service(builder -> builder.interfaceClass(EchoService.class).ref(new EchoServiceImpl()))
                 .start()

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/DefaultServiceInstance.java
Patch:
@@ -59,7 +59,7 @@ public DefaultServiceInstance(String id, String serviceName, String host, Intege
     }
 
     public DefaultServiceInstance(String serviceName, String host, Integer port) {
-        this(null, serviceName, host, port);
+        this(host + ":" + port, serviceName, host, port);
     }
 
     public void setId(String id) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MonitorConfig.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config;
 
+import org.apache.dubbo.common.constants.RegistryConstants;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.support.Parameter;
 
@@ -154,7 +155,7 @@ public void setInterval(String interval) {
     @Override
     @Parameter(excluded = true)
     public boolean isValid() {
-        return StringUtils.isNotEmpty(address);
+        return StringUtils.isNotEmpty(address) || RegistryConstants.REGISTRY_PROTOCOL.equals(protocol);
     }
 
 }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/DubboLifecycleComponentApplicationListener.java
Patch:
@@ -42,7 +42,7 @@
  * @see SmartApplicationListener
  * @since 2.7.4
  */
-public class DubboLifecycleComponentsApplicationListener implements ApplicationListener {
+public class DubboLifecycleComponentApplicationListener implements ApplicationListener {
 
     private List<Lifecycle> lifecycleComponents = emptyList();
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboLifecycle.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.dubbo.config.spring.context.annotation;
 
-import org.apache.dubbo.config.spring.context.DubboLifecycleComponentsApplicationListener;
-
 import org.springframework.context.Lifecycle;
 import org.springframework.context.annotation.Import;
 
@@ -37,6 +35,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
 @Documented
-@Import(DubboLifecycleComponentsApplicationListener.class)
+@Import(DubboLifecycleComponentRegistrar.class)
 public @interface EnableDubboLifecycle {
 }

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceConsumerBootstrap.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.bootstrap;
 
+import org.apache.dubbo.bootstrap.rest.UserService;
+import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.context.ConfigManager;
 
@@ -33,7 +35,7 @@ public static void main(String[] args) throws Exception {
                 .protocol(builder -> builder.port(20887).name("dubbo"))
                 // Zookeeper
                 .registry("zookeeper", builder -> builder.address("zookeeper://127.0.0.1:2181?registry.type=service&subscribed.services=dubbo-provider-demo"))
-//                .metadataReport(new MetadataReportConfig("zookeeper://127.0.0.1:2181"))
+                .metadataReport(new MetadataReportConfig("zookeeper://127.0.0.1:2181"))
                 // Nacos
 //                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry.type=service&subscribed.services=dubbo-provider-demo"))
 //                .registry("consul", builder -> builder.address("consul://127.0.0.1:8500?registry.type=service&subscribed.services=dubbo-provider-demo").group("namespace1"))

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
-import org.apache.dubbo.config.spring.ApplicationBean;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
 import org.apache.dubbo.config.spring.ReferenceBean;
 import org.apache.dubbo.config.spring.ServiceBean;
@@ -51,7 +50,6 @@ public class DubboNamespaceHandler extends NamespaceHandlerSupport implements Co
 
     @Override
     public void init() {
-        registerBeanDefinitionParser("application", new DubboBeanDefinitionParser(ApplicationBean.class, true));
         registerBeanDefinitionParser("module", new DubboBeanDefinitionParser(ModuleConfig.class, true));
         registerBeanDefinitionParser("registry", new DubboBeanDefinitionParser(RegistryConfig.class, true));
         registerBeanDefinitionParser("config-center", new DubboBeanDefinitionParser(ConfigCenterBean.class, true));

File: dubbo-common/src/main/java/org/apache/dubbo/common/function/ThrowableAction.java
Patch:
@@ -31,9 +31,9 @@ public interface ThrowableAction {
     /**
      * Executes the action
      *
-     * @throws Exception if met with error
+     * @throws Throwable if met with error
      */
-    void execute() throws Exception;
+    void execute() throws Throwable;
 
     /**
      * Executes {@link ThrowableAction}
@@ -44,7 +44,7 @@ public interface ThrowableAction {
     static void execute(ThrowableAction action) throws RuntimeException {
         try {
             action.execute();
-        } catch (Exception e) {
+        } catch (Throwable e) {
             throw new RuntimeException(e);
         }
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/EventPublishingServiceDiscovery.java
Patch:
@@ -272,7 +272,7 @@ protected final void executeWithEvents(Optional<? extends Event> beforeEvent,
         beforeEvent.ifPresent(this::dispatchEvent);
         try {
             action.execute();
-        } catch (Exception e) {
+        } catch (Throwable e) {
             dispatchEvent(new ServiceDiscoveryExceptionEvent(this, serviceDiscovery, e));
         }
         afterEvent.ifPresent(this::dispatchEvent);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/FileSystemServiceDiscovery.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;
 import org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration;
+import org.apache.dubbo.common.lang.ShutdownHookCallbacks;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.StringUtils;
@@ -45,7 +46,6 @@
 import static java.lang.String.format;
 import static java.nio.channels.FileChannel.open;
 import static org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration.CONFIG_CENTER_DIR_PARAM_NAME;
-import static org.apache.dubbo.config.DubboShutdownHook.getDubboShutdownHook;
 
 /**
  * File System {@link ServiceDiscovery} implementation
@@ -74,8 +74,7 @@ public void initialize(URL registryURL) throws Exception {
     }
 
     private void registerDubboShutdownHook() {
-        getDubboShutdownHook().addCallback(this::destroy);
-        getDubboShutdownHook().register();
+        ShutdownHookCallbacks.INSTANCE.addCallback(this::destroy);
     }
 
     private void registerListener() {

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceConsumerBootstrap.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.bootstrap;
 
-import org.apache.dubbo.bootstrap.rest.UserService;
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.context.ConfigManager;
 
@@ -33,13 +32,14 @@ public static void main(String[] args) throws Exception {
                 .application("dubbo-consumer-demo")
                 .protocol(builder -> builder.port(20887).name("dubbo"))
                 // Zookeeper
-                .registry("zookeeper", builder -> builder.address("zookeeper://127.0.0.1:2181?registry.type=service&subscribed.services=dubbo-provider-demo"))
+//                .registry("zookeeper", builder -> builder.address("zookeeper://127.0.0.1:2181?registry.type=service&subscribed.services=dubbo-provider-demo"))
+                .registry("file",builder-> builder.address("file://1111?registry.type=service&subscribed.services=dubbo-provider-demo"))
 //                .metadataReport(new MetadataReportConfig("zookeeper://127.0.0.1:2181"))
                 // Nacos
 //                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry.type=service&subscribed.services=dubbo-provider-demo"))
 //                .registry("consul", builder -> builder.address("consul://127.0.0.1:8500?registry.type=service&subscribed.services=dubbo-provider-demo").group("namespace1"))
                 .reference("echo", builder -> builder.interfaceClass(EchoService.class).protocol("dubbo"))
-                .reference("user", builder -> builder.interfaceClass(UserService.class).protocol("rest"))
+//                .reference("user", builder -> builder.interfaceClass(UserService.class).protocol("rest"))
                 .onlyRegisterProvider(true)
                 .start()
                 .await();

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/ConfigurationListener.java
Patch:
@@ -29,5 +29,5 @@ public interface ConfigurationListener extends EventListener {
      *
      * @param event config change event
      */
-    void process(ConfigChangeEvent event);
+    void process(ConfigChangedEvent event);
 }

File: dubbo-configcenter/dubbo-configcenter-apollo/src/main/java/org/apache/dubbo/configcenter/support/apollo/ApolloDynamicConfiguration.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.configcenter.support.apollo;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.config.configcenter.ConfigChangeEvent;
 import org.apache.dubbo.common.config.configcenter.ConfigChangeType;
+import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.logger.Logger;
@@ -200,7 +200,7 @@ public void onChange(com.ctrip.framework.apollo.model.ConfigChangeEvent changeEv
                     return;
                 }
 
-                ConfigChangeEvent event = new ConfigChangeEvent(key, change.getNewValue(), getChangeType(change));
+                ConfigChangedEvent event = new ConfigChangedEvent(key, change.getNamespace(), change.getNewValue(), getChangeType(change));
                 listeners.forEach(listener -> listener.process(event));
             }
         }

File: dubbo-configcenter/dubbo-configcenter-etcd/src/test/java/org/apache/dubbo/configcenter/support/etcd/EtcdDynamicConfigurationTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.configcenter.support.etcd;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.config.configcenter.ConfigChangeEvent;
+import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 
@@ -104,10 +104,10 @@ public TestListener(CountDownLatch latch) {
         }
 
         @Override
-        public void process(ConfigChangeEvent event) {
+        public void process(ConfigChangedEvent event) {
             Integer count = countMap.computeIfAbsent(event.getKey(), k -> 0);
             countMap.put(event.getKey(), ++count);
-            value = event.getValue();
+            value = event.getContent();
             latch.countDown();
         }
 

File: dubbo-configcenter/dubbo-configcenter-nacos/src/main/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfiguration.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.dubbo.configcenter.support.nacos;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.config.configcenter.ConfigChangeEvent;
 import org.apache.dubbo.common.config.configcenter.ConfigChangeType;
+import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.logger.Logger;
@@ -231,7 +231,7 @@ public Executor getExecutor() {
         @Override
         public void innerReceive(String dataId, String group, String configInfo) {
             String oldValue = cacheData.get(dataId);
-            ConfigChangeEvent event = new ConfigChangeEvent(dataId, configInfo, getChangeType(configInfo, oldValue));
+            ConfigChangedEvent event = new ConfigChangedEvent(dataId, group, configInfo, getChangeType(configInfo, oldValue));
             if (configInfo == null) {
                 cacheData.remove(dataId);
             } else {

File: dubbo-configcenter/dubbo-configcenter-nacos/src/test/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfigurationTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.configcenter.support.nacos;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.config.configcenter.ConfigChangeEvent;
+import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 
@@ -142,11 +142,11 @@ public TestListener(CountDownLatch latch) {
         }
 
         @Override
-        public void process(ConfigChangeEvent event) {
+        public void process(ConfigChangedEvent event) {
             System.out.println(this + ": " + event);
             Integer count = countMap.computeIfAbsent(event.getKey(), k -> 0);
             countMap.put(event.getKey(), ++count);
-            value = event.getValue();
+            value = event.getContent();
             latch.countDown();
         }
 

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/test/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.configcenter.support.zookeeper;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.config.configcenter.ConfigChangeEvent;
+import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory;
@@ -170,12 +170,12 @@ public TestListener(CountDownLatch latch) {
         }
 
         @Override
-        public void process(ConfigChangeEvent event) {
+        public void process(ConfigChangedEvent event) {
             System.out.println(this + ": " + event);
             Integer count = countMap.computeIfAbsent(event.getKey(), k -> new Integer(0));
             countMap.put(event.getKey(), ++count);
 
-            value = event.getValue();
+            value = event.getContent();
             latch.countDown();
         }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/EventPublishingServiceDiscovery.java
Patch:
@@ -218,8 +218,8 @@ public String toString() {
     }
 
     @Override
-    public void addServiceInstancesChangedListener(String serviceName, ServiceInstancesChangedListener listener) throws NullPointerException, IllegalArgumentException {
-        serviceDiscovery.addServiceInstancesChangedListener(serviceName, listener);
+    public void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener) throws NullPointerException, IllegalArgumentException {
+        serviceDiscovery.addServiceInstancesChangedListener(listener);
     }
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceInstance.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.client;
 
+import java.io.Serializable;
 import java.util.Map;
 
 /**
@@ -24,7 +25,7 @@
  *
  * @since 2.7.4
  */
-public interface ServiceInstance {
+public interface ServiceInstance extends Serializable {
 
     /**
      * The id of the registered service instance.

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/DefaultServiceInstanceTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import static java.lang.String.valueOf;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -33,7 +34,7 @@ public class DefaultServiceInstanceTest {
     public DefaultServiceInstance instance;
 
     public static DefaultServiceInstance createInstance() {
-        DefaultServiceInstance instance = new DefaultServiceInstance("A", "127.0.0.1", 8080);
+        DefaultServiceInstance instance = new DefaultServiceInstance(valueOf(System.nanoTime()), "A", "127.0.0.1", 8080);
         instance.getMetadata().put("dubbo.metadata-service.urls", "[ \"dubbo://192.168.0.102:20881/com.alibaba.cloud.dubbo.service.DubboMetadataService?anyhost=true&application=spring-cloud-alibaba-dubbo-provider&bind.ip=192.168.0.102&bind.port=20881&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&group=spring-cloud-alibaba-dubbo-provider&interface=com.alibaba.cloud.dubbo.service.DubboMetadataService&methods=getAllServiceKeys,getServiceRestMetadata,getExportedURLs,getAllExportedURLs&pid=17134&qos.enable=false&register=true&release=2.7.3&revision=1.0.0&side=provider&timestamp=1564826098503&version=1.0.0\" ]");
         instance.getMetadata().put("dubbo.metadata-service.url-params", "{\"dubbo\":{\"application\":\"dubbo-provider-demo\",\"deprecated\":\"false\",\"group\":\"dubbo-provider-demo\",\"version\":\"1.0.0\",\"timestamp\":\"1564845042651\",\"dubbo\":\"2.0.2\",\"provider.host\":\"192.168.0.102\",\"provider.port\":\"20880\"}}");
         return instance;

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosServiceDiscovery.java
Patch:
@@ -107,10 +107,10 @@ public List<ServiceInstance> getInstances(String serviceName) throws NullPointer
     }
 
     @Override
-    public void addServiceInstancesChangedListener(String serviceName, ServiceInstancesChangedListener listener)
+    public void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener)
             throws NullPointerException, IllegalArgumentException {
         execute(namingService, service -> {
-            service.subscribe(serviceName, e -> { // Register Nacos EventListener
+            service.subscribe(listener.getServiceName(), e -> { // Register Nacos EventListener
                 if (e instanceof NamingEvent) {
                     NamingEvent event = (NamingEvent) e;
                     handleEvent(event, listener);

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java
Patch:
@@ -145,9 +145,9 @@ public Page<ServiceInstance> getInstances(String serviceName, int offset, int pa
     }
 
     @Override
-    public void addServiceInstancesChangedListener(String serviceName, ServiceInstancesChangedListener listener)
+    public void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener)
             throws NullPointerException, IllegalArgumentException {
-        registerServiceWatcher(serviceName);
+        registerServiceWatcher(listener.getServiceName());
         dispatcher.addEventListener(listener);
     }
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Constants.java
Patch:
@@ -89,8 +89,6 @@ public interface Constants {
 
     String RUNTIME_KEY = "runtime";
 
-    String REMOTE_TIMESTAMP_KEY = "remote.timestamp";
-
     String WARMUP_KEY = "warmup";
 
     int DEFAULT_WARMUP = 10 * 60 * 1000;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/MockInvoker.java
Patch:
@@ -52,6 +52,7 @@ public boolean isAvailable() {
         return available;
     }
 
+    @Override
     public Result invoke(Invocation invocation) throws RpcException {
         return null;
     }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -481,6 +481,7 @@ public boolean isAvailable() {
                 return false;
             }
 
+            @Override
             public Result invoke(Invocation invocation) throws RpcException {
                 throw new RpcException(RpcException.TIMEOUT_EXCEPTION, "test timeout");
             }

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -80,8 +80,6 @@ public class ExtensionLoader<T> {
 
     private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();
 
-    // ==============================
-
     private final Class<?> type;
 
     private final ExtensionFactory objectFactory;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/mock/MockProtocol.java
Patch:
@@ -66,6 +66,7 @@ public boolean isAvailable() {
                 return true;
             }
 
+            @Override
             public Result invoke(Invocation invocation) throws RpcException {
                 return null;
             }

File: dubbo-monitor/dubbo-monitor-api/src/test/java/org/apache/dubbo/monitor/support/MonitorFilterTest.java
Patch:
@@ -76,6 +76,7 @@ public boolean isAvailable() {
             return false;
         }
 
+        @Override
         public Result invoke(Invocation invocation) throws RpcException {
             lastInvocation = invocation;
             return AsyncRpcResult.newDefaultAsyncResult(invocation);

File: dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/DubboMonitorTest.java
Patch:
@@ -70,6 +70,7 @@ public boolean isAvailable() {
             return false;
         }
 
+        @Override
         public Result invoke(Invocation invocation) throws RpcException {
             return null;
         }

File: dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/MetricsFilterTest.java
Patch:
@@ -103,6 +103,7 @@ public boolean isAvailable() {
             return false;
         }
 
+        @Override
         public Result invoke(Invocation invocation) throws RpcException {
             throw new RpcException(RpcException.TIMEOUT_EXCEPTION);
         }

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/MyInvoker.java
Patch:
@@ -58,6 +58,7 @@ public boolean isAvailable() {
         return false;
     }
 
+    @Override
     public Result invoke(Invocation invocation) throws RpcException {
         AppResponse result = new AppResponse();
         if (!hasException) {

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/RuntimeExceptionInvoker.java
Patch:
@@ -28,6 +28,7 @@ public RuntimeExceptionInvoker(URL url) {
         super(url);
     }
 
+    @Override
     public Result invoke(Invocation invocation) throws RpcException {
         throw new RuntimeException("Runtime exception");
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ApplicationBuilder.java
Patch:
@@ -177,7 +177,7 @@ public ApplicationConfig build() {
         super.build(config);
 
         config.setName(name);
-        config.setMetadata(metadata);
+        config.setMetadataStorageType(metadata);
         config.setVersion(this.version);
         config.setOwner(this.owner);
         config.setOrganization(this.organization);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
Patch:
@@ -156,7 +156,7 @@ private ServiceDiscovery getServiceDiscovery(URL registryURL) {
     private ServiceDiscovery enhanceEventPublishing(ServiceDiscovery original) {
         return new EventPublishingServiceDiscovery(original);
     }
-  
+
     protected boolean shouldRegister(URL providerURL) {
 
         String side = providerURL.getParameter(SIDE_KEY);

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/DubboProviderBootstrap.java
Patch:
@@ -26,6 +26,8 @@
 import org.apache.dubbo.registry.client.ServiceDiscovery;
 import org.apache.dubbo.registry.client.ServiceDiscoveryFactory;
 
+import static org.apache.dubbo.metadata.WritableMetadataService.getDefaultExtension;
+
 /**
  * Dubbo Provider Bootstrap
  */
@@ -60,7 +62,7 @@ public static void main(String[] args) throws Exception {
         // 暴露及注册服务
         service.export();
 
-        MetadataServiceExporter exporter = new ConfigurableMetadataServiceExporter();
+        MetadataServiceExporter exporter = new ConfigurableMetadataServiceExporter(getDefaultExtension());
 
         // 暴露 MetadataService 服务
         exporter.export();

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporterTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.metadata.MetadataService;
+import org.apache.dubbo.metadata.store.InMemoryWritableMetadataService;
 
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
@@ -69,8 +70,7 @@ private static RegistryConfig registryConfig() {
 
     @Test
     public void testExportAndUnexport() {
-        ConfigurableMetadataServiceExporter exporter = new ConfigurableMetadataServiceExporter();
-        exporter.setApplicationConfig(ConfigManager.getInstance().getApplication().get());
+        ConfigurableMetadataServiceExporter exporter = new ConfigurableMetadataServiceExporter(new InMemoryWritableMetadataService());
         List<URL> urls = exporter.export().getExportedURLs();
 
         assertEquals(1, urls.size());

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceConsumerBootstrap.java
Patch:
@@ -35,6 +35,7 @@ public static void main(String[] args) throws Exception {
                 .registry("zookeeper", builder -> builder.address("zookeeper://127.0.0.1:2181?registry.type=service&subscribed.services=dubbo-provider-demo"))
 //                .metadataReport(new MetadataReportConfig("zookeeper://127.0.0.1:2181"))
                 // Nacos
+                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry.type=service&subscribed.services=dubbo-provider-demo"))
 //                .registry("consul", builder -> builder.address("consul://127.0.0.1:8500?registry.type=service&subscribed.services=dubbo-provider-demo").group("namespace1"))
                 .reference("echo", builder -> builder.interfaceClass(EchoService.class).protocol("dubbo"))
                 .reference("user", builder -> builder.interfaceClass(UserService.class).protocol("rest"))

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceProvider2Bootstrap.java
Patch:
@@ -32,7 +32,7 @@ public static void main(String[] args) {
                 // Zookeeper in service registry type
                 .registry("zookeeper", builder -> builder.address("zookeeper://127.0.0.1:2181?registry.type=service"))
                 // Nacos
-//                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry.type=service"))
+                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry.type=service"))
 //                .registry(RegistryBuilder.newBuilder().address("etcd3://127.0.0.1:2379?registry.type=service").build())
                 .protocol("dubbo", builder -> builder.port(20885).name("dubbo"))
                 .protocol("rest", builder -> builder.port(9090).name("rest"))

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/DefaultServiceDiscoveryFactory.java
Patch:
@@ -33,6 +33,7 @@
  * @since 2.7.4
  */
 public class DefaultServiceDiscoveryFactory extends AbstractServiceDiscoveryFactory {
+
     /**
      * Create the {@link ServiceDiscovery} by {@link URL#getProtocol() the protocol} from {@link URL connection URL}
      *

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/RegistryConstants.java
Patch:
@@ -67,7 +67,7 @@ public interface RegistryConstants {
      */
     String SERVICE_REGISTRY_TYPE = "service";
 
-    String SERVICE_REGISTRY_PROTOCOL = "service-oriented-registry";
+    String SERVICE_REGISTRY_PROTOCOL = "service-discovery-registry";
 
     /**
      * The parameter key of the subscribed service names for Service-Oriented Registry

File: dubbo-common/src/main/java/org/apache/dubbo/common/context/Lifecycle.java
Patch:
@@ -21,7 +21,7 @@
  *
  * @since 2.7.4
  */
-public interface Lifecycle {
+public interface Lifecycle<V> {
 
     /**
      * Initialize the component before {@link #start() start}

File: dubbo-common/src/main/java/org/apache/dubbo/common/lang/Prioritized.java
Patch:
@@ -38,7 +38,7 @@ public interface Prioritized extends Comparable<Prioritized> {
             return -1;
         } else if (b2 && !b1) { // two is Prioritized, one is not
             return 1;
-        } else if (b1 && b2) {  //  one and two both Prioritized
+        } else if (b1 && b2) {  //  one and two both are Prioritized
             return ((Prioritized) one).compareTo((Prioritized) two);
         } else {                // no different
             return 0;
@@ -54,6 +54,7 @@ public interface Prioritized extends Comparable<Prioritized> {
      * The minimum priority
      */
     int MIN_PRIORITY = Integer.MAX_VALUE;
+
     /**
      * Normal Priority
      */

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/DubboShutdownHook.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static java.util.Collections.sort;
-import static java.util.ServiceLoader.load;
+import static org.apache.dubbo.common.utils.DubboServiceLoader.load;
 
 /**
  * The shutdown hook thread to do the clean up stuff.

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporterTest.java
Patch:
@@ -71,7 +71,7 @@ private static RegistryConfig registryConfig() {
     public void testExportAndUnexport() {
         ConfigurableMetadataServiceExporter exporter = new ConfigurableMetadataServiceExporter();
         exporter.setApplicationConfig(ConfigManager.getInstance().getApplication().get());
-        List<URL> urls = exporter.export();
+        List<URL> urls = exporter.export().getExportedURLs();
 
         assertEquals(1, urls.size());
 

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataService.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * A framework interface of Dubbo Metadata Service defines the contract of Dubbo Services registartion and subscription
- * between Dubbo service providers and its consumers. The implementationwill be exported as a normal Dubbo service that
+ * between Dubbo service providers and its consumers. The implementation will be exported as a normal Dubbo service that
  * the clients would subscribe, whose version comes from the {@link #version()} method and group gets from
  * {@link #serviceName()}, that means, The different Dubbo service(application) will export the different
  * {@link MetadataService} that persists all the exported and subscribed metadata, they are present by

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryFactory.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.registry.service;
+package org.apache.dubbo.registry.client;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.registry.Registry;
@@ -24,15 +24,15 @@
 import static org.apache.dubbo.common.constants.RegistryConstants.SERVICE_REGISTRY_PROTOCOL;
 import static org.apache.dubbo.registry.Constants.DEFAULT_REGISTRY;
 
-public class ServiceOrientedRegistryFactory extends AbstractRegistryFactory {
+public class ServiceDiscoveryRegistryFactory extends AbstractRegistryFactory {
 
     @Override
     protected Registry createRegistry(URL url) {
         if (SERVICE_REGISTRY_PROTOCOL.equalsIgnoreCase(url.getProtocol())) {
             String protocol = url.getParameter(REGISTRY_KEY, DEFAULT_REGISTRY);
             url = url.setProtocol(protocol).removeParameter(REGISTRY_KEY);
         }
-        return new ServiceOrientedRegistry(url);
+        return new ServiceDiscoveryRegistry(url);
     }
 
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistryProtocol.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.registry.service;
+package org.apache.dubbo.registry.client;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.registry.integration.RegistryProtocol;
@@ -25,7 +25,7 @@
 /**
  * TODO, replace RegistryProtocol completely in the future.
  */
-public class ServiceOrientedRegistryProtocol extends RegistryProtocol {
+public class ServiceDiscoveryRegistryProtocol extends RegistryProtocol {
 
     @Override
     protected URL getRegistryUrl(Invoker<?> originInvoker) {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/SpringCloudMetadataServiceURLBuilder.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.DUBBO_METADATA_SERVICE_URLS_PROPERTY_NAME;
+import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.METADATA_SERVICE_URLS_PROPERTY_NAME;
 
 /**
  * The {@link MetadataServiceURLBuilder} implementation for The standard Dubbo scenario
@@ -39,7 +39,7 @@ public class SpringCloudMetadataServiceURLBuilder implements MetadataServiceURLB
     @Override
     public List<URL> build(ServiceInstance serviceInstance) {
         Map<String, String> metadata = serviceInstance.getMetadata();
-        String dubboURLsJSON = metadata.get(DUBBO_METADATA_SERVICE_URLS_PROPERTY_NAME);
+        String dubboURLsJSON = metadata.get(METADATA_SERVICE_URLS_PROPERTY_NAME);
         if (StringUtils.isBlank(dubboURLsJSON)) {
             return Collections.emptyList();
         }

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/InMemoryServiceDiscovery.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.client;
 
+import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.DefaultPage;
 import org.apache.dubbo.common.utils.Page;
 import org.apache.dubbo.event.EventDispatcher;
@@ -95,12 +96,12 @@ public void unregister(ServiceInstance serviceInstance) throws RuntimeException
     }
 
     @Override
-    public void start() {
+    public void initialize(URL registryURL) throws Exception {
 
     }
 
     @Override
-    public void stop() {
+    public void destroy() {
     }
 
     @Override

File: dubbo-bootstrap/src/main/java/org/apache/dubbo/bootstrap/DubboBootstrap.java
Patch:
@@ -81,6 +81,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.METADATA_REMOTE;
 import static org.apache.dubbo.common.utils.StringUtils.isNotEmpty;
 import static org.apache.dubbo.config.context.ConfigManager.getInstance;
+import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.MEATADATA_STORED_TYPE_KEY;
 import static org.apache.dubbo.remoting.Constants.CLIENT_KEY;
 
 /**
@@ -792,7 +793,7 @@ private void unregisterServiceInstance() {
 
     private ServiceInstance initServiceInstance(String serviceName, String host, int port, String metadataType) {
         this.serviceInstance = new DefaultServiceInstance(serviceName, host, port);
-        this.serviceInstance.getMetadata().put(METADATA_KEY, metadataType);
+        this.serviceInstance.getMetadata().put(MEATADATA_STORED_TYPE_KEY, metadataType);
         return this.serviceInstance;
     }
 

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/identifier/ServiceMetadataIdentifier.java
Patch:
@@ -22,12 +22,13 @@ public class ServiceMetadataIdentifier extends BaseServiceMetadataIdentifier {
     public ServiceMetadataIdentifier() {
     }
 
-    public ServiceMetadataIdentifier(String serviceInterface, String version, String group, String side, String revision) {
+    public ServiceMetadataIdentifier(String serviceInterface, String version, String group, String side, String revision, String protocol) {
         this.serviceInterface = serviceInterface;
         this.version = version;
         this.group = group;
         this.side = side;
         this.revision = revision;
+        this.protocol = protocol;
     }
 
 
@@ -36,7 +37,6 @@ public ServiceMetadataIdentifier(URL url) {
         this.version = url.getParameter(VERSION_KEY);
         this.group = url.getParameter(GROUP_KEY);
         this.side = url.getParameter(SIDE_KEY);
-        this.revision = (url.getParameter(REVISION_KEY));
         this.protocol = url.getProtocol();
     }
 

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/support/AbstractMetadataReport.java
Patch:
@@ -296,7 +296,7 @@ public void saveServiceMetadata(ServiceMetadataIdentifier metadataIdentifier, UR
         if (syncReport) {
             doSaveMetadata(metadataIdentifier, url);
         } else {
-            reportCacheExecutor.execute(() -> doSaveMetadata(new ServiceMetadataIdentifier(url), url));
+            reportCacheExecutor.execute(() -> doSaveMetadata(metadataIdentifier, url));
         }
     }
 

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/store/InMemoryWritableMetadataService.java
Patch:
@@ -58,7 +58,7 @@ public class InMemoryWritableMetadataService extends BaseWritableMetadataService
 
     @Override
     public SortedSet<String> getSubscribedURLs() {
-        return getAllUnmodifiableServiceURLs(subscribedServiceURLs);
+        return super.getSubscribedURLs();
     }
 
     @Override

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/store/RemoteWritableMetadataService.java
Patch:
@@ -129,6 +129,7 @@ public boolean exportURL(URL url) {
     public boolean unexportURL(URL url) {
         ServiceMetadataIdentifier metadataIdentifier = new ServiceMetadataIdentifier(url);
         metadataIdentifier.setRevision(exportedRevision);
+        metadataIdentifier.setProtocol(url.getProtocol());
         return throwableAction(getMetadataReport()::removeServiceMetadata, metadataIdentifier);
     }
 
@@ -174,6 +175,7 @@ private boolean saveServiceMetadata() {
                 // refresh revision in urls
                 ServiceMetadataIdentifier metadataIdentifier = new ServiceMetadataIdentifier(url);
                 metadataIdentifier.setRevision(exportedRevision);
+                metadataIdentifier.setProtocol(url.getProtocol());
 
                 boolean tmpResult = throwableAction(getMetadataReport()::saveServiceMetadata, metadataIdentifier, url);
                 if (!tmpResult) result = tmpResult;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ExportedServicesRevisionMetadataCustomizer.java
Patch:
@@ -29,8 +29,8 @@
 
 import static java.lang.String.valueOf;
 import static java.util.Objects.hash;
-import static org.apache.dubbo.common.constants.CommonConstants.METADATA_KEY;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.EXPORTED_SERVICES_REVISION_KEY;
+import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.MEATADATA_STORED_TYPE_KEY;
 
 /**
  * The customizer to a add the metadata that the reversion of Dubbo exported services calculates.
@@ -49,7 +49,7 @@ protected String buildMetadataKey(ServiceInstance serviceInstance) {
     @Override
     protected String buildMetadataValue(ServiceInstance serviceInstance) {
         WritableMetadataService writableMetadataService = WritableMetadataService.getExtension(
-                serviceInstance.getMetadata().get(METADATA_KEY)
+                serviceInstance.getMetadata().get(MEATADATA_STORED_TYPE_KEY)
         );
         SortedSet<String> exportedURLs = writableMetadataService.getExportedURLs();
         Object[] data = exportedURLs.stream()

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceURLParamsMetadataCustomizer.java
Patch:
@@ -24,8 +24,8 @@
 
 import java.util.SortedSet;
 
-import static org.apache.dubbo.common.constants.CommonConstants.METADATA_KEY;
 import static org.apache.dubbo.metadata.MetadataService.toURLs;
+import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.MEATADATA_STORED_TYPE_KEY;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.METADATA_SERVICE_URL_PARAMS_KEY;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter;
 
@@ -47,7 +47,7 @@ public String buildMetadataKey(ServiceInstance serviceInstance) {
     public String buildMetadataValue(ServiceInstance serviceInstance) {
 
         WritableMetadataService writableMetadataService = WritableMetadataService.getExtension(
-                serviceInstance.getMetadata().get(METADATA_KEY)
+                serviceInstance.getMetadata().get(MEATADATA_STORED_TYPE_KEY)
         );
 
         String serviceInterface = MetadataService.class.getName();

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/RefreshServiceMetadataCustomizer.java
Patch:
@@ -20,7 +20,7 @@
 public class RefreshServiceMetadataCustomizer implements ServiceInstanceCustomizer {
 
     public int getPriority() {
-        return MAX_PRIORITY;
+        return MIN_PRIORITY;
     }
 
     @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/SubscribedServicesRevisionMetadataCustomizer.java
Patch:
@@ -29,8 +29,7 @@
 
 import static java.lang.String.valueOf;
 import static java.util.Objects.hash;
-import static org.apache.dubbo.common.constants.CommonConstants.METADATA_KEY;
-import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.EXPORTED_SERVICES_REVISION_KEY;
+import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.MEATADATA_STORED_TYPE_KEY;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.SUBSCRIBER_SERVICES_REVISION_KEY;
 
 /**
@@ -50,7 +49,7 @@ protected String buildMetadataKey(ServiceInstance serviceInstance) {
     @Override
     protected String buildMetadataValue(ServiceInstance serviceInstance) {
         WritableMetadataService writableMetadataService = WritableMetadataService.getExtension(
-                serviceInstance.getMetadata().get(METADATA_KEY)
+                serviceInstance.getMetadata().get(MEATADATA_STORED_TYPE_KEY)
         );
         SortedSet<String> subscribedURLs = writableMetadataService.getSubscribedURLs();
         Object[] data = subscribedURLs.stream()

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/proxy/BaseMetadataServiceProxyFactory.java
Patch:
@@ -17,7 +17,7 @@ abstract class BaseMetadataServiceProxyFactory implements MetadataServiceProxyFa
 
     public final MetadataService getProxy(ServiceInstance serviceInstance) {
         return proxies.computeIfAbsent(serviceInstance.getServiceName() + "##" +
-                serviceInstance.getMetadata().getOrDefault(ServiceInstanceMetadataUtils.EXPORTED_SERVICES_REVISION_KEY, ""), id -> createProxy(serviceInstance));
+                ServiceInstanceMetadataUtils.getExportedServicesRevision(serviceInstance), id -> createProxy(serviceInstance));
     }
 
     protected abstract MetadataService createProxy(ServiceInstance serviceInstance);

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java
Patch:
@@ -149,7 +149,7 @@ protected void createEphemeral(String path, String data) {
     @Override
     public void delete(String path) {
         try {
-            client.delete().forPath(path);
+            client.delete().deletingChildrenIfNeeded().forPath(path);
         } catch (NoNodeException e) {
         } catch (Exception e) {
             throw new IllegalStateException(e.getMessage(), e);

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceConsumerBootstrap.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.bootstrap;
 
 import org.apache.dubbo.bootstrap.rest.UserService;
+import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.context.ConfigManager;
 
@@ -33,6 +34,7 @@ public static void main(String[] args) throws Exception {
                 .application("dubbo-consumer-demo")
                 // Zookeeper
                 .registry("zookeeper", builder -> builder.address("zookeeper://127.0.0.1:2181?registry.type=service&subscribed.services=dubbo-provider-demo"))
+                .metadataReport(new MetadataReportConfig("zookeeper://127.0.0.1:2181"))
                 // Nacos
 //                .registry("consul", builder -> builder.address("consul://127.0.0.1:8500?registry.type=service&subscribed.services=dubbo-provider-demo").group("namespace1"))
                 .reference("echo", builder -> builder.interfaceClass(EchoService.class).protocol("dubbo"))
@@ -43,7 +45,7 @@ public static void main(String[] args) throws Exception {
 
         ConfigManager configManager = ConfigManager.getInstance();
 
-        ReferenceConfig<EchoService> referenceConfig = configManager.getReferenceConfig("echo");
+        ReferenceConfig<EchoService> referenceConfig = configManager.getReference("echo");
 
         EchoService echoService = referenceConfig.get();
 

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceProviderBootstrap.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.bootstrap.rest.UserService;
 import org.apache.dubbo.bootstrap.rest.UserServiceImpl;
+import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.ServiceConfig;
@@ -70,6 +71,7 @@ private static void multipleRegistries() {
                 .registries(Arrays.asList(interfaceRegistry, serviceRegistry))
 //                .registry(RegistryBuilder.newBuilder().address("consul://127.0.0.1:8500?registry.type=service").build())
                 .protocol(builder -> builder.port(-1).name("dubbo"))
+                .metadataReport(new MetadataReportConfig("zookeeper://127.0.0.1:2181"))
                 .service(echoService)
                 .service(userService)
                 .start()

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/compatible/DubboInterfaceConsumerBootstrap.java
Patch:
@@ -49,10 +49,10 @@ public static void main(String[] args) throws Exception {
 
         ConfigManager configManager = ConfigManager.getInstance();
 
-        ReferenceConfig<EchoService> referenceConfig = configManager.getReferenceConfig("echo");
+        ReferenceConfig<EchoService> referenceConfig = configManager.getReference("echo");
         EchoService echoService = referenceConfig.get();
 
-        ReferenceConfig<UserService> referenceConfig1 = configManager.getReferenceConfig("user");
+        ReferenceConfig<UserService> referenceConfig1 = configManager.getReference("user");
         UserService userService = referenceConfig1.get();
 
         for (int i = 0; i < 500; i++) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -1259,6 +1259,7 @@ public InetSocketAddress toInetSocketAddress() {
 
     /**
      * The format is "{interface}:[version]:[group]"
+     *
      * @return
      */
     public String getColonSeparatedKey() {

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataService.java
Patch:
@@ -43,6 +43,8 @@
  */
 public interface MetadataService {
 
+    //FIXME the value is default, it was used by testing temporarily
+    static final String DEFAULT_EXTENSION = "default";
 
     /**
      * The value of all service names

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/WritableMetadataService.java
Patch:
@@ -64,7 +64,7 @@ default String serviceName() {
      *
      * @return If success , return <code>true</code>
      */
-    default boolean refreshMetadata(String revision){
+    default boolean refreshMetadata(String exportedRevision, String subscribedRevision){
         return true;
     }
 

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/test/JTestMetadataReport4Test.java
Patch:
@@ -67,7 +67,7 @@ protected void doSaveMetadata(ServiceMetadataIdentifier metadataIdentifier, URL
     }
 
     @Override
-    protected void doRemoveMetadata(ServiceMetadataIdentifier metadataIdentifier, URL url) {
+    protected void doRemoveMetadata(ServiceMetadataIdentifier metadataIdentifier) {
         throw new UnsupportedOperationException("This extension does not support working as a remote metadata center.");
     }
 
@@ -77,12 +77,12 @@ protected List<String> doGetExportedURLs(ServiceMetadataIdentifier metadataIdent
     }
 
     @Override
-    protected void doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, List<String> urls) {
+    protected void doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, String urls) {
 
     }
 
     @Override
-    protected List<String> doGetSubscribedURLs(SubscriberMetadataIdentifier metadataIdentifier) {
+    protected String doGetSubscribedURLs(SubscriberMetadataIdentifier metadataIdentifier) {
         throw new UnsupportedOperationException("This extension does not support working as a remote metadata center.");
     }
 

File: dubbo-metadata/dubbo-metadata-report-consul/src/main/java/org/apache/dubbo/metadata/store/consul/ConsulMetadataReport.java
Patch:
@@ -63,7 +63,7 @@ protected void doSaveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifie
     }
 
     @Override
-    protected void doRemoveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifier, URL url) {
+    protected void doRemoveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifier) {
         throw new UnsupportedOperationException("This extension does not support working as a remote metadata center.");
     }
 
@@ -73,12 +73,12 @@ protected List<String> doGetExportedURLs(ServiceMetadataIdentifier metadataIdent
     }
 
     @Override
-    protected void doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, List<String> urls) {
+    protected void doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, String urlListStr) {
 
     }
 
     @Override
-    protected List<String> doGetSubscribedURLs(SubscriberMetadataIdentifier subscriberMetadataIdentifier) {
+    protected String doGetSubscribedURLs(SubscriberMetadataIdentifier subscriberMetadataIdentifier) {
         throw new UnsupportedOperationException("This extension does not support working as a remote metadata center.");
     }
 

File: dubbo-metadata/dubbo-metadata-report-etcd/src/main/java/org/apache/dubbo/metadata/store/etcd/EtcdMetadataReport.java
Patch:
@@ -90,7 +90,7 @@ protected void doSaveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifie
     }
 
     @Override
-    protected void doRemoveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifier, URL url) {
+    protected void doRemoveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifier) {
         throw new UnsupportedOperationException("This extension does not support working as a remote metadata center.");
     }
 
@@ -100,12 +100,12 @@ protected List<String> doGetExportedURLs(ServiceMetadataIdentifier metadataIdent
     }
 
     @Override
-    protected void doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, List<String> urls) {
+    protected void doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, String urlListStr) {
 
     }
 
     @Override
-    protected List<String> doGetSubscribedURLs(SubscriberMetadataIdentifier subscriberMetadataIdentifier) {
+    protected String doGetSubscribedURLs(SubscriberMetadataIdentifier subscriberMetadataIdentifier) {
         throw new UnsupportedOperationException("This extension does not support working as a remote metadata center.");
     }
 

File: dubbo-metadata/dubbo-metadata-report-nacos/src/main/java/org/apache/dubbo/metadata/store/nacos/NacosMetadataReport.java
Patch:
@@ -131,7 +131,7 @@ protected void doSaveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifie
     }
 
     @Override
-    protected void doRemoveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifier, URL url) {
+    protected void doRemoveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifier) {
         throw new UnsupportedOperationException("This extension does not support working as a remote metadata center.");
     }
 
@@ -141,12 +141,12 @@ protected List<String> doGetExportedURLs(ServiceMetadataIdentifier metadataIdent
     }
 
     @Override
-    protected void doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, List<String> urls) {
+    protected void doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, String urlListStr) {
         throw new UnsupportedOperationException("This extension does not support working as a remote metadata center.");
     }
 
     @Override
-    protected List<String> doGetSubscribedURLs(SubscriberMetadataIdentifier subscriberMetadataIdentifier) {
+    protected String doGetSubscribedURLs(SubscriberMetadataIdentifier subscriberMetadataIdentifier) {
         throw new UnsupportedOperationException("This extension does not support working as a remote metadata center.");
     }
 

File: dubbo-metadata/dubbo-metadata-report-redis/src/main/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReport.java
Patch:
@@ -86,7 +86,7 @@ protected void doSaveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifie
     }
 
     @Override
-    protected void doRemoveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifier, URL url) {
+    protected void doRemoveMetadata(ServiceMetadataIdentifier serviceMetadataIdentifier) {
 
     }
 
@@ -96,12 +96,12 @@ protected List<String> doGetExportedURLs(ServiceMetadataIdentifier metadataIdent
     }
 
     @Override
-    protected void doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, List<String> urls) {
+    protected void doSaveSubscriberData(SubscriberMetadataIdentifier subscriberMetadataIdentifier, String urlListStr) {
         throw new UnsupportedOperationException("This extension does not support working as a remote metadata center.");
     }
 
     @Override
-    protected List<String> doGetSubscribedURLs(SubscriberMetadataIdentifier subscriberMetadataIdentifier) {
+    protected String doGetSubscribedURLs(SubscriberMetadataIdentifier subscriberMetadataIdentifier) {
         throw new UnsupportedOperationException("This extension does not support working as a remote metadata center.");
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/wrapper/CompositeDynamicConfiguration.java
Patch:
@@ -36,7 +36,9 @@ public class CompositeDynamicConfiguration implements DynamicConfiguration {
     private Set<DynamicConfiguration> configurations = new HashSet<>();
 
     public void addConfiguration(DynamicConfiguration configuration) {
-        this.configurations.add(configuration);
+        if (configuration != null) {
+            this.configurations.add(configuration);
+        }
     }
 
     @Override

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java
Patch:
@@ -43,6 +43,7 @@
 @Documented
 @EnableDubboConfig
 @DubboComponentScan
+@EnableDubboLifecycle
 public @interface EnableDubbo {
 
     /**

File: dubbo-event/src/test/java/org/apache/dubbo/event/EchoEventListener2.java
Patch:
@@ -25,8 +25,7 @@
  *
  * @since 2.7.4
  */
-public class EchoEventListener2 extends Vector<EventListener<Event>> implements Serializable, Comparable<EventListener<Event>>,
-        EventListener<Event> {
+public class EchoEventListener2 extends Vector<EventListener<Event>> implements Serializable, EventListener<Event> {
 
     private AbstractEventListener<Event> delegate = new AbstractEventListener<Event>() {
         @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceInstanceCustomizer.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.registry.client;
 
+import org.apache.dubbo.common.lang.Prioritized;
 import org.apache.dubbo.registry.client.event.ServiceInstancePreRegisteredEvent;
 import org.apache.dubbo.registry.client.event.listener.CustomizableServiceInstanceListener;
 
@@ -27,7 +28,7 @@
  * @see ServiceInstance#getMetadata()
  * @since 2.7.4
  */
-public interface ServiceInstanceCustomizer {
+public interface ServiceInstanceCustomizer extends Prioritized {
 
     /**
      * Customizes {@link ServiceInstance the service instance}

File: dubbo-serialization/dubbo-serialization-kryo/src/main/java/org/apache/dubbo/common/serialize/kryo/utils/AbstractKryoFactory.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.serialize.kryo.utils;
 
+import com.esotericsoftware.kryo.serializers.JavaSerializer;
 import org.apache.dubbo.common.serialize.kryo.CompatibleKryo;
 import org.apache.dubbo.common.serialize.support.SerializableClassRegistry;
 
@@ -93,6 +94,7 @@ public Kryo create() {
 //        kryo.setReferences(false);
         kryo.setRegistrationRequired(registrationRequired);
 
+        kryo.addDefaultSerializer(Throwable.class, new JavaSerializer());
         kryo.register(Arrays.asList("").getClass(), new ArraysAsListSerializer());
         kryo.register(GregorianCalendar.class, new GregorianCalendarSerializer());
         kryo.register(InvocationHandler.class, new JdkProxySerializer());

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceConsumerBootstrap.java
Patch:
@@ -41,7 +41,7 @@ public static void main(String[] args) throws Exception {
 
         ConfigManager configManager = ConfigManager.getInstance();
 
-        ReferenceConfig<EchoService> referenceConfig = configManager.getReferenceConfig("ref");
+        ReferenceConfig<EchoService> referenceConfig = configManager.getReference("ref");
 
         EchoService echoService = referenceConfig.get();
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -40,6 +40,7 @@
 import java.lang.reflect.Modifier;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -638,7 +639,7 @@ public boolean equals(Object obj) {
                     Method method2 = obj.getClass().getMethod(method1.getName(), method1.getParameterTypes());
                     Object value1 = method1.invoke(this, new Object[]{});
                     Object value2 = method2.invoke(obj, new Object[]{});
-                    if ((value1 != null && value2 != null) && !value1.equals(value2)) {
+                    if (!Objects.equals(value1, value2)) {
                         return false;
                     }
                 } catch (Exception e) {

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceProviderBootstrap.java
Patch:
@@ -32,7 +32,7 @@ public static void main(String[] args) {
 //                .registry("zookeeper", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service"))
 //                .registry(RegistryBuilder.newBuilder().address("etcd3://127.0.0.1:2379?registry-type=service").build())
                 .protocol(builder -> builder.port(-1).name("dubbo"))
-                .protocol(builder -> builder.port(-1).name("hessian"))
+//                .protocol(builder -> builder.port(-1).name("hessian"))
                 .service(builder -> builder.id("test").interfaceClass(EchoService.class).ref(new EchoServiceImpl()))
                 .start()
                 .await();

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/DynamicConfiguration.java
Patch:
@@ -39,7 +39,10 @@
  * <li>{@link #addListener(String, String, ConfigurationListener)}/ {@link #removeListener(String, String, ConfigurationListener)}
  * , add or remove listeners for governance rules or config items that need to watch.</li>
  * <li>{@link #getProperty(String, Object)}, get a single config item.</li>
+ * <li>{@link #getConfig(String, String, long)}, get the specified config</li>
  * </ol>
+ *
+ * @see AbstractDynamicConfiguration
  */
 public interface DynamicConfiguration extends Configuration, AutoCloseable {
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.dubbo.metadata.MetadataService;
 import org.apache.dubbo.metadata.MetadataServiceExporter;
 import org.apache.dubbo.metadata.WritableMetadataService;
-import org.apache.dubbo.metadata.store.RemoteWritableMetadataService;
 
 import java.util.Collection;
 import java.util.LinkedList;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/MetadataServiceExporter.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.metadata;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.SPI;
 
 import java.util.List;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/RefreshServiceMetadataCustomizer.java
Patch:
@@ -3,7 +3,6 @@
 import org.apache.dubbo.metadata.WritableMetadataService;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstanceCustomizer;
-import org.apache.dubbo.registry.client.ServiceInstanceMetadataCustomizer;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.EXPORTED_SERVICES_REVISION_KEY;

File: dubbo-registry/dubbo-registry-etcd3/src/main/java/org/apache/dubbo/registry/etcd/EtcdServiceDiscovery.java
Patch:
@@ -38,7 +38,6 @@
 
 import java.io.File;
 import java.util.Collections;
-
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java
Patch:
@@ -298,8 +298,10 @@ private ReferenceBean buildReferenceBeanIfAbsent(String referencedBeanName, Anno
                     .interfaceClass(referencedType);
             referenceBean = beanBuilder.build();
             referenceBeanCache.put(referencedBeanName, referenceBean);
+        } else if (!referencedType.isAssignableFrom(referenceBean.getInterfaceClass())) {
+            throw new IllegalArgumentException("reference bean name " + referencedBeanName + " has been duplicated, but interfaceClass " +
+                    referenceBean.getInterfaceClass().getName() + " cannot be assigned to " + referencedType.getName());
         }
-
         return referenceBean;
     }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigBindingBeanPostProcessor.java
Patch:
@@ -87,7 +87,7 @@ public DubboConfigBindingBeanPostProcessor(String prefix, String beanName) {
     @Override
     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
 
-        if (beanName.equals(this.beanName) && bean instanceof AbstractConfig) {
+        if (this.beanName.equals(beanName) && bean instanceof AbstractConfig) {
 
             AbstractConfig dubboConfig = (AbstractConfig) bean;
 
@@ -203,4 +203,4 @@ protected DubboConfigBinder createDubboConfigBinder(Environment environment) {
         return defaultDubboConfigBinder;
     }
 
-}
\ No newline at end of file
+}

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/integration/MetadataReportService.java
Patch:
@@ -94,7 +94,8 @@ public void publishProvider(URL providerUrl) throws RpcException {
         try {
             String interfaceName = providerUrl.getParameter(INTERFACE_KEY);
             if (StringUtils.isNotEmpty(interfaceName)) {
-                Class interfaceClass = Class.forName(interfaceName);
+                ClassLoader classLoader = null == Thread.currentThread().getContextClassLoader() ? this.getClass().getClassLoader() : Thread.currentThread().getContextClassLoader();
+                Class interfaceClass = Class.forName(interfaceName, true, classLoader);
                 FullServiceDefinition fullServiceDefinition = ServiceDefinitionBuilder.buildFullDefinition(interfaceClass, providerUrl.getParameters());
                 metadataReport.storeProviderMetadata(new MetadataIdentifier(providerUrl.getServiceInterface(),
                         providerUrl.getParameter(VERSION_KEY), providerUrl.getParameter(GROUP_KEY),

File: dubbo-configcenter/dubbo-configcenter-etcd/src/test/java/org/apache/dubbo/configcenter/support/etcd/EtcdDynamicConfigurationTest.java
Patch:
@@ -58,8 +58,8 @@ public void testGetConfig() {
 
         put("/dubbo/config/org.apache.dubbo.etcd.testService/configurators", "hello");
         put("/dubbo/config/test/dubbo.properties", "aaa=bbb");
-        Assert.assertEquals("hello", config.getRule("org.apache.dubbo.etcd.testService.configurators", DynamicConfiguration.DEFAULT_GROUP));
-        Assert.assertEquals("aaa=bbb", config.getRule("dubbo.properties", "test"));
+        Assert.assertEquals("hello", config.getConfig("org.apache.dubbo.etcd.testService.configurators", DynamicConfiguration.DEFAULT_GROUP));
+        Assert.assertEquals("aaa=bbb", config.getConfig("dubbo.properties", "test"));
     }
 
     @Test

File: dubbo-registry/dubbo-registry-consul/src/main/java/org/apache/dubbo/registry/consul/ConsulServiceDiscoveryFactory.java
Patch:
@@ -17,15 +17,15 @@
 package org.apache.dubbo.registry.consul;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.registry.client.AbstractServiceDiscoveryFactory;
 import org.apache.dubbo.registry.client.ServiceDiscovery;
-import org.apache.dubbo.registry.client.ServiceDiscoveryFactory;
 
 /**
  * 2019-07-31
  */
-public class ConsulServiceDiscoveryFactory implements ServiceDiscoveryFactory {
+public class ConsulServiceDiscoveryFactory extends AbstractServiceDiscoveryFactory {
     @Override
-    public ServiceDiscovery create(URL connectionURL) {
+    public ServiceDiscovery createDiscovery(URL connectionURL) {
         return new ConsulServiceDiscovery(connectionURL);
     }
 }

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceConsumerBootstrap.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.context.ConfigManager;
 
-
 /**
  * Dubbo Provider Bootstrap
  *

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceProviderBootstrap.java
Patch:
@@ -31,6 +31,7 @@ public static void main(String[] args) {
                 // Nacos
 //                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service"))
 //                .registry(RegistryBuilder.newBuilder().address("etcd3://127.0.0.1:2379?registry-type=service").build())
+//                .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service"))
                 .protocol(builder -> builder.port(-1).name("dubbo"))
                 .service(builder -> builder.id("test").interfaceClass(EchoService.class).ref(new EchoServiceImpl()))
                 .start()

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java
Patch:
@@ -119,7 +119,7 @@ private synchronized void init(String ruleKey) {
         }
         String routerKey = ruleKey + RULE_SUFFIX;
         configuration.addListener(routerKey, this);
-        String rule = configuration.getRule(routerKey, DynamicConfiguration.DEFAULT_GROUP);
+        String rule = configuration.getConfig(routerKey, DynamicConfiguration.DEFAULT_GROUP);
         if (StringUtils.isNotEmpty(rule)) {
             this.process(new ConfigChangeEvent(routerKey, rule));
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java
Patch:
@@ -249,7 +249,7 @@ public <T> void notify(List<Invoker<T>> invokers) {
                 String key = providerApplication + RULE_SUFFIX;
                 configuration.addListener(key, this);
                 application = providerApplication;
-                String rawRule = configuration.getRule(key, DynamicConfiguration.DEFAULT_GROUP);
+                String rawRule = configuration.getConfig(key, DynamicConfiguration.DEFAULT_GROUP);
                 if (StringUtils.isNotEmpty(rawRule)) {
                     this.process(new ConfigChangeEvent(key, rawRule));
                 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -32,8 +32,8 @@
 
 import java.util.List;
 
-import static org.apache.dubbo.rpc.cluster.Constants.INVOCATION_NEED_MOCK;
 import static org.apache.dubbo.rpc.Constants.MOCK_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.INVOCATION_NEED_MOCK;
 
 public class MockClusterInvoker<T> implements Invoker<T> {
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.dubbo.rpc.cluster.router;
 
+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;
+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser;
+
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
 import org.apache.curator.retry.ExponentialBackoffRetry;
-import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;
-import org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -47,10 +47,10 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicLong;
 
+import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_AVAILABLE_CHECK_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.INVOCATION_NEED_MOCK;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Configuration.java
Patch:
@@ -127,6 +127,4 @@ default <T> T convert(Class<T> cls, String key, T defaultValue) {
 
         return cls.cast(obj);
     }
-
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -165,7 +165,7 @@ public interface CommonConstants {
 
     String METADATA_KEY = "metadata";
 
-    String METADATA_DEFAULT = "local";
+    String METADATA_DEFAULT = "default";
 
     String METADATA_REMOTE = "remote";
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/MixinTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.junit.jupiter.api.Test;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class MixinTest {

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/InmemoryConfigurationTest.java
Patch:
@@ -16,14 +16,14 @@
  */
 package org.apache.dubbo.common.config;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * The type Inmemory configuration test.
  */

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-import java.util.Objects;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/PojoUtilsTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.common.model.person.PersonInfo;
 import org.apache.dubbo.common.model.person.PersonStatus;
 import org.apache.dubbo.common.model.person.Phone;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -34,20 +35,20 @@
 import java.util.Arrays;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
-import java.util.HashSet;
 import java.util.Map;
 import java.util.UUID;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertSame;
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class PojoUtilsTest {

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/FutureAdapter.java
Patch:
@@ -17,14 +17,14 @@
 
 package com.alibaba.dubbo.rpc.protocol.dubbo;
 
+import org.apache.dubbo.rpc.AppResponse;
+import org.apache.dubbo.rpc.Result;
+
 import com.alibaba.dubbo.remoting.RemotingException;
 import com.alibaba.dubbo.remoting.exchange.ResponseCallback;
 import com.alibaba.dubbo.remoting.exchange.ResponseFuture;
 import com.alibaba.dubbo.rpc.RpcException;
 
-import org.apache.dubbo.rpc.AppResponse;
-import org.apache.dubbo.rpc.Result;
-
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.ExecutionException;

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java
Patch:
@@ -43,7 +43,6 @@
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class MethodConfigTest {
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvoker.java
Patch:
@@ -59,7 +59,7 @@ public boolean isAvailable() {
 
     public Result invoke(Invocation invocation) throws RpcException {
         AppResponse result = new AppResponse();
-        if (hasException == false) {
+        if (!hasException) {
             result.setValue("alibaba");
         } else {
             result.setException(new RuntimeException("mocked exception"));

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -435,5 +435,4 @@ private void updateParameters(Map<String, String> map, String key, String value)
         }
         parameters.put(key, value);
     }
-
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -1,4 +1,3 @@
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -767,7 +766,7 @@ private Integer findConfigedPorts(ProtocolConfig protocolConfig, String name, Ma
             if (portToBind == null || portToBind == 0) {
                 portToBind = defaultPort;
             }
-            if (portToBind <= 0) {
+            if (portToBind == null || portToBind <= 0) {
                 portToBind = getRandomPort(name);
                 if (portToBind == null || portToBind < 0) {
                     portToBind = getAvailablePort(defaultPort);
@@ -1060,4 +1059,4 @@ public String getPrefix() {
     protected void dispatch(Event event) {
         eventDispatcher.dispatch(event);
     }
-}
+}
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporterTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.metadata.MetadataService;
-import org.apache.dubbo.metadata.MetadataServiceExporter;
 
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
@@ -44,6 +43,7 @@ public class ConfigurableMetadataServiceExporterTest {
     @BeforeAll
     public static void init() {
         ConfigManager configManager = ConfigManager.getInstance();
+        configManager.clear();
         ApplicationConfig applicationConfig = new ApplicationConfig();
         applicationConfig.setName("test");
         configManager.setApplication(applicationConfig);
@@ -69,7 +69,8 @@ private static RegistryConfig registryConfig() {
 
     @Test
     public void testExportAndUnexport() {
-        MetadataServiceExporter exporter = new ConfigurableMetadataServiceExporter();
+        ConfigurableMetadataServiceExporter exporter = new ConfigurableMetadataServiceExporter();
+        exporter.setApplicationConfig(ConfigManager.getInstance().getApplication().get());
         List<URL> urls = exporter.export();
 
         assertEquals(1, urls.size());

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config.spring.context.annotation.provider;
 
+import org.apache.dubbo.config.annotation.Method;
 import org.apache.dubbo.config.spring.api.Box;
 import org.apache.dubbo.config.spring.api.DemoService;
 
@@ -32,7 +33,8 @@
         version = "2.5.7",
         application = "${demo.service.application}",
         protocol = "${demo.service.protocol}",
-        registry = "${demo.service.registry}"
+        registry = "${demo.service.registry}",
+        methods = @Method(timeout = 100,name = "sayName")
 )
 @Service
 @Transactional

File: dubbo-configcenter/dubbo-configcenter-consul/src/main/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfiguration.java
Patch:
@@ -93,16 +93,16 @@ public void removeListener(String key, String group, ConfigurationListener liste
     }
 
     @Override
-    public String getRule(String key, String group, long timeout) throws IllegalStateException {
+    public String getConfig(String key, String group, long timeout) throws IllegalStateException {
         return (String) getInternalProperty(convertKey(group, key));
     }
 
     @Override
-    public String getProperties(String key, String group, long timeout) throws IllegalStateException {
+    public String getRule(String key, String group, long timeout) throws IllegalStateException {
         if (StringUtils.isEmpty(group)) {
             group = DEFAULT_GROUP;
         }
-        return (String) getInternalProperty(convertKey(group, key));
+        return getConfig(key, group, timeout);
     }
 
     @Override

File: dubbo-configcenter/dubbo-configcenter-nacos/src/test/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfigurationTest.java
Patch:
@@ -59,9 +59,9 @@ public void testGetConfig() throws Exception {
         Thread.sleep(200);
         put("org.apache.dubbo.demo.DemoService:1.0.0.test:xxxx.configurators", "helloworld");
         Thread.sleep(200);
-        Assertions.assertEquals("hello", config.getRule("org.apache.dubbo.nacos.testService.configurators", DynamicConfiguration.DEFAULT_GROUP));
-        Assertions.assertEquals("aaa=bbb", config.getRule("dubbo.properties", "test"));
-        Assertions.assertEquals("helloworld", config.getRule("org.apache.dubbo.demo.DemoService:1.0.0.test:xxxx.configurators", DynamicConfiguration.DEFAULT_GROUP));
+        Assertions.assertEquals("hello", config.getConfig("org.apache.dubbo.nacos.testService.configurators", DynamicConfiguration.DEFAULT_GROUP));
+        Assertions.assertEquals("aaa=bbb", config.getConfig("dubbo.properties", "test"));
+        Assertions.assertEquals("helloworld", config.getConfig("org.apache.dubbo.demo.DemoService:1.0.0.test:xxxx.configurators", DynamicConfiguration.DEFAULT_GROUP));
     }
 
     @Test

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/test/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationTest.java
Patch:
@@ -92,7 +92,7 @@ private static void setData(String path, String data) throws Exception {
 
     @Test
     public void testGetConfig() throws Exception {
-        Assertions.assertEquals("The content from dubbo.properties", configuration.getProperties("dubbo.properties", "dubbo"));
+        Assertions.assertEquals("The content from dubbo.properties", configuration.getConfig("dubbo.properties", "dubbo"));
     }
 
     @Test

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/WritableMetadataService.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @since 2.7.4
  */
-@SPI("local")
+@SPI("default")
 public interface WritableMetadataService extends MetadataService {
 
     /**

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/report/identifier/MetadataIdentifierTest.java
Patch:
@@ -42,7 +42,7 @@ public void testGetUniqueKey() {
                         (version == null ? "" : (version + PATH_SEPARATOR))
                         + (group == null ? "" : (group + PATH_SEPARATOR)) + PROVIDER_SIDE
                         + PATH_SEPARATOR + application);
-        Assertions.assertEquals(providerMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY),
+        Assertions.assertEquals(providerMetadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.UNIQUE_KEY),
                 interfaceName + MetadataIdentifier.SEPARATOR +
                         (version == null ? "" : version) + MetadataIdentifier.SEPARATOR
                         + (group == null ? "" : group) + MetadataIdentifier.SEPARATOR

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/store/RemoteWritableMeatadataServiceTest.java
Patch:
@@ -81,7 +81,7 @@ public void testPublishProviderWrongInterface() {
     @Test
     public void testPublishProviderContainInterface() throws InterruptedException {
 
-        URL publishUrl = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService?version=1.0.3&application=vicpubp&interface=org.apache.dubbo.metadata.integration.InterfaceNameTestService&side=provider");
+        URL publishUrl = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService?version=1.0.3&application=vicpubp&interface=org.apache.dubbo.metadata.store.InterfaceNameTestService&side=provider");
         metadataReportService1.publishProvider(publishUrl);
         Thread.sleep(300);
 
@@ -95,7 +95,7 @@ public void testPublishProviderContainInterface() throws InterruptedException {
         Map<String,String> map = fullServiceDefinition.getParameters();
         Assertions.assertEquals(map.get("application"), "vicpubp");
         Assertions.assertEquals(map.get("version"), "1.0.3");
-        Assertions.assertEquals(map.get("interface"), "org.apache.dubbo.metadata.integration.InterfaceNameTestService");
+        Assertions.assertEquals(map.get("interface"), "org.apache.dubbo.metadata.store.InterfaceNameTestService");
     }
 
     @Test

File: dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/MetricsFilterTest.java
Patch:
@@ -38,7 +38,6 @@
 import com.alibaba.metrics.common.MetricObject;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -60,7 +59,6 @@
 import static org.apache.dubbo.monitor.Constants.DUBBO_PROVIDER_METHOD;
 import static org.apache.dubbo.monitor.Constants.METHOD;
 import static org.apache.dubbo.monitor.Constants.SERVICE;
-
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.mock;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/CommandHelperTest.java
Patch:
@@ -22,15 +22,16 @@
 import org.apache.dubbo.qos.command.impl.Offline;
 import org.apache.dubbo.qos.command.impl.Online;
 import org.apache.dubbo.qos.command.impl.Quit;
+
 import org.junit.jupiter.api.Test;
 
 import java.util.List;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNull;
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class CommandHelperTest {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ExportedServicesRevisionMetadataCustomizer.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.List;
+import java.util.SortedSet;
 
 import static java.lang.String.valueOf;
 import static java.util.Objects.hash;
@@ -48,7 +48,7 @@ protected String buildMetadataKey(ServiceInstance serviceInstance) {
     @Override
     protected String buildMetadataValue(ServiceInstance serviceInstance) {
         WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension();
-        List<String> exportedURLs = writableMetadataService.getExportedURLs();
+        SortedSet<String> exportedURLs = writableMetadataService.getExportedURLs();
         Object[] data = exportedURLs.stream()
                 .map(URL::valueOf)                       // String to URL
                 .map(URL::getServiceInterface)           // get the service interface

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceURLParamsMetadataCustomizer.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstanceMetadataCustomizer;
 
-import java.util.List;
+import java.util.SortedSet;
 
 import static org.apache.dubbo.metadata.MetadataService.toURLs;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.METADATA_SERVICE_URL_PARAMS_KEY;
@@ -53,7 +53,7 @@ public String buildMetadataValue(ServiceInstance serviceInstance) {
 
         String version = MetadataService.VERSION;
 
-        List<String> urls = writableMetadataService.getExportedURLs(serviceInterface, group, version);
+        SortedSet<String> urls = writableMetadataService.getExportedURLs(serviceInterface, group, version);
 
         return getMetadataServiceParameter(toURLs(urls));
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/proxy/MetadataServiceProxyFactory.java
Patch:
@@ -29,7 +29,7 @@
  * @see MetadataService
  * @since 2.7.4
  */
-@SPI("local")
+@SPI("default")
 public interface MetadataServiceProxyFactory {
 
     /**

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/RegistryProtocolTest.java
Patch:
@@ -41,8 +41,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.apache.dubbo.registry.integration.RegistryProtocol.DEFAULT_REGISTER_PROVIDER_KEYS;
+import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNull;

File: dubbo-registry/dubbo-registry-etcd3/src/main/java/org/apache/dubbo/registry/etcd/EtcdServiceDiscovery.java
Patch:
@@ -38,6 +38,7 @@
 
 import java.io.File;
 import java.util.Collections;
+
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;

File: dubbo-registry/dubbo-registry-etcd3/src/test/java/org/apache/dubbo/registry/etcd/EtcdRegistryTest.java
Patch:
@@ -79,12 +79,12 @@
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.registry.Constants.ADMIN_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.CATEGORY_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONFIGURATORS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONSUMERS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.PROVIDERS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.ROUTERS_CATEGORY;
+import static org.apache.dubbo.registry.Constants.ADMIN_PROTOCOL;
 
 @Disabled
 public class EtcdRegistryTest {

File: dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java
Patch:
@@ -51,14 +51,14 @@
 import static org.apache.dubbo.common.constants.CommonConstants.ANY_VALUE;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
-import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
-import static org.apache.dubbo.registry.Constants.DEFAULT_SESSION_TIMEOUT;
 import static org.apache.dubbo.common.constants.RegistryConstants.DYNAMIC_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.EMPTY_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.OVERRIDE_PROTOCOL;
+import static org.apache.dubbo.common.constants.RegistryConstants.ROUTE_PROTOCOL;
+import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
+import static org.apache.dubbo.registry.Constants.DEFAULT_SESSION_TIMEOUT;
 import static org.apache.dubbo.registry.Constants.REGISTER;
 import static org.apache.dubbo.registry.Constants.REGISTER_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.ROUTE_PROTOCOL;
 import static org.apache.dubbo.registry.Constants.SESSION_TIMEOUT_KEY;
 import static org.apache.dubbo.registry.Constants.SUBSCRIBE;
 import static org.apache.dubbo.registry.Constants.UNREGISTER;

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistryFactory.java
Patch:
@@ -21,9 +21,6 @@
 import org.apache.dubbo.registry.RegistryFactory;
 import org.apache.dubbo.registry.support.AbstractRegistryFactory;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import static org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils.createNamingService;
 
 /**

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/util/NacosNamingServiceUtils.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.dubbo.registry.nacos.util;/*
+/*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+package org.apache.dubbo.registry.nacos.util;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistry.java
Patch:
@@ -60,8 +60,6 @@ public class ZookeeperRegistry extends FailbackRegistry {
 
     private final static Logger logger = LoggerFactory.getLogger(ZookeeperRegistry.class);
 
-    private final static int DEFAULT_ZOOKEEPER_PORT = 2181;
-
     private final static String DEFAULT_ROOT = "dubbo";
 
     private final String root;

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistryTest.java
Patch:
@@ -55,8 +55,9 @@ public class ZookeeperRegistryTest {
     public void setUp() throws Exception {
         int zkServerPort = NetUtils.getAvailablePort();
         this.zkServer = new TestingServer(zkServerPort, true);
-        this.registryUrl = URL.valueOf("zookeeper://localhost:" + zkServerPort);
+        this.zkServer.start();
 
+        this.registryUrl = URL.valueOf("zookeeper://localhost:" + zkServerPort);
         zookeeperRegistryFactory = new ZookeeperRegistryFactory();
         zookeeperRegistryFactory.setZookeeperTransporter(new CuratorZookeeperTransporter());
         this.zookeeperRegistry = (ZookeeperRegistry) zookeeperRegistryFactory.createRegistry(registryUrl);

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.Page;
+import org.apache.dubbo.event.EventDispatcher;
 import org.apache.dubbo.registry.client.DefaultServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstance;
 
@@ -60,6 +61,7 @@ public class ZookeeperServiceDiscoveryTest {
 
     @BeforeEach
     public void init() throws Exception {
+        EventDispatcher.getDefaultExtension().removeAllEventListeners();
         zkServerPort = getAvailablePort();
         zkServer = new TestingServer(zkServerPort, true);
         zkServer.start();

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/PerformanceClientFixedTest.java
Patch:
@@ -80,7 +80,7 @@ public void testClient() throws Exception {
             } catch (Throwable t) {
                 t.printStackTrace();
             } finally {
-                if (client != null && client.isConnected() == false) {
+                if (client != null && !client.isConnected()) {
                     f++;
                     System.out.println("open client failed, try again " + f);
                     client.close();

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/transport/AbstractCodecTest.java
Patch:
@@ -16,13 +16,14 @@
  */
 package org.apache.dubbo.remoting.transport;
 
-import java.io.IOException;
-
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.remoting.Channel;
+
 import org.hamcrest.CoreMatchers;
 import org.mockito.internal.verification.VerificationModeFactory;
 
+import java.io.IOException;
+
 import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.BDDMockito.given;

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/BlockMyInvoker.java
Patch:
@@ -40,7 +40,7 @@ public BlockMyInvoker(URL url, boolean hasException, long blockTime) {
     @Override
     public Result invoke(Invocation invocation) throws RpcException {
         AppResponse result = new AppResponse();
-        if (hasException == false) {
+        if (!hasException) {
             try {
                 Thread.sleep(blockTime);
             } catch (InterruptedException e) {

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/MyInvoker.java
Patch:
@@ -60,7 +60,7 @@ public boolean isAvailable() {
 
     public Result invoke(Invocation invocation) throws RpcException {
         AppResponse result = new AppResponse();
-        if (hasException == false) {
+        if (!hasException) {
             result.setValue("alibaba");
         } else {
             result.setException(new RuntimeException("mocked exception"));

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/RpcUtilsTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcInvocation;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -28,15 +29,14 @@
 import java.util.List;
 import java.util.Map;
 
+import static org.apache.dubbo.rpc.Constants.AUTO_ATTACH_INVOCATIONID_KEY;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 
-import static org.apache.dubbo.rpc.Constants.AUTO_ATTACH_INVOCATIONID_KEY;
-
 public class RpcUtilsTest {
 
     /**

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -520,7 +520,7 @@ private boolean checkClientCanUse(List<ReferenceCountExchangeClient> referenceCo
     }
 
     /**
-     * Add client references in bulk
+     * Increase the reference Count if we create new invoker shares same connection, the connection will be closed without any reference.
      *
      * @param referenceCountExchangeClients
      */

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/ReferenceCountExchangeClient.java
Patch:
@@ -192,6 +192,9 @@ public boolean isClosed() {
         return client.isClosed();
     }
 
+    /**
+     * The reference count of current ExchangeClient, connection will be closed if all invokers destroyed.
+     */
     public void incrementAndGetCount() {
         referenceCount.incrementAndGet();
     }

File: dubbo-rpc/dubbo-rpc-hessian/src/main/java/org/apache/dubbo/rpc/protocol/hessian/HessianProtocol.java
Patch:
@@ -48,11 +48,11 @@
 import static org.apache.dubbo.remoting.Constants.CLIENT_KEY;
 import static org.apache.dubbo.remoting.Constants.DEFAULT_EXCHANGER;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
-import static org.apache.dubbo.rpc.protocol.hessian.Constants.HESSIAN2_REQUEST_KEY;
 import static org.apache.dubbo.rpc.protocol.hessian.Constants.DEFAULT_HESSIAN2_REQUEST;
-import static org.apache.dubbo.rpc.protocol.hessian.Constants.HESSIAN_OVERLOAD_METHOD_KEY;
 import static org.apache.dubbo.rpc.protocol.hessian.Constants.DEFAULT_HESSIAN_OVERLOAD_METHOD;
 import static org.apache.dubbo.rpc.protocol.hessian.Constants.DEFAULT_HTTP_CLIENT;
+import static org.apache.dubbo.rpc.protocol.hessian.Constants.HESSIAN2_REQUEST_KEY;
+import static org.apache.dubbo.rpc.protocol.hessian.Constants.HESSIAN_OVERLOAD_METHOD_KEY;
 
 /**
  * http rpc support.

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/integration/swagger/DubboSwaggerApiListingResourceTest.java
Patch:
@@ -25,12 +25,12 @@
 import javax.servlet.ServletContext;
 import javax.ws.rs.core.Application;
 import javax.ws.rs.core.Response;
-
 import java.net.URI;
 import java.util.HashSet;
 import java.util.Set;
 
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class DubboSwaggerApiListingResourceTest {
 

File: dubbo-rpc/dubbo-rpc-rmi/src/test/java/org/apache/dubbo/rpc/protocol/rmi/RmiProtocolTest.java
Patch:
@@ -20,13 +20,13 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.rpc.Exporter;
+import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.RpcException;
-import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.service.EchoService;
-
 import org.apache.dubbo.rpc.service.GenericService;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;

File: dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProtocol.java
Patch:
@@ -150,8 +150,8 @@ public void run() {
     }
 
     @Override
-    @SuppressWarnings("unchecked")
     protected <T> T doRefer(final Class<T> serviceType, URL url) throws RpcException {
+    @SuppressWarnings("unchecked")
         XmlRpcProxyFactoryBean xmlRpcProxyFactoryBean = new XmlRpcProxyFactoryBean();
         xmlRpcProxyFactoryBean.setServiceUrl(url.setProtocol("http").toIdentityString());
         xmlRpcProxyFactoryBean.setServiceInterface(serviceType);

File: dubbo-serialization/dubbo-serialization-avro/src/main/java/org/apache/dubbo/common/serialize/avro/AvroObjectInput.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.dubbo.common.serialize.avro;
 
+import org.apache.dubbo.common.serialize.ObjectInput;
+
 import org.apache.avro.io.BinaryDecoder;
 import org.apache.avro.io.DecoderFactory;
 import org.apache.avro.reflect.ReflectDatumReader;
 import org.apache.avro.util.Utf8;
-import org.apache.dubbo.common.serialize.ObjectInput;
 
 import java.io.IOException;
 import java.io.InputStream;

File: dubbo-serialization/dubbo-serialization-avro/src/main/java/org/apache/dubbo/common/serialize/avro/AvroObjectOutput.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.dubbo.common.serialize.avro;
 
+import org.apache.dubbo.common.serialize.ObjectOutput;
+
 import org.apache.avro.io.BinaryEncoder;
 import org.apache.avro.io.EncoderFactory;
 import org.apache.avro.reflect.ReflectDatumWriter;
 import org.apache.avro.util.Utf8;
-import org.apache.dubbo.common.serialize.ObjectOutput;
 
 import java.io.IOException;
 import java.io.OutputStream;

File: dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/utils/WrapperUtils.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.dubbo.common.serialize.protostuff.Wrapper;
 import org.apache.dubbo.common.serialize.protostuff.delegate.SqlDateDelegate;
 import org.apache.dubbo.common.serialize.protostuff.delegate.TimeDelegate;
+import org.apache.dubbo.common.serialize.protostuff.delegate.TimestampDelegate;
 
 import io.protostuff.runtime.DefaultIdStrategy;
 import io.protostuff.runtime.RuntimeEnv;
-import org.apache.dubbo.common.serialize.protostuff.delegate.TimestampDelegate;
 
 import java.math.BigDecimal;
 import java.sql.Time;

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/hessian2/Hessian2PersonOkTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
 import org.apache.dubbo.common.serialize.base.AbstractSerializationPersonOkTest;
+
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/protobuf/support/GenericProtobufObjectOutputTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.common.serialize.protobuf.support;
 
 import org.apache.dubbo.common.serialize.protobuf.support.model.GooglePB;
+
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/support/SerializableClassRegistryTest.java
Patch:
@@ -18,12 +18,13 @@
 
 import org.apache.dubbo.common.serialize.model.SerializablePerson;
 import org.apache.dubbo.common.serialize.model.person.Phone;
+
 import org.junit.jupiter.api.Test;
 
 import java.util.Map;
 
-import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.equalTo;
 
 public class SerializableClassRegistryTest {
     @Test

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceConsumerBootstrap.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.context.ConfigManager;
 
-
 /**
  * Dubbo Provider Bootstrap
  *

File: dubbo-bootstrap/src/test/java/org/apache/dubbo/bootstrap/DubboServiceProviderBootstrap.java
Patch:
@@ -30,7 +30,6 @@ public static void main(String[] args) {
                 .registry("zookeeper", builder -> builder.address("zookeeper://127.0.0.1:2181?registry-type=service"))
                 // Nacos
                 .registry("nacos", builder -> builder.address("nacos://127.0.0.1:8848?registry-type=service"))
-//                .registry(RegistryBuilder.newBuilder().address("etcd3://127.0.0.1:2379?registry-type=service").build())
                 .protocol(builder -> builder.port(-1).name("dubbo"))
                 .service(builder -> builder.id("test").interfaceClass(EchoService.class).ref(new EchoServiceImpl()))
                 .start()

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java
Patch:
@@ -119,7 +119,7 @@ private synchronized void init(String ruleKey) {
         }
         String routerKey = ruleKey + RULE_SUFFIX;
         configuration.addListener(routerKey, this);
-        String rule = configuration.getRule(routerKey, DynamicConfiguration.DEFAULT_GROUP);
+        String rule = configuration.getConfig(routerKey, DynamicConfiguration.DEFAULT_GROUP);
         if (StringUtils.isNotEmpty(rule)) {
             this.process(new ConfigChangeEvent(routerKey, rule));
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java
Patch:
@@ -249,7 +249,7 @@ public <T> void notify(List<Invoker<T>> invokers) {
                 String key = providerApplication + RULE_SUFFIX;
                 configuration.addListener(key, this);
                 application = providerApplication;
-                String rawRule = configuration.getRule(key, DynamicConfiguration.DEFAULT_GROUP);
+                String rawRule = configuration.getConfig(key, DynamicConfiguration.DEFAULT_GROUP);
                 if (StringUtils.isNotEmpty(rawRule)) {
                     this.process(new ConfigChangeEvent(key, rawRule));
                 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -32,8 +32,8 @@
 
 import java.util.List;
 
-import static org.apache.dubbo.rpc.cluster.Constants.INVOCATION_NEED_MOCK;
 import static org.apache.dubbo.rpc.Constants.MOCK_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.INVOCATION_NEED_MOCK;
 
 public class MockClusterInvoker<T> implements Invoker<T> {
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.dubbo.rpc.cluster.router;
 
+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;
+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser;
+
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
 import org.apache.curator.retry.ExponentialBackoffRetry;
-import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;
-import org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -47,10 +47,10 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicLong;
 
+import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_AVAILABLE_CHECK_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.INVOCATION_NEED_MOCK;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
-import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Configuration.java
Patch:
@@ -127,6 +127,4 @@ default <T> T convert(Class<T> cls, String key, T defaultValue) {
 
         return cls.cast(obj);
     }
-
-
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/constants/CommonConstants.java
Patch:
@@ -165,7 +165,7 @@ public interface CommonConstants {
 
     String METADATA_KEY = "metadata";
 
-    String METADATA_DEFAULT = "local";
+    String METADATA_DEFAULT = "default";
 
     String METADATA_REMOTE = "remote";
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/MixinTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.junit.jupiter.api.Test;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class MixinTest {

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/InmemoryConfigurationTest.java
Patch:
@@ -16,14 +16,14 @@
  */
 package org.apache.dubbo.common.config;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * The type Inmemory configuration test.
  */

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-import java.util.Objects;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/PojoUtilsTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.common.model.person.PersonInfo;
 import org.apache.dubbo.common.model.person.PersonStatus;
 import org.apache.dubbo.common.model.person.Phone;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -34,20 +35,20 @@
 import java.util.Arrays;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
-import java.util.HashSet;
 import java.util.Map;
 import java.util.UUID;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertSame;
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class PojoUtilsTest {

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/FutureAdapter.java
Patch:
@@ -17,14 +17,14 @@
 
 package com.alibaba.dubbo.rpc.protocol.dubbo;
 
+import org.apache.dubbo.rpc.AppResponse;
+import org.apache.dubbo.rpc.Result;
+
 import com.alibaba.dubbo.remoting.RemotingException;
 import com.alibaba.dubbo.remoting.exchange.ResponseCallback;
 import com.alibaba.dubbo.remoting.exchange.ResponseFuture;
 import com.alibaba.dubbo.rpc.RpcException;
 
-import org.apache.dubbo.rpc.AppResponse;
-import org.apache.dubbo.rpc.Result;
-
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.ExecutionException;

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java
Patch:
@@ -43,7 +43,6 @@
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class MethodConfigTest {
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvoker.java
Patch:
@@ -59,7 +59,7 @@ public boolean isAvailable() {
 
     public Result invoke(Invocation invocation) throws RpcException {
         AppResponse result = new AppResponse();
-        if (hasException == false) {
+        if (!hasException) {
             result.setValue("alibaba");
         } else {
             result.setException(new RuntimeException("mocked exception"));

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -435,5 +435,4 @@ private void updateParameters(Map<String, String> map, String key, String value)
         }
         parameters.put(key, value);
     }
-
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -1,4 +1,3 @@
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -767,7 +766,7 @@ private Integer findConfigedPorts(ProtocolConfig protocolConfig, String name, Ma
             if (portToBind == null || portToBind == 0) {
                 portToBind = defaultPort;
             }
-            if (portToBind <= 0) {
+            if (portToBind == null || portToBind <= 0) {
                 portToBind = getRandomPort(name);
                 if (portToBind == null || portToBind < 0) {
                     portToBind = getAvailablePort(defaultPort);
@@ -1060,4 +1059,4 @@ public String getPrefix() {
     protected void dispatch(Event event) {
         eventDispatcher.dispatch(event);
     }
-}
+}
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporterTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.metadata.MetadataService;
-import org.apache.dubbo.metadata.MetadataServiceExporter;
 
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
@@ -44,6 +43,7 @@ public class ConfigurableMetadataServiceExporterTest {
     @BeforeAll
     public static void init() {
         ConfigManager configManager = ConfigManager.getInstance();
+        configManager.clear();
         ApplicationConfig applicationConfig = new ApplicationConfig();
         applicationConfig.setName("test");
         configManager.setApplication(applicationConfig);
@@ -69,7 +69,8 @@ private static RegistryConfig registryConfig() {
 
     @Test
     public void testExportAndUnexport() {
-        MetadataServiceExporter exporter = new ConfigurableMetadataServiceExporter();
+        ConfigurableMetadataServiceExporter exporter = new ConfigurableMetadataServiceExporter();
+        exporter.setApplicationConfig(ConfigManager.getInstance().getApplication().get());
         List<URL> urls = exporter.export();
 
         assertEquals(1, urls.size());

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config.spring.context.annotation.provider;
 
+import org.apache.dubbo.config.annotation.Method;
 import org.apache.dubbo.config.spring.api.Box;
 import org.apache.dubbo.config.spring.api.DemoService;
 
@@ -32,7 +33,8 @@
         version = "2.5.7",
         application = "${demo.service.application}",
         protocol = "${demo.service.protocol}",
-        registry = "${demo.service.registry}"
+        registry = "${demo.service.registry}",
+        methods = @Method(timeout = 100,name = "sayName")
 )
 @Service
 @Transactional

File: dubbo-configcenter/dubbo-configcenter-consul/src/main/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfiguration.java
Patch:
@@ -93,16 +93,16 @@ public void removeListener(String key, String group, ConfigurationListener liste
     }
 
     @Override
-    public String getRule(String key, String group, long timeout) throws IllegalStateException {
+    public String getConfig(String key, String group, long timeout) throws IllegalStateException {
         return (String) getInternalProperty(convertKey(group, key));
     }
 
     @Override
-    public String getProperties(String key, String group, long timeout) throws IllegalStateException {
+    public String getRule(String key, String group, long timeout) throws IllegalStateException {
         if (StringUtils.isEmpty(group)) {
             group = DEFAULT_GROUP;
         }
-        return (String) getInternalProperty(convertKey(group, key));
+        return getConfig(key, group, timeout);
     }
 
     @Override

File: dubbo-configcenter/dubbo-configcenter-nacos/src/test/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfigurationTest.java
Patch:
@@ -59,9 +59,9 @@ public void testGetConfig() throws Exception {
         Thread.sleep(200);
         put("org.apache.dubbo.demo.DemoService:1.0.0.test:xxxx.configurators", "helloworld");
         Thread.sleep(200);
-        Assertions.assertEquals("hello", config.getRule("org.apache.dubbo.nacos.testService.configurators", DynamicConfiguration.DEFAULT_GROUP));
-        Assertions.assertEquals("aaa=bbb", config.getRule("dubbo.properties", "test"));
-        Assertions.assertEquals("helloworld", config.getRule("org.apache.dubbo.demo.DemoService:1.0.0.test:xxxx.configurators", DynamicConfiguration.DEFAULT_GROUP));
+        Assertions.assertEquals("hello", config.getConfig("org.apache.dubbo.nacos.testService.configurators", DynamicConfiguration.DEFAULT_GROUP));
+        Assertions.assertEquals("aaa=bbb", config.getConfig("dubbo.properties", "test"));
+        Assertions.assertEquals("helloworld", config.getConfig("org.apache.dubbo.demo.DemoService:1.0.0.test:xxxx.configurators", DynamicConfiguration.DEFAULT_GROUP));
     }
 
     @Test

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/test/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationTest.java
Patch:
@@ -92,7 +92,7 @@ private static void setData(String path, String data) throws Exception {
 
     @Test
     public void testGetConfig() throws Exception {
-        Assertions.assertEquals("The content from dubbo.properties", configuration.getProperties("dubbo.properties", "dubbo"));
+        Assertions.assertEquals("The content from dubbo.properties", configuration.getConfig("dubbo.properties", "dubbo"));
     }
 
     @Test

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/WritableMetadataService.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @since 2.7.4
  */
-@SPI("local")
+@SPI("default")
 public interface WritableMetadataService extends MetadataService {
 
     /**

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/report/identifier/MetadataIdentifierTest.java
Patch:
@@ -42,7 +42,7 @@ public void testGetUniqueKey() {
                         (version == null ? "" : (version + PATH_SEPARATOR))
                         + (group == null ? "" : (group + PATH_SEPARATOR)) + PROVIDER_SIDE
                         + PATH_SEPARATOR + application);
-        Assertions.assertEquals(providerMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY),
+        Assertions.assertEquals(providerMetadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.UNIQUE_KEY),
                 interfaceName + MetadataIdentifier.SEPARATOR +
                         (version == null ? "" : version) + MetadataIdentifier.SEPARATOR
                         + (group == null ? "" : group) + MetadataIdentifier.SEPARATOR

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/store/RemoteWritableMeatadataServiceTest.java
Patch:
@@ -81,7 +81,7 @@ public void testPublishProviderWrongInterface() {
     @Test
     public void testPublishProviderContainInterface() throws InterruptedException {
 
-        URL publishUrl = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService?version=1.0.3&application=vicpubp&interface=org.apache.dubbo.metadata.integration.InterfaceNameTestService&side=provider");
+        URL publishUrl = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService?version=1.0.3&application=vicpubp&interface=org.apache.dubbo.metadata.store.InterfaceNameTestService&side=provider");
         metadataReportService1.publishProvider(publishUrl);
         Thread.sleep(300);
 
@@ -95,7 +95,7 @@ public void testPublishProviderContainInterface() throws InterruptedException {
         Map<String,String> map = fullServiceDefinition.getParameters();
         Assertions.assertEquals(map.get("application"), "vicpubp");
         Assertions.assertEquals(map.get("version"), "1.0.3");
-        Assertions.assertEquals(map.get("interface"), "org.apache.dubbo.metadata.integration.InterfaceNameTestService");
+        Assertions.assertEquals(map.get("interface"), "org.apache.dubbo.metadata.store.InterfaceNameTestService");
     }
 
     @Test

File: dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/MetricsFilterTest.java
Patch:
@@ -38,7 +38,6 @@
 import com.alibaba.metrics.common.MetricObject;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -60,7 +59,6 @@
 import static org.apache.dubbo.monitor.Constants.DUBBO_PROVIDER_METHOD;
 import static org.apache.dubbo.monitor.Constants.METHOD;
 import static org.apache.dubbo.monitor.Constants.SERVICE;
-
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.mock;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/CommandHelperTest.java
Patch:
@@ -22,15 +22,16 @@
 import org.apache.dubbo.qos.command.impl.Offline;
 import org.apache.dubbo.qos.command.impl.Online;
 import org.apache.dubbo.qos.command.impl.Quit;
+
 import org.junit.jupiter.api.Test;
 
 import java.util.List;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNull;
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class CommandHelperTest {

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ExportedServicesRevisionMetadataCustomizer.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.List;
+import java.util.SortedSet;
 
 import static java.lang.String.valueOf;
 import static java.util.Objects.hash;
@@ -48,7 +48,7 @@ protected String buildMetadataKey(ServiceInstance serviceInstance) {
     @Override
     protected String buildMetadataValue(ServiceInstance serviceInstance) {
         WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension();
-        List<String> exportedURLs = writableMetadataService.getExportedURLs();
+        SortedSet<String> exportedURLs = writableMetadataService.getExportedURLs();
         Object[] data = exportedURLs.stream()
                 .map(URL::valueOf)                       // String to URL
                 .map(URL::getServiceInterface)           // get the service interface

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceURLParamsMetadataCustomizer.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstanceMetadataCustomizer;
 
-import java.util.List;
+import java.util.SortedSet;
 
 import static org.apache.dubbo.metadata.MetadataService.toURLs;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.METADATA_SERVICE_URL_PARAMS_KEY;
@@ -53,7 +53,7 @@ public String buildMetadataValue(ServiceInstance serviceInstance) {
 
         String version = MetadataService.VERSION;
 
-        List<String> urls = writableMetadataService.getExportedURLs(serviceInterface, group, version);
+        SortedSet<String> urls = writableMetadataService.getExportedURLs(serviceInterface, group, version);
 
         return getMetadataServiceParameter(toURLs(urls));
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/proxy/MetadataServiceProxyFactory.java
Patch:
@@ -29,7 +29,7 @@
  * @see MetadataService
  * @since 2.7.4
  */
-@SPI("local")
+@SPI("default")
 public interface MetadataServiceProxyFactory {
 
     /**

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/RegistryProtocolTest.java
Patch:
@@ -41,8 +41,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.apache.dubbo.registry.integration.RegistryProtocol.DEFAULT_REGISTER_PROVIDER_KEYS;
+import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNull;

File: dubbo-registry/dubbo-registry-etcd3/src/test/java/org/apache/dubbo/registry/etcd/EtcdRegistryTest.java
Patch:
@@ -79,12 +79,12 @@
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.registry.Constants.ADMIN_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.CATEGORY_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONFIGURATORS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONSUMERS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.PROVIDERS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.ROUTERS_CATEGORY;
+import static org.apache.dubbo.registry.Constants.ADMIN_PROTOCOL;
 
 @Disabled
 public class EtcdRegistryTest {

File: dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java
Patch:
@@ -51,14 +51,14 @@
 import static org.apache.dubbo.common.constants.CommonConstants.ANY_VALUE;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
-import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
-import static org.apache.dubbo.registry.Constants.DEFAULT_SESSION_TIMEOUT;
 import static org.apache.dubbo.common.constants.RegistryConstants.DYNAMIC_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.EMPTY_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.OVERRIDE_PROTOCOL;
+import static org.apache.dubbo.common.constants.RegistryConstants.ROUTE_PROTOCOL;
+import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
+import static org.apache.dubbo.registry.Constants.DEFAULT_SESSION_TIMEOUT;
 import static org.apache.dubbo.registry.Constants.REGISTER;
 import static org.apache.dubbo.registry.Constants.REGISTER_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.ROUTE_PROTOCOL;
 import static org.apache.dubbo.registry.Constants.SESSION_TIMEOUT_KEY;
 import static org.apache.dubbo.registry.Constants.SUBSCRIBE;
 import static org.apache.dubbo.registry.Constants.UNREGISTER;

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistryFactory.java
Patch:
@@ -21,9 +21,6 @@
 import org.apache.dubbo.registry.RegistryFactory;
 import org.apache.dubbo.registry.support.AbstractRegistryFactory;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import static org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils.createNamingService;
 
 /**

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/util/NacosNamingServiceUtils.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.dubbo.registry.nacos.util;/*
+/*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+package org.apache.dubbo.registry.nacos.util;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistry.java
Patch:
@@ -60,8 +60,6 @@ public class ZookeeperRegistry extends FailbackRegistry {
 
     private final static Logger logger = LoggerFactory.getLogger(ZookeeperRegistry.class);
 
-    private final static int DEFAULT_ZOOKEEPER_PORT = 2181;
-
     private final static String DEFAULT_ROOT = "dubbo";
 
     private final String root;

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistryTest.java
Patch:
@@ -55,8 +55,9 @@ public class ZookeeperRegistryTest {
     public void setUp() throws Exception {
         int zkServerPort = NetUtils.getAvailablePort();
         this.zkServer = new TestingServer(zkServerPort, true);
-        this.registryUrl = URL.valueOf("zookeeper://localhost:" + zkServerPort);
+        this.zkServer.start();
 
+        this.registryUrl = URL.valueOf("zookeeper://localhost:" + zkServerPort);
         zookeeperRegistryFactory = new ZookeeperRegistryFactory();
         zookeeperRegistryFactory.setZookeeperTransporter(new CuratorZookeeperTransporter());
         this.zookeeperRegistry = (ZookeeperRegistry) zookeeperRegistryFactory.createRegistry(registryUrl);

File: dubbo-registry/dubbo-registry-zookeeper/src/test/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.Page;
+import org.apache.dubbo.event.EventDispatcher;
 import org.apache.dubbo.registry.client.DefaultServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstance;
 
@@ -60,6 +61,7 @@ public class ZookeeperServiceDiscoveryTest {
 
     @BeforeEach
     public void init() throws Exception {
+        EventDispatcher.getDefaultExtension().removeAllEventListeners();
         zkServerPort = getAvailablePort();
         zkServer = new TestingServer(zkServerPort, true);
         zkServer.start();

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/PerformanceClientFixedTest.java
Patch:
@@ -80,7 +80,7 @@ public void testClient() throws Exception {
             } catch (Throwable t) {
                 t.printStackTrace();
             } finally {
-                if (client != null && client.isConnected() == false) {
+                if (client != null && !client.isConnected()) {
                     f++;
                     System.out.println("open client failed, try again " + f);
                     client.close();

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/transport/AbstractCodecTest.java
Patch:
@@ -16,13 +16,14 @@
  */
 package org.apache.dubbo.remoting.transport;
 
-import java.io.IOException;
-
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.remoting.Channel;
+
 import org.hamcrest.CoreMatchers;
 import org.mockito.internal.verification.VerificationModeFactory;
 
+import java.io.IOException;
+
 import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.BDDMockito.given;

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/BlockMyInvoker.java
Patch:
@@ -40,7 +40,7 @@ public BlockMyInvoker(URL url, boolean hasException, long blockTime) {
     @Override
     public Result invoke(Invocation invocation) throws RpcException {
         AppResponse result = new AppResponse();
-        if (hasException == false) {
+        if (!hasException) {
             try {
                 Thread.sleep(blockTime);
             } catch (InterruptedException e) {

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/MyInvoker.java
Patch:
@@ -60,7 +60,7 @@ public boolean isAvailable() {
 
     public Result invoke(Invocation invocation) throws RpcException {
         AppResponse result = new AppResponse();
-        if (hasException == false) {
+        if (!hasException) {
             result.setValue("alibaba");
         } else {
             result.setException(new RuntimeException("mocked exception"));

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/RpcUtilsTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcInvocation;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -28,15 +29,14 @@
 import java.util.List;
 import java.util.Map;
 
+import static org.apache.dubbo.rpc.Constants.AUTO_ATTACH_INVOCATIONID_KEY;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 
-import static org.apache.dubbo.rpc.Constants.AUTO_ATTACH_INVOCATIONID_KEY;
-
 public class RpcUtilsTest {
 
     /**

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -520,7 +520,7 @@ private boolean checkClientCanUse(List<ReferenceCountExchangeClient> referenceCo
     }
 
     /**
-     * Add client references in bulk
+     * Increase the reference Count if we create new invoker shares same connection, the connection will be closed without any reference.
      *
      * @param referenceCountExchangeClients
      */

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/ReferenceCountExchangeClient.java
Patch:
@@ -192,6 +192,9 @@ public boolean isClosed() {
         return client.isClosed();
     }
 
+    /**
+     * The reference count of current ExchangeClient, connection will be closed if all invokers destroyed.
+     */
     public void incrementAndGetCount() {
         referenceCount.incrementAndGet();
     }

File: dubbo-rpc/dubbo-rpc-hessian/src/main/java/org/apache/dubbo/rpc/protocol/hessian/HessianProtocol.java
Patch:
@@ -48,11 +48,11 @@
 import static org.apache.dubbo.remoting.Constants.CLIENT_KEY;
 import static org.apache.dubbo.remoting.Constants.DEFAULT_EXCHANGER;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
-import static org.apache.dubbo.rpc.protocol.hessian.Constants.HESSIAN2_REQUEST_KEY;
 import static org.apache.dubbo.rpc.protocol.hessian.Constants.DEFAULT_HESSIAN2_REQUEST;
-import static org.apache.dubbo.rpc.protocol.hessian.Constants.HESSIAN_OVERLOAD_METHOD_KEY;
 import static org.apache.dubbo.rpc.protocol.hessian.Constants.DEFAULT_HESSIAN_OVERLOAD_METHOD;
 import static org.apache.dubbo.rpc.protocol.hessian.Constants.DEFAULT_HTTP_CLIENT;
+import static org.apache.dubbo.rpc.protocol.hessian.Constants.HESSIAN2_REQUEST_KEY;
+import static org.apache.dubbo.rpc.protocol.hessian.Constants.HESSIAN_OVERLOAD_METHOD_KEY;
 
 /**
  * http rpc support.

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/integration/swagger/DubboSwaggerApiListingResourceTest.java
Patch:
@@ -25,12 +25,12 @@
 import javax.servlet.ServletContext;
 import javax.ws.rs.core.Application;
 import javax.ws.rs.core.Response;
-
 import java.net.URI;
 import java.util.HashSet;
 import java.util.Set;
 
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class DubboSwaggerApiListingResourceTest {
 

File: dubbo-rpc/dubbo-rpc-rmi/src/test/java/org/apache/dubbo/rpc/protocol/rmi/RmiProtocolTest.java
Patch:
@@ -20,13 +20,13 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.rpc.Exporter;
+import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.RpcException;
-import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.service.EchoService;
-
 import org.apache.dubbo.rpc.service.GenericService;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;

File: dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProtocol.java
Patch:
@@ -150,8 +150,8 @@ public void run() {
     }
 
     @Override
-    @SuppressWarnings("unchecked")
     protected <T> T doRefer(final Class<T> serviceType, URL url) throws RpcException {
+    @SuppressWarnings("unchecked")
         XmlRpcProxyFactoryBean xmlRpcProxyFactoryBean = new XmlRpcProxyFactoryBean();
         xmlRpcProxyFactoryBean.setServiceUrl(url.setProtocol("http").toIdentityString());
         xmlRpcProxyFactoryBean.setServiceInterface(serviceType);

File: dubbo-serialization/dubbo-serialization-avro/src/main/java/org/apache/dubbo/common/serialize/avro/AvroObjectInput.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.dubbo.common.serialize.avro;
 
+import org.apache.dubbo.common.serialize.ObjectInput;
+
 import org.apache.avro.io.BinaryDecoder;
 import org.apache.avro.io.DecoderFactory;
 import org.apache.avro.reflect.ReflectDatumReader;
 import org.apache.avro.util.Utf8;
-import org.apache.dubbo.common.serialize.ObjectInput;
 
 import java.io.IOException;
 import java.io.InputStream;

File: dubbo-serialization/dubbo-serialization-avro/src/main/java/org/apache/dubbo/common/serialize/avro/AvroObjectOutput.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.dubbo.common.serialize.avro;
 
+import org.apache.dubbo.common.serialize.ObjectOutput;
+
 import org.apache.avro.io.BinaryEncoder;
 import org.apache.avro.io.EncoderFactory;
 import org.apache.avro.reflect.ReflectDatumWriter;
 import org.apache.avro.util.Utf8;
-import org.apache.dubbo.common.serialize.ObjectOutput;
 
 import java.io.IOException;
 import java.io.OutputStream;

File: dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/utils/WrapperUtils.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.dubbo.common.serialize.protostuff.Wrapper;
 import org.apache.dubbo.common.serialize.protostuff.delegate.SqlDateDelegate;
 import org.apache.dubbo.common.serialize.protostuff.delegate.TimeDelegate;
+import org.apache.dubbo.common.serialize.protostuff.delegate.TimestampDelegate;
 
 import io.protostuff.runtime.DefaultIdStrategy;
 import io.protostuff.runtime.RuntimeEnv;
-import org.apache.dubbo.common.serialize.protostuff.delegate.TimestampDelegate;
 
 import java.math.BigDecimal;
 import java.sql.Time;

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/hessian2/Hessian2PersonOkTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
 import org.apache.dubbo.common.serialize.base.AbstractSerializationPersonOkTest;
+
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/protobuf/support/GenericProtobufObjectOutputTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.common.serialize.protobuf.support;
 
 import org.apache.dubbo.common.serialize.protobuf.support.model.GooglePB;
+
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/support/SerializableClassRegistryTest.java
Patch:
@@ -18,12 +18,13 @@
 
 import org.apache.dubbo.common.serialize.model.SerializablePerson;
 import org.apache.dubbo.common.serialize.model.person.Phone;
+
 import org.junit.jupiter.api.Test;
 
 import java.util.Map;
 
-import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.equalTo;
 
 public class SerializableClassRegistryTest {
     @Test

File: dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java
Patch:
@@ -150,7 +150,7 @@ public void run() {
     private void checkMulticastAddress(InetAddress multicastAddress) {
         if (!multicastAddress.isMulticastAddress()) {
             String message = "Invalid multicast address " + multicastAddress;
-            if (!(multicastAddress instanceof Inet4Address)) {
+            if (multicastAddress instanceof Inet4Address) {
                 throw new IllegalArgumentException(message + ", " +
                         "ipv4 multicast address scope: 224.0.0.0 - 239.255.255.255.");
             } else {

File: dubbo-registry/dubbo-registry-consul/src/main/java/org/apache/dubbo/registry/consul/ConsulRegistry.java
Patch:
@@ -275,7 +275,7 @@ private NewService buildService(URL url) {
         service.setAddress(url.getHost());
         service.setPort(url.getPort());
         service.setId(buildId(url));
-        service.setName(url.getServiceInterface());
+        service.setName(url.getServiceKey());
         service.setCheck(buildCheck(url));
         service.setTags(buildTags(url));
         service.setMeta(Collections.singletonMap(URL_META_KEY, url.toFullString()));

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -325,7 +325,7 @@ public void checkAndUpdateSubConfigs() {
             generic = Boolean.FALSE.toString();
         }
         if (local != null) {
-            if ("true".equals(local)) {
+            if (Boolean.TRUE.toString().equals(local)) {
                 local = interfaceName + "Local";
             }
             Class<?> localClass;
@@ -339,7 +339,7 @@ public void checkAndUpdateSubConfigs() {
             }
         }
         if (stub != null) {
-            if ("true".equals(stub)) {
+            if (Boolean.TRUE.toString().equals(stub)) {
                 stub = interfaceName + "Stub";
             }
             Class<?> stubClass;
@@ -482,7 +482,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r
                 String retryKey = method.getName() + ".retry";
                 if (map.containsKey(retryKey)) {
                     String retryValue = map.remove(retryKey);
-                    if ("false".equals(retryValue)) {
+                    if (Boolean.FALSE.toString().equals(retryValue)) {
                         map.put(method.getName() + ".retries", "0");
                     }
                 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedNotifiedTask.java
Patch:
@@ -31,7 +31,7 @@
  */
 public final class FailedNotifiedTask extends AbstractRetryTask {
 
-    private static final String NAME = "retry subscribe";
+    private static final String NAME = "retry notify";
 
     private final NotifyListener listener;
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -682,6 +682,7 @@ private String findConfigedHosts(ProtocolConfig protocolConfig, List<URL> regist
             if (isInvalidLocalHost(hostToBind)) {
                 anyhost = true;
                 try {
+                    logger.info( "No valid ip found from environment, try to find valid host from DNS.");
                     hostToBind = InetAddress.getLocalHost().getHostAddress();
                 } catch (UnknownHostException e) {
                     logger.warn(e.getMessage(), e);
@@ -726,6 +727,7 @@ private String findConfigedHosts(ProtocolConfig protocolConfig, List<URL> regist
         return hostToRegistry;
     }
 
+
     /**
      * Register port and bind port for the provider, can be configured separately
      * Configuration priority: environment variable -> java system properties -> port property in protocol config file

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config.spring.context.annotation.provider;
 
+import org.apache.dubbo.config.annotation.Method;
 import org.apache.dubbo.config.spring.api.Box;
 import org.apache.dubbo.config.spring.api.DemoService;
 
@@ -32,7 +33,8 @@
         version = "2.5.7",
         application = "${demo.service.application}",
         protocol = "${demo.service.protocol}",
-        registry = "${demo.service.registry}"
+        registry = "${demo.service.registry}",
+        methods = @Method(timeout = 100,name = "sayName")
 )
 @Service
 @Transactional

File: dubbo-demo/dubbo-demo-annotation/dubbo-demo-annotation-consumer/src/main/java/org/apache/dubbo/demo/consumer/comp/DemoServiceComponent.java
Patch:
@@ -19,14 +19,15 @@
 
 package org.apache.dubbo.demo.consumer.comp;
 
+import org.apache.dubbo.config.annotation.Method;
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.demo.DemoService;
 
 import org.springframework.stereotype.Component;
 
 @Component("demoServiceComponent")
 public class DemoServiceComponent implements DemoService {
-    @Reference
+    @Reference(timeout = 100,methods = @Method(timeout = 500,name = "sayHello"))
     private DemoService demoService;
 
     @Override

File: dubbo-demo/dubbo-demo-annotation/dubbo-demo-annotation-provider/src/main/java/org/apache/dubbo/demo/provider/Application.java
Patch:
@@ -44,7 +44,7 @@ static class ProviderConfiguration {
         @Bean
         public RegistryConfig registryConfig() {
             RegistryConfig registryConfig = new RegistryConfig();
-            registryConfig.setAddress("multicast://224.5.6.7:1234");
+            registryConfig.setAddress("zookeeper://127.0.0.1:2181");
             return registryConfig;
         }
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/DynamicConfiguration.java
Patch:
@@ -174,7 +174,7 @@ default SortedMap<String, String> getConfigs(String group, long timeout) throws
             IllegalStateException {
         SortedMap<String, String> configs = new TreeMap<>();
         SortedSet<String> configKeys = getConfigKeys(group);
-        configKeys.forEach(key -> configs.put(key, getConfig(key, group, timeout)));
+        configKeys.forEach(key -> configs.put(key, getString(key)));
         return Collections.unmodifiableSortedMap(configs);
     }
 
@@ -184,8 +184,8 @@ default SortedMap<String, String> getConfigs(String group, long timeout) throws
      * @return DynamicConfiguration instance
      */
     static DynamicConfiguration getDynamicConfiguration() {
-        Optional<Configuration> optional = Environment.getInstance().getDynamicConfiguration();
-        return (DynamicConfiguration) optional.orElseGet(() -> getExtensionLoader(DynamicConfigurationFactory.class)
+        Optional<DynamicConfiguration> optional = Environment.getInstance().getDynamicConfiguration();
+        return optional.orElseGet(() -> getExtensionLoader(DynamicConfigurationFactory.class)
                 .getDefaultExtension()
                 .getDynamicConfiguration(null));
     }

File: dubbo-configcenter/dubbo-configcenter-consul/src/main/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfiguration.java
Patch:
@@ -42,8 +42,6 @@
 import static org.apache.dubbo.common.config.configcenter.ConfigChangeType.ADDED;
 import static org.apache.dubbo.common.config.configcenter.Constants.CONFIG_NAMESPACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_SEPARATOR;
-import static org.apache.dubbo.configcenter.ConfigChangeType.ADDED;
-import static org.apache.dubbo.configcenter.Constants.CONFIG_NAMESPACE_KEY;
 
 /**
  * config center implementation for consul

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/test/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationTest.java
Patch:
@@ -134,7 +134,7 @@ public void testPublishConfig() {
         String content = "test";
 
         assertTrue(configuration.publishConfig(key, group, content));
-        assertEquals("test", configuration.getConfigs(key, group));
+        assertEquals("test", configuration.getProperties(key, group));
     }
 
     @Test

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/support/AbstractMetadataReport.java
Patch:
@@ -192,9 +192,9 @@ private void saveProperties(MetadataIdentifier metadataIdentifier, String value,
 
         try {
             if (add) {
-                properties.setProperty(metadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), value);
+                properties.setProperty(metadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.UNIQUE_KEY), value);
             } else {
-                properties.remove(metadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY));
+                properties.remove(metadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.UNIQUE_KEY));
             }
             long version = lastCacheChanged.incrementAndGet();
             if (sync) {

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistryFactory.java
Patch:
@@ -33,8 +33,6 @@
  */
 public class NacosRegistryFactory extends AbstractRegistryFactory {
 
-    private final Logger logger = LoggerFactory.getLogger(getClass());
-
     @Override
     protected Registry createRegistry(URL url) {
         return new NacosRegistry(url, createNamingService(url));

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/util/NacosNamingServiceUtils.java
Patch:
@@ -18,14 +18,14 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.registry.client.DefaultServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstance;
 
 import com.alibaba.nacos.api.NacosFactory;
 import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.api.naming.NamingService;
 import com.alibaba.nacos.api.naming.pojo.Instance;
-import com.alibaba.nacos.client.naming.utils.StringUtils;
 
 import java.util.Properties;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java
Patch:
@@ -119,7 +119,7 @@ private synchronized void init(String ruleKey) {
         }
         String routerKey = ruleKey + RULE_SUFFIX;
         configuration.addListener(routerKey, this);
-        String rule = configuration.getConfig(routerKey);
+        String rule = configuration.getRule(routerKey, DynamicConfiguration.DEFAULT_GROUP);
         if (StringUtils.isNotEmpty(rule)) {
             this.process(new ConfigChangeEvent(routerKey, rule));
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ServiceRouter.java
Patch:
@@ -30,7 +30,7 @@ public class ServiceRouter extends ListenableRouter {
     private static final int SERVICE_ROUTER_DEFAULT_PRIORITY = 140;
 
     public ServiceRouter(DynamicConfiguration configuration, URL url) {
-        super(configuration, url, url.getEncodedServiceKey());
+        super(configuration, url, DynamicConfiguration.getRuleKey(url));
         this.priority = SERVICE_ROUTER_DEFAULT_PRIORITY;
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java
Patch:
@@ -249,7 +249,7 @@ public <T> void notify(List<Invoker<T>> invokers) {
                 String key = providerApplication + RULE_SUFFIX;
                 configuration.addListener(key, this);
                 application = providerApplication;
-                String rawRule = configuration.getConfig(key);
+                String rawRule = configuration.getRule(key, DynamicConfiguration.DEFAULT_GROUP);
                 if (StringUtils.isNotEmpty(rawRule)) {
                     this.process(new ConfigChangeEvent(key, rawRule));
                 }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/StickyTest.java
Patch:
@@ -104,7 +104,7 @@ public void testMethodsSticky() {
         for (int i = 0; i < 100; i++) {//Two different methods should always use the same invoker every time.
             int count1 = testSticky("method1", true);
             int count2 = testSticky("method2", true);
-            Assertions.assertTrue(count1 == count2);
+            Assertions.assertEquals(count1, count2);
         }
     }
 
@@ -129,7 +129,7 @@ public int testSticky(String methodName, boolean check) {
 
         int count = 0;
         for (int i = 0; i < runs; i++) {
-            Assertions.assertEquals(null, clusterinvoker.invoke(invocation));
+            Assertions.assertNull(clusterinvoker.invoke(invocation));
             if (invoker1 == clusterinvoker.getSelectedInvoker()) {
                 count++;
             }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvokerTest.java
Patch:
@@ -203,7 +203,7 @@ public Object call() throws Exception {
         clusterinvoker.invoke(inv);
     }
 
-    public static interface Demo {
+    public interface Demo {
     }
 
     public static class MockInvoker<T> extends AbstractInvoker<T> {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/MenuService.java
Patch:
@@ -20,8 +20,8 @@
 
 public interface MenuService {
 
-    public Menu getMenu();
+    Menu getMenu();
 
-    public void addMenu(String menu, List<String> items);
+    void addMenu(String menu, List<String> items);
 
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java
Patch:
@@ -237,12 +237,12 @@ private static void deserializeInternal(Object result, JavaBeanDescriptor beanDe
             for (Map.Entry<Object, Object> entry : beanDescriptor) {
                 Object key = entry.getKey();
                 Object value = entry.getValue();
-                if (key != null && key instanceof JavaBeanDescriptor) {
+                if (key instanceof JavaBeanDescriptor) {
                     JavaBeanDescriptor keyDescriptor = (JavaBeanDescriptor) entry.getKey();
                     key = instantiateForDeserialize(keyDescriptor, loader, cache);
                     deserializeInternal(key, keyDescriptor, loader, cache);
                 }
-                if (value != null && value instanceof JavaBeanDescriptor) {
+                if (value instanceof JavaBeanDescriptor) {
                     JavaBeanDescriptor valueDescriptor = (JavaBeanDescriptor) entry.getValue();
                     value = instantiateForDeserialize(valueDescriptor, loader, cache);
                     deserializeInternal(value, valueDescriptor, loader, cache);

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java
Patch:
@@ -73,7 +73,7 @@ public JdkCompiler() {
         StandardJavaFileManager manager = compiler.getStandardFileManager(diagnosticCollector, null, null);
         final ClassLoader loader = Thread.currentThread().getContextClassLoader();
         if (loader instanceof URLClassLoader
-                && (!loader.getClass().getName().equals("sun.misc.Launcher$AppClassLoader"))) {
+                && (!"sun.misc.Launcher$AppClassLoader".equals(loader.getClass().getName()))) {
             try {
                 URLClassLoader urlClassLoader = (URLClassLoader) loader;
                 List<File> files = new ArrayList<File>();

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java
Patch:
@@ -115,6 +115,7 @@ public CompositeConfiguration getConfiguration(String prefix, String id) {
         CompositeConfiguration compositeConfiguration = new CompositeConfiguration();
         // Config center has the highest priority
         compositeConfiguration.addConfiguration(this.getSystemConfig(prefix, id));
+        compositeConfiguration.addConfiguration(this.getEnvironmentConfig(prefix, id));
         compositeConfiguration.addConfiguration(this.getAppExternalConfig(prefix, id));
         compositeConfiguration.addConfiguration(this.getExternalConfig(prefix, id));
         compositeConfiguration.addConfiguration(this.getPropertiesConfig(prefix, id));

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/nop/NopDynamicConfiguration.java
Patch:
@@ -50,12 +50,12 @@ public void removeListener(String key, String group, ConfigurationListener liste
     }
 
     @Override
-    public String getConfig(String key, String group, long timeout) throws IllegalStateException {
+    public String getRule(String key, String group, long timeout) throws IllegalStateException {
         return null;
     }
 
     @Override
-    public String getConfigs(String key, String group, long timeout) throws IllegalStateException {
+    public String getProperties(String key, String group, long timeout) throws IllegalStateException {
         return null;
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/support/ActivateComparator.java
Patch:
@@ -82,7 +82,7 @@ public int compare(Object o1, Object o2) {
     }
 
     private Class<?> findSpi(Class clazz) {
-        if (clazz.getInterfaces().length <= 0) {
+        if (clazz.getInterfaces().length == 0) {
             return null;
         }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONVisitor.java
Patch:
@@ -21,7 +21,7 @@
  */
 @Deprecated
 public interface JSONVisitor {
-    public static final String CLASS_PROPERTY = "class";
+    String CLASS_PROPERTY = "class";
 
     /**
      * parse begin .

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java
Patch:
@@ -129,6 +129,8 @@ public static Object compatibleTypeConvert(Object value, Class<?> type) {
                 return BigDecimal.valueOf(number.doubleValue());
             } else if (type == Date.class) {
                 return new Date(number.longValue());
+            } else if (type == boolean.class || type == Boolean.class) {
+                return 0 != number.intValue();
             }
         } else if (value instanceof Collection) {
             Collection collection = (Collection) value;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java
Patch:
@@ -484,6 +484,7 @@ public static boolean isProvider(URL url) {
                 PROVIDERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, PROVIDERS_CATEGORY));
     }
 
+
     /**
      * Check if the given value matches the given pattern. The pattern supports wildcard "*".
      *

File: dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/ClassUtilsTest.java
Patch:
@@ -104,7 +104,7 @@ public void testBoxedAndUnboxed() {
         Assertions.assertEquals(Float.valueOf((float) 0), ClassUtils.boxed((float) 0));
         Assertions.assertEquals(Double.valueOf((double) 0), ClassUtils.boxed((double) 0));
 
-        Assertions.assertEquals(true, ClassUtils.unboxed(Boolean.valueOf(true)));
+        Assertions.assertTrue(ClassUtils.unboxed(Boolean.valueOf(true)));
         Assertions.assertEquals('0', ClassUtils.unboxed(Character.valueOf('0')));
         Assertions.assertEquals((byte) 0, ClassUtils.unboxed(Byte.valueOf((byte) 0)));
         Assertions.assertEquals((short) 0, ClassUtils.unboxed(Short.valueOf((short) 0)));

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ext6_inject/Dao.java
Patch:
@@ -18,5 +18,5 @@
 package org.apache.dubbo.common.extension.ext6_inject;
 
 public interface Dao {
-    public void update();
+    void update();
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/support/ActivateComparatorTest.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.common.extension.support;
 
-import org.apache.dubbo.common.extension.Activate;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/NamedInternalThreadFactoryTest.java
Patch:
@@ -31,6 +31,6 @@ public void run() {
 
             }
         });
-        Assertions.assertTrue(t.getClass().equals(InternalThread.class), "thread is not InternalThread");
+        Assertions.assertEquals(t.getClass(), InternalThread.class, "thread is not InternalThread");
     }
 }
\ No newline at end of file

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/CompatibleTypeUtilsTest.java
Patch:
@@ -86,7 +86,7 @@ public void testCompatibleTypeConvert() throws Exception {
             assertEquals(0, ((char[]) result).length);
 
             result = CompatibleTypeUtils.compatibleTypeConvert(null, char[].class);
-            assertEquals(null, result);
+            assertNull(result);
         }
 
         {

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/IOUtilsTest.java
Patch:
@@ -32,6 +32,7 @@
 import java.io.StringReader;
 import java.io.StringWriter;
 import java.io.Writer;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -47,7 +48,7 @@ public class IOUtilsTest {
 
     @BeforeEach
     public void setUp() throws Exception {
-        is = new ByteArrayInputStream(TEXT.getBytes("UTF-8"));
+        is = new ByteArrayInputStream(TEXT.getBytes(StandardCharsets.UTF_8));
         os = new ByteArrayOutputStream();
         reader = new StringReader(TEXT);
         writer = new StringWriter();

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/MethodUtilsTest.java
Patch:
@@ -32,7 +32,7 @@ public void testGetMethod() {
             }
         }
         Assertions.assertNotNull(getMethod);
-        Assertions.assertTrue(getMethod.getName().equals("getValue"));
+        Assertions.assertEquals("getValue", getMethod.getName());
     }
 
     @Test
@@ -44,7 +44,7 @@ public void testSetMethod() {
             }
         }
         Assertions.assertNotNull(setMethod);
-        Assertions.assertTrue(setMethod.getName().equals("setValue"));
+        Assertions.assertEquals("setValue", setMethod.getName());
     }
 
     public class MethodTestClazz {

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/ReflectUtilsTest.java
Patch:
@@ -420,7 +420,7 @@ public void testGetReturnTypes () throws Exception{
         Assertions.assertEquals("java.util.List<java.lang.String>", types2[1].getTypeName());
     }
 
-    public static interface TypeClass {
+    public interface TypeClass {
 
         CompletableFuture<String> getFuture();
 

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Result.java
Patch:
@@ -18,7 +18,7 @@
 package com.alibaba.dubbo.rpc;
 
 import java.util.Map;
-import java.util.function.Function;
+import java.util.function.BiConsumer;
 
 @Deprecated
 public interface Result extends org.apache.dubbo.rpc.Result {
@@ -36,7 +36,7 @@ default void setException(Throwable t) {
     abstract class AbstractResult extends org.apache.dubbo.rpc.AbstractResult implements Result {
 
         @Override
-        public org.apache.dubbo.rpc.Result thenApplyWithContext(Function<org.apache.dubbo.rpc.Result, org.apache.dubbo.rpc.Result> fn) {
+        public org.apache.dubbo.rpc.Result whenCompleteWithContext(BiConsumer<org.apache.dubbo.rpc.Result, Throwable> fn) {
             return null;
         }
     }

File: dubbo-compatible/src/test/java/org/apache/dubbo/service/ComplexObject.java
Patch:
@@ -169,7 +169,7 @@ public int hashCode() {
         return result;
     }
 
-    static public enum TestEnum {
+    public enum TestEnum {
         VALUE1, VALUE2
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -329,7 +329,7 @@ private void init() {
                         map.put(methodConfig.getName() + ".retries", "0");
                     }
                 }
-                attributes.put(methodConfig.getName(), convertMethodConfig2AyncInfo(methodConfig));
+                attributes.put(methodConfig.getName(), convertMethodConfig2AsyncInfo(methodConfig));
             }
         }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -767,7 +767,7 @@ private Integer findConfigedPorts(ProtocolConfig protocolConfig, String name, Ma
             if (portToBind == null || portToBind == 0) {
                 portToBind = defaultPort;
             }
-            if (portToBind == null || portToBind <= 0) {
+            if (portToBind <= 0) {
                 portToBind = getRandomPort(name);
                 if (portToBind == null || portToBind < 0) {
                     portToBind = getAvailablePort(defaultPort);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/telnet/ShutdownTelnetHandler.java
Patch:
@@ -36,7 +36,7 @@ public String telnet(Channel channel, String message) throws RemotingException {
         int sleepMilliseconds = 0;
         if (StringUtils.isNotEmpty(message)) {
             String[] parameters = message.split("\\s+");
-            if (parameters.length == 2 && parameters[0].equals("-t") && StringUtils.isInteger(parameters[1])) {
+            if (parameters.length == 2 && "-t".equals(parameters[0]) && StringUtils.isInteger(parameters[1])) {
                 sleepMilliseconds = Integer.parseInt(parameters[1]);
             } else {
                 return "Invalid parameter,please input like shutdown -t 10000";

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java
Patch:
@@ -162,7 +162,7 @@ public String toString() {
                 + ")";
     }
 
-    public static interface KeyGenerator {
+    public interface KeyGenerator {
         String generateKey(ReferenceConfig<?> referenceConfig);
     }
 }

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/validation/ValidationTest.java
Patch:
@@ -134,7 +134,7 @@ public void testValidation() {
                     Assertions.fail();
                 } catch (ConstraintViolationException ve) {
                     Set<ConstraintViolation<?>> violations = ve.getConstraintViolations();
-                    Assertions.assertTrue(violations.size() == 3);
+                    Assertions.assertEquals(3, violations.size());
                     Assertions.assertNotNull(violations);
                 }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationConfigBeanBuilder.java
Patch:
@@ -35,8 +35,11 @@
 
 /**
  * Abstract Configurable {@link Annotation} Bean Builder
+ *
  * @since 2.5.7
+ * @deprecated use {@link AnnotatedInterfaceConfigBeanBuilder}
  */
+@Deprecated
 abstract class AbstractAnnotationConfigBeanBuilder<A extends Annotation, B extends AbstractInterfaceConfig> {
 
     protected final Log logger = LogFactory.getLog(getClass());

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java
Patch:
@@ -94,7 +94,7 @@ private static BeanDefinition parse(Element element, ParserContext parserContext
                 id = generatedBeanName + (counter++);
             }
         }
-        if (id != null && id.length() > 0) {
+        if (StringUtils.isNotEmpty(id)) {
             if (parserContext.getRegistry().containsBeanDefinition(id)) {
                 throw new IllegalStateException("Duplicate spring bean id " + id);
             }

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/SimpleRegistryExporter.java
Patch:
@@ -39,7 +39,7 @@ public class SimpleRegistryExporter {
 
     private static final Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
 
-    private static final ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
+    private static final ProxyFactory PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
 
     public synchronized static Exporter<RegistryService> exportIfAbsent(int port) {
         try {
@@ -55,7 +55,7 @@ public static Exporter<RegistryService> export(int port) {
     }
 
     public static Exporter<RegistryService> export(int port, RegistryService registryService) {
-        return protocol.export(proxyFactory.getInvoker(registryService, RegistryService.class,
+        return protocol.export(PROXY_FACTORY.getInvoker(registryService, RegistryService.class,
                 new URLBuilder(DUBBO_PROTOCOL, NetUtils.getLocalHost(), port, RegistryService.class.getName())
                         .setPath(RegistryService.class.getName())
                         .addParameter(INTERFACE_KEY, RegistryService.class.getName())

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java
Patch:
@@ -82,7 +82,7 @@ public void testBuild() throws Exception {
         Assert.assertEquals(true, referenceBean.isGeneric());
         Assert.assertNull(referenceBean.isInjvm());
         Assert.assertEquals(false, referenceBean.isCheck());
-        Assert.assertEquals(null, referenceBean.isInit());
+        Assert.assertNull(referenceBean.isInit());
         Assert.assertEquals(true, referenceBean.getLazy());
         Assert.assertEquals(true, referenceBean.getStubevent());
         Assert.assertEquals("reconnect", referenceBean.getReconnect());

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/HelloServiceImpl.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.dubbo.config.spring.context.annotation.provider;
 
-import org.apache.dubbo.config.annotation.Service;
 import org.apache.dubbo.config.spring.api.HelloService;
 
+import com.alibaba.dubbo.config.annotation.Service;
+
 /**
  * {@link HelloService} Implementation just annotating Dubbo's {@link Service}
  *

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/context/annotation/DubboComponentScanRegistrarTest.java
Patch:
@@ -86,6 +86,8 @@ public void test() {
 
         Assertions.assertEquals("Hello,Mercy", value);
 
+        Assertions.assertEquals("Hello,Mercy", child.getDemoService().sayName("Mercy"));
+
         // From Parent
 
         demoService = child.getDemoServiceFromParent();

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/context/annotation/provider/DefaultHelloService.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config.spring.context.context.annotation.provider;
 
+import org.apache.dubbo.config.spring.annotation.merged.MergedService;
 import org.apache.dubbo.config.spring.api.HelloService;
 
 import org.springframework.stereotype.Service;
@@ -27,7 +28,8 @@
  * @since TODO
  */
 @Service
-@org.apache.dubbo.config.annotation.Service
+//@org.apache.dubbo.config.annotation.Service
+@MergedService
 public class DefaultHelloService implements HelloService {
 
     @Override

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/context/annotation/provider/ProviderConfiguration.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.config.spring.context.annotation.DubboComponentScan;
 
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Primary;
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.transaction.PlatformTransactionManager;
@@ -30,7 +31,8 @@
 import org.springframework.transaction.TransactionStatus;
 import org.springframework.transaction.annotation.EnableTransactionManagement;
 
-@DubboComponentScan(basePackages = "org.apache.dubbo.config.spring.context.annotation.provider")
+@DubboComponentScan(basePackages = "org.apache.dubbo")
+@ComponentScan(basePackages = "org.apache.dubbo")
 @PropertySource("META-INF/default.properties")
 @EnableTransactionManagement
 public class ProviderConfiguration {

File: dubbo-configcenter/dubbo-configcenter-etcd/src/test/java/org/apache/dubbo/configcenter/support/etcd/EtcdDynamicConfigurationTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.configcenter.ConfigChangeEvent;
 import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 
 import io.etcd.jetcd.ByteSequence;
 import io.etcd.jetcd.Client;
@@ -57,8 +58,8 @@ public void testGetConfig() {
 
         put("/dubbo/config/org.apache.dubbo.etcd.testService/configurators", "hello");
         put("/dubbo/config/test/dubbo.properties", "aaa=bbb");
-        Assert.assertEquals("hello", config.getConfig("org.apache.dubbo.etcd.testService.configurators"));
-        Assert.assertEquals("aaa=bbb", config.getConfig("dubbo.properties", "test"));
+        Assert.assertEquals("hello", config.getRule("org.apache.dubbo.etcd.testService.configurators", DynamicConfiguration.DEFAULT_GROUP));
+        Assert.assertEquals("aaa=bbb", config.getRule("dubbo.properties", "test"));
     }
 
     @Test

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/support/expiring/ExpiringMap.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
 /**
@@ -40,7 +41,7 @@ public class ExpiringMap<K, V> implements Map<K, V> {
      */
     private static final int DEFAULT_EXPIRATION_INTERVAL = 1;
 
-    private static volatile int expireCount = 1;
+    private static AtomicInteger expireCount = new AtomicInteger(1);
 
     private final ConcurrentHashMap<K, ExpiryObject> delegateMap;
 
@@ -263,7 +264,7 @@ public String toString() {
         }
 
         public ExpireThread() {
-            expirerThread = new Thread(this, "ExpiryMapExpire-" + expireCount++);
+            expirerThread = new Thread(this, "ExpiryMapExpire-" + expireCount.getAndIncrement());
             expirerThread.setDaemon(true);
         }
 

File: dubbo-filter/dubbo-filter-cache/src/test/java/org/apache/dubbo/cache/filter/CacheFilterTest.java
Patch:
@@ -131,7 +131,7 @@ public void testNull(String cacheType, CacheFactory cacheFactory) {
         cacheFilter.invoke(invoker4, invocation);
         Result result1 = cacheFilter.invoke(invoker1, invocation);
         Result result2 = cacheFilter.invoke(invoker2, invocation);
-        Assertions.assertEquals(result1.getValue(), null);
-        Assertions.assertEquals(result2.getValue(), null);
+        Assertions.assertNull(result1.getValue());
+        Assertions.assertNull(result2.getValue());
     }
 }

File: dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/JValidationTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.junit.jupiter.api.Test;
 
 import javax.validation.ValidationException;
-import java.io.NotSerializableException;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/support/AbstractMetadataReport.java
Patch:
@@ -192,9 +192,9 @@ private void saveProperties(MetadataIdentifier metadataIdentifier, String value,
 
         try {
             if (add) {
-                properties.setProperty(metadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.UNIQUE_KEY), value);
+                properties.setProperty(metadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), value);
             } else {
-                properties.remove(metadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.UNIQUE_KEY));
+                properties.remove(metadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY));
             }
             long version = lastCacheChanged.incrementAndGet();
             if (sync) {

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/definition/common/ColorEnum.java
Patch:
@@ -18,5 +18,5 @@
 
 public enum ColorEnum {
 
-    RED, YELLOW, BLUE;
+    RED, YELLOW, BLUE
 }

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/definition/service/ComplexObject.java
Patch:
@@ -170,7 +170,7 @@ public int hashCode() {
         return result;
     }
 
-    static public enum TestEnum {
+    public enum TestEnum {
         VALUE1, VALUE2
     }
 

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/store/InterfaceNameTestService2.java
Patch:
@@ -21,5 +21,5 @@
  */
 public interface InterfaceNameTestService2 {
 
-    public void test2();
+    void test2();
 }

File: dubbo-metadata/dubbo-metadata-report-etcd/src/test/java/org/apache/dubbo/metadata/store/etcd/EtcdMetadataReportTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import java.net.URI;
@@ -73,6 +74,7 @@ public void tearDown() throws Exception {
     }
 
     @Test
+    @Disabled("Disabled because https://github.com/apache/dubbo/issues/4185")
     public void testStoreProvider() throws Exception {
         String version = "1.0.0";
         String group = null;

File: dubbo-metadata/dubbo-metadata-report-redis/src/main/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReport.java
Patch:
@@ -44,6 +44,7 @@
  */
 public class RedisMetadataReport extends AbstractMetadataReport {
 
+    private final static String REDIS_DATABASE_KEY = "database";
     private final static Logger logger = LoggerFactory.getLogger(RedisMetadataReport.class);
 
     JedisPool pool;
@@ -62,7 +63,8 @@ public RedisMetadataReport(URL url) {
                 jedisClusterNodes.add(new HostAndPort(tmpUrl.getHost(), tmpUrl.getPort()));
             }
         } else {
-            pool = new JedisPool(new JedisPoolConfig(), url.getHost(), url.getPort(), timeout, url.getPassword());
+            int database = url.getParameter(REDIS_DATABASE_KEY, 0);
+            pool = new JedisPool(new JedisPoolConfig(), url.getHost(), url.getPort(), timeout, url.getPassword(), database);
         }
     }
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/CommandHelperTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.qos.command.impl.Offline;
 import org.apache.dubbo.qos.command.impl.Online;
 import org.apache.dubbo.qos.command.impl.Quit;
-import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
 
 import java.util.List;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -716,7 +716,7 @@ private static class ReferenceConfigurationListener extends AbstractConfigurator
         ReferenceConfigurationListener(RegistryDirectory directory, URL url) {
             this.directory = directory;
             this.url = url;
-            this.initWith(url.getEncodedServiceKey() + CONFIGURATORS_SUFFIX);
+            this.initWith(DynamicConfiguration.getRuleKey(url) + CONFIGURATORS_SUFFIX);
         }
 
         @Override

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -477,7 +477,7 @@ public Invoker<T> getInvoker() {
         }
     }
 
-    static private class DestroyableExporter<T> implements Exporter<T> {
+    private static class DestroyableExporter<T> implements Exporter<T> {
 
         private Exporter<T> exporter;
 
@@ -591,7 +591,7 @@ private class ServiceConfigurationListener extends AbstractConfiguratorListener
         public ServiceConfigurationListener(URL providerUrl, OverrideListener notifyListener) {
             this.providerUrl = providerUrl;
             this.notifyListener = notifyListener;
-            this.initWith(providerUrl.getEncodedServiceKey() + CONFIGURATORS_SUFFIX);
+            this.initWith(DynamicConfiguration.getRuleKey(providerUrl) + CONFIGURATORS_SUFFIX);
         }
 
         private <T> URL overrideUrl(URL providerUrl) {

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/PerformanceRegistryTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.NetUtils;
 
-import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 /**

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/ZKTools.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.curator.framework.recipes.cache.TreeCacheListener;
 import org.apache.curator.retry.ExponentialBackoffRetry;
 
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -233,7 +234,7 @@ public void childEvent(CuratorFramework client, TreeCacheEvent event) throws Exc
 
                 if (data.getPath().split("/").length == 5) {
                     byte[] value = data.getData();
-                    String stringValue = new String(value, "utf-8");
+                    String stringValue = new String(value, StandardCharsets.UTF_8);
 
                     // fire event to all listeners
                     Map<String, Object> added = null;

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/support/AbstractRegistryTest.java
Patch:
@@ -550,7 +550,7 @@ public void getCacheUrlsTest() {
         abstractRegistry.notify(testUrl, listener, urls);
         Assertions.assertTrue(notifySuccess);
         List<URL> cacheUrl = abstractRegistry.getCacheUrls(testUrl);
-        Assertions.assertTrue(cacheUrl.size() == 1);
+        Assertions.assertEquals(1,cacheUrl.size());
         URL nullUrl = URL.valueOf("http://1.2.3.4:9090/registry?check=false&file=N/A&interface=com.testa");
         cacheUrl = abstractRegistry.getCacheUrls(nullUrl);
         Assertions.assertTrue(Objects.isNull(cacheUrl));

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/support/FailbackRegistryTest.java
Patch:
@@ -164,7 +164,7 @@ public void testDoRetry_nofify() throws Exception {
             public void notify(List<URL> urls) {
                 count.incrementAndGet();
                 //The exception is thrown for the first time to see if the back will be called again to incrementAndGet
-                if (count.get() == 1l) {
+                if (count.get() == 1L) {
                     throw new RuntimeException("test exception please ignore");
                 }
             }
@@ -203,7 +203,7 @@ public void notify(List<URL> urls) {
         countDownLatch.await();
         Assertions.assertEquals(0, mockRegistry.getFailedRegistered().size());
         FailbackRegistry.Holder h = new FailbackRegistry.Holder(registryUrl, listener);
-        Assertions.assertEquals(null, mockRegistry.getFailedSubscribed().get(h));
+        Assertions.assertNull(mockRegistry.getFailedSubscribed().get(h));
         Assertions.assertEquals(countDownLatch.getCount(), 0);
     }
 

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/SimpleRegistryExporter.java
Patch:
@@ -40,7 +40,7 @@ public class SimpleRegistryExporter {
 
     private static final Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
 
-    private static final ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
+    private static final ProxyFactory PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
 
     public synchronized static Exporter<RegistryService> exportIfAbsent(int port) {
         try {
@@ -56,7 +56,7 @@ public static Exporter<RegistryService> export(int port) {
     }
 
     public static Exporter<RegistryService> export(int port, RegistryService registryService) {
-        return protocol.export(proxyFactory.getInvoker(registryService, RegistryService.class,
+        return protocol.export(PROXY_FACTORY.getInvoker(registryService, RegistryService.class,
                 new URLBuilder(DUBBO_PROTOCOL, NetUtils.getLocalHost(), port, RegistryService.class.getName())
                         .setPath(RegistryService.class.getName())
                         .addParameter(INTERFACE_KEY, RegistryService.class.getName())

File: dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java
Patch:
@@ -263,7 +263,7 @@ public void doUnregister(URL url) {
     }
 
     @Override
-    public void doSubscribe(URL url, NotifyListener listener) {
+    public void doSubscribe(URL url, final NotifyListener listener) {
         if (ANY_VALUE.equals(url.getServiceInterface())) {
             admin = true;
         }
@@ -324,7 +324,7 @@ protected void registered(URL url) {
                 }
                 urls.add(url);
                 List<URL> list = toList(urls);
-                for (NotifyListener listener : entry.getValue()) {
+                for (final NotifyListener listener : entry.getValue()) {
                     notify(key, listener, list);
                     synchronized (listener) {
                         listener.notify();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/buffer/ChannelBuffer.java
Patch:
@@ -275,7 +275,7 @@ public interface ChannelBuffer extends Comparable<ChannelBuffer> {
      * not an instance of {@link ChannelBuffer} type.
      */
     @Override
-    public boolean equals(Object o);
+    boolean equals(Object o);
 
     /**
      * Returns the factory which creates a {@link ChannelBuffer} whose type and

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/StatusTelnetHandler.java
Patch:
@@ -45,7 +45,7 @@ public class StatusTelnetHandler implements TelnetHandler {
 
     @Override
     public String telnet(Channel channel, String message) {
-        if (message.equals("-l")) {
+        if ("-l".equals(message)) {
             List<StatusChecker> checkers = extensionLoader.getActivateExtension(channel.getUrl(), "status");
             String[] header = new String[]{"resource", "status", "message"};
             List<List<String>> table = new ArrayList<List<String>>();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/utils/UrlUtils.java
Patch:
@@ -23,6 +23,7 @@
 public class UrlUtils {
     public static int getIdleTimeout(URL url) {
         int heartBeat = getHeartbeat(url);
+        // idleTimeout should be at least more than twice heartBeat because possible retries of client.
         int idleTimeout = url.getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartBeat * 3);
         if (idleTimeout < heartBeat * 2) {
             throw new IllegalStateException("idleTimeout < heartbeatInterval * 2");

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/RpcMessageHandler.java
Patch:
@@ -69,7 +69,7 @@ public Object reply(ExchangeChannel channel, RpcMessage msg) throws RemotingExce
 
     }
 
-    public static interface ServiceProvider {
+    public interface ServiceProvider {
         Object getImplementation(String service);
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/handler/ConnectChannelHandlerTest.java
Patch:
@@ -136,7 +136,7 @@ public void test_Received_Event_invoke_direct() throws RemotingException {
         handler.received(new MockedChannel() {
             @Override
             public void send(Object message) throws RemotingException {
-                Assertions.assertEquals(true, ((Response) message).isHeartbeat(), "response.heartbeat");
+                Assertions.assertTrue(((Response) message).isHeartbeat(), "response.heartbeat");
                 count.incrementAndGet();
             }
         }, req);

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/handler/HeaderExchangeHandlerTest.java
Patch:
@@ -70,7 +70,7 @@ public void send(Object message) throws RemotingException {
                 Assertions.assertEquals(request.getVersion(), res.getVersion());
                 Assertions.assertEquals(Response.OK, res.getStatus());
                 Assertions.assertEquals(requestdata, res.getResult());
-                Assertions.assertEquals(null, res.getErrorMessage());
+                Assertions.assertNull(res.getErrorMessage());
                 count.incrementAndGet();
             }
         };

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/handler/WrappedChannelHandlerTest.java
Patch:
@@ -83,8 +83,6 @@ public void test_Connect_Biz_Error() throws RemotingException {
         Assertions.assertThrows(RemotingException.class, () -> handler.connected(new MockedChannel()));
     }
 
-    ;
-
     @Test
     public void test_Disconnect_Biz_Error() throws RemotingException {
         Assertions.assertThrows(RemotingException.class, () -> handler.disconnected(new MockedChannel()));

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/transport/AbstractCodecTest.java
Patch:
@@ -16,14 +16,13 @@
  */
 package org.apache.dubbo.remoting.transport;
 
+import java.io.IOException;
+
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.remoting.Channel;
-import org.junit.jupiter.api.Assertions;
 import org.hamcrest.CoreMatchers;
 import org.mockito.internal.verification.VerificationModeFactory;
 
-import java.io.IOException;
-
 import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.BDDMockito.given;

File: dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/EtcdClient.java
Patch:
@@ -154,7 +154,7 @@ public interface EtcdClient {
      * @throws TimeoutException if the wait timed out
      * @return lease id from etcd
      */
-    public long createLease(long ttl, long timeout, TimeUnit unit)
+    long createLease(long ttl, long timeout, TimeUnit unit)
             throws InterruptedException, ExecutionException, TimeoutException;
 
     /**

File: dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/RetryPolicy.java
Patch:
@@ -26,6 +26,6 @@ public interface RetryPolicy {
      * @param sleep   should be sleep
      * @return true should be retry
      */
-    public boolean shouldRetry(int retried, long elapsed, boolean sleep);
+    boolean shouldRetry(int retried, long elapsed, boolean sleep);
 
 }

File: dubbo-remoting/dubbo-remoting-etcd3/src/test/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClientTest.java
Patch:
@@ -337,12 +337,12 @@ public void test_watch_on_recoverable_connection() throws InterruptedException {
             switch (notified.increaseAndGet()) {
                 case 1: {
                     notNotified.countDown();
-                    Assertions.assertTrue(children.size() == 1);
+                    Assertions.assertEquals(1, children.size());
                     Assertions.assertEquals(child.substring(child.lastIndexOf("/") + 1), children.get(0));
                     break;
                 }
                 case 2: {
-                    Assertions.assertTrue(children.size() == 0);
+                    Assertions.assertEquals(0, children.size());
                     Assertions.assertEquals(path, parent);
                     break;
                 }

File: dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyHelper.java
Patch:
@@ -27,7 +27,7 @@ final class NettyHelper {
 
     public static void setNettyLoggerFactory() {
         InternalLoggerFactory factory = InternalLoggerFactory.getDefaultFactory();
-        if (factory == null || !(factory instanceof DubboLoggerFactory)) {
+        if (!(factory instanceof DubboLoggerFactory)) {
             InternalLoggerFactory.setDefaultFactory(new DubboLoggerFactory());
         }
     }

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/exchange/support/header/HeartbeatHandlerTest.java
Patch:
@@ -92,8 +92,8 @@ public void testHeartbeat() throws Exception {
         Thread.sleep(10000);
         System.err.println("++++++++++++++ disconnect count " + handler.disconnectCount);
         System.err.println("++++++++++++++ connect count " + handler.connectCount);
-        Assertions.assertTrue(handler.disconnectCount == 0);
-        Assertions.assertTrue(handler.connectCount == 1);
+        Assertions.assertEquals(0, handler.disconnectCount);
+        Assertions.assertEquals(1, handler.connectCount);
     }
 
     @Test

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClientHandler.java
Patch:
@@ -113,6 +113,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)
 
     @Override
     public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
+    	// send heartbeat when read idle.
         if (evt instanceof IdleStateEvent) {
             try {
                 NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyTransporter.java
Patch:
@@ -23,6 +23,9 @@
 import org.apache.dubbo.remoting.Server;
 import org.apache.dubbo.remoting.Transporter;
 
+/**
+ * Default extension of {@link Transporter} using netty4.x.
+ */
 public class NettyTransporter implements Transporter {
 
     public static final String NAME = "netty";

File: dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperTransporterTest.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.remoting.zookeeper.curator;
 
-import org.apache.curator.test.TestingServer;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.remoting.zookeeper.ZookeeperClient;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AppResponse.java
Patch:
@@ -20,7 +20,7 @@
 import java.lang.reflect.Field;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.function.Function;
+import java.util.function.BiConsumer;
 
 /**
  * {@link AsyncRpcResult} is introduced in 3.0.0 to replace RpcResult, and RpcResult is replaced with {@link AppResponse}:
@@ -158,7 +158,7 @@ public void setAttachment(String key, String value) {
     }
 
     @Override
-    public Result thenApplyWithContext(Function<Result, Result> fn) {
+    public Result whenCompleteWithContext(BiConsumer<Result, Throwable> fn) {
         throw new UnsupportedOperationException("AppResponse represents an concrete business response, there will be no status changes, you should get internal values directly.");
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/InvokeMode.java
Patch:
@@ -18,6 +18,6 @@
 
 public enum InvokeMode {
 
-    SYNC, ASYNC, FUTURE;
+    SYNC, ASYNC, FUTURE
 
 }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/Result.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Future;
-import java.util.function.Function;
+import java.util.function.BiConsumer;
 
 
 /**
@@ -130,12 +130,12 @@ public interface Result extends CompletionStage<Result>, Future<Result>, Seriali
      * Add a callback which can be triggered when the RPC call finishes.
      * <p>
      * Just as the method name implies, this method will guarantee the callback being triggered under the same context as when the call was started,
-     * see implementation in {@link AsyncRpcResult#thenApplyWithContext(Function)}
+     * see implementation in {@link Result#whenCompleteWithContext(BiConsumer)}
      *
      * @param fn
      * @return
      */
-    Result thenApplyWithContext(Function<Result, Result> fn);
+    Result whenCompleteWithContext(BiConsumer<Result, Throwable> fn);
 
     default CompletableFuture<Result> completionFuture() {
         return toCompletableFuture();

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcInvocation.java
Patch:
@@ -93,7 +93,7 @@ public RpcInvocation(Invocation invocation) {
     }
 
     public RpcInvocation(Method method, Object[] arguments) {
-        this(method.getName(), method.getParameterTypes(), arguments, null, null);
+        this(method, arguments, null);
     }
 
     public RpcInvocation(Method method, Object[] arguments, Map<String, String> attachment) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/invoker/ProviderInvokerWrapper.java
Patch:
@@ -90,7 +90,7 @@ public void setReg(boolean reg) {
 
     @Override
     public boolean equals(Object o) {
-        if (o == null || !(o instanceof ProviderInvokerWrapper)) {
+        if (!(o instanceof ProviderInvokerWrapper)) {
             return false;
         }
         ProviderInvokerWrapper other = (ProviderInvokerWrapper) o;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/FutureAdapter.java
Patch:
@@ -90,4 +90,7 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, Execution
         }
     }
 
+    public CompletableFuture<AppResponse> getAppResponseFuture() {
+        return appResponseFuture;
+    }
 }

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/AppResponseTest.java
Patch:
@@ -44,7 +44,7 @@ public void testAppResponseWithEmptyStackTraceException() {
 
         StackTraceElement[] stackTrace = appResponse.getException().getStackTrace();
         Assertions.assertNotNull(stackTrace);
-        Assertions.assertTrue(stackTrace.length == 0);
+        Assertions.assertEquals(0,stackTrace.length);
     }
 
     @Test
@@ -72,7 +72,7 @@ public void testSetExceptionWithEmptyStackTraceException() {
 
         StackTraceElement[] stackTrace = appResponse.getException().getStackTrace();
         Assertions.assertNotNull(stackTrace);
-        Assertions.assertTrue(stackTrace.length == 0);
+        Assertions.assertEquals(0,stackTrace.length);
     }
 
     private Throwable buildEmptyStackTraceException() {

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ConsumerContextFilterTest.java
Patch:
@@ -43,12 +43,11 @@ public void testSetContext() {
         Invoker<DemoService> invoker = new MyInvoker<DemoService>(url);
         Invocation invocation = new MockInvocation();
         Result asyncResult = consumerContextFilter.invoke(invoker, invocation);
-        asyncResult.thenApplyWithContext(result -> {
+        asyncResult.whenCompleteWithContext((result, t) -> {
             assertEquals(invoker, RpcContext.getContext().getInvoker());
             assertEquals(invocation, RpcContext.getContext().getInvocation());
             assertEquals(NetUtils.getLocalHost() + ":0", RpcContext.getContext().getLocalAddressString());
             assertEquals("test:11", RpcContext.getContext().getRemoteAddressString());
-            return result;
         });
     }
 }
\ No newline at end of file

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/tps/StatItemTest.java
Patch:
@@ -35,9 +35,9 @@ public void tearDown() throws Exception {
     public void testIsAllowable() throws Exception {
         statItem = new StatItem("test", 5, 1000L);
         long lastResetTime = statItem.getLastResetTime();
-        assertEquals(true, statItem.isAllowable());
+        assertTrue(statItem.isAllowable());
         Thread.sleep(1100L);
-        assertEquals(true, statItem.isAllowable());
+        assertTrue(statItem.isAllowable());
         assertTrue(lastResetTime != statItem.getLastResetTime());
         assertEquals(4, statItem.getToken());
     }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
Patch:
@@ -68,9 +68,9 @@ private static byte isCallBack(URL url, String methodName, int argIndex) {
         if (url != null) {
             String callback = url.getParameter(methodName + "." + argIndex + ".callback");
             if (callback != null) {
-                if (callback.equalsIgnoreCase("true")) {
+                if ("true".equalsIgnoreCase(callback)) {
                     isCallback = CALLBACK_CREATE;
-                } else if (callback.equalsIgnoreCase("false")) {
+                } else if ("false".equalsIgnoreCase(callback)) {
                     isCallback = CALLBACK_DESTROY;
                 }
             }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -121,10 +120,11 @@ protected Object decodeBody(Channel channel, InputStream is, byte[] header) thro
             }
             try {
                 Object data;
-                ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);
                 if (req.isHeartbeat()) {
+                    ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);
                     data = decodeHeartbeatData(channel, in);
                 } else if (req.isEvent()) {
+                    ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);
                     data = decodeEventData(channel, in);
                 } else {
                     DecodeableRpcInvocation inv;
@@ -186,7 +186,7 @@ protected void encodeRequestData(Channel channel, ObjectOutput out, Object data,
                 out.writeObject(encodeInvocationArgument(channel, inv, i));
             }
         }
-        out.writeObject(RpcUtils.getNecessaryAttachments(inv));
+        out.writeObject(inv.getAttachments());
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ChangeTelnetHandler.java
Patch:
@@ -38,7 +38,7 @@ public String telnet(Channel channel, String message) {
             return "Please input service name, eg: \r\ncd XxxService\r\ncd com.xxx.XxxService";
         }
         StringBuilder buf = new StringBuilder();
-        if (message.equals("/") || message.equals("..")) {
+        if ("/".equals(message) || "..".equals(message)) {
             String service = (String) channel.getAttribute(SERVICE_KEY);
             channel.removeAttribute(SERVICE_KEY);
             buf.append("Cancelled default service " + service + ".");

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/IDemoService.java
Patch:
@@ -17,5 +17,5 @@
 package org.apache.dubbo.rpc.protocol.dubbo;
 
 public interface IDemoService {
-    public String get();
+    String get();
 }

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/decode/DubboTelnetDecodeTest.java
Patch:
@@ -452,7 +452,7 @@ private ByteBuf createDubboByteBuf() throws IOException {
     }
 
     private static boolean checkTelnetDecoded(Object msg) {
-        if (msg != null && msg instanceof String && !msg.toString().contains("Unsupported command:")) {
+        if (msg instanceof String && !msg.toString().contains("Unsupported command:")) {
             return true;
         }
         return false;

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/CurrentTelnetHandlerTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.telnet.TelnetHandler;
 
-import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: dubbo-rpc/dubbo-rpc-hessian/src/main/java/org/apache/dubbo/rpc/protocol/hessian/HessianProtocol.java
Patch:
@@ -176,7 +176,7 @@ public void handle(HttpServletRequest request, HttpServletResponse response)
                 throws IOException, ServletException {
             String uri = request.getRequestURI();
             HessianSkeleton skeleton = skeletonMap.get(uri);
-            if (!request.getMethod().equalsIgnoreCase("POST")) {
+            if (!"POST".equalsIgnoreCase(request.getMethod())) {
                 response.setStatus(500);
             } else {
                 RpcContext.getContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());

File: dubbo-rpc/dubbo-rpc-http/src/main/java/org/apache/dubbo/rpc/protocol/http/HttpProtocol.java
Patch:
@@ -208,7 +208,7 @@ public void handle(HttpServletRequest request, HttpServletResponse response)
                 throws IOException, ServletException {
             String uri = request.getRequestURI();
             HttpInvokerServiceExporter skeleton = skeletonMap.get(uri);
-            if (!request.getMethod().equalsIgnoreCase("POST")) {
+            if (!"POST".equalsIgnoreCase(request.getMethod())) {
                 response.setStatus(500);
             } else {
                 RpcContext.getContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());

File: dubbo-rpc/dubbo-rpc-http/src/test/java/org/apache/dubbo/rpc/protocol/http/HttpProtocolTest.java
Patch:
@@ -174,7 +174,7 @@ public void testTimeOut() {
             client.timeOut(6000);
             fail();
         } catch (RpcException expected) {
-            Assertions.assertEquals(true, expected.isTimeout());
+            Assertions.assertTrue(expected.isTimeout());
         } finally {
             invoker.destroy();
             exporter.unexport();

File: dubbo-rpc/dubbo-rpc-jsonrpc/src/main/java/org/apache/dubbo/rpc/protocol/jsonrpc/JsonRpcProtocol.java
Patch:
@@ -82,9 +82,9 @@ public void handle(HttpServletRequest request, HttpServletResponse response)
                 response.setHeader(ACCESS_CONTROL_ALLOW_METHODS_HEADER, "POST");
                 response.setHeader(ACCESS_CONTROL_ALLOW_HEADERS_HEADER, "*");
             }
-            if (request.getMethod().equalsIgnoreCase("OPTIONS")) {
+            if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
                 response.setStatus(200);
-            } else if (request.getMethod().equalsIgnoreCase("POST")) {
+            } else if ("POST".equalsIgnoreCase(request.getMethod())) {
 
                 RpcContext.getContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());
                 try {

File: dubbo-rpc/dubbo-rpc-native-thrift/src/test/java/org/apache/dubbo/rpc/protocol/nativethrift/UserService.java
Patch:
@@ -11,13 +11,13 @@ public class UserService {
 
   public interface Iface {
 
-    public String find(int id) throws org.apache.thrift.TException;
+    String find(int id) throws org.apache.thrift.TException;
 
   }
 
   public interface AsyncIface {
 
-    public void find(int id, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;
+    void find(int id, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;
 
   }
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java
Patch:
@@ -161,6 +161,7 @@ protected <T> T doRefer(Class<T> serviceType, URL url) throws RpcException {
                 .build();
 
         CloseableHttpClient httpClient = HttpClientBuilder.create()
+                .setConnectionManager(connectionManager)
                 .setKeepAliveStrategy((response, context) -> {
                     HeaderElementIterator it = new BasicHeaderElementIterator(response.headerIterator(HTTP.CONN_KEEP_ALIVE));
                     while (it.hasNext()) {

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/integration/swagger/DubboSwaggerService.java
Patch:
@@ -38,6 +38,6 @@ public interface DubboSwaggerService {
 
     @GET
     @Path("swagger")
-    public Response getListingJson(@Context Application app, @Context ServletConfig sc,
-                                   @Context HttpHeaders headers, @Context UriInfo uriInfo) throws JsonProcessingException;
+    Response getListingJson(@Context Application app, @Context ServletConfig sc,
+                            @Context HttpHeaders headers, @Context UriInfo uriInfo) throws JsonProcessingException;
 }
\ No newline at end of file

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/support/LoggingFilter.java
Patch:
@@ -40,6 +40,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Map;
 
@@ -75,7 +76,7 @@ public void filter(ContainerRequestContext requestContext, ContainerResponseCont
     @Override
     public Object aroundReadFrom(ReaderInterceptorContext context) throws IOException, WebApplicationException {
         byte[] buffer = IOUtils.toByteArray(context.getInputStream());
-        logger.info("The contents of request body is: \n" + new String(buffer, "UTF-8") + "\n");
+        logger.info("The contents of request body is: \n" + new String(buffer, StandardCharsets.UTF_8) + "\n");
         context.setInputStream(new ByteArrayInputStream(buffer));
         return context.proceed();
     }
@@ -85,7 +86,7 @@ public void aroundWriteTo(WriterInterceptorContext context) throws IOException,
         OutputStreamWrapper wrapper = new OutputStreamWrapper(context.getOutputStream());
         context.setOutputStream(wrapper);
         context.proceed();
-        logger.info("The contents of response body is: \n" + new String(wrapper.getBytes(), "UTF-8") + "\n");
+        logger.info("The contents of response body is: \n" + new String(wrapper.getBytes(), StandardCharsets.UTF_8) + "\n");
     }
 
     protected void logHttpHeaders(MultivaluedMap<String, String> headers) {

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/integration/swagger/DubboSwaggerApiListingResourceTest.java
Patch:
@@ -25,10 +25,8 @@
 import javax.servlet.ServletContext;
 import javax.ws.rs.core.Application;
 import javax.ws.rs.core.Response;
-import javax.ws.rs.core.UriInfo;
 
 import java.net.URI;
-import java.net.URISyntaxException;
 import java.util.HashSet;
 import java.util.Set;
 

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ClassNameGenerator.java
Patch:
@@ -24,8 +24,8 @@
 @SPI(DubboClassNameGenerator.NAME)
 public interface ClassNameGenerator {
 
-    public String generateArgsClassName(String serviceName, String methodName);
+    String generateArgsClassName(String serviceName, String methodName);
 
-    public String generateResultClassName(String serviceName, String methodName);
+    String generateResultClassName(String serviceName, String methodName);
 
 }

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftInvoker.java
Patch:
@@ -23,14 +23,13 @@
 import org.apache.dubbo.remoting.TimeoutException;
 import org.apache.dubbo.remoting.exchange.ExchangeClient;
 import org.apache.dubbo.rpc.AsyncRpcResult;
+import org.apache.dubbo.rpc.FutureContext;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
-import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.protocol.AbstractInvoker;
-import org.apache.dubbo.rpc.protocol.dubbo.FutureAdapter;
 
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
@@ -97,7 +96,8 @@ protected Result doInvoke(Invocation invocation) throws Throwable {
             AsyncRpcResult asyncRpcResult = new AsyncRpcResult(invocation);
             CompletableFuture<Object> responseFuture = currentClient.request(inv, timeout);
             asyncRpcResult.subscribeTo(responseFuture);
-            RpcContext.getContext().setFuture(new FutureAdapter(asyncRpcResult));
+            // save for 2.6.x compatibility, for example, TraceFilter in Zipkin uses com.alibaba.xxx.FutureAdapter
+            FutureContext.getContext().setCompatibleFuture(responseFuture);
             return asyncRpcResult;
         } catch (TimeoutException e) {
             throw new RpcException(RpcException.TIMEOUT_EXCEPTION, e.getMessage(), e);

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/ClassNameTestDubbo.java
Patch:
@@ -24,6 +24,6 @@
 
 public interface ClassNameTestDubbo {
 
-    public String echo(String arg);
+    String echo(String arg);
 
 }

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/ClassNameTestThrift.java
Patch:
@@ -17,13 +17,13 @@ public class ClassNameTestThrift {
 
     public interface Iface {
 
-        public String echo(String arg) throws org.apache.thrift.TException;
+        String echo(String arg) throws org.apache.thrift.TException;
 
     }
 
     public interface AsyncIface {
 
-        public void echo(String arg, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.echo_call> resultHandler) throws org.apache.thrift.TException;
+        void echo(String arg, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.echo_call> resultHandler) throws org.apache.thrift.TException;
 
     }
 

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodecTest.java
Patch:
@@ -183,7 +183,7 @@ public void testDecodeReplyResponse() throws Exception {
 
         Assertions.assertNotNull(obj);
 
-        Assertions.assertEquals(true, obj instanceof Response);
+        Assertions.assertTrue(obj instanceof Response);
 
         Response response = (Response) obj;
 

File: dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProxyFactoryBean.java
Patch:
@@ -80,7 +80,7 @@ public Object invoke(MethodInvocation invocation)
 
         // handle toString()
         Method method = invocation.getMethod();
-        if (method.getDeclaringClass() == Object.class && method.getName().equals("toString")) {
+        if (method.getDeclaringClass() == Object.class && "toString".equals(method.getName())) {
             return proxyObject.getClass().getName() + "@" + System.identityHashCode(proxyObject);
         }
 

File: dubbo-serialization/dubbo-serialization-avro/src/main/java/org/apache/dubbo/common/serialize/avro/AvroObjectInput.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.Type;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -83,7 +84,7 @@ public String readUTF() throws IOException {
     @Override
     public byte[] readBytes() throws IOException {
         String resultStr = decoder.readString();
-        return resultStr.getBytes("utf8");
+        return resultStr.getBytes(StandardCharsets.UTF_8);
     }
 
     /**

File: dubbo-serialization/dubbo-serialization-avro/src/main/java/org/apache/dubbo/common/serialize/avro/AvroObjectOutput.java
Patch:
@@ -24,6 +24,7 @@
 
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 
 public class AvroObjectOutput implements ObjectOutput {
@@ -76,13 +77,13 @@ public void writeUTF(String v) throws IOException {
 
     @Override
     public void writeBytes(byte[] v) throws IOException {
-        encoder.writeString(new String(v, "utf8"));
+        encoder.writeString(new String(v, StandardCharsets.UTF_8));
     }
 
     @Override
     public void writeBytes(byte[] v, int off, int len) throws IOException {
         byte[] v2 = Arrays.copyOfRange(v, off, off + len);
-        encoder.writeString(new String(v2, "utf8"));
+        encoder.writeString(new String(v2, StandardCharsets.UTF_8));
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/utils/WrapperUtils.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.common.serialize.protostuff.utils;
 
 import org.apache.dubbo.common.serialize.protostuff.Wrapper;
+import org.apache.dubbo.common.serialize.protostuff.delegate.SqlDateDelegate;
 import org.apache.dubbo.common.serialize.protostuff.delegate.TimeDelegate;
 
 import io.protostuff.runtime.DefaultIdStrategy;
@@ -55,6 +56,7 @@ public class WrapperUtils {
         if (RuntimeEnv.ID_STRATEGY instanceof DefaultIdStrategy) {
             ((DefaultIdStrategy) RuntimeEnv.ID_STRATEGY).registerDelegate(new TimeDelegate());
             ((DefaultIdStrategy) RuntimeEnv.ID_STRATEGY).registerDelegate(new TimestampDelegate());
+            ((DefaultIdStrategy) RuntimeEnv.ID_STRATEGY).registerDelegate(new SqlDateDelegate());
         }
 
         WRAPPER_SET.add(Map.class);
@@ -84,6 +86,7 @@ public class WrapperUtils {
         WRAPPER_SET.add(Calendar.class);
         WRAPPER_SET.add(Time.class);
         WRAPPER_SET.add(Timestamp.class);
+        WRAPPER_SET.add(java.sql.Date.class);
 
         WRAPPER_SET.add(Wrapper.class);
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/hessian2/Hessian2PersonOkTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
 import org.apache.dubbo.common.serialize.base.AbstractSerializationPersonOkTest;
-import org.apache.dubbo.common.serialize.java.JavaSerialization;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -478,7 +478,7 @@ public Invoker<T> getInvoker() {
         }
     }
 
-    static private class DestroyableExporter<T> implements Exporter<T> {
+    private static class DestroyableExporter<T> implements Exporter<T> {
 
         private Exporter<T> exporter;
 

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java
Patch:
@@ -227,12 +227,14 @@ protected void addTargetDataListener(String path, CuratorZookeeperClient.Curator
         try {
             TreeCache treeCache = TreeCache.newBuilder(client, path).setCacheData(false).build();
             treeCacheMap.putIfAbsent(path, treeCache);
-            treeCache.start();
+
             if (executor == null) {
                 treeCache.getListenable().addListener(treeCacheListener);
             } else {
                 treeCache.getListenable().addListener(treeCacheListener, executor);
             }
+
+            treeCache.start();
         } catch (Exception e) {
             throw new IllegalStateException("Add treeCache listener for path:" + path, e);
         }

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java
Patch:
@@ -129,6 +129,8 @@ public static Object compatibleTypeConvert(Object value, Class<?> type) {
                 return BigDecimal.valueOf(number.doubleValue());
             } else if (type == Date.class) {
                 return new Date(number.longValue());
+            } else if (type == boolean.class || type == Boolean.class) {
+                return 0 != number.intValue();
             }
         } else if (value instanceof Collection) {
             Collection collection = (Collection) value;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java
Patch:
@@ -580,6 +580,7 @@ private static Method getSetterMethod(Class<?> cls, String property, Class<?> va
                 for (Method m : cls.getMethods()) {
                     if (ReflectUtils.isBeanPropertyWriteMethod(m) && m.getName().equals(name)) {
                         method = m;
+                        break;
                     }
                 }
             }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java
Patch:
@@ -68,7 +68,7 @@ public class AccessLogFilter implements Filter {
 
     private static final Logger logger = LoggerFactory.getLogger(AccessLogFilter.class);
 
-    private static final String ACCESS_LOG_KEY = "dubbo.accesslog";
+    private static final String LOG_KEY = "dubbo.accesslog";
 
     private static final int LOG_MAX_BUFFER = 5000;
 
@@ -179,7 +179,7 @@ private void processWithServiceLogger(Set<AccessLogData> logSet) {
              iterator.hasNext();
              iterator.remove()) {
             AccessLogData logData = iterator.next();
-            LoggerFactory.getLogger(ACCESS_LOG_KEY + "." + logData.getServiceName()).info(logData.getLogMessage());
+            LoggerFactory.getLogger(LOG_KEY + "." + logData.getServiceName()).info(logData.getLogMessage());
         }
     }
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java
Patch:
@@ -108,12 +108,12 @@ public void testSticky() throws Exception {
     }
 
     @Test
-    public void testConverMethodConfig2AsyncInfo() throws Exception{
+    public void testConvertMethodConfig2AsyncInfo() throws Exception{
         org.apache.dubbo.config.MethodConfig methodConfig = new org.apache.dubbo.config.MethodConfig();
         methodConfig.setOninvokeMethod("setName");
         methodConfig.setOninvoke(new Person());
 
-        ConsumerMethodModel.AsyncMethodInfo methodInfo = org.apache.dubbo.config.MethodConfig.convertMethodConfig2AyncInfo(methodConfig);
+        ConsumerMethodModel.AsyncMethodInfo methodInfo = org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(methodConfig);
 
         assertEquals(methodInfo.getOninvokeMethod(), Person.class.getMethod("setName", String.class));
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -249,7 +249,7 @@ protected static void appendAttributes(Map<String, Object> parameters, Object co
         }
     }
 
-    protected static ConsumerMethodModel.AsyncMethodInfo convertMethodConfig2AyncInfo(MethodConfig methodConfig) {
+    protected static ConsumerMethodModel.AsyncMethodInfo convertMethodConfig2AsyncInfo(MethodConfig methodConfig) {
         if (methodConfig == null || (methodConfig.getOninvoke() == null && methodConfig.getOnreturn() == null && methodConfig.getOnthrow() == null)) {
             return null;
         }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -314,7 +314,7 @@ private void init() {
                         map.put(methodConfig.getName() + ".retries", "0");
                     }
                 }
-                attributes.put(methodConfig.getName(), convertMethodConfig2AyncInfo(methodConfig));
+                attributes.put(methodConfig.getName(), convertMethodConfig2AsyncInfo(methodConfig));
             }
         }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -619,6 +619,8 @@ private void useRegistryForConfigIfNecessary() {
             Environment.getInstance().getDynamicConfiguration().orElseGet(() -> {
                 ConfigManager configManager = ConfigManager.getInstance();
                 ConfigCenterConfig cc = configManager.getConfigCenter().orElse(new ConfigCenterConfig());
+                cc.setParameters(new HashMap<>());
+                cc.getParameters().put(org.apache.dubbo.remoting.Constants.CLIENT_KEY,rc.getClient());
                 cc.setProtocol(rc.getProtocol());
                 cc.setAddress(rc.getAddress());
                 cc.setHighestPriority(false);

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessorTest.java
Patch:
@@ -54,7 +54,7 @@
 @TestPropertySource(properties = {
         "packagesToScan = org.apache.dubbo.config.spring.context.annotation.provider",
         "consumer.version = ${demo.service.version}",
-        "consumer.url = dubbo://127.0.0.1:12345",
+        "consumer.url = dubbo://127.0.0.1:12345?version=2.5.7",
 })
 public class ReferenceAnnotationBeanPostProcessorTest {
 
@@ -221,7 +221,7 @@ public DemoService getDemoServiceFromAncestor() {
             return demoServiceFromAncestor;
         }
 
-        @Reference(id = "my-reference-bean", version = "2.5.7", url = "dubbo://127.0.0.1:12345")
+        @Reference(id = "my-reference-bean", version = "2.5.7", url = "dubbo://127.0.0.1:12345?version=2.5.7")
         public void setDemoServiceFromAncestor(DemoService demoServiceFromAncestor) {
             this.demoServiceFromAncestor = demoServiceFromAncestor;
         }
@@ -259,7 +259,7 @@ public DemoService getDemoService() {
             return demoService;
         }
 
-        @com.alibaba.dubbo.config.annotation.Reference(version = "2.5.7", url = "dubbo://127.0.0.1:12345")
+        @com.alibaba.dubbo.config.annotation.Reference(version = "2.5.7", url = "dubbo://127.0.0.1:12345?version=2.5.7")
         public void setDemoService(DemoService demoService) {
             this.demoService = demoService;
         }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/RpcContext.java
Patch:
@@ -35,9 +35,7 @@ private static RpcContext newInstance(org.apache.dubbo.rpc.RpcContext rpcContext
         RpcContext copy = new RpcContext();
         copy.getAttachments().putAll(rpcContext.getAttachments());
         copy.get().putAll(rpcContext.get());
-        if (rpcContext.getCompletableFuture() != null) {
-            copy.setFuture(rpcContext.getCompletableFuture());
-        }
+
         copy.setUrls(rpcContext.getUrls());
         copy.setUrl(rpcContext.getUrl());
         copy.setMethodName(rpcContext.getMethodName());

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/common/Constants.java
Patch:
@@ -37,7 +37,7 @@ public class Constants implements CommonConstants,
         org.apache.dubbo.rpc.protocol.dubbo.Constants,
         org.apache.dubbo.common.serialize.Constants,
         org.apache.dubbo.common.config.configcenter.Constants,
-        org.apache.dubbo.metadata.support.Constants,
+        org.apache.dubbo.metadata.report.support.Constants ,
         org.apache.dubbo.rpc.protocol.rest.Constants,
         org.apache.dubbo.registry.Constants {
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/ServiceOrientedRegistry.java
Patch:
@@ -62,7 +62,7 @@
 import static org.apache.dubbo.common.utils.CollectionUtils.isEmpty;
 import static org.apache.dubbo.common.utils.CollectionUtils.isNotEmpty;
 import static org.apache.dubbo.common.utils.StringUtils.isBlank;
-import static org.apache.dubbo.metadata.support.Constants.METADATA_REPORT_KEY;
+import static org.apache.dubbo.metadata.report.support.Constants.METADATA_REPORT_KEY;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getExportedServicesRevision;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceURLsParams;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getProviderHost;

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/common/Constants.java
Patch:
@@ -37,7 +37,7 @@ public class Constants implements CommonConstants,
         org.apache.dubbo.rpc.protocol.dubbo.Constants,
         org.apache.dubbo.common.serialize.Constants,
         org.apache.dubbo.common.config.configcenter.Constants,
-        org.apache.dubbo.metadata.support.Constants,
+        org.apache.dubbo.metadata.report.support.Constants ,
         org.apache.dubbo.rpc.protocol.rest.Constants,
         org.apache.dubbo.registry.Constants {
 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/ServiceOrientedRegistry.java
Patch:
@@ -62,7 +62,7 @@
 import static org.apache.dubbo.common.utils.CollectionUtils.isEmpty;
 import static org.apache.dubbo.common.utils.CollectionUtils.isNotEmpty;
 import static org.apache.dubbo.common.utils.StringUtils.isBlank;
-import static org.apache.dubbo.metadata.support.Constants.METADATA_REPORT_KEY;
+import static org.apache.dubbo.metadata.report.support.Constants.METADATA_REPORT_KEY;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getExportedServicesRevision;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceURLsParams;
 import static org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getProviderHost;

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/support/ActivateComparator.java
Patch:
@@ -82,7 +82,7 @@ public int compare(Object o1, Object o2) {
     }
 
     private Class<?> findSpi(Class clazz) {
-        if (clazz.getInterfaces().length <= 0) {
+        if (clazz.getInterfaces().length == 0) {
             return null;
         }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationInjectedBeanPostProcessor.java
Patch:
@@ -61,7 +61,6 @@
 import static org.apache.dubbo.config.spring.util.AnnotationUtils.getMergedAttributes;
 import static org.springframework.core.BridgeMethodResolver.findBridgedMethod;
 import static org.springframework.core.BridgeMethodResolver.isVisibilityBridgeMethodPair;
-import static org.springframework.util.CollectionUtils.isEmpty;
 
 /**
  * Abstract generic {@link BeanPostProcessor} implementation for customized annotation that annotated injected-object.
@@ -172,7 +171,7 @@ private List<AnnotationInjectedBeanPostProcessor.AnnotatedFieldElement> findFiel
 
                 AnnotationAttributes attributes = getMergedAttributes(field, annotationType, getEnvironment(), true);
 
-                if (!isEmpty(attributes)) {
+                if (attributes != null) {
 
                     if (Modifier.isStatic(field.getModifiers())) {
                         if (logger.isWarnEnabled()) {
@@ -213,7 +212,7 @@ private List<AnnotationInjectedBeanPostProcessor.AnnotatedMethodElement> findAnn
 
                 AnnotationAttributes attributes = getMergedAttributes(bridgedMethod, annotationType, getEnvironment(), true);
 
-                if (!isEmpty(attributes) && method.equals(ClassUtils.getMostSpecificMethod(method, beanClass))) {
+                if (attributes != null && method.equals(ClassUtils.getMostSpecificMethod(method, beanClass))) {
                     if (Modifier.isStatic(method.getModifiers())) {
                         if (logger.isWarnEnabled()) {
                             logger.warn("@" + annotationType.getName() + " annotation is not supported on static methods: " + method);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/AnnotationUtils.java
Patch:
@@ -415,7 +415,7 @@ public static Map<String, Object> resolvePlaceholders(Map<String, Object> source
      * @param propertyResolver     {@link PropertyResolver} instance, e.g {@link Environment}
      * @param ignoreDefaultValue   whether ignore default value or not
      * @param ignoreAttributeNames the attribute names of annotation should be ignored
-     * @return non-null
+     * @return If the specified annotation type is not found, return <code>null</code>
      * @since 2.7.3
      */
     public static AnnotationAttributes getMergedAttributes(AnnotatedElement annotatedElement,
@@ -424,7 +424,7 @@ public static AnnotationAttributes getMergedAttributes(AnnotatedElement annotate
                                                            boolean ignoreDefaultValue,
                                                            String... ignoreAttributeNames) {
         Annotation annotation = getMergedAnnotation(annotatedElement, annotationType);
-        return fromMap(getAttributes(annotation, propertyResolver, ignoreDefaultValue, ignoreAttributeNames));
+        return annotation == null ? null : fromMap(getAttributes(annotation, propertyResolver, ignoreDefaultValue, ignoreAttributeNames));
 
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -752,7 +752,7 @@ private Integer findConfigedPorts(ProtocolConfig protocolConfig, String name, Ma
             if (portToBind == null || portToBind == 0) {
                 portToBind = defaultPort;
             }
-            if (portToBind == null || portToBind <= 0) {
+            if (portToBind <= 0) {
                 portToBind = getRandomPort(name);
                 if (portToBind == null || portToBind < 0) {
                     portToBind = getAvailablePort(defaultPort);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java
Patch:
@@ -48,7 +48,7 @@ public static <T> RouterChain<T> buildChain(URL url) {
 
     private RouterChain(URL url) {
         List<RouterFactory> extensionFactories = ExtensionLoader.getExtensionLoader(RouterFactory.class)
-                .getActivateExtension(url, (String[]) null);
+                .getActivateExtension(url, "router");
 
         List<Router> routers = extensionFactories.stream()
                 .map(factory -> factory.getRouter(url))

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java
Patch:
@@ -102,7 +102,7 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {
         String key = sb.toString();
 
         // get cache by class loader.
-        Map<String, Object> cache;
+        final Map<String, Object> cache;
         synchronized (PROXY_CACHE_MAP) {
             cache = PROXY_CACHE_MAP.computeIfAbsent(cl, k -> new HashMap<>());
         }

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -342,7 +342,7 @@ public T getExtension(String name) {
         if ("true".equals(name)) {
             return getDefaultExtension();
         }
-        Holder<Object> holder = getOrCreateHolder(name);
+        final Holder<Object> holder = getOrCreateHolder(name);
         Object instance = holder.get();
         if (instance == null) {
             synchronized (holder) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java
Patch:
@@ -37,9 +37,9 @@
 import java.util.regex.Pattern;
 
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_IP_TO_BIND;
 import static org.apache.dubbo.common.constants.CommonConstants.LOCALHOST_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.LOCALHOST_VALUE;
-import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_IP_TO_BIND;
 
 /**
  * IP and Port Helper for RPC

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/context/annotation/DubboComponentScanRegistrarTest.java
Patch:
@@ -86,6 +86,8 @@ public void test() {
 
         Assertions.assertEquals("Hello,Mercy", value);
 
+        Assertions.assertEquals("Hello,Mercy", child.getDemoService().sayName("Mercy"));
+
         // From Parent
 
         demoService = child.getDemoServiceFromParent();

File: dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java
Patch:
@@ -263,7 +263,7 @@ public void doUnregister(URL url) {
     }
 
     @Override
-    public void doSubscribe(URL url, NotifyListener listener) {
+    public void doSubscribe(URL url, final NotifyListener listener) {
         if (ANY_VALUE.equals(url.getServiceInterface())) {
             admin = true;
         }
@@ -324,7 +324,7 @@ protected void registered(URL url) {
                 }
                 urls.add(url);
                 List<URL> list = toList(urls);
-                for (NotifyListener listener : entry.getValue()) {
+                for (final NotifyListener listener : entry.getValue()) {
                     notify(key, listener, list);
                     synchronized (listener) {
                         listener.notify();

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistryFactory.java
Patch:
@@ -101,7 +101,7 @@ private void setProperties(URL url, Properties properties) {
 
     private void putPropertyIfAbsent(URL url, Properties properties, String propertyName) {
         String propertyValue = url.getParameter(propertyName);
-        if (StringUtils.isNotEmpty(propertyValue)) {
+        if (propertyValue != null && propertyValue.trim().length() != 0) {
             properties.setProperty(propertyName, propertyValue);
         }
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ActiveLimitFilter.java
Patch:
@@ -57,7 +57,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         URL url = invoker.getUrl();
         String methodName = invocation.getMethodName();
         int max = invoker.getUrl().getMethodParameter(methodName, ACTIVES_KEY, 0);
-        RpcStatus rpcStatus = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName());
+        final RpcStatus rpcStatus = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName());
         if (!RpcStatus.beginCount(url, methodName, max)) {
             long timeout = invoker.getUrl().getMethodParameter(invocation.getMethodName(), TIMEOUT_KEY, 0);
             long start = System.currentTimeMillis();
@@ -119,7 +119,7 @@ private long getElapsed(Invocation invocation) {
             return StringUtils.isNotEmpty(beginTime) ? System.currentTimeMillis() - Long.parseLong(beginTime) : 0;
         }
 
-        private void notifyFinish(RpcStatus rpcStatus, int max) {
+        private void notifyFinish(final RpcStatus rpcStatus, int max) {
             if (max > 0) {
                 synchronized (rpcStatus) {
                     rpcStatus.notifyAll();

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java
Patch:
@@ -292,8 +292,8 @@ public void process(WatchedEvent event) throws Exception {
         @Override
         public void childEvent(CuratorFramework client, TreeCacheEvent event) throws Exception {
             if (dataListener != null) {
-                if (logger.isInfoEnabled()) {
-                    logger.info("listen the zookeeper changed. The changed data:" + event.getData());
+                if (logger.isDebugEnabled()) {
+                    logger.debug("listen the zookeeper changed. The changed data:" + event.getData());
                 }
                 TreeCacheEvent.Type type = event.getType();
                 EventType eventType = null;

File: dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/utils/WrapperUtils.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dubbo.common.serialize.protostuff.utils;
 
 import org.apache.dubbo.common.serialize.protostuff.Wrapper;
+import org.apache.dubbo.common.serialize.protostuff.delegate.SqlDateDelegate;
 import org.apache.dubbo.common.serialize.protostuff.delegate.TimeDelegate;
 
 import io.protostuff.runtime.DefaultIdStrategy;
@@ -55,6 +56,7 @@ public class WrapperUtils {
         if (RuntimeEnv.ID_STRATEGY instanceof DefaultIdStrategy) {
             ((DefaultIdStrategy) RuntimeEnv.ID_STRATEGY).registerDelegate(new TimeDelegate());
             ((DefaultIdStrategy) RuntimeEnv.ID_STRATEGY).registerDelegate(new TimestampDelegate());
+            ((DefaultIdStrategy) RuntimeEnv.ID_STRATEGY).registerDelegate(new SqlDateDelegate());
         }
 
         WRAPPER_SET.add(Map.class);
@@ -84,6 +86,7 @@ public class WrapperUtils {
         WRAPPER_SET.add(Calendar.class);
         WRAPPER_SET.add(Time.class);
         WRAPPER_SET.add(Timestamp.class);
+        WRAPPER_SET.add(java.sql.Date.class);
 
         WRAPPER_SET.add(Wrapper.class);
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AsyncToSyncInvoker.java
Patch:
@@ -34,6 +34,7 @@
 
 /**
  * This class will work as a wrapper wrapping outside of each protocol invoker.
+ *
  * @param <T>
  */
 public class AsyncToSyncInvoker<T> implements Invoker<T> {
@@ -54,8 +55,8 @@ public Result invoke(Invocation invocation) throws RpcException {
         Result asyncResult = invoker.invoke(invocation);
 
         try {
-            if (InvokeMode.SYNC == ((RpcInvocation)invocation).getInvokeMode()) {
-                asyncResult.get(getUrl().getParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT), TimeUnit.MILLISECONDS);
+            if (InvokeMode.SYNC == ((RpcInvocation) invocation).getInvokeMode()) {
+                asyncResult.get(Integer.MAX_VALUE, TimeUnit.MILLISECONDS);
             }
         } catch (InterruptedException e) {
             throw new RpcException("Interrupted unexpectedly while waiting for remoting result to return!  method: " + invocation.getMethodName() + ", provider: " + getUrl() + ", cause: " + e.getMessage(), e);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -87,7 +87,7 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
         }
         try {
             boolean isOneway = RpcUtils.isOneway(getUrl(), invocation);
-            int timeout = getUrl().getMethodParameter(methodName, TIMEOUT_KEY, DEFAULT_TIMEOUT);
+            int timeout = getUrl().getMethodPositiveParameter(methodName, TIMEOUT_KEY, DEFAULT_TIMEOUT);
             if (isOneway) {
                 boolean isSent = getUrl().getMethodParameter(methodName, Constants.SENT_KEY, false);
                 currentClient.send(inv, isSent);

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java
Patch:
@@ -366,7 +366,7 @@ private static Object realize0(Object pojo, Class<?> type, Type genericType, fin
                 history.put(pojo, dest);
                 for (Object obj : src) {
                     Type keyType = getGenericClassByIndex(genericType, 0);
-                    Class<?> keyClazz = obj.getClass();
+                    Class<?> keyClazz = obj == null ? null : obj.getClass();
                     if (keyType instanceof Class) {
                         keyClazz = (Class<?>) keyType;
                     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationConfigBeanBuilder.java
Patch:
@@ -35,8 +35,11 @@
 
 /**
  * Abstract Configurable {@link Annotation} Bean Builder
+ *
  * @since 2.5.7
+ * @deprecated use {@link AnnotatedInterfaceConfigBeanBuilder}
  */
+@Deprecated
 abstract class AbstractAnnotationConfigBeanBuilder<A extends Annotation, B extends AbstractInterfaceConfig> {
 
     protected final Log logger = LogFactory.getLog(getClass());

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java
Patch:
@@ -65,7 +65,7 @@
 import static org.apache.dubbo.config.spring.util.ObjectUtils.of;
 import static org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition;
 import static org.springframework.context.annotation.AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR;
-import static org.springframework.core.annotation.AnnotationUtils.findAnnotation;
+import static org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotation;
 import static org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes;
 import static org.springframework.util.ClassUtils.resolveClassName;
 
@@ -306,9 +306,9 @@ private void registerServiceBean(BeanDefinitionHolder beanDefinitionHolder, Bean
      * @since 2.7.3
      */
     private Annotation findServiceAnnotation(Class<?> beanClass) {
-        Annotation service = findAnnotation(beanClass, Service.class);
+        Annotation service = findMergedAnnotation(beanClass, Service.class);
         if (service == null) {
-            service = findAnnotation(beanClass, com.alibaba.dubbo.config.annotation.Service.class);
+            service = findMergedAnnotation(beanClass, com.alibaba.dubbo.config.annotation.Service.class);
         }
         return service;
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceBeanNameBuilder.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.core.env.Environment;
 import org.springframework.util.StringUtils;
 
+import static org.apache.dubbo.config.spring.util.AnnotationUtils.getAttribute;
 import static org.apache.dubbo.config.spring.util.AnnotationUtils.resolveInterfaceName;
 import static org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes;
 
@@ -62,8 +63,8 @@ private ServiceBeanNameBuilder(String interfaceClassName, Environment environmen
 
     private ServiceBeanNameBuilder(AnnotationAttributes attributes, Class<?> defaultInterfaceClass, Environment environment) {
         this(resolveInterfaceName(attributes, defaultInterfaceClass), environment);
-        this.group(attributes.getString("group"));
-        this.version(attributes.getString("version"));
+        this.group(getAttribute(attributes,"group"));
+        this.version(getAttribute(attributes,"version"));
     }
 
     /**

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessorTest.java
Patch:
@@ -229,7 +229,7 @@ public DemoService getDemoService() {
             return demoService;
         }
 
-        @Reference(version = "2.5.7", url = "dubbo://127.0.0.1:12345")
+        @com.alibaba.dubbo.config.annotation.Reference(version = "2.5.7", url = "dubbo://127.0.0.1:12345")
         public void setDemoService(DemoService demoService) {
             this.demoService = demoService;
         }

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/context/annotation/provider/DefaultHelloService.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config.spring.context.context.annotation.provider;
 
+import org.apache.dubbo.config.spring.annotation.merged.MergedService;
 import org.apache.dubbo.config.spring.api.HelloService;
 
 import org.springframework.stereotype.Service;
@@ -27,7 +28,8 @@
  * @since TODO
  */
 @Service
-@org.apache.dubbo.config.annotation.Service
+//@org.apache.dubbo.config.annotation.Service
+@MergedService
 public class DefaultHelloService implements HelloService {
 
     @Override

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -742,7 +742,7 @@ private void loadClass(Map<String, Class<?>> extensionClasses, java.net.URL reso
                 cacheActivateClass(clazz, names[0]);
                 for (String n : names) {
                     cacheName(clazz, n);
-                    saveInExtensionClass(extensionClasses, clazz, name);
+                    saveInExtensionClass(extensionClasses, clazz, n);
                 }
             }
         }

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistryFactory.java
Patch:
@@ -24,7 +24,6 @@
 import com.alibaba.nacos.api.NacosFactory;
 import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.api.naming.NamingService;
-import com.alibaba.nacos.client.naming.utils.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -101,7 +100,7 @@ private void setProperties(URL url, Properties properties) {
 
     private void putPropertyIfAbsent(URL url, Properties properties, String propertyName) {
         String propertyValue = url.getParameter(propertyName);
-        if (StringUtils.isNotEmpty(propertyValue)) {
+        if (propertyValue != null && propertyValue.trim().length() != 0) {
             properties.setProperty(propertyName, propertyValue);
         }
     }

File: dubbo-metadata-report/dubbo-metadata-definition-protobuf/src/main/java/org/apache/dubbo/metadata/definition/protobuf/ProtobufTypeBuilder.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.serialize.protobuf.support;
+package org.apache.dubbo.metadata.definition.protobuf;
 
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Directory.java
Patch:
@@ -46,4 +46,6 @@ public interface Directory<T> extends Node {
      */
     List<Invoker<T>> list(Invocation invocation) throws RpcException;
 
+    List<Invoker<T>> getAllInvokers();
+
 }
\ No newline at end of file

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/AbstractRouter.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.rpc.cluster.router;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.rpc.cluster.Router;
 
 public abstract class AbstractRouter implements Router {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/AppRouter.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.rpc.cluster.router.condition.config;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.constants.CommonConstants;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
 
 /**
  * Application level router, "application.condition-router"

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/AppRouterFactory.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.rpc.cluster.router.condition.config;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.extension.Activate;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
 import org.apache.dubbo.rpc.cluster.Router;
 import org.apache.dubbo.rpc.cluster.RouterFactory;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ServiceRouter.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.rpc.cluster.router.condition.config;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 
 /**
  * Service level router, "server-unique-name.condition-router"

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ServiceRouterFactory.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.rpc.cluster.router.condition.config;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.extension.Activate;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
 import org.apache.dubbo.rpc.cluster.CacheableRouterFactory;
 import org.apache.dubbo.rpc.cluster.Router;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouterFactory.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.rpc.cluster.router.tag;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.extension.Activate;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
 import org.apache.dubbo.rpc.cluster.CacheableRouterFactory;
 import org.apache.dubbo.rpc.cluster.Router;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java
Patch:
@@ -155,7 +155,7 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {
 
                 for (Method method : ics[i].getMethods()) {
                     String desc = ReflectUtils.getDesc(method);
-                    if (worked.contains(desc)) {
+                    if (worked.contains(desc) || Modifier.isStatic(method.getModifiers())) {
                         continue;
                     }
                     worked.add(desc);

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/ConfigChangeEvent.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.configcenter;
+package org.apache.dubbo.common.config.configcenter;
 
 /**
  * Config change event, immutable.

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/ConfigChangeType.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.configcenter;
+package org.apache.dubbo.common.config.configcenter;
 
 /**
  * Config change event type

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/ConfigurationListener.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.configcenter;
+package org.apache.dubbo.common.config.configcenter;
 
 /**
  * Config listener, will get notified when the config it listens on changes.

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/Constants.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.configcenter;
+package org.apache.dubbo.common.config.configcenter;
 
 public interface Constants {
     String CONFIG_CLUSTER_KEY = "config.cluster";

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/DynamicConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.configcenter;
+package org.apache.dubbo.common.config.configcenter;
 
 import org.apache.dubbo.common.config.Configuration;
 import org.apache.dubbo.common.config.Environment;

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/DynamicConfigurationFactory.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.configcenter;
+package org.apache.dubbo.common.config.configcenter;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.SPI;

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/nop/NopDynamicConfigurationFactory.java
Patch:
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.configcenter.support.nop;
+package org.apache.dubbo.common.config.configcenter.nop;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.configcenter.AbstractDynamicConfigurationFactory;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
+import org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 
 /**
  *

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/common/Constants.java
Patch:
@@ -36,7 +36,7 @@ public class Constants implements CommonConstants,
         org.apache.dubbo.rpc.Constants,
         org.apache.dubbo.rpc.protocol.dubbo.Constants,
         org.apache.dubbo.common.serialize.Constants,
-        org.apache.dubbo.configcenter.Constants,
+        org.apache.dubbo.common.config.configcenter.Constants,
         org.apache.dubbo.metadata.support.Constants,
         org.apache.dubbo.rpc.protocol.rest.Constants,
         org.apache.dubbo.registry.Constants {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -114,9 +114,6 @@ public abstract class AbstractConfig implements Serializable {
         LEGACY_PROPERTIES.put("dubbo.consumer.retries", "dubbo.service.max.retry.providers");
         LEGACY_PROPERTIES.put("dubbo.consumer.check", "dubbo.service.allow.no.provider");
         LEGACY_PROPERTIES.put("dubbo.service.url", "dubbo.service.address");
-
-        // this is only for compatibility
-        DubboShutdownHook.getDubboShutdownHook().register();
     }
 
     /**

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -27,8 +27,8 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.rpc.Constants.SERVICE_FILTER_KEY;
 import static org.apache.dubbo.rpc.Constants.EXPORTER_LISTENER_KEY;
+import static org.apache.dubbo.rpc.Constants.SERVICE_FILTER_KEY;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 
 /**
@@ -206,7 +206,7 @@ public List<ProtocolConfig> getProtocols() {
 
     @SuppressWarnings({"unchecked"})
     public void setProtocols(List<? extends ProtocolConfig> protocols) {
-        ConfigManager.getInstance().addProtocols((List<ProtocolConfig>) protocols);
+        ConfigManager.getInstance().addProtocols((List<ProtocolConfig>) protocols, false);
         this.protocols = (List<ProtocolConfig>) protocols;
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporter.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.ServiceConfig;
 import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.metadata.LocalMetadataService;
 import org.apache.dubbo.metadata.MetadataService;
 import org.apache.dubbo.metadata.MetadataServiceExporter;
+import org.apache.dubbo.metadata.WritableMetadataService;
 
 import java.util.Collection;
 import java.util.LinkedList;
@@ -79,7 +79,7 @@ public List<URL> export() {
 
         if (!isExported()) {
 
-            LocalMetadataService metadataService = LocalMetadataService.getDefaultExtension();
+            WritableMetadataService metadataService = WritableMetadataService.getDefaultExtension();
 
             ServiceConfig<MetadataService> serviceConfig = new ServiceConfig<>();
             serviceConfig.setApplication(applicationConfig);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/telnet/ShutdownTelnetHandler.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.rpc.protocol.dubbo.telnet;
+package org.apache.dubbo.config.telnet;
 
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.utils.StringUtils;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/metadata/ConfigurableMetadataServiceExporterTest.java
Patch:
@@ -49,9 +49,9 @@ public static void init() {
         configManager.setApplication(applicationConfig);
 
         // Add ProtocolConfig
-        configManager.addProtocol(protocolConfig());
+        configManager.addProtocol(protocolConfig(), true);
         // Add RegistryConfig
-        configManager.addRegistry(registryConfig());
+        configManager.addRegistry(registryConfig(), true);
     }
 
     private static ProtocolConfig protocolConfig() {

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/service/DemoException.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.dubbo.rpc.service;
+package org.apache.dubbo.config.service;
 
 /**
  * DemoException

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/service/DemoService.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.dubbo.rpc.service;
+package org.apache.dubbo.config.service;
 
 import java.util.List;
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/service/DemoServiceImpl.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.dubbo.rpc.service;
+package org.apache.dubbo.config.service;
 
 import java.util.List;
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/service/User.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.dubbo.rpc.service;
+package org.apache.dubbo.config.service;
 
 import java.io.Serializable;
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/telnet/ShutdownTelnetHandlerTest.java
Patch:
@@ -14,11 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.rpc.protocol.dubbo.telnet;
+package org.apache.dubbo.config.telnet;
 
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.telnet.TelnetHandler;
+
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/validation/ValidationParameter.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.dubbo.rpc.validation;
+package org.apache.dubbo.config.validation;
 
 import javax.validation.constraints.Future;
 import javax.validation.constraints.Max;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/validation/ValidationService.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.dubbo.rpc.validation;
+package org.apache.dubbo.config.validation;
 
 import org.apache.dubbo.validation.MethodValidated;
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/validation/ValidationServiceImpl.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.dubbo.rpc.validation;
+package org.apache.dubbo.config.validation;
 
 /**
  * ValidationServiceImpl

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/validation/ValidationTest.java
Patch:
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.dubbo.rpc.validation;
+package org.apache.dubbo.config.validation;
 
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ProtocolConfig;

File: dubbo-configcenter/dubbo-configcenter-apollo/src/main/java/org/apache/dubbo/configcenter/support/apollo/ApolloDynamicConfigurationFactory.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.configcenter.support.apollo;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.configcenter.AbstractDynamicConfigurationFactory;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
+import org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 
 /**
  *

File: dubbo-configcenter/dubbo-configcenter-consul/src/main/java/org/apache/dubbo/configcenter/consul/ConsulDynamicConfigurationFactory.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.dubbo.configcenter.consul;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.configcenter.AbstractDynamicConfigurationFactory;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
+import org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 
 /**
  * Config center factory for consul

File: dubbo-configcenter/dubbo-configcenter-etcd/src/main/java/org/apache/dubbo/configcenter/support/etcd/EtcdDynamicConfigurationFactory.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.dubbo.configcenter.support.etcd;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.configcenter.AbstractDynamicConfigurationFactory;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
+import org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 
 /**
  * The etcd implementation of {@link AbstractDynamicConfigurationFactory}

File: dubbo-configcenter/dubbo-configcenter-etcd/src/test/java/org/apache/dubbo/configcenter/support/etcd/EtcdDynamicConfigurationTest.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.dubbo.configcenter.support.etcd;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.configcenter.ConfigChangeEvent;
-import org.apache.dubbo.configcenter.ConfigurationListener;
+import org.apache.dubbo.common.config.configcenter.ConfigChangeEvent;
+import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 
 import io.etcd.jetcd.ByteSequence;
 import io.etcd.jetcd.Client;

File: dubbo-configcenter/dubbo-configcenter-nacos/src/main/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfigurationFactory.java
Patch:
@@ -18,9 +18,9 @@
 package org.apache.dubbo.configcenter.support.nacos;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.constants.CommonConstants;
-import org.apache.dubbo.configcenter.AbstractDynamicConfigurationFactory;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
 
 import com.alibaba.nacos.api.PropertyKeyConst;
 

File: dubbo-configcenter/dubbo-configcenter-nacos/src/test/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfigurationTest.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.dubbo.configcenter.support.nacos;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.configcenter.ConfigChangeEvent;
-import org.apache.dubbo.configcenter.ConfigurationListener;
+import org.apache.dubbo.common.config.configcenter.ConfigChangeEvent;
+import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/CacheListener.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.dubbo.configcenter.support.zookeeper;
 
+import org.apache.dubbo.common.config.configcenter.ConfigChangeEvent;
+import org.apache.dubbo.common.config.configcenter.ConfigChangeType;
+import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.configcenter.ConfigChangeEvent;
-import org.apache.dubbo.configcenter.ConfigChangeType;
-import org.apache.dubbo.configcenter.ConfigurationListener;
 import org.apache.dubbo.remoting.zookeeper.DataListener;
 import org.apache.dubbo.remoting.zookeeper.EventType;
 

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfiguration.java
Patch:
@@ -17,10 +17,10 @@
 package org.apache.dubbo.configcenter.support.zookeeper;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.configcenter.ConfigurationListener;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
 import org.apache.dubbo.remoting.zookeeper.ZookeeperClient;
 import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
 
@@ -36,8 +36,8 @@
 
 import static java.util.Collections.emptySortedSet;
 import static java.util.Collections.unmodifiableSortedSet;
+import static org.apache.dubbo.common.config.configcenter.Constants.CONFIG_NAMESPACE_KEY;
 import static org.apache.dubbo.common.utils.CollectionUtils.isEmpty;
-import static org.apache.dubbo.configcenter.Constants.CONFIG_NAMESPACE_KEY;
 
 /**
  *

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationFactory.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.configcenter.support.zookeeper;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.configcenter.AbstractDynamicConfigurationFactory;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
+import org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
 
 /**

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/DynamicConfigurationServiceNameMapping.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.dubbo.metadata;
 
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import java.util.Collections;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/model/MethodDefinition.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.metadata.definition.model;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -24,7 +25,7 @@
 /**
  * 2015/1/27.
  */
-public class MethodDefinition {
+public class MethodDefinition implements Serializable {
 
     private String name;
     private String[] parameterTypes;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/model/ServiceDefinition.java
Patch:
@@ -16,14 +16,15 @@
  */
 package org.apache.dubbo.metadata.definition.model;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
 
 /**
  * 2015/1/27.
  */
-public class ServiceDefinition {
+public class ServiceDefinition implements Serializable {
 
     private String canonicalName;
     private String codeSource;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/model/TypeDefinition.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.gson.annotations.SerializedName;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -27,7 +28,7 @@
 /**
  * 2015/1/27.
  */
-public class TypeDefinition {
+public class TypeDefinition implements Serializable {
 
     private String id;
     private String type;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/MetadataReportFactory.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metadata.store;
+package org.apache.dubbo.metadata.report;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.Adaptive;

File: dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/report/support/Constants.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.metadata.support;
+package org.apache.dubbo.metadata.report.support;
 
 public interface Constants {
     String METADATA_REPORT_KEY = "metadata";

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/DynamicConfigurationServiceNameMappingTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.Environment;
+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;
+import org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory;
 import org.apache.dubbo.common.utils.NetUtils;
-import org.apache.dubbo.configcenter.DynamicConfiguration;
-import org.apache.dubbo.configcenter.DynamicConfigurationFactory;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 
 import org.apache.curator.framework.CuratorFramework;

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/store/InterfaceNameTestService.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metadata.integration;
+package org.apache.dubbo.metadata.store;
 
 /**
  * 2018/9/19

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/store/InterfaceNameTestService2.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metadata.integration;
+package org.apache.dubbo.metadata.store;
 
 /**
  * 2018/9/19

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/store/RetryTestService.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metadata.integration;
+package org.apache.dubbo.metadata.store;
 
 /**
  * 2018/10/26

File: dubbo-metadata/dubbo-metadata-api/src/test/java/org/apache/dubbo/metadata/test/JTestMetadataReportFactory4Test.java
Patch:
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.metadata.store.test;
+package org.apache.dubbo.metadata.test;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.store.MetadataReport;
-import org.apache.dubbo.metadata.support.AbstractMetadataReportFactory;
+import org.apache.dubbo.metadata.report.MetadataReport;
+import org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory;
 
 /**
  * ZookeeperRegistryFactory.

File: dubbo-metadata/dubbo-metadata-report/dubbo-metadata-report-consul/src/main/java/org/apache/dubbo/metadata/store/consul/ConsulMetadataReportFactory.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.dubbo.metadata.store.consul;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.store.MetadataReport;
-import org.apache.dubbo.metadata.support.AbstractMetadataReportFactory;
+import org.apache.dubbo.metadata.report.MetadataReport;
+import org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory;
 
 /**
  * metadata report factory impl for consul

File: dubbo-metadata/dubbo-metadata-report/dubbo-metadata-report-etcd/src/main/java/org/apache/dubbo/metadata/store/etcd/EtcdMetadataReportFactory.java
Patch:
@@ -34,8 +34,8 @@
 package org.apache.dubbo.metadata.store.etcd;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.store.MetadataReport;
-import org.apache.dubbo.metadata.support.AbstractMetadataReportFactory;
+import org.apache.dubbo.metadata.report.MetadataReport;
+import org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory;
 
 /**
  * MetadataReportFactory to create an Etcd based {@link MetadataReport}.

File: dubbo-metadata/dubbo-metadata-report/dubbo-metadata-report-etcd/src/test/java/org/apache/dubbo/metadata/store/etcd/EtcdMetadataReportTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder;
 import org.apache.dubbo.metadata.definition.model.FullServiceDefinition;
-import org.apache.dubbo.metadata.identifier.MetadataIdentifier;
+import org.apache.dubbo.metadata.report.identifier.MetadataIdentifier;
 
 import com.google.gson.Gson;
 import io.etcd.jetcd.ByteSequence;

File: dubbo-metadata/dubbo-metadata-report/dubbo-metadata-report-nacos/src/main/java/org/apache/dubbo/metadata/store/nacos/NacosMetadataReportFactory.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.dubbo.metadata.store.nacos;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.store.MetadataReport;
-import org.apache.dubbo.metadata.support.AbstractMetadataReportFactory;
+import org.apache.dubbo.metadata.report.MetadataReport;
+import org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory;
 
 /**
  * metadata report factory impl for nacos

File: dubbo-metadata/dubbo-metadata-report/dubbo-metadata-report-nacos/src/test/java/org/apache/dubbo/metadata/store/nacos/NacosMetadataReportTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder;
 import org.apache.dubbo.metadata.definition.model.FullServiceDefinition;
-import org.apache.dubbo.metadata.identifier.MetadataIdentifier;
+import org.apache.dubbo.metadata.report.identifier.MetadataIdentifier;
 
 import com.alibaba.nacos.api.config.ConfigService;
 import com.google.gson.Gson;

File: dubbo-metadata/dubbo-metadata-report/dubbo-metadata-report-redis/src/main/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReportFactory.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.metadata.store.redis;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.store.MetadataReport;
-import org.apache.dubbo.metadata.support.AbstractMetadataReportFactory;
+import org.apache.dubbo.metadata.report.MetadataReport;
+import org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory;
 
 /**
  * RedisMetadataReportFactory.

File: dubbo-metadata/dubbo-metadata-report/dubbo-metadata-report-redis/src/test/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReportTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder;
 import org.apache.dubbo.metadata.definition.model.FullServiceDefinition;
-import org.apache.dubbo.metadata.identifier.MetadataIdentifier;
+import org.apache.dubbo.metadata.report.identifier.MetadataIdentifier;
 import org.apache.dubbo.rpc.RpcException;
 
 import com.google.gson.Gson;
@@ -40,7 +40,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER_SIDE;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
-import static org.apache.dubbo.metadata.support.Constants.SYNC_REPORT_KEY;
+import static org.apache.dubbo.metadata.report.support.Constants.SYNC_REPORT_KEY;
 
 /**
  * 2018/10/9

File: dubbo-metadata/dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/main/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportFactory.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.metadata.store.zookeeper;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.store.MetadataReport;
-import org.apache.dubbo.metadata.support.AbstractMetadataReportFactory;
+import org.apache.dubbo.metadata.report.MetadataReport;
+import org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory;
 import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
 
 /**

File: dubbo-metadata/dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/test/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder;
 import org.apache.dubbo.metadata.definition.model.FullServiceDefinition;
-import org.apache.dubbo.metadata.identifier.MetadataIdentifier;
+import org.apache.dubbo.metadata.report.identifier.MetadataIdentifier;
 import org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter;
 
 import com.google.gson.Gson;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ExportedServicesRevisionMetadataCustomizer.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.compiler.support.ClassUtils;
-import org.apache.dubbo.metadata.LocalMetadataService;
 import org.apache.dubbo.metadata.MetadataService;
+import org.apache.dubbo.metadata.WritableMetadataService;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstanceMetadataCustomizer;
 
@@ -47,8 +47,8 @@ protected String buildMetadataKey(ServiceInstance serviceInstance) {
 
     @Override
     protected String buildMetadataValue(ServiceInstance serviceInstance) {
-        LocalMetadataService localMetadataService = LocalMetadataService.getDefaultExtension();
-        List<String> exportedURLs = localMetadataService.getExportedURLs();
+        WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension();
+        List<String> exportedURLs = writableMetadataService.getExportedURLs();
         Object[] data = exportedURLs.stream()
                 .map(URL::valueOf)                       // String to URL
                 .map(URL::getServiceInterface)           // get the service interface

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceURLParamsMetadataCustomizer.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.registry.client.metadata;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.LocalMetadataService;
 import org.apache.dubbo.metadata.MetadataService;
+import org.apache.dubbo.metadata.WritableMetadataService;
 import org.apache.dubbo.registry.client.ServiceInstance;
 import org.apache.dubbo.registry.client.ServiceInstanceMetadataCustomizer;
 
@@ -45,15 +45,15 @@ public String buildMetadataKey(ServiceInstance serviceInstance) {
     @Override
     public String buildMetadataValue(ServiceInstance serviceInstance) {
 
-        LocalMetadataService localMetadataService = LocalMetadataService.getDefaultExtension();
+        WritableMetadataService writableMetadataService = WritableMetadataService.getDefaultExtension();
 
         String serviceInterface = MetadataService.class.getName();
 
         String group = serviceInstance.getServiceName();
 
         String version = MetadataService.VERSION;
 
-        List<String> urls = localMetadataService.getExportedURLs(serviceInterface, group, version);
+        List<String> urls = writableMetadataService.getExportedURLs(serviceInterface, group, version);
 
         return getMetadataServiceParameter(toURLs(urls));
     }

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/support/ServiceOrientedRegistryTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.registry.support;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.metadata.LocalMetadataService;
+import org.apache.dubbo.metadata.WritableMetadataService;
 import org.apache.dubbo.registry.NotifyListener;
 
 import org.junit.jupiter.api.BeforeEach;
@@ -66,7 +66,7 @@ public class ServiceOrientedRegistryTest {
 
     private static URL url2 = url.setProtocol("rest");
 
-    private LocalMetadataService metadataService;
+    private WritableMetadataService metadataService;
 
     private ServiceOrientedRegistry registry;
 
@@ -75,7 +75,7 @@ public class ServiceOrientedRegistryTest {
     @BeforeEach
     public void init() {
         registry = ServiceOrientedRegistry.create(registryURL);
-        metadataService = LocalMetadataService.getDefaultExtension();
+        metadataService = WritableMetadataService.getDefaultExtension();
         notifyListener = new MyNotifyListener();
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/invoker/ProviderInvokerWrapper.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.registry.support;
+package org.apache.dubbo.rpc.model.invoker;
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.rpc.Invocation;
@@ -32,7 +32,7 @@ public class ProviderInvokerWrapper<T> implements Invoker {
     private URL providerUrl;
     private volatile boolean isReg;
 
-    public ProviderInvokerWrapper(Invoker<T> invoker,URL registryUrl,URL providerUrl) {
+    public ProviderInvokerWrapper(Invoker<T> invoker, URL registryUrl, URL providerUrl) {
         this.invoker = invoker;
         this.originUrl = URL.valueOf(invoker.getUrl().toFullString());
         this.registryUrl = URL.valueOf(registryUrl.toFullString());

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/InvokeTelnetHandler.java
Patch:
@@ -152,7 +152,7 @@ public String telnet(Channel channel, String message) {
 
 
     private boolean isServiceMatch(String service, ProviderModel provider) {
-        return provider.getServiceName().equalsIgnoreCase(service)
+        return provider.getServiceKey().equalsIgnoreCase(service)
                 || provider.getServiceInterfaceClass().getSimpleName().equalsIgnoreCase(service)
                 || provider.getServiceInterfaceClass().getName().equalsIgnoreCase(service)
                 || StringUtils.isEmpty(service);

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/FutureFilterTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import static org.apache.dubbo.config.Constants.ON_THROW_METHOD_KEY;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
@@ -77,7 +76,7 @@ public void testSyncCallbackHasException() throws RpcException, Throwable {
             AppResponse result = new AppResponse();
             result.setException(new RuntimeException());
             given(invoker.invoke(invocation)).willReturn(result);
-            URL url = URL.valueOf("test://test:11/test?group=dubbo&version=1.1&" + ON_THROW_METHOD_KEY + "=echo");
+            URL url = URL.valueOf("test://test:11/test?group=dubbo&version=1.1&onthrow.method=echo");
             given(invoker.getUrl()).willReturn(url);
 
             eventFilter.invoke(invoker, invocation).recreate();

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/HelloServiceImpl.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.dubbo.config.spring.context.annotation.provider;
 
-import org.apache.dubbo.config.annotation.Service;
 import org.apache.dubbo.config.spring.api.HelloService;
 
+import com.alibaba.dubbo.config.annotation.Service;
+
 /**
  * {@link HelloService} Implementation just annotating Dubbo's {@link Service}
  *

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/context/annotation/provider/ProviderConfiguration.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.config.spring.context.annotation.DubboComponentScan;
 
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Primary;
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.transaction.PlatformTransactionManager;
@@ -30,7 +31,8 @@
 import org.springframework.transaction.TransactionStatus;
 import org.springframework.transaction.annotation.EnableTransactionManagement;
 
-@DubboComponentScan(basePackages = "org.apache.dubbo.config.spring.context.annotation.provider")
+@DubboComponentScan(basePackages = "org.apache.dubbo")
+@ComponentScan(basePackages = "org.apache.dubbo")
 @PropertySource("META-INF/default.properties")
 @EnableTransactionManagement
 public class ProviderConfiguration {

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistryFactory.java
Patch:
@@ -17,14 +17,14 @@
 package org.apache.dubbo.registry.nacos;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.registry.RegistryFactory;
 import org.apache.dubbo.registry.support.AbstractRegistryFactory;
 
 import com.alibaba.nacos.api.NacosFactory;
 import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.api.naming.NamingService;
-import com.alibaba.nacos.client.naming.utils.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/FutureAdapter.java
Patch:
@@ -90,4 +90,7 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, Execution
         }
     }
 
+    public CompletableFuture<AppResponse> getAppResponseFuture() {
+        return appResponseFuture;
+    }
 }

File: dubbo-remoting/dubbo-remoting-mina/src/test/java/org/apache/remoting/transport/mina/ClientToServerTest.java
Patch:
@@ -65,7 +65,7 @@ protected void tearDown() {
 
     @Test
     public void testFuture() throws Exception {
-        CompletableFuture<Object> future = client.request(new World("world"), new CompletableFuture());
+        CompletableFuture<Object> future = client.request(new World("world"));
         Hello result = (Hello) future.get();
         Assertions.assertEquals("hello,world", result.getName());
     }

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/ClientToServerTest.java
Patch:
@@ -64,7 +64,7 @@ protected void tearDown() throws Exception {
 
     @Test
     public void testFuture() throws Exception {
-        CompletableFuture<Object> future = client.request(new World("world"), new CompletableFuture());
+        CompletableFuture<Object> future = client.request(new World("world"));
         Hello result = (Hello) future.get();
         Assertions.assertEquals("hello,world", result.getName());
     }

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/ClientToServerTest.java
Patch:
@@ -65,7 +65,7 @@ protected void tearDown() {
 
     @Test
     public void testFuture() throws Exception {
-        CompletableFuture<Object> future = client.request(new World("world"), new CompletableFuture());
+        CompletableFuture<Object> future = client.request(new World("world"));
         Hello result = (Hello) future.get();
         Assertions.assertEquals("hello,world", result.getName());
     }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.Set;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.locks.ReentrantLock;
 
@@ -97,7 +98,8 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
                 AsyncRpcResult asyncRpcResult = new AsyncRpcResult(inv);
                 ExecutorService executor = getCallbackExecutor(getUrl(), inv);
                 asyncRpcResult.setExecutor(executor);
-                currentClient.request(inv, timeout, executor, asyncRpcResult);
+                CompletableFuture<Object> responseFuture = currentClient.request(inv, timeout, executor);
+                asyncRpcResult.subscribeTo(responseFuture);
                 return asyncRpcResult;
             }
         } catch (TimeoutException e) {

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftInvoker.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dubbo.rpc.protocol.AbstractInvoker;
 
 import java.util.Set;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.locks.ReentrantLock;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
@@ -92,7 +93,8 @@ protected Result doInvoke(Invocation invocation) throws Throwable {
             int timeout = getUrl().getMethodParameter(methodName, TIMEOUT_KEY, DEFAULT_TIMEOUT);
 
             AsyncRpcResult asyncRpcResult = new AsyncRpcResult(invocation);
-            currentClient.request(inv, timeout, asyncRpcResult);
+            CompletableFuture<Object> responseFuture = currentClient.request(inv, timeout);
+            asyncRpcResult.subscribeTo(responseFuture);
             return asyncRpcResult;
         } catch (TimeoutException e) {
             throw new RpcException(RpcException.TIMEOUT_EXCEPTION, e.getMessage(), e);

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodecTest.java
Patch:
@@ -40,7 +40,6 @@
 import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayInputStream;
-import java.util.concurrent.CompletableFuture;
 
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
@@ -134,7 +133,7 @@ public void testDecodeReplyResponse() throws Exception {
 
         Request request = createRequest();
 
-        DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null, new CompletableFuture());
+        DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null);
 
         TMessage message = new TMessage("echoString", TMessageType.REPLY, ThriftCodec.getSeqId());
 
@@ -211,7 +210,7 @@ public void testDecodeExceptionResponse() throws Exception {
 
         Request request = createRequest();
 
-        DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null, new CompletableFuture());
+        DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null);
 
         TMessage message = new TMessage("echoString", TMessageType.EXCEPTION, ThriftCodec.getSeqId());
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java
Patch:
@@ -237,12 +237,12 @@ private static void deserializeInternal(Object result, JavaBeanDescriptor beanDe
             for (Map.Entry<Object, Object> entry : beanDescriptor) {
                 Object key = entry.getKey();
                 Object value = entry.getValue();
-                if (key != null && key instanceof JavaBeanDescriptor) {
+                if (key instanceof JavaBeanDescriptor) {
                     JavaBeanDescriptor keyDescriptor = (JavaBeanDescriptor) entry.getKey();
                     key = instantiateForDeserialize(keyDescriptor, loader, cache);
                     deserializeInternal(key, keyDescriptor, loader, cache);
                 }
-                if (value != null && value instanceof JavaBeanDescriptor) {
+                if (value instanceof JavaBeanDescriptor) {
                     JavaBeanDescriptor valueDescriptor = (JavaBeanDescriptor) entry.getValue();
                     value = instantiateForDeserialize(valueDescriptor, loader, cache);
                     deserializeInternal(value, valueDescriptor, loader, cache);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/ProviderInvokerWrapper.java
Patch:
@@ -90,7 +90,7 @@ public void setReg(boolean reg) {
 
     @Override
     public boolean equals(Object o) {
-        if (o == null || !(o instanceof ProviderInvokerWrapper)) {
+        if (!(o instanceof ProviderInvokerWrapper)) {
             return false;
         }
         ProviderInvokerWrapper other = (ProviderInvokerWrapper) o;

File: dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyHelper.java
Patch:
@@ -27,7 +27,7 @@ final class NettyHelper {
 
     public static void setNettyLoggerFactory() {
         InternalLoggerFactory factory = InternalLoggerFactory.getDefaultFactory();
-        if (factory == null || !(factory instanceof DubboLoggerFactory)) {
+        if (!(factory instanceof DubboLoggerFactory)) {
             InternalLoggerFactory.setDefaultFactory(new DubboLoggerFactory());
         }
     }

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/decode/DubboTelnetDecodeTest.java
Patch:
@@ -452,7 +452,7 @@ private ByteBuf createDubboByteBuf() throws IOException {
     }
 
     private static boolean checkTelnetDecoded(Object msg) {
-        if (msg != null && msg instanceof String && !msg.toString().contains("Unsupported command:")) {
+        if (msg instanceof String && !msg.toString().contains("Unsupported command:")) {
             return true;
         }
         return false;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java
Patch:
@@ -366,7 +366,7 @@ private static Object realize0(Object pojo, Class<?> type, Type genericType, fin
                 history.put(pojo, dest);
                 for (Object obj : src) {
                     Type keyType = getGenericClassByIndex(genericType, 0);
-                    Class<?> keyClazz = obj.getClass();
+                    Class<?> keyClazz = obj == null ? null : obj.getClass();
                     if (keyType instanceof Class) {
                         keyClazz = (Class<?>) keyType;
                     }

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/support/expiring/ExpiringMap.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
 /**
@@ -40,7 +41,7 @@ public class ExpiringMap<K, V> implements Map<K, V> {
      */
     private static final int DEFAULT_EXPIRATION_INTERVAL = 1;
 
-    private static volatile int expireCount = 1;
+    private static AtomicInteger expireCount = new AtomicInteger(1);
 
     private final ConcurrentHashMap<K, ExpiryObject> delegateMap;
 
@@ -263,7 +264,7 @@ public String toString() {
         }
 
         public ExpireThread() {
-            expirerThread = new Thread(this, "ExpiryMapExpire-" + expireCount++);
+            expirerThread = new Thread(this, "ExpiryMapExpire-" + expireCount.getAndIncrement());
             expirerThread.setDaemon(true);
         }
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java
Patch:
@@ -50,7 +50,7 @@ public <T> List<Invoker<T>> route(final List<Invoker<T>> invokers,
         if (invocation.getAttachments() == null) {
             return getNormalInvokers(invokers);
         } else {
-            String value = invocation.getAttachments().get(Constants.INVOCATION_NEED_MOCK);
+            String value = (String) invocation.getAttachments().get(Constants.INVOCATION_NEED_MOCK);
             if (value == null) {
                 return getNormalInvokers(invokers);
             } else if (Boolean.TRUE.toString().equalsIgnoreCase(value)) {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -147,15 +147,15 @@ public void testBindingAttachment() {
 
         // setup attachment
         RpcContext.getContext().setAttachment(attachKey, attachValue);
-        Map<String, String> attachments = RpcContext.getContext().getAttachments();
+        Map<String, Object> attachments = RpcContext.getContext().getAttachments();
         Assertions.assertTrue( attachments != null && attachments.size() == 1,"set attachment failed!");
 
         cluster = new AbstractClusterInvoker(dic) {
             @Override
             protected Result doInvoke(Invocation invocation, List invokers, LoadBalance loadbalance)
                     throws RpcException {
                 // attachment will be bind to invocation
-                String value = invocation.getAttachment(attachKey);
+                String value = (String) invocation.getAttachment(attachKey);
                 Assertions.assertTrue(value != null && value.equals(attachValue),"binding attachment failed!");
                 return null;
             }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvokerTest.java
Patch:
@@ -106,7 +106,7 @@ public void testGetMenuSuccessfully() throws Exception {
         given(invocation.getMethodName()).willReturn("getMenu");
         given(invocation.getParameterTypes()).willReturn(new Class<?>[]{});
         given(invocation.getArguments()).willReturn(new Object[]{});
-        given(invocation.getAttachments()).willReturn(new HashMap<String, String>())
+        given(invocation.getAttachments()).willReturn(new HashMap<String, Object>())
                 ;
         given(invocation.getInvoker()).willReturn(firstInvoker);
 
@@ -189,7 +189,7 @@ public void testAddMenu() throws Exception {
                 new Class<?>[]{String.class, List.class});
         given(invocation.getArguments()).willReturn(new Object[]{menu, menuItems})
                 ;
-        given(invocation.getAttachments()).willReturn(new HashMap<String, String>())
+        given(invocation.getAttachments()).willReturn(new HashMap<String, Object>())
                 ;
         given(invocation.getInvoker()).willReturn(firstInvoker);
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/cache/CacheTest.java
Patch:
@@ -65,17 +65,17 @@ public Object[] getArguments() {
         }
 
         @Override
-        public Map<String, String> getAttachments() {
+        public Map<String, Object> getAttachments() {
             return null;
         }
 
         @Override
-        public String getAttachment(String key) {
+        public Object getAttachment(String key) {
             return null;
         }
 
         @Override
-        public String getAttachment(String key, String defaultValue) {
+        public Object getAttachment(String key, Object defaultValue) {
             return null;
         }
 

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/RpcContextTest.java
Patch:
@@ -86,7 +86,7 @@ public void testCheckSide() {
     public void testAttachments() {
 
         RpcContext context = RpcContext.getContext();
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, Object> map = new HashMap<String, Object>();
         map.put("_11", "1111");
         map.put("_22", "2222");
         map.put(".33", "3333");

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/TokenFilterTest.java
Patch:
@@ -47,7 +47,7 @@ public void testInvokeWithToken() throws Exception {
         when(invoker.getUrl()).thenReturn(url);
         when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse("result"));
 
-        Map<String, String> attachments = new HashMap<String, String>();
+        Map<String, Object> attachments = new HashMap<String, Object>();
         attachments.put(Constants.TOKEN_KEY, token);
         Invocation invocation = Mockito.mock(Invocation.class);
         when(invocation.getAttachments()).thenReturn(attachments);
@@ -66,7 +66,7 @@ public void testInvokeWithWrongToken() throws Exception {
             when(invoker.getUrl()).thenReturn(url);
             when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse("result"));
 
-            Map<String, String> attachments = new HashMap<String, String>();
+            Map<String, Object> attachments = new HashMap<String, Object>();
             attachments.put(Constants.TOKEN_KEY, "wrongToken");
             Invocation invocation = Mockito.mock(Invocation.class);
             when(invocation.getAttachments()).thenReturn(attachments);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
Patch:
@@ -281,14 +281,14 @@ public static Object decodeInvocationArgument(Channel channel, RpcInvocation inv
                 return inObject;
             case CallbackServiceCodec.CALLBACK_CREATE:
                 try {
-                    return referOrDestroyCallbackService(channel, url, pts[paraIndex], inv, Integer.parseInt(inv.getAttachment(INV_ATT_CALLBACK_KEY + paraIndex)), true);
+                    return referOrDestroyCallbackService(channel, url, pts[paraIndex], inv, Integer.parseInt((String) inv.getAttachment(INV_ATT_CALLBACK_KEY + paraIndex)), true);
                 } catch (Exception e) {
                     logger.error(e.getMessage(), e);
                     throw new IOException(StringUtils.toString(e));
                 }
             case CallbackServiceCodec.CALLBACK_DESTROY:
                 try {
-                    return referOrDestroyCallbackService(channel, url, pts[paraIndex], inv, Integer.parseInt(inv.getAttachment(INV_ATT_CALLBACK_KEY + paraIndex)), false);
+                    return referOrDestroyCallbackService(channel, url, pts[paraIndex], inv, Integer.parseInt((String) inv.getAttachment(INV_ATT_CALLBACK_KEY + paraIndex)), false);
                 } catch (Exception e) {
                     throw new IOException(StringUtils.toString(e));
                 }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java
Patch:
@@ -122,9 +122,9 @@ public Object decode(Channel channel, InputStream input) throws IOException {
 
             Map<String, String> map = (Map<String, String>) in.readObject(Map.class);
             if (map != null && map.size() > 0) {
-                Map<String, String> attachment = getAttachments();
+                Map<String, Object> attachment = getAttachments();
                 if (attachment == null) {
-                    attachment = new HashMap<String, String>();
+                    attachment = new HashMap<String, Object>();
                 }
                 attachment.putAll(map);
                 setAttachments(attachment);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java
Patch:
@@ -154,7 +154,7 @@ private void handleException(ObjectInput in) throws IOException {
 
     private void handleAttachment(ObjectInput in) throws IOException {
         try {
-            setAttachments((Map<String, String>) in.readObject(Map.class));
+            setAttachments((Map<String, Object>) in.readObject(Map.class));
         } catch (ClassNotFoundException e) {
             rethrow(e);
         }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -173,8 +173,8 @@ protected void encodeRequestData(Channel channel, ObjectOutput out, Object data,
         RpcInvocation inv = (RpcInvocation) data;
 
         out.writeUTF(version);
-        out.writeUTF(inv.getAttachment(Constants.PATH_KEY));
-        out.writeUTF(inv.getAttachment(Constants.VERSION_KEY));
+        out.writeUTF((String) inv.getAttachment(Constants.PATH_KEY));
+        out.writeUTF((String) inv.getAttachment(Constants.VERSION_KEY));
 
         out.writeUTF(inv.getMethodName());
         out.writeUTF(ReflectUtils.getDesc(inv.getParameterTypes()));

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -218,7 +218,7 @@ Invoker<?> getInvoker(Channel channel, Invocation inv) throws RemotingException
         boolean isCallBackServiceInvoke = false;
         boolean isStubServiceInvoke = false;
         int port = channel.getLocalAddress().getPort();
-        String path = inv.getAttachments().get(Constants.PATH_KEY);
+        String path = (String) inv.getAttachments().get(Constants.PATH_KEY);
 
         // if it's callback service on client side
         isStubServiceInvoke = Boolean.TRUE.toString().equals(inv.getAttachments().get(Constants.STUB_EVENT_KEY));
@@ -233,7 +233,7 @@ Invoker<?> getInvoker(Channel channel, Invocation inv) throws RemotingException
             inv.getAttachments().put(IS_CALLBACK_SERVICE_INVOKE, Boolean.TRUE.toString());
         }
 
-        String serviceKey = serviceKey(port, path, inv.getAttachments().get(Constants.VERSION_KEY), inv.getAttachments().get(Constants.GROUP_KEY));
+        String serviceKey = serviceKey(port, path, (String) inv.getAttachments().get(Constants.VERSION_KEY), (String) inv.getAttachments().get(Constants.GROUP_KEY));
         DubboExporter<?> exporter = (DubboExporter<?>) exporterMap.get(serviceKey);
 
         if (exporter == null) {

File: dubbo-rpc/dubbo-rpc-hessian/src/main/java/org/apache/dubbo/rpc/protocol/hessian/DubboHessianURLConnectionFactory.java
Patch:
@@ -33,7 +33,7 @@ public HessianConnection open(URL url) throws IOException {
         HessianConnection connection = super.open(url);
         RpcContext context = RpcContext.getContext();
         for (String key : context.getAttachments().keySet()) {
-            connection.addHeader(Constants.DEFAULT_EXCHANGER + key, context.getAttachment(key));
+            connection.addHeader(Constants.DEFAULT_EXCHANGER + key, (String) context.getAttachment(key));
         }
 
         return connection;

File: dubbo-rpc/dubbo-rpc-http/src/main/java/org/apache/dubbo/rpc/protocol/http/HttpRemoteInvocation.java
Patch:
@@ -35,14 +35,14 @@ public class HttpRemoteInvocation extends RemoteInvocation {
 
     public HttpRemoteInvocation(MethodInvocation methodInvocation) {
         super(methodInvocation);
-        addAttribute(dubboAttachmentsAttrName, new HashMap<String, String>(RpcContext.getContext().getAttachments()));
+        addAttribute(dubboAttachmentsAttrName, new HashMap<String, Object>(RpcContext.getContext().getAttachments()));
     }
 
     @Override
     public Object invoke(Object targetObject) throws NoSuchMethodException, IllegalAccessException,
             InvocationTargetException {
         RpcContext context = RpcContext.getContext();
-        context.setAttachments((Map<String, String>) getAttribute(dubboAttachmentsAttrName));
+        context.setAttachments((Map<String, Object>) getAttribute(dubboAttachmentsAttrName));
 
         String generic = (String) getAttribute(Constants.GENERIC_KEY);
         if (StringUtils.isNotEmpty(generic)) {

File: dubbo-rpc/dubbo-rpc-rmi/src/main/java/org/apache/dubbo/rpc/protocol/rmi/RmiRemoteInvocation.java
Patch:
@@ -49,7 +49,7 @@ public RmiRemoteInvocation(MethodInvocation methodInvocation) {
     public Object invoke(Object targetObject) throws NoSuchMethodException, IllegalAccessException,
             InvocationTargetException {
         RpcContext context = RpcContext.getContext();
-        context.setAttachments((Map<String, String>) getAttribute(dubboAttachmentsAttrName));
+        context.setAttachments((Map<String, Object>) getAttribute(dubboAttachmentsAttrName));
         String generic = (String) getAttribute(Constants.GENERIC_KEY);
         if (StringUtils.isNotEmpty(generic)) {
             context.setAttachment(Constants.GENERIC_KEY, generic);

File: dubbo-rpc/dubbo-rpc-rsocket/src/main/java/org/apache/dubbo/rpc/protocol/rsocket/FutureSubscriber.java
Patch:
@@ -74,7 +74,7 @@ public void onNext(Payload payload) {
             }
 
             if ((flag & RSocketConstants.FLAG_HAS_ATTACHMENT) != 0) {
-                Map<String, String> attachment = in.readObject(Map.class);
+                Map<String, Object> attachment = in.readObject(Map.class);
                 appResponse.setAttachments(attachment);
 
             }

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodec.java
Patch:
@@ -402,7 +402,7 @@ private void encodeRequest(Channel channel, ChannelBuffer buffer, Request reques
 
         int seqId = nextSeqId();
 
-        String serviceName = inv.getAttachment(Constants.INTERFACE_KEY);
+        String serviceName = (String) inv.getAttachment(Constants.INTERFACE_KEY);
 
         if (StringUtils.isEmpty(serviceName)) {
             throw new IllegalArgumentException("Could not find service name in attachment with key "
@@ -500,7 +500,7 @@ private void encodeRequest(Channel channel, ChannelBuffer buffer, Request reques
             // service name
             protocol.writeString(serviceName);
             // path
-            protocol.writeString(inv.getAttachment(Constants.PATH_KEY));
+            protocol.writeString((String) inv.getAttachment(Constants.PATH_KEY));
             // dubbo request id
             protocol.writeI64(request.getId());
             protocol.getTransport().flush();

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java
Patch:
@@ -66,7 +66,7 @@ public CompletableFuture<Object> reply(ExchangeChannel channel, Object msg) thro
 
             if (msg instanceof Invocation) {
                 Invocation inv = (Invocation) msg;
-                String path = inv.getAttachments().get(Constants.PATH_KEY);
+                String path = (String) inv.getAttachments().get(Constants.PATH_KEY);
                 String serviceKey = serviceKey(channel.getLocalAddress().getPort(),
                         path, null, null);
                 DubboExporter<?> exporter = (DubboExporter<?>) exporterMap.get(serviceKey);

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -1168,7 +1168,7 @@ public Map<String, String> toMap() {
             map.put(USERNAME_KEY, username);
         }
         if (password != null) {
-            map.put(USERNAME_KEY, password);
+            map.put(PASSWORD_KEY, password);
         }
         if (host != null) {
             map.put(HOST_KEY, host);

File: dubbo-metadata-report/dubbo-metadata-report-etcd/src/test/java/org/apache/dubbo/metadata/store/etcd/EtcdMetadataReportTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import java.net.URI;
@@ -73,6 +74,7 @@ public void tearDown() throws Exception {
     }
 
     @Test
+    @Disabled("Disabled because https://github.com/apache/dubbo/issues/4185")
     public void testStoreProvider() throws Exception {
         String version = "1.0.0";
         String group = null;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/Constants.java
Patch:
@@ -32,7 +32,7 @@ public interface Constants {
 
     String DECODE_IN_IO_THREAD_KEY = "decode.in.io";
 
-    boolean DEFAULT_DECODE_IN_IO_THREAD = true;
+    boolean DEFAULT_DECODE_IN_IO_THREAD = false;
 
     /**
      * callback inst id

File: dubbo-remoting/dubbo-remoting-mina/src/test/java/org/apache/remoting/transport/mina/ClientToServerTest.java
Patch:
@@ -65,7 +65,7 @@ protected void tearDown() {
 
     @Test
     public void testFuture() throws Exception {
-        CompletableFuture<Object> future = client.request(new World("world"));
+        CompletableFuture<Object> future = client.request(new World("world"), new CompletableFuture());
         Hello result = (Hello) future.get();
         Assertions.assertEquals("hello,world", result.getName());
     }

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/ClientToServerTest.java
Patch:
@@ -64,7 +64,7 @@ protected void tearDown() throws Exception {
 
     @Test
     public void testFuture() throws Exception {
-        CompletableFuture<Object> future = client.request(new World("world"));
+        CompletableFuture<Object> future = client.request(new World("world"), new CompletableFuture());
         Hello result = (Hello) future.get();
         Assertions.assertEquals("hello,world", result.getName());
     }

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/ClientToServerTest.java
Patch:
@@ -65,7 +65,7 @@ protected void tearDown() {
 
     @Test
     public void testFuture() throws Exception {
-        CompletableFuture<Object> future = client.request(new World("world"));
+        CompletableFuture<Object> future = client.request(new World("world"), new CompletableFuture());
         Hello result = (Hello) future.get();
         Assertions.assertEquals("hello,world", result.getName());
     }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.util.Set;
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.locks.ReentrantLock;
 
@@ -98,8 +97,7 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
                 AsyncRpcResult asyncRpcResult = new AsyncRpcResult(inv);
                 ExecutorService executor = getCallbackExecutor(getUrl(), inv);
                 asyncRpcResult.setExecutor(executor);
-                CompletableFuture<Object> responseFuture = currentClient.request(inv, timeout, executor);
-                asyncRpcResult.subscribeTo(responseFuture);
+                currentClient.request(inv, timeout, executor, asyncRpcResult);
                 return asyncRpcResult;
             }
         } catch (TimeoutException e) {

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftInvoker.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.dubbo.rpc.protocol.AbstractInvoker;
 
 import java.util.Set;
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.locks.ReentrantLock;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
@@ -93,8 +92,7 @@ protected Result doInvoke(Invocation invocation) throws Throwable {
             int timeout = getUrl().getMethodParameter(methodName, TIMEOUT_KEY, DEFAULT_TIMEOUT);
 
             AsyncRpcResult asyncRpcResult = new AsyncRpcResult(invocation);
-            CompletableFuture<Object> responseFuture = currentClient.request(inv, timeout);
-            asyncRpcResult.subscribeTo(responseFuture);
+            currentClient.request(inv, timeout, asyncRpcResult);
             return asyncRpcResult;
         } catch (TimeoutException e) {
             throw new RpcException(RpcException.TIMEOUT_EXCEPTION, e.getMessage(), e);

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodecTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayInputStream;
+import java.util.concurrent.CompletableFuture;
 
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
@@ -133,7 +134,7 @@ public void testDecodeReplyResponse() throws Exception {
 
         Request request = createRequest();
 
-        DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null);
+        DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null, new CompletableFuture());
 
         TMessage message = new TMessage("echoString", TMessageType.REPLY, ThriftCodec.getSeqId());
 
@@ -210,7 +211,7 @@ public void testDecodeExceptionResponse() throws Exception {
 
         Request request = createRequest();
 
-        DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null);
+        DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null, new CompletableFuture());
 
         TMessage message = new TMessage("echoString", TMessageType.EXCEPTION, ThriftCodec.getSeqId());
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -557,9 +557,9 @@ public synchronized void doOverrideIfNecessary() {
             URL currentUrl = exporter.getInvoker().getUrl();
             //Merged with this configuration
             URL newUrl = getConfigedInvokerUrl(configurators, originUrl);
+            newUrl = getConfigedInvokerUrl(providerConfigurationListener.getConfigurators(), newUrl);
             newUrl = getConfigedInvokerUrl(serviceConfigurationListeners.get(originUrl.getServiceKey())
                     .getConfigurators(), newUrl);
-            newUrl = getConfigedInvokerUrl(providerConfigurationListener.getConfigurators(), newUrl);
             if (!currentUrl.equals(newUrl)) {
                 RegistryProtocol.this.reExport(originInvoker, newUrl);
                 logger.info("exported provider url changed, origin url: " + originUrl +

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouter.java
Patch:
@@ -47,7 +47,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.ENABLED_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHOD_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.HOST_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.HOST_KEY;
 
 /**
  * ConditionRouter

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java
Patch:
@@ -38,7 +38,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.THREAD_NAME_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMESTAMP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.INVOKER_LISTENER_KEY;
 import static org.apache.dubbo.rpc.Constants.REFERENCE_FILTER_KEY;
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/directory/MockDirInvocation.java
Patch:
@@ -26,7 +26,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 
 /**

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ClusterUtilsTest.java
Patch:
@@ -32,8 +32,8 @@
 import static org.apache.dubbo.common.constants.CommonConstants.THREADS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.THREAD_NAME_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_PROTOCOL;
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PROTOCOL;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 
 public class ClusterUtilsTest {
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationUtils.java
Patch:
@@ -27,8 +27,8 @@
 import java.util.Properties;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_SERVER_SHUTDOWN_TIMEOUT;
-import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_SECONDS_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_SECONDS_KEY;
 
 /**
  * Utilities for manipulating configurations from different sources

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java
Patch:
@@ -39,7 +39,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;
 import static org.apache.dubbo.common.constants.CommonConstants.LOCALHOST_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.LOCALHOST_VALUE;
-import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_IP_TO_BIND;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_IP_TO_BIND;
 
 /**
  * IP and Port Helper for RPC

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/ConfigurationUtilsTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.util.Map;
 
-import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
 
 /**
  *

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/common/utils/UrlUtils.java
Patch:
@@ -101,10 +101,10 @@ public static boolean isProvider(URL url) {
     }
 
     public static int getHeartbeat(URL url) {
-        return org.apache.dubbo.common.utils.UrlUtils.getHeartbeat(url.getOriginalURL());
+        return org.apache.dubbo.remoting.utils.UrlUtils.getHeartbeat(url.getOriginalURL());
     }
 
     public static int getIdleTimeout(URL url) {
-        return org.apache.dubbo.common.utils.UrlUtils.getIdleTimeout(url.getOriginalURL());
+        return org.apache.dubbo.remoting.utils.UrlUtils.getIdleTimeout(url.getOriginalURL());
     }
 }

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java
Patch:
@@ -29,8 +29,8 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DUMP_DIRECTORY;
-import static org.apache.dubbo.common.constants.ConfigConstants.ACCEPT_FOREIGN_IP;
-import static org.apache.dubbo.common.constants.ConfigConstants.QOS_ENABLE;
+import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP;
+import static org.apache.dubbo.common.constants.QosConstants.QOS_ENABLE;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.contains;
 import static org.hamcrest.Matchers.equalTo;

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;

File: dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvocation.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;

File: dubbo-compatible/src/test/java/org/apache/dubbo/service/MockInvocation.java
Patch:
@@ -26,7 +26,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 
 /**

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProtocolConfig.java
Patch:
@@ -33,11 +33,11 @@
 import java.util.Map;
 
 import static org.apache.dubbo.common.constants.CommonConstants.THREADPOOL_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_PROTOCOL;
-import static org.apache.dubbo.common.constants.ConfigConstants.HOST_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PROTOCOL;
+import static org.apache.dubbo.common.constants.CommonConstants.HOST_KEY;
 import static org.apache.dubbo.config.Constants.PROTOCOLS_SUFFIX;
 import static org.apache.dubbo.remoting.Constants.TELNET;
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 
 /**
  * ProtocolConfig

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -65,7 +65,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.REVISION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SEMICOLON_SPLIT_PATTERN;
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.CLUSTER_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.CLUSTER_KEY;
 import static org.apache.dubbo.config.Constants.DUBBO_IP_TO_REGISTRY;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 import static org.apache.dubbo.registry.Constants.REGISTER_IP_KEY;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -24,10 +24,10 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.FILE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.PASSWORD_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.PASSWORD_KEY;
 import static org.apache.dubbo.config.Constants.REGISTRIES_SUFFIX;
-import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.USERNAME_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.USERNAME_KEY;
 import static org.apache.dubbo.config.Constants.ZOOKEEPER_PROTOCOL;
 import static org.apache.dubbo.registry.Constants.EXTRA_KEYS_KEY;
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -71,7 +71,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
 import static org.apache.dubbo.common.constants.CommonConstants.REVISION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_IP_TO_BIND;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_IP_TO_BIND;
 import static org.apache.dubbo.config.Constants.DUBBO_IP_TO_REGISTRY;
 import static org.apache.dubbo.config.Constants.DUBBO_PORT_TO_BIND;
 import static org.apache.dubbo.config.Constants.DUBBO_PORT_TO_REGISTRY;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.config.annotation;
 
-import org.apache.dubbo.common.constants.RpcConstants;
 import org.apache.dubbo.rpc.ExporterListener;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.cluster.Constants;
@@ -136,7 +135,7 @@
     /**
      * The callback instance limit peer connection
      *
-     * @see RpcConstants#DEFAULT_CALLBACK_INSTANCES
+     * @see org.apache.dubbo.rpc.Constants#DEFAULT_CALLBACK_INSTANCES
      */
     int callbacks() default 0;
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Service.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.config.annotation;
 
-import org.apache.dubbo.common.constants.RpcConstants;
 import org.apache.dubbo.rpc.ExporterListener;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.cluster.Constants;
@@ -146,9 +145,9 @@
     /**
      * The callback instance limit peer connection
      *
-     * @see RpcConstants#DEFAULT_CALLBACK_INSTANCES
+     * @see org.apache.dubbo.rpc.Constants#DEFAULT_CALLBACK_INSTANCES
      */
-    int callbacks() default RpcConstants.DEFAULT_CALLBACK_INSTANCES;
+    int callbacks() default org.apache.dubbo.rpc.Constants.DEFAULT_CALLBACK_INSTANCES;
 
     /**
      * Callback method name when connected, default value is empty string

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractInterfaceConfigTest.java
Patch:
@@ -46,8 +46,8 @@
 import java.util.List;
 import java.util.Properties;
 
-import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_SECONDS_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_SECONDS_KEY;
 
 public class AbstractInterfaceConfigTest {
     private static File dubboProperties;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java
Patch:
@@ -26,8 +26,8 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.APPLICATION_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DUMP_DIRECTORY;
-import static org.apache.dubbo.common.constants.ConfigConstants.ACCEPT_FOREIGN_IP;
-import static org.apache.dubbo.common.constants.ConfigConstants.QOS_ENABLE;
+import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP;
+import static org.apache.dubbo.common.constants.QosConstants.QOS_ENABLE;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.contains;
 import static org.hamcrest.Matchers.equalTo;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Map;
 
 import static org.apache.dubbo.config.Constants.SHUTDOWN_TIMEOUT_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java
Patch:
@@ -49,7 +49,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.apache.dubbo.config.Constants.SHUTDOWN_TIMEOUT_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
 import static org.apache.dubbo.remoting.Constants.BIND_IP_KEY;
 import static org.apache.dubbo.remoting.Constants.BIND_PORT_KEY;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/SimpleRegistryExporter.java
Patch:
@@ -29,8 +29,8 @@
 
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_STICKY_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_PROTOCOL;
-import static org.apache.dubbo.common.constants.RpcConstants.CALLBACK_INSTANCES_LIMIT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PROTOCOL;
+import static org.apache.dubbo.rpc.Constants.CALLBACK_INSTANCES_LIMIT_KEY;
 
 /**
  * SimpleRegistryExporter

File: dubbo-metadata-report/dubbo-metadata-report-redis/src/main/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReport.java
Patch:
@@ -36,7 +36,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.CLUSTER_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.CLUSTER_KEY;
 import static org.apache.dubbo.metadata.identifier.MetadataIdentifier.META_DATA_STORE_TAG;
 
 /**

File: dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/MonitorService.java
Patch:
@@ -21,8 +21,8 @@
 
 import java.util.List;
 
-import static org.apache.dubbo.common.constants.RpcConstants.INPUT_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.OUTPUT_KEY;
+import static org.apache.dubbo.rpc.Constants.INPUT_KEY;
+import static org.apache.dubbo.rpc.Constants.OUTPUT_KEY;
 /**
  * MonitorService. (SPI, Prototype, ThreadSafe)
  */
@@ -89,4 +89,4 @@ public interface MonitorService {
     List<URL> lookup(URL query);
 
 
-}
\ No newline at end of file
+}

File: dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/MonitorFilter.java
Patch:
@@ -46,8 +46,8 @@
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.monitor.Constants.COUNT_PROTOCOL;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.INPUT_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.OUTPUT_KEY;
+import static org.apache.dubbo.rpc.Constants.INPUT_KEY;
+import static org.apache.dubbo.rpc.Constants.OUTPUT_KEY;
 /**
  * MonitorFilter. (SPI, Singleton, ThreadSafe)
  */

File: dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/DubboMonitorFactory.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.dubbo.rpc.ProxyFactory;
 
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_PROTOCOL;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PROTOCOL;
 import static org.apache.dubbo.remoting.Constants.CHECK_KEY;
 import static org.apache.dubbo.rpc.Constants.REFERENCE_FILTER_KEY;
 

File: dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/DubboMonitorTest.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_PROTOCOL;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PROTOCOL;
 import static org.hamcrest.CoreMatchers.hasItem;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.nullValue;

File: dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/StatisticsTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.hamcrest.MatcherAssert;
 import org.junit.jupiter.api.Test;
 
-import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_PROTOCOL;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PROTOCOL;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/protocol/QosProtocolWrapper.java
Patch:
@@ -28,9 +28,9 @@
 
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static org.apache.dubbo.common.constants.ConfigConstants.ACCEPT_FOREIGN_IP;
-import static org.apache.dubbo.common.constants.ConfigConstants.QOS_ENABLE;
-import static org.apache.dubbo.common.constants.ConfigConstants.QOS_PORT;
+import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP;
+import static org.apache.dubbo.common.constants.QosConstants.QOS_ENABLE;
+import static org.apache.dubbo.common.constants.QosConstants.QOS_PORT;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_PROTOCOL;
 
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/protocol/QosProtocolWrapperTest.java
Patch:
@@ -27,9 +27,9 @@
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
-import static org.apache.dubbo.common.constants.ConfigConstants.ACCEPT_FOREIGN_IP;
-import static org.apache.dubbo.common.constants.ConfigConstants.QOS_ENABLE;
-import static org.apache.dubbo.common.constants.ConfigConstants.QOS_PORT;
+import static org.apache.dubbo.common.constants.QosConstants.ACCEPT_FOREIGN_IP;
+import static org.apache.dubbo.common.constants.QosConstants.QOS_ENABLE;
+import static org.apache.dubbo.common.constants.QosConstants.QOS_PORT;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_PROTOCOL;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -66,7 +66,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_PROTOCOL;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PROTOCOL;
 import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.APP_DYNAMIC_CONFIGURATORS_CATEGORY;

File: dubbo-registry/dubbo-registry-default/src/main/java/org/apache/dubbo/registry/dubbo/DubboRegistryFactory.java
Patch:
@@ -48,7 +48,7 @@
 import static org.apache.dubbo.common.constants.RemotingConstants.BACKUP_KEY;
 import static org.apache.dubbo.remoting.Constants.CONNECT_TIMEOUT_KEY;
 import static org.apache.dubbo.remoting.Constants.RECONNECT_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.CALLBACK_INSTANCES_LIMIT_KEY;
+import static org.apache.dubbo.rpc.Constants.CALLBACK_INSTANCES_LIMIT_KEY;
 
 /**
  * DubboRegistryFactory

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/RegistryDirectoryTest.java
Patch:
@@ -68,7 +68,7 @@
 import static org.apache.dubbo.common.constants.RegistryConstants.PROVIDERS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.ROUTERS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.ROUTE_PROTOCOL;
-import static org.apache.dubbo.common.constants.RpcConstants.$INVOKE;
+import static org.apache.dubbo.rpc.Constants.$INVOKE;
 import static org.apache.dubbo.rpc.Constants.MOCK_KEY;
 import static org.junit.jupiter.api.Assertions.fail;
 

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/SimpleRegistryExporter.java
Patch:
@@ -29,8 +29,8 @@
 
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_STICKY_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
-import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_PROTOCOL;
-import static org.apache.dubbo.common.constants.RpcConstants.CALLBACK_INSTANCES_LIMIT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_PROTOCOL;
+import static org.apache.dubbo.rpc.Constants.CALLBACK_INSTANCES_LIMIT_KEY;
 
 /**
  * SimpleRegistryExporter

File: dubbo-registry/dubbo-registry-redis/src/test/java/org/apache/dubbo/registry/redis/RedisRegistryTest.java
Patch:
@@ -121,4 +121,4 @@ public void testAvailableWithBackup() {
 
         assertThat(registry.isAvailable(), is(true));
     }
-}
\ No newline at end of file
+}

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeClient.java
Patch:
@@ -33,8 +33,8 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.TimeUnit;
 
-import static org.apache.dubbo.common.utils.UrlUtils.getHeartbeat;
-import static org.apache.dubbo.common.utils.UrlUtils.getIdleTimeout;
+import static org.apache.dubbo.remoting.utils.UrlUtils.getHeartbeat;
+import static org.apache.dubbo.remoting.utils.UrlUtils.getIdleTimeout;
 import static org.apache.dubbo.remoting.Constants.HEARTBEAT_CHECK_TICK;
 import static org.apache.dubbo.remoting.Constants.LEAST_HEARTBEAT_DURATION;
 import static org.apache.dubbo.remoting.Constants.TICKS_PER_WHEEL;

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeartbeatHandler.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.dubbo.remoting.exchange.support.header;
 
-import org.apache.dubbo.common.constants.RemotingConstants;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.ChannelHandler;
+import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.Request;
 import org.apache.dubbo.remoting.exchange.Response;
@@ -69,7 +69,7 @@ public void received(Channel channel, Object message) throws RemotingException {
                 res.setEvent(Response.HEARTBEAT_EVENT);
                 channel.send(res);
                 if (logger.isInfoEnabled()) {
-                    int heartbeat = channel.getUrl().getParameter(RemotingConstants.HEARTBEAT_KEY, 0);
+                    int heartbeat = channel.getUrl().getParameter(Constants.HEARTBEAT_KEY, 0);
                     if (logger.isDebugEnabled()) {
                         logger.debug("Received heartbeat from remote channel " + channel.getRemoteAddress()
                                 + ", cause: The channel has no data-transmission exceeds a heartbeat period"

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/PerformanceClientFixedTest.java
Patch:
@@ -28,7 +28,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.CONNECTIONS_KEY;
+import static org.apache.dubbo.remoting.Constants.CONNECTIONS_KEY;
 
 public class PerformanceClientFixedTest  {
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/PerformanceClientTest.java
Patch:
@@ -34,7 +34,7 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.CONNECTIONS_KEY;
+import static org.apache.dubbo.remoting.Constants.CONNECTIONS_KEY;
 
 /**
  * PerformanceClientTest

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/header/HeartBeatTaskTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.remoting.Constants.HEARTBEAT_CHECK_TICK;
 
 public class HeartBeatTaskTest {

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/ClientReconnectTest.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.dubbo.remoting.transport.netty;
 
-import org.apache.dubbo.common.constants.RemotingConstants;
 import org.apache.dubbo.common.utils.DubboAppender;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.Client;
+import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.Server;
 import org.apache.dubbo.remoting.exchange.Exchangers;
@@ -70,7 +70,7 @@ public void testReconnect() throws RemotingException, InterruptedException {
 
 
     public Client startClient(int port, int heartbeat) throws RemotingException {
-        final String url = "exchange://127.0.0.1:" + port + "/client.reconnect.test?check=false&client=netty3&" + RemotingConstants.HEARTBEAT_KEY + "=" + heartbeat;
+        final String url = "exchange://127.0.0.1:" + port + "/client.reconnect.test?check=false&client=netty3&" + Constants.HEARTBEAT_KEY + "=" + heartbeat;
         return Exchangers.connect(url);
     }
 

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java
Patch:
@@ -22,11 +22,11 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.common.utils.NetUtils;
-import org.apache.dubbo.common.utils.UrlUtils;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.transport.AbstractClient;
+import org.apache.dubbo.remoting.utils.UrlUtils;
 
 import io.netty.bootstrap.Bootstrap;
 import io.netty.buffer.PooledByteBufAllocator;

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServer.java
Patch:
@@ -21,14 +21,14 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ExecutorUtil;
 import org.apache.dubbo.common.utils.NetUtils;
-import org.apache.dubbo.common.utils.UrlUtils;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.Server;
 import org.apache.dubbo.remoting.transport.AbstractServer;
 import org.apache.dubbo.remoting.transport.dispatcher.ChannelHandlers;
+import org.apache.dubbo.remoting.utils.UrlUtils;
 
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.buffer.PooledByteBufAllocator;

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/ClientReconnectTest.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.dubbo.remoting.transport.netty4;
 
-import org.apache.dubbo.common.constants.RemotingConstants;
 import org.apache.dubbo.common.utils.DubboAppender;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.Client;
+import org.apache.dubbo.remoting.Constants;
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.Server;
 import org.apache.dubbo.remoting.exchange.Exchangers;
@@ -72,7 +72,7 @@ public void testReconnect() throws RemotingException, InterruptedException {
 
 
     public Client startClient(int port, int heartbeat) throws RemotingException {
-        final String url = "exchange://127.0.0.1:" + port + "/client.reconnect.test?client=netty4&check=false&" + RemotingConstants.HEARTBEAT_KEY + "=" + heartbeat;
+        final String url = "exchange://127.0.0.1:" + port + "/client.reconnect.test?client=netty4&check=false&" + Constants.HEARTBEAT_KEY + "=" + heartbeat;
         return Exchangers.connect(url);
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcConstants.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dubbo.rpc;
 
 import org.apache.dubbo.common.constants.CommonConstants;
-import org.apache.dubbo.common.constants.ConfigConstants;
 import org.apache.dubbo.common.constants.FilterConstants;
+import org.apache.dubbo.common.constants.QosConstants;
 import org.apache.dubbo.common.constants.RegistryConstants;
 import org.apache.dubbo.common.constants.RemotingConstants;
 
@@ -28,8 +28,8 @@
  * @deprecated Replace to org.apache.dubbo.common.Constants
  */
 @Deprecated
-public final class RpcConstants implements CommonConstants, ConfigConstants, FilterConstants,
-        RegistryConstants, RemotingConstants, org.apache.dubbo.common.constants.RpcConstants {
+public final class RpcConstants implements CommonConstants, QosConstants, FilterConstants,
+        RegistryConstants, RemotingConstants {
 
     private RpcConstants() {
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -36,7 +36,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.ASYNC_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.FORCE_USE_TAG;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java
Patch:
@@ -42,8 +42,8 @@
 import java.io.IOException;
 import java.lang.reflect.Method;
 
-import static org.apache.dubbo.common.constants.RpcConstants.$INVOKE;
-import static org.apache.dubbo.common.constants.RpcConstants.$INVOKE_ASYNC;
+import static org.apache.dubbo.rpc.Constants.$INVOKE;
+import static org.apache.dubbo.rpc.Constants.$INVOKE_ASYNC;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
 import static org.apache.dubbo.rpc.Constants.GENERIC_SERIALIZATION_BEAN;
 import static org.apache.dubbo.rpc.Constants.GENERIC_SERIALIZATION_NATIVE_JAVA;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericImplFilter.java
Patch:
@@ -40,8 +40,8 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 
-import static org.apache.dubbo.common.constants.RpcConstants.$INVOKE;
-import static org.apache.dubbo.common.constants.RpcConstants.$INVOKE_ASYNC;
+import static org.apache.dubbo.rpc.Constants.$INVOKE;
+import static org.apache.dubbo.rpc.Constants.$INVOKE_ASYNC;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
 
 /**

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ConsumerMethodModel.java
Patch:
@@ -20,7 +20,7 @@
 import java.lang.reflect.Method;
 import java.util.Map;
 
-import static org.apache.dubbo.common.constants.RpcConstants.$INVOKE;
+import static org.apache.dubbo.rpc.Constants.$INVOKE;
 
 public class ConsumerMethodModel {
     private final Method method;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java
Patch:
@@ -32,8 +32,8 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicLong;
 
-import static org.apache.dubbo.common.constants.RpcConstants.$INVOKE;
-import static org.apache.dubbo.common.constants.RpcConstants.$INVOKE_ASYNC;
+import static org.apache.dubbo.rpc.Constants.$INVOKE;
+import static org.apache.dubbo.rpc.Constants.$INVOKE_ASYNC;
 import static org.apache.dubbo.rpc.Constants.ASYNC_KEY;
 import static org.apache.dubbo.rpc.Constants.AUTO_ATTACH_INVOCATIONID_KEY;
 import static org.apache.dubbo.rpc.Constants.FUTURE_GENERATED_KEY;

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/GenericFilterTest.java
Patch:
@@ -38,7 +38,7 @@
 
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
-import static org.apache.dubbo.common.constants.RpcConstants.$INVOKE;
+import static org.apache.dubbo.rpc.Constants.$INVOKE;
 import static org.apache.dubbo.rpc.Constants.GENERIC_SERIALIZATION_NATIVE_JAVA;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
 

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/GenericImplFilterTest.java
Patch:
@@ -39,7 +39,7 @@
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.when;
 
-import static org.apache.dubbo.common.constants.RpcConstants.$INVOKE;
+import static org.apache.dubbo.rpc.Constants.$INVOKE;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
 
 public class GenericImplFilterTest {

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/MockInvocation.java
Patch:
@@ -26,7 +26,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
 
 /**

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
Patch:
@@ -42,8 +42,8 @@
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.CALLBACK_SERVICE_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.CALLBACK_INSTANCES_LIMIT_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.DEFAULT_CALLBACK_INSTANCES;
+import static org.apache.dubbo.rpc.Constants.CALLBACK_INSTANCES_LIMIT_KEY;
+import static org.apache.dubbo.rpc.Constants.DEFAULT_CALLBACK_INSTANCES;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.CALLBACK_SERVICE_PROXY_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.IS_CALLBACK_SERVICE;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.CHANNEL_CALLBACK_KEY;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java
Patch:
@@ -40,7 +40,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec.decodeInvocationArgument;
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 
 public class DecodeableRpcInvocation extends RpcInvocation implements Codec, Decodeable {
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -43,7 +43,7 @@
 import static org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec.encodeInvocationArgument;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.DECODE_IN_IO_THREAD_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.DEFAULT_DECODE_IN_IO_THREAD;
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 
 /**
  * Dubbo codec.

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCountCodec.java
Patch:
@@ -28,8 +28,8 @@
 
 import java.io.IOException;
 
-import static org.apache.dubbo.common.constants.RpcConstants.INPUT_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.OUTPUT_KEY;
+import static org.apache.dubbo.rpc.Constants.INPUT_KEY;
+import static org.apache.dubbo.rpc.Constants.OUTPUT_KEY;
 
 public final class DubboCountCodec implements Codec2 {
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -65,16 +65,16 @@
 import static org.apache.dubbo.rpc.Constants.LAZY_CONNECT_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.ON_CONNECT_KEY;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.ON_DISCONNECT_KEY;
-import static org.apache.dubbo.common.constants.RemotingConstants.DEFAULT_HEARTBEAT;
-import static org.apache.dubbo.common.constants.RemotingConstants.HEARTBEAT_KEY;
+import static org.apache.dubbo.remoting.Constants.DEFAULT_HEARTBEAT;
+import static org.apache.dubbo.remoting.Constants.HEARTBEAT_KEY;
 import static org.apache.dubbo.remoting.Constants.CHANNEL_READONLYEVENT_SENT_KEY;
 import static org.apache.dubbo.remoting.Constants.CLIENT_KEY;
 import static org.apache.dubbo.remoting.Constants.CODEC_KEY;
 import static org.apache.dubbo.remoting.Constants.DEFAULT_REMOTING_CLIENT;
 import static org.apache.dubbo.remoting.Constants.SERVER_KEY;
 import static org.apache.dubbo.rpc.Constants.DEFAULT_REMOTING_SERVER;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.CALLBACK_SERVICE_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.CONNECTIONS_KEY;
+import static org.apache.dubbo.remoting.Constants.CONNECTIONS_KEY;
 import static org.apache.dubbo.rpc.Constants.DEFAULT_STUB_EVENT;
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.IS_CALLBACK_SERVICE;
 import static org.apache.dubbo.rpc.Constants.IS_SERVER_KEY;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java
Patch:
@@ -32,7 +32,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
-import static org.apache.dubbo.common.constants.RpcConstants.$INVOKE;
+import static org.apache.dubbo.rpc.Constants.$INVOKE;
 
 /**
  * EventFilter

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvokerAvilableTest.java
Patch:
@@ -36,7 +36,7 @@
 
 import java.lang.reflect.Field;
 
-import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
 import static org.junit.jupiter.api.Assertions.fail;
 
 /**

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ExplicitCallbackTest.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
-import static org.apache.dubbo.common.constants.RpcConstants.CALLBACK_INSTANCES_LIMIT_KEY;
+import static org.apache.dubbo.rpc.Constants.CALLBACK_INSTANCES_LIMIT_KEY;
 
 public class ExplicitCallbackTest {
 
@@ -354,4 +354,4 @@ public void unxxx2(IDemoCallback callback) {
             callbacks.remove(callback);
         }
     }
-}
\ No newline at end of file
+}

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ReferenceCountExchangeClientTest.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.Objects;
 
 import static org.apache.dubbo.rpc.protocol.dubbo.Constants.SHARE_CONNECTIONS_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.CONNECTIONS_KEY;
+import static org.apache.dubbo.remoting.Constants.CONNECTIONS_KEY;
 
 
 public class ReferenceCountExchangeClientTest {
@@ -317,4 +317,4 @@ public String hello() {
             return "hello";
         }
     }
-}
\ No newline at end of file
+}

File: dubbo-rpc/dubbo-rpc-http/src/main/java/org/apache/dubbo/rpc/protocol/http/HttpProtocol.java
Patch:
@@ -50,7 +50,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
 import static org.apache.dubbo.common.constants.CommonConstants.RELEASE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
 
 /**

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java
Patch:
@@ -54,7 +54,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.CONNECTIONS_KEY;
+import static org.apache.dubbo.remoting.Constants.CONNECTIONS_KEY;
 import static org.apache.dubbo.remoting.Constants.CONNECT_TIMEOUT_KEY;
 import static org.apache.dubbo.remoting.Constants.DEFAULT_CONNECT_TIMEOUT;
 import static org.apache.dubbo.remoting.Constants.SERVER_KEY;

File: dubbo-rpc/dubbo-rpc-rmi/src/main/java/org/apache/dubbo/rpc/protocol/rmi/RmiProtocol.java
Patch:
@@ -34,7 +34,7 @@
 import static org.apache.dubbo.common.Version.isRelease263OrHigher;
 import static org.apache.dubbo.common.Version.isRelease270OrHigher;
 import static org.apache.dubbo.common.constants.CommonConstants.RELEASE_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.remoting.Constants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.GENERIC_KEY;
 
 /**

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java
Patch:
@@ -46,7 +46,7 @@
 import java.util.function.Function;
 
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
-import static org.apache.dubbo.common.constants.RpcConstants.CONNECTIONS_KEY;
+import static org.apache.dubbo.remoting.Constants.CONNECTIONS_KEY;
 import static org.apache.dubbo.rpc.Constants.IS_SERVER_KEY;
 
 /**

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -356,6 +356,7 @@ private T createProxy(Map<String, String> map) {
                 logger.info("Using injvm service " + interfaceClass.getName());
             }
         } else {
+            urls.clear(); // reference retry init will add url to urls, lead to OOM
             if (url != null && url.length() > 0) { // user specified URL, could be peer-to-peer address, or register center's address.
                 String[] us = SEMICOLON_SPLIT_PATTERN.split(url);
                 if (us != null && us.length > 0) {

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/identifier/MetadataIdentifier.java
Patch:
@@ -31,8 +31,8 @@
 public class MetadataIdentifier {
 
     public static final String SEPARATOR = ":";
-    final static String DEFAULT_PATH_TAG = "metadata";
-    final static String META_DATA_STORE_TAG = ".metaData";
+    public final static String DEFAULT_PATH_TAG = "metadata";
+    public final static String META_DATA_STORE_TAG = ".metaData";
 
     private String serviceInterface;
     private String version;

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/TypeBuilder.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.metadata.definition.builder;
 
+import org.apache.dubbo.common.extension.SPI;
 import org.apache.dubbo.metadata.definition.model.TypeDefinition;
 
 import java.lang.reflect.Type;
@@ -24,6 +25,7 @@
 /**
  * 2015/1/27.
  */
+@SPI
 public interface TypeBuilder {
 
     /**

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.apache.dubbo.common.constants.RegistryConstants.REFER_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_PROTOCOL;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterFactory.java
Patch:
@@ -27,7 +27,7 @@
 import java.io.FileReader;
 import java.io.IOException;
 
-import static org.apache.dubbo.common.constants.RegistryConstants.ROUTER_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.ROUTER_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.RULE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.RUNTIME_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.TYPE_KEY;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -49,7 +49,7 @@
 
 import static org.apache.dubbo.rpc.cluster.Constants.CLUSTER_AVAILABLE_CHECK_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.INVOCATION_NEED_MOCK;
-import static org.apache.dubbo.common.constants.RegistryConstants.REFER_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -69,16 +69,16 @@
 import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_PROTOCOL;
 import static org.apache.dubbo.config.Constants.LAYER_KEY;
 import static org.apache.dubbo.config.Constants.LISTENER_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.REFER_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 import static org.apache.dubbo.registry.Constants.REGISTER_IP_KEY;
 import static org.apache.dubbo.config.Constants.REGISTRIES_SUFFIX;
 import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_KEY;
 import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_SECONDS_KEY;
 import static org.apache.dubbo.monitor.Constants.LOGSTAT_PROTOCOL;
-import static org.apache.dubbo.common.constants.RegistryConstants.REGISTER_KEY;
+import static org.apache.dubbo.registry.Constants.REGISTER_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_PROTOCOL;
-import static org.apache.dubbo.common.constants.RegistryConstants.SUBSCRIBE_KEY;
+import static org.apache.dubbo.registry.Constants.SUBSCRIBE_KEY;
 import static org.apache.dubbo.common.constants.RpcConstants.DUBBO_VERSION_KEY;
 import static org.apache.dubbo.rpc.Constants.INVOKER_LISTENER_KEY;
 import static org.apache.dubbo.rpc.Constants.LOCAL_KEY;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -67,10 +67,10 @@
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
 import static org.apache.dubbo.common.constants.ConfigConstants.CLUSTER_KEY;
 import static org.apache.dubbo.config.Constants.DUBBO_IP_TO_REGISTRY;
-import static org.apache.dubbo.common.constants.RegistryConstants.REFER_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 import static org.apache.dubbo.registry.Constants.REGISTER_IP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.CONSUMER_PROTOCOL;
+import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_PROTOCOL;
 import static org.apache.dubbo.rpc.Constants.LOCAL_PROTOCOL;
 import static org.apache.dubbo.common.utils.NetUtils.isInvalidLocalHost;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -29,7 +29,7 @@
 import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_KEY;
 import static org.apache.dubbo.common.constants.ConfigConstants.USERNAME_KEY;
 import static org.apache.dubbo.config.Constants.ZOOKEEPER_PROTOCOL;
-import static org.apache.dubbo.common.constants.RegistryConstants.EXTRA_KEYS_KEY;
+import static org.apache.dubbo.registry.Constants.EXTRA_KEYS_KEY;
 
 /**
  * RegistryConfig

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -75,7 +75,7 @@
 import static org.apache.dubbo.config.Constants.DUBBO_IP_TO_REGISTRY;
 import static org.apache.dubbo.config.Constants.DUBBO_PORT_TO_BIND;
 import static org.apache.dubbo.config.Constants.DUBBO_PORT_TO_REGISTRY;
-import static org.apache.dubbo.common.constants.RegistryConstants.EXPORT_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.apache.dubbo.config.Constants.MULTICAST;
 import static org.apache.dubbo.config.Constants.PROTOCOLS_SUFFIX;
 import static org.apache.dubbo.rpc.Constants.SCOPE_KEY;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java
Patch:
@@ -47,7 +47,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER;
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.EXPORT_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.apache.dubbo.config.Constants.SHUTDOWN_TIMEOUT_KEY;
 import static org.apache.dubbo.common.constants.ConfigConstants.SHUTDOWN_WAIT_KEY;
 import static org.apache.dubbo.remoting.Constants.BIND_IP_KEY;

File: dubbo-configcenter/dubbo-configcenter-etcd/src/test/java/org/apache/dubbo/configcenter/support/etcd/EtcdDynamicConfigurationTest.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
-import static org.apache.dubbo.common.constants.RegistryConstants.SESSION_TIMEOUT_KEY;
+import static org.apache.dubbo.remoting.etcd.Constants.SESSION_TIMEOUT_KEY;
 
 /**
  * Unit test for etcd config center support

File: dubbo-configcenter/dubbo-configcenter-nacos/src/test/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfigurationTest.java
Patch:
@@ -31,14 +31,14 @@
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 
-import static org.apache.dubbo.common.constants.RegistryConstants.SESSION_TIMEOUT_KEY;
 
 /**
  * Unit test for nacos config center support
  */
 //FIXME: waiting for embedded Nacos suport, then we can open the switch.
 @Disabled("https://github.com/alibaba/nacos/issues/1188")
 public class NacosDynamicConfigurationTest {
+    private static final String SESSION_TIMEOUT_KEY = "session";
 
     private static NacosDynamicConfiguration config;
 

File: dubbo-metadata-report/dubbo-metadata-report-nacos/src/test/java/org/apache/dubbo/metadata/store/nacos/NacosMetadataReportTest.java
Patch:
@@ -35,11 +35,11 @@
 
 import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER_SIDE;
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
-import static org.apache.dubbo.common.constants.RegistryConstants.SESSION_TIMEOUT_KEY;
 
 //FIXME: waiting for embedded Nacos suport, then we can open the switch.
 @Disabled("https://github.com/alibaba/nacos/issues/1188")
 public class NacosMetadataReportTest {
+    private static final String SESSION_TIMEOUT_KEY = "session";
     private static final String TEST_SERVICE = "org.apache.dubbo.metadata.store.nacos.NacosMetadata4TstService";
     private NacosMetadataReport nacosMetadataReport;
     private NacosMetadataReportFactory nacosMetadataReportFactory;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -58,7 +58,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import static org.apache.dubbo.common.constants.RegistryConstants.ROUTER_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.ROUTER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ANY_VALUE;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.DISABLED_KEY;
@@ -67,13 +67,13 @@
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
 import static org.apache.dubbo.common.constants.ConfigConstants.DUBBO_PROTOCOL;
-import static org.apache.dubbo.common.constants.RegistryConstants.REFER_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.MONITOR_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.APP_DYNAMIC_CONFIGURATORS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CATEGORY_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.COMPATIBLE_CONFIG_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONFIGURATORS_CATEGORY;
-import static org.apache.dubbo.common.constants.RegistryConstants.CONFIGURATORS_SUFFIX;
+import static org.apache.dubbo.registry.Constants.CONFIGURATORS_SUFFIX;
 import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.DYNAMIC_CONFIGURATORS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.EMPTY_PROTOCOL;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java
Patch:
@@ -58,7 +58,7 @@
 import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.DYNAMIC_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.EMPTY_PROTOCOL;
-import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_FILESAVE_SYNC_KEY;
+import static org.apache.dubbo.registry.Constants.REGISTRY_FILESAVE_SYNC_KEY;
 
 /**
  * AbstractRegistry. (SPI, Prototype, ThreadSafe)

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -31,8 +31,8 @@
 import java.util.concurrent.locks.ReentrantLock;
 
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.EXPORT_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.REFER_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 
 /**
  * AbstractRegistryFactory. (SPI, Singleton, ThreadSafe)

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
Patch:
@@ -38,9 +38,9 @@
 import java.util.concurrent.TimeUnit;
 
 import static org.apache.dubbo.common.constants.CommonConstants.FILE_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.CONSUMER_PROTOCOL;
-import static org.apache.dubbo.common.constants.RegistryConstants.DEFAULT_REGISTRY_RETRY_PERIOD;
-import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_RETRY_PERIOD_KEY;
+import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
+import static org.apache.dubbo.registry.Constants.DEFAULT_REGISTRY_RETRY_PERIOD;
+import static org.apache.dubbo.registry.Constants.REGISTRY_RETRY_PERIOD_KEY;
 
 /**
  * FailbackRegistry. (SPI, Prototype, ThreadSafe)

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/support/FailbackRegistryTest.java
Patch:
@@ -30,8 +30,8 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 
-import static org.apache.dubbo.common.constants.RegistryConstants.CONSUMER_PROTOCOL;
-import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_RETRY_PERIOD_KEY;
+import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
+import static org.apache.dubbo.registry.Constants.REGISTRY_RETRY_PERIOD_KEY;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class FailbackRegistryTest {

File: dubbo-registry/dubbo-registry-consul/src/main/java/org/apache/dubbo/registry/consul/ConsulRegistry.java
Patch:
@@ -49,8 +49,8 @@
 
 import static java.util.concurrent.Executors.newCachedThreadPool;
 import static org.apache.dubbo.common.constants.CommonConstants.ANY_VALUE;
-import static org.apache.dubbo.common.constants.RegistryConstants.CONSUMER_PROTOCOL;
-import static org.apache.dubbo.common.constants.RegistryConstants.PROVIDER_PROTOCOL;
+import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
+import static org.apache.dubbo.registry.Constants.PROVIDER_PROTOCOL;
 
 /**
  * registry center implementation for consul

File: dubbo-registry/dubbo-registry-default/src/main/java/org/apache/dubbo/registry/dubbo/DubboRegistry.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.ReentrantLock;
 
-import static org.apache.dubbo.common.constants.RegistryConstants.REGISTRY_RECONNECT_PERIOD_KEY;
+import static org.apache.dubbo.registry.Constants.REGISTRY_RECONNECT_PERIOD_KEY;
 
 /**
  * DubboRegistry

File: dubbo-registry/dubbo-registry-default/src/main/java/org/apache/dubbo/registry/dubbo/DubboRegistryFactory.java
Patch:
@@ -41,10 +41,10 @@
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.METHODS_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.EXPORT_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.apache.dubbo.rpc.Constants.LAZY_CONNECT_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.REFER_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.CONSUMER_PROTOCOL;
+import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
+import static org.apache.dubbo.registry.Constants.CONSUMER_PROTOCOL;
 import static org.apache.dubbo.common.constants.RemotingConstants.BACKUP_KEY;
 import static org.apache.dubbo.remoting.Constants.CONNECT_TIMEOUT_KEY;
 import static org.apache.dubbo.remoting.Constants.RECONNECT_KEY;

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/RegistryDirectoryTest.java
Patch:
@@ -52,7 +52,7 @@
 import static org.apache.dubbo.rpc.cluster.Constants.INVOCATION_NEED_MOCK;
 import static org.apache.dubbo.rpc.cluster.Constants.LOADBALANCE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.MOCK_PROTOCOL;
-import static org.apache.dubbo.common.constants.RegistryConstants.ROUTER_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.ROUTER_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.RULE_KEY;
 import static org.apache.dubbo.rpc.cluster.Constants.TYPE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;
@@ -61,7 +61,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.DISABLED_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.ENABLED_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.REFER_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.REFER_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CATEGORY_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONFIGURATORS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.EMPTY_PROTOCOL;

File: dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/RegistryProtocolTest.java
Patch:
@@ -41,7 +41,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.apache.dubbo.common.constants.RegistryConstants.EXPORT_KEY;
+import static org.apache.dubbo.rpc.cluster.Constants.EXPORT_KEY;
 import static org.apache.dubbo.registry.integration.RegistryProtocol.DEFAULT_REGISTER_PROVIDER_KEYS;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 

File: dubbo-registry/dubbo-registry-etcd3/src/main/java/org/apache/dubbo/registry/etcd/EtcdRegistry.java
Patch:
@@ -41,10 +41,10 @@
 import org.apache.dubbo.registry.NotifyListener;
 import org.apache.dubbo.registry.support.FailbackRegistry;
 import org.apache.dubbo.remoting.etcd.ChildListener;
+import org.apache.dubbo.remoting.etcd.Constants;
 import org.apache.dubbo.remoting.etcd.EtcdClient;
 import org.apache.dubbo.remoting.etcd.EtcdTransporter;
 import org.apache.dubbo.remoting.etcd.StateListener;
-import org.apache.dubbo.remoting.etcd.option.Constants;
 import org.apache.dubbo.remoting.etcd.option.OptionUtil;
 import org.apache.dubbo.rpc.RpcException;
 

File: dubbo-registry/dubbo-registry-etcd3/src/test/java/org/apache/dubbo/registry/etcd/EtcdRegistryTest.java
Patch:
@@ -79,7 +79,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.INTERFACE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.ADMIN_PROTOCOL;
+import static org.apache.dubbo.registry.Constants.ADMIN_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.CATEGORY_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONFIGURATORS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONSUMERS_CATEGORY;

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java
Patch:
@@ -52,7 +52,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
-import static org.apache.dubbo.common.constants.RegistryConstants.ADMIN_PROTOCOL;
+import static org.apache.dubbo.registry.Constants.ADMIN_PROTOCOL;
 import static org.apache.dubbo.common.constants.RegistryConstants.CATEGORY_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONFIGURATORS_CATEGORY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CONSUMERS_CATEGORY;

File: dubbo-remoting/dubbo-remoting-etcd3/src/test/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClientTest.java
Patch:
@@ -64,7 +64,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
-import static org.apache.dubbo.common.constants.RegistryConstants.SESSION_TIMEOUT_KEY;
+import static org.apache.dubbo.remoting.etcd.Constants.SESSION_TIMEOUT_KEY;
 
 @Disabled
 public class JEtcdClientTest {

File: dubbo-remoting/dubbo-remoting-etcd3/src/test/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClientWrapperTest.java
Patch:
@@ -49,7 +49,7 @@
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.locks.LockSupport;
 
-import static org.apache.dubbo.common.constants.RegistryConstants.SESSION_TIMEOUT_KEY;
+import static org.apache.dubbo.remoting.etcd.Constants.SESSION_TIMEOUT_KEY;
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.spy;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AsyncToSyncInvoker.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dubbo.rpc.RpcInvocation;
 
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
 
 /**
  * This class will work as a wrapper wrapping outside of each protocol invoker.
@@ -51,7 +52,7 @@ public Result invoke(Invocation invocation) throws RpcException {
 
         try {
             if (InvokeMode.SYNC == ((RpcInvocation)invocation).getInvokeMode()) {
-                asyncResult.get();
+                asyncResult.get(invoker.getUrl().getMethodParameter(invocation.getMethodName(), "timeout", 1000), TimeUnit.MILLISECONDS);
             }
         } catch (InterruptedException e) {
             throw new RpcException("Interrupted unexpectedly while waiting for remoting result to return!  method: " + invocation.getMethodName() + ", provider: " + getUrl() + ", cause: " + e.getMessage(), e);

File: dubbo-configcenter/dubbo-configcenter-nacos/src/test/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfigurationTest.java
Patch:
@@ -36,7 +36,8 @@
 /**
  * Unit test for nacos config center support
  */
-@Disabled
+//FIXME: waiting for embedded Nacos suport, then we can open the switch.
+@Disabled("https://github.com/alibaba/nacos/issues/1188")
 public class NacosDynamicConfigurationTest {
 
     private static NacosDynamicConfiguration config;

File: dubbo-metadata-report/dubbo-metadata-report-nacos/src/test/java/org/apache/dubbo/metadata/store/nacos/NacosMetadataReportTest.java
Patch:
@@ -37,7 +37,8 @@
 import static org.apache.dubbo.common.constants.CommonConstants.PROVIDER_SIDE;
 import static org.apache.dubbo.common.constants.RegistryConstants.SESSION_TIMEOUT_KEY;
 
-@Disabled
+//FIXME: waiting for embedded Nacos suport, then we can open the switch.
+@Disabled("https://github.com/alibaba/nacos/issues/1188")
 public class NacosMetadataReportTest {
     private static final String TEST_SERVICE = "org.apache.dubbo.metadata.store.nacos.NacosMetadata4TstService";
     private NacosMetadataReport nacosMetadataReport;

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invocation.java
Patch:
@@ -29,7 +29,7 @@ default org.apache.dubbo.rpc.Invocation getOriginal() {
         return null;
     }
 
-    class CompatibleInvocation implements Invocation {
+    class CompatibleInvocation implements Invocation, org.apache.dubbo.rpc.Invocation {
 
         private org.apache.dubbo.rpc.Invocation delegate;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/AbstractConfigurator.java
Patch:
@@ -38,6 +38,7 @@
 import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;
 import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.CATEGORY_KEY;
+import static org.apache.dubbo.common.constants.RegistryConstants.COMPATIBLE_CONFIG_KEY;
 import static org.apache.dubbo.common.constants.RegistryConstants.DYNAMIC_KEY;
 
 /**
@@ -126,6 +127,7 @@ private URL configureIfMatch(String host, URL url) {
                     conditionKeys.add(APPLICATION_KEY);
                     conditionKeys.add(SIDE_KEY);
                     conditionKeys.add(CONFIG_VERSION_KEY);
+                    conditionKeys.add(COMPATIBLE_CONFIG_KEY);
                     for (Map.Entry<String, String> entry : configuratorUrl.getParameters().entrySet()) {
                         String key = entry.getKey();
                         String value = entry.getValue();

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -73,12 +73,13 @@ protected Object decodeBody(Channel channel, InputStream is, byte[] header) thro
             byte status = header[3];
             res.setStatus(status);
             try {
-                ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);
                 if (status == Response.OK) {
                     Object data;
                     if (res.isHeartbeat()) {
+                        ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);
                         data = decodeHeartbeatData(channel, in);
                     } else if (res.isEvent()) {
+                        ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);
                         data = decodeEventData(channel, in);
                     } else {
                         DecodeableRpcResult result;
@@ -97,6 +98,7 @@ protected Object decodeBody(Channel channel, InputStream is, byte[] header) thro
                     }
                     res.setResult(data);
                 } else {
+                    ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);
                     res.setErrorMessage(in.readUTF());
                 }
             } catch (Throwable t) {

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java
Patch:
@@ -97,7 +97,7 @@ public Object decode(Channel channel, InputStream input) throws IOException {
                 handleAttachment(in);
                 break;
             default:
-                throw new IOException("Unknown result flag, expect '0' '1' '2', get " + flag);
+                throw new IOException("Unknown result flag, expect '0' '1' '2' '3' '4' '5', but received: " + flag);
         }
         if (in instanceof Cleanable) {
             ((Cleanable) in).cleanup();

File: dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java
Patch:
@@ -727,6 +727,8 @@ public class Constants {
 
     public static final String GENERIC_SERIALIZATION_BEAN = "bean";
 
+    public static final String GENERIC_SERIALIZATION_PROTOBUF = "protobuf-json";
+
     public static final String DUBBO_IP_TO_REGISTRY = "DUBBO_IP_TO_REGISTRY";
 
     public static final String DUBBO_PORT_TO_REGISTRY = "DUBBO_PORT_TO_REGISTRY";

File: dubbo-demo/dubbo-demo-api/dubbo-demo-api-provider/src/main/java/org/apache/dubbo/demo/provider/Application.java
Patch:
@@ -29,10 +29,9 @@ public class Application {
      * launch the application
      */
     public static void main(String[] args) throws Exception {
-        System.setProperty("DUBBO_IP_TO_REGISTRY", "4.3.2.1");
         ServiceConfig<DemoServiceImpl> service = new ServiceConfig<>();
         service.setApplication(new ApplicationConfig("dubbo-demo-api-provider"));
-        service.setRegistry(new RegistryConfig("zookeeper://127.0.0.1:2181"));
+        service.setRegistry(new RegistryConfig("multicast://224.5.6.7:1234"));
         service.setInterface(DemoService.class);
         service.setRef(new DemoServiceImpl());
         service.export();

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodec.java
Patch:
@@ -278,7 +278,7 @@ private Object decode(TProtocol protocol)
             TApplicationException exception;
 
             try {
-                exception = TApplicationException.read(protocol);
+                exception = TApplicationException.readFrom(protocol);
                 protocol.readMessageEnd();
             } catch (TException e) {
                 throw new IOException(e.getMessage(), e);

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftNativeCodec.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.remoting.exchange.Request;
 import org.apache.dubbo.remoting.exchange.Response;
 import org.apache.dubbo.rpc.Invocation;
-
 import org.apache.thrift.TException;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.protocol.TMessage;

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ext/MultiServiceProcessor.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.rpc.protocol.thrift.ThriftCodec;
-
 import org.apache.thrift.TException;
 import org.apache.thrift.TProcessor;
 import org.apache.thrift.protocol.TBinaryProtocol;

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/ClassNameTest.java
Patch:
@@ -16,7 +16,6 @@
  */
 
 import org.apache.dubbo.rpc.protocol.thrift.ThriftUtils;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/org/apache/dubbo/rpc/protocol/thrift/AbstractTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.rpc.gen.dubbo.$__DemoStub;
 import org.apache.dubbo.rpc.gen.dubbo.Demo;
 import org.apache.dubbo.rpc.protocol.thrift.ext.MultiServiceProcessor;
-
 import org.apache.thrift.TProcessor;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.server.TServer;

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/org/apache/dubbo/rpc/protocol/thrift/ServerExceptionTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
 import org.apache.dubbo.rpc.gen.dubbo.$__DemoStub;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/org/apache/dubbo/rpc/protocol/thrift/ServiceMethodNotFoundTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.rpc.gen.dubbo.$__DemoStub;
 import org.apache.dubbo.rpc.gen.dubbo.Demo;
 import org.apache.dubbo.rpc.protocol.thrift.ext.MultiServiceProcessor;
-
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.server.TThreadPoolServer;
 import org.apache.thrift.transport.TServerSocket;

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodecTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.gen.thrift.Demo;
 import org.apache.dubbo.rpc.protocol.thrift.io.RandomAccessByteArrayOutputStream;
-
 import org.apache.thrift.TApplicationException;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.protocol.TMessage;
@@ -376,7 +375,7 @@ public void testEncodeExceptionResponse() throws Exception {
         Assertions.assertEquals("echoString", message.name);
         Assertions.assertEquals(TMessageType.EXCEPTION, message.type);
         Assertions.assertEquals(ThriftCodec.getSeqId(), message.seqid);
-        TApplicationException exception = TApplicationException.read(protocol);
+        TApplicationException exception = TApplicationException.readFrom(protocol);
         protocol.readMessageEnd();
 
         Assertions.assertEquals(exceptionMessage, exception.getMessage());

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocolTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.gen.dubbo.Demo;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/org/apache/dubbo/rpc/protocol/thrift/ThriftUtilsTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.rpc.gen.dubbo.$__DemoStub;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/org/apache/dubbo/rpc/protocol/thrift/examples/DubboDemoConsumer.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.rpc.protocol.thrift.examples;
 
 import org.apache.dubbo.rpc.gen.thrift.Demo;
-
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 
 public class DubboDemoConsumer {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.stream.Collectors;
 
 /**
@@ -63,7 +63,7 @@ private RouterChain(URL url) {
      */
     public void initWithRouters(List<Router> builtinRouters) {
         this.builtinRouters = builtinRouters;
-        this.routers = new CopyOnWriteArrayList<>(builtinRouters);
+        this.routers = new ArrayList<>(builtinRouters);
         this.sort();
     }
 
@@ -76,7 +76,7 @@ public void initWithRouters(List<Router> builtinRouters) {
      * @param routers routers from 'router://' rules in 2.6.x or before.
      */
     public void addRouters(List<Router> routers) {
-        List<Router> newRouters = new CopyOnWriteArrayList<>();
+        List<Router> newRouters = new ArrayList<>();
         newRouters.addAll(builtinRouters);
         newRouters.addAll(routers);
         CollectionUtils.sort(routers);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/CodecSupport.java
Patch:
@@ -71,7 +71,8 @@ public static Serialization getSerialization(URL url, Byte id) throws IOExceptio
         String serializationName = url.getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION);
         // Check if "serialization id" passed from network matches the id on this side(only take effect for JDK serialization), for security purpose.
         if (serialization == null
-                || ((id == 3 || id == 7 || id == 4) && !(serializationName.equals(ID_SERIALIZATIONNAME_MAP.get(id))))) {
+                || ((id == Constants.JAVA_SERIALIZATION_ID || id == Constants.NATIVE_JAVA_SERIALIZATION_ID || id == Constants.COMPACTED_JAVA_SERIALIZATION_ID)
+                && !(serializationName.equals(ID_SERIALIZATIONNAME_MAP.get(id))))) {
             throw new IOException("Unexpected serialization id:" + id + " received from network, please check if the peer send the right id.");
         }
         return serialization;

File: dubbo-serialization/dubbo-serialization-avro/src/main/java/org/apache/dubbo/common/serialize/avro/AvroSerialization.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.serialize.avro;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
@@ -29,7 +30,7 @@ public class AvroSerialization implements Serialization {
 
     @Override
     public byte getContentTypeId() {
-        return 10;
+        return Constants.AVRO_SERIALIZATION_ID;
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonSerialization.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.serialize.fastjson;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
@@ -36,7 +37,7 @@ public class FastJsonSerialization implements Serialization {
 
     @Override
     public byte getContentTypeId() {
-        return 6;
+        return Constants.FASTJSON_SERIALIZATION_ID;
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-fst/src/main/java/org/apache/dubbo/common/serialize/fst/FstSerialization.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.serialize.fst;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
@@ -36,7 +37,7 @@ public class FstSerialization implements Serialization {
 
     @Override
     public byte getContentTypeId() {
-        return 9;
+        return Constants.FST_SERIALIZATION_ID;
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-gson/src/main/java/org/apache/dubbo/common/serialize/gson/GsonSerialization.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dubbo.common.serialize.gson;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
@@ -31,7 +32,7 @@ public class GsonSerialization implements Serialization {
 
     @Override
     public byte getContentTypeId() {
-        return 16;
+        return Constants.GSON_SERIALIZATION_ID;
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/Hessian2Serialization.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.serialize.hessian2;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
@@ -34,11 +35,9 @@
  */
 public class Hessian2Serialization implements Serialization {
 
-    public static final byte ID = 2;
-
     @Override
     public byte getContentTypeId() {
-        return ID;
+        return Constants.HESSIAN2_SERIALIZATION_ID;
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/CompactedJavaSerialization.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.serialize.java;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
@@ -36,7 +37,7 @@ public class CompactedJavaSerialization implements Serialization {
 
     @Override
     public byte getContentTypeId() {
-        return 4;
+        return Constants.COMPACTED_JAVA_SERIALIZATION_ID;
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/JavaSerialization.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.serialize.java;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
@@ -36,7 +37,7 @@ public class JavaSerialization implements Serialization {
 
     @Override
     public byte getContentTypeId() {
-        return 3;
+        return Constants.JAVA_SERIALIZATION_ID;
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/nativejava/NativeJavaSerialization.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dubbo.common.serialize.nativejava;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
@@ -35,11 +36,10 @@
  */
 public class NativeJavaSerialization implements Serialization {
 
-    public static final String NAME = "nativejava";
 
     @Override
     public byte getContentTypeId() {
-        return 7;
+        return Constants.NATIVE_JAVA_SERIALIZATION_ID;
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-kryo/src/main/java/org/apache/dubbo/common/serialize/kryo/KryoSerialization.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.serialize.kryo;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
@@ -36,7 +37,7 @@ public class KryoSerialization implements Serialization {
 
     @Override
     public byte getContentTypeId() {
-        return 8;
+        return Constants.KRYO_SERIALIZATION_ID;
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffSerialization.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dubbo.common.serialize.protostuff;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
@@ -36,7 +37,7 @@
 public class ProtostuffSerialization implements Serialization {
     @Override
     public byte getContentTypeId() {
-        return 10;
+        return Constants.PROTOSTUFF_SERIALIZATION_ID;
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/avro/AvroSerializationTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.serialize.avro;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
 import org.hamcrest.Matchers;
@@ -46,7 +47,7 @@ public void testContentType() {
 
     @Test
     public void testContentTypeId() {
-        assertThat(avroSerialization.getContentTypeId(), is((byte) 10));
+        assertThat(avroSerialization.getContentTypeId(), is(Constants.AVRO_SERIALIZATION_ID));
     }
 
     @Test

File: dubbo-configcenter/dubbo-configcenter-etcd/src/test/java/org/apache/dubbo/configcenter/support/etcd/EtcdDynamicConfigurationTest.java
Patch:
@@ -120,7 +120,6 @@ public String getValue() {
 
     private void put(String key, String value) {
         try {
-
             client.getKVClient().put(ByteSequence.from(key, UTF_8), ByteSequence.from(value, UTF_8)).get();
         } catch (Exception e) {
             System.out.println("Error put value to etcd.");

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/store/MetadataReport.java
Patch:
@@ -26,9 +26,6 @@
  */
 public interface MetadataReport {
 
-    public static final String META_DATA_STORE_TAG = ".metaData";
-
-
     void storeProviderMetadata(MetadataIdentifier providerMetadataIdentifier, FullServiceDefinition serviceDefinition);
 
     void storeConsumerMetadata(MetadataIdentifier consumerMetadataIdentifier, Map<String, String> serviceParameterMap);

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/store/test/JTestMetadataReport4Test.java
Patch:
@@ -54,7 +54,7 @@ protected void doStoreProviderMetadata(MetadataIdentifier providerMetadataIdenti
 
     @Override
     protected void doStoreConsumerMetadata(MetadataIdentifier consumerMetadataIdentifier, String serviceParameterString) {
-        store.put(consumerMetadataIdentifier.getIdentifierKey(), serviceParameterString);
+        store.put(consumerMetadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.UNIQUE_KEY), serviceParameterString);
     }
 
     public static String getProviderKey(URL url) {

File: dubbo-metadata-report/dubbo-metadata-report-consul/src/main/java/org/apache/dubbo/metadata/store/consul/ConsulMetadataReport.java
Patch:
@@ -55,7 +55,7 @@ protected void doStoreConsumerMetadata(MetadataIdentifier consumerMetadataIdenti
 
     private void storeMetadata(MetadataIdentifier identifier, String v) {
         try {
-            client.setKVValue(identifier.getIdentifierKey() + META_DATA_STORE_TAG, v);
+            client.setKVValue(identifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.UNIQUE_KEY), v);
         } catch (Throwable t) {
             logger.error("Failed to put " + identifier + " to consul " + v + ", cause: " + t.getMessage(), t);
             throw new RpcException("Failed to put " + identifier + " to consul " + v + ", cause: " + t.getMessage(), t);

File: dubbo-metadata-report/dubbo-metadata-report-redis/src/main/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReport.java
Patch:
@@ -54,7 +54,7 @@ protected void doStoreConsumerMetadata(MetadataIdentifier consumerMetadataIdenti
 
     private void storeMetadata(MetadataIdentifier metadataIdentifier, String v) {
         try (Jedis jedis = pool.getResource()) {
-            jedis.set(metadataIdentifier.getIdentifierKey() + META_DATA_STORE_TAG, v);
+            jedis.set(metadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.UNIQUE_KEY), v);
         } catch (Throwable e) {
             logger.error("Failed to put " + metadataIdentifier + " to redis " + v + ", cause: " + e.getMessage(), e);
             throw new RpcException("Failed to put " + metadataIdentifier + " to redis " + v + ", cause: " + e.getMessage(), e);

File: dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/test/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
@@ -62,7 +61,7 @@ public void tearDown() throws Exception {
 
     private void deletePath(MetadataIdentifier metadataIdentifier, ZookeeperMetadataReport zookeeperMetadataReport) {
         String category = zookeeperMetadataReport.toRootDir() + metadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.PATH);
-        zookeeperMetadataReport.deletePath(category);
+        zookeeperMetadataReport.zkClient.delete(category);
     }
 
     @Test

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -360,6 +360,7 @@ private boolean shouldDelay() {
         if (delay == null && provider != null) {
             delay = provider.getDelay();
         }
+        this.delay = delay;
         return delay != null && delay > 0;
     }
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -88,7 +88,7 @@ public Result invoke(Invocation invocation) throws RpcException {
                 if (e.isBiz()) {
                     throw e;
                 }
-                
+
                 if (logger.isWarnEnabled()) {
                     logger.warn("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : " + directory.getUrl(), e);
                 }
@@ -105,7 +105,7 @@ private Result doMockInvoke(Invocation invocation, RpcException e) {
 
         List<Invoker<T>> mockInvokers = selectMockInvoker(invocation);
         if (CollectionUtils.isEmpty(mockInvokers)) {
-            minvoker = (Invoker<T>) new MockInvoker(directory.getUrl());
+            minvoker = (Invoker<T>) new MockInvoker(directory.getUrl(), directory.getInterface());
         } else {
             minvoker = mockInvokers.get(0);
         }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockProtocol.java
Patch:
@@ -39,6 +39,6 @@ public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
 
     @Override
     public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {
-        return new MockInvoker<T>(url);
+        return new MockInvoker<>(url, type);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/LeastActiveLoadBalance.java
Patch:
@@ -71,7 +71,7 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
                 leastActive = active;
                 // Reset the number of least active invokers
                 leastCount = 1;
-                // Put the first least active invoker first in leastIndexs
+                // Put the first least active invoker first in leastIndexes
                 leastIndexes[0] = i;
                 // Reset totalWeight
                 totalWeight = afterWarmup;
@@ -81,7 +81,7 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation
                 sameWeight = true;
                 // If current invoker's active value equals with leaseActive, then accumulating.
             } else if (active == leastActive) {
-                // Record the index of the least active invoker in leastIndexs order
+                // Record the index of the least active invoker in leastIndexes order
                 leastIndexes[leastCount++] = i;
                 // Accumulate the total weight of the least active invoker
                 totalWeight += afterWarmup;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LeastActiveBalanceTest.java
Patch:
@@ -35,7 +35,7 @@ public void testLeastActiveLoadBalance_select() {
             Long count = entry.getValue().get();
             //            System.out.println(count);
             Assertions.assertTrue(
-                    Math.abs(count - runs / (0f + invokers.size())) < runs / (0f + invokers.size()), "abs diff shoud < avg");
+                    Math.abs(count - runs / (0f + invokers.size())) < runs / (0f + invokers.size()), "abs diff should < avg");
         }
     }
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvokerTest.java
Patch:
@@ -80,7 +80,7 @@ private void resetInvoker1ToNoException() {
     }
 
     @Test
-    public void testInvokeExceptoin() {
+    public void testInvokeException() {
         Assertions.assertThrows(RpcException.class, () -> {
             resetInvoker1ToException();
             FailfastClusterInvoker<FailfastClusterInvokerTest> invoker = new FailfastClusterInvoker<FailfastClusterInvokerTest>(dic);
@@ -90,7 +90,7 @@ public void testInvokeExceptoin() {
     }
 
     @Test()
-    public void testInvokeNoExceptoin() {
+    public void testInvokeNoException() {
 
         resetInvoker1ToNoException();
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/AdaptiveClassCodeGenerator.java
Patch:
@@ -224,7 +224,7 @@ private String generateMethodContent(Method method) {
             code.append(generateExtensionAssignment());
 
             // return statement
-            code.append(generateReturnAndInovation(method));
+            code.append(generateReturnAndInvocation(method));
         }
         
         return code.toString();
@@ -292,7 +292,7 @@ private String generateExtensionAssignment() {
     /**
      * generate method invocation statement and return it if necessary
      */
-    private String generateReturnAndInovation(Method method) {
+    private String generateReturnAndInvocation(Method method) {
         String returnStatement = method.getReturnType().equals(void.class) ? "" : "return ";
         
         String args = Arrays.stream(method.getParameters()).map(Parameter::getName).collect(Collectors.joining(", "));

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java
Patch:
@@ -306,7 +306,7 @@ public void testRefreshAll() {
 
             System.setProperty("dubbo.override.address", "system://127.0.0.1:2181");
             System.setProperty("dubbo.override.protocol", "system");
-            // this will not override, use 'key' instread, @Parameter(key="key1", useKeyAsProperty=false)
+            // this will not override, use 'key' instead, @Parameter(key="key1", useKeyAsProperty=false)
             System.setProperty("dubbo.override.key1", "system");
             System.setProperty("dubbo.override.key2", "system");
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java
Patch:
@@ -192,7 +192,7 @@ protected void connect() throws RemotingException {
 
             } else {
                 if (logger.isInfoEnabled()) {
-                    logger.info("Successed connect to server " + getRemoteAddress() + " from " + getClass().getSimpleName() + " "
+                    logger.info("Succeed connect to server " + getRemoteAddress() + " from " + getClass().getSimpleName() + " "
                             + NetUtils.getLocalHost() + " using dubbo version " + Version.getVersion()
                             + ", channel is " + this.getChannel());
                 }

File: dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/support/AbstractEtcdClient.java
Patch:
@@ -58,7 +58,7 @@ public abstract class AbstractEtcdClient<WatcherListener> implements EtcdClient
     private final Set<StateListener> stateListeners = new ConcurrentHashSet<>();
 
     private final ConcurrentMap<String, ConcurrentMap<ChildListener, WatcherListener>> childListeners = new ConcurrentHashMap<>();
-    private final List<String> categroies = Arrays.asList(Constants.PROVIDERS_CATEGORY
+    private final List<String> categories = Arrays.asList(Constants.PROVIDERS_CATEGORY
             , Constants.CONSUMERS_CATEGORY
             , Constants.ROUTERS_CATEGORY
             , Constants.CONFIGURATORS_CATEGORY);
@@ -158,11 +158,11 @@ protected void createParentIfAbsent(String fixedPath) {
         int i = fixedPath.lastIndexOf('/');
         if (i > 0) {
             String parentPath = fixedPath.substring(0, i);
-            if (categroies.stream().anyMatch(c -> fixedPath.endsWith(c))) {
+            if (categories.stream().anyMatch(c -> fixedPath.endsWith(c))) {
                 if (!checkExists(parentPath)) {
                     this.doCreatePersistent(parentPath);
                 }
-            } else if (categroies.stream().anyMatch(c -> parentPath.endsWith(c))) {
+            } else if (categories.stream().anyMatch(c -> parentPath.endsWith(c))) {
                 String grandfather = parentPath.substring(0, parentPath.lastIndexOf('/'));
                 if (!checkExists(grandfather)) {
                     this.doCreatePersistent(grandfather);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractProtocol.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AbstractProtocol implements Protocol {
 
     protected final Map<String, Exporter<?>> exporterMap = new ConcurrentHashMap<String, Exporter<?>>();
 
-    //TODO SOFEREFENCE
+    //TODO SoftReference
     protected final Set<Invoker<?>> invokers = new ConcurrentHashSet<Invoker<?>>();
 
     protected static String serviceKey(URL url) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/NetUtilsTest.java
Patch:
@@ -106,6 +106,7 @@ public void testGetLocalSocketAddress() throws Exception {
 
     @Test
     public void testIsValidAddress() throws Exception {
+        assertFalse(NetUtils.isValidV4Address((InetAddress) null));
         InetAddress address = mock(InetAddress.class);
         when(address.isLoopbackAddress()).thenReturn(true);
         assertFalse(NetUtils.isValidV4Address(address));
@@ -132,6 +133,7 @@ public void testGetLocalHost() throws Exception {
     public void testGetLocalAddress() throws Exception {
         InetAddress address = NetUtils.getLocalAddress();
         assertNotNull(address);
+        assertTrue(NetUtils.isValidLocalHost(address.getHostAddress()));
     }
 
     @Test

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -343,6 +343,9 @@ protected URL loadMonitor(URL registryURL) {
         String hostToRegistry = ConfigUtils.getSystemProperty(Constants.DUBBO_IP_TO_REGISTRY);
         if (StringUtils.isEmpty(hostToRegistry)) {
             hostToRegistry = NetUtils.getLocalHost();
+        } else if (NetUtils.isInvalidLocalHost(hostToRegistry)) {
+            throw new IllegalArgumentException("Specified invalid registry ip from property:" +
+                    Constants.DUBBO_IP_TO_REGISTRY + ", value:" + hostToRegistry);
         }
         map.put(Constants.REGISTER_IP_KEY, hostToRegistry);
         appendParameters(map, monitor);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -431,7 +431,9 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r
         appendParameters(map, metrics);
         appendParameters(map, application);
         appendParameters(map, module);
-        appendParameters(map, provider, Constants.DEFAULT_KEY);
+        // remove 'default.' prefix for configs from ProviderConfig
+        // appendParameters(map, provider, Constants.DEFAULT_KEY);
+        appendParameters(map, provider);
         appendParameters(map, protocolConfig);
         appendParameters(map, this);
         if (CollectionUtils.isNotEmpty(methods)) {

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java
Patch:
@@ -134,7 +134,7 @@ public void testExport() throws Exception {
         assertThat(url.getParameters(), hasEntry(Constants.APPLICATION_KEY, "app"));
         assertThat(url.getParameters(), hasKey(Constants.BIND_IP_KEY));
         assertThat(url.getParameters(), hasKey(Constants.BIND_PORT_KEY));
-        assertThat(url.getParameters(), hasEntry(Constants.DEFAULT_KEY + "." + Constants.EXPORT_KEY, "true"));
+        assertThat(url.getParameters(), hasEntry(Constants.EXPORT_KEY, "true"));
         assertThat(url.getParameters(), hasEntry("echo.0.callback", "false"));
         assertThat(url.getParameters(), hasEntry(Constants.GENERIC_KEY, "false"));
         assertThat(url.getParameters(), hasEntry(Constants.INTERFACE_KEY, DemoService.class.getName()));

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/support/expiring/ExpiringCache.java
Patch:
@@ -48,7 +48,7 @@ public ExpiringCache(URL url) {
         final int secondsToLive = url.getParameter("cache.seconds", 180);
         // Cache check interval (second)
         final int intervalSeconds = url.getParameter("cache.interval", 4);
-        ExpiringMap<Object, Object> expiringMap = new ExpiringMap<Object, Object>(secondsToLive, intervalSeconds);
+        ExpiringMap<Object, Object> expiringMap = new ExpiringMap<>(secondsToLive, intervalSeconds);
         expiringMap.getExpireThread().startExpiryIfNotStarted();
         this.store = expiringMap;
     }

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/support/expiring/ExpiringMap.java
Patch:
@@ -60,7 +60,7 @@ public ExpiringMap(int timeToLive) {
     }
 
     public ExpiringMap(int timeToLive, int expirationInterval) {
-        this(new ConcurrentHashMap<K, ExpiryObject>(), timeToLive, expirationInterval);
+        this(new ConcurrentHashMap<>(), timeToLive, expirationInterval);
     }
 
     private ExpiringMap(ConcurrentHashMap<K, ExpiryObject> delegateMap, int timeToLive, int expirationInterval) {

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/support/jcache/JCache.java
Patch:
@@ -57,7 +57,7 @@ public JCache(URL url) {
             try {
                 //configure the cache
                 MutableConfiguration config =
-                        new MutableConfiguration<Object, Object>()
+                        new MutableConfiguration<>()
                                 .setTypes(Object.class, Object.class)
                                 .setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(new Duration(TimeUnit.MILLISECONDS, url.getMethodParameter(method, "cache.write.expire", 60 * 1000))))
                                 .setStoreByValue(false)

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/support/lru/LruCache.java
Patch:
@@ -54,7 +54,7 @@ public class LruCache implements Cache {
      */
     public LruCache(URL url) {
         final int max = url.getParameter("cache.size", 1000);
-        this.store = new LRUCache<Object, Object>(max);
+        this.store = new LRUCache<>(max);
     }
 
     /**

File: dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/AbstractValidation.java
Patch:
@@ -33,7 +33,7 @@
  */
 public abstract class AbstractValidation implements Validation {
 
-    private final ConcurrentMap<String, Validator> validators = new ConcurrentHashMap<String, Validator>();
+    private final ConcurrentMap<String, Validator> validators = new ConcurrentHashMap<>();
 
     @Override
     public Validator getValidator(URL url) {

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/CollectionTypeBuilder.java
Patch:
@@ -50,7 +50,7 @@ public TypeDefinition build(Type type, Class<?> clazz, Map<Class<?>, TypeDefinit
         if (actualTypeArgs == null || actualTypeArgs.length != 1) {
             throw new IllegalArgumentException(MessageFormat.format(
                     "[ServiceDefinitionBuilder] Collection type [{0}] with unexpected amount of arguments [{1}]." + Arrays.toString(actualTypeArgs),
-                    new Object[]{type, actualTypeArgs}));
+                    type, actualTypeArgs));
         }
 
         Type actualType = actualTypeArgs[0];

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/EnumTypeBuilder.java
Patch:
@@ -40,7 +40,7 @@ public TypeDefinition build(Type type, Class<?> clazz, Map<Class<?>, TypeDefinit
         TypeDefinition td = new TypeDefinition(clazz.getCanonicalName());
 
         try {
-            Method methodValues = clazz.getDeclaredMethod("values", new Class<?>[0]);
+            Method methodValues = clazz.getDeclaredMethod("values");
             Object[] values = (Object[]) methodValues.invoke(clazz, new Object[0]);
             int length = values.length;
             for (int i = 0; i < length; i++) {

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/MapTypeBuilder.java
Patch:
@@ -48,8 +48,7 @@ public TypeDefinition build(Type type, Class<?> clazz, Map<Class<?>, TypeDefinit
         Type[] actualTypeArgs = parameterizedType.getActualTypeArguments();
         if (actualTypeArgs == null || actualTypeArgs.length != 2) {
             throw new IllegalArgumentException(MessageFormat.format(
-                    "[ServiceDefinitionBuilder] Map type [{0}] with unexpected amount of arguments [{1}]." + Arrays.toString(actualTypeArgs), new Object[]{
-                            type, actualTypeArgs}));
+                    "[ServiceDefinitionBuilder] Map type [{0}] with unexpected amount of arguments [{1}]." + Arrays.toString(actualTypeArgs), type, actualTypeArgs));
         }
 
         for (Type actualType : actualTypeArgs) {

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/model/MethodDefinition.java
Patch:
@@ -37,7 +37,7 @@ public String getName() {
 
     public List<TypeDefinition> getParameters() {
         if (parameters == null) {
-            parameters = new ArrayList<TypeDefinition>();
+            parameters = new ArrayList<>();
         }
         return parameters;
     }

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/model/ServiceDefinition.java
Patch:
@@ -40,14 +40,14 @@ public String getCodeSource() {
 
     public List<MethodDefinition> getMethods() {
         if (methods == null) {
-            methods = new ArrayList<MethodDefinition>();
+            methods = new ArrayList<>();
         }
         return methods;
     }
 
     public List<TypeDefinition> getTypes() {
         if (types == null) {
-            types = new ArrayList<TypeDefinition>();
+            types = new ArrayList<>();
         }
         return types;
     }

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/model/TypeDefinition.java
Patch:
@@ -59,14 +59,14 @@ public String getId() {
 
     public List<TypeDefinition> getItems() {
         if (items == null) {
-            items = new ArrayList<TypeDefinition>();
+            items = new ArrayList<>();
         }
         return items;
     }
 
     public Map<String, TypeDefinition> getProperties() {
         if (properties == null) {
-            properties = new HashMap<String, TypeDefinition>();
+            properties = new HashMap<>();
         }
         return properties;
     }

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/util/ClassUtils.java
Patch:
@@ -64,7 +64,7 @@ public static String getCodeSource(Class<?> clazz) {
      * @return field list
      */
     public static List<Field> getNonStaticFields(final Class<?> clazz) {
-        List<Field> result = new ArrayList<Field>();
+        List<Field> result = new ArrayList<>();
         Class<?> target = clazz;
         while (target != null) {
             if (JaketConfigurationUtils.isExcludedType(target)) {

File: dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java
Patch:
@@ -871,6 +871,8 @@ public class Constants {
     public static final String METHOD = "method";
     public static final String DUBBO_GROUP = "dubbo";
     public static final String METRICS_KEY = "metrics";
+    public static final String METRICS_PORT = "metrics.port";
+    public static final String METRICS_PROTOCOL = "metrics.protocol";
 
 
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -260,6 +260,7 @@ private void init() {
         Map<String, String> map = new HashMap<String, String>();
 
         map.put(Constants.SIDE_KEY, Constants.CONSUMER_SIDE);
+
         appendRuntimeParameters(map);
         if (!isGeneric()) {
             String revision = Version.getVersion(interfaceClass, version);
@@ -276,6 +277,7 @@ private void init() {
             }
         }
         map.put(Constants.INTERFACE_KEY, interfaceName);
+        appendParameters(map, metrics);
         appendParameters(map, application);
         appendParameters(map, module);
         appendParameters(map, consumer, Constants.DEFAULT_KEY);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -426,7 +426,9 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r
 
         Map<String, String> map = new HashMap<String, String>();
         map.put(Constants.SIDE_KEY, Constants.PROVIDER_SIDE);
+
         appendRuntimeParameters(map);
+        appendParameters(map, metrics);
         appendParameters(map, application);
         appendParameters(map, module);
         appendParameters(map, provider, Constants.DEFAULT_KEY);

File: dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/service/DemoService.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.monitor.service;
+package org.apache.dubbo.monitor.dubbo.service;
 
 public interface DemoService {
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java
Patch:
@@ -136,14 +136,16 @@ private static BeanDefinition parse(Element element, ParserContext parserContext
                 String beanProperty = name.substring(3, 4).toLowerCase() + name.substring(4);
                 String property = StringUtils.camelToSplitName(beanProperty, "-");
                 props.add(property);
+                // check the setter/getter whether match
                 Method getter = null;
                 try {
                     getter = beanClass.getMethod("get" + name.substring(3), new Class<?>[0]);
                 } catch (NoSuchMethodException e) {
                     try {
                         getter = beanClass.getMethod("is" + name.substring(3), new Class<?>[0]);
                     } catch (NoSuchMethodException e2) {
-                        logger.error("Method " + name + " parse error,  cause: " + e2.getMessage(), e2);
+                        // ignore, there is no need any log here since some class implement the interface: EnvironmentAware,
+                        // ApplicationAware, etc. They only have setter method, otherwise will cause the error log during application start up.
                     }
                 }
                 if (getter == null

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvoker.java
Patch:
@@ -24,11 +24,11 @@
 import org.apache.dubbo.common.timer.Timer;
 import org.apache.dubbo.common.timer.TimerTask;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
+import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.cluster.Directory;
 import org.apache.dubbo.rpc.cluster.LoadBalance;
 
@@ -99,7 +99,7 @@ protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, Load
             logger.error("Failback to invoke method " + invocation.getMethodName() + ", wait for retry in background. Ignored exception: "
                     + e.getMessage() + ", ", e);
             addFailed(loadbalance, invocation, invokers, invoker);
-            return new RpcResult(); // ignore
+            return AsyncRpcResult.newDefaultAsyncResult(null, null, invocation); // ignore
         }
     }
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailsafeClusterInvoker.java
Patch:
@@ -18,11 +18,11 @@
 
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.cluster.Directory;
 import org.apache.dubbo.rpc.cluster.LoadBalance;
 
@@ -50,7 +50,7 @@ public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBal
             return invoker.invoke(invocation);
         } catch (Throwable e) {
             logger.error("Failsafe ignore exception: " + e.getMessage(), e);
-            return new RpcResult(); // ignore
+            return AsyncRpcResult.newDefaultAsyncResult(null, null, invocation); // ignore
         }
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvoker.java
Patch:
@@ -36,6 +36,8 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
+ * NOTICE! This implementation does not work well with async call.
+ *
  * Invoke a specific number of invokers concurrently, usually used for demanding real-time operations, but need to waste more service resources.
  *
  * <a href="http://en.wikipedia.org/wiki/Fork_(topology)">Fork</a>
@@ -66,7 +68,6 @@ public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, L
             } else {
                 selected = new ArrayList<>();
                 for (int i = 0; i < forks; i++) {
-                    // TODO. Add some comment here, refer chinese version for more details.
                     Invoker<T> invoker = select(loadbalance, invocation, invokers, selected);
                     if (!selected.contains(invoker)) {
                         //Avoid add the same invoker several times.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -22,12 +22,12 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.cluster.Directory;
 import org.apache.dubbo.rpc.support.MockInvoker;
 
@@ -113,7 +113,7 @@ private Result doMockInvoke(Invocation invocation, RpcException e) {
             result = minvoker.invoke(invocation);
         } catch (RpcException me) {
             if (me.isBiz()) {
-                result = new RpcResult(me.getCause());
+                result = AsyncRpcResult.newDefaultAsyncResult(me.getCause(), invocation);
             } else {
                 throw new RpcException(me.getCode(), getMockExceptionMessage(e, me), me.getCause());
             }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/StickyTest.java
Patch:
@@ -20,12 +20,12 @@
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker;
 
 import org.junit.jupiter.api.Assertions;
@@ -48,7 +48,7 @@ public class StickyTest {
     private  Invoker<StickyTest> invoker2 = mock(Invoker.class);
     private RpcInvocation invocation;
     private Directory<StickyTest> dic;
-    private Result result = new RpcResult();
+    private Result result = new AppResponse();
     private StickyClusterInvoker<StickyTest> clusterinvoker = null;
     private URL url = URL.valueOf("test://test:11/test?"
                     + "&loadbalance=roundrobin"

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java
Patch:
@@ -19,12 +19,12 @@
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.cluster.Directory;
 import org.apache.dubbo.rpc.cluster.LoadBalance;
 import org.apache.dubbo.rpc.cluster.RouterFactory;
@@ -52,7 +52,7 @@ public class FileRouterEngineTest {
     Invoker<FileRouterEngineTest> invoker2 = mock(Invoker.class);
     Invocation invocation;
     StaticDirectory<FileRouterEngineTest> dic;
-    Result result = new RpcResult();
+    Result result = new AppResponse();
     private RouterFactory routerFactory = ExtensionLoader.getExtensionLoader(RouterFactory.class).getAdaptiveExtension();
 
     @BeforeAll

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailSafeClusterInvokerTest.java
Patch:
@@ -18,11 +18,11 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.LogUtil;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.cluster.Directory;
 import org.apache.dubbo.rpc.cluster.filter.DemoService;
 
@@ -48,7 +48,7 @@ public class FailSafeClusterInvokerTest {
     Invoker<DemoService> invoker = mock(Invoker.class);
     RpcInvocation invocation = new RpcInvocation();
     Directory<DemoService> dic;
-    Result result = new RpcResult();
+    Result result = new AppResponse();
 
     /**
      * @throws java.lang.Exception

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvokerTest.java
Patch:
@@ -20,11 +20,11 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.DubboAppender;
 import org.apache.dubbo.common.utils.LogUtil;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.cluster.Directory;
 
 import org.apache.log4j.Level;
@@ -59,7 +59,7 @@ public class FailbackClusterInvokerTest {
     Invoker<FailbackClusterInvokerTest> invoker = mock(Invoker.class);
     RpcInvocation invocation = new RpcInvocation();
     Directory<FailbackClusterInvokerTest> dic;
-    Result result = new RpcResult();
+    Result result = new AppResponse();
 
     /**
      * @throws java.lang.Exception

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvokerTest.java
Patch:
@@ -17,12 +17,12 @@
 package org.apache.dubbo.rpc.cluster.support;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.cluster.Directory;
 
 import org.junit.jupiter.api.Assertions;
@@ -47,7 +47,7 @@ public class FailfastClusterInvokerTest {
     Invoker<FailfastClusterInvokerTest> invoker1 = mock(Invoker.class);
     RpcInvocation invocation = new RpcInvocation();
     Directory<FailfastClusterInvokerTest> dic;
-    Result result = new RpcResult();
+    Result result = new AppResponse();
 
     /**
      * @throws java.lang.Exception

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvokerTest.java
Patch:
@@ -17,12 +17,12 @@
 package org.apache.dubbo.rpc.cluster.support;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.cluster.Directory;
 import org.apache.dubbo.rpc.cluster.directory.StaticDirectory;
 import org.apache.dubbo.rpc.protocol.AbstractInvoker;
@@ -55,7 +55,7 @@ public class FailoverClusterInvokerTest {
     private Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);
     private RpcInvocation invocation = new RpcInvocation();
     private Directory<FailoverClusterInvokerTest> dic;
-    private Result result = new RpcResult();
+    private Result result = new AppResponse();
 
     /**
      * @throws java.lang.Exception

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvokerTest.java
Patch:
@@ -17,12 +17,12 @@
 package org.apache.dubbo.rpc.cluster.support;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
+import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.RpcResult;
-import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.cluster.Directory;
 
 import org.junit.jupiter.api.Assertions;
@@ -50,7 +50,7 @@ public class ForkingClusterInvokerTest {
     private Invoker<ForkingClusterInvokerTest> invoker3 = mock(Invoker.class);
     private RpcInvocation invocation = new RpcInvocation();
     private Directory<ForkingClusterInvokerTest> dic;
-    private Result result = new RpcResult();
+    private Result result = new AppResponse();
 
     @BeforeEach
     public void setUp() throws Exception {

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/Logger.java
Patch:
@@ -142,7 +142,7 @@ public interface Logger {
 
     /**
      * Is debug logging currently enabled?
-     *
+     * 
      * @return true if debug is enabled
      */
     boolean isDebugEnabled();

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/PropertiesConfigurationTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.common.config;
 
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvoker.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.filter;
 
 
-import org.apache.dubbo.rpc.RpcResult;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.service.DemoService;
 
 import com.alibaba.dubbo.common.URL;
@@ -58,7 +58,7 @@ public boolean isAvailable() {
     }
 
     public Result invoke(Invocation invocation) throws RpcException {
-        RpcResult result = new RpcResult();
+        AppResponse result = new AppResponse();
         if (hasException == false) {
             result.setValue("alibaba");
         } else {

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/CacheListener.java
Patch:
@@ -35,6 +35,8 @@
  */
 
 public class CacheListener implements DataListener {
+    private static final int MIN_PATH_DEPTH = 5;
+
     private Map<String, Set<ConfigurationListener>> keyListeners = new ConcurrentHashMap<>();
     private CountDownLatch initializedLatch;
     private String rootPath;
@@ -89,7 +91,7 @@ public void dataChanged(String path, Object value, EventType eventType) {
         // TODO We limit the notification of config changes to a specific path level, for example
         //  /dubbo/config/service/configurators, other config changes not in this level will not get notified,
         //  say /dubbo/config/dubbo.properties
-        if (path.split("/").length >= 5) {
+        if (path.split("/").length >= MIN_PATH_DEPTH) {
             String key = pathToKey(path);
             ConfigChangeType changeType;
             switch (eventType) {

File: dubbo-demo/dubbo-demo-interface/src/main/java/org/apache/dubbo/demo/DemoService.java
Patch:
@@ -16,8 +16,11 @@
  */
 package org.apache.dubbo.demo;
 
+import java.util.concurrent.CompletableFuture;
+
 public interface DemoService {
 
     String sayHello(String name);
 
+    CompletableFuture<String> sayHelloAsync(String name);
 }
\ No newline at end of file

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/filter/CacheFilter.java
Patch:
@@ -22,12 +22,12 @@
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
-import org.apache.dubbo.rpc.RpcResult;
 
 import java.io.Serializable;
 
@@ -95,9 +95,9 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
                 Object value = cache.get(key);
                 if (value != null) {
                     if (value instanceof ValueWrapper) {
-                        return new RpcResult(((ValueWrapper)value).get());
+                        return AsyncRpcResult.newDefaultAsyncResult(((ValueWrapper) value).get(), invocation);
                     } else {
-                        return new RpcResult(value);
+                        return AsyncRpcResult.newDefaultAsyncResult(value, invocation);
                     }
                 }
                 Result result = invoker.invoke(invocation);

File: dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/filter/ValidationFilter.java
Patch:
@@ -19,12 +19,12 @@
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.common.utils.ConfigUtils;
+import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.validation.Validation;
 import org.apache.dubbo.validation.Validator;
 
@@ -87,7 +87,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             } catch (RpcException e) {
                 throw e;
             } catch (Throwable t) {
-                return new RpcResult(t);
+                return AsyncRpcResult.newDefaultAsyncResult(t, invocation);
             }
         }
         return invoker.invoke(invocation);

File: dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/MonitorService.java
Patch:
@@ -86,4 +86,5 @@ public interface MonitorService {
      */
     List<URL> lookup(URL query);
 
+
 }
\ No newline at end of file

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/RemotingException.java
Patch:
@@ -22,8 +22,7 @@
  * RemotingException. (API, Prototype, ThreadSafe)
  *
  * @export
- * @see org.apache.dubbo.remoting.exchange.ResponseFuture#get()
- * @see org.apache.dubbo.remoting.exchange.ResponseFuture#get(int)
+ * @see org.apache.dubbo.remoting.exchange.support.DefaultFuture#get()
  * @see org.apache.dubbo.remoting.Channel#send(Object, boolean)
  * @see org.apache.dubbo.remoting.exchange.ExchangeChannel#request(Object)
  * @see org.apache.dubbo.remoting.exchange.ExchangeChannel#request(Object, int)

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/TimeoutException.java
Patch:
@@ -22,8 +22,7 @@
  * TimeoutException. (API, Prototype, ThreadSafe)
  *
  * @export
- * @see org.apache.dubbo.remoting.exchange.ResponseFuture#get()
- * @see org.apache.dubbo.remoting.exchange.ResponseFuture#get(int)
+ * @see org.apache.dubbo.remoting.exchange.support.DefaultFuture#get()
  */
 public class TimeoutException extends RemotingException {
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeChannel.java
Patch:
@@ -28,10 +28,10 @@
 import org.apache.dubbo.remoting.exchange.ExchangeHandler;
 import org.apache.dubbo.remoting.exchange.Request;
 import org.apache.dubbo.remoting.exchange.Response;
-import org.apache.dubbo.remoting.exchange.ResponseFuture;
 import org.apache.dubbo.remoting.exchange.support.DefaultFuture;
 
 import java.net.InetSocketAddress;
+import java.util.concurrent.CompletableFuture;
 
 /**
  * ExchangeReceiver
@@ -97,12 +97,12 @@ public void send(Object message, boolean sent) throws RemotingException {
     }
 
     @Override
-    public ResponseFuture request(Object request) throws RemotingException {
+    public CompletableFuture<Object> request(Object request) throws RemotingException {
         return request(request, channel.getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT));
     }
 
     @Override
-    public ResponseFuture request(Object request, int timeout) throws RemotingException {
+    public CompletableFuture<Object> request(Object request, int timeout) throws RemotingException {
         if (closed) {
             throw new RemotingException(this.getLocalAddress(), null, "Failed to send request " + request + ", cause: The channel " + this + " is closed!");
         }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeClient.java
Patch:
@@ -27,10 +27,10 @@
 import org.apache.dubbo.remoting.exchange.ExchangeChannel;
 import org.apache.dubbo.remoting.exchange.ExchangeClient;
 import org.apache.dubbo.remoting.exchange.ExchangeHandler;
-import org.apache.dubbo.remoting.exchange.ResponseFuture;
 
 import java.net.InetSocketAddress;
 import java.util.Collections;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.TimeUnit;
 
 import static org.apache.dubbo.common.utils.UrlUtils.getHeartbeat;
@@ -62,7 +62,7 @@ public HeaderExchangeClient(Client client, boolean startTimer) {
     }
 
     @Override
-    public ResponseFuture request(Object request) throws RemotingException {
+    public CompletableFuture<Object> request(Object request) throws RemotingException {
         return channel.request(request);
     }
 
@@ -77,7 +77,7 @@ public InetSocketAddress getRemoteAddress() {
     }
 
     @Override
-    public ResponseFuture request(Object request, int timeout) throws RemotingException {
+    public CompletableFuture<Object> request(Object request, int timeout) throws RemotingException {
         return channel.request(request, timeout);
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/Main.java
Patch:
@@ -19,12 +19,12 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.remoting.exchange.ExchangeChannel;
 import org.apache.dubbo.remoting.exchange.Exchangers;
-import org.apache.dubbo.remoting.exchange.ResponseFuture;
 import org.apache.dubbo.remoting.exchange.support.Replier;
 import org.apache.dubbo.remoting.exchange.support.ReplierDispatcher;
 
 import java.io.Serializable;
 import java.util.Random;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
 
@@ -94,7 +94,7 @@ private static void test(int port) throws Exception {
 
         System.out.println("=====test invoke=====");
         for (int i = 0; i < 100; i++) {
-            ResponseFuture future = client.request(new Main.Data());
+            CompletableFuture<Object> future = client.request(new Main.Data());
             System.out.println("invoke and get");
             System.out.println("invoke result:" + future.get());
         }

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/PerformanceServerTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.remoting.exchange.support.ExchangeHandlerAdapter;
 import org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher;
 
-import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/DefaultFutureTest.java
Patch:
@@ -74,7 +74,7 @@ public void timeoutNotSend() throws Exception {
         try {
             f.get();
         } catch (Exception e) {
-            Assertions.assertTrue(e instanceof TimeoutException, "catch exception is not timeout exception!");
+            Assertions.assertTrue(e.getCause() instanceof TimeoutException, "catch exception is not timeout exception!");
             System.out.println(e.getMessage());
         }
     }
@@ -108,7 +108,7 @@ public void timeoutSend() throws Exception {
         try {
             f.get();
         } catch (Exception e) {
-            Assertions.assertTrue(e instanceof TimeoutException, "catch exception is not timeout exception!");
+            Assertions.assertTrue(e.getCause() instanceof TimeoutException, "catch exception is not timeout exception!");
             System.out.println(e.getMessage());
         }
     }

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/handler/HeaderExchangeHandlerTest.java
Patch:
@@ -178,7 +178,7 @@ public void send(Object message) throws RemotingException {
         HeaderExchangeHandler hexhandler = new HeaderExchangeHandler(new MockedExchangeHandler() {
 
             @Override
-            public CompletableFuture reply(ExchangeChannel channel, Object request) throws RemotingException {
+            public CompletableFuture<Object> reply(ExchangeChannel channel, Object request) throws RemotingException {
                 Assertions.fail();
                 throw new RemotingException(channel, "");
             }

File: dubbo-remoting/dubbo-remoting-mina/src/test/java/org/apache/remoting/transport/mina/ClientToServerTest.java
Patch:
@@ -19,14 +19,15 @@
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.ExchangeChannel;
 import org.apache.dubbo.remoting.exchange.ExchangeServer;
-import org.apache.dubbo.remoting.exchange.ResponseFuture;
 import org.apache.dubbo.remoting.exchange.support.Replier;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import java.util.concurrent.CompletableFuture;
+
 /**
  * ClientToServer
  */
@@ -64,7 +65,7 @@ protected void tearDown() {
 
     @Test
     public void testFuture() throws Exception {
-        ResponseFuture future = client.request(new World("world"));
+        CompletableFuture<Object> future = client.request(new World("world"));
         Hello result = (Hello) future.get();
         Assertions.assertEquals("hello,world", result.getName());
     }

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/exchange/support/header/HeartbeatHandlerTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.dubbo.remoting.exchange.ExchangeServer;
 import org.apache.dubbo.remoting.exchange.Exchangers;
 import org.apache.dubbo.remoting.transport.dispatcher.FakeChannelHandlers;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/ClientToServerTest.java
Patch:
@@ -19,14 +19,14 @@
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.ExchangeChannel;
 import org.apache.dubbo.remoting.exchange.ExchangeServer;
-import org.apache.dubbo.remoting.exchange.ResponseFuture;
 import org.apache.dubbo.remoting.exchange.support.Replier;
 
-import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import java.util.concurrent.CompletableFuture;
+
 /**
  * ClientToServer
  */
@@ -64,7 +64,7 @@ protected void tearDown() throws Exception {
 
     @Test
     public void testFuture() throws Exception {
-        ResponseFuture future = client.request(new World("world"));
+        CompletableFuture<Object> future = client.request(new World("world"));
         Hello result = (Hello) future.get();
         Assertions.assertEquals("hello,world", result.getName());
     }

File: dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/ClientToServerTest.java
Patch:
@@ -19,14 +19,15 @@
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.ExchangeChannel;
 import org.apache.dubbo.remoting.exchange.ExchangeServer;
-import org.apache.dubbo.remoting.exchange.ResponseFuture;
 import org.apache.dubbo.remoting.exchange.support.Replier;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import java.util.concurrent.CompletableFuture;
+
 /**
  * ClientToServer
  */
@@ -64,7 +65,7 @@ protected void tearDown() {
 
     @Test
     public void testFuture() throws Exception {
-        ResponseFuture future = client.request(new World("world"));
+        CompletableFuture<Object> future = client.request(new World("world"));
         Hello result = (Hello) future.get();
         Assertions.assertEquals("hello,world", result.getName());
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java
Patch:
@@ -18,12 +18,12 @@
 
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
-import org.apache.dubbo.rpc.RpcResult;
 
 /**
  * Dubbo provided default Echo echo service, which is available for all dubbo provider service interface.
@@ -34,7 +34,7 @@ public class EchoFilter implements Filter {
     @Override
     public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {
         if (inv.getMethodName().equals(Constants.$ECHO) && inv.getArguments() != null && inv.getArguments().length == 1) {
-            return new RpcResult(inv.getArguments()[0]);
+            return AsyncRpcResult.newDefaultAsyncResult(inv.getArguments()[0], inv);
         }
         return invoker.invoke(inv);
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockInvoker.java
Patch:
@@ -19,18 +19,18 @@
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
+import org.apache.dubbo.common.utils.ArrayUtils;
 import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.common.utils.PojoUtils;
 import org.apache.dubbo.common.utils.ReflectUtils;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.common.utils.ArrayUtils;
+import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.RpcResult;
 
 import com.alibaba.fastjson.JSON;
 
@@ -104,7 +104,7 @@ public Result invoke(Invocation invocation) throws RpcException {
             try {
                 Type[] returnTypes = RpcUtils.getReturnTypes(invocation);
                 Object value = parseMockValue(mock, returnTypes);
-                return new RpcResult(value);
+                return AsyncRpcResult.newDefaultAsyncResult(value, invocation);
             } catch (Exception ew) {
                 throw new RpcException("mock return invoke error. method :" + invocation.getMethodName()
                         + ", mock:" + mock + ", url: " + url, ew);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockProtocol.java
Patch:
@@ -38,7 +38,7 @@ public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
     }
 
     @Override
-    public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {
+    protected <T> Invoker<T> doRefer(Class<T> type, URL url) throws RpcException {
         return new MockInvoker<T>(url);
     }
 }

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/RpcResultTest.java
Patch:
@@ -26,7 +26,7 @@ public class RpcResultTest {
     @Test
     public void testRecreateWithNormalException() {
         NullPointerException npe = new NullPointerException();
-        RpcResult rpcResult = new RpcResult(npe);
+        AppResponse rpcResult = new AppResponse(npe);
         try {
             rpcResult.recreate();
             fail();
@@ -64,7 +64,7 @@ public void testRecreateWithEmptyStackTraceException() {
         }
         // end construct a NullPointerException with empty stackTrace
 
-        RpcResult rpcResult = new RpcResult(throwable);
+        AppResponse rpcResult = new AppResponse(throwable);
         try {
             rpcResult.recreate();
             fail();

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ContextFilterTest.java
Patch:
@@ -17,12 +17,12 @@
 package org.apache.dubbo.rpc.filter;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcContext;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.support.DemoService;
 import org.apache.dubbo.rpc.support.MockInvocation;
 import org.apache.dubbo.rpc.support.MyInvoker;
@@ -55,7 +55,7 @@ public void testSetContext() {
         invoker = mock(Invoker.class);
         given(invoker.isAvailable()).willReturn(true);
         given(invoker.getInterface()).willReturn(DemoService.class);
-        RpcResult result = new RpcResult();
+        AppResponse result = new AppResponse();
         result.setValue("High");
         given(invoker.invoke(invocation)).willReturn(result);
         URL url = URL.valueOf("test://test:11/test?group=dubbo&version=1.1");

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/EchoFilterTest.java
Patch:
@@ -17,11 +17,11 @@
 package org.apache.dubbo.rpc.filter;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.support.DemoService;
 
 import org.junit.jupiter.api.Test;
@@ -46,7 +46,7 @@ public void testEcho() {
         Invoker<DemoService> invoker = mock(Invoker.class);
         given(invoker.isAvailable()).willReturn(true);
         given(invoker.getInterface()).willReturn(DemoService.class);
-        RpcResult result = new RpcResult();
+        AppResponse result = new AppResponse();
         result.setValue("High");
         given(invoker.invoke(invocation)).willReturn(result);
         URL url = URL.valueOf("test://test:11/test?group=dubbo&version=1.1");
@@ -68,7 +68,7 @@ public void testNonEcho() {
         Invoker<DemoService> invoker = mock(Invoker.class);
         given(invoker.isAvailable()).willReturn(true);
         given(invoker.getInterface()).willReturn(DemoService.class);
-        RpcResult result = new RpcResult();
+        AppResponse result = new AppResponse();
         result.setValue("High");
         given(invoker.invoke(invocation)).willReturn(result);
         URL url = URL.valueOf("test://test:11/test?group=dubbo&version=1.1");

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/TimeoutFilterTest.java
Patch:
@@ -17,10 +17,10 @@
 package org.apache.dubbo.rpc.filter;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.support.BlockMyInvoker;
 
 import org.junit.jupiter.api.Assertions;
@@ -39,7 +39,7 @@ public void testInvokeWithoutTimeout() throws Exception {
         int timeout = 3000;
 
         Invoker invoker = Mockito.mock(Invoker.class);
-        when(invoker.invoke(any(Invocation.class))).thenReturn(new RpcResult("result"));
+        when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse("result"));
         when(invoker.getUrl()).thenReturn(URL.valueOf("test://test:11/test?accesslog=true&group=dubbo&version=1.1&timeout=" + timeout));
 
         Invocation invocation = Mockito.mock(Invocation.class);
@@ -60,7 +60,7 @@ public void testInvokeWithTimeout() throws Exception {
         when(invocation.getMethodName()).thenReturn("testInvokeWithTimeout");
 
         Result result = timeoutFilter.invoke(invoker, invocation);
-        Assertions.assertEquals("alibaba", result.getValue());
+        Assertions.assertEquals("Dubbo", result.getValue());
 
     }
 }

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.RpcInvocation;
+import org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -144,7 +145,7 @@ private static Object referOrDestroyCallbackService(Channel channel, URL url, Cl
                 if (!isInstancesOverLimit(channel, referurl, clazz.getName(), instid, true)) {
                     @SuppressWarnings("rawtypes")
                     Invoker<?> invoker = new ChannelWrappedInvoker(clazz, channel, referurl, String.valueOf(instid));
-                    proxy = proxyFactory.getProxy(invoker);
+                    proxy = proxyFactory.getProxy(new AsyncToSyncInvoker<>(invoker));
                     channel.setAttribute(proxyCacheKey, proxy);
                     channel.setAttribute(invokerCacheKey, invoker);
                     increaseInstanceCount(channel, countkey);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.dubbo.remoting.Decodeable;
 import org.apache.dubbo.remoting.exchange.Response;
 import org.apache.dubbo.remoting.transport.CodecSupport;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Invocation;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.support.RpcUtils;
 
 import java.io.IOException;
@@ -38,7 +38,7 @@
 import java.lang.reflect.Type;
 import java.util.Map;
 
-public class DecodeableRpcResult extends RpcResult implements Codec, Decodeable {
+public class DecodeableRpcResult extends AppResponse implements Codec, Decodeable {
 
     private static final Logger log = LoggerFactory.getLogger(DecodeableRpcResult.class);
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCountCodec.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.dubbo.remoting.exchange.Request;
 import org.apache.dubbo.remoting.exchange.Response;
 import org.apache.dubbo.remoting.exchange.support.MultiMessage;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.RpcResult;
 
 import java.io.IOException;
 
@@ -75,7 +75,7 @@ private void logMessageLength(Object result, int bytes) {
             }
         } else if (result instanceof Response) {
             try {
-                ((RpcResult) ((Response) result).getResult()).setAttachment(
+                ((AppResponse) ((Response) result).getResult()).setAttachment(
                         Constants.OUTPUT_KEY, String.valueOf(bytes));
             } catch (Throwable e) {
                 /* ignore */

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java
Patch:
@@ -27,9 +27,9 @@
 import org.apache.dubbo.remoting.exchange.ExchangeClient;
 import org.apache.dubbo.remoting.exchange.ExchangeHandler;
 import org.apache.dubbo.remoting.exchange.Exchangers;
-import org.apache.dubbo.remoting.exchange.ResponseFuture;
 
 import java.net.InetSocketAddress;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
@@ -84,7 +84,7 @@ private void initClient() throws RemotingException {
     }
 
     @Override
-    public ResponseFuture request(Object request) throws RemotingException {
+    public CompletableFuture<Object> request(Object request) throws RemotingException {
         warning();
         initClient();
         return client.request(request);
@@ -105,7 +105,7 @@ public InetSocketAddress getRemoteAddress() {
     }
 
     @Override
-    public ResponseFuture request(Object request, int timeout) throws RemotingException {
+    public CompletableFuture<Object> request(Object request, int timeout) throws RemotingException {
         warning();
         initClient();
         return client.request(request, timeout);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/ReferenceCountExchangeClient.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.exchange.ExchangeClient;
 import org.apache.dubbo.remoting.exchange.ExchangeHandler;
-import org.apache.dubbo.remoting.exchange.ResponseFuture;
 
 import java.net.InetSocketAddress;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -52,7 +52,7 @@ public void reset(URL url) {
     }
 
     @Override
-    public ResponseFuture request(Object request) throws RemotingException {
+    public CompletableFuture<Object> request(Object request) throws RemotingException {
         return client.request(request);
     }
 
@@ -72,7 +72,7 @@ public ChannelHandler getChannelHandler() {
     }
 
     @Override
-    public ResponseFuture request(Object request, int timeout) throws RemotingException {
+    public CompletableFuture<Object> request(Object request, int timeout) throws RemotingException {
         return client.request(request, timeout);
     }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/FutureFilterTest.java
Patch:
@@ -18,12 +18,12 @@
 
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.rpc.AppResponse;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter;
 import org.apache.dubbo.rpc.protocol.dubbo.support.DemoService;
 
@@ -57,7 +57,7 @@ public void testSyncCallback() {
         Invoker<DemoService> invoker = mock(Invoker.class);
         given(invoker.isAvailable()).willReturn(true);
         given(invoker.getInterface()).willReturn(DemoService.class);
-        RpcResult result = new RpcResult();
+        AppResponse result = new AppResponse();
         result.setValue("High");
         given(invoker.invoke(invocation)).willReturn(result);
         URL url = URL.valueOf("test://test:11/test?group=dubbo&version=1.1");
@@ -74,7 +74,7 @@ public void testSyncCallbackHasException() throws RpcException, Throwable {
             Invoker<DemoService> invoker = mock(Invoker.class);
             given(invoker.isAvailable()).willReturn(true);
             given(invoker.getInterface()).willReturn(DemoService.class);
-            RpcResult result = new RpcResult();
+            AppResponse result = new AppResponse();
             result.setException(new RuntimeException());
             given(invoker.invoke(invocation)).willReturn(result);
             URL url = URL.valueOf("test://test:11/test?group=dubbo&version=1.1&" + Constants.ON_THROW_METHOD_KEY + "=echo");

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ImplicitCallBackTest.java
Patch:
@@ -240,7 +240,7 @@ public void test_Sync_NoFuture() throws Exception {
         Person ret = demoProxy.get(requestId);
         Assertions.assertEquals(requestId, ret.getId());
         Future<Person> pFuture = RpcContext.getContext().getFuture();
-        Assertions.assertEquals(null, pFuture);
+        Assertions.assertEquals(ret, pFuture.get());
         destroyService();
     }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ReferenceCountExchangeClientTest.java
Patch:
@@ -26,7 +26,9 @@
 import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.ProxyFactory;
+import org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker;
 import org.apache.dubbo.rpc.protocol.dubbo.support.ProtocolUtils;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
@@ -271,8 +273,7 @@ private ExchangeClient getInvokerClient(Invoker<?> invoker) {
     }
 
     private List<ExchangeClient> getInvokerClientList(Invoker<?> invoker) {
-        @SuppressWarnings("rawtypes")
-        DubboInvoker dInvoker = (DubboInvoker) invoker;
+        @SuppressWarnings("rawtypes") DubboInvoker dInvoker = (DubboInvoker) ((AsyncToSyncInvoker) invoker).getInvoker();
         try {
             Field clientField = DubboInvoker.class.getDeclaredField("clients");
             clientField.setAccessible(true);

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/InvokerTelnetHandlerTest.java
Patch:
@@ -102,7 +102,6 @@ public void testInvokeByPassingNullValue() {
         ProviderModel providerModel = new ProviderModel("org.apache.dubbo.rpc.protocol.dubbo.support.DemoService", "Dubbo", "1.0.0", new DemoServiceImpl(), DemoService.class);
         ApplicationModel.initProviderModel("org.apache.dubbo.rpc.protocol.dubbo.support.DemoService", providerModel);
 
-        // pass null value to parameter of primitive type
         try {
             invoke.telnet(mockChannel, "sayHello(null)");
         } catch (Exception ex) {

File: dubbo-rpc/dubbo-rpc-hessian/src/main/java/org/apache/dubbo/rpc/protocol/hessian/HessianProtocol.java
Patch:
@@ -94,7 +94,7 @@ public void run() {
 
     @Override
     @SuppressWarnings("unchecked")
-    protected <T> T doRefer(Class<T> serviceType, URL url) throws RpcException {
+    protected <T> T getFrameworkProxy(Class<T> serviceType, URL url) throws RpcException {
         String generic = url.getParameter(Constants.GENERIC_KEY);
         boolean isGeneric = ProtocolUtils.isGeneric(generic) || serviceType.equals(GenericService.class);
         if (isGeneric) {

File: dubbo-rpc/dubbo-rpc-http/src/main/java/org/apache/dubbo/rpc/protocol/http/HttpProtocol.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.common.Version;
+import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.remoting.http.HttpBinder;
 import org.apache.dubbo.remoting.http.HttpHandler;
 import org.apache.dubbo.remoting.http.HttpServer;
@@ -110,7 +110,7 @@ private <T> HttpInvokerServiceExporter createExporter(T impl, Class<?> type) {
 
     @Override
     @SuppressWarnings("unchecked")
-    protected <T> T doRefer(final Class<T> serviceType, final URL url) throws RpcException {
+    protected <T> T getFrameworkProxy(final Class<T> serviceType, final URL url) throws RpcException {
         final String generic = url.getParameter(Constants.GENERIC_KEY);
         final boolean isGeneric = ProtocolUtils.isGeneric(generic) || serviceType.equals(GenericService.class);
 

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmProtocol.java
Patch:
@@ -88,7 +88,7 @@ public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
     }
 
     @Override
-    public <T> Invoker<T> refer(Class<T> serviceType, URL url) throws RpcException {
+    public <T> Invoker<T> doRefer(Class<T> serviceType, URL url) throws RpcException {
         return new InjvmInvoker<T>(serviceType, url, url.getServiceKey(), exporterMap);
     }
 

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java
Patch:
@@ -128,7 +128,7 @@ protected <T> Runnable doExport(T impl, Class<T> type, URL url) throws RpcExcept
     }
 
     @Override
-    protected <T> T doRefer(Class<T> serviceType, URL url) throws RpcException {
+    protected <T> T getFrameworkProxy(Class<T> serviceType, URL url) throws RpcException {
 
         // TODO more configs to add
         PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();

File: dubbo-rpc/dubbo-rpc-rmi/src/main/java/org/apache/dubbo/rpc/protocol/rmi/RmiProtocol.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.rpc.protocol.AbstractProxyProtocol;
 import org.apache.dubbo.rpc.service.GenericService;
 import org.apache.dubbo.rpc.support.ProtocolUtils;
+
 import org.springframework.remoting.RemoteAccessException;
 import org.springframework.remoting.rmi.RmiProxyFactoryBean;
 import org.springframework.remoting.rmi.RmiServiceExporter;
@@ -69,7 +70,7 @@ public void run() {
 
     @Override
     @SuppressWarnings("unchecked")
-    protected <T> T doRefer(final Class<T> serviceType, final URL url) throws RpcException {
+    protected <T> T getFrameworkProxy(final Class<T> serviceType, final URL url) throws RpcException {
         final RmiProxyFactoryBean rmiProxyFactoryBean = new RmiProxyFactoryBean();
         final String generic = url.getParameter(Constants.GENERIC_KEY);
         final boolean isGeneric = ProtocolUtils.isGeneric(generic) || serviceType.equals(GenericService.class);

File: dubbo-rpc/dubbo-rpc-rsocket/src/main/java/org/apache/dubbo/rpc/protocol/rsocket/RSocketProtocol.java
Patch:
@@ -171,9 +171,8 @@ private CloseableChannel createServer(URL url) {
         }
     }
 
-
     @Override
-    public <T> Invoker<T> refer(Class<T> serviceType, URL url) throws RpcException {
+    protected <T> Invoker<T> doRefer(Class<T> serviceType, URL url) throws RpcException {
         // create rpc invoker.
         RSocketInvoker<T> invoker = new RSocketInvoker<T>(serviceType, url, getClients(url), invokers);
         invokers.add(invoker);

File: dubbo-rpc/dubbo-rpc-webservice/src/main/java/org/apache/dubbo/rpc/protocol/webservice/WebServiceProtocol.java
Patch:
@@ -107,7 +107,7 @@ public void run() {
 
     @Override
     @SuppressWarnings("unchecked")
-    protected <T> T doRefer(final Class<T> serviceType, final URL url) throws RpcException {
+    protected <T> T getFrameworkProxy(final Class<T> serviceType, final URL url) throws RpcException {
         ClientProxyFactoryBean proxyFactoryBean = new ClientProxyFactoryBean();
         proxyFactoryBean.setAddress(url.setProtocol("http").toIdentityString());
         proxyFactoryBean.setServiceClass(serviceType);

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/SPI.java
Patch:
@@ -27,7 +27,7 @@
  * Marker for extension interface
  * <p/>
  * Changes on extension configuration file <br/>
- * Use <code>Protocol</code> as an example, its configuration file 'META-INF/dubbo/com.xxx.Protocol' is changes from: <br/>
+ * Use <code>Protocol</code> as an example, its configuration file 'META-INF/dubbo/com.xxx.Protocol' is changed from: <br/>
  * <pre>
  *     com.foo.XxxProtocol
  *     com.foo.YyyProtocol

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigBindingBeanPostProcessor.java
Patch:
@@ -186,7 +186,7 @@ private void initConfigBeanCustomizers() {
         Collection<DubboConfigBeanCustomizer> configBeanCustomizers =
                 beansOfTypeIncludingAncestors(applicationContext, DubboConfigBeanCustomizer.class).values();
 
-        this.configBeanCustomizers = new ArrayList<DubboConfigBeanCustomizer>(configBeanCustomizers);
+        this.configBeanCustomizers = new ArrayList<>(configBeanCustomizers);
 
         AnnotationAwareOrderComparator.sort(this.configBeanCustomizers);
     }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java
Patch:
@@ -88,7 +88,7 @@ public ServiceAnnotationBeanPostProcessor(String... packagesToScan) {
     }
 
     public ServiceAnnotationBeanPostProcessor(Collection<String> packagesToScan) {
-        this(new LinkedHashSet<String>(packagesToScan));
+        this(new LinkedHashSet<>(packagesToScan));
     }
 
     public ServiceAnnotationBeanPostProcessor(Set<String> packagesToScan) {
@@ -218,7 +218,7 @@ private Set<BeanDefinitionHolder> findServiceBeanDefinitionHolders(
 
         Set<BeanDefinition> beanDefinitions = scanner.findCandidateComponents(packageToScan);
 
-        Set<BeanDefinitionHolder> beanDefinitionHolders = new LinkedHashSet<BeanDefinitionHolder>(beanDefinitions.size());
+        Set<BeanDefinitionHolder> beanDefinitionHolders = new LinkedHashSet<>(beanDefinitions.size());
 
         for (BeanDefinition beanDefinition : beanDefinitions) {
 
@@ -443,7 +443,7 @@ private AbstractBeanDefinition buildServiceBeanDefinition(Service service, Class
 
     private ManagedList<RuntimeBeanReference> toRuntimeBeanReferences(String... beanNames) {
 
-        ManagedList<RuntimeBeanReference> runtimeBeanReferences = new ManagedList<RuntimeBeanReference>();
+        ManagedList<RuntimeBeanReference> runtimeBeanReferences = new ManagedList<>();
 
         if (!ObjectUtils.isEmpty(beanNames)) {
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/config/NamePropertyDefaultValueDubboConfigBeanCustomizer.java
Patch:
@@ -67,7 +67,7 @@ public void customize(String beanName, AbstractConfig dubboConfigBean) {
             }
 
             Method setNameMethod = propertyDescriptor.getWriteMethod();
-            if (setNameMethod != null && getNameMethod != null) { // "setName" and "getName" methods are present
+            if (setNameMethod != null) { // "setName" and "getName" methods are present
                 if (Arrays.equals(of(String.class), setNameMethod.getParameterTypes())) { // the param type is String
                     // set bean name to the value of the "name" property
                     ReflectionUtils.invokeMethod(setNameMethod, dubboConfigBean, beanName);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java
Patch:
@@ -125,7 +125,7 @@ private static BeanDefinition parse(Element element, ParserContext parserContext
         } else if (ConsumerConfig.class.equals(beanClass)) {
             parseNested(element, parserContext, ReferenceBean.class, false, "reference", "consumer", id, beanDefinition);
         }
-        Set<String> props = new HashSet<String>();
+        Set<String> props = new HashSet<>();
         ManagedMap parameters = null;
         for (Method setter : beanClass.getMethods()) {
             String name = setter.getName();
@@ -143,6 +143,7 @@ private static BeanDefinition parse(Element element, ParserContext parserContext
                     try {
                         getter = beanClass.getMethod("is" + name.substring(3), new Class<?>[0]);
                     } catch (NoSuchMethodException e2) {
+                        logger.error("Method " + name + " parse error,  cause: " + e2.getMessage(), e2);
                     }
                 }
                 if (getter == null

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/PropertySourcesUtils.java
Patch:
@@ -72,7 +72,7 @@ public static Map<String, Object> getSubProperties(Iterable<PropertySource<?>> p
      */
     public static Map<String, Object> getSubProperties(ConfigurableEnvironment environment, String prefix) {
 
-        Map<String, Object> subProperties = new LinkedHashMap<String, Object>();
+        Map<String, Object> subProperties = new LinkedHashMap<>();
 
         MutablePropertySources propertySources = environment.getPropertySources();
 

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/config/annotation/Service.java
Patch:
@@ -47,7 +47,7 @@
 
     boolean deprecated() default false;
 
-    boolean dynamic() default false;
+    boolean dynamic() default true;
 
     String accesslog() default "";
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -74,7 +74,7 @@ public abstract class AbstractServiceConfig extends AbstractInterfaceConfig {
      * after the service registered,and it needs to be enabled manually; if you want to disable the service, you also need
      * manual processing
      */
-    protected Boolean dynamic = false;
+    protected Boolean dynamic = true;
 
     /**
      * Whether to use token

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Service.java
Patch:
@@ -79,9 +79,9 @@
     boolean deprecated() default false;
 
     /**
-     * Whether the service is dynamic, default value is false
+     * Whether the service is dynamic, default value is true
      */
-    boolean dynamic() default false;
+    boolean dynamic() default true;
 
     /**
      * Access log for the service, default value is ""

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/store/MetadataReport.java
Patch:
@@ -26,7 +26,7 @@
  */
 public interface MetadataReport {
 
-    public static final String META_DATA_SOTRE_TAG = ".metaData";
+    public static final String META_DATA_STORE_TAG = ".metaData";
 
 
     void storeProviderMetadata(MetadataIdentifier providerMetadataIdentifier, FullServiceDefinition serviceDefinition);

File: dubbo-metadata-report/dubbo-metadata-report-consul/src/main/java/org/apache/dubbo/metadata/store/consul/ConsulMetadataReport.java
Patch:
@@ -55,7 +55,7 @@ protected void doStoreConsumerMetadata(MetadataIdentifier consumerMetadataIdenti
 
     private void storeMetadata(MetadataIdentifier identifier, String v) {
         try {
-            client.setKVValue(identifier.getIdentifierKey() + META_DATA_SOTRE_TAG, v);
+            client.setKVValue(identifier.getIdentifierKey() + META_DATA_STORE_TAG, v);
         } catch (Throwable t) {
             logger.error("Failed to put " + identifier + " to consul " + v + ", cause: " + t.getMessage(), t);
             throw new RpcException("Failed to put " + identifier + " to consul " + v + ", cause: " + t.getMessage(), t);

File: dubbo-metadata-report/dubbo-metadata-report-redis/src/main/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReport.java
Patch:
@@ -52,7 +52,7 @@ protected void doStoreConsumerMetadata(MetadataIdentifier consumerMetadataIdenti
 
     private void storeMetadata(MetadataIdentifier metadataIdentifier, String v) {
         try (Jedis jedis = pool.getResource()) {
-            jedis.set(metadataIdentifier.getIdentifierKey() + META_DATA_SOTRE_TAG, v);
+            jedis.set(metadataIdentifier.getIdentifierKey() + META_DATA_STORE_TAG, v);
         } catch (Throwable e) {
             logger.error("Failed to put " + metadataIdentifier + " to redis " + v + ", cause: " + e.getMessage(), e);
             throw new RpcException("Failed to put " + metadataIdentifier + " to redis " + v + ", cause: " + e.getMessage(), e);

File: dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistryFactory.java
Patch:
@@ -54,7 +54,7 @@ protected Registry createRegistry(URL url) {
 
     private NamingService buildNamingService(URL url) {
         Properties nacosProperties = buildNacosProperties(url);
-        NamingService namingService = null;
+        NamingService namingService;
         try {
             namingService = NacosFactory.createNamingService(nacosProperties);
         } catch (NacosException e) {

File: dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.common.serialize.fastjson;
 
 import org.apache.dubbo.common.serialize.ObjectInput;
-import org.apache.dubbo.common.utils.PojoUtils;
 
 import com.alibaba.fastjson.JSON;
 
@@ -103,8 +102,8 @@ public <T> T readObject(Class<T> cls) throws IOException, ClassNotFoundException
     @Override
     @SuppressWarnings("unchecked")
     public <T> T readObject(Class<T> cls, Type type) throws IOException, ClassNotFoundException {
-        Object value = readObject(cls);
-        return (T) PojoUtils.realize(value, cls, type);
+        String json = readLine();
+        return (T) JSON.parseObject(json, type);
     }
 
     private String readLine() throws IOException, EOFException {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/execution/ExecutionChannelHandler.java
Patch:
@@ -42,10 +42,10 @@ public ExecutionChannelHandler(ChannelHandler handler, URL url) {
 
     @Override
     public void received(Channel channel, Object message) throws RemotingException {
-        ExecutorService cexecutor = getExecutorService();
+        ExecutorService executor = getExecutorService();
         if (message instanceof Request) {
             try {
-                cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));
+                executor.execute(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));
             } catch (Throwable t) {
                 // FIXME: when the thread pool is full, SERVER_THREADPOOL_EXHAUSTED_ERROR cannot return properly,
                 // therefore the consumer side has to wait until gets timeout. This is a temporary solution to prevent

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/message/MessageOnlyChannelHandler.java
Patch:
@@ -35,9 +35,9 @@ public MessageOnlyChannelHandler(ChannelHandler handler, URL url) {
 
     @Override
     public void received(Channel channel, Object message) throws RemotingException {
-        ExecutorService cexecutor = getExecutorService();
+        ExecutorService executor = getExecutorService();
         try {
-            cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));
+            executor.execute(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));
         } catch (Throwable t) {
             throw new ExecutionException(message, channel, getClass() + " error when process received event .", t);
         }

File: dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutput.java
Patch:
@@ -47,7 +47,7 @@ public void writeObject(Object obj) throws IOException {
         byte[] classNameBytes;
 
         try {
-            if (WrapperUtils.needWrapper(obj)) {
+            if (obj == null || WrapperUtils.needWrapper(obj)) {
                 Schema<Wrapper> schema = RuntimeSchema.getSchema(Wrapper.class);
                 Wrapper wrapper = new Wrapper(obj);
                 bytes = GraphIOUtil.toByteArray(wrapper, schema, buffer);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Configurator.java
Patch:
@@ -98,6 +98,7 @@ static Optional<List<Configurator>> toConfigurators(List<URL> urls) {
      * 1. the url with a specific host ip should have higher priority than 0.0.0.0
      * 2. if two url has the same host, compare by priority value；
      */
+    @Override
     default int compareTo(Configurator o) {
         if (o == null) {
             return -1;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfigurator.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.rpc.cluster.configurator.AbstractConfigurator;
 
 /**
- * AbsentConfigurator
+ * OverrideConfigurator
  *
  */
 public class OverrideConfigurator extends AbstractConfigurator {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfiguratorFactory.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.rpc.cluster.ConfiguratorFactory;
 
 /**
- * AbsentConfiguratorFactory
+ * OverrideConfiguratorFactory
  *
  */
 public class OverrideConfiguratorFactory implements ConfiguratorFactory {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParser.java
Patch:
@@ -130,7 +130,7 @@ private static String toParameterString(ConfigItem item) {
             sb.append(item.getSide());
         }
         Map<String, String> parameters = item.getParameters();
-        if (parameters == null || parameters.isEmpty()) {
+        if (CollectionUtils.isEmptyMap(parameters)) {
             throw new IllegalStateException("Invalid configurator rule, please specify at least one parameter " +
                     "you want to change in the rule.");
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/AbstractLoadBalance.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.cluster.LoadBalance;
@@ -44,7 +45,7 @@ static int calculateWarmupWeight(int uptime, int warmup, int weight) {
 
     @Override
     public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) {
-        if (invokers == null || invokers.isEmpty()) {
+        if (CollectionUtils.isEmpty(invokers)) {
             return null;
         }
         if (invokers.size() == 1) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java
Patch:
@@ -44,7 +44,7 @@
 public abstract class ListenableRouter extends AbstractRouter implements ConfigurationListener {
     public static final String NAME = "LISTENABLE_ROUTER";
     private static final String RULE_SUFFIX = ".condition-router";
-    public static final int DEFAULT_PRIORITY = 200;
+
     private static final Logger logger = LoggerFactory.getLogger(ListenableRouter.class);
     private ConditionRouterRule routerRule;
     private List<ConditionRouter> conditionRouters = Collections.emptyList();
@@ -120,7 +120,7 @@ private synchronized void init(String ruleKey) {
         String routerKey = ruleKey + RULE_SUFFIX;
         configuration.addListener(routerKey, this);
         String rule = configuration.getConfig(routerKey);
-        if (rule != null) {
+        if (StringUtils.isNotEmpty(rule)) {
             this.process(new ConfigChangeEvent(routerKey, rule));
         }
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java
Patch:
@@ -84,7 +84,9 @@ public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {
             String remoteGroup = map.get(Constants.GROUP_KEY);
             String remoteRelease = map.get(Constants.RELEASE_KEY);
             map.putAll(localMap);
-            map.put(Constants.GROUP_KEY, remoteGroup);
+            if (StringUtils.isNotEmpty(remoteGroup)) {
+                map.put(Constants.GROUP_KEY, remoteGroup);
+            }
             // we should always keep the Provider RELEASE_KEY not overrode by the the value on Consumer side.
             map.remove(Constants.RELEASE_KEY);
             if (StringUtils.isNotEmpty(remoteRelease)) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
@@ -103,7 +104,7 @@ private Result doMockInvoke(Invocation invocation, RpcException e) {
         Invoker<T> minvoker;
 
         List<Invoker<T>> mockInvokers = selectMockInvoker(invocation);
-        if (mockInvokers == null || mockInvokers.isEmpty()) {
+        if (CollectionUtils.isEmpty(mockInvokers)) {
             minvoker = (Invoker<T>) new MockInvoker(directory.getUrl());
         } else {
             minvoker = mockInvokers.get(0);

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationUtils.java
Patch:
@@ -38,7 +38,7 @@ public class ConfigurationUtils {
     public static int getServerShutdownTimeout() {
         int timeout = Constants.DEFAULT_SERVER_SHUTDOWN_TIMEOUT;
         Configuration configuration = Environment.getInstance().getConfiguration();
-        String value = configuration.getString(Constants.SHUTDOWN_WAIT_KEY);
+        String value = StringUtils.trim(configuration.getString(Constants.SHUTDOWN_WAIT_KEY));
 
         if (value != null && value.length() > 0) {
             try {
@@ -47,7 +47,7 @@ public static int getServerShutdownTimeout() {
                 // ignore
             }
         } else {
-            value = configuration.getString(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
+            value = StringUtils.trim(configuration.getString(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
             if (value != null && value.length() > 0) {
                 try {
                     timeout = Integer.parseInt(value) * 1000;
@@ -64,7 +64,7 @@ public static String getProperty(String property) {
     }
 
     public static String getProperty(String property, String defaultValue) {
-        return Environment.getInstance().getConfiguration().getString(property, defaultValue);
+        return StringUtils.trim(Environment.getInstance().getConfiguration().getString(property, defaultValue));
     }
 
     public static Map<String, String> parseProperties(String content) throws IOException {

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java
Patch:
@@ -579,6 +579,7 @@ private static Object parse(Reader reader, JSONVisitor handler, int expect) thro
                                         handler.objectItemValue(value, false);
                                         break;
                                     }
+                                    default:
                                 }
                             }
                             break;
@@ -629,6 +630,7 @@ private static Object parse(Reader reader, JSONVisitor handler, int expect) thro
                                         handler.objectItemValue(value, false);
                                         break;
                                     }
+                                    default:
                                 }
                             }
                             break;

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java
Patch:
@@ -275,6 +275,7 @@ private void beforeValue() throws IOException {
             case OBJECT_VALUE:
                 mState.type = OBJECT;
                 return;
+            default:
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java
Patch:
@@ -837,6 +837,7 @@ public JSONToken yylex() throws java.io.IOException, ParseException {
                         return null;
                     } else {
                         zzScanError(ZZ_NO_MATCH);
+                        break;
                     }
             }
         }

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConfigUtils.java
Patch:
@@ -50,7 +50,7 @@ public static boolean isNotEmpty(String value) {
     }
 
     public static boolean isEmpty(String value) {
-        return value == null || value.length() == 0
+        return StringUtils.isEmpty(value)
                 || "false".equalsIgnoreCase(value)
                 || "0".equalsIgnoreCase(value)
                 || "null".equalsIgnoreCase(value)
@@ -190,7 +190,7 @@ public static String getProperty(String key, String defaultValue) {
      */
     public static String getSystemProperty(String key) {
         String value = System.getenv(key);
-        if (value == null || value.length() == 0) {
+        if (StringUtils.isEmpty(value)) {
             value = System.getProperty(key);
         }
         return value;

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ClassGeneratorTest.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.apache.dubbo.common.bytecode;
 
-import junit.framework.TestCase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
@@ -28,7 +27,7 @@ interface Builder<T> {
     void setName(Bean bean, T name);
 }
 
-public class ClassGeneratorTest extends TestCase {
+public class ClassGeneratorTest {
 
     @SuppressWarnings("unchecked")
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/AdaptiveCompilerTest.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.dubbo.common.compiler.support;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class AdaptiveCompilerTest extends JavaCodeTest {
 
@@ -27,7 +27,7 @@ public void testAvailableCompiler() throws Exception {
         AdaptiveCompiler compiler = new AdaptiveCompiler();
         Class<?> clazz = compiler.compile(getSimpleCode(), AdaptiveCompiler.class.getClassLoader());
         HelloService helloService = (HelloService) clazz.newInstance();
-        Assert.assertEquals("Hello world!", helloService.sayHello());
+        Assertions.assertEquals("Hello world!", helloService.sayHello());
     }
 
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/CompletableFutureTaskTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.common.concurrent;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.ArgumentMatchers.any;
@@ -33,7 +33,7 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.dubbo.common.utils.NamedThreadFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 
 public class CompletableFutureTaskTest {

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/PropertiesConfigurationTest.java
Patch:
@@ -16,15 +16,15 @@
  */
 package org.apache.dubbo.common.config;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class PropertiesConfigurationTest {
 
     @Test
     public void testOrderPropertiesProviders() {
         PropertiesConfiguration configuration = new PropertiesConfiguration("test", null);
-        Assert.assertTrue(configuration.getInternalProperty("testKey").equals("999"));
+        Assertions.assertTrue(configuration.getInternalProperty("testKey").equals("999"));
     }
 
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Compatible_Test.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.dubbo.common.extension.compatible.impl.CompatibleExtImpl1;
 import org.apache.dubbo.common.extension.compatible.impl.CompatibleExtImpl2;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class ExtensionLoader_Compatible_Test {
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ext6_inject/impl/Ext6Impl1.java
Patch:
@@ -21,15 +21,15 @@
 import org.apache.dubbo.common.extension.ext6_inject.Dao;
 import org.apache.dubbo.common.extension.ext6_inject.Ext6;
 
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 
 public class Ext6Impl1 implements Ext6 {
     public Dao obj;
     SimpleExt ext1;
 
     public void setDao(Dao obj) {
-        Assert.assertNotNull("inject extension instance can not be null", obj);
-        Assert.fail();
+        Assertions.assertNotNull(obj, "inject extension instance can not be null");
+        Assertions.fail();
     }
 
     public void setExt1(SimpleExt ext1) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONReaderTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dubbo.common.io.UnsafeStringReader;
 
-import junit.framework.TestCase;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
-public class JSONReaderTest extends TestCase {
+public class JSONReaderTest  {
     public void testMain() throws Exception {
         String json = "{ name: 'name', friends: [ 1, null, 3.2, ] }";
         JSONReader reader = new JSONReader(new UnsafeStringReader(json));

File: dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONWriterTest.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.dubbo.common.json;
 
-import junit.framework.TestCase;
 
 import java.io.StringWriter;
 
-public class JSONWriterTest extends TestCase {
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class JSONWriterTest {
     public void testWriteJson() throws Exception {
         StringWriter w = new StringWriter();
         JSONWriter writer = new JSONWriter(w);

File: dubbo-common/src/test/java/org/apache/dubbo/common/logger/slf4j/Slf4jLoggerTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.common.logger.slf4j;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Marker;
 import org.slf4j.spi.LocationAwareLogger;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/status/StatusTest.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.dubbo.common.status;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.apache.dubbo.common.status.Status.Level.OK;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.isEmptyOrNullString;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class StatusTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/status/support/LoadStatusCheckerTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.status.Status;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.notNullValue;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class LoadStatusCheckerTest {
     private static Logger logger = LoggerFactory.getLogger(LoadStatusCheckerTest.class);

File: dubbo-common/src/test/java/org/apache/dubbo/common/status/support/MemoryStatusCheckerTest.java
Patch:
@@ -20,13 +20,13 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.status.Status;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.apache.dubbo.common.status.Status.Level.OK;
 import static org.apache.dubbo.common.status.Status.Level.WARN;
 import static org.hamcrest.CoreMatchers.anyOf;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class MemoryStatusCheckerTest {
     private static final Logger logger = LoggerFactory.getLogger(MemoryStatusCheckerTest.class);

File: dubbo-common/src/test/java/org/apache/dubbo/common/status/support/StatusUtilsTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.common.status.support;
 
 import org.apache.dubbo.common.status.Status;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -27,7 +27,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.isEmptyOrNullString;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class StatusUtilsTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/NamedInternalThreadFactoryTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dubbo.common.threadlocal;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class NamedInternalThreadFactoryTest {
 
@@ -31,6 +31,6 @@ public void run() {
 
             }
         });
-        Assert.assertTrue("thread is not InternalThread", t.getClass().equals(InternalThread.class));
+        Assertions.assertTrue(t.getClass().equals(InternalThread.class), "thread is not InternalThread");
     }
 }
\ No newline at end of file

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReportTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.Executors;
 import java.util.concurrent.RejectedExecutionException;

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/cached/CachedThreadPoolTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.common.threadpool.ThreadPool;
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.CountDownLatch;
@@ -36,7 +36,7 @@
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.startsWith;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class CachedThreadPoolTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.common.threadpool.ThreadPool;
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.CountDownLatch;
@@ -34,7 +34,7 @@
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.startsWith;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class EagerThreadPoolTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/fixed/FixedThreadPoolTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
 import org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool;
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.CountDownLatch;
@@ -37,7 +37,7 @@
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.startsWith;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class FixedThreadPoolTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/limited/LimitedThreadPoolTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.common.threadpool.ThreadPool;
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.CountDownLatch;
@@ -36,7 +36,7 @@
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.startsWith;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class LimitedThreadPoolTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/timer/HashedWheelTimerTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.common.timer;
 
 import org.apache.dubbo.common.utils.NamedThreadFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/ArrayUtilsTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dubbo.common.utils;
 
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import org.junit.jupiter.api.Test;
 
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class ArrayUtilsTest {
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/ExecutorUtilTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.util.concurrent.Executor;
@@ -28,7 +28,7 @@
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/HolderTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dubbo.common.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class HolderTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogHelperTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.common.utils;
 
 import org.apache.dubbo.common.logger.Logger;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import static org.mockito.Mockito.verify;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogTest.java
Patch:
@@ -18,11 +18,11 @@
 package org.apache.dubbo.common.utils;
 
 import org.apache.log4j.Level;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class LogTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/ParametersTest.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.dubbo.common.utils;
 
-import junit.framework.TestCase;
-
 import java.util.HashMap;
 import java.util.Map;
 
-public class ParametersTest extends TestCase {
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class ParametersTest {
     final String ServiceName = "org.apache.dubbo.rpc.service.GenericService";
     final String ServiceVersion = "1.0.15";
     final String LoadBalance = "lcr";

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/config/annotation/Reference.java
Patch:
@@ -43,7 +43,7 @@
 
     boolean generic() default false;
 
-    boolean injvm() default false;
+    boolean injvm() default true;
 
     boolean check() default true;
 

File: dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/schema/CompatibleAnnotationBeanDefinitionParser.java
Patch:
@@ -16,11 +16,9 @@
  */
 package org.apache.dubbo.config.spring.schema;
 
-import org.apache.dubbo.config.spring.AnnotationBean;
 import org.apache.dubbo.config.spring.beans.factory.annotation.CompatibleReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.CompatibleServiceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.util.BeanRegistrar;
-
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
@@ -34,7 +32,7 @@
 import static org.springframework.util.StringUtils.trimArrayElements;
 
 /**
- * {@link AnnotationBean} {@link BeanDefinitionParser}
+ * {@link BeanDefinitionParser}
  *
  * @see CompatibleServiceAnnotationBeanPostProcessor
  * @see CompatibleReferenceAnnotationBeanPostProcessor

File: dubbo-compatible/src/test/java/org/apache/dubbo/cache/CacheTest.java
Patch:
@@ -25,8 +25,8 @@
 import com.alibaba.dubbo.rpc.Invocation;
 import com.alibaba.dubbo.rpc.Invoker;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 import java.util.Map;
 
@@ -45,7 +45,7 @@ public void testCacheFactory() {
         org.apache.dubbo.rpc.Invocation inv = new RpcInvocation();
         org.apache.dubbo.cache.Cache c = factory.getCache(u, inv);
         String v = (String) c.get("testKey");
-        Assert.assertEquals("testValue", v);
+        Assertions.assertEquals("testValue", v);
     }
 
     static class NullInvocation implements Invocation {

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ArgumentConfigTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import com.alibaba.dubbo.config.ArgumentConfig;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ArgumentConfigTest {
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ConsumerConfigTest.java
Patch:
@@ -19,11 +19,11 @@
 
 import com.alibaba.dubbo.config.ConsumerConfig;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ConsumerConfigTest {
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.alibaba.dubbo.config.MethodConfig;
 
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -37,8 +37,8 @@
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class MethodConfigTest {
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.alibaba.dubbo.config.ProtocolConfig;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -28,7 +28,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ProtocolConfigTest {
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.alibaba.dubbo.config.ProviderConfig;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -29,7 +29,7 @@
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ProviderConfigTest {
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.config.RegistryConfig;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -31,7 +31,7 @@
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class RegistryConfigTest {
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/CompatibleRouter.java
Patch:
@@ -28,6 +28,7 @@
  *
  */
 public class CompatibleRouter implements Router {
+
     @Override
     public URL getUrl() {
         return null;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractMethodConfig.java
Patch:
@@ -178,7 +178,7 @@ public void setMock(Boolean mock) {
         if (mock == null) {
             setMock((String) null);
         } else {
-            setMock(String.valueOf(mock));
+            setMock(mock.toString());
         }
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractReferenceConfig.java
Patch:
@@ -56,11 +56,11 @@ public abstract class AbstractReferenceConfig extends AbstractInterfaceConfig {
     /**
      * Lazy create connection
      */
-    protected Boolean lazy;
+    protected Boolean lazy = false;
 
     protected String reconnect;
 
-    protected Boolean sticky;
+    protected Boolean sticky = false;
 
     /**
      * Whether to support event in stub.

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.compiler.support.AdaptiveCompiler;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.support.Parameter;
 
@@ -202,7 +203,7 @@ public void setEnvironment(String environment) {
     }
 
     public RegistryConfig getRegistry() {
-        return registries == null || registries.isEmpty() ? null : registries.get(0);
+        return CollectionUtils.isEmpty(registries) ? null : registries.get(0);
     }
 
     public void setRegistry(RegistryConfig registry) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java
Patch:
@@ -25,7 +25,7 @@
 import static org.apache.dubbo.common.Constants.PROPERTIES_CHAR_SEPERATOR;
 
 /**
- * RegistryConfig
+ * MetadataReportConfig
  *
  * @export
  */

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProviderConfig.java
Patch:
@@ -405,8 +405,8 @@ public String getDispatcher() {
     }
 
     public void setDispatcher(String dispatcher) {
-        checkExtension(Dispatcher.class, Constants.DISPATCHER_KEY, exchanger);
-        checkExtension(Dispatcher.class, "dispather", exchanger);
+        checkExtension(Dispatcher.class, Constants.DISPATCHER_KEY, dispatcher);
+        checkExtension(Dispatcher.class, "dispather", dispatcher);
         this.dispatcher = dispatcher;
     }
 

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/CacheListener.java
Patch:
@@ -35,6 +35,8 @@
  */
 
 public class CacheListener implements DataListener {
+    private static final int MIN_PATH_DEPTH = 5;
+
     private Map<String, Set<ConfigurationListener>> keyListeners = new ConcurrentHashMap<>();
     private CountDownLatch initializedLatch;
     private String rootPath;
@@ -89,7 +91,7 @@ public void dataChanged(String path, Object value, EventType eventType) {
         // TODO We limit the notification of config changes to a specific path level, for example
         //  /dubbo/config/service/configurators, other config changes not in this level will not get notified,
         //  say /dubbo/config/dubbo.properties
-        if (path.split("/").length >= 5) {
+        if (path.split("/").length >= MIN_PATH_DEPTH) {
             String key = pathToKey(path);
             ConfigChangeType changeType;
             switch (eventType) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/config/PropertiesConfigurationTest.java
Patch:
@@ -16,15 +16,15 @@
  */
 package org.apache.dubbo.common.config;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class PropertiesConfigurationTest {
 
     @Test
     public void testOrderPropertiesProviders() {
         PropertiesConfiguration configuration = new PropertiesConfiguration("test", null);
-        Assert.assertTrue(configuration.getInternalProperty("testKey").equals("999"));
+        Assertions.assertTrue(configuration.getInternalProperty("testKey").equals("999"));
     }
 
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -47,7 +47,6 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
-import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -267,7 +266,7 @@ private void init() {
         checkMock(interfaceClass);
 
         ConsumerModel consumerModel = new ConsumerModel(interfaceName, group, version, interfaceClass);
-        ApplicationModel.initConsumerModel(getUniqueServiceName(), consumerModel);
+        ApplicationModel.initConsumerModel(URL.buildKey(interfaceName, group, version), consumerModel);
 
         Map<String, String> map = new HashMap<String, String>();
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -380,7 +380,7 @@ protected synchronized void doExport() {
             path = interfaceName;
         }
         ProviderModel providerModel = new ProviderModel(interfaceName, group, version, ref, interfaceClass);
-        ApplicationModel.initProviderModel(getUniqueServiceName(), providerModel);
+        ApplicationModel.initProviderModel(URL.buildKey(interfaceName, group, version), providerModel);
         doExportUrls();
     }
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java
Patch:
@@ -217,7 +217,7 @@ private ConsumerMethodModel.AsyncMethodInfo getAsyncMethodInfo(Invoker<?> invoke
             return null;
         }
 
-        final ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = methodModel.getAsyncInfo();
+        final ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = (ConsumerMethodModel.AsyncMethodInfo) methodModel.getAttribute(Constants.ASYNC_KEY);
         if (asyncMethodInfo == null) {
             return null;
         }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/DefaultFuture.java
Patch:
@@ -329,9 +329,7 @@ private void doReceived(Response res) {
         lock.lock();
         try {
             response = res;
-            if (done != null) {
-                done.signal();
-            }
+            done.signalAll();
         } finally {
             lock.unlock();
         }

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/tps/TpsLimitFilterTest.java
Patch:
@@ -14,13 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.rpc.filter;
+package org.apache.dubbo.rpc.filter.tps;
 
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcException;
+import org.apache.dubbo.rpc.filter.TpsLimitFilter;
 import org.apache.dubbo.rpc.support.MockInvocation;
 import org.apache.dubbo.rpc.support.MyInvoker;
 

File: dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/AbstractMonitorFactory.java
Patch:
@@ -85,8 +85,8 @@ public Monitor getMonitor(URL url) {
 
             final URL monitorUrl = url;
             final CompletableFuture<Monitor> completableFuture = CompletableFuture.supplyAsync(() -> AbstractMonitorFactory.this.createMonitor(monitorUrl));
-            completableFuture.thenRunAsync(new MonitorListener(key), executor);
             FUTURES.put(key, completableFuture);
+            completableFuture.thenRunAsync(new MonitorListener(key), executor);
 
             return null;
         } finally {

File: dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/DubboMonitorTest.java
Patch:
@@ -61,7 +61,7 @@ public Class<MonitorService> getInterface() {
         }
 
         public URL getUrl() {
-            return URL.valueOf("dubbo://127.0.0.1:7070?interval=20");
+            return URL.valueOf("dubbo://127.0.0.1:7070?interval=1000");
         }
 
         @Override

File: dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/support/AbstractEtcdClient.java
Patch:
@@ -57,7 +57,7 @@ public abstract class AbstractEtcdClient<WatcherListener> implements EtcdClient
 
     private final Set<StateListener> stateListeners = new ConcurrentHashSet<>();
 
-    private final ConcurrentMap<String, ConcurrentMap<ChildListener, WatcherListener>> childListeners = new ConcurrentHashMap<String, ConcurrentMap<ChildListener, WatcherListener>>();
+    private final ConcurrentMap<String, ConcurrentMap<ChildListener, WatcherListener>> childListeners = new ConcurrentHashMap<>();
     private final List<String> categroies = Arrays.asList(Constants.PROVIDERS_CATEGORY
             , Constants.CONSUMERS_CATEGORY
             , Constants.ROUTERS_CATEGORY
@@ -99,7 +99,7 @@ public Set<StateListener> getSessionListeners() {
     public List<String> addChildListener(String path, final ChildListener listener) {
         ConcurrentMap<ChildListener, WatcherListener> listeners = childListeners.get(path);
         if (listeners == null) {
-            childListeners.putIfAbsent(path, new ConcurrentHashMap<ChildListener, WatcherListener>());
+            childListeners.putIfAbsent(path, new ConcurrentHashMap<>());
             listeners = childListeners.get(path);
         }
         WatcherListener targetListener = listeners.get(listener);

File: dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/support/AbstractEtcdClient.java
Patch:
@@ -57,7 +57,7 @@ public abstract class AbstractEtcdClient<WatcherListener> implements EtcdClient
 
     private final Set<StateListener> stateListeners = new ConcurrentHashSet<>();
 
-    private final ConcurrentMap<String, ConcurrentMap<ChildListener, WatcherListener>> childListeners = new ConcurrentHashMap<String, ConcurrentMap<ChildListener, WatcherListener>>();
+    private final ConcurrentMap<String, ConcurrentMap<ChildListener, WatcherListener>> childListeners = new ConcurrentHashMap<>();
     private final List<String> categroies = Arrays.asList(Constants.PROVIDERS_CATEGORY
             , Constants.CONSUMERS_CATEGORY
             , Constants.ROUTERS_CATEGORY
@@ -99,7 +99,7 @@ public Set<StateListener> getSessionListeners() {
     public List<String> addChildListener(String path, final ChildListener listener) {
         ConcurrentMap<ChildListener, WatcherListener> listeners = childListeners.get(path);
         if (listeners == null) {
-            childListeners.putIfAbsent(path, new ConcurrentHashMap<ChildListener, WatcherListener>());
+            childListeners.putIfAbsent(path, new ConcurrentHashMap<>());
             listeners = childListeners.get(path);
         }
         WatcherListener targetListener = listeners.get(listener);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java
Patch:
@@ -76,6 +76,6 @@
      * @see EnableDubboConfig#multiple()
      */
     @AliasFor(annotation = EnableDubboConfig.class, attribute = "multiple")
-    boolean multipleConfig() default false;
+    boolean multipleConfig() default true;
 
 }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java
Patch:
@@ -59,7 +59,7 @@
  *
  * @see EnableDubboConfigBinding
  * @see DubboConfigConfiguration
- * @see DubboConfigConfigurationSelector
+ * @see DubboConfigConfigurationRegistrar
  * @since 2.5.8
  */
 @Target({ElementType.TYPE})
@@ -75,6 +75,6 @@
      * @return the default value is <code>false</code>
      * @revised 2.5.9
      */
-    boolean multiple() default false;
+    boolean multiple() default true;
 
 }

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java
Patch:
@@ -96,7 +96,7 @@ public Map<String, String> convert(String[] source) {
         Assert.assertEquals("dubbo://localhost:12345", referenceBean.getUrl());
         Assert.assertEquals("client", referenceBean.getClient());
         Assert.assertEquals(true, referenceBean.isGeneric());
-        Assert.assertEquals(true, referenceBean.isInjvm());
+        Assert.assertNull(referenceBean.isInjvm());
         Assert.assertEquals(false, referenceBean.isCheck());
         Assert.assertEquals(true, referenceBean.isInit());
         Assert.assertEquals(true, referenceBean.getLazy());

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java
Patch:
@@ -81,7 +81,7 @@ public void testBuild() throws Exception {
         Assert.assertEquals("dubbo://localhost:12345", referenceBean.getUrl());
         Assert.assertEquals("client", referenceBean.getClient());
         Assert.assertEquals(true, referenceBean.isGeneric());
-        Assert.assertEquals(true, referenceBean.isInjvm());
+        Assert.assertNull(referenceBean.isInjvm());
         Assert.assertEquals(false, referenceBean.isCheck());
         Assert.assertEquals(null, referenceBean.isInit());
         Assert.assertEquals(true, referenceBean.getLazy());

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java
Patch:
@@ -26,7 +26,6 @@
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
-
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.PropertySource;
 
@@ -95,13 +94,13 @@ public void testMultiple() {
 
     }
 
-    @EnableDubboConfig(multiple = true)
+    @EnableDubboConfig
     @PropertySource("META-INF/config.properties")
     private static class TestMultipleConfig {
 
     }
 
-    @EnableDubboConfig
+    @EnableDubboConfig(multiple = false)
     @PropertySource("META-INF/config.properties")
     private static class TestConfig {
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java
Patch:
@@ -76,6 +76,6 @@
      * @see EnableDubboConfig#multiple()
      */
     @AliasFor(annotation = EnableDubboConfig.class, attribute = "multiple")
-    boolean multipleConfig() default false;
+    boolean multipleConfig() default true;
 
 }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java
Patch:
@@ -59,7 +59,7 @@
  *
  * @see EnableDubboConfigBinding
  * @see DubboConfigConfiguration
- * @see DubboConfigConfigurationSelector
+ * @see DubboConfigConfigurationRegistrar
  * @since 2.5.8
  */
 @Target({ElementType.TYPE})
@@ -75,6 +75,6 @@
      * @return the default value is <code>false</code>
      * @revised 2.5.9
      */
-    boolean multiple() default false;
+    boolean multiple() default true;
 
 }

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java
Patch:
@@ -26,7 +26,6 @@
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
-
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.PropertySource;
 
@@ -95,13 +94,13 @@ public void testMultiple() {
 
     }
 
-    @EnableDubboConfig(multiple = true)
+    @EnableDubboConfig
     @PropertySource("META-INF/config.properties")
     private static class TestMultipleConfig {
 
     }
 
-    @EnableDubboConfig
+    @EnableDubboConfig(multiple = false)
     @PropertySource("META-INF/config.properties")
     private static class TestConfig {
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java
Patch:
@@ -96,7 +96,7 @@ public Map<String, String> convert(String[] source) {
         Assert.assertEquals("dubbo://localhost:12345", referenceBean.getUrl());
         Assert.assertEquals("client", referenceBean.getClient());
         Assert.assertEquals(true, referenceBean.isGeneric());
-        Assert.assertEquals(true, referenceBean.isInjvm());
+        Assert.assertNull(referenceBean.isInjvm());
         Assert.assertEquals(false, referenceBean.isCheck());
         Assert.assertEquals(true, referenceBean.isInit());
         Assert.assertEquals(true, referenceBean.getLazy());

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java
Patch:
@@ -81,7 +81,7 @@ public void testBuild() throws Exception {
         Assert.assertEquals("dubbo://localhost:12345", referenceBean.getUrl());
         Assert.assertEquals("client", referenceBean.getClient());
         Assert.assertEquals(true, referenceBean.isGeneric());
-        Assert.assertEquals(true, referenceBean.isInjvm());
+        Assert.assertNull(referenceBean.isInjvm());
         Assert.assertEquals(false, referenceBean.isCheck());
         Assert.assertEquals(null, referenceBean.isInit());
         Assert.assertEquals(true, referenceBean.getLazy());

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -216,8 +216,8 @@ private <T> ExporterChangeableWrapper<T> doLocalExport(final Invoker<T> originIn
         String key = getCacheKey(originInvoker);
 
         return (ExporterChangeableWrapper<T>) bounds.computeIfAbsent(key, s -> {
-            Invoker<?> invokerDelegete = new InvokerDelegate<>(originInvoker, providerUrl);
-            return new ExporterChangeableWrapper<>((Exporter<T>) protocol.export(invokerDelegete), originInvoker);
+            Invoker<?> invokerDelegate = new InvokerDelegate<>(originInvoker, providerUrl);
+            return new ExporterChangeableWrapper<>((Exporter<T>) protocol.export(invokerDelegate), originInvoker);
         });
     }
 

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/test/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationTest.java
Patch:
@@ -133,6 +133,7 @@ public TestListener(CountDownLatch latch) {
 
         @Override
         public void process(ConfigChangeEvent event) {
+            System.out.println(this + ": " + event);
             Integer count = countMap.computeIfAbsent(event.getKey(), k -> new Integer(0));
             countMap.put(event.getKey(), ++count);
 

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java
Patch:
@@ -78,7 +78,7 @@ protected void doOpen() throws Throwable {
 
             @Override
             protected void initChannel(Channel ch) throws Exception {
-                int heartbeatInterval = UrlUtils.getIdleTimeout(getUrl());
+                int heartbeatInterval = UrlUtils.getHeartbeat(getUrl());
                 NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyClient.this);
                 ch.pipeline()//.addLast("logging",new LoggingHandler(LogLevel.INFO))//for debug
                         .addLast("decoder", adapter.getDecoder())

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -178,6 +178,7 @@ public ReferenceConfig() {
 
     public ReferenceConfig(Reference reference) {
         appendAnnotation(Reference.class, reference);
+        setMethods(MethodConfig.constructMethodConfig(reference.methods()));
     }
 
     public URL toUrl() {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -169,6 +169,7 @@ public ServiceConfig() {
 
     public ServiceConfig(Service service) {
         appendAnnotation(Service.class, service);
+        setMethods(MethodConfig.constructMethodConfig(service.methods()));
     }
 
     @Deprecated

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/annotation/consumer/AnnotationAction.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.config.spring.annotation.consumer;
 
+import org.apache.dubbo.config.annotation.Method;
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.config.spring.api.DemoService;
 
@@ -27,11 +28,11 @@
 @Controller("annotationAction")
 public class AnnotationAction {
 
-    @Reference(version = "1.2")
+    @Reference(version = "1.2", methods = {@Method(name = "sayHello", timeout = 5000)})
     private DemoService demoService;
 
     public String doSayName(String name) {
         return demoService.sayName(name);
     }
 
-}
\ No newline at end of file
+}

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/Server.java
Patch:
@@ -82,7 +82,7 @@ public void start() throws Throwable {
         if (!started.compareAndSet(false, true)) {
             return;
         }
-        boss = new NioEventLoopGroup(0, new DefaultThreadFactory("qos-boss", true));
+        boss = new NioEventLoopGroup(1, new DefaultThreadFactory("qos-boss", true));
         worker = new NioEventLoopGroup(0, new DefaultThreadFactory("qos-worker", true));
         ServerBootstrap serverBootstrap = new ServerBootstrap();
         serverBootstrap.group(boss, worker);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java
Patch:
@@ -84,7 +84,9 @@ public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {
             String remoteGroup = map.get(Constants.GROUP_KEY);
             String remoteRelease = map.get(Constants.RELEASE_KEY);
             map.putAll(localMap);
-            map.put(Constants.GROUP_KEY, remoteGroup);
+            if (StringUtils.isNotEmpty(remoteGroup)) {
+                map.put(Constants.GROUP_KEY, remoteGroup);
+            }
             // we should always keep the Provider RELEASE_KEY not overrode by the the value on Consumer side.
             map.remove(Constants.RELEASE_KEY);
             if (StringUtils.isNotEmpty(remoteRelease)) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractReferenceConfig.java
Patch:
@@ -36,12 +36,12 @@ public abstract class AbstractReferenceConfig extends AbstractInterfaceConfig {
     /**
      * Check if service provider exists, if not exists, it will be fast fail
      */
-    protected Boolean check = true;
+    protected Boolean check;
 
     /**
      * Whether to eagle-init
      */
-    protected Boolean init = false;
+    protected Boolean init;
 
     /**
      * Whether to use generic interface
@@ -51,7 +51,7 @@ public abstract class AbstractReferenceConfig extends AbstractInterfaceConfig {
     /**
      * Whether to find reference's instance from the current JVM
      */
-    protected Boolean injvm = false;
+    protected Boolean injvm;
 
     /**
      * Lazy create connection

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -57,7 +57,7 @@ public abstract class AbstractServiceConfig extends AbstractInterfaceConfig {
     /**
      * Whether to export the service
      */
-    protected Boolean export = true;
+    protected Boolean export;
 
     /**
      * The service weight

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java
Patch:
@@ -71,9 +71,9 @@
     boolean generic() default false;
 
     /**
-     * When enable, prefer to call local service in the same JVM if it's present, default value is false
+     * When enable, prefer to call local service in the same JVM if it's present, default value is true
      */
-    boolean injvm() default false;
+    boolean injvm() default true;
 
     /**
      * Check if service provider is available during boot up, default value is true

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java
Patch:
@@ -134,7 +134,6 @@ public void testExport() throws Exception {
         assertThat(url.getParameters(), hasKey(Constants.BIND_IP_KEY));
         assertThat(url.getParameters(), hasKey(Constants.BIND_PORT_KEY));
         assertThat(url.getParameters(), hasEntry(Constants.DEFAULT_KEY + "." + Constants.EXPORT_KEY, "true"));
-        assertThat(url.getParameters(), hasEntry(Constants.EXPORT_KEY, "true"));
         assertThat(url.getParameters(), hasEntry("echo.0.callback", "false"));
         assertThat(url.getParameters(), hasEntry(Constants.GENERIC_KEY, "false"));
         assertThat(url.getParameters(), hasEntry(Constants.INTERFACE_KEY, DemoService.class.getName()));

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java
Patch:
@@ -120,7 +120,7 @@ private synchronized void init(String ruleKey) {
         String routerKey = ruleKey + RULE_SUFFIX;
         configuration.addListener(routerKey, this);
         String rule = configuration.getConfig(routerKey);
-        if (rule != null) {
+        if (StringUtils.isNotEmpty(rule)) {
             this.process(new ConfigChangeEvent(routerKey, rule));
         }
     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java
Patch:
@@ -76,8 +76,7 @@ public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {
                 } else if (ProtocolUtils.isJavaGenericSerialization(generic)) {
                     for (int i = 0; i < args.length; i++) {
                         if (byte[].class == args[i].getClass()) {
-                            try {
-                                UnsafeByteArrayInputStream is = new UnsafeByteArrayInputStream((byte[]) args[i]);
+                            try(UnsafeByteArrayInputStream is = new UnsafeByteArrayInputStream((byte[]) args[i])) {
                                 args[i] = ExtensionLoader.getExtensionLoader(Serialization.class)
                                         .getExtension(Constants.GENERIC_SERIALIZATION_NATIVE_JAVA)
                                         .deserialize(null, is).readObject();

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/LogTelnetHandler.java
Patch:
@@ -55,8 +55,7 @@ public String telnet(Channel channel, String message) {
                 int showLogLength = Integer.parseInt(str[0]);
 
                 if (file != null && file.exists()) {
-                    try {
-                        FileInputStream fis = new FileInputStream(file);
+                    try(FileInputStream fis = new FileInputStream(file)) {
                         FileChannel filechannel = fis.getChannel();
                         size = filechannel.size();
                         ByteBuffer bb;

File: dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolTest.java
Patch:
@@ -225,4 +225,4 @@ public void testRegFail() {
     public void testDefaultPort() {
         assertThat(protocol.getDefaultPort(), is(80));
     }
-}
\ No newline at end of file
+}

File: dubbo-container/dubbo-container-spring/src/main/java/org/apache/dubbo/container/spring/SpringContainer.java
Patch:
@@ -46,7 +46,8 @@ public void start() {
         if (StringUtils.isEmpty(configPath)) {
             configPath = DEFAULT_SPRING_CONFIG;
         }
-        context = new ClassPathXmlApplicationContext(configPath.split("[,\\s]+"));
+        context = new ClassPathXmlApplicationContext(configPath.split("[,\\s]+"), false);
+        context.refresh();
         context.start();
     }
 

File: dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/tomcat/TomcatHttpServer.java
Patch:
@@ -67,6 +67,9 @@ public TomcatHttpServer(URL url, final HttpHandler handler) {
         context.addServletMapping("/*", "dispatcher");
         ServletManager.getInstance().addServletContext(url.getPort(), context.getServletContext());
 
+        // tell tomcat to fail on startup failures.
+        System.setProperty("org.apache.catalina.startup.EXIT_ON_INIT_FAILURE", "true");
+
         try {
             tomcat.start();
         } catch (LifecycleException e) {

File: dubbo-rpc/dubbo-rpc-rmi/src/test/java/org/apache/dubbo/rpc/protocol/rmi/DemoService.java
Patch:
@@ -23,6 +23,8 @@
 public interface DemoService {
     void sayHello(String name);
 
+    String sayHi(String name);
+
     String echo(String text);
 
     long timestamp();

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dubbo.common.utils.ReflectUtils;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.remoting.Channel;
-import org.apache.dubbo.remoting.Codec2;
 import org.apache.dubbo.remoting.exchange.Request;
 import org.apache.dubbo.remoting.exchange.Response;
 import org.apache.dubbo.remoting.exchange.codec.ExchangeCodec;
@@ -45,7 +44,7 @@
 /**
  * Dubbo codec.
  */
-public class DubboCodec extends ExchangeCodec implements Codec2 {
+public class DubboCodec extends ExchangeCodec {
 
     public static final String NAME = "dubbo";
     public static final String DUBBO_VERSION = Version.getProtocolVersion();

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/NetUtilsTest.java
Patch:
@@ -104,7 +104,6 @@ public void testGetLocalSocketAddress() throws Exception {
 
     @Test
     public void testIsValidAddress() throws Exception {
-        assertFalse(NetUtils.isValidV4Address((InetAddress) null));
         InetAddress address = mock(InetAddress.class);
         when(address.isLoopbackAddress()).thenReturn(true);
         assertFalse(NetUtils.isValidV4Address(address));
@@ -131,7 +130,6 @@ public void testGetLocalHost() throws Exception {
     public void testGetLocalAddress() throws Exception {
         InetAddress address = NetUtils.getLocalAddress();
         assertNotNull(address);
-        assertTrue(NetUtils.isValidLocalHost(address.getHostAddress()));
     }
 
     @Test
@@ -209,4 +207,4 @@ public void testNormalizeV6Address() {
         InetAddress normalized = NetUtils.normalizeV6Address(address);
         assertThat(normalized.getHostAddress(), equalTo("fe80:0:0:0:894:aeec:f37d:23e1%5"));
     }
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -333,9 +333,6 @@ protected URL loadMonitor(URL registryURL) {
         String hostToRegistry = ConfigUtils.getSystemProperty(Constants.DUBBO_IP_TO_REGISTRY);
         if (StringUtils.isEmpty(hostToRegistry)) {
             hostToRegistry = NetUtils.getLocalHost();
-        } else if (NetUtils.isInvalidLocalHost(hostToRegistry)) {
-            throw new IllegalArgumentException("Specified invalid registry ip from property:" +
-                    Constants.DUBBO_IP_TO_REGISTRY + ", value:" + hostToRegistry);
         }
         map.put(Constants.REGISTER_IP_KEY, hostToRegistry);
         appendParameters(map, monitor);

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/config/annotation/Reference.java
Patch:
@@ -43,7 +43,7 @@
 
     boolean generic() default false;
 
-    boolean injvm() default false;
+    boolean injvm() default true;
 
     boolean check() default true;
 

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReport.java
Patch:
@@ -62,7 +62,7 @@ public abstract class AbstractMetadataReport implements MetadataReport {
     // Log output
     protected final Logger logger = LoggerFactory.getLogger(getClass());
 
-    // Local disk cache, where the special key value.registries records the list of registry centers, and the others are the list of notified service providers
+    // Local disk cache, where the special key value.registries records the list of metadata centers, and the others are the list of notified service providers
     final Properties properties = new Properties();
     private final ExecutorService reportCacheExecutor = Executors.newFixedThreadPool(1, new NamedThreadFactory("DubboSaveMetadataReport", true));
     final Map<MetadataIdentifier, Object> allMetadataReports = new ConcurrentHashMap<>(4);
@@ -336,7 +336,7 @@ long calculateStartTime() {
     class MetadataReportRetry {
         protected final Logger logger = LoggerFactory.getLogger(getClass());
 
-        final ScheduledExecutorService retryExecutor = Executors.newScheduledThreadPool(0, new NamedThreadFactory("DubboRegistryFailedRetryTimer", true));
+        final ScheduledExecutorService retryExecutor = Executors.newScheduledThreadPool(0, new NamedThreadFactory("DubboMetadataReportRetryTimer", true));
         volatile ScheduledFuture retryScheduledFuture;
         AtomicInteger retryCounter = new AtomicInteger(0);
         // retry task schedule period
@@ -358,7 +358,7 @@ void startRetryTask() {
                         retryScheduledFuture = retryExecutor.scheduleWithFixedDelay(new Runnable() {
                             @Override
                             public void run() {
-                                // Check and connect to the registry
+                                // Check and connect to the metadata
                                 try {
                                     int times = retryCounter.incrementAndGet();
                                     logger.info("start to retry task for metadata report. retry times:" + times);

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RpcContextFilter.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.rpc.RpcContext;
-
 import org.jboss.resteasy.spi.ResteasyProviderFactory;
 
 import javax.annotation.Priority;
@@ -29,6 +28,7 @@
 import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.container.ContainerRequestFilter;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Map;
 
 @Priority(Integer.MIN_VALUE + 1)
@@ -71,14 +71,14 @@ public void filter(ClientRequestContext requestContext) throws IOException {
         int size = 0;
         for (Map.Entry<String, String> entry : RpcContext.getContext().getAttachments().entrySet()) {
             String key = entry.getKey();
-            String value = entry.getKey();
+            String value = entry.getValue();
             if (illegalForRest(key) || illegalForRest(value)) {
                 throw new IllegalArgumentException("The attachments of " + RpcContext.class.getSimpleName() + " must not contain ',' or '=' when using rest protocol");
             }
 
             // TODO for now we don't consider the differences of encoding and server limit
             if (value != null) {
-                size += value.getBytes("UTF-8").length;
+                size += value.getBytes(StandardCharsets.UTF_8).length;
             }
             if (size > MAX_HEADER_SIZE) {
                 throw new IllegalArgumentException("The attachments of " + RpcContext.class.getSimpleName() + " is too big");

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProviderConfig.java
Patch:
@@ -405,8 +405,8 @@ public String getDispatcher() {
     }
 
     public void setDispatcher(String dispatcher) {
-        checkExtension(Dispatcher.class, Constants.DISPATCHER_KEY, exchanger);
-        checkExtension(Dispatcher.class, "dispather", exchanger);
+        checkExtension(Dispatcher.class, Constants.DISPATCHER_KEY, dispatcher);
+        checkExtension(Dispatcher.class, "dispather", dispatcher);
         this.dispatcher = dispatcher;
     }
 

File: dubbo-registry/dubbo-registry-multicast/src/test/java/org/apache/dubbo/registry/multicast/MulticastRegistryTest.java
Patch:
@@ -92,7 +92,9 @@ public void testRegister() {
         Set<URL> registered;
         // clear first
         registered = registry.getRegistered();
-        registered.clear();
+        for (URL url : registered) {
+            registry.unregister(url);
+        }
 
         for (int i = 0; i < 2; i++) {
             registry.register(serviceUrl);

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/ProviderConsumerRegTable.java
Patch:
@@ -72,9 +72,9 @@ public static <T> ProviderInvokerWrapper<T> getProviderWrapper(URL registeredPro
             return null;
         }
 
-        for (Invoker inv : invokers.keySet()) {
-            if (inv == invoker) {
-                return invokers.get(inv);
+        for (Map.Entry<Invoker, ProviderInvokerWrapper> entry : invokers.entrySet()) {
+            if (entry.getKey() == invoker) {
+                return entry.getValue();
             }
         }
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/CollectionTypeBuilder.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.text.MessageFormat;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Map;
 
@@ -48,7 +49,7 @@ public TypeDefinition build(Type type, Class<?> clazz, Map<Class<?>, TypeDefinit
         Type[] actualTypeArgs = parameterizedType.getActualTypeArguments();
         if (actualTypeArgs == null || actualTypeArgs.length != 1) {
             throw new IllegalArgumentException(MessageFormat.format(
-                    "[ServiceDefinitionBuilder] Collection type [{0}] with unexpected amount of arguments [{1}]." + actualTypeArgs,
+                    "[ServiceDefinitionBuilder] Collection type [{0}] with unexpected amount of arguments [{1}]." + Arrays.toString(actualTypeArgs),
                     new Object[]{type, actualTypeArgs}));
         }
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/MapTypeBuilder.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.text.MessageFormat;
+import java.util.Arrays;
 import java.util.Map;
 
 /**
@@ -47,7 +48,7 @@ public TypeDefinition build(Type type, Class<?> clazz, Map<Class<?>, TypeDefinit
         Type[] actualTypeArgs = parameterizedType.getActualTypeArguments();
         if (actualTypeArgs == null || actualTypeArgs.length != 2) {
             throw new IllegalArgumentException(MessageFormat.format(
-                    "[ServiceDefinitionBuilder] Map type [{0}] with unexpected amount of arguments [{1}]." + actualTypeArgs, new Object[]{
+                    "[ServiceDefinitionBuilder] Map type [{0}] with unexpected amount of arguments [{1}]." + Arrays.toString(actualTypeArgs), new Object[]{
                             type, actualTypeArgs}));
         }
 

File: dubbo-registry/dubbo-registry-redis/src/main/java/org/apache/dubbo/registry/redis/RedisRegistry.java
Patch:
@@ -564,7 +564,7 @@ public void run() {
                                     jedis = jedisPool.getResource();
                                     try {
                                         if (service.endsWith(Constants.ANY_VALUE)) {
-                                            if (!first) {
+                                            if (first) {
                                                 first = false;
                                                 Set<String> keys = jedis.keys(service);
                                                 if (CollectionUtils.isNotEmpty(keys)) {
@@ -576,7 +576,7 @@ public void run() {
                                             }
                                             jedis.psubscribe(new NotifySub(jedisPool), service); // blocking
                                         } else {
-                                            if (!first) {
+                                            if (first) {
                                                 first = false;
                                                 doNotify(jedis, service);
                                                 resetSkip();

File: dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java
Patch:
@@ -247,7 +247,7 @@ public class Constants {
 
     public static final String PROTOCOL_KEY = "protocol";
 
-    public static final String DOBBO_PROTOCOL = DUBBO;
+    public static final String DUBBO_PROTOCOL = DUBBO;
 
     public static final String ZOOKEEPER_PROTOCOL = "zookeeper";
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -350,12 +350,12 @@ protected URL loadMonitor(URL registryURL) {
                 if (getExtensionLoader(MonitorFactory.class).hasExtension("logstat")) {
                     map.put(Constants.PROTOCOL_KEY, "logstat");
                 } else {
-                    map.put(Constants.PROTOCOL_KEY, Constants.DOBBO_PROTOCOL);
+                    map.put(Constants.PROTOCOL_KEY, Constants.DUBBO_PROTOCOL);
                 }
             }
             return UrlUtils.parseURL(address, map);
         } else if (Constants.REGISTRY_PROTOCOL.equals(monitor.getProtocol()) && registryURL != null) {
-          return registryURL.setProtocol(Constants.DOBBO_PROTOCOL).addParameter(Constants.PROTOCOL_KEY, Constants.REGISTRY_PROTOCOL).addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map));
+          return registryURL.setProtocol(Constants.DUBBO_PROTOCOL).addParameter(Constants.PROTOCOL_KEY, Constants.REGISTRY_PROTOCOL).addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map));
         }
         return null;
     }

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoaderTest.java
Patch:
@@ -87,7 +87,7 @@ public void test_getExtensionLoader_NotInterface() throws Exception {
             fail();
         } catch (IllegalArgumentException expected) {
             assertThat(expected.getMessage(),
-                    containsString("Extension type (class org.apache.dubbo.common.extension.ExtensionLoaderTest) is not interface"));
+                    containsString("Extension type (class org.apache.dubbo.common.extension.ExtensionLoaderTest) is not an interface"));
         }
     }
 
@@ -99,8 +99,8 @@ public void test_getExtensionLoader_NotSpiAnnotation() throws Exception {
         } catch (IllegalArgumentException expected) {
             assertThat(expected.getMessage(),
                     allOf(containsString("org.apache.dubbo.common.extension.NoSpiExt"),
-                            containsString("is not extension"),
-                            containsString("WITHOUT @SPI Annotation")));
+                            containsString("is not an extension"),
+                            containsString("NOT annotated with @SPI")));
         }
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConfigCenterConfig.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 /**
- *
+ * ConfigCenterConfig
  */
 public class ConfigCenterConfig extends AbstractConfig {
     private AtomicBoolean inited = new AtomicBoolean(false);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConsumerConfig.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.common.utils.StringUtils;
 
 /**
- * The service consumer default confuguration
+ * The service consumer default configuration
  *
  * @export
  */

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java
Patch:
@@ -25,7 +25,7 @@
 import static org.apache.dubbo.common.Constants.PROPERTIES_CHAR_SEPERATOR;
 
 /**
- * RegistryConfig
+ * MetadataReportConfig
  *
  * @export
  */

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -349,7 +349,7 @@ public URL setPassword(String password) {
 
     public String getAuthority() {
         if (StringUtils.isEmpty(username)
-                && StringUtils.isEmpty(parameter)) {
+                && StringUtils.isEmpty(password)) {
             return null;
         }
         return (username == null ? "" : username)

File: dubbo-common/src/main/java/org/apache/dubbo/common/timer/HashedWheelTimer.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.Locale;
 import java.util.Queue;
 import java.util.Set;
-import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Executors;
+import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
@@ -109,8 +109,8 @@ public class HashedWheelTimer implements Timer {
     private final HashedWheelBucket[] wheel;
     private final int mask;
     private final CountDownLatch startTimeInitialized = new CountDownLatch(1);
-    private final Queue<HashedWheelTimeout> timeouts = new ArrayBlockingQueue<HashedWheelTimeout>(1024);
-    private final Queue<HashedWheelTimeout> cancelledTimeouts = new ArrayBlockingQueue<HashedWheelTimeout>(1024);
+    private final Queue<HashedWheelTimeout> timeouts = new LinkedBlockingQueue<>();
+    private final Queue<HashedWheelTimeout> cancelledTimeouts = new LinkedBlockingQueue<>();
     private final AtomicLong pendingTimeouts = new AtomicLong(0);
     private final long maxPendingTimeouts;
 

File: dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyBackedChannelBuffer.java
Patch:
@@ -119,7 +119,7 @@ public void setBytes(int index, ChannelBuffer src, int srcIndex, int length) {
         // careful
         byte[] data = new byte[length];
         buffer.getBytes(srcIndex, data, 0, length);
-        setBytes(0, data, index, length);
+        setBytes(index, data, 0, length);
     }
 
 

File: dubbo-container/dubbo-container-api/src/main/java/org/apache/dubbo/container/Container.java
Patch:
@@ -25,12 +25,12 @@
 public interface Container {
 
     /**
-     * start.
+     * start method to load the container.
      */
     void start();
 
     /**
-     * stop.
+     * stop method to unload the container.
      */
     void stop();
 

File: dubbo-container/dubbo-container-api/src/main/java/org/apache/dubbo/container/Main.java
Patch:
@@ -33,6 +33,8 @@
 
 /**
  * Main. (API, Static, ThreadSafe)
+ *
+ * This class is entry point loading containers.
  */
 public class Main {
 

File: dubbo-container/dubbo-container-log4j/src/main/java/org/apache/dubbo/container/log4j/Log4jContainer.java
Patch:
@@ -30,6 +30,8 @@
 
 /**
  * Log4jContainer. (SPI, Singleton, ThreadSafe)
+ *
+ * The container class implementation for Log4j
  */
 public class Log4jContainer implements Container {
 

File: dubbo-container/dubbo-container-logback/src/main/java/org/apache/dubbo/container/logback/LogbackContainer.java
Patch:
@@ -31,6 +31,8 @@
 
 /**
  * LogbackContainer. (SPI, Singleton, ThreadSafe)
+ *
+ * The container class implementation for Logback
  */
 public class LogbackContainer implements Container {
 

File: dubbo-container/dubbo-container-spring/src/main/java/org/apache/dubbo/container/spring/SpringContainer.java
Patch:
@@ -26,6 +26,8 @@
 
 /**
  * SpringContainer. (SPI, Singleton, ThreadSafe)
+ *
+ * The container class implementation for Spring
  */
 public class SpringContainer implements Container {
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.common.utils.UrlUtils;
 import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.config.support.Parameter;
 import org.apache.dubbo.configcenter.DynamicConfiguration;
 import org.apache.dubbo.configcenter.DynamicConfigurationFactory;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dubbo.common.utils.ConfigUtils;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.config.annotation.Service;
 import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker;

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java
Patch:
@@ -65,7 +65,6 @@ public LazyConnectExchangeClient(URL url, ExchangeHandler requestHandler) {
         this.requestWithWarning = url.getParameter(REQUEST_WITH_WARNING_KEY, false);
     }
 
-
     private void initClient() throws RemotingException {
         if (client != null) {
             return;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockInvoker.java
Patch:
@@ -70,7 +70,7 @@ public static Object parseMockValue(String mock, Type[] returnTypes) throws Exce
             value = mock.subSequence(1, mock.length() - 1);
         } else if (returnTypes != null && returnTypes.length > 0 && returnTypes[0] == String.class) {
             value = mock;
-        } else if (StringUtils.isNumeric(mock)) {
+        } else if (StringUtils.isNumeric(mock, false)) {
             value = JSON.parse(mock);
         } else if (mock.startsWith("{")) {
             value = JSON.parseObject(mock, Map.class);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java
Patch:
@@ -142,7 +142,7 @@ protected Object decodeBody(Channel channel, InputStream is, byte[] header) thro
             // decode response.
             Response res = new Response(id);
             if ((flag & FLAG_EVENT) != 0) {
-                res.setEvent(Response.HEARTBEAT_EVENT);
+                res.setEvent(true);
             }
             // get status.
             byte status = header[3];

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/transport/codec/DeprecatedExchangeCodec.java
Patch:
@@ -136,7 +136,7 @@ protected Object decodeBody(Channel channel, InputStream is, byte[] header) thro
             // decode response.
             Response res = new Response(id);
             if ((flag & FLAG_EVENT) != 0) {
-                res.setEvent(Response.HEARTBEAT_EVENT);
+                res.setEvent(true);
             }
             // get status.
             byte status = header[3];

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -68,7 +68,7 @@ protected Object decodeBody(Channel channel, InputStream is, byte[] header) thro
             // decode response.
             Response res = new Response(id);
             if ((flag & FLAG_EVENT) != 0) {
-                res.setEvent(Response.HEARTBEAT_EVENT);
+                res.setEvent(true);
             }
             // get status.
             byte status = header[3];

File: dubbo-metadata-report/dubbo-metadata-definition/src/test/java/org/apache/dubbo/metadata/definition/service/ComplexObject.java
Patch:
@@ -225,15 +225,15 @@ public String getInnerA2() {
             return innerA2;
         }
 
-        public void setInnerA2(String innerA) {
+        public void setInnerA2(String innerA2) {
             this.innerA2 = innerA2;
         }
 
         public int getInnerB2() {
             return innerB2;
         }
 
-        public void setInnerB2(int innerB) {
+        public void setInnerB2(int innerB2) {
             this.innerB2 = innerB2;
         }
 

File: dubbo-rpc/dubbo-rpc-webservice/src/test/java/org/apache/dubbo/rpc/protocol/webservice/WebserviceProtocolTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.extension.ExtensionLoader;
+import org.apache.dubbo.rpc.Exporter;
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
 
@@ -37,9 +38,10 @@ public class WebserviceProtocolTest {
     @Test
     public void testDemoProtocol() throws Exception {
         DemoService service = new DemoServiceImpl();
-        protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf("webservice://127.0.0.1:9019/" + DemoService.class.getName() + "?codec=exchange")));
+        Exporter<DemoService> exporter = protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf("webservice://127.0.0.1:9019/" + DemoService.class.getName() + "?codec=exchange")));
         service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf("webservice://127.0.0.1:9019/" + DemoService.class.getName() + "?codec=exchange&timeout=3000")));
         assertEquals(service.getSize(new String[]{"", "", ""}), 3);
+        exporter.unexport();
     }
 
     @Test

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/store/test/JTestMetadataReport4Test.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.metadata.identifier.MetadataIdentifier;
 import org.apache.dubbo.metadata.support.AbstractMetadataReport;
-import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -35,7 +34,7 @@ public class JTestMetadataReport4Test extends AbstractMetadataReport {
     private final static Logger logger = LoggerFactory.getLogger(JTestMetadataReport4Test.class);
 
 
-    public JTestMetadataReport4Test(URL url, ZookeeperTransporter zookeeperTransporter) {
+    public JTestMetadataReport4Test(URL url) {
         super(url);
     }
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/textui/TKvTest.java
Patch:
@@ -35,9 +35,9 @@ public void test1() {
         });
 
         String kv = tKv.rendering();
-        assertThat(kv, containsString("ABCDEFGHIJ\n"));
-        assertThat(kv, containsString("KLMNOPQRST\n"));
-        assertThat(kv, containsString("UVWXYZ\n"));
+        assertThat(kv, containsString("ABCDEFGHIJ" + System.lineSeparator()));
+        assertThat(kv, containsString("KLMNOPQRST" + System.lineSeparator()));
+        assertThat(kv, containsString("UVWXYZ" + System.lineSeparator()));
 
         tTable.addRow("OPTIONS", kv);
         String table = tTable.rendering();

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/GenericImplFilterTest.java
Patch:
@@ -50,7 +50,7 @@ public void testInvoke() throws Exception {
                 new Class[]{Person.class}, new Object[]{new Person("dubbo", 10)});
 
 
-        URL url = URL.valueOf("test://test:11/com.alibaba.dubbo.rpc.support.DemoService?" +
+        URL url = URL.valueOf("test://test:11/org.apache.dubbo.rpc.support.DemoService?" +
                 "accesslog=true&group=dubbo&version=1.1&generic=true");
         Invoker invoker = Mockito.mock(Invoker.class);
 
@@ -74,7 +74,7 @@ public void testInvokeWithException() throws Exception {
         RpcInvocation invocation = new RpcInvocation("getPerson",
                 new Class[]{Person.class}, new Object[]{new Person("dubbo", 10)});
 
-        URL url = URL.valueOf("test://test:11/com.alibaba.dubbo.rpc.support.DemoService?" +
+        URL url = URL.valueOf("test://test:11/org.apache.dubbo.rpc.support.DemoService?" +
                 "accesslog=true&group=dubbo&version=1.1&generic=true");
         Invoker invoker = Mockito.mock(Invoker.class);
 
@@ -100,7 +100,7 @@ public void testInvokeWithException() throws Exception {
         RpcInvocation invocation = new RpcInvocation(Constants.$INVOKE, genericInvoke.getParameterTypes(),
                 new Object[]{"getPerson", new String[]{Person.class.getCanonicalName()}, new Object[]{person}});
 
-        URL url = URL.valueOf("test://test:11/com.alibaba.dubbo.rpc.support.DemoService?" +
+        URL url = URL.valueOf("test://test:11/org.apache.dubbo.rpc.support.DemoService?" +
                 "accesslog=true&group=dubbo&version=1.1&generic=true");
         Invoker invoker = Mockito.mock(Invoker.class);
         when(invoker.invoke(any(Invocation.class))).thenReturn(new RpcResult(new Person("person", 10)));

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java
Patch:
@@ -63,9 +63,9 @@ public CompletableFuture<Object> reply(ExchangeChannel channel, Object msg) thro
 
             if (msg instanceof Invocation) {
                 Invocation inv = (Invocation) msg;
-                String serviceName = inv.getAttachments().get(Constants.INTERFACE_KEY);
+                String path = inv.getAttachments().get(Constants.PATH_KEY);
                 String serviceKey = serviceKey(channel.getLocalAddress().getPort(),
-                        serviceName, null, null);
+                        path, null, null);
                 DubboExporter<?> exporter = (DubboExporter<?>) exporterMap.get(serviceKey);
                 if (exporter == null) {
                     throw new RemotingException(channel,

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -42,8 +42,9 @@ public class ContextFilter implements Filter {
     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
         Map<String, String> attachments = invocation.getAttachments();
         if (attachments != null) {
-            attachments = new HashMap<String, String>(attachments);
+            attachments = new HashMap<>(attachments);
             attachments.remove(Constants.PATH_KEY);
+            attachments.remove(Constants.INTERFACE_KEY);
             attachments.remove(Constants.GROUP_KEY);
             attachments.remove(Constants.VERSION_KEY);
             attachments.remove(Constants.DUBBO_VERSION_KEY);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java
Patch:
@@ -152,7 +152,6 @@ public Result invoke(Invocation inv) throws RpcException {
         }
         RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);
 
-
         try {
             return doInvoke(invocation);
         } catch (InvocationTargetException e) { // biz exception

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/integration/MetadataReportService.java
Patch:
@@ -38,7 +38,7 @@ public class MetadataReportService {
 
     protected final Logger logger = LoggerFactory.getLogger(getClass());
 
-    private static MetadataReportService metadataReportService;
+    private static volatile MetadataReportService metadataReportService;
     private static Object lock = new Object();
 
     private MetadataReportFactory metadataReportFactory = ExtensionLoader.getExtensionLoader(MetadataReportFactory.class).getAdaptiveExtension();

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReport.java
Patch:
@@ -357,7 +357,7 @@ class MetadataReportRetry {
         protected final Logger logger = LoggerFactory.getLogger(getClass());
 
         final ScheduledExecutorService retryExecutor = Executors.newScheduledThreadPool(0, new NamedThreadFactory("DubboRegistryFailedRetryTimer", true));
-        ScheduledFuture retryScheduledFuture;
+        volatile ScheduledFuture retryScheduledFuture;
         AtomicInteger retryCounter = new AtomicInteger(0);
         // retry task schedule period
         long retryPeriod;

File: dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java
Patch:
@@ -300,9 +300,9 @@ public class Constants {
     public static final long LEAST_HEARTBEAT_DURATION = 1000;
 
     /**
-     * ticks per wheel. Currently only contains two tasks, so 16 locations are enough
+     * ticks per wheel.
      */
-    public static final int TICKS_PER_WHEEL = 16;
+    public static final int TICKS_PER_WHEEL = 128;
 
     public static final String HEARTBEAT_TIMEOUT_KEY = "heartbeat.timeout";
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -372,7 +372,8 @@ private <T> Invoker<T> doRefer(Cluster cluster, Registry registry, Class<T> type
         Map<String, String> parameters = new HashMap<String, String>(directory.getUrl().getParameters());
         URL subscribeUrl = new URL(CONSUMER_PROTOCOL, parameters.remove(REGISTER_IP_KEY), 0, type.getName(), parameters);
         if (!ANY_VALUE.equals(url.getServiceInterface()) && url.getParameter(REGISTER_KEY, true)) {
-            registry.register(getRegisteredConsumerUrl(subscribeUrl, url));
+            directory.setRegisteredConsumerUrl(getRegisteredConsumerUrl(subscribeUrl, url));
+            registry.register(directory.getRegisteredConsumerUrl());
         }
         directory.buildRouterChain(subscribeUrl);
         directory.subscribe(subscribeUrl.addParameter(CATEGORY_KEY,
@@ -383,7 +384,7 @@ private <T> Invoker<T> doRefer(Cluster cluster, Registry registry, Class<T> type
         return invoker;
     }
 
-    private URL getRegisteredConsumerUrl(final URL consumerUrl, URL registryUrl) {
+    public URL getRegisteredConsumerUrl(final URL consumerUrl, URL registryUrl) {
         if (!registryUrl.getParameter(SIMPLIFIED_KEY, false)) {
             return consumerUrl.addParameters(CATEGORY_KEY, CONSUMERS_CATEGORY,
                     CHECK_KEY, String.valueOf(false));

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ConfigTest.java
Patch:
@@ -24,8 +24,7 @@
 import com.alibaba.dubbo.config.ReferenceConfig;
 import com.alibaba.dubbo.config.ServiceConfig;
 
-import org.junit.After;
-import org.junit.Assert;
+import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -34,7 +33,7 @@ public class ConfigTest {
     private com.alibaba.dubbo.config.ApplicationConfig applicationConfig = new com.alibaba.dubbo.config.ApplicationConfig("first-dubbo-test");
     private com.alibaba.dubbo.config.RegistryConfig registryConfig = new com.alibaba.dubbo.config.RegistryConfig("multicast://224.5.6.7:1234");
 
-    @After
+    @AfterEach
     public void tearDown() {
         ConfigManager.getInstance().clear();
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -64,7 +64,7 @@ public AbstractDirectory(URL url, URL consumerUrl, RouterChain<T> routerChain) {
 
         if (url.getProtocol().equals(Constants.REGISTRY_PROTOCOL)) {
             Map<String, String> queryMap = StringUtils.parseQueryString(url.getParameterAndDecoded(Constants.REFER_KEY));
-            this.url = url.clearParameters().addParameters(queryMap).removeParameter(Constants.MONITOR_KEY);
+            this.url = url.addParameters(queryMap).removeParameter(Constants.MONITOR_KEY);
         } else {
             this.url = url;
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java
Patch:
@@ -97,7 +97,6 @@ protected List<Invoker<T>> doList(Invocation invocation) throws RpcException {
         List<Invoker<T>> finalInvokers = invokers;
         if (routerChain != null) {
             try {
-                // Get invokers from cache, only runtime routers will be executed.
                 finalInvokers = routerChain.route(getConsumerUrl(), invocation);
             } catch (Throwable t) {
                 logger.error("Failed to execute router: " + getUrl() + ", cause: " + t.getMessage(), t);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/AppRouter.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.configcenter.DynamicConfiguration;
 
 /**
- * Application level router, "application.routers"
+ * Application level router, "application.condition-router"
  */
 public class AppRouter extends ListenableRouter {
     public static final String NAME = "APP_ROUTER";

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ServiceRouter.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.configcenter.DynamicConfiguration;
 
 /**
- * Service level router, "server-uniq-name.routers"
+ * Service level router, "server-unique-name.condition-router"
  */
 public class ServiceRouter extends ListenableRouter {
     public static final String NAME = "SERVICE_ROUTER";

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -223,7 +223,7 @@ public void testSelect_multiInvokers() throws Exception {
     public void testCloseAvailablecheck() {
         LoadBalance lb = mock(LoadBalance.class);
         Map<String, String> queryMap = StringUtils.parseQueryString(url.getParameterAndDecoded(Constants.REFER_KEY));
-        URL tmpUrl = url.clearParameters().addParameters(queryMap).removeParameter(Constants.MONITOR_KEY);
+        URL tmpUrl = url.addParameters(queryMap).removeParameter(Constants.MONITOR_KEY);
         given(lb.select(invokers, tmpUrl, invocation)).willReturn(invoker1);
         initlistsize5();
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java
Patch:
@@ -163,10 +163,12 @@ public void setDynamicConfiguration(Configuration dynamicConfiguration) {
     // For test
     public void clearExternalConfigs() {
         this.externalConfigs.clear();
+        this.externalConfigurationMap.clear();
     }
 
     // For test
     public void clearAppExternalConfigs() {
         this.appExternalConfigs.clear();
+        this.appExternalConfigurationMap.clear();
     }
 }

File: dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/schema/CompatibleAnnotationBeanDefinitionParser.java
Patch:
@@ -16,11 +16,9 @@
  */
 package org.apache.dubbo.config.spring.schema;
 
-import org.apache.dubbo.config.spring.AnnotationBean;
 import org.apache.dubbo.config.spring.beans.factory.annotation.CompatibleReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.CompatibleServiceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.util.BeanRegistrar;
-
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
@@ -34,7 +32,7 @@
 import static org.springframework.util.StringUtils.trimArrayElements;
 
 /**
- * {@link AnnotationBean} {@link BeanDefinitionParser}
+ * {@link BeanDefinitionParser}
  *
  * @see CompatibleServiceAnnotationBeanPostProcessor
  * @see CompatibleReferenceAnnotationBeanPostProcessor

File: dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/CompatibleRouter.java
Patch:
@@ -28,6 +28,7 @@
  *
  */
 public class CompatibleRouter implements Router {
+
     @Override
     public URL getUrl() {
         return null;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/ExporterSideConfigUrlTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.config.context.ConfigManager;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -43,10 +44,12 @@ public static void start() {
     @BeforeEach
     public void setUp() {
         initServConf();
+        ConfigManager.getInstance().clear();
     }
 
     @AfterEach()
     public void teardown() {
+        ConfigManager.getInstance().clear();
     }
 
     @Test

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationConfigBeanBuilder.java
Patch:
@@ -77,7 +77,7 @@ public final B build() throws Exception {
         configureBean(bean);
 
         if (logger.isInfoEnabled()) {
-            logger.info(bean + " has been built.");
+            logger.info("The bean[type:" + bean.getClass().getSimpleName() + "] has been built.");
         }
 
         return bean;
@@ -175,7 +175,7 @@ private void configureModuleConfig(B bean) {
 
 
     /**
-     * Resolves the bean ids of {@link org.apache.dubbo.config.RegistryConfig}
+     * Resolves the bean ids of {@link RegistryConfig}
      *
      * @param annotation {@link A}
      * @return non-empty array

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigBindingBeanPostProcessor.java
Patch:
@@ -76,7 +76,7 @@ public DubboConfigBindingBeanPostProcessor(String prefix, String beanName) {
     @Override
     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
 
-        if (beanName != null && beanName.equals(this.beanName) && bean instanceof AbstractConfig) {
+        if (beanName.equals(this.beanName) && bean instanceof AbstractConfig) {
 
             AbstractConfig dubboConfig = (AbstractConfig) bean;
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
-import org.apache.dubbo.config.RegistryDataConfig;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
 
 import org.springframework.context.annotation.Configuration;
@@ -60,7 +59,6 @@ public class DubboConfigConfiguration {
             @EnableDubboConfigBinding(prefix = "dubbo.provider", type = ProviderConfig.class),
             @EnableDubboConfigBinding(prefix = "dubbo.consumer", type = ConsumerConfig.class),
             @EnableDubboConfigBinding(prefix = "dubbo.config-center", type = ConfigCenterBean.class),
-            @EnableDubboConfigBinding(prefix = "dubbo.registry-data", type = RegistryDataConfig.class),
             @EnableDubboConfigBinding(prefix = "dubbo.metadata-report", type = MetadataReportConfig.class)
     })
     public static class Single {
@@ -78,7 +76,8 @@ public static class Single {
             @EnableDubboConfigBinding(prefix = "dubbo.monitors", type = MonitorConfig.class, multiple = true),
             @EnableDubboConfigBinding(prefix = "dubbo.providers", type = ProviderConfig.class, multiple = true),
             @EnableDubboConfigBinding(prefix = "dubbo.consumers", type = ConsumerConfig.class, multiple = true),
-            @EnableDubboConfigBinding(prefix = "dubbo.config-centers", type = ConfigCenterBean.class, multiple = true)
+            @EnableDubboConfigBinding(prefix = "dubbo.config-centers", type = ConfigCenterBean.class, multiple = true),
+            @EnableDubboConfigBinding(prefix = "dubbo.metadata-reports", type = MetadataReportConfig.class, multiple = true)
     })
     public static class Multiple {
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java
Patch:
@@ -66,7 +66,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
 @Documented
-@Import(DubboConfigConfigurationSelector.class)
+@Import(DubboConfigConfigurationRegistrar.class)
 public @interface EnableDubboConfig {
 
     /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigBinding.java
Patch:
@@ -27,6 +27,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Repeatable;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -48,6 +49,7 @@
 @Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
+@Repeatable(EnableDubboConfigBindings.class)
 @Import(DubboConfigBindingRegistrar.class)
 public @interface EnableDubboConfigBinding {
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/properties/DefaultDubboConfigBinder.java
Patch:
@@ -37,11 +37,12 @@ public <C extends AbstractConfig> void bind(String prefix, C dubboConfig) {
         dataBinder.setIgnoreInvalidFields(isIgnoreInvalidFields());
         dataBinder.setIgnoreUnknownFields(isIgnoreUnknownFields());
         // Get properties under specified prefix from PropertySources
-        Map<String, String> properties = getSubProperties(getPropertySources(), prefix);
+        Map<String, Object> properties = getSubProperties(getPropertySources(), prefix);
         // Convert Map to MutablePropertyValues
         MutablePropertyValues propertyValues = new MutablePropertyValues(properties);
         // Bind
         dataBinder.bind(propertyValues);
     }
 
 }
+

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/AnnotationBeanDefinitionParser.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.config.spring.schema;
 
-import org.apache.dubbo.config.spring.AnnotationBean;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor;
 import org.apache.dubbo.config.spring.util.BeanRegistrar;
@@ -26,15 +25,14 @@
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;
-import org.springframework.beans.factory.xml.BeanDefinitionParser;
 import org.springframework.beans.factory.xml.ParserContext;
 import org.w3c.dom.Element;
 
 import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;
 import static org.springframework.util.StringUtils.trimArrayElements;
 
 /**
- * {@link AnnotationBean} {@link BeanDefinitionParser}
+ * @link BeanDefinitionParser}
  *
  * @see ServiceAnnotationBeanPostProcessor
  * @see ReferenceAnnotationBeanPostProcessor

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java
Patch:
@@ -165,7 +165,7 @@ private static BeanDefinition parse(Element element, ParserContext parserContext
                                 RegistryConfig registryConfig = new RegistryConfig();
                                 registryConfig.setAddress(RegistryConfig.NO_AVAILABLE);
                                 beanDefinition.getPropertyValues().addPropertyValue(beanProperty, registryConfig);
-                            } else if ("provider".equals(property) || "protocol".equals(property) || "registry".equals(property)) {
+                            } else if ("provider".equals(property) || "registry".equals(property) || ("protocol".equals(property) && ServiceBean.class.equals(beanClass))) {
                                 /**
                                  * For 'provider' 'protocol' 'registry', keep literal value (should be id/name) and set the value to 'registryIds' 'providerIds' protocolIds'
                                  * The following process should make sure each id refers to the corresponding instance, here's how to find the instance for different use cases:

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.Version;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ConsumerConfig;
+import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.ModuleConfig;
 import org.apache.dubbo.config.MonitorConfig;
 import org.apache.dubbo.config.ProtocolConfig;
@@ -47,6 +48,7 @@ public void init() {
         registerBeanDefinitionParser("module", new DubboBeanDefinitionParser(ModuleConfig.class, true));
         registerBeanDefinitionParser("registry", new DubboBeanDefinitionParser(RegistryConfig.class, true));
         registerBeanDefinitionParser("config-center", new DubboBeanDefinitionParser(ConfigCenterBean.class, true));
+        registerBeanDefinitionParser("metadata-report", new DubboBeanDefinitionParser(MetadataReportConfig.class, true));
         registerBeanDefinitionParser("monitor", new DubboBeanDefinitionParser(MonitorConfig.class, true));
         registerBeanDefinitionParser("provider", new DubboBeanDefinitionParser(ProviderConfig.class, true));
         registerBeanDefinitionParser("consumer", new DubboBeanDefinitionParser(ConsumerConfig.class, true));

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java
Patch:
@@ -142,7 +142,7 @@ public Map<String, String> convert(String[] source) {
     private static class TestBean {
 
         @Reference(
-                interfaceClass = DemoService.class, interfaceName = "org.apache.dubbo.config.spring.api.DemoService", version = "${version}", group = "group",
+                interfaceClass = DemoService.class, interfaceName = "com.alibaba.dubbo.config.spring.api.DemoService", version = "${version}", group = "group",
                 url = "${url}  ", client = "client", generic = true, injvm = true,
                 check = false, init = true, lazy = true, stubevent = true,
                 reconnect = "reconnect", sticky = true, proxy = "javassist", stub = "stub",
@@ -151,7 +151,7 @@ private static class TestBean {
                 loadbalance = "random", async = true, actives = 1, sent = true,
                 mock = "mock", validation = "validation", timeout = 2, cache = "cache",
                 filter = {"default", "default"}, listener = {"default", "default"}, parameters = {"key1", "value1"}, application = "application",
-                module = "module", consumer = "consumer", monitor = "monitor", registry = {"registry1", "registry2"}, protocol = "protocol"
+                module = "module", consumer = "consumer", monitor = "monitor", registry = {"registry1", "registry2"}
         )
         private DemoService demoService;
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationTest.java
Patch:
@@ -20,10 +20,12 @@
 import org.apache.dubbo.config.ModuleConfig;
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.core.io.support.ResourcePropertySource;
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java
Patch:
@@ -23,8 +23,10 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
+
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.PropertySource;
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DefaultHelloService.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring.context.annotation.provider;
 
 import org.apache.dubbo.config.spring.api.HelloService;
+
 import org.springframework.stereotype.Service;
 
 /**

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.config.spring.api.Box;
 import org.apache.dubbo.config.spring.api.DemoService;
+
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/properties/DefaultDubboConfigBinderTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
 
+import org.junit.Assert;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/extension/SpringExtensionFactoryTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.dubbo.config.spring.api.HelloService;
 import org.apache.dubbo.config.spring.impl.DemoServiceImpl;
 import org.apache.dubbo.config.spring.impl.HelloServiceImpl;
-
 import org.apache.dubbo.rpc.Protocol;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java
Patch:
@@ -19,9 +19,11 @@
 import org.apache.dubbo.common.status.Status;
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.springframework.context.ApplicationContext;

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/CacheListener.java
Patch:
@@ -65,7 +65,7 @@ public void childEvent(CuratorFramework aClient, TreeCacheEvent event) throws Ex
         // TODO We limit the notification of config changes to a specific path level, for example
         //  /dubbo/config/service/configurators, other config changes not in this level will not get notified,
         //  say /dubbo/config/dubbo.properties
-        if (data.getPath().split("/").length == 5) {
+        if (data.getPath().split("/").length >= 5) {
             byte[] value = data.getData();
             String key = pathToKey(data.getPath());
             ConfigChangeType changeType;

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/identifier/MetadataIdentifier.java
Patch:
@@ -66,8 +66,8 @@ private String getFilePathKey() {
         return getFilePathKey(DEFAULT_PATH_TAG);
     }
 
-    public String getFilePathKey(String pathTag) {
-        return toServicePath() + Constants.PATH_SEPARATOR + pathTag + Constants.PATH_SEPARATOR + (version == null ? "" : (version + Constants.PATH_SEPARATOR))
+    private String getFilePathKey(String pathTag) {
+        return pathTag + Constants.PATH_SEPARATOR + toServicePath() + Constants.PATH_SEPARATOR + (version == null ? "" : (version + Constants.PATH_SEPARATOR))
                 + (group == null ? "" : (group + Constants.PATH_SEPARATOR)) + side + Constants.PATH_SEPARATOR + getApplication();
     }
 

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReport.java
Patch:
@@ -332,6 +332,7 @@ private boolean doHandleMetadataCollection(Map<MetadataIdentifier, Object> metad
      * not private. just for unittest.
      */
     void publishAll() {
+        logger.info("start to publish all metadata.");
         this.doHandleMetadataCollection(allMetadataReports);
     }
 

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReportFactory.java
Patch:
@@ -38,7 +38,6 @@ public abstract class AbstractMetadataReportFactory implements MetadataReportFac
     @Override
     public MetadataReport getMetadataReport(URL url) {
         url = url.setPath(MetadataReport.class.getName())
-                .addParameter(Constants.INTERFACE_KEY, MetadataReport.class.getName())
                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);
         String key = url.toServiceString();
         // Lock the registry access process to ensure a single instance of the registry

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/ZKTools.java
Patch:
@@ -70,7 +70,7 @@ public void eventReceived(CuratorFramework client, CuratorEvent event) throws Ex
     public static void testStartupConfig() {
         String str = "dubbo.registry.address=zookeeper://127.0.0.1:2181\n" +
                 "dubbo.registry.group=dubboregistrygroup1\n" +
-                "dubbo.metadatareport.address=zookeeper://127.0.0.1:2181\n" +
+                "dubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n" +
                 "dubbo.protocol.port=20990\n" +
                 "dubbo.service.org.apache.dubbo.demo.DemoService.timeout=9999\n";
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyInvoker.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.rpc.AsyncContextImpl;
 import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
@@ -86,7 +87,7 @@ public Result invoke(Invocation invocation) throws RpcException {
             if (RpcUtils.isReturnTypeFuture(invocation)) {
                 return new AsyncRpcResult((CompletableFuture<Object>) obj);
             } else if (rpcContext.isAsyncStarted()) { // ignore obj in case of RpcContext.startAsync()? always rely on user to write back.
-                return new AsyncRpcResult(rpcContext.getAsyncContext().getInternalFuture());
+                return new AsyncRpcResult(((AsyncContextImpl)(rpcContext.getAsyncContext())).getInternalFuture());
             } else {
                 return new RpcResult(obj);
             }

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java
Patch:
@@ -90,7 +90,7 @@ public int getDefaultPort() {
     @Override
     protected <T> Runnable doExport(T impl, Class<T> type, URL url) throws RpcException {
         String addr = getAddr(url);
-        Class implClass = ApplicationModel.getProviderModel(url.getServiceKey()).getServiceInterfaceClass();
+        Class implClass = ApplicationModel.getProviderModel(url.getServiceKey()).getServiceInstance().getClass();
         RestServer server = servers.get(addr);
         if (server == null) {
             server = serverFactory.createServer(url.getParameter(Constants.SERVER_KEY, DEFAULT_SERVER));

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -727,7 +727,7 @@ public double getMethodParameter(String method, String key, double defaultValue)
         String methodKey = method + "." + key;
         Number n = getNumbers().get(methodKey);
         if (n != null) {
-            return n.intValue();
+            return n.doubleValue();
         }
         String value = getMethodParameter(method, key);
         if (StringUtils.isEmpty(value)) {
@@ -742,7 +742,7 @@ public float getMethodParameter(String method, String key, float defaultValue) {
         String methodKey = method + "." + key;
         Number n = getNumbers().get(methodKey);
         if (n != null) {
-            return n.intValue();
+            return n.floatValue();
         }
         String value = getMethodParameter(method, key);
         if (StringUtils.isEmpty(value)) {
@@ -757,7 +757,7 @@ public long getMethodParameter(String method, String key, long defaultValue) {
         String methodKey = method + "." + key;
         Number n = getNumbers().get(methodKey);
         if (n != null) {
-            return n.intValue();
+            return n.longValue();
         }
         String value = getMethodParameter(method, key);
         if (StringUtils.isEmpty(value)) {

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationConfigBeanBuilder.java
Patch:
@@ -77,7 +77,7 @@ public final B build() throws Exception {
         configureBean(bean);
 
         if (logger.isInfoEnabled()) {
-            logger.info(bean + " has been built.");
+            logger.info("The bean[type:" + bean.getClass().getSimpleName() + "] has been built.");
         }
 
         return bean;
@@ -175,7 +175,7 @@ private void configureModuleConfig(B bean) {
 
 
     /**
-     * Resolves the bean ids of {@link org.apache.dubbo.config.RegistryConfig}
+     * Resolves the bean ids of {@link RegistryConfig}
      *
      * @param annotation {@link A}
      * @return non-empty array

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigBindingBeanPostProcessor.java
Patch:
@@ -76,7 +76,7 @@ public DubboConfigBindingBeanPostProcessor(String prefix, String beanName) {
     @Override
     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
 
-        if (beanName != null && beanName.equals(this.beanName) && bean instanceof AbstractConfig) {
+        if (beanName.equals(this.beanName) && bean instanceof AbstractConfig) {
 
             AbstractConfig dubboConfig = (AbstractConfig) bean;
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
+
 import org.springframework.context.annotation.Configuration;
 
 /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java
Patch:
@@ -66,7 +66,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
 @Documented
-@Import(DubboConfigConfigurationSelector.class)
+@Import(DubboConfigConfigurationRegistrar.class)
 public @interface EnableDubboConfig {
 
     /**

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigBinding.java
Patch:
@@ -27,6 +27,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Repeatable;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -48,6 +49,7 @@
 @Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
+@Repeatable(EnableDubboConfigBindings.class)
 @Import(DubboConfigBindingRegistrar.class)
 public @interface EnableDubboConfigBinding {
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/properties/DefaultDubboConfigBinder.java
Patch:
@@ -37,11 +37,12 @@ public <C extends AbstractConfig> void bind(String prefix, C dubboConfig) {
         dataBinder.setIgnoreInvalidFields(isIgnoreInvalidFields());
         dataBinder.setIgnoreUnknownFields(isIgnoreUnknownFields());
         // Get properties under specified prefix from PropertySources
-        Map<String, String> properties = getSubProperties(getPropertySources(), prefix);
+        Map<String, Object> properties = getSubProperties(getPropertySources(), prefix);
         // Convert Map to MutablePropertyValues
         MutablePropertyValues propertyValues = new MutablePropertyValues(properties);
         // Bind
         dataBinder.bind(propertyValues);
     }
 
 }
+

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/ServiceBeanTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring;
 
 import org.apache.dubbo.config.annotation.Service;
+
 import org.junit.Assert;
 import org.junit.Test;
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.config.spring.ReferenceBean;
 import org.apache.dubbo.config.spring.api.DemoService;
+
 import org.junit.Assert;
 import org.junit.Test;
 import org.springframework.core.annotation.AnnotationUtils;
@@ -124,7 +125,6 @@ public Map<String, String> convert(String[] source) {
         Assert.assertEquals("cache", referenceBean.getCache());
         Assert.assertEquals("default,default", referenceBean.getFilter());
         Assert.assertEquals("default,default", referenceBean.getListener());
-        Assert.assertEquals("protocol", referenceBean.getProtocol());
 
         Map<String, String> data = new LinkedHashMap<String, String>();
         data.put("key1", "value1");
@@ -142,7 +142,7 @@ public Map<String, String> convert(String[] source) {
     private static class TestBean {
 
         @Reference(
-                interfaceClass = DemoService.class, interfaceName = "org.apache.dubbo.config.spring.api.DemoService", version = "${version}", group = "group",
+                interfaceClass = DemoService.class, interfaceName = "com.alibaba.dubbo.config.spring.api.DemoService", version = "${version}", group = "group",
                 url = "${url}  ", client = "client", generic = true, injvm = true,
                 check = false, init = true, lazy = true, stubevent = true,
                 reconnect = "reconnect", sticky = true, proxy = "javassist", stub = "stub",
@@ -151,7 +151,7 @@ private static class TestBean {
                 loadbalance = "random", async = true, actives = 1, sent = true,
                 mock = "mock", validation = "validation", timeout = 2, cache = "cache",
                 filter = {"default", "default"}, listener = {"default", "default"}, parameters = {"key1", "value1"}, application = "application",
-                module = "module", consumer = "consumer", monitor = "monitor", registry = {"registry1", "registry2"}, protocol = "protocol"
+                module = "module", consumer = "consumer", monitor = "monitor", registry = {"registry1", "registry2"}
         )
         private DemoService demoService;
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigBindingBeanPostProcessorTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder;
 import org.apache.dubbo.config.spring.context.properties.DubboConfigBinder;
+
 import org.junit.Assert;
 import org.junit.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigBindingRegistrarTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring.context.annotation;
 
 import org.apache.dubbo.config.ApplicationConfig;
+
 import org.junit.Assert;
 import org.junit.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigBindingsRegistrarTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring.context.annotation;
 
 import org.apache.dubbo.config.ApplicationConfig;
+
 import org.junit.Assert;
 import org.junit.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.config.ModuleConfig;
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
+
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
+
 import org.junit.Assert;
 import org.junit.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/consumer/ConsumerConfiguration.java
Patch:
@@ -36,15 +36,15 @@ public class ConsumerConfiguration {
     /**
      * Current application configuration, to replace XML config:
      * <prev>
-     * &lt;dubbo:application name="dubbo-annotation-consumer"/&gt;
+     * &lt;dubbo:application name="dubbo-demo-application"/&gt;
      * </prev>
      *
      * @return {@link ApplicationConfig} Bean
      */
-    @Bean("dubbo-annotation-test")
+    @Bean("dubbo-demo-application")
     public ApplicationConfig applicationConfig() {
         ApplicationConfig applicationConfig = new ApplicationConfig();
-        applicationConfig.setName("dubbo-annotation-test");
+        applicationConfig.setName("dubbo-demo-application");
         return applicationConfig;
     }
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DefaultHelloService.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring.context.annotation.provider;
 
 import org.apache.dubbo.config.spring.api.HelloService;
+
 import org.springframework.stereotype.Service;
 
 /**

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dubbo.config.spring.api.Box;
 import org.apache.dubbo.config.spring.api.DemoService;
+
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/properties/DefaultDubboConfigBinderTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
+
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/extension/SpringExtensionFactoryTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.dubbo.config.spring.api.HelloService;
 import org.apache.dubbo.config.spring.impl.DemoServiceImpl;
 import org.apache.dubbo.config.spring.impl.HelloServiceImpl;
-
 import org.apache.dubbo.rpc.Protocol;
+
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/DataSourceStatusCheckerTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.status.Status;
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.status.Status;
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java
Patch:
@@ -489,12 +489,12 @@ public class Constants {
      */
     public static final String SIMPLE_CONSUMER_CONFIG_KEY = "simple.consumer.config";
     /**
-     * After simplify the registry, should add some paramter individually for provider.
+     * After simplify the registry, should add some parameter individually for provider.
      * @since 2.7.0
      */
     public static final String EXTRA_PROVIDER_CONFIG_KEYS_KEY = "extra.provider.keys";
     /**
-     * After simplify the registry, should add some paramter individually for consumer.
+     * After simplify the registry, should add some parameter individually for consumer.
      *
      * @since 2.7.0
      */

File: dubbo-common/src/main/java/org/apache/dubbo/common/Parameters.java
Patch:
@@ -163,7 +163,7 @@ public boolean getBooleanParameter(String key, boolean defaultValue) {
         return Boolean.parseBoolean(value);
     }
 
-    public boolean hasParamter(String key) {
+    public boolean hasParameter(String key) {
         String value = getParameter(key);
         return value != null && value.length() > 0;
     }
@@ -234,7 +234,7 @@ public boolean getMethodBooleanParameter(String method, String key, boolean defa
         return Boolean.parseBoolean(value);
     }
 
-    public boolean hasMethodParamter(String method, String key) {
+    public boolean hasMethodParameter(String method, String key) {
         String value = getMethodParameter(method, key);
         return value != null && value.length() > 0;
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -454,7 +454,7 @@ private void verify(Class<?> interfaceClass, Class<?> localClass) {
         }
 
         try {
-            //Check if the localClass a contructor with parameter who's type is interfaceClass
+            //Check if the localClass a constructor with parameter who's type is interfaceClass
             ReflectUtils.findConstructor(localClass, interfaceClass);
         } catch (NoSuchMethodException e) {
             throw new IllegalStateException("No such constructor \"public " + localClass.getSimpleName() +

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -132,8 +132,8 @@ public class RegistryConfig extends AbstractConfig {
      */
     private Boolean simple;
     /**
-     * After simplify the registry, should add some paramter individually.
-     * addionalParameterKeys = addParamKeys
+     * After simplify the registry, should add some parameter individually.
+     * additionalParameterKeys = addParamKeys
      *
      * @since 2.7.0
      */

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -398,11 +398,11 @@ private URL getRegisteredConsumerUrl(final URL consumerUrl, URL registryUrl) {
     }
 
     // available to test
-    public String[] getParamsToRegistry(String[] defaultKeys, String[] addionalParameterKeys) {
-        int additionalLen = addionalParameterKeys.length;
+    public String[] getParamsToRegistry(String[] defaultKeys, String[] additionalParameterKeys) {
+        int additionalLen = additionalParameterKeys.length;
         String[] registryParams = new String[defaultKeys.length + additionalLen];
         System.arraycopy(defaultKeys, 0, registryParams, 0, defaultKeys.length);
-        System.arraycopy(addionalParameterKeys, 0, registryParams, defaultKeys.length, additionalLen);
+        System.arraycopy(additionalParameterKeys, 0, registryParams, defaultKeys.length, additionalLen);
         return registryParams;
     }
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/CompatibleRouter.java
Patch:
@@ -28,6 +28,7 @@
  *
  */
 public class CompatibleRouter implements Router {
+
     @Override
     public URL getUrl() {
         return null;

File: dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/DubboMonitor.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.utils.ExecutorUtil;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.monitor.Monitor;
 import org.apache.dubbo.monitor.MonitorService;
@@ -209,7 +210,7 @@ public boolean isAvailable() {
     @Override
     public void destroy() {
         try {
-            sendFuture.cancel(true);
+            ExecutorUtil.cancelScheduledFuture(sendFuture);
         } catch (Throwable t) {
             logger.error("Unexpected error occur at cancel sender timer, cause: " + t.getMessage(), t);
         }

File: dubbo-remoting/dubbo-remoting-p2p/src/main/java/org/apache/dubbo/remoting/p2p/exchange/support/FileExchangeGroup.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.remoting.p2p.exchange.support;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.ExecutorUtil;
 import org.apache.dubbo.common.utils.IOUtils;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.common.utils.NetUtils;
@@ -70,9 +71,7 @@ public void run() {
     public void close() {
         super.close();
         try {
-            if (!checkModifiedFuture.isCancelled()) {
-                checkModifiedFuture.cancel(true);
-            }
+            ExecutorUtil.cancelScheduledFuture(checkModifiedFuture);
         } catch (Throwable t) {
             logger.error(t.getMessage(), t);
         }

File: dubbo-remoting/dubbo-remoting-p2p/src/main/java/org/apache/dubbo/remoting/p2p/support/FileGroup.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dubbo.remoting.p2p.support;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.utils.ExecutorUtil;
 import org.apache.dubbo.common.utils.IOUtils;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.common.utils.NetUtils;
@@ -67,9 +68,7 @@ public void run() {
     public void close() {
         super.close();
         try {
-            if (!checkModifiedFuture.isCancelled()) {
-                checkModifiedFuture.cancel(true);
-            }
+            ExecutorUtil.cancelScheduledFuture(checkModifiedFuture);
         } catch (Throwable t) {
             logger.error(t.getMessage(), t);
         }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -362,7 +362,7 @@ protected URL loadMonitor(URL registryURL) {
 
     static void appendRuntimeParameters(Map<String, String> map) {
         map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion());
-        map.put(Constants.SPECIFICATION_VERSION_KEY, Version.getVersion());
+        map.put(Constants.RELEASE_KEY, Version.getVersion());
         map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));
         if (ConfigUtils.getPid() > 0) {
             map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -84,7 +84,7 @@ public abstract class AbstractInterfaceConfig extends AbstractMethodConfig {
     protected String cluster;
 
     /**
-     * The {@link Filter} when the provicer side exposed a service or the customer side references a remote service used,
+     * The {@link Filter} when the provider side exposed a service or the customer side references a remote service used,
      * if there are more than one, you can use commas to separate them
      */
     protected String filter;

File: dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java
Patch:
@@ -482,12 +482,14 @@ public class Constants {
 
     /**
      * simple the registry for provider.
+     *
      * @since 2.7.0
      */
     public static final String SIMPLIFIED_KEY = "simplified";
 
     /**
      * After simplify the registry, should add some paramter individually for provider.
+     *
      * @since 2.7.0
      */
     public static final String EXTRA_KEYS_KEY = "extra-keys";

File: dubbo-common/src/test/java/org/apache/dubbo/common/URLTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dubbo.common;
 
 import org.apache.dubbo.common.utils.CollectionUtils;
-
 import org.junit.Test;
 
 import java.io.File;
@@ -124,7 +123,7 @@ public void test_valueOf_noHost() throws Exception {
         assertEquals("home/user1/router.js", url.getPath());
         assertEquals(0, url.getParameters().size());
 
-        // Caution!! 
+        // Caution!!
         url = URL.valueOf("file://home/user1/router.js");
         //                      ^^ only tow slash!
         assertEquals("file", url.getProtocol());
@@ -680,4 +679,4 @@ public void testIpV6AddressWithScopeId(){
         assertEquals("1.0.0", url.getParameter("version"));
         assertEquals("morgan", url.getParameter("application"));
     }
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -52,7 +52,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import static org.apache.dubbo.common.Constants.APPLICATION_KEY;
 import static org.apache.dubbo.common.config.ConfigurationUtils.parseProperties;
 import static org.apache.dubbo.common.extension.ExtensionLoader.getExtensionLoader;
 
@@ -376,7 +375,6 @@ private URL loadMetadataReporterURL() {
             return null;
         }
         Map<String, String> map = new HashMap<String, String>();
-        map.put(APPLICATION_KEY, application.getName());
         appendParameters(map, metadataReportConfig);
         return UrlUtils.parseURL(address, map);
     }

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReport.java
Patch:
@@ -329,6 +329,7 @@ private boolean doHandleMetadataCollection(Map<MetadataIdentifier, Object> metad
      * not private. just for unittest.
      */
     void publishAll() {
+        logger.info("start to publish all metadata.");
         this.doHandleMetadataCollection(allMetadataReports);
     }
 

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReportFactory.java
Patch:
@@ -38,7 +38,6 @@ public abstract class AbstractMetadataReportFactory implements MetadataReportFac
     @Override
     public MetadataReport getMetadataReport(URL url) {
         url = url.setPath(MetadataReport.class.getName())
-                .addParameter(Constants.INTERFACE_KEY, MetadataReport.class.getName())
                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);
         String key = url.toServiceString();
         // Lock the registry access process to ensure a single instance of the registry

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -96,7 +96,7 @@ public abstract class AbstractInterfaceConfig extends AbstractMethodConfig {
     protected String listener;
 
     /**
-     * The owner of zhe service providers
+     * The owner of the service providers
      */
     protected String owner;
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/AbstractProxyInvoker.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.rpc.AsyncContextImpl;
 import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
@@ -86,7 +87,7 @@ public Result invoke(Invocation invocation) throws RpcException {
             if (RpcUtils.isReturnTypeFuture(invocation)) {
                 return new AsyncRpcResult((CompletableFuture<Object>) obj);
             } else if (rpcContext.isAsyncStarted()) { // ignore obj in case of RpcContext.startAsync()? always rely on user to write back.
-                return new AsyncRpcResult(rpcContext.getAsyncContext().getInternalFuture());
+                return new AsyncRpcResult(((AsyncContextImpl)(rpcContext.getAsyncContext())).getInternalFuture());
             } else {
                 return new RpcResult(obj);
             }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java
Patch:
@@ -149,7 +149,7 @@ public void setSyncReport(Boolean syncReport) {
         this.syncReport = syncReport;
     }
 
-
+    @Override
     @Parameter(excluded = true)
     public String getPrefix() {
         return StringUtils.isNotEmpty(prefix) ? prefix : (Constants.DUBBO + "." + PREFIX_TAG);

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/ZKTools.java
Patch:
@@ -70,7 +70,7 @@ public void eventReceived(CuratorFramework client, CuratorEvent event) throws Ex
     public static void testStartupConfig() {
         String str = "dubbo.registry.address=zookeeper://127.0.0.1:2181\n" +
                 "dubbo.registry.group=dubboregistrygroup1\n" +
-                "dubbo.metadatareport.address=zookeeper://127.0.0.1:2181\n" +
+                "dubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n" +
                 "dubbo.protocol.port=20990\n" +
                 "dubbo.service.org.apache.dubbo.demo.DemoService.timeout=9999\n";
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/ConfigConditionRouterTest.java
Patch:
@@ -19,16 +19,16 @@
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
 import org.apache.curator.retry.ExponentialBackoffRetry;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 /**
  * FIXME This is not a formal UT
  */
 public class ConfigConditionRouterTest {
     private static CuratorFramework client;
 
-    @Before
+    @BeforeEach
     public void init() {
         client = CuratorFrameworkFactory.newClient("127.0.0.1:2181", 60 * 1000, 60 * 1000,
                 new ExponentialBackoffRetry(1000, 3));

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java
Patch:
@@ -19,16 +19,16 @@
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
 import org.apache.curator.retry.ExponentialBackoffRetry;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 /**
  * FIXME This is not a formal UT
  */
 public class TagRouterTest {
     private static CuratorFramework client;
 
-    @Before
+    @BeforeEach
     public void init() {
         client = CuratorFrameworkFactory.newClient("127.0.0.1:2181", 60 * 1000, 60 * 1000,
                 new ExponentialBackoffRetry(1000, 3));

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ClassGeneratorTest.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.apache.dubbo.common.bytecode;
 
-import junit.framework.TestCase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
@@ -28,7 +27,7 @@ interface Builder<T> {
     void setName(Bean bean, T name);
 }
 
-public class ClassGeneratorTest extends TestCase {
+public class ClassGeneratorTest {
 
     @SuppressWarnings("unchecked")
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/AdaptiveCompilerTest.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.dubbo.common.compiler.support;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class AdaptiveCompilerTest extends JavaCodeTest {
 
@@ -27,7 +27,7 @@ public void testAvailableCompiler() throws Exception {
         AdaptiveCompiler compiler = new AdaptiveCompiler();
         Class<?> clazz = compiler.compile(getSimpleCode(), AdaptiveCompiler.class.getClassLoader());
         HelloService helloService = (HelloService) clazz.newInstance();
-        Assert.assertEquals("Hello world!", helloService.sayHello());
+        Assertions.assertEquals("Hello world!", helloService.sayHello());
     }
 
 }

File: dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/CompletableFutureTaskTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.common.concurrent;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.ArgumentMatchers.any;
@@ -33,7 +33,7 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.dubbo.common.utils.NamedThreadFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 
 public class CompletableFutureTaskTest {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Compatible_Test.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.dubbo.common.extension.compatible.impl.CompatibleExtImpl1;
 import org.apache.dubbo.common.extension.compatible.impl.CompatibleExtImpl2;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class ExtensionLoader_Compatible_Test {
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extension/ext6_inject/impl/Ext6Impl1.java
Patch:
@@ -21,15 +21,15 @@
 import org.apache.dubbo.common.extension.ext6_inject.Dao;
 import org.apache.dubbo.common.extension.ext6_inject.Ext6;
 
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 
 public class Ext6Impl1 implements Ext6 {
     public Dao obj;
     SimpleExt ext1;
 
     public void setDao(Dao obj) {
-        Assert.assertNotNull("inject extension instance can not be null", obj);
-        Assert.fail();
+        Assertions.assertNotNull(obj, "inject extension instance can not be null");
+        Assertions.fail();
     }
 
     public void setExt1(SimpleExt ext1) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONReaderTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dubbo.common.io.UnsafeStringReader;
 
-import junit.framework.TestCase;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
-public class JSONReaderTest extends TestCase {
+public class JSONReaderTest  {
     public void testMain() throws Exception {
         String json = "{ name: 'name', friends: [ 1, null, 3.2, ] }";
         JSONReader reader = new JSONReader(new UnsafeStringReader(json));

File: dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONWriterTest.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.dubbo.common.json;
 
-import junit.framework.TestCase;
 
 import java.io.StringWriter;
 
-public class JSONWriterTest extends TestCase {
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class JSONWriterTest {
     public void testWriteJson() throws Exception {
         StringWriter w = new StringWriter();
         JSONWriter writer = new JSONWriter(w);

File: dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerFactoryTest.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.dubbo.common.logger;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.nullValue;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class LoggerFactoryTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/logger/slf4j/Slf4jLoggerTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.common.logger.slf4j;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Marker;
 import org.slf4j.spi.LocationAwareLogger;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/status/StatusTest.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.dubbo.common.status;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.apache.dubbo.common.status.Status.Level.OK;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.isEmptyOrNullString;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class StatusTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/status/support/LoadStatusCheckerTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.status.Status;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.notNullValue;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class LoadStatusCheckerTest {
     private static Logger logger = LoggerFactory.getLogger(LoadStatusCheckerTest.class);

File: dubbo-common/src/test/java/org/apache/dubbo/common/status/support/MemoryStatusCheckerTest.java
Patch:
@@ -20,13 +20,13 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.status.Status;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.apache.dubbo.common.status.Status.Level.OK;
 import static org.apache.dubbo.common.status.Status.Level.WARN;
 import static org.hamcrest.CoreMatchers.anyOf;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class MemoryStatusCheckerTest {
     private static final Logger logger = LoggerFactory.getLogger(MemoryStatusCheckerTest.class);

File: dubbo-common/src/test/java/org/apache/dubbo/common/status/support/StatusUtilsTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.common.status.support;
 
 import org.apache.dubbo.common.status.Status;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -27,7 +27,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.isEmptyOrNullString;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class StatusUtilsTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/NamedInternalThreadFactoryTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dubbo.common.threadlocal;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class NamedInternalThreadFactoryTest {
 
@@ -31,6 +31,6 @@ public void run() {
 
             }
         });
-        Assert.assertTrue("thread is not InternalThread", t.getClass().equals(InternalThread.class));
+        Assertions.assertTrue(t.getClass().equals(InternalThread.class), "thread is not InternalThread");
     }
 }
\ No newline at end of file

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReportTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.Executors;
 import java.util.concurrent.RejectedExecutionException;

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/cached/CachedThreadPoolTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.common.threadpool.ThreadPool;
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.CountDownLatch;
@@ -36,7 +36,7 @@
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.startsWith;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class CachedThreadPoolTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.common.threadpool.ThreadPool;
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.CountDownLatch;
@@ -34,7 +34,7 @@
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.startsWith;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class EagerThreadPoolTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/fixed/FixedThreadPoolTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
 import org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool;
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.CountDownLatch;
@@ -37,7 +37,7 @@
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.startsWith;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class FixedThreadPoolTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/limited/LimitedThreadPoolTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dubbo.common.threadpool.ThreadPool;
 import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.CountDownLatch;
@@ -36,7 +36,7 @@
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.startsWith;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class LimitedThreadPoolTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/timer/HashedWheelTimerTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.common.timer;
 
 import org.apache.dubbo.common.utils.NamedThreadFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/ArrayUtilsTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dubbo.common.utils;
 
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import org.junit.jupiter.api.Test;
 
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class ArrayUtilsTest {
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/ClassHelperTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dubbo.common.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import static org.apache.dubbo.common.utils.ClassHelper.forName;
@@ -29,7 +29,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.sameInstance;
 import static org.hamcrest.Matchers.startsWith;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.verify;
 
 public class ClassHelperTest {

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/ExecutorUtilTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.util.concurrent.Executor;
@@ -28,7 +28,7 @@
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/HolderTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dubbo.common.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class HolderTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogHelperTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dubbo.common.utils;
 
 import org.apache.dubbo.common.logger.Logger;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import static org.mockito.Mockito.verify;

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogTest.java
Patch:
@@ -18,11 +18,11 @@
 package org.apache.dubbo.common.utils;
 
 import org.apache.log4j.Level;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class LogTest {
     @Test

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/ParametersTest.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.dubbo.common.utils;
 
-import junit.framework.TestCase;
-
 import java.util.HashMap;
 import java.util.Map;
 
-public class ParametersTest extends TestCase {
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class ParametersTest {
     final String ServiceName = "org.apache.dubbo.rpc.service.GenericService";
     final String ServiceVersion = "1.0.15";
     final String LoadBalance = "lcr";

File: dubbo-compatible/src/test/java/org/apache/dubbo/cache/CacheTest.java
Patch:
@@ -25,8 +25,8 @@
 import com.alibaba.dubbo.rpc.Invocation;
 import com.alibaba.dubbo.rpc.Invoker;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 import java.util.Map;
 
@@ -45,7 +45,7 @@ public void testCacheFactory() {
         org.apache.dubbo.rpc.Invocation inv = new RpcInvocation();
         org.apache.dubbo.cache.Cache c = factory.getCache(u, inv);
         String v = (String) c.get("testKey");
-        Assert.assertEquals("testValue", v);
+        Assertions.assertEquals("testValue", v);
     }
 
     static class NullInvocation implements Invocation {

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ArgumentConfigTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import com.alibaba.dubbo.config.ArgumentConfig;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ArgumentConfigTest {
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ConsumerConfigTest.java
Patch:
@@ -19,11 +19,11 @@
 
 import com.alibaba.dubbo.config.ConsumerConfig;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ConsumerConfigTest {
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.alibaba.dubbo.config.MethodConfig;
 
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -37,8 +37,8 @@
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class MethodConfigTest {
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.alibaba.dubbo.config.ProtocolConfig;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -28,7 +28,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ProtocolConfigTest {
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.alibaba.dubbo.config.ProviderConfig;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -29,7 +29,7 @@
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ProviderConfigTest {
     @Test

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.alibaba.dubbo.config.RegistryConfig;
 import com.alibaba.dubbo.config.ServiceConfig;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ReferenceConfigTest {
 

File: dubbo-compatible/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.config.RegistryConfig;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -31,7 +31,7 @@
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class RegistryConfigTest {
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractMethodConfigTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.config;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -25,7 +25,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.isEmptyOrNullString;
 import static org.hamcrest.Matchers.sameInstance;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class AbstractMethodConfigTest {
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractReferenceConfigTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dubbo.common.Constants;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -28,7 +28,7 @@
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.hasValue;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class AbstractReferenceConfigTest {
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractServiceConfigTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dubbo.common.Constants;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -31,7 +31,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.nullValue;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class AbstractServiceConfigTest {
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ArgumentConfigTest.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.dubbo.config;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ArgumentConfigTest {
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConsumerConfigTest.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.dubbo.config;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ConsumerConfigTest {
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MethodConfigTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.common.Constants;
 
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -32,7 +32,7 @@
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class MethodConfigTest {
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MonitorConfigTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dubbo.config;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -26,7 +26,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class MonitorConfigTest {
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.config.mock.MockProtocol2;
 import org.apache.dubbo.rpc.Protocol;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.util.Collections;
@@ -30,7 +30,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ProtocolConfigTest {
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dubbo.config;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -27,7 +27,7 @@
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ProviderConfigTest {
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dubbo.common.Constants;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -30,7 +30,7 @@
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class RegistryConfigTest {
     @Test

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/UrlTestBase.java
Patch:
@@ -30,7 +30,7 @@
 
 import java.util.Arrays;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.jupiter.api.Assertions.fail;
 
 @SuppressWarnings("unused")
 public class UrlTestBase {

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigBindingBeanPostProcessorTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder;
 import org.apache.dubbo.config.spring.context.properties.DubboConfigBinder;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -60,7 +60,7 @@ public void test() {
 
         ApplicationConfig applicationConfig = applicationContext.getBean(ApplicationConfig.class);
 
-        Assert.assertEquals("dubbo-demo-application", applicationConfig.getName());
+        Assertions.assertEquals("dubbo-demo-application", applicationConfig.getName());
 
     }
 }

File: dubbo-container/dubbo-container-log4j/src/test/java/org/apache/dubbo/container/log4j/Log4jContainerTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.container.Container;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * StandaloneContainerTest

File: dubbo-container/dubbo-container-logback/src/test/java/org/apache/dubbo/container/logback/LogbackContainerTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.container.Container;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * StandaloneContainerTest

File: dubbo-container/dubbo-container-spring/src/test/java/org/apache/dubbo/container/spring/SpringContainerTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.container.Container;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 /**
  * StandaloneContainerTest
@@ -31,7 +31,7 @@ public class SpringContainerTest {
     public void testContainer() {
         SpringContainer container = (SpringContainer) ExtensionLoader.getExtensionLoader(Container.class).getExtension("spring");
         container.start();
-        Assert.assertEquals(SpringContainer.class, container.context.getBean("container").getClass());
+        Assertions.assertEquals(SpringContainer.class, container.context.getBean("container").getClass());
         container.stop();
     }
 

File: dubbo-filter/dubbo-filter-cache/src/test/java/org/apache/dubbo/cache/support/expiring/ExpiringCacheFactoryTest.java
Patch:
@@ -19,10 +19,10 @@
 import org.apache.dubbo.cache.Cache;
 import org.apache.dubbo.cache.support.AbstractCacheFactory;
 import org.apache.dubbo.cache.support.AbstractCacheFactoryTest;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ExpiringCacheFactoryTest extends AbstractCacheFactoryTest {
     @Test

File: dubbo-filter/dubbo-filter-cache/src/test/java/org/apache/dubbo/cache/support/jcache/JCacheFactoryTest.java
Patch:
@@ -22,11 +22,11 @@
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.RpcInvocation;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class JCacheFactoryTest extends AbstractCacheFactoryTest {
 

File: dubbo-filter/dubbo-filter-cache/src/test/java/org/apache/dubbo/cache/support/lru/LruCacheFactoryTest.java
Patch:
@@ -19,10 +19,10 @@
 import org.apache.dubbo.cache.Cache;
 import org.apache.dubbo.cache.support.AbstractCacheFactory;
 import org.apache.dubbo.cache.support.AbstractCacheFactoryTest;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class LruCacheFactoryTest extends AbstractCacheFactoryTest{
     @Test

File: dubbo-filter/dubbo-filter-cache/src/test/java/org/apache/dubbo/cache/support/threadlocal/ThreadLocalCacheFactoryTest.java
Patch:
@@ -19,10 +19,10 @@
 import org.apache.dubbo.cache.Cache;
 import org.apache.dubbo.cache.support.AbstractCacheFactory;
 import org.apache.dubbo.cache.support.AbstractCacheFactoryTest;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ThreadLocalCacheFactoryTest extends AbstractCacheFactoryTest {
     @Test

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/CommandContextFactoryTest.java
Patch:
@@ -18,11 +18,11 @@
 package org.apache.dubbo.qos.command;
 
 import org.hamcrest.Matchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class CommandContextFactoryTest {
     @Test

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/decoder/HttpCommandDecoderTest.java
Patch:
@@ -23,14 +23,14 @@
 import io.netty.handler.codec.http.HttpMethod;
 import io.netty.handler.codec.http.HttpRequest;
 import org.apache.dubbo.qos.command.CommandContext;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.nio.charset.StandardCharsets;
 
 import static org.hamcrest.Matchers.arrayContaining;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/decoder/TelnetCommandDecoderTest.java
Patch:
@@ -17,12 +17,12 @@
 package org.apache.dubbo.qos.command.decoder;
 
 import org.apache.dubbo.qos.command.CommandContext;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.arrayContaining;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class TelnetCommandDecoderTest {
     @Test

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/HelpTest.java
Patch:
@@ -17,11 +17,11 @@
 package org.apache.dubbo.qos.command.impl;
 
 import org.apache.dubbo.qos.command.CommandContext;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import static org.hamcrest.Matchers.containsString;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class HelpTest {
     @Test

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/LsTest.java
Patch:
@@ -25,14 +25,14 @@
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ConsumerModel;
 import org.apache.dubbo.rpc.model.ProviderModel;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.util.Map;
 
 import static org.apache.dubbo.registry.support.ProviderConsumerRegTable.getProviderInvoker;
 import static org.hamcrest.Matchers.containsString;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/OfflineTest.java
Patch:
@@ -24,13 +24,13 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ProviderModel;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import static org.apache.dubbo.registry.support.ProviderConsumerRegTable.getProviderInvoker;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/OnlineTest.java
Patch:
@@ -24,12 +24,12 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.model.ApplicationModel;
 import org.apache.dubbo.rpc.model.ProviderModel;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.apache.dubbo.registry.support.ProviderConsumerRegTable.getProviderInvoker;
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/QuitTest.java
Patch:
@@ -18,11 +18,11 @@
 
 import org.apache.dubbo.qos.command.CommandContext;
 import org.apache.dubbo.qos.common.QosConstants;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class QuitTest {
     @Test

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java
Patch:
@@ -22,12 +22,12 @@
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpMethod;
 import io.netty.handler.codec.http.HttpRequest;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mockito;
 
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/LocalHostPermitHandlerTest.java
Patch:
@@ -21,14 +21,14 @@
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 
 import static org.hamcrest.Matchers.containsString;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java
Patch:
@@ -25,7 +25,7 @@
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.codec.string.StringDecoder;
 import io.netty.handler.codec.string.StringEncoder;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.util.Collections;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java
Patch:
@@ -19,13 +19,13 @@
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mockito;
 
 import static org.hamcrest.Matchers.contains;
 import static org.hamcrest.Matchers.containsString;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/textui/TKvTest.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.dubbo.qos.textui;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.containsString;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class TKvTest {
     @Test

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/textui/TLadderTest.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.dubbo.qos.textui;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class TLadderTest {
     @Test

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/textui/TTableTest.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.dubbo.qos.textui;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class TTableTest {
     @Test

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/textui/TTreeTest.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.dubbo.qos.textui;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class TTreeTest {
     @Test

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/PerformanceRegistryTest.java
Patch:
@@ -22,14 +22,14 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.NetUtils;
 
-import junit.framework.TestCase;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 /**
  * RegistryPerformanceTest
  *
  */
-public class PerformanceRegistryTest extends TestCase {
+public class PerformanceRegistryTest  {
 
     private static final Logger logger = LoggerFactory.getLogger(PerformanceRegistryTest.class);
 

File: dubbo-registry/dubbo-registry-multicast/src/test/java/org/apache/dubbo/registry/multicast/MulticastRegistryFactoryTest.java
Patch:
@@ -18,10 +18,10 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.registry.Registry;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class MulticastRegistryFactoryTest {
     @Test

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/ChanelHandlerTest.java
Patch:
@@ -23,15 +23,15 @@
 import org.apache.dubbo.remoting.exchange.Exchangers;
 import org.apache.dubbo.remoting.exchange.support.ExchangeHandlerAdapter;
 
-import junit.framework.TestCase;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 /**
  * ChanelHandlerTest
  * <p>
  * mvn clean test -Dtest=*PerformanceClientTest -Dserver=10.20.153.187:9911
  */
-public class ChanelHandlerTest extends TestCase {
+public class ChanelHandlerTest  {
 
     private static final Logger logger = LoggerFactory.getLogger(ChanelHandlerTest.class);
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/PerformanceClientCloseTest.java
Patch:
@@ -22,16 +22,16 @@
 import org.apache.dubbo.remoting.exchange.ExchangeClient;
 import org.apache.dubbo.remoting.exchange.Exchangers;
 
-import junit.framework.TestCase;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  * ProformanceClient
  * The test class will report abnormal thread pool, because the judgment on the thread pool concurrency problems produced in DefaultChannelHandler (connected event has been executed asynchronously, judgment, then closed the thread pool, thread pool and execution error, this problem can be specified through the Constants.CHANNEL_HANDLER_KEY=connection.)
  */
-public class PerformanceClientCloseTest extends TestCase {
+public class PerformanceClientCloseTest  {
 
     private static final Logger logger = LoggerFactory.getLogger(PerformanceClientCloseTest.class);
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/PerformanceClientFixedTest.java
Patch:
@@ -22,13 +22,13 @@
 import org.apache.dubbo.remoting.exchange.ExchangeClient;
 import org.apache.dubbo.remoting.exchange.Exchangers;
 
-import junit.framework.TestCase;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
 import java.util.Random;
 
-public class PerformanceClientFixedTest extends TestCase {
+public class PerformanceClientFixedTest  {
 
     private static final Logger logger = LoggerFactory.getLogger(PerformanceClientTest.class);
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/PerformanceClientTest.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.dubbo.remoting.exchange.Exchangers;
 import org.apache.dubbo.remoting.exchange.support.ExchangeHandlerAdapter;
 
-import junit.framework.TestCase;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 import java.text.DecimalFormat;
 import java.text.SimpleDateFormat;
@@ -39,7 +39,7 @@
  * <p>
  * mvn clean test -Dtest=*PerformanceClientTest -Dserver=10.20.153.187:9911
  */
-public class PerformanceClientTest extends TestCase {
+public class PerformanceClientTest  {
 
     private static final Logger logger = LoggerFactory.getLogger(PerformanceClientTest.class);
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/PerformanceServerTest.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.dubbo.remoting.exchange.support.ExchangeHandlerAdapter;
 import org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher;
 
-import junit.framework.TestCase;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -37,7 +37,7 @@
  * <p>
  * mvn clean test -Dtest=*PerformanceServerTest -Dport=9911
  */
-public class PerformanceServerTest extends TestCase {
+public class PerformanceServerTest  {
 
     private static final Logger logger = LoggerFactory.getLogger(PerformanceServerTest.class);
     private static ExchangeServer server = null;

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/buffer/DirectChannelBufferTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.remoting.buffer;
 
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 
 public class DirectChannelBufferTest extends AbstractChannelBufferTest {
 
@@ -25,7 +25,7 @@ public class DirectChannelBufferTest extends AbstractChannelBufferTest {
     @Override
     protected ChannelBuffer newBuffer(int capacity) {
         buffer = ChannelBuffers.directBuffer(capacity);
-        Assert.assertEquals(0, buffer.writerIndex());
+        Assertions.assertEquals(0, buffer.writerIndex());
         return buffer;
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/buffer/DynamicChannelBufferTest.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.dubbo.remoting.buffer;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class DynamicChannelBufferTest extends AbstractChannelBufferTest {
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/buffer/HeapChannelBufferTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dubbo.remoting.buffer;
 
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 
 public class HeapChannelBufferTest extends AbstractChannelBufferTest {
 
@@ -25,7 +25,7 @@ public class HeapChannelBufferTest extends AbstractChannelBufferTest {
     @Override
     protected ChannelBuffer newBuffer(int capacity) {
         buffer = ChannelBuffers.buffer(capacity);
-        Assert.assertEquals(0, buffer.writerIndex());
+        Assertions.assertEquals(0, buffer.writerIndex());
         return buffer;
     }
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/transport/AbstractCodecTest.java
Patch:
@@ -18,19 +18,19 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.remoting.Channel;
-import junit.framework.TestCase;
+import org.junit.jupiter.api.Assertions;
 import org.hamcrest.CoreMatchers;
 import org.mockito.internal.verification.VerificationModeFactory;
 
 import java.io.IOException;
 
 import static org.hamcrest.CoreMatchers.allOf;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-public class AbstractCodecTest extends TestCase {
+public class AbstractCodecTest  {
 
     public void test_checkPayload_default8M() throws Exception {
         Channel channel = mock(Channel.class);

File: dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/transport/codec/CodecAdapterTest.java
Patch:
@@ -18,11 +18,11 @@
 
 import org.apache.dubbo.remoting.codec.ExchangeCodecTest;
 
-import org.junit.Before;
+import org.junit.jupiter.api.BeforeEach;
 
 public class CodecAdapterTest extends ExchangeCodecTest {
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         codec = new CodecAdapter(new DeprecatedExchangeCodec());
     }

File: dubbo-remoting/dubbo-remoting-grizzly/src/main/test/org/apache/dubbo/remoting/transport/grizzly/GrizzlyTransporterTest.java
Patch:
@@ -21,10 +21,10 @@
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.remoting.Server;
 import org.apache.dubbo.remoting.transport.ChannelHandlerAdapter;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class GrizzlyTransporterTest {
     @Test

File: dubbo-remoting/dubbo-remoting-http/src/test/java/org/apache/dubbo/remoting/http/jetty/JettyHttpBinderTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dubbo.remoting.http.HttpHandler;
 import org.apache.dubbo.remoting.http.HttpServer;
 import org.apache.http.client.fluent.Request;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;

File: dubbo-remoting/dubbo-remoting-http/src/test/java/org/apache/dubbo/remoting/http/tomcat/TomcatHttpBinderTest.java
Patch:
@@ -21,8 +21,9 @@
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.remoting.http.HttpHandler;
 import org.apache.dubbo.remoting.http.HttpServer;
+
 import org.apache.http.client.fluent.Request;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;

File: dubbo-remoting/dubbo-remoting-p2p/src/test/java/org/apache/dubbo/remoting/p2p/exchange/support/MulticastExchangeNetworkerTest.java
Patch:
@@ -30,13 +30,13 @@
 import org.apache.dubbo.remoting.p2p.Group;
 import org.apache.dubbo.remoting.p2p.Networkers;
 import org.apache.dubbo.remoting.p2p.Peer;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 
 public class MulticastExchangeNetworkerTest {

File: dubbo-remoting/dubbo-remoting-p2p/src/test/java/org/apache/dubbo/remoting/p2p/support/MulticastNetworkerTest.java
Patch:
@@ -23,14 +23,14 @@
 import org.apache.dubbo.remoting.p2p.Networkers;
 import org.apache.dubbo.remoting.p2p.Peer;
 import org.apache.dubbo.remoting.transport.ChannelHandlerAdapter;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.CoreMatchers.nullValue;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 
 public class MulticastNetworkerTest {

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/AccessLogFilterTest.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.dubbo.rpc.support.MockInvocation;
 import org.apache.dubbo.rpc.support.MyInvoker;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * AccessLogFilterTest.java

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ClassLoaderFilterTest.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.dubbo.rpc.support.DemoService;
 import org.apache.dubbo.rpc.support.MyInvoker;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.net.URLClassLoader;
@@ -59,7 +59,7 @@ public Class getInterface() {
 
             @Override
             public Result invoke(Invocation invocation) throws RpcException {
-                Assert.assertEquals(cl, Thread.currentThread().getContextClassLoader());
+                Assertions.assertEquals(cl, Thread.currentThread().getContextClassLoader());
                 return null;
             }
         };

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ConsumerContextFilterTest.java
Patch:
@@ -26,9 +26,9 @@
 import org.apache.dubbo.rpc.support.MockInvocation;
 import org.apache.dubbo.rpc.support.MyInvoker;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * ConsumerContextFilterTest.java

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ContextFilterTest.java
Patch:
@@ -27,9 +27,9 @@
 import org.apache.dubbo.rpc.support.MockInvocation;
 import org.apache.dubbo.rpc.support.MyInvoker;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/DeprecatedFilterTest.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.dubbo.rpc.support.MockInvocation;
 import org.apache.dubbo.rpc.support.MyInvoker;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * DeprecatedFilterTest.java

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/EchoFilterTest.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.dubbo.rpc.RpcResult;
 import org.apache.dubbo.rpc.support.DemoService;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/CurrentTelnetHandlerTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.telnet.TelnetHandler;
 
-import org.junit.After;
-import org.junit.Test;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/LogTelnetHandlerTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.dubbo.remoting.RemotingException;
 import org.apache.dubbo.remoting.telnet.TelnetHandler;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
 
 /**

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -223,7 +223,7 @@ public void testSelect_multiInvokers() throws Exception {
     public void testCloseAvailablecheck() {
         LoadBalance lb = mock(LoadBalance.class);
         Map<String, String> queryMap = StringUtils.parseQueryString(url.getParameterAndDecoded(Constants.REFER_KEY));
-        URL tmpUrl = url.clearParameters().addParameters(queryMap).removeParameter(Constants.MONITOR_KEY);
+        URL tmpUrl = url.addParameters(queryMap).removeParameter(Constants.MONITOR_KEY);
         given(lb.select(invokers, tmpUrl, invocation)).willReturn(invoker1);
         initlistsize5();
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -694,7 +694,7 @@ public ApplicationConfig getApplication() {
     }
 
     public void setApplication(ApplicationConfig application) {
-        ConfigManager.getInstance().setApplication(this.application);
+        ConfigManager.getInstance().setApplication(application);
         this.application = application;
     }
 
@@ -739,7 +739,7 @@ public List<RegistryConfig> getRegistries() {
 
     @SuppressWarnings({"unchecked"})
     public void setRegistries(List<? extends RegistryConfig> registries) {
-        ConfigManager.getInstance().addRegistries(this.registries);
+        ConfigManager.getInstance().addRegistries((List<RegistryConfig>) registries);
         this.registries = (List<RegistryConfig>) registries;
     }
 
@@ -757,7 +757,7 @@ public MonitorConfig getMonitor() {
     }
 
     public void setMonitor(String monitor) {
-        this.monitor = new MonitorConfig(monitor);
+        setMonitor(new MonitorConfig(monitor));
     }
 
     public void setMonitor(MonitorConfig monitor) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -200,7 +200,7 @@ public List<ProtocolConfig> getProtocols() {
 
     @SuppressWarnings({"unchecked"})
     public void setProtocols(List<? extends ProtocolConfig> protocols) {
-        ConfigManager.getInstance().addProtocols(this.protocols);
+        ConfigManager.getInstance().addProtocols((List<ProtocolConfig>) protocols);
         this.protocols = (List<ProtocolConfig>) protocols;
     }
 
@@ -209,7 +209,7 @@ public ProtocolConfig getProtocol() {
     }
 
     public void setProtocol(ProtocolConfig protocol) {
-        this.protocols = Arrays.asList(protocol);
+        setProtocols(Arrays.asList(protocol));
     }
 
     @Parameter(excluded = true)

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/AppRouter.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dubbo.configcenter.DynamicConfiguration;
 
 /**
- * Application level router, "application.routers"
+ * Application level router, "application.condition-router"
  */
 public class AppRouter extends ListenableRouter {
     public static final String NAME = "APP_ROUTER";

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ServiceRouter.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.configcenter.DynamicConfiguration;
 
 /**
- * Service level router, "server-uniq-name.routers"
+ * Service level router, "server-unique-name.condition-router"
  */
 public class ServiceRouter extends ListenableRouter {
     public static final String NAME = "SERVICE_ROUTER";

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/CacheListener.java
Patch:
@@ -65,7 +65,7 @@ public void childEvent(CuratorFramework aClient, TreeCacheEvent event) throws Ex
         // TODO We limit the notification of config changes to a specific path level, for example
         //  /dubbo/config/service/configurators, other config changes not in this level will not get notified,
         //  say /dubbo/config/dubbo.properties
-        if (data.getPath().split("/").length == 5) {
+        if (data.getPath().split("/").length >= 5) {
             byte[] value = data.getData();
             String key = pathToKey(data.getPath());
             ConfigChangeType changeType;

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoService.java
Patch:
@@ -47,7 +47,7 @@ public interface DemoService {
 
     Type enumlength(Type... types);
 
-	Type getType(Type type);
+    Type getType(Type type);
 
     String get(CustomArgument arg1);
 
@@ -63,4 +63,5 @@ public interface DemoService {
 
     int getPerson(Person person1, Person perso2);
 
+    String getPerson(Man man);
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/consumer/ConsumerConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.config.annotation.Reference;
 import org.apache.dubbo.config.spring.api.DemoService;
 import org.apache.dubbo.config.spring.context.annotation.DubboComponentScan;
+
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.PropertySource;
@@ -40,10 +41,10 @@ public class ConsumerConfiguration {
      *
      * @return {@link ApplicationConfig} Bean
      */
-    @Bean("dubbo-annotation-consumer")
+    @Bean("dubbo-annotation-test")
     public ApplicationConfig applicationConfig() {
         ApplicationConfig applicationConfig = new ApplicationConfig();
-        applicationConfig.setName("dubbo-annotation-consumer");
+        applicationConfig.setName("dubbo-annotation-test");
         return applicationConfig;
     }
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/ProviderConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.spring.context.annotation.DubboComponentScan;
+
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Primary;
 import org.springframework.context.annotation.PropertySource;
@@ -42,10 +43,10 @@ public class ProviderConfiguration {
      *
      * @return {@link ApplicationConfig} Bean
      */
-    @Bean("dubbo-annotation-provider")
+    @Bean("dubbo-annotation-test")
     public ApplicationConfig applicationConfig() {
         ApplicationConfig applicationConfig = new ApplicationConfig();
-        applicationConfig.setName("dubbo-annotation-provider");
+        applicationConfig.setName("dubbo-annotation-test");
         return applicationConfig;
     }
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/ExporterSideConfigUrlTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.config.context.ConfigManager;
 
 import org.junit.After;
 import org.junit.Before;
@@ -43,10 +44,12 @@ public static void start() {
     @Before
     public void setUp() {
         initServConf();
+        ConfigManager.getInstance().clear();
     }
 
     @After()
     public void teardown() {
+        ConfigManager.getInstance().clear();
     }
 
     @Test

File: dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java
Patch:
@@ -62,10 +62,10 @@ public class Constants {
     public static final String CONFIG_NAMESPACE_KEY = "config.namespace";
     public static final String CONFIG_GROUP_KEY = "config.group";
     public static final String CONFIG_CHECK_KEY = "config.check";
-    public static final String CONFIG_CONFIGFILE_KEY = "config.configFile";
-    public static final String CONFIG_ENABLE_KEY = "config.highestPriority";
+    public static final String CONFIG_CONFIGFILE_KEY = "config.config-file";
+    public static final String CONFIG_ENABLE_KEY = "config.highest-priority";
     public static final String CONFIG_TIMEOUT_KEY = "config.timeout";
-    public static final String CONFIG_APPNAME_KEY = "config.appName";
+    public static final String CONFIG_APPNAME_KEY = "config.app-name";
 
     public static final String DEFAULT_CATEGORY = PROVIDERS_CATEGORY;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/Environment.java
Patch:
@@ -163,10 +163,12 @@ public void setDynamicConfiguration(Configuration dynamicConfiguration) {
     // For test
     public void clearExternalConfigs() {
         this.externalConfigs.clear();
+        this.externalConfigurationMap.clear();
     }
 
     // For test
     public void clearAppExternalConfigs() {
         this.appExternalConfigs.clear();
+        this.appExternalConfigurationMap.clear();
     }
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -228,7 +228,6 @@ protected void checkMetadataReport() {
      */
     protected List<URL> loadRegistries(boolean provider) {
         // check && override if necessary
-        checkRegistry();
         List<URL> registryList = new ArrayList<URL>();
         if (registries != null && !registries.isEmpty()) {
             for (RegistryConfig config : registries) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -218,6 +218,7 @@ public void checkAndUpdateSubConfigs() {
             inheritIfAbsentFromApplication();
         }
         checkApplication();
+        checkRegistry();
         checkMetadataReport();
     }
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractInterfaceConfigTest.java
Patch:
@@ -118,6 +118,8 @@ public void checkApplication2() throws Exception {
     public void testLoadRegistries() throws Exception {
         System.setProperty("dubbo.registry.address", "addr1");
         InterfaceConfig interfaceConfig = new InterfaceConfig();
+        // FIXME: now we need to check first, then load
+        interfaceConfig.checkRegistry();
         List<URL> urls = interfaceConfig.loadRegistries(true);
         TestCase.assertEquals(1, urls.size());
         URL url = urls.get(0);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -140,7 +140,7 @@ private static String getTagName(Class<?> cls) {
                 break;
             }
         }
-        return tag.substring(0, 1).toLowerCase() + tag.substring(1);
+        return StringUtils.camelToSplitName(tag, "-");
     }
 
     protected static void appendParameters(Map<String, String> parameters, Object config) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -803,7 +803,7 @@ private void checkProtocol() {
             }
             protocolConfig.refresh();
             if (StringUtils.isNotEmpty(protocolConfig.getId())) {
-                protocolConfig.setPrefix("dubbo.protocols.");
+                protocolConfig.setPrefix(Constants.PROTOCOLS_SUFFIX);
                 protocolConfig.refresh();
             }
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -263,8 +263,8 @@ private <T> ExporterChangeableWrapper doChangeLocalExport(final Invoker<T> origi
         if (exporter == null) {
             logger.warn(new IllegalStateException("error state, exporter should not be null"));
         } else {
-            final Invoker<T> invokerDelegete = new InvokerDelegate<T>(originInvoker, newInvokerUrl);
-            exporter.setExporter(protocol.export(invokerDelegete));
+            final Invoker<T> invokerDelegate = new InvokerDelegate<T>(originInvoker, newInvokerUrl);
+            exporter.setExporter(protocol.export(invokerDelegate));
         }
         return exporter;
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java
Patch:
@@ -176,6 +176,8 @@ public class Constants {
 
     public static final String REMOVE_VALUE_PREFIX = "-";
 
+    public static final String PROPERTIES_CHAR_SEPERATOR = "-";
+
     public static final String HIDE_KEY_PREFIX = ".";
 
     public static final String DEFAULT_KEY_PREFIX = "default.";

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java
Patch:
@@ -75,7 +75,8 @@ public static class Single {
             @EnableDubboConfigBinding(prefix = "dubbo.monitors", type = MonitorConfig.class, multiple = true),
             @EnableDubboConfigBinding(prefix = "dubbo.providers", type = ProviderConfig.class, multiple = true),
             @EnableDubboConfigBinding(prefix = "dubbo.consumers", type = ConsumerConfig.class, multiple = true),
-            @EnableDubboConfigBinding(prefix = "dubbo.config-centers", type = ConfigCenterBean.class, multiple = true)
+            @EnableDubboConfigBinding(prefix = "dubbo.config-centers", type = ConfigCenterBean.class, multiple = true),
+            @EnableDubboConfigBinding(prefix = "dubbo.metadata-reports", type = MetadataReportConfig.class, multiple = true)
     })
     public static class Multiple {
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.Version;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ConsumerConfig;
+import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.ModuleConfig;
 import org.apache.dubbo.config.MonitorConfig;
 import org.apache.dubbo.config.ProtocolConfig;
@@ -47,6 +48,7 @@ public void init() {
         registerBeanDefinitionParser("module", new DubboBeanDefinitionParser(ModuleConfig.class, true));
         registerBeanDefinitionParser("registry", new DubboBeanDefinitionParser(RegistryConfig.class, true));
         registerBeanDefinitionParser("config-center", new DubboBeanDefinitionParser(ConfigCenterBean.class, true));
+        registerBeanDefinitionParser("metadata-report", new DubboBeanDefinitionParser(MetadataReportConfig.class, true));
         registerBeanDefinitionParser("monitor", new DubboBeanDefinitionParser(MonitorConfig.class, true));
         registerBeanDefinitionParser("provider", new DubboBeanDefinitionParser(ProviderConfig.class, true));
         registerBeanDefinitionParser("consumer", new DubboBeanDefinitionParser(ConsumerConfig.class, true));

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -219,7 +219,6 @@ public void checkAndUpdateSubConfigs() {
         }
         checkApplication();
         checkMetadataReport();
-        checkRegistryDataConfig();
     }
 
     public synchronized T get() {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -275,7 +275,6 @@ public void checkAndUpdateSubConfigs() {
         checkProtocol();
         this.refresh();
         checkMetadataReport();
-        checkRegistryDataConfig();
 
         if (interfaceName == null || interfaceName.length() == 0) {
             throw new IllegalStateException("<dubbo:service interface=\"\" /> interface not allow null!");

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java
Patch:
@@ -25,9 +25,7 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
-import org.apache.dubbo.config.RegistryDataConfig;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
-
 import org.springframework.context.annotation.Configuration;
 
 /**
@@ -60,7 +58,6 @@ public class DubboConfigConfiguration {
             @EnableDubboConfigBinding(prefix = "dubbo.provider", type = ProviderConfig.class),
             @EnableDubboConfigBinding(prefix = "dubbo.consumer", type = ConsumerConfig.class),
             @EnableDubboConfigBinding(prefix = "dubbo.config-center", type = ConfigCenterBean.class),
-            @EnableDubboConfigBinding(prefix = "dubbo.registry-data", type = RegistryDataConfig.class),
             @EnableDubboConfigBinding(prefix = "dubbo.metadata-report", type = MetadataReportConfig.class)
     })
     public static class Single {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -423,8 +423,7 @@ private void convertRegistryIdsToRegistries() {
 
         if (StringUtils.isEmpty(registryIds)) {
             if (registries == null || registries.isEmpty()) {
-                registries = new ArrayList<>();
-                registries.add(ConfigManager.getInstance().getDefaultRegistry().orElse(new RegistryConfig()));
+                registries = ConfigManager.getInstance().getDefaultRegistries().orElse(Arrays.asList(new RegistryConfig()));
             }
         } else {
             String[] arr = Constants.COMMA_SPLIT_PATTERN.split(registryIds);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -767,8 +767,7 @@ private void convertProtocolIdsToProtocols() {
 
         if (StringUtils.isEmpty(protocolIds)) {
             if (protocols == null || protocols.isEmpty()) {
-                protocols = new ArrayList<>();
-                protocols.add(ConfigManager.getInstance().getDefaultProtocol().orElse(new ProtocolConfig()));
+                protocols = ConfigManager.getInstance().getDefaultProtocols().orElse(Arrays.asList(new ProtocolConfig()));
             }
         } else {
             String[] arr = Constants.COMMA_SPLIT_PATTERN.split(protocolIds);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -79,7 +79,7 @@ public String getVersion() {
     }
 
     public void setVersion(String version) {
-        checkKey("version", version);
+        checkKey(Constants.VERSION_KEY, version);
         this.version = version;
     }
 
@@ -88,7 +88,7 @@ public String getGroup() {
     }
 
     public void setGroup(String group) {
-        checkKey("group", group);
+        checkKey(Constants.GROUP_KEY, group);
         this.group = group;
     }
 
@@ -138,7 +138,7 @@ public void setToken(Boolean token) {
     }
 
     public void setToken(String token) {
-        checkName("token", token);
+        checkName(Constants.TOKEN_KEY, token);
         this.token = token;
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConfigCenterConfig.java
Patch:
@@ -115,7 +115,7 @@ private URL toConfigUrl() {
         map.put(Constants.PATH_KEY, ConfigCenterConfig.class.getSimpleName());
         // use 'zookeeper' as the default configcenter.
         if (StringUtils.isEmpty(map.get(Constants.PROTOCOL_KEY))) {
-            map.put(Constants.PROTOCOL_KEY, "zookeeper");
+            map.put(Constants.PROTOCOL_KEY, Constants.ZOOKEEPER_PROTOCOL);
         }
         return UrlUtils.parseURL(address, map);
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MethodConfig.java
Patch:
@@ -89,7 +89,7 @@ public String getName() {
     public void setName(String name) {
         checkMethodName("name", name);
         this.name = name;
-        if (id == null || id.length() == 0) {
+        if (StringUtils.isEmpty(id)) {
             id = name;
         }
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/EnvironmentConfiguration.java
Patch:
@@ -30,7 +30,7 @@ public EnvironmentConfiguration() {
     }
 
     @Override
-    protected Object getInternalProperty(String key) {
+    public Object getInternalProperty(String key) {
         return System.getenv(key);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/InmemoryConfiguration.java
Patch:
@@ -36,7 +36,7 @@ public InmemoryConfiguration() {
     }
 
     @Override
-    protected Object getInternalProperty(String key) {
+    public Object getInternalProperty(String key) {
         return store.get(key);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/PropertiesConfiguration.java
Patch:
@@ -35,7 +35,7 @@ public PropertiesConfiguration() {
     }
 
     @Override
-    protected Object getInternalProperty(String key) {
+    public Object getInternalProperty(String key) {
         return ConfigUtils.getProperty(key);
     }
 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/SystemConfiguration.java
Patch:
@@ -33,7 +33,7 @@ public SystemConfiguration() {
     }
 
     @Override
-    protected Object getInternalProperty(String key) {
+    public Object getInternalProperty(String key) {
         return System.getProperty(key);
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java
Patch:
@@ -229,6 +229,8 @@ public class Constants {
 
     public static final String PROTOCOL_KEY = "protocol";
 
+    public static final String DOBBO_PROTOCOL = DUBBO;
+
     public static final String PROXY_KEY = "proxy";
 
     public static final String WEIGHT_KEY = "weight";

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -272,15 +272,15 @@ private static boolean isTypeMatch(Class<?> type, String value) {
 
     protected static void checkExtension(Class<?> type, String property, String value) {
         checkName(property, value);
-        if (value != null && value.length() > 0
+        if (StringUtils.isNotEmpty(value)
                 && !ExtensionLoader.getExtensionLoader(type).hasExtension(value)) {
             throw new IllegalStateException("No such extension " + value + " for " + property + "/" + type.getName());
         }
     }
 
     protected static void checkMultiExtension(Class<?> type, String property, String value) {
         checkMultiName(property, value);
-        if (value != null && value.length() > 0) {
+        if (StringUtils.isNotEmpty(value)) {
             String[] values = value.split("\\s*[,]+\\s*");
             for (String v : values) {
                 if (v.startsWith(Constants.REMOVE_VALUE_PREFIX)) {
@@ -338,7 +338,7 @@ protected static void checkParameterName(Map<String, String> parameters) {
     }
 
     protected static void checkProperty(String property, String value, int maxlength, Pattern pattern) {
-        if (value == null || value.length() == 0) {
+        if (StringUtils.isEmpty(value)) {
             return;
         }
         if (value.length() > maxlength) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractReferenceConfig.java
Patch:
@@ -185,7 +185,7 @@ public String getVersion() {
     }
 
     public void setVersion(String version) {
-        checkKey("version", version);
+        checkKey(Constants.VERSION_KEY, version);
         this.version = version;
     }
 
@@ -194,7 +194,7 @@ public String getGroup() {
     }
 
     public void setGroup(String group) {
-        checkKey("group", group);
+        checkKey(Constants.GROUP_KEY, group);
         this.group = group;
     }
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConsumerConfig.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dubbo.config;
 
+import org.apache.dubbo.common.utils.StringUtils;
+
 /**
  * ConsumerConfig
  *
@@ -48,7 +50,7 @@ public void setTimeout(Integer timeout) {
         super.setTimeout(timeout);
         String rmiTimeout = System.getProperty("sun.rmi.transport.tcp.responseTimeout");
         if (timeout != null && timeout > 0
-                && (rmiTimeout == null || rmiTimeout.length() == 0)) {
+                && (StringUtils.isEmpty(rmiTimeout))) {
             System.setProperty("sun.rmi.transport.tcp.responseTimeout", String.valueOf(timeout));
         }
     }

File: dubbo-common/src/main/java/org/apache/dubbo/common/async/support/AsyncFor.java
Patch:
@@ -24,11 +24,11 @@
 
 /**
  * TODO This definition should better be placed in module 'dubbo-config-api', but only can be done when "rpc" dependencies are removed from "dubbo-config-api"
- * If an interface is annotated with AsyncFor, it will be treated as an async counterpart for the sync one.
+ * If a method is annotated with AsyncFor, it will be treated as an async counterpart for the sync specified in value.
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
+@Target({ElementType.METHOD})
 public @interface AsyncFor {
 
     /**

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.dubbo.rpc.cluster.Router;
 import org.apache.dubbo.rpc.cluster.RouterChain;
 
-import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
@@ -96,8 +96,7 @@ public void setRouterChain(RouterChain<T> routerChain) {
     }
 
     protected void addRouters(List<Router> routers) {
-        // copy list
-        routers = routers == null ? new ArrayList<>() : new ArrayList<>(routers);
+        routers = routers == null ? Collections.emptyList() : routers;
         routerChain.addRouters(routers);
     }
 

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/support/AbstractMetadataReportTest.java
Patch:
@@ -66,7 +66,7 @@ public void testStoreProviderUsual() throws ClassNotFoundException, InterruptedE
         String group = null;
         String application = "vic";
         MetadataIdentifier providerMetadataIdentifier = storePrivider(abstractMetadataReport, interfaceName, version, group, application);
-        Thread.sleep(1000);
+        Thread.sleep(1500);
         Assert.assertNotNull(abstractMetadataReport.store.get(providerMetadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.UNIQUE_KEY)));
     }
 

File: dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/test/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportTest.java
Patch:
@@ -123,7 +123,7 @@ private MetadataIdentifier storePrivider(ZookeeperMetadataReport zookeeperMetada
         FullServiceDefinition fullServiceDefinition = ServiceDefinitionBuilder.buildFullDefinition(interfaceClass, url.getParameters());
 
         zookeeperMetadataReport.storeProviderMetadata(providerMetadataIdentifier, fullServiceDefinition);
-        Thread.sleep(300);
+        Thread.sleep(2000);
         return providerMetadataIdentifier;
     }
 
@@ -137,7 +137,7 @@ private MetadataIdentifier storeConsumer(ZookeeperMetadataReport zookeeperMetada
         Map<String, String> tmp = new HashMap<>();
         tmp.put("paramConsumerTest", "zkCm");
         zookeeperMetadataReport.storeConsumerMetadata(consumerMetadataIdentifier, tmp);
-        Thread.sleep(300);
+        Thread.sleep(2000);
 
         return consumerMetadataIdentifier;
     }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java
Patch:
@@ -160,7 +160,8 @@ private void initInvokers(URL url, boolean invoker1Status, boolean invoker2Statu
 
     private void initDic(URL url) {
         // FIXME: this exposes the design flaw in RouterChain
-        dic = new StaticDirectory<>(url, invokers);
+        URL dicInitUrl = URL.valueOf("consumer://localhost:20880/org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest?application=FileRouterEngineTest");
+        dic = new StaticDirectory<>(dicInitUrl, invokers);
         dic.buildRouterChain();
         dic.getRouterChain().initWithRouters(Arrays.asList(routerFactory.getRouter(url)));
     }

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/test/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationTest.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.concurrent.CountDownLatch;
 
 /**
- *
+ * TODO refactor using mockito
  */
 public class ZookeeperDynamicConfigurationTest {
     private static CuratorFramework client;
@@ -61,6 +61,7 @@ public static void setUp() throws Exception {
             setData("/dubbo/config/group*service:version/configurators", "The content from configurators");
             setData("/dubbo/config/appname", "The content from higer level node");
             setData("/dubbo/config/appname/tagrouters", "The content from appname tagrouters");
+            setData("/dubbo/config/never.change.DemoService/configurators", "Never change value from configurators");
         } catch (Exception e) {
             e.printStackTrace();
         }
@@ -85,7 +86,7 @@ private static void setData(String path, String data) throws Exception {
 
     @Test
     public void testGetConfig() throws Exception {
-        Assert.assertEquals("The content from dubbo.properties", configuration.getConfig("dubbo.dubbo.properties"));
+        Assert.assertEquals("Never change value from configurators", configuration.getConfig("never.change.DemoService.configurators"));
         Assert.assertEquals("The content from dubbo.properties", configuration.getConfig("dubbo.properties", "dubbo"));
     }
 

File: dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ExceptionFilterTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dubbo.rpc.support.LocalException;
 
 import com.alibaba.com.caucho.hessian.HessianException;
+
 import org.junit.Assert;
 import org.junit.Test;
 import org.mockito.Mockito;
@@ -124,6 +125,8 @@ public void testConvertToRunTimeException() {
 
         Result newResult = exceptionFilter.invoke(invoker, invocation);
 
+        newResult = exceptionFilter.onResponse(newResult, invoker, invocation);
+
         Assert.assertFalse(newResult.getException() instanceof HessianException);
 
         Assert.assertEquals(newResult.getException().getClass(), RuntimeException.class);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java
Patch:
@@ -213,7 +213,7 @@ public void setApplication(String app) {
 
     private synchronized void checkAndInit(URL url) {
         String providerApplication = url.getParameter(Constants.REMOTE_APPLICATION_KEY);
-        if (StringUtils.isEmpty(application) || !providerApplication.equals(application)) {
+        if (StringUtils.isEmpty(application) || !application.equals(providerApplication)) {
             setApplication(providerApplication);
             inited = false;
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -58,6 +58,7 @@
 import static org.apache.dubbo.common.Constants.EXPORT_KEY;
 import static org.apache.dubbo.common.Constants.INTERFACES;
 import static org.apache.dubbo.common.Constants.METHODS_KEY;
+import static org.apache.dubbo.common.Constants.OVERRIDE_PROTOCOL;
 import static org.apache.dubbo.common.Constants.QOS_ENABLE;
 import static org.apache.dubbo.common.Constants.QOS_PORT;
 import static org.apache.dubbo.common.Constants.REFER_KEY;
@@ -477,8 +478,8 @@ public synchronized void notify(List<URL> urls) {
                 return;
             }
 
-            this.configurators = Configurator.toConfigurators(classifyUrls(matchedUrls, u -> u.getParameter(CATEGORY_KEY)
-                    .equals(CONFIGURATORS_CATEGORY))).orElse(configurators);
+            this.configurators = Configurator.toConfigurators(classifyUrls(matchedUrls, u -> CONFIGURATORS_CATEGORY.equals(u.getParameter(CATEGORY_KEY))
+                    || OVERRIDE_PROTOCOL.equals(u.getProtocol()))).orElse(configurators);
 
             doOverrideIfNecessary();
         }

File: dubbo-registry/dubbo-registry-default/src/main/java/org/apache/dubbo/registry/dubbo/DubboRegistryFactory.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.dubbo.rpc.Protocol;
 import org.apache.dubbo.rpc.ProxyFactory;
 import org.apache.dubbo.rpc.cluster.Cluster;
+import org.apache.dubbo.rpc.cluster.RouterChain;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -93,6 +94,7 @@ public Registry createRegistry(URL url) {
         DubboRegistry registry = new DubboRegistry(registryInvoker, registryService);
         directory.setRegistry(registry);
         directory.setProtocol(protocol);
+        directory.setRouterChain(RouterChain.buildChain(url));
         directory.notify(urls);
         directory.subscribe(new URL(Constants.CONSUMER_PROTOCOL, NetUtils.getLocalHost(), 0, RegistryService.class.getName(), url.getParameters()));
         return registry;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/AbstractRouter.java
Patch:
@@ -29,8 +29,8 @@
  */
 public abstract class AbstractRouter implements Router {
     protected int priority;
-    protected boolean force;
-    protected boolean enabled;
+    protected boolean force = false;
+    protected boolean enabled = true;
     protected List<RouterChain> routerChains = new CopyOnWriteArrayList<>();
     protected URL url;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouter.java
Patch:
@@ -196,7 +196,7 @@ public boolean isRuntime() {
 
     @Override
     public boolean isEnabled() {
-        return url == null ? enabled : url.getParameter(Constants.ENABLED_KEY, false);
+        return url == null ? enabled : url.getParameter(Constants.ENABLED_KEY, true);
     }
 
     @Override

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dubbo.rpc.cluster.directory;
 
+import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReport.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.metadata.support;
 
-import com.google.gson.Gson;
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.logger.Logger;
@@ -27,6 +26,8 @@
 import org.apache.dubbo.metadata.identifier.MetadataIdentifier;
 import org.apache.dubbo.metadata.store.MetadataReport;
 
+import com.google.gson.Gson;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
@@ -98,7 +99,7 @@ public AbstractMetadataReport(URL reportServerURL) {
                 reportServerURL.getParameter(Constants.RETRY_PERIOD_KEY, Constants.DEFAULT_METADATA_REPORT_RETRY_PERIOD));
         // cycle report the data switch
         if (reportServerURL.getParameter(Constants.CYCLE_REPORT_KEY, Constants.DEFAULT_METADATA_REPORT_CYCLE_REPORT)) {
-            ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(0, new NamedThreadFactory("DubboMetadataReportTimer", true));
+            ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory("DubboMetadataReportTimer", true));
             scheduler.scheduleAtFixedRate(new Runnable() {
                 @Override
                 public void run() {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -261,7 +261,7 @@ private void init() {
 
         ref = createProxy(map);
 
-        ConsumerModel consumerModel = new ConsumerModel(getUniqueServiceName(), ref, interfaceClass.getMethods(), attributes);
+        ConsumerModel consumerModel = new ConsumerModel(getUniqueServiceName(), interfaceClass, ref, interfaceClass.getMethods(), attributes);
         ApplicationModel.initConsumerModel(getUniqueServiceName(), consumerModel);
     }
 

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
Patch:
@@ -34,7 +34,7 @@ public void testInjvm() throws Exception {
         registry.setAddress("multicast://224.5.6.7:1234");
 
         ProtocolConfig protocol = new ProtocolConfig();
-        protocol.setName("dubbo");
+        protocol.setName("mockprotocol");
 
         ServiceConfig<DemoService> demoService;
         demoService = new ServiceConfig<DemoService>();
@@ -69,7 +69,7 @@ public void testReferenceRetry() {
         RegistryConfig registry = new RegistryConfig();
         registry.setAddress("multicast://224.5.6.7:1234");
         ProtocolConfig protocol = new ProtocolConfig();
-        protocol.setName("dubbo");
+        protocol.setName("mockprotocol");
 
         ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
         rc.setApplication(application);
@@ -105,4 +105,4 @@ public void testReferenceRetry() {
         Assert.assertNotNull(demoService);
 
     }
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/mock/MockProtocol.java
Patch:
@@ -24,6 +24,8 @@
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcException;
 
+import org.mockito.Mockito;
+
 public class MockProtocol implements Protocol {
 
     /* (non-Javadoc)
@@ -39,7 +41,7 @@ public int getDefaultPort() {
      * @see org.apache.dubbo.rpc.Protocol#export(org.apache.dubbo.rpc.Invoker)
      */
     public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
-        return null;
+        return Mockito.mock(Exporter.class);
     }
 
     /* (non-Javadoc)

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/RpcStatus.java
Patch:
@@ -109,6 +109,7 @@ public static void beginCount(URL url, String methodName) {
      * @param url
      */
     public static boolean beginCount(URL url, String methodName, int max) {
+        max = (max <= 0) ? Integer.MAX_VALUE : max;
         RpcStatus appStatus = getStatus(url);
         RpcStatus methodStatus = getStatus(url, methodName);
         if (methodStatus.active.incrementAndGet() > max) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ActiveLimitFilter.java
Patch:
@@ -47,7 +47,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         String methodName = invocation.getMethodName();
         int max = invoker.getUrl().getMethodParameter(methodName, Constants.ACTIVES_KEY, 0);
         RpcStatus count = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName());
-        if (max > 0 && !RpcStatus.beginCount(url, methodName, max)) {
+        if (!RpcStatus.beginCount(url, methodName, max)) {
             long timeout = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.TIMEOUT_KEY, 0);
             long start = System.currentTimeMillis();
             long remain = timeout;

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ExecuteLimitFilter.java
Patch:
@@ -40,7 +40,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         URL url = invoker.getUrl();
         String methodName = invocation.getMethodName();
         int max = url.getMethodParameter(methodName, Constants.EXECUTES_KEY, 0);
-        if (max > 0 && !RpcStatus.beginCount(url, methodName, max)) {
+        if (!RpcStatus.beginCount(url, methodName, max)) {
             throw new RpcException("Failed to invoke method " + invocation.getMethodName() + " in provider " +
                     url + ", cause: The service using threads greater than <dubbo:service executes=\"" + max +
                     "\" /> limited.");

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouter.java
Patch:
@@ -127,7 +127,7 @@ else if ("!=".equals(separator)) {
                 values.add(content);
             }
             // The Value in the KV part, if Value have more than one items.
-            else if (",".equals(separator)) { // Should be seperateed by ','
+            else if (",".equals(separator)) { // Should be separated by ','
                 if (values == null || values.isEmpty()) {
                     throw new ParseException("Illegal route rule \""
                             + rule + "\", The error char '" + separator

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/script/ScriptRouterFactory.java
Patch:
@@ -25,7 +25,7 @@
  * <p>
  * Example URLS used by Script Router Factory：
  * <ol>
- * <li> script://registyAddress?type=js&rule=xxxx
+ * <li> script://registryAddress?type=js&rule=xxxx
  * <li> script:///path/to/routerfile.js?type=js&rule=xxxx
  * <li> script://D:\path\to\routerfile.js?type=js&rule=xxxx
  * <li> script://C:/path/to/routerfile.js?type=js&rule=xxxx

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -143,7 +143,7 @@ private List<Invoker<T>> selectMockInvoker(Invocation invocation) {
         List<Invoker<T>> invokers = null;
         //TODO generic invoker？
         if (invocation instanceof RpcInvocation) {
-            //Note the implicit contract (although the description is added to the interface declaration, but extensibility is a problem. The practice placed in the attachement needs to be improved)
+            //Note the implicit contract (although the description is added to the interface declaration, but extensibility is a problem. The practice placed in the attachment needs to be improved)
             ((RpcInvocation) invocation).setAttachment(Constants.INVOCATION_NEED_MOCK, Boolean.TRUE.toString());
             //directory will return a list of normal invokers if Constants.INVOCATION_NEED_MOCK is present in invocation, otherwise, a list of mock invokers will return.
             try {

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/ClassUtils.java
Patch:
@@ -422,8 +422,8 @@ public static String getInitCode(Class<?> type) {
     public static <K, V> Map<K, V> toMap(Map.Entry<K, V>[] entries) {
         Map<K, V> map = new HashMap<K, V>();
         if (entries != null && entries.length > 0) {
-            for (Map.Entry<K, V> enrty : entries) {
-                map.put(enrty.getKey(), enrty.getValue());
+            for (Map.Entry<K, V> entry : entries) {
+                map.put(entry.getKey(), entry.getValue());
             }
         }
         return map;

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java
Patch:
@@ -189,7 +189,7 @@ public synchronized void mark(int readlimit) {
             @Override
             public synchronized void reset() throws IOException {
                 if (!mInMarked) {
-                    throw new IOException("should mark befor reset!");
+                    throw new IOException("should mark before reset!");
                 }
 
                 mInReset = true;

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java
Patch:
@@ -20,7 +20,7 @@
 import java.io.InputStream;
 
 /**
- * UnsafeByteArrayInputStrem.
+ * UnsafeByteArrayInputStream.
  */
 public class UnsafeByteArrayInputStream extends InputStream {
     protected byte mData[];

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/Assert.java
Patch:
@@ -28,9 +28,9 @@ public static void notNull(Object obj, String message) {
         }
     }
 
-    public static void notNull(Object obj, RuntimeException exeception) {
+    public static void notNull(Object obj, RuntimeException exception) {
         if (obj == null) {
-            throw exeception;
+            throw exception;
         }
     }
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConfigUtils.java
Patch:
@@ -213,7 +213,7 @@ public static Properties loadProperties(String fileName, boolean allowMultiFile)
      * <li>return empty Properties if no file found.
      * <li>merge multi properties file if found multi file
      * </ul>
-     * @throws IllegalStateException not allow multi-file, but multi-file exsit on class path.
+     * @throws IllegalStateException not allow multi-file, but multi-file exist on class path.
      */
     public static Properties loadProperties(String fileName, boolean allowMultiFile, boolean optional) {
         Properties properties = new Properties();

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java
Patch:
@@ -175,9 +175,9 @@ private static Object generalize(Object pojo, Map<Object, Object> history) {
                 try {
                     Object fieldValue = field.get(pojo);
                     if (history.containsKey(pojo)) {
-                        Object pojoGenerilizedValue = history.get(pojo);
-                        if (pojoGenerilizedValue instanceof Map
-                                && ((Map) pojoGenerilizedValue).containsKey(field.getName())) {
+                        Object pojoGeneralizedValue = history.get(pojo);
+                        if (pojoGeneralizedValue instanceof Map
+                                && ((Map) pojoGeneralizedValue).containsKey(field.getName())) {
                             continue;
                         }
                     }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/qos/command/CommandContext.java
Patch:
@@ -23,7 +23,7 @@ public class CommandContext extends org.apache.dubbo.qos.command.CommandContext
     public CommandContext(org.apache.dubbo.qos.command.CommandContext context) {
         super(context.getCommandName(), context.getArgs(), context.isHttp());
         setRemote(context.getRemote());
-        setOrginRequest(context.getOrginRequest());
+        setOriginRequest(context.getOriginRequest());
     }
 
     public CommandContext(String commandName) {

File: dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/CompatibleServiceAnnotationBeanPostProcessor.java
Patch:
@@ -209,7 +209,7 @@ private BeanNameGenerator resolveBeanNameGenerator(BeanDefinitionRegistry regist
      * {@link Service} Annotation.
      *
      * @param scanner       {@link ClassPathBeanDefinitionScanner}
-     * @param packageToScan pachage to scan
+     * @param packageToScan package to scan
      * @param registry      {@link BeanDefinitionRegistry}
      * @return non-null
      * @since 2.5.8

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java
Patch:
@@ -509,7 +509,7 @@ private <T> T getFieldValue(Object object, String fieldName, Class<T> fieldType)
     /**
      * Generate a key based on the annotation.
      *
-     * @param annotations annotatoin value
+     * @param annotations annotation value
      * @return unique key, never null will be returned.
      * @since 2.7.0
      */

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java
Patch:
@@ -208,7 +208,7 @@ private BeanNameGenerator resolveBeanNameGenerator(BeanDefinitionRegistry regist
      * {@link Service} Annotation.
      *
      * @param scanner       {@link ClassPathBeanDefinitionScanner}
-     * @param packageToScan pachage to scan
+     * @param packageToScan package to scan
      * @param registry      {@link BeanDefinitionRegistry}
      * @return non-null
      * @since 2.5.8

File: dubbo-filter/dubbo-filter-cache/src/main/java/org/apache/dubbo/cache/Cache.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Cache interface to support storing and retrieval of value against a lookup key. It has two operation <b>get</b> and <b>put</b>.
  * <li><b>put</b>-Storing value against a key.</li>
- * <li><b>get</b>-Retrival of object.</li>
+ * <li><b>get</b>-Retrieval of object.</li>
  * @see org.apache.dubbo.cache.support.lru.LruCache
  * @see org.apache.dubbo.cache.support.jcache.JCache
  * @see org.apache.dubbo.cache.support.expiring.ExpiringCache

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/decoder/TelnetCommandDecoder.java
Patch:
@@ -31,7 +31,7 @@ public static final CommandContext decode(String str) {
                 String[] targetArgs = new String[array.length - 1];
                 System.arraycopy(array, 1, targetArgs, 0, array.length - 1);
                 commandContext = CommandContextFactory.newInstance( name, targetArgs,false);
-                commandContext.setOrginRequest(str);
+                commandContext.setOriginRequest(str);
             }
         }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -562,7 +562,7 @@ private void destroyUnusedInvokers(Map<String, Invoker<T>> oldUrlInvokerMap, Map
                                 logger.debug("destroy invoker[" + invoker.getUrl() + "] success. ");
                             }
                         } catch (Exception e) {
-                            logger.warn("destroy invoker[" + invoker.getUrl() + "] faild. " + e.getMessage(), e);
+                            logger.warn("destroy invoker[" + invoker.getUrl() + "] failed. " + e.getMessage(), e);
                         }
                     }
                 }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
Patch:
@@ -272,7 +272,7 @@ public void unregister(URL url) {
                 }
                 throw new IllegalStateException("Failed to unregister " + url + " to registry " + getUrl().getAddress() + ", cause: " + t.getMessage(), t);
             } else {
-                logger.error("Failed to uregister " + url + ", waiting for retry, cause: " + t.getMessage(), t);
+                logger.error("Failed to unregister " + url + ", waiting for retry, cause: " + t.getMessage(), t);
             }
 
             // Record a failed registration request to a failed list, retry regularly

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/Response.java
Patch:
@@ -31,7 +31,7 @@ public class Response {
     public static final byte OK = 20;
 
     /**
-     * clien side timeout.
+     * client side timeout.
      */
     public static final byte CLIENT_TIMEOUT = 30;
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/DefaultFuture.java
Patch:
@@ -265,7 +265,7 @@ private void invokeCallback(ResponseCallback c) {
             try {
                 callbackCopy.done(res.getResult());
             } catch (Exception e) {
-                logger.error("callback invoke error .reasult:" + res.getResult() + ",url:" + channel.getUrl(), e);
+                logger.error("callback invoke error .result:" + res.getResult() + ",url:" + channel.getUrl(), e);
             }
         } else if (res.getStatus() == Response.CLIENT_TIMEOUT || res.getStatus() == Response.SERVER_TIMEOUT) {
             try {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractServer.java
Patch:
@@ -202,7 +202,7 @@ public void connected(Channel ch) throws RemotingException {
     public void disconnected(Channel ch) throws RemotingException {
         Collection<Channel> channels = getChannels();
         if (channels.isEmpty()) {
-            logger.warn("All clients has discontected from " + ch.getLocalAddress() + ". You can graceful shutdown now.");
+            logger.warn("All clients has disconnected from " + ch.getLocalAddress() + ". You can graceful shutdown now.");
         }
         super.disconnected(ch);
     }

File: dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyBackedChannelBuffer.java
Patch:
@@ -261,7 +261,7 @@ public void readBytes(ChannelBuffer dst) {
 
     @Override
     public void readBytes(ChannelBuffer dst, int length) {
-        // carefule
+        // careful
         if (length > dst.writableBytes()) {
             throw new IndexOutOfBoundsException();
         }

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyBackedChannelBuffer.java
Patch:
@@ -261,7 +261,7 @@ public void readBytes(ChannelBuffer dst) {
     
     @Override
     public void readBytes(ChannelBuffer dst, int length) {
-        // carefule
+        // careful
         if (length > dst.writableBytes()) {
             throw new IndexOutOfBoundsException();
         }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncContext.java
Patch:
@@ -42,7 +42,7 @@ public interface AsyncContext {
     void write(Object value);
 
     /**
-     * @return true if the aysnc context is started
+     * @return true if the async context is started
      */
     boolean isAsyncStarted();
 

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncContextImpl.java
Patch:
@@ -26,7 +26,7 @@ public class AsyncContextImpl implements AsyncContext {
     private static final Logger logger = LoggerFactory.getLogger(AsyncContextImpl.class);
 
     private final AtomicBoolean started = new AtomicBoolean(false);
-    private final AtomicBoolean stoped = new AtomicBoolean(false);
+    private final AtomicBoolean stopped = new AtomicBoolean(false);
 
     private CompletableFuture<Object> future;
 
@@ -63,7 +63,7 @@ public boolean isAsyncStarted() {
 
     @Override
     public boolean stop() {
-        return stoped.compareAndSet(false, true);
+        return stopped.compareAndSet(false, true);
     }
 
     @Override

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/tps/DefaultTPSLimiter.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.concurrent.ConcurrentMap;
 
 /**
- * DefaultTPSLimiter is a default implementation for tps filter. It is an in memory based implementation for stroring
+ * DefaultTPSLimiter is a default implementation for tps filter. It is an in memory based implementation for storing
  * tps information. It internally use
  *
  * @see org.apache.dubbo.rpc.filter.TpsLimitFilter

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -97,7 +97,7 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
 
                 Result result;
                 if (isAsyncFuture) {
-                    // register resultCallback, sometimes we need the asyn result being processed by the filter chain.
+                    // register resultCallback, sometimes we need the async result being processed by the filter chain.
                     result = new AsyncRpcResult(futureAdapter, futureAdapter.getResultFuture(), false);
                 } else {
                     result = new SimpleAsyncRpcResult(futureAdapter, futureAdapter.getResultFuture(), false);

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ListTelnetHandler.java
Patch:
@@ -46,7 +46,7 @@ public String telnet(Channel channel, String message) {
                     detail = true;
                 } else {
                     if (service != null && service.length() > 0) {
-                        return "Invaild parameter " + part;
+                        return "Invalid parameter " + part;
                     }
                     service = part;
                 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -364,14 +364,14 @@ private static String extractPropertyName(Class<?> clazz, Method setter) throws
         Method getter = null;
         try {
             getter = clazz.getMethod("get" + propertyName);
-            propertyName = propertyName.substring(3, 4).toLowerCase() + propertyName.substring(4);
         } catch (NoSuchMethodException e) {
             getter = clazz.getMethod("is" + propertyName);
-            propertyName = propertyName.substring(2, 3).toLowerCase() + propertyName.substring(3);
         }
         Parameter parameter = getter.getAnnotation(Parameter.class);
         if (parameter != null && StringUtils.isNotEmpty(parameter.key()) && parameter.useKeyAsProperty()) {
             propertyName = parameter.key();
+        } else {
+            propertyName = propertyName.substring(0, 1).toLowerCase() + propertyName.substring(1);
         }
         return propertyName;
     }

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java
Patch:
@@ -160,7 +160,7 @@ private void initInvokers(URL url, boolean invoker1Status, boolean invoker2Statu
 
     private void initDic(URL url) {
         dic = new StaticDirectory<>(url, invokers);
-        dic.buildRouterChain(invokers);
+        dic.buildRouterChain();
         dic.getRouterChain().setResidentRouters(Arrays.asList(routerFactory.getRouter(url)));
     }
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -455,7 +455,7 @@ private void initlistsize5() {
     }
 
     private void initDic() {
-        dic.buildRouterChain(invokers);
+        dic.buildRouterChain();
     }
 
     @Test()

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvokerTest.java
Patch:
@@ -652,7 +652,7 @@ private Invoker<IHelloService> getClusterInvokerMock(URL url, Invoker<IHelloServ
         }
 
         StaticDirectory<IHelloService> dic = new StaticDirectory<IHelloService>(durl, invokers, null);
-        dic.buildRouterChain(invokers);
+        dic.buildRouterChain();
         AbstractClusterInvoker<IHelloService> cluster = new AbstractClusterInvoker(dic) {
             @Override
             protected Result doInvoke(Invocation invocation, List invokers, LoadBalance loadbalance)

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java
Patch:
@@ -85,9 +85,9 @@ public void destroy() {
         invokers.clear();
     }
 
-    public void buildRouterChain(List<Invoker<T>> groupInvokers) {
+    public void buildRouterChain() {
         RouterChain<T> routerChain = RouterChain.buildChain(getUrl());
-        routerChain.notifyFullInvokers(groupInvokers, getUrl());
+        routerChain.notifyFullInvokers(invokers, getUrl());
         this.setRouterChain(routerChain);
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -280,7 +280,7 @@ private List<Invoker<T>> toMergeInvokerList(List<Invoker<T>> invokers) {
         } else if (groupMap.size() > 1) {
             for (List<Invoker<T>> groupList : groupMap.values()) {
                 StaticDirectory<T> staticDirectory = new StaticDirectory<>(groupList);
-                staticDirectory.buildRouterChain(invokers);
+                staticDirectory.buildRouterChain();
                 mergedInvokers.add(cluster.join(staticDirectory));
             }
         } else {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java
Patch:
@@ -151,6 +151,6 @@ public void notifyFullInvokers(List<Invoker<T>> invokers, URL url) {
     }
 
     public void setFullMethodInvokers(List<Invoker<T>> fullInvokers) {
-        this.fullInvokers = fullInvokers;
+        this.fullInvokers = (fullInvokers == null ? Collections.emptyList() : fullInvokers);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.cluster.RouterChain;
 
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -101,7 +102,7 @@ protected List<Invoker<T>> doList(Invocation invocation) throws RpcException {
                 logger.error("Failed to execute router: " + getUrl() + ", cause: " + t.getMessage(), t);
             }
         }
-        return finalInvokers;
+        return finalInvokers == null ? Collections.emptyList() : finalInvokers;
     }
 
 }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ClassLoaderFilter.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dubbo.rpc.RpcException;
 
 /**
- * ClassLoaderInvokerFilter
+ * Set the current execution thread class loader to service interface's class loader.
  */
 @Activate(group = Constants.PROVIDER, order = -30000)
 public class ClassLoaderFilter implements Filter {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dubbo.rpc.RpcResult;
 
 /**
- * EchoInvokerFilter
+ * Dubbo provided default Echo echo service, which is available for all dubbo provider service interface.
  */
 @Activate(group = Constants.PROVIDER, order = -110000)
 public class EchoFilter implements Filter {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/model/ConditionRuleParser.java
Patch:
@@ -47,7 +47,7 @@ public static ConditionRouterRule parse(String rawRule) {
             rule.setValid(false);
         }
 
-        BlackWhiteListRule blackWhiteList = rule.getBlackWhiteListRule();
+        BlackWhiteListRule blackWhiteList = rule.getBlackWhiteList();
         if (blackWhiteList != null && CollectionUtils.isEmpty(blackWhiteList.getConditions())) {
             blackWhiteList.setValid(false);
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -562,7 +562,6 @@ private <T> URL overrideUrl(URL providerUrl) {
 
         @Override
         protected void notifyOverrides(List<URL> urls) {
-            urls.forEach(u -> u.addParameter(CATEGORY_KEY, DYNAMIC_CONFIGURATORS_CATEGORY));
             notifyListener.notify(urls);
         }
     }
@@ -598,7 +597,6 @@ private <T> URL overrideUrl(URL providerUrl) {
 
         @Override
         protected void notifyOverrides(List<URL> urls) {
-            urls.forEach(u -> u.addParameter(CATEGORY_KEY, APP_DYNAMIC_CONFIGURATORS_CATEGORY));
             overrideListeners.values().forEach(listener -> listener.notify(urls));
         }
     }

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/test/java/org/apache/dubbo/configcenter/support/zookeeper/ZookeeperDynamicConfigurationTest.java
Patch:
@@ -135,7 +135,7 @@ public void process(ConfigChangeEvent event) {
             Integer count = countMap.computeIfAbsent(event.getKey(), k -> new Integer(0));
             countMap.put(event.getKey(), ++count);
 
-            value = event.getNewValue();
+            value = event.getValue();
             latch.countDown();
         }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/PropertySourcesUtils.java
Patch:
@@ -55,7 +55,7 @@ public static Map<String, String> getSubProperties(Iterable<PropertySource<?>> p
                     if (name.startsWith(normalizedPrefix)) {
                         String subName = name.substring(normalizedPrefix.length());
                         String value = propertyResolver.getProperty(name);
-                        subProperties.put(subName, value);
+                        subProperties.putIfAbsent(subName, value);
                     }
                 }
             }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/HelpTelnetHandler.java
Patch:
@@ -59,9 +59,9 @@ public String telnet(Channel channel, String message) {
                     Help help = handler.getClass().getAnnotation(Help.class);
                     List<String> row = new ArrayList<String>();
                     String parameter = " " + extensionLoader.getExtensionName(handler) + " " + (help != null ? help.parameter().replace("\r\n", " ").replace("\n", " ") : "");
-                    row.add(parameter.length() > 50 ? parameter.substring(0, 50) + "..." : parameter);
+                    row.add(parameter.length() > 55 ? parameter.substring(0, 55) + "..." : parameter);
                     String summary = help != null ? help.summary().replace("\r\n", " ").replace("\n", " ") : "";
-                    row.add(summary.length() > 50 ? summary.substring(0, 50) + "..." : summary);
+                    row.add(summary.length() > 55 ? summary.substring(0, 55) + "..." : summary);
                     table.add(row);
                 }
             }

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoService.java
Patch:
@@ -47,7 +47,7 @@ public interface DemoService {
 
     Type enumlength(Type... types);
 
-//	Type enumlength(Type type);
+	Type getType(Type type);
 
     String get(CustomArgument arg1);
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoServiceImpl.java
Patch:
@@ -71,8 +71,8 @@ public Type enumlength(Type... types) {
             return Type.Lower;
         return types[0];
     }
-
-    public Type enumlength(Type type) {
+    
+    public Type getType(Type type) {
         return type;
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -74,7 +74,7 @@ public abstract class AbstractConfig implements Serializable {
         legacyProperties.put("dubbo.service.url", "dubbo.service.address");
 
         // this is only for compatibility
-        Runtime.getRuntime().addShutdownHook(DubboShutdownHook.getDubboShutdownHook());
+        DubboShutdownHook.getDubboShutdownHook().register();
     }
 
     protected String id;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/extension/SpringExtensionFactory.java
Patch:
@@ -44,7 +44,7 @@ public class SpringExtensionFactory implements ExtensionFactory {
 
     public static void addApplicationContext(ApplicationContext context) {
         contexts.add(context);
-        Runtime.getRuntime().removeShutdownHook(DubboShutdownHook.getDubboShutdownHook());
+        DubboShutdownHook.getDubboShutdownHook().unregister();
         BeanFactoryUtils.addApplicationListener(context, shutdownHookListener);
     }
 

File: dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/Validator.java
Patch:
@@ -17,7 +17,8 @@
 package org.apache.dubbo.validation;
 
 /**
- * Validator
+ * Instance of validator class is an extension to perform validation on method input parameter before the actual method invocation.
+ *
  */
 public interface Validator {
 

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/integration/MetadataReportServiceTest.java
Patch:
@@ -78,7 +78,7 @@ public void testPublishProviderContainInterface() throws InterruptedException {
 
         URL publishUrl = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService?version=1.0.3&application=vicpubp&interface=org.apache.dubbo.metadata.integration.InterfaceNameTestService");
         metadataReportService1.publishProvider(publishUrl);
-        Thread.sleep(100);
+        Thread.sleep(300);
 
         Assert.assertTrue(metadataReportService1.metadataReport instanceof JTestMetadataReport4Test);
 
@@ -98,7 +98,7 @@ public void testPublishConsumer() throws InterruptedException {
 
         URL publishUrl = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService?version=1.0.x&application=vicpubconsumer&side=consumer");
         metadataReportService1.publishConsumer(publishUrl);
-        Thread.sleep(100);
+        Thread.sleep(300);
 
         Assert.assertTrue(metadataReportService1.metadataReport instanceof JTestMetadataReport4Test);
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java
Patch:
@@ -140,6 +140,7 @@ private void doRoute(Router router, int i, TreeNode parentNode, Map<String, List
             parentNode.addChild(node);
             // Only when we have more routers and the sub-lis is not empty.
             if (i < routers.size() && CollectionUtils.isNotEmpty(list)) {
+                node.setInvokers(null); // only store invoker list in leaf nodes.
                 Router nextRouter = routers.get(i);
                 doRoute(nextRouter, i + 1, node, nextRouter.preRoute(list, url, invocation), url, invocation);
             }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/AbstractRouter.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Map;
 
 /**
- * TODO Extract more code here if necessary
+ * TODO Extract more code to here if necessary
  */
 public abstract class AbstractRouter implements Router {
     protected int priority;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java
Patch:
@@ -110,7 +110,9 @@ public synchronized void process(ConfigChangeEvent event) {
             } else {
                 this.tagRouterRule = TagRuleParser.parse(event.getNewValue());
             }
-            routerChain.notifyRuleChanged();
+            if (routerChain != null) {
+                routerChain.notifyRuleChanged();
+            }
         } catch (Exception e) {
             logger.error("Failed to parse the raw tag router rule and it will not take effect, please check if the rule matches with the template, the raw rule is:\n ", e);
         }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -381,7 +381,7 @@ private Map<String, List<Invoker<T>>> toMergeMethodInvokerMap(Map<String, List<I
                 for (List<Invoker<T>> groupList : groupMap.values()) {
                     StaticDirectory<T> staticDirectory = new StaticDirectory<>(groupList);
                     Map<String, List<Invoker<T>>> methodGroupInvokers = new HashMap<>();
-                    methodGroupInvokers.put(method, groupInvokers);
+                    methodGroupInvokers.put(method, groupList);
                     staticDirectory.buildRouterChain(methodGroupInvokers, dynamicConfiguration);
                     groupInvokers.add(cluster.join(staticDirectory));
                 }

File: dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java
Patch:
@@ -718,9 +718,9 @@ public class Constants {
 
     public static final String MULTICAST = "multicast";
 
-    public static final String TAG_KEY = "tag";
+    public static final String TAG_KEY = "dubbo.tag";
 
-    public static final String FORCE_USE_TAG = "force.tag";
+    public static final String FORCE_USE_TAG = "dubbo.force.tag";
 
     public static final String HOST_KEY = "host";
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -240,6 +240,7 @@ public void setSerialization(String serialization) {
         this.serialization = serialization;
     }
 
+    @Parameter(key = "dubbo.tag", useKeyAsProperty = false)
     public String getTag() {
         return tag;
     }

File: dubbo-configcenter/dubbo-configcenter-api/src/main/java/org/apache/dubbo/configcenter/ConfigurationListener.java
Patch:
@@ -22,6 +22,7 @@
 public interface ConfigurationListener {
 
     /**
+     * FIXME should it be synchronized?
      * Listener call back method. Listener gets notified by this method once there's any change happens on the config
      * the listener listens on.
      *

File: dubbo-remoting/dubbo-remoting-p2p/src/test/java/org/apache/dubbo/remoting/p2p/support/FileNetworkerTest.java
Patch:
@@ -51,7 +51,7 @@ public void tearDown() throws Exception {
 
     @Test
     public void testJoin() throws RemotingException, InterruptedException, IOException {
-        final String groupURL = "file://" + folder.newFile();
+        final String groupURL = "file:///" + folder.newFile();
 
         FileNetworker networker = new FileNetworker();
         Group group = networker.lookup(URL.valueOf(groupURL));

File: dubbo-configcenter/dubbo-configcenter-zookeeper/src/main/java/org/apache/dubbo/configcenter/support/zookeeper/CacheListener.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.curator.framework.recipes.cache.ChildData;
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent;
 import org.apache.curator.framework.recipes.cache.TreeCacheListener;
-import org.apache.dubbo.common.config.Configuration;
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.configcenter.ConfigChangeEvent;
 import org.apache.dubbo.configcenter.ConfigChangeType;

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java
Patch:
@@ -232,8 +232,8 @@ private static Wrapper makeWrapper(Class<?> c) {
                 pts.put(pn, pt);
             }
         }
-        c1.append(" throw new " + NoSuchPropertyException.class.getName() + "(\"Not found property \\\"\"+$2+\"\\\" filed or setter method in class " + c.getName() + ".\"); }");
-        c2.append(" throw new " + NoSuchPropertyException.class.getName() + "(\"Not found property \\\"\"+$2+\"\\\" filed or setter method in class " + c.getName() + ".\"); }");
+        c1.append(" throw new " + NoSuchPropertyException.class.getName() + "(\"Not found property \\\"\"+$2+\"\\\" field or setter method in class " + c.getName() + ".\"); }");
+        c2.append(" throw new " + NoSuchPropertyException.class.getName() + "(\"Not found property \\\"\"+$2+\"\\\" field or setter method in class " + c.getName() + ".\"); }");
 
         // make class
         long id = WRAPPER_CLASS_COUNTER.getAndIncrement();

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/AnnotationBean.java
Patch:
@@ -242,7 +242,7 @@ public Object postProcessBeforeInitialization(Object bean, String beanName)
                     }
                 }
             } catch (Throwable e) {
-                logger.error("Failed to init remote service reference at filed " + field.getName() + " in class " + bean.getClass().getName() + ", cause: " + e.getMessage(), e);
+                logger.error("Failed to init remote service reference at field " + field.getName() + " in class " + bean.getClass().getName() + ", cause: " + e.getMessage(), e);
             }
         }
         return bean;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.config.CompositeConfiguration;
+import org.apache.dubbo.common.config.Configuration;
 import org.apache.dubbo.common.config.Environment;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.logger.Logger;
@@ -499,14 +499,14 @@ public void refresh() {
         try {
             Environment env = Environment.getInstance();
             env.addAppConfig(getPrefix(), getId(), getMetaData());
-            CompositeConfiguration compositeConfiguration = env.getStartupCompositeConf(getPrefix(), getId());
+            Configuration configuration = env.getConfiguration(getPrefix(), getId());
 
             // loop methods, get override value and set the new value back to method
             Method[] methods = getClass().getMethods();
             for (Method method : methods) {
                 if (ClassHelper.isSetter(method)) {
                     try {
-                        String value = compositeConfiguration.getString(extractPropertyName(getClass(), method));
+                        String value = configuration.getString(extractPropertyName(getClass(), method));
                         // isTypeMatch() is called to avoid duplicate and incorrect update, for example, we have two 'setGeneric' methods in ReferenceConfig.
                         if (value != null && ClassHelper.isTypeMatch(method.getParameterTypes()[0], value)) {
                             method.invoke(this, ClassHelper.convertPrimitive(method.getParameterTypes()[0], value));

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -131,7 +131,7 @@ protected void checkRegistry() {
 
         if (registries == null || registries.isEmpty()) {
             registries = new ArrayList<>();
-            String registryIds = Environment.getInstance().getStartupCompositeConf(null, null).getString("dubbo.registries");
+            String registryIds = Environment.getInstance().getConfiguration(null, null).getString("dubbo.registries");
             if (StringUtils.isNotEmpty(registryIds)) {
                 Arrays.stream(Constants.COMMA_SPLIT_PATTERN.split(registryIds))
                         .map(regId -> {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -733,7 +733,7 @@ private void checkProtocol() {
         // backward compatibility
         if (protocols == null || protocols.isEmpty()) {
             //check 'dubbo.protocols=dubboProtocolId,hessianProtocolId' and decide if we need multiple protocols
-            String protocolIds = Environment.getInstance().getStartupCompositeConf(null, null).getString("dubbo.protocols");
+            String protocolIds = Environment.getInstance().getConfiguration(null, null).getString("dubbo.protocols");
             if (StringUtils.isNotEmpty(protocolIds)) {
                 Arrays.stream(Constants.COMMA_SPLIT_PATTERN.split(protocolIds))
                         .map(pId -> {

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/EnvironmentConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.common.config;
 
 /**
- *
+ * Configuration from system environment
  */
 public class EnvironmentConfiguration extends AbstractPrefixConfiguration {
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/PropertiesConfiguration.java
Patch:
@@ -20,6 +20,9 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.utils.ConfigUtils;
 
+/**
+ * Configuration from system properties and dubbo.properties
+ */
 public class PropertiesConfiguration extends AbstractPrefixConfiguration {
     private static final Logger logger = LoggerFactory.getLogger(PropertiesConfiguration.class);
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ConfigCenterBean.java
Patch:
@@ -107,8 +107,8 @@ public void setEnvironment(Environment environment) {
         if (auto) {
             Map<String, String> externalProperties = getConfigurations(getConfigfile(), environment);
             Map<String, String> appExternalProperties = getConfigurations("application." + getConfigfile(), environment);
-            org.apache.dubbo.common.config.Environment.getInstance().setExternalConfiguration(externalProperties);
-            org.apache.dubbo.common.config.Environment.getInstance().setAppExternalConfiguration(appExternalProperties);
+            org.apache.dubbo.common.config.Environment.getInstance().setExternalConfig(externalProperties);
+            org.apache.dubbo.common.config.Environment.getInstance().setAppExternalConfig(appExternalProperties);
             this.init();
         }
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -423,9 +423,10 @@ public Map<String, String> getMetaData() {
                     Object value = method.invoke(this);
                     String str = String.valueOf(value).trim();
                     if (value != null && str.length() > 0) {
-                        if (parameter != null && parameter.escaped()) {
+                        // ignore escape, keep the original value.
+                        /*if (parameter != null && parameter.escaped()) {
                             str = URL.encode(str);
-                        }
+                        }*/
                         if (parameter != null && parameter.append()) {
                             String pre = String.valueOf(metaData.get(Constants.DEFAULT_KEY + "." + key));
                             if (pre != null && pre.length() > 0) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -269,6 +269,8 @@ public void setShutwait(String shutwait) {
         this.shutwait = shutwait;
     }
 
+    @Override
+    @Parameter(excluded = true)
     public boolean isValid() {
         return !StringUtils.isEmpty(name);
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConfigCenterConfig.java
Patch:
@@ -301,6 +301,7 @@ private void checkConfigCenter() {
     }
 
     @Override
+    @Parameter(excluded = true)
     public boolean isValid() {
         if (StringUtils.isEmpty(address) && StringUtils.isEmpty(env)) {
             return false;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java
Patch:
@@ -127,6 +127,8 @@ public void setCyclereport(Boolean cyclereport) {
     }
 
 
+    @Override
+    @Parameter(excluded = true)
     public boolean isValid() {
         return StringUtils.isNotEmpty(address);
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MonitorConfig.java
Patch:
@@ -134,6 +134,8 @@ public String getInterval(){
         return interval;
     }
 
+    @Override
+    @Parameter(excluded = true)
     public boolean isValid() {
         return StringUtils.isNotEmpty(address);
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProtocolConfig.java
Patch:
@@ -473,6 +473,7 @@ public void destroy() {
     }
 
     @Override
+    @Parameter(excluded = true)
     public boolean isValid() {
         return StringUtils.isNotEmpty(name);
     }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java
Patch:
@@ -355,6 +355,7 @@ public boolean isZookeeperProtocol() {
     }
 
     @Override
+    @Parameter(excluded = true)
     public boolean isValid() {
         // empty protocol will default to 'dubbo'
         return !StringUtils.isEmpty(address);

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java
Patch:
@@ -75,6 +75,7 @@ public void setUp() throws Exception {
 
         RegistryConfig registry = new RegistryConfig();
         registry.setProtocol("mockprotocol2");
+        registry.setAddress("N/A");
 
         ArgumentConfig argument = new ArgumentConfig();
         argument.setIndex(0);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -495,7 +495,7 @@ public void refresh() {
                     try {
                         String value = compositeConfiguration.getString(extractPropertyName(getClass(), method));
                         // isTypeMatch() is called to avoid duplicate and incorrect update, for example, we have two 'setGeneric' methods in ReferenceConfig.
-                        if (value != null && isTypeMatch(method.getParameterTypes()[0], value)) {
+                        if (value != null && ClassHelper.isTypeMatch(method.getParameterTypes()[0], value)) {
                             method.invoke(this, ClassHelper.convertPrimitive(method.getParameterTypes()[0], value));
                         }
                     } catch (NoSuchMethodException e) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -555,7 +555,7 @@ public String getUniqueServiceName() {
     @Override
     @Parameter(excluded = true)
     public String getPrefix() {
-        return Constants.DUBBO + ".reference." + interfaceName;
+        return Constants.DUBBO + ".reference";
     }
 
 }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -898,6 +898,6 @@ public String getUniqueServiceName() {
     @Override
     @Parameter(excluded = true)
     public String getPrefix() {
-        return Constants.DUBBO + ".service." + interfaceName;
+        return Constants.DUBBO + ".service";
     }
 }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ConfigCenterBean.java
Patch:
@@ -46,7 +46,7 @@ public class ConfigCenterBean extends ConfigCenterConfig implements Initializing
 
     private transient ApplicationContext applicationContext;
 
-    private boolean auto = false;
+    private Boolean auto = false;
 
     @Override
     public void setApplicationContext(ApplicationContext applicationContext) {

File: dubbo-configcenter/dubbo-configcenter-api/src/main/java/org/apache/dubbo/configcenter/ConfigurationUtils.java
Patch:
@@ -65,7 +65,7 @@ public static CompositeConfiguration getRuntimeCompositeConf(URL url, String met
 
     /**
      * If user opens DynamicConfig, the extension instance must has been created during the initialization of
-     * ConfigCenterConfig with the right extension type user specified. If no DynamicConfig presents,
+     * ConfigCenterConfig with the right extension type user specifies. If no DynamicConfig presents,
      * NopDynamicConfiguration will be used.
      */
     public static DynamicConfiguration getDynamicConfiguration() {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -241,7 +241,8 @@ protected List<URL> loadRegistries(boolean provider) {
         checkRegistry();
         List<URL> registryList = new ArrayList<URL>();
         if (registries != null && !registries.isEmpty()) {
-            Map<String, String> registryDataConfigurationMap = this.registryDataConfig.transferToMap();
+            Map<String, String> registryDataConfigurationMap = new HashMap<>(4);
+            appendParameters(registryDataConfigurationMap, registryDataConfig);
             for (RegistryConfig config : registries) {
                 String address = config.getAddress();
                 if (address == null || address.length() == 0) {

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/store/test/JTestMetadataReport4Test.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.metadata.identifier.ConsumerMetadataIdentifier;
+import org.apache.dubbo.metadata.identifier.MetadataIdentifier;
 import org.apache.dubbo.metadata.identifier.ProviderMetadataIdentifier;
 import org.apache.dubbo.metadata.support.AbstractMetadataReport;
 import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
@@ -51,7 +52,7 @@ private static String getProtocol(URL url) {
 
     @Override
     protected void doStoreProviderMetadata(ProviderMetadataIdentifier providerMetadataIdentifier, String serviceDefinitions) {
-        store.put(providerMetadataIdentifier.getIdentifierKey(), serviceDefinitions);
+        store.put(providerMetadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.UNIQUE_KEY), serviceDefinitions);
     }
 
     @Override

File: dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/main/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReport.java
Patch:
@@ -89,7 +89,7 @@ private void storeMetadata(MetadataIdentifier metadataIdentifier, String v) {
     }
 
     String getNodePath(MetadataIdentifier metadataIdentifier) {
-        return toRootDir() + metadataIdentifier.getFilePathKey() + Constants.PATH_SEPARATOR + METADATA_NODE_NAME;
+        return toRootDir() + metadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.PATH) + Constants.PATH_SEPARATOR + METADATA_NODE_NAME;
     }
 
 

File: dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/test/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportTest.java
Patch:
@@ -44,7 +44,7 @@ public void tearDown() throws Exception {
     }
 
     private void deletePath(MetadataIdentifier metadataIdentifier, ZookeeperMetadataReport zookeeperMetadataReport) {
-        String category = zookeeperMetadataReport.toRootDir() + metadataIdentifier.getFilePathKey();
+        String category = zookeeperMetadataReport.toRootDir() + metadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.PATH);
         zookeeperMetadataReport.deletePath(category);
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -505,8 +505,6 @@ && isPrimitive(method.getReturnType())) {
                     }
                 }
             } catch (Exception e) {
-                System.out.println(this.getClass().getName());
-                System.out.println(method.getName());
                 throw new IllegalStateException(e.getMessage(), e);
             }
         }

File: dubbo-configcenter/dubbo-configcenter-apollo/src/main/java/org/apache/dubbo/configcenter/support/apollo/ApolloDynamicConfiguration.java
Patch:
@@ -56,8 +56,6 @@ public void init() {
         /**
          * Instead of using Dubbo's configuration, I would suggest use the original configuration method Apollo provides.
          */
-//        String configEnv = env.getCompositeConf().getString(ENV_KEY);
-//        String configCluster = env.getCompositeConf().getString(CLUSTER_KEY);
         String configEnv = url.getParameter(Constants.CONFIG_ENV_KEY);
         String configAddr = url.getBackupAddress();
         String configCluster = url.getParameter(Constants.CONFIG_CLUSTER_KEY);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java
Patch:
@@ -135,7 +135,8 @@ private static BeanDefinition parse(Element element, ParserContext parserContext
                     && Modifier.isPublic(setter.getModifiers())
                     && setter.getParameterTypes().length == 1) {
                 Class<?> type = setter.getParameterTypes()[0];
-                String property = StringUtils.camelToSplitName(name.substring(3, 4).toLowerCase() + name.substring(4), "-");
+                String propertyName = name.substring(3, 4).toLowerCase() + name.substring(4);
+                String property = StringUtils.camelToSplitName(propertyName, "-");
                 props.add(property);
                 Method getter = null;
                 try {
@@ -223,7 +224,7 @@ private static BeanDefinition parse(Element element, ParserContext parserContext
                                     }
                                     reference = new RuntimeBeanReference(value);
                                 }
-                                beanDefinition.getPropertyValues().addPropertyValue(property, reference);
+                                beanDefinition.getPropertyValues().addPropertyValue(propertyName, reference);
                             }
                         }
                     }

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/integration/MetadataReportService.java
Patch:
@@ -97,7 +97,7 @@ public void publishConsumer(URL consumerURL) throws RpcException {
         consumerURL = consumerURL.removeParameters(Constants.PID_KEY, Constants.TIMESTAMP_KEY, Constants.BIND_IP_KEY, Constants.BIND_PORT_KEY, Constants.TIMESTAMP_KEY);
         metadataReport.storeConsumerMetadata(new ConsumerMetadataIdentifier(consumerURL.getServiceInterface(),
                 consumerURL.getParameter(Constants.VERSION_KEY), consumerURL.getParameter(Constants.GROUP_KEY),
-                consumerURL.getParameter(Constants.APPLICATION_KEY)), consumerURL.toParameterString());
+                consumerURL.getParameter(Constants.APPLICATION_KEY)), consumerURL.getParameters());
     }
 
 }

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/store/MetadataReport.java
Patch:
@@ -21,6 +21,8 @@
 import org.apache.dubbo.metadata.identifier.ConsumerMetadataIdentifier;
 import org.apache.dubbo.metadata.identifier.ProviderMetadataIdentifier;
 
+import java.util.Map;
+
 /**
  */
 public interface MetadataReport {
@@ -30,6 +32,6 @@ public interface MetadataReport {
 
     void storeProviderMetadata(ProviderMetadataIdentifier providerMetadataIdentifier, FullServiceDefinition serviceDefinition);
 
-    void storeConsumerMetadata(ConsumerMetadataIdentifier consumerMetadataIdentifier, String serviceParameterString);
+    void storeConsumerMetadata(ConsumerMetadataIdentifier consumerMetadataIdentifier, Map<String,String> serviceParameterMap);
 
 }

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/support/AbstractMetadataReportFactoryTest.java
Patch:
@@ -29,8 +29,8 @@ public void storeProviderMetadata(ProviderMetadataIdentifier providerMetadataIde
                 }
 
                 @Override
-                public void storeConsumerMetadata(ConsumerMetadataIdentifier consumerMetadataIdentifier, String serviceParameterString) {
-                    store.put(consumerMetadataIdentifier.getIdentifierKey(), serviceParameterString);
+                public void storeConsumerMetadata(ConsumerMetadataIdentifier consumerMetadataIdentifier, Map serviceParameterMap) {
+                    store.put(consumerMetadataIdentifier.getIdentifierKey(), JSON.toJSONString(serviceParameterMap));
                 }
 
                 Map<String, String> store = new ConcurrentHashMap<>();

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java
Patch:
@@ -191,7 +191,7 @@ protected void encodeRequestData(Channel channel, ObjectOutput out, Object data,
     protected void encodeResponseData(Channel channel, ObjectOutput out, Object data, String version) throws IOException {
         Result result = (Result) data;
         // currently, the version value in Response records the version of Request
-        boolean attach = Version.isSupportResponseAttatchment(version);
+        boolean attach = Version.isSupportResponseAttachment(version);
         Throwable th = result.getException();
         if (th == null) {
             Object ret = result.getValue();

File: dubbo-common/src/main/java/org/apache/dubbo/common/URL.java
Patch:
@@ -118,7 +118,7 @@ public URL(String protocol, String host, int port) {
         this(protocol, null, null, host, port, null, (Map<String, String>) null);
     }
 
-    public URL(String protocol, String host, int port, String[] pairs) { // varargs ... confilict with the following path argument, use array instead.
+    public URL(String protocol, String host, int port, String[] pairs) { // varargs ... conflict with the following path argument, use array instead.
         this(protocol, null, null, host, port, null, CollectionUtils.toStringMap(pairs));
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -202,7 +202,7 @@ protected List<URL> loadRegistries(boolean provider) {
         checkRegistry();
         List<URL> registryList = new ArrayList<URL>();
         if (registries != null && !registries.isEmpty()) {
-            Map<String, String> registryDataConfigurationMap = this.registryDataConfig.transferMap();
+            Map<String, String> registryDataConfigurationMap = this.registryDataConfig.transferToMap();
             for (RegistryConfig config : registries) {
                 String address = config.getAddress();
                 if (address == null || address.length() == 0) {
@@ -227,7 +227,8 @@ protected List<URL> loadRegistries(boolean provider) {
                     for (URL url : urls) {
                         url = url.addParameter(Constants.REGISTRY_KEY, url.getProtocol());
                         url = url.setProtocol(Constants.REGISTRY_PROTOCOL);
-                        url.addParameters(registryDataConfigurationMap);
+                        // add parameter
+                        url = url.addParametersIfAbsent(registryDataConfigurationMap);
                         if ((provider && url.getParameter(Constants.REGISTER_KEY, true))
                                 || (!provider && url.getParameter(Constants.SUBSCRIBE_KEY, true))) {
                             registryList.add(url);

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryDataConfig.java
Patch:
@@ -33,7 +33,7 @@ public class RegistryDataConfig extends AbstractConfig {
     private boolean simpleConsumerUrl;
     private String extraConsumerUrlParamKeys;
 
-    public Map<String, String> transferMap() {
+    public Map<String, String> transferToMap() {
         Map<String, String> map = new HashMap<String, String>(4);
         if (simpleProviderUrl) {
             map.put(Constants.SIMPLE_PROVIDER_URL_KEY, Boolean.TRUE.toString());

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
+import org.apache.dubbo.config.RegistryDataConfig;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
 import org.springframework.context.annotation.Configuration;
 
@@ -58,6 +59,7 @@ public class DubboConfigConfiguration {
             @EnableDubboConfigBinding(prefix = "dubbo.provider", type = ProviderConfig.class),
             @EnableDubboConfigBinding(prefix = "dubbo.consumer", type = ConsumerConfig.class),
             @EnableDubboConfigBinding(prefix = "dubbo.configcenter", type = ConfigCenterBean.class),
+            @EnableDubboConfigBinding(prefix = "dubbo.registrydata", type = RegistryDataConfig.class),
             @EnableDubboConfigBinding(prefix = "dubbo.metadatareport", type = MetadataReportConfig.class)
     })
     public static class Single {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeClient.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.timer.HashedWheelTimer;
+import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.Client;
 import org.apache.dubbo.remoting.RemotingException;
@@ -61,7 +62,8 @@ public HeaderExchangeClient(Client client, boolean needHeartbeat) {
 
         if (needHeartbeat) {
             long tickDuration = calculateLeastDuration(heartbeat);
-            heartbeatTimer = new HashedWheelTimer(tickDuration, TimeUnit.MILLISECONDS, Constants.TICKS_PER_WHEEL);
+            heartbeatTimer = new HashedWheelTimer(new NamedThreadFactory("dubbo-client-heartbeat", true), tickDuration,
+                    TimeUnit.MILLISECONDS, Constants.TICKS_PER_WHEEL);
             startHeartbeatTimer();
         }
     }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeServer.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.common.timer.HashedWheelTimer;
+import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.ChannelHandler;
 import org.apache.dubbo.remoting.RemotingException;
@@ -260,7 +261,8 @@ private long calculateLeastDuration(int time) {
 
     private void startHeartbeatTimer() {
         long tickDuration = calculateLeastDuration(heartbeat);
-        heartbeatTimer = new HashedWheelTimer(tickDuration, TimeUnit.MILLISECONDS, Constants.TICKS_PER_WHEEL);
+        heartbeatTimer = new HashedWheelTimer(new NamedThreadFactory("dubbo-server-heartbeat", true), tickDuration,
+                TimeUnit.MILLISECONDS, Constants.TICKS_PER_WHEEL);
 
         AbstractTimerTask.ChannelProvider cp = () -> unmodifiableCollection(HeaderExchangeServer.this.getChannels());
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java
Patch:
@@ -57,7 +57,7 @@ public class TagRouter extends AbstractRouter implements Comparable<Router>, Con
     private TagRouterRule tagRouterRule;
     private String application;
 
-    private AtomicBoolean isInited;
+    private AtomicBoolean isInited = new AtomicBoolean(false);
 
     public TagRouter(URL url) {
         this(ExtensionLoader.getExtensionLoader(DynamicConfigurationFactory.class).getAdaptiveExtension().getDynamicConfiguration(url), url);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dubbo.config.AbstractConfig;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ConsumerConfig;
+import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.ModuleConfig;
 import org.apache.dubbo.config.MonitorConfig;
 import org.apache.dubbo.config.ProtocolConfig;
@@ -56,7 +57,8 @@ public class DubboConfigConfiguration {
             @EnableDubboConfigBinding(prefix = "dubbo.monitor", type = MonitorConfig.class),
             @EnableDubboConfigBinding(prefix = "dubbo.provider", type = ProviderConfig.class),
             @EnableDubboConfigBinding(prefix = "dubbo.consumer", type = ConsumerConfig.class),
-            @EnableDubboConfigBinding(prefix = "dubbo.configcenter", type = ConfigCenterBean.class)
+            @EnableDubboConfigBinding(prefix = "dubbo.configcenter", type = ConfigCenterBean.class),
+            @EnableDubboConfigBinding(prefix = "dubbo.metadatareport", type = MetadataReportConfig.class)
     })
     public static class Single {
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/parser/ConfigParser.java
Patch:
@@ -164,13 +164,15 @@ private static String appendService(String serviceKey) {
         if (i > 0) {
             sb.append("group=");
             sb.append(interfaceName.substring(0, i));
+            sb.append("&");
 
             interfaceName = interfaceName.substring(i + 1);
         }
         int j = interfaceName.indexOf(":");
         if (j > 0) {
             sb.append("version=");
             sb.append(interfaceName.substring(j + 1));
+            sb.append("&");
             interfaceName = interfaceName.substring(0, j);
         }
         sb.insert(0, interfaceName + "?");

File: dubbo-governance/dubbo-governance-api/src/main/java/org/apache/dubbo/governance/AbstractDynamicConfiguration.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dubbo.governance;
 
-import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.config.AbstractConfiguration;
 
@@ -46,7 +45,7 @@ public void addListener(String key, ConfigurationListener listener) {
 
     @Override
     public String getConfig(String key) {
-        return getConfig(key, url.getParameter(Constants.CONFIG_GROUP_KEY, DEFAULT_GROUP), null);
+        return getConfig(key, null, null);
     }
 
     @Override
@@ -56,7 +55,7 @@ public String getConfig(String key, String group) {
 
     @Override
     public String getConfig(String key, ConfigurationListener listener) {
-        return getConfig(key, url.getParameter(Constants.CONFIG_GROUP_KEY, DEFAULT_GROUP), listener);
+        return getConfig(key, null, listener);
     }
 
     @Override

File: dubbo-governance/dubbo-governance-apollo/src/main/java/org/apache/dubbo/governance/support/apollo/ApolloDynamicConfiguration.java
Patch:
@@ -97,7 +97,7 @@ public void init() {
      */
     @Override
     protected String getInternalProperty(String key, String group, long timeout) {
-        if (DEFAULT_GROUP.equals(group)) {
+        if (StringUtils.isNotEmpty(group) && !url.getParameter(Constants.CONFIG_GROUP_KEY, DEFAULT_GROUP).equals(group)) {
             Config config = ConfigService.getConfig(group);
             if (config != null) {
                 return config.getProperty(key, null);

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java
Patch:
@@ -387,7 +387,7 @@ private AbstractBeanDefinition buildServiceBeanDefinition(Service service, Class
 
         MutablePropertyValues propertyValues = beanDefinition.getPropertyValues();
 
-        String[] ignoreAttributeNames = of("provider", "monitor", "application", "module", "registry", "protocol", "interface");
+        String[] ignoreAttributeNames = of("provider", "monitor", "application", "module", "registry", "protocol", "interface", "interfaceName");
 
         propertyValues.addPropertyValues(new AnnotationPropertyValuesAdapter(service, environment, ignoreAttributeNames));
 

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/HelloServiceImpl.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @since 2.5.9
  */
-@Service
+@Service(interfaceName = "org.apache.dubbo.config.spring.api.HelloService")
 public class HelloServiceImpl implements HelloService {
 
     @Override

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -504,7 +504,8 @@ public String toString() {
                 try {
                     String name = method.getName();
                     if ((name.startsWith("get") || name.startsWith("is"))
-                            && !"getClass".equals(name) && !"get".equals(name) && !"is".equals(name)
+                            && !"get".equals(name) && !"is".equals(name)
+                            && !"getClass".equals(name) && !"getObject".equals(name)
                             && Modifier.isPublic(method.getModifiers())
                             && method.getParameterTypes().length == 0
                             && isPrimitive(method.getReturnType())) {

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyServerHandler.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
- * NettyClientHandler
+ * NettyServerHandler
  */
 @io.netty.channel.ChannelHandler.Sharable
 public class NettyServerHandler extends ChannelDuplexHandler {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Patch:
@@ -526,9 +526,9 @@ public void refresh() {
         try {
             Configuration configuration = ConfigConverter.toConfiguration(this);
             CompositeConfiguration compositeConfiguration = Environment.getInstance().getStartupCompositeConf(getPrefix(), getId());
-            int index = 1;
-            if (Environment.getInstance().isConfigCenterFirst()) {
-                index = 2;
+            int index = 2;
+            if (!Environment.getInstance().isConfigCenterFirst()) {
+                index = 1;
             }
             compositeConfiguration.addConfiguration(index, configuration);
             // loop methods, get override value and set the new value back to method

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -408,7 +408,7 @@ private T createProxy(Map<String, String> map) {
          * ServiceData Store
          */
         MetadataReportService metadataReportService = null;
-        if ((metadataReportService = getMetadataReportService()) != null){
+        if ((metadataReportService = getMetadataReportService()) != null) {
             URL consumerURL = new URL(Constants.CONSUMER_PROTOCOL, map.remove(Constants.REGISTER_IP_KEY), 0, map.get(Constants.INTERFACE_KEY), map);
             metadataReportService.publishConsumer(consumerURL);
         }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java
Patch:
@@ -534,7 +534,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r
                  * ServiceData Store
                  */
                 MetadataReportService metadataReportService = null;
-                if ((metadataReportService = getMetadataReportService()) != null){
+                if ((metadataReportService = getMetadataReportService()) != null) {
                     metadataReportService.publishProvider(url);
                 }
             }

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ConfigConverter.java
Patch:
@@ -31,6 +31,7 @@ public class ConfigConverter {
      * @return
      */
     public static Configuration toConfiguration(AbstractConfig config) {
+        // FIXME does not need to pass prefix and id to Configuration? because keys generated in getMetadata() did not count prefix in.
         InmemoryConfiguration configuration = new InmemoryConfiguration(config.getPrefix(), config.getId());
         configuration.addProperties(config.getMetaData());
         return configuration;

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java
Patch:
@@ -153,7 +153,7 @@ public void afterPropertiesSet() throws Exception {
             if (metadataReportConfigMap != null && metadataReportConfigMap.size() == 1) {
                 // first elements
                 super.setMetadataReportConfig(metadataReportConfigMap.values().iterator().next());
-            } else if(metadataReportConfigMap != null && metadataReportConfigMap.size() > 1){
+            } else if (metadataReportConfigMap != null && metadataReportConfigMap.size() > 1) {
                 throw new IllegalStateException("Multiple MetadataReport configs: " + metadataReportConfigMap);
             }
         }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java
Patch:
@@ -17,13 +17,13 @@
 package org.apache.dubbo.config.spring;
 
 import org.apache.dubbo.config.ApplicationConfig;
+import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.ModuleConfig;
 import org.apache.dubbo.config.MonitorConfig;
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.ServiceConfig;
-import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.annotation.Service;
 import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;
 import org.springframework.aop.support.AopUtils;
@@ -216,7 +216,7 @@ public void afterPropertiesSet() throws Exception {
             if (metadataReportConfigMap != null && metadataReportConfigMap.size() == 1) {
                 // 第一个元素
                 super.setMetadataReportConfig(metadataReportConfigMap.values().iterator().next());
-            } else if(metadataReportConfigMap != null && metadataReportConfigMap.size() > 1){
+            } else if (metadataReportConfigMap != null && metadataReportConfigMap.size() > 1) {
                 throw new IllegalStateException("Multiple MetadataReport configs: " + metadataReportConfigMap);
             }
         }

File: dubbo-governance/dubbo-governance-zookeeper/src/main/java/org/apache/dubbo/governance/support/archaius/ArchaiusDynamicConfiguration.java
Patch:
@@ -51,7 +51,7 @@ public void init() {
         System.setProperty(ZooKeeperConfigurationSource.ARCHAIUS_CONFIG_CHECK_KEY, url.getParameter(Constants.CONFIG_CHECK_KEY, "false"));
 
         try {
-            ZooKeeperConfigurationSource zkConfigSource = new ZooKeeperConfigurationSource();
+            ZooKeeperConfigurationSource zkConfigSource = new ZooKeeperConfigurationSource(url);
             zkConfigSource.start();
             /*if (!zkConfigSource.isConnected()) {
                 // we can check the status of config center here, and decide to fail or continue if we cannot reach the config server.

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/ServiceDefinitionBuilder.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Map;
 
 /**
- *  2015/1/27.
+ * 2015/1/27.
  */
 public final class ServiceDefinitionBuilder {
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/TypeDefinitionBuilder.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Map;
 
 /**
- *  2015/1/27.
+ * 2015/1/27.
  */
 public class TypeDefinitionBuilder {
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/ArrayTypeBuilder.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Map;
 
 /**
- *  2015/1/27.
+ * 2015/1/27.
  */
 public class ArrayTypeBuilder implements TypeBuilder {
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/CollectionTypeBuilder.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 
 /**
- *  2015/1/27.
+ * 2015/1/27.
  */
 public class CollectionTypeBuilder implements TypeBuilder {
 
@@ -55,7 +55,7 @@ public TypeDefinition build(Type type, Class<?> clazz, Map<Class<?>, TypeDefinit
         if (actualTypeArgs == null || actualTypeArgs.length != 1) {
             throw new IllegalArgumentException(MessageFormat.format(
                     "[ServiceDefinitionBuilder] Collection type [{0}] with unexpected amount of arguments [{1}]." + actualTypeArgs,
-                    new Object[] { type, actualTypeArgs }));
+                    new Object[]{type, actualTypeArgs}));
         }
 
         Type actualType = actualTypeArgs[0];

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/DefaultTypeBuilder.java
Patch:
@@ -57,7 +57,7 @@ public static TypeDefinition build(Class<?> clazz, Map<Class<?>, TypeDefinition>
             Class<?> fieldClass = field.getType();
             Type fieldType = field.getGenericType();
 
-            TypeDefinition fieldTd = TypeDefinitionBuilder.build(fieldType,fieldClass, typeCache);
+            TypeDefinition fieldTd = TypeDefinitionBuilder.build(fieldType, fieldClass, typeCache);
             td.getProperties().put(fieldName, fieldTd);
         }
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/EnumTypeBuilder.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Map;
 
 /**
- *  2015/1/27.
+ * 2015/1/27.
  */
 public class EnumTypeBuilder implements TypeBuilder {
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/MapTypeBuilder.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 
 /**
- *  2015/1/27.
+ * 2015/1/27.
  */
 public class MapTypeBuilder implements TypeBuilder {
 
@@ -53,8 +53,8 @@ public TypeDefinition build(Type type, Class<?> clazz, Map<Class<?>, TypeDefinit
         Type[] actualTypeArgs = parameterizedType.getActualTypeArguments();
         if (actualTypeArgs == null || actualTypeArgs.length != 2) {
             throw new IllegalArgumentException(MessageFormat.format(
-                    "[ServiceDefinitionBuilder] Map type [{0}] with unexpected amount of arguments [{1}]." + actualTypeArgs, new Object[] {
-                            type, actualTypeArgs }));
+                    "[ServiceDefinitionBuilder] Map type [{0}] with unexpected amount of arguments [{1}]." + actualTypeArgs, new Object[]{
+                            type, actualTypeArgs}));
         }
 
         for (Type actualType : actualTypeArgs) {

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/builder/TypeBuilder.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 /**
- *  2015/1/27.
+ * 2015/1/27.
  */
 public interface TypeBuilder {
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/model/FullServiceDefinition.java
Patch:
@@ -19,11 +19,11 @@
 import java.util.Map;
 
 /**
- *  2018/10/25
+ * 2018/10/25
  */
-public class FullServiceDefinition extends ServiceDefinition{
+public class FullServiceDefinition extends ServiceDefinition {
 
-    private Map<String,String> parameters;
+    private Map<String, String> parameters;
 
     public Map<String, String> getParameters() {
         return parameters;

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/model/MethodDefinition.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 
 /**
- *  2015/1/27.
+ * 2015/1/27.
  */
 public class MethodDefinition {
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/model/ServiceDefinition.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 
 /**
- *  2015/1/27.
+ * 2015/1/27.
  */
 public class ServiceDefinition {
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/model/TypeDefinition.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Map;
 
 /**
- *  2015/1/27.
+ * 2015/1/27.
  */
 public class TypeDefinition {
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/main/java/org/apache/dubbo/metadata/definition/util/JaketConfigurationUtils.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Properties;
 
 /**
- *  2015/1/27.
+ * 2015/1/27.
  */
 public class JaketConfigurationUtils {
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/test/java/org/apache/dubbo/metadata/definition/MetadataTest.java
Patch:
@@ -29,8 +29,8 @@
 
 /**
  * TypeDefinitionBuilder
- *
- *  16/9/22.
+ * <p>
+ * 16/9/22.
  */
 public class MetadataTest {
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/test/java/org/apache/dubbo/metadata/definition/MetadataUtils.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * generate metadata
- *
+ * <p>
  * 2017-4-17 14:33:24
  */
 public class MetadataUtils {

File: dubbo-metadata-report/dubbo-metadata-definition/src/test/java/org/apache/dubbo/metadata/definition/common/ClassExtendsMap.java
Patch:
@@ -23,7 +23,8 @@ public class ClassExtendsMap extends HashMap<String, Object> {
     private static final long serialVersionUID = 5108356684263812575L;
     private ClassExtendsMap resultMap;
 
-    public ClassExtendsMap() {}
+    public ClassExtendsMap() {
+    }
 
     public ClassExtendsMap getResultMap() {
         return resultMap;

File: dubbo-metadata-report/dubbo-metadata-definition/src/test/java/org/apache/dubbo/metadata/definition/common/OuterClass.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.metadata.definition.common;
 
 /**
- *  16/9/22.
+ * 16/9/22.
  */
 public class OuterClass {
 

File: dubbo-metadata-report/dubbo-metadata-definition/src/test/java/org/apache/dubbo/metadata/definition/common/ResultWithRawCollections.java
Patch:
@@ -28,7 +28,8 @@ public class ResultWithRawCollections {
     private Map map;
     private List list;
 
-    public ResultWithRawCollections() {}
+    public ResultWithRawCollections() {
+    }
 
     public ResultWithRawCollections(Map map, List list) {
         this.map = map;

File: dubbo-metadata-report/dubbo-metadata-definition/src/test/java/org/apache/dubbo/metadata/definition/common/TestService.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dubbo.metadata.definition.common;
 
 /**
- *  16/9/22.
+ * 16/9/22.
  */
 public interface TestService {
     /**

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReport.java
Patch:
@@ -100,7 +100,7 @@ public AbstractMetadataReport(URL reportURL) {
         loadProperties();
         metadataReportRetry = new MetadataReportRetry(reportURL.getParameter(Constants.RETRY_TIMES_KEY, 60 * 60), reportURL.getParameter(Constants.RETRY_PERIOD_KEY, 3000));
         // cycle report the data switch
-        if(reportURL.getParameter(Constants.CYCLE_REPORT_KEY, true)){
+        if (reportURL.getParameter(Constants.CYCLE_REPORT_KEY, true)) {
             scheduler.scheduleAtFixedRate(new Runnable() {
                 @Override
                 public void run() {

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/store/test/JTestMetadataReport4Test.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.dubbo.common.logger.LoggerFactory;
 import org.apache.dubbo.metadata.identifier.ConsumerMetadataIdentifier;
 import org.apache.dubbo.metadata.identifier.ProviderMetadataIdentifier;
-import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
 import org.apache.dubbo.metadata.support.AbstractMetadataReport;
+import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/store/test/JTestMetadataReportFactory4Test.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dubbo.metadata.store.test;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
 import org.apache.dubbo.metadata.store.MetadataReport;
 import org.apache.dubbo.metadata.support.AbstractMetadataReportFactory;
+import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
 
 /**
  * ZookeeperRegistryFactory.

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/support/AbstractMetadataReportFactoryTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.apache.dubbo.metadata.support;
 
 import com.alibaba.fastjson.JSON;
+
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.NetUtils;
 import org.apache.dubbo.metadata.definition.model.FullServiceDefinition;

File: dubbo-metadata-report/dubbo-metadata-report-redis/src/main/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReport.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.dubbo.metadata.identifier.ConsumerMetadataIdentifier;
 import org.apache.dubbo.metadata.identifier.MetadataIdentifier;
 import org.apache.dubbo.metadata.identifier.ProviderMetadataIdentifier;
-import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.metadata.support.AbstractMetadataReport;
+import org.apache.dubbo.rpc.RpcException;
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.JedisPool;
 import redis.clients.jedis.JedisPoolConfig;

File: dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/main/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportFactory.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dubbo.metadata.store.zookeeper;
 
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
 import org.apache.dubbo.metadata.store.MetadataReport;
 import org.apache.dubbo.metadata.support.AbstractMetadataReportFactory;
+import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
 
 /**
  * ZookeeperRegistryFactory.

File: dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/test/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportTest.java
Patch:
@@ -10,7 +10,6 @@
 import org.apache.dubbo.metadata.identifier.MetadataIdentifier;
 import org.apache.dubbo.metadata.identifier.ProviderMetadataIdentifier;
 import org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter;
-import org.apache.dubbo.rpc.RpcException;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -218,7 +218,8 @@ public void checkAndUpdateSubConfigs() {
             }
         }
         checkApplication();
-        checkServiceStore();
+        checkMetadataReport();
+        checkRegistryDataConfig();
     }
 
     public synchronized T get() {
@@ -407,7 +408,7 @@ private T createProxy(Map<String, String> map) {
          * ServiceData Store
          */
         MetadataReportService metadataReportService = null;
-        if ((metadataReportService = getServiceStoreService()) != null){
+        if ((metadataReportService = getMetadataReportService()) != null){
             URL consumerURL = new URL(Constants.CONSUMER_PROTOCOL, map.remove(Constants.REGISTER_IP_KEY), 0, map.get(Constants.INTERFACE_KEY), map);
             metadataReportService.publishConsumer(consumerURL);
         }

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.ProviderConfig;
 import org.apache.dubbo.config.RegistryConfig;
-import org.apache.dubbo.config.ServiceStoreConfig;
 import org.apache.dubbo.config.spring.ConfigCenterBean;
 import org.apache.dubbo.config.spring.ReferenceBean;
 import org.apache.dubbo.config.spring.ServiceBean;
@@ -46,7 +45,6 @@ public void init() {
         registerBeanDefinitionParser("application", new DubboBeanDefinitionParser(ApplicationConfig.class, true));
         registerBeanDefinitionParser("module", new DubboBeanDefinitionParser(ModuleConfig.class, true));
         registerBeanDefinitionParser("registry", new DubboBeanDefinitionParser(RegistryConfig.class, true));
-        registerBeanDefinitionParser("servicestore", new DubboBeanDefinitionParser(ServiceStoreConfig.class, true));
         registerBeanDefinitionParser("configcenter", new DubboBeanDefinitionParser(ConfigCenterBean.class, true));
         registerBeanDefinitionParser("monitor", new DubboBeanDefinitionParser(MonitorConfig.class, true));
         registerBeanDefinitionParser("provider", new DubboBeanDefinitionParser(ProviderConfig.class, true));

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/store/MetadataReportFactory.java
Patch:
@@ -22,9 +22,9 @@
 
 /**
  */
-@SPI("dubbo")
+@SPI("redis")
 public interface MetadataReportFactory {
 
     @Adaptive({"protocol"})
-    MetadataReport getServiceStore(URL url);
+    MetadataReport getMetadataReport(URL url);
 }

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/store/test/JTestMetadataReportFactory4Test.java
Patch:
@@ -34,7 +34,7 @@ public void setZookeeperTransporter(ZookeeperTransporter zookeeperTransporter) {
     }
 
     @Override
-    public MetadataReport createServiceStore(URL url) {
+    public MetadataReport createMetadataReport(URL url) {
         return new JTestMetadataReport4Test(url, zookeeperTransporter);
     }
 

File: dubbo-metadata-report/dubbo-metadata-report-redis/src/main/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReportFactory.java
Patch:
@@ -28,7 +28,7 @@ public class RedisMetadataReportFactory extends AbstractMetadataReportFactory {
 
 
     @Override
-    public MetadataReport createServiceStore(URL url) {
+    public MetadataReport createMetadataReport(URL url) {
         return new RedisMetadataReport(url);
     }
 

File: dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/main/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportFactory.java
Patch:
@@ -34,7 +34,7 @@ public void setZookeeperTransporter(ZookeeperTransporter zookeeperTransporter) {
     }
 
     @Override
-    public MetadataReport createServiceStore(URL url) {
+    public MetadataReport createMetadataReport(URL url) {
         return new ZookeeperMetadataReport(url, zookeeperTransporter);
     }
 

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/integration/MetadataReportService.java
Patch:
@@ -57,9 +57,9 @@ public class MetadataReportService {
     URL metadataReportUrl;
 
     MetadataReportService(URL metadataReportURL) {
-        if (Constants.SERVICE_STORE_KEY.equals(metadataReportURL.getProtocol())) {
-            String protocol = metadataReportURL.getParameter(Constants.SERVICE_STORE_KEY, Constants.DEFAULT_DIRECTORY);
-            metadataReportURL = metadataReportURL.setProtocol(protocol).removeParameter(Constants.SERVICE_STORE_KEY);
+        if (Constants.METADATA_REPORT_KEY.equals(metadataReportURL.getProtocol())) {
+            String protocol = metadataReportURL.getParameter(Constants.METADATA_REPORT_KEY, Constants.DEFAULT_DIRECTORY);
+            metadataReportURL = metadataReportURL.setProtocol(protocol).removeParameter(Constants.METADATA_REPORT_KEY);
         }
         this.metadataReportUrl = metadataReportURL;
         metadataReport = metadataReportFactory.getMetadataReport(this.metadataReportUrl);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -55,7 +55,7 @@ public AbstractDirectory(URL url, RouterChain<T> routerChain) {
     }
 
     public AbstractDirectory(URL url, URL consumerUrl, RouterChain<T> routerChain) {
-        if (url == null)
+        if (url == null) {
             throw new IllegalArgumentException("url == null");
         }
         this.url = url;

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java
Patch:
@@ -141,7 +141,7 @@ public void testAppendParameters4() throws Exception {
 
     @Test
     public void testAppendAttributes1() throws Exception {
-        Map<Object, Object> parameters = new HashMap<Object, Object>();
+        Map<String, Object> parameters = new HashMap<String, Object>();
         AbstractConfig.appendAttributes(parameters, new AttributeConfig('l', true, (byte) 0x01), "prefix");
         TestCase.assertEquals('l', parameters.get("prefix.let"));
         TestCase.assertEquals(true, parameters.get("prefix.activate"));
@@ -150,7 +150,7 @@ public void testAppendAttributes1() throws Exception {
 
     @Test
     public void testAppendAttributes2() throws Exception {
-        Map<Object, Object> parameters = new HashMap<Object, Object>();
+        Map<String, Object> parameters = new HashMap<String, Object>();
         AbstractConfig.appendAttributes(parameters, new AttributeConfig('l', true, (byte) 0x01));
         TestCase.assertEquals('l', parameters.get("let"));
         TestCase.assertEquals(true, parameters.get("activate"));

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ProviderModel.java
Patch:
@@ -23,6 +23,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * ProviderModel which is about published services
+ */
 public class ProviderModel {
     private final String serviceName;
     private final Object serviceInstance;

File: dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/Wrapper.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dubbo.common.serialize.protobuf;
+package org.apache.dubbo.common.serialize.protostuff;
 
 /**
  * Protostuff can only serialize/deserialize POJOs, for those it can't deal with, use this Wrapper.

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/store/MetadataReportFactory.java
Patch:
@@ -22,9 +22,9 @@
 
 /**
  */
-@SPI("dubbo")
+@SPI("redis")
 public interface MetadataReportFactory {
 
     @Adaptive({"protocol"})
-    MetadataReport getServiceStore(URL url);
+    MetadataReport getMetadataReport(URL url);
 }

File: dubbo-metadata-report/dubbo-metadata-report-api/src/main/java/org/apache/dubbo/metadata/support/AbstractMetadataReportFactory.java
Patch:
@@ -52,7 +52,7 @@ public static Collection<MetadataReport> getServiceStores() {
     }
 
     @Override
-    public MetadataReport getServiceStore(URL url) {
+    public MetadataReport getMetadataReport(URL url) {
         url = url.setPath(MetadataReport.class.getName())
                 .addParameter(Constants.INTERFACE_KEY, MetadataReport.class.getName())
                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);
@@ -64,7 +64,7 @@ public MetadataReport getServiceStore(URL url) {
             if (metadataReport != null) {
                 return metadataReport;
             }
-            metadataReport = createServiceStore(url);
+            metadataReport = createMetadataReport(url);
             if (metadataReport == null) {
                 throw new IllegalStateException("Can not create servicestore " + url);
             }
@@ -76,5 +76,5 @@ public MetadataReport getServiceStore(URL url) {
         }
     }
 
-    protected abstract MetadataReport createServiceStore(URL url);
+    protected abstract MetadataReport createMetadataReport(URL url);
 }

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/integration/MetadataReportServiceTest.java
Patch:
@@ -41,7 +41,7 @@ public URL get() {
             }
         });
         Assert.assertSame(metadataReportService1, metadataReportService2);
-        Assert.assertEquals(metadataReportService1.serviceStoreUrl, url);
+        Assert.assertEquals(metadataReportService1.metadataReportUrl, url);
     }
 
     @Test

File: dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/store/test/JTestMetadataReportFactory4Test.java
Patch:
@@ -34,7 +34,7 @@ public void setZookeeperTransporter(ZookeeperTransporter zookeeperTransporter) {
     }
 
     @Override
-    public MetadataReport createServiceStore(URL url) {
+    public MetadataReport createMetadataReport(URL url) {
         return new JTestMetadataReport4Test(url, zookeeperTransporter);
     }
 

File: dubbo-metadata-report/dubbo-metadata-report-redis/src/main/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReportFactory.java
Patch:
@@ -28,7 +28,7 @@ public class RedisMetadataReportFactory extends AbstractMetadataReportFactory {
 
 
     @Override
-    public MetadataReport createServiceStore(URL url) {
+    public MetadataReport createMetadataReport(URL url) {
         return new RedisMetadataReport(url);
     }
 

File: dubbo-metadata-report/dubbo-metadata-report-redis/src/test/java/org/apache/dubbo/metadata/store/redis/RedisMetadataReportTest.java
Patch:
@@ -25,7 +25,7 @@ public void constructor() throws IOException {
         this.redisServer = new RedisServer(redisPort);
         this.redisServer.start();
         URL registryUrl = URL.valueOf("redis://localhost:" + redisPort);
-        redisServiceStore = (RedisMetadataReport) new RedisMetadataReportFactory().createServiceStore(registryUrl);
+        redisServiceStore = (RedisMetadataReport) new RedisMetadataReportFactory().createMetadataReport(registryUrl);
     }
 
     @After

File: dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/main/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportFactory.java
Patch:
@@ -34,7 +34,7 @@ public void setZookeeperTransporter(ZookeeperTransporter zookeeperTransporter) {
     }
 
     @Override
-    public MetadataReport createServiceStore(URL url) {
+    public MetadataReport createMetadataReport(URL url) {
         return new ZookeeperMetadataReport(url, zookeeperTransporter);
     }
 

File: dubbo-metadata-report/dubbo-metadata-report-zookeeper/src/test/java/org/apache/dubbo/metadata/store/zookeeper/ZookeeperMetadataReportTest.java
Patch:
@@ -29,7 +29,7 @@ public void setUp() throws Exception {
 
         zookeeperServiceStoreFactory = new ZookeeperMetadataReportFactory();
         zookeeperServiceStoreFactory.setZookeeperTransporter(new CuratorZookeeperTransporter());
-        this.zookeeperServiceStore = (ZookeeperMetadataReport) zookeeperServiceStoreFactory.createServiceStore(registryUrl);
+        this.zookeeperServiceStore = (ZookeeperMetadataReport) zookeeperServiceStoreFactory.createMetadataReport(registryUrl);
     }
 
     @After

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java
Patch:
@@ -126,10 +126,10 @@ public String toString() {
 
     @Override
     public Result invoke(Invocation inv) throws RpcException {
+        // if invoker is destroyed due to address refresh from registry, let's allow the current invoke to proceed
         if (destroyed.get()) {
-            throw new RpcException("Rpc invoker for service " + this + " on consumer " + NetUtils.getLocalHost()
-                    + " use dubbo version " + Version.getVersion()
-                    + " is DESTROYED, can not be invoked any more!");
+            logger.warn("Invoker for service " + this + " on consumer " + NetUtils.getLocalHost() + " is destroyed, "
+                    + ", dubbo version is " + Version.getVersion() + ", this invoker should not be used any longer");
         }
         RpcInvocation invocation = (RpcInvocation) inv;
         invocation.setInvoker(this);

File: dubbo-governance/dubbo-governance-zookeeper/src/main/java/org/apache/dubbo/governance/support/archaius/sources/ZooKeeperConfigurationSource.java
Patch:
@@ -49,7 +49,7 @@ public class ZooKeeperConfigurationSource implements WatchedConfigurationSource,
     public static final String ARCHAIUS_SOURCE_ADDRESS_KEY = "archaius.zk.address";
     public static final String ARCHAIUS_CONFIG_ROOT_PATH_KEY = "archaius.zk.rootpath";
     public static final String ARCHAIUS_CONFIG_CHECK_KEY = "archaius.zk.check";
-    public static final String DEFAULT_CONFIG_ROOT_PATH = "/dubbo/config";
+    public static final String DEFAULT_CONFIG_ROOT_PATH = "/dubbo";
 
     private static final Logger logger = LoggerFactory.getLogger(ZooKeeperConfigurationSource.class);
     private Executor executor = Executors.newFixedThreadPool(1);

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/DataSourceStatusCheckerTest.java
Patch:
@@ -49,14 +49,14 @@ public class DataSourceStatusCheckerTest {
 
     @Before
     public void setUp() throws Exception {
+        SpringExtensionFactory.clearContexts();
         initMocks(this);
         this.dataSourceStatusChecker = new DataSourceStatusChecker();
         new ServiceBean<Object>().setApplicationContext(applicationContext);
     }
 
     @After
     public void tearDown() throws Exception {
-        SpringExtensionFactory.clearContexts();
         Mockito.reset(applicationContext);
     }
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInputTest.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.dubbo.common.serialize.fastjson;
 
-import org.apache.dubbo.common.serialize.fastjson.model.Person;
 import com.alibaba.fastjson.JSONObject;
+import org.apache.dubbo.common.serialize.model.Person;
 import org.junit.Test;
 
 import java.io.ByteArrayInputStream;

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/fastjson/FastJsonSerializationTest.java
Patch:
@@ -18,9 +18,6 @@
 
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
-import org.apache.dubbo.common.serialize.fastjson.FastJsonObjectInput;
-import org.apache.dubbo.common.serialize.fastjson.FastJsonObjectOutput;
-import org.apache.dubbo.common.serialize.fastjson.FastJsonSerialization;
 import org.hamcrest.Matchers;
 import org.junit.Before;
 import org.junit.Test;

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/fst/FstObjectInputTest.java
Patch:
@@ -16,15 +16,14 @@
  */
 package org.apache.dubbo.common.serialize.fst;
 
-import org.apache.dubbo.common.serialize.fst.model.AnimalEnum;
-import org.apache.dubbo.common.serialize.fst.model.FullAddress;
+import org.apache.dubbo.common.serialize.model.person.FullAddress;
 import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
 
 public class FstObjectInputTest {
     private FstObjectInput fstObjectInput;

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/fst/FstObjectOutputTest.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.dubbo.common.serialize.fst;
 
-import org.apache.dubbo.common.serialize.fst.model.AnimalEnum;
-import org.apache.dubbo.common.serialize.fst.model.FullAddress;
+import org.apache.dubbo.common.serialize.model.AnimalEnum;
+import org.apache.dubbo.common.serialize.model.person.FullAddress;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -27,7 +27,7 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.nullValue;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
 
 public class FstObjectOutputTest {
     private FstObjectOutput fstObjectOutput;

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/hessian2/Hessian2SerializationTest.java
Patch:
@@ -14,12 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.serialize.serialization;
+package org.apache.dubbo.common.serialize.hessian2;
 
 import org.apache.dubbo.common.serialize.ObjectInput;
 import org.apache.dubbo.common.serialize.ObjectOutput;
-import org.apache.dubbo.common.serialize.hessian2.Hessian2Serialization;
-
+import org.apache.dubbo.common.serialize.base.AbstractSerializationPersonFailTest;
 import org.junit.Ignore;
 import org.junit.Test;
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/jdk/CompactedJavaSerializationTest.java
Patch:
@@ -14,9 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.serialize.serialization;
+package org.apache.dubbo.common.serialize.jdk;
 
 
+import org.apache.dubbo.common.serialize.base.AbstractSerializationPersonFailTest;
 import org.apache.dubbo.common.serialize.java.CompactedJavaSerialization;
 
 public class CompactedJavaSerializationTest extends AbstractSerializationPersonFailTest {

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/jdk/JavaSerializationTest.java
Patch:
@@ -14,9 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.serialize.serialization;
+package org.apache.dubbo.common.serialize.jdk;
 
 
+import org.apache.dubbo.common.serialize.base.AbstractSerializationPersonFailTest;
 import org.apache.dubbo.common.serialize.java.JavaSerialization;
 
 public class JavaSerializationTest extends AbstractSerializationPersonFailTest {

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/jdk/NativeJavaSerializationTest.java
Patch:
@@ -14,8 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.serialize.serialization;
+package org.apache.dubbo.common.serialize.jdk;
 
+import org.apache.dubbo.common.serialize.base.AbstractSerializationPersonFailTest;
 import org.apache.dubbo.common.serialize.nativejava.NativeJavaSerialization;
 
 public class NativeJavaSerializationTest extends AbstractSerializationPersonFailTest {

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/kryo/KyroSerializationTest.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.serialize.serialization;
+package org.apache.dubbo.common.serialize.kryo;
 
-import org.apache.dubbo.common.serialize.kryo.KryoSerialization;
+import org.apache.dubbo.common.serialize.base.AbstractSerializationTest;
 
 public class KyroSerializationTest extends AbstractSerializationTest {
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/kryo/ReflectionUtilsTest.java
Patch:
@@ -14,10 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.serialize.serialization;
+package org.apache.dubbo.common.serialize.kryo;
 
 import org.apache.dubbo.common.serialize.kryo.utils.ReflectionUtils;
-
 import org.junit.Test;
 
 import static org.junit.Assert.assertFalse;

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/AnimalEnum.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model;
+package org.apache.dubbo.common.serialize.model;
 
 public enum AnimalEnum {
     dog, cat, rat, cow, bull, horse;

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/BizException.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model;
+package org.apache.dubbo.common.serialize.model;
 
 public class BizException extends RuntimeException {
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/BizExceptionNoDefaultConstructor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model;
+package org.apache.dubbo.common.serialize.model;
 
 public class BizExceptionNoDefaultConstructor extends RuntimeException {
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/Person.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model;
+package org.apache.dubbo.common.serialize.model;
 
 import java.util.Arrays;
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/SerializablePerson.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model;
+package org.apache.dubbo.common.serialize.model;
 
 import java.io.Serializable;
 import java.util.Arrays;

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/media/Image.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model.media;
+package org.apache.dubbo.common.serialize.model.media;
 
 
 public class Image implements java.io.Serializable {

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/media/Media.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model.media;
+package org.apache.dubbo.common.serialize.model.media;
 
 import java.util.List;
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/media/MediaContent.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model.media;
+package org.apache.dubbo.common.serialize.model.media;
 
 import java.util.List;
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/person/BigPerson.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model.person;
+package org.apache.dubbo.common.serialize.model.person;
 
 import java.io.Serializable;
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/person/FullAddress.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model.person;
+package org.apache.dubbo.common.serialize.model.person;
 
 import java.io.Serializable;
 

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/person/PersonInfo.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model.person;
+package org.apache.dubbo.common.serialize.model.person;
 
 import java.io.Serializable;
 import java.util.List;

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/person/PersonStatus.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model.person;
+package org.apache.dubbo.common.serialize.model.person;
 
 public enum PersonStatus {
     ENABLED,

File: dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/model/person/Phone.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dubbo.common.model.person;
+package org.apache.dubbo.common.serialize.model.person;
 
 import java.io.Serializable;
 

File: dubbo-servicedata/dubbo-servicedata-api/src/main/java/org/apache/dubbo/servicedata/metadata/MethodDescriptor.java
Patch:
@@ -1,7 +1,6 @@
 package org.apache.dubbo.servicedata.metadata;
 
 import java.util.Arrays;
-import java.util.Map;
 import java.util.Objects;
 
 /**

File: dubbo-servicedata/dubbo-servicedata-api/src/main/java/org/apache/dubbo/servicedata/metadata/TypeDescriptor.java
Patch:
@@ -1,7 +1,6 @@
 package org.apache.dubbo.servicedata.metadata;
 
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 

File: dubbo-servicedata/dubbo-servicedata-api/src/main/java/org/apache/dubbo/servicedata/metadata/builder/ServiceDescriptorBuilder.java
Patch:
@@ -9,7 +9,6 @@
 import java.net.URL;
 import java.security.CodeSource;
 import java.security.ProtectionDomain;
-import java.util.List;
 
 /**
  * @author cvictory ON 2018/9/18

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Offline.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.dubbo.registry.support.ProviderConsumerRegTable;
 import org.apache.dubbo.registry.support.ProviderInvokerWrapper;
 
-import java.util.List;
+import java.util.Collection;
 import java.util.Set;
 
 @Cmd(name = "offline", summary = "offline dubbo", example = {
@@ -49,7 +49,7 @@ public String execute(CommandContext commandContext, String[] args) {
         }
         boolean hasService = false;
 
-        List<ProviderModel> providerModelList = ApplicationModel.allProviderModels();
+        Collection<ProviderModel> providerModelList = ApplicationModel.allProviderModels();
         for (ProviderModel providerModel : providerModelList) {
             if (providerModel.getServiceName().matches(servicePattern)) {
                 hasService = true;

File: dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Online.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.dubbo.registry.support.ProviderConsumerRegTable;
 import org.apache.dubbo.registry.support.ProviderInvokerWrapper;
 
-import java.util.List;
+import java.util.Collection;
 import java.util.Set;
 
 @Cmd(name = "online", summary = "online dubbo", example = {
@@ -50,7 +50,7 @@ public String execute(CommandContext commandContext, String[] args) {
 
         boolean hasService = false;
 
-        List<ProviderModel> providerModelList = ApplicationModel.allProviderModels();
+        Collection<ProviderModel> providerModelList = ApplicationModel.allProviderModels();
         for (ProviderModel providerModel : providerModelList) {
             if (providerModel.getServiceName().matches(servicePattern)) {
                 hasService = true;

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java
Patch:
@@ -276,7 +276,7 @@ protected void connect() throws RemotingException {
             if (!isConnected()) {
                 throw new RemotingException(this, "Failed connect to server " + getRemoteAddress() + " from " + getClass().getSimpleName() + " "
                         + NetUtils.getLocalHost() + " using dubbo version " + Version.getVersion()
-                        + ", cause: Connect wait timeout: " + getTimeout() + "ms.");
+                        + ", cause: Connect wait timeout: " + getConnectTimeout() + "ms.");
             } else {
                 if (logger.isInfoEnabled()) {
                     logger.info("Successed connect to server " + getRemoteAddress() + " from " + getClass().getSimpleName() + " "

File: dubbo-remoting/dubbo-remoting-grizzly/src/main/java/org/apache/dubbo/remoting/transport/grizzly/GrizzlyClient.java
Patch:
@@ -66,7 +66,7 @@ protected void doOpen() throws Throwable {
                 .setMaxPoolSize(Integer.MAX_VALUE)
                 .setKeepAliveTime(60L, TimeUnit.SECONDS);
         builder.setTcpNoDelay(true).setKeepAlive(true)
-                .setConnectionTimeout(getTimeout())
+                .setConnectionTimeout(getConnectTimeout())
                 .setIOStrategy(SameThreadIOStrategy.getInstance());
         transport = builder.build();
         transport.setProcessor(filterChainBuilder.build());

File: dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaClient.java
Patch:
@@ -78,7 +78,7 @@ protected void doOpen() throws Throwable {
             cfg.setThreadModel(ThreadModel.MANUAL);
             cfg.getSessionConfig().setTcpNoDelay(true);
             cfg.getSessionConfig().setKeepAlive(true);
-            int timeout = getTimeout();
+            int timeout = getConnectTimeout();
             cfg.setConnectTimeout(timeout < 1000 ? 1 : timeout / 1000);
             // set codec.
             connector.getFilterChain().addLast("codec", new ProtocolCodecFilter(new MinaCodecAdapter(getCodec(), getUrl(), this)));
@@ -135,10 +135,10 @@ public void operationComplete(IoFuture future) {
             }
         });
         try {
-            finish.await(getTimeout(), TimeUnit.MILLISECONDS);
+            finish.await(getConnectTimeout(), TimeUnit.MILLISECONDS);
         } catch (InterruptedException e) {
             throw new RemotingException(this, "client(url: " + getUrl() + ") failed to connect to server " + getRemoteAddress() + " client-side timeout "
-                    + getTimeout() + "ms (elapsed: " + (System.currentTimeMillis() - start)
+                    + getConnectTimeout() + "ms (elapsed: " + (System.currentTimeMillis() - start)
                     + "ms) from netty client " + NetUtils.getLocalHost() + " using dubbo version "
                     + Version.getVersion() + ", cause: " + e.getMessage(), e);
         }

File: dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyClient.java
Patch:
@@ -67,7 +67,7 @@ protected void doOpen() throws Throwable {
         // @see org.jboss.netty.channel.socket.SocketChannelConfig
         bootstrap.setOption("keepAlive", true);
         bootstrap.setOption("tcpNoDelay", true);
-        bootstrap.setOption("connectTimeoutMillis", getTimeout());
+        bootstrap.setOption("connectTimeoutMillis", getConnectTimeout());
         final NettyHandler nettyHandler = new NettyHandler(getUrl(), this);
         bootstrap.setPipelineFactory(new ChannelPipelineFactory() {
             @Override

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java
Patch:
@@ -66,10 +66,10 @@ protected void doOpen() throws Throwable {
                 //.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, getTimeout())
                 .channel(NioSocketChannel.class);
 
-        if (getTimeout() < 3000) {
+        if (getConnectTimeout() < 3000) {
             bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 3000);
         } else {
-            bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, getTimeout());
+            bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, getConnectTimeout());
         }
 
         bootstrap.handler(new ChannelInitializer() {
@@ -90,7 +90,7 @@ protected void doConnect() throws Throwable {
         long start = System.currentTimeMillis();
         ChannelFuture future = bootstrap.connect(getConnectAddress());
         try {
-            boolean ret = future.awaitUninterruptibly(3000, TimeUnit.MILLISECONDS);
+            boolean ret = future.awaitUninterruptibly(getConnectTimeout(), TimeUnit.MILLISECONDS);
 
             if (ret && future.isSuccess()) {
                 Channel newChannel = future.channel();

File: dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java
Patch:
@@ -148,7 +148,7 @@ protected <T> T doRefer(Class<T> serviceType, URL url) throws RpcException {
 
         connectionMonitor.addConnectionManager(connectionManager);
         RequestConfig requestConfig = RequestConfig.custom()
-                .setConnectTimeout(url.getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT))
+                .setConnectTimeout(url.getParameter(Constants.CONNECT_TIMEOUT_KEY, Constants.DEFAULT_CONNECT_TIMEOUT))
                 .setSocketTimeout(url.getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT))
                 .build();
 

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -85,7 +85,7 @@ public Registry getRegistry(URL url) {
         url = url.setPath(RegistryService.class.getName())
                 .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())
                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);
-        String key = url.toServiceString();
+        String key = url.toServiceStringWithoutResolving();
         // Lock the registry access process to ensure a single instance of the registry
         LOCK.lock();
         try {

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/initializer/DubboApplicationContextInitializerTest.java
Patch:
@@ -29,7 +29,7 @@ public class DubboApplicationContextInitializerTest {
     @Test
     public void testSpringContextLoaderListenerInWebXml() throws Exception {
         Tomcat tomcat = new Tomcat();
-        tomcat.setBaseDir("src/test/resources");
+        tomcat.setBaseDir("target/test-classes");
         tomcat.setPort(12345);
         StandardContext context = new StandardContext();
         context.setName("test");
@@ -49,7 +49,7 @@ public void testSpringContextLoaderListenerInWebXml() throws Exception {
     @Test
     public void testNoListenerInWebXml() throws Exception {
         Tomcat tomcat = new Tomcat();
-        tomcat.setBaseDir("src/test/resources");
+        tomcat.setBaseDir("target/test-classes");
         tomcat.setPort(12345);
         StandardContext context = new StandardContext();
         context.setName("test2");
@@ -69,7 +69,7 @@ public void testNoListenerInWebXml() throws Exception {
     @Test
     public void testMetadataComplete() throws Exception {
         Tomcat tomcat = new Tomcat();
-        tomcat.setBaseDir("src/test/resources");
+        tomcat.setBaseDir("target/test-classes");
         tomcat.setPort(12345);
         StandardContext context = new StandardContext();
         context.setName("test3");

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConfigUtils.java
Patch:
@@ -217,7 +217,8 @@ public static Properties loadProperties(String fileName, boolean allowMultiFile)
      */
     public static Properties loadProperties(String fileName, boolean allowMultiFile, boolean optional) {
         Properties properties = new Properties();
-        if (fileName.startsWith("/")) {
+        // add scene judgement in windows environment Fix 2557
+        if (fileName.startsWith("/") || fileName.matches("^[A-z]:\\\\\\S+$")) {
             try {
                 FileInputStream input = new FileInputStream(fileName);
                 try {
@@ -328,4 +329,4 @@ public static int getServerShutdownTimeout() {
         return timeout;
     }
 
-}
\ No newline at end of file
+}

File: dubbo-compatible/src/test/java/org/apache/dubbo/generic/GenericServiceTest.java
Patch:
@@ -58,7 +58,7 @@ public void testGeneric2() {
         DemoService server = new DemoServiceImpl();
         ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
         Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
-        URL url = URL.valueOf("dubbo://127.0.0.1:5342/" + DemoService.class.getName() + "?version=1.0.0&generic=true");
+        URL url = URL.valueOf("dubbo://127.0.0.1:5342/" + DemoService.class.getName() + "?version=1.0.0&generic=true$timeout=3000");
         Exporter<DemoService> exporter = protocol.export(proxyFactory.getInvoker(server, DemoService.class, url));
         Invoker<GenericService> invoker = protocol.refer(GenericService.class, url);
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ExplicitCallbackTest.java
Patch:
@@ -122,7 +122,7 @@ public String yyy(String msg) {
 
     @Test
     public void TestCallbackMultiInstans() throws Exception {
-        initOrResetUrl(2, 1000);
+        initOrResetUrl(2, 3000);
         initOrResetService();
         IDemoCallback callback = new IDemoCallback() {
             public String yyy(String msg) {
@@ -143,14 +143,13 @@ public String yyy(String msg) {
             Thread.sleep(500);
             demoProxy.unxxx2(callback);
             Assert.assertEquals(0, demoProxy.getCallbackCount());
-            System.out.println("");
 
             demoProxy.xxx2(callback2);
             Assert.assertEquals(1, demoProxy.getCallbackCount());
             Thread.sleep(500);
             demoProxy.unxxx2(callback2);
             Assert.assertEquals(0, demoProxy.getCallbackCount());
-            System.out.println("");
+
             demoProxy.xxx2(callback);
             Thread.sleep(500);
             Assert.assertEquals(1, demoProxy.getCallbackCount());

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java
Patch:
@@ -79,8 +79,9 @@ public AsyncRpcResult(CompletableFuture<Object> future, final CompletableFuture<
             });
         }
         this.valueFuture = future;
-        this.storedContext = RpcContext.getContext();
-        this.storedServerContext = RpcContext.getServerContext();
+        // employ copy of context avoid the other call may modify the context content
+        this.storedContext = RpcContext.getContext().copyOf();
+        this.storedServerContext = RpcContext.getServerContext().copyOf();
     }
 
     @Override

File: dubbo-serialization/dubbo-serialization-hessian2/src/test/java/org/apache/dubbo/common/serialize/serialization/AbstractSerializationPersonFailTest.java
Patch:
@@ -33,7 +33,7 @@
 import static org.junit.Assert.fail;
 import static org.junit.matchers.JUnitMatchers.containsString;
 
-public abstract class AbstractSerializationPersionFailTest extends AbstractSerializationTest {
+public abstract class AbstractSerializationPersonFailTest extends AbstractSerializationTest {
     @Test
     public void test_Person() throws Exception {
         try {

File: dubbo-serialization/dubbo-serialization-hessian2/src/test/java/org/apache/dubbo/common/serialize/serialization/AbstractSerializationPersonOkTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Map;
 import java.util.Set;
 
-public abstract class AbstractSerializationPersionOkTest extends AbstractSerializationTest {
+public abstract class AbstractSerializationPersonOkTest extends AbstractSerializationTest {
     @Test
     public void test_Person() throws Exception {
         assertObject(new Person());

File: dubbo-serialization/dubbo-serialization-hessian2/src/test/java/org/apache/dubbo/common/serialize/serialization/Hessian2SerializationTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
-public class Hessian2SerializationTest extends AbstractSerializationPersionFailTest {
+public class Hessian2SerializationTest extends AbstractSerializationPersonFailTest {
     {
         serialization = new Hessian2Serialization();
     }

File: dubbo-serialization/dubbo-serialization-jdk/src/test/java/org/apache/dubbo/common/serialize/serialization/AbstractSerializationPersonFailTest.java
Patch:
@@ -33,7 +33,7 @@
 import static org.junit.Assert.fail;
 import static org.junit.matchers.JUnitMatchers.containsString;
 
-public abstract class AbstractSerializationPersionFailTest extends AbstractSerializationTest {
+public abstract class AbstractSerializationPersonFailTest extends AbstractSerializationTest {
     @Test
     public void test_Person() throws Exception {
         try {

File: dubbo-serialization/dubbo-serialization-jdk/src/test/java/org/apache/dubbo/common/serialize/serialization/AbstractSerializationPersonOkTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Map;
 import java.util.Set;
 
-public abstract class AbstractSerializationPersionOkTest extends AbstractSerializationTest {
+public abstract class AbstractSerializationPersonOkTest extends AbstractSerializationTest {
     @Test
     public void test_Person() throws Exception {
         assertObject(new Person());

File: dubbo-serialization/dubbo-serialization-jdk/src/test/java/org/apache/dubbo/common/serialize/serialization/CompactedJavaSerializationTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dubbo.common.serialize.java.CompactedJavaSerialization;
 
-public class CompactedJavaSerializationTest extends AbstractSerializationPersionFailTest {
+public class CompactedJavaSerializationTest extends AbstractSerializationPersonFailTest {
     {
         serialization = new CompactedJavaSerialization();
     }

File: dubbo-serialization/dubbo-serialization-jdk/src/test/java/org/apache/dubbo/common/serialize/serialization/JavaSerializationTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dubbo.common.serialize.java.JavaSerialization;
 
-public class JavaSerializationTest extends AbstractSerializationPersionFailTest {
+public class JavaSerializationTest extends AbstractSerializationPersonFailTest {
     {
         serialization = new JavaSerialization();
     }

File: dubbo-serialization/dubbo-serialization-jdk/src/test/java/org/apache/dubbo/common/serialize/serialization/NativeJavaSerializationTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dubbo.common.serialize.nativejava.NativeJavaSerialization;
 
-public class NativeJavaSerializationTest extends AbstractSerializationPersionFailTest {
+public class NativeJavaSerializationTest extends AbstractSerializationPersonFailTest {
     {
         serialization = new NativeJavaSerialization();
     }

File: dubbo-serialization/dubbo-serialization-kryo/src/test/java/org/apache/dubbo/common/serialize/serialization/AbstractSerializationPersonFailTest.java
Patch:
@@ -33,7 +33,7 @@
 import static org.junit.Assert.fail;
 import static org.junit.matchers.JUnitMatchers.containsString;
 
-public abstract class AbstractSerializationPersionFailTest extends AbstractSerializationTest {
+public abstract class AbstractSerializationPersonFailTest extends AbstractSerializationTest {
     @Test
     public void test_Person() throws Exception {
         try {

File: dubbo-serialization/dubbo-serialization-kryo/src/test/java/org/apache/dubbo/common/serialize/serialization/AbstractSerializationPersonOkTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Map;
 import java.util.Set;
 
-public abstract class AbstractSerializationPersionOkTest extends AbstractSerializationTest {
+public abstract class AbstractSerializationPersonOkTest extends AbstractSerializationTest {
     @Test
     public void test_Person() throws Exception {
         assertObject(new Person());

File: dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/cache/CacheTest.java
Patch:
@@ -46,15 +46,15 @@ private void testCache(String type) throws Exception {
         ServiceConfig<CacheService> service = new ServiceConfig<CacheService>();
         service.setApplication(new ApplicationConfig("cache-provider"));
         service.setRegistry(new RegistryConfig("N/A"));
-        service.setProtocol(new ProtocolConfig("dubbo", 29582));
+        service.setProtocol(new ProtocolConfig("injvm"));
         service.setInterface(CacheService.class.getName());
         service.setRef(new CacheServiceImpl());
         service.export();
         try {
             ReferenceConfig<CacheService> reference = new ReferenceConfig<CacheService>();
             reference.setApplication(new ApplicationConfig("cache-consumer"));
             reference.setInterface(CacheService.class);
-            reference.setUrl("dubbo://127.0.0.1:29582?scope=remote&cache=true");
+            reference.setUrl("injvm://127.0.0.1?scope=remote&cache=true");
 
             MethodConfig method = new MethodConfig();
             method.setName("findCache");

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/ConfigTest.java
Patch:
@@ -96,7 +96,7 @@ public void testServiceClass() {
         ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(ConfigTest.class.getPackage().getName().replace('.', '/') + "/service-class.xml");
         ctx.start();
         try {
-            DemoService demoService = refer("dubbo://127.0.0.1:20887");
+            DemoService demoService = refer("dubbo://127.0.0.1:30887");
             String hello = demoService.sayName("hello");
             assertEquals("welcome:hello", hello);
         } finally {

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/ClientReconnectTest.java
Patch:
@@ -80,7 +80,7 @@ public void testReconnect() throws RemotingException, InterruptedException {
     public void testReconnectWarnLog() throws RemotingException, InterruptedException {
         int port = NetUtils.getAvailablePort();
         DubboAppender.doStart();
-        String url = "exchange://127.0.0.2:" + port + "/client.reconnect.test?check=false&client=netty3&"
+        String url = "exchange://127.0.0.1:" + port + "/client.reconnect.test?check=false&client=netty3&"
                 + Constants.RECONNECT_KEY + "=" + 1; //1ms reconnect, ensure that there is enough frequency to reconnect
         try {
             Exchangers.connect(url);

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/NettyClientToServerTest.java
Patch:
@@ -33,7 +33,7 @@ protected ExchangeServer newServer(int port, Replier<?> receiver) throws Remotin
     }
 
     protected ExchangeChannel newClient(int port) throws RemotingException {
-        return Exchangers.connect(URL.valueOf("exchange://localhost:" + port + "?client=netty3"));
+        return Exchangers.connect(URL.valueOf("exchange://localhost:" + port + "?client=netty3&timeout=3000"));
     }
 
 }
\ No newline at end of file

File: dubbo-rpc/dubbo-rpc-webservice/src/test/java/org/apache/dubbo/rpc/protocol/webservice/WebserviceProtocolTest.java
Patch:
@@ -37,15 +37,15 @@ public class WebserviceProtocolTest {
     public void testDemoProtocol() throws Exception {
         DemoService service = new DemoServiceImpl();
         protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf("webservice://127.0.0.1:9019/" + DemoService.class.getName() + "?codec=exchange")));
-        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf("webservice://127.0.0.1:9019/" + DemoService.class.getName() + "?codec=exchange")));
+        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf("webservice://127.0.0.1:9019/" + DemoService.class.getName() + "?codec=exchange&timeout=3000")));
         assertEquals(service.getSize(new String[]{"", "", ""}), 3);
     }
 
     @Test
     public void testWebserviceProtocol() throws Exception {
         DemoService service = new DemoServiceImpl();
         protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf("webservice://127.0.0.1:9019/" + DemoService.class.getName())));
-        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf("webservice://127.0.0.1:9019/" + DemoService.class.getName())));
+        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf("webservice://127.0.0.1:9019/" + DemoService.class.getName() + "?timeout=3000")));
         assertEquals(service.create(1,"kk").getName(), "kk");
         assertEquals(service.getSize(null), -1);
         assertEquals(service.getSize(new String[]{"", "", ""}), 3);

File: dubbo-config/dubbo-config-dynamic/src/main/java/org/apache/dubbo/config/dynamic/AbstractDynamicConfiguration.java
Patch:
@@ -29,7 +29,7 @@ public abstract class AbstractDynamicConfiguration<TargetConfigListener> impleme
     /**
      * One key can register multiple target listeners, but one target listener only maps to one configuration listener
      */
-    private ConcurrentMap<String, ConcurrentMap<ConfigurationListener, TargetConfigListener>> listenerToTargetListenerMap;
+    private ConcurrentMap<String, ConcurrentMap<ConfigurationListener, TargetConfigListener>> listenerToTargetListenerMap = new ConcurrentHashMap<>();
 
     public AbstractDynamicConfiguration() {
     }

File: dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/ZKTools.java
Patch:
@@ -43,7 +43,7 @@ public static void main(String[] args) throws Exception {
                 new ExponentialBackoffRetry(1000, 3));
         client.start();
 
-        testConsumerConfig();
+        testProviderConfig();
 //        testPathCache();
 //        testTreeCache();
 //        testCuratorListener();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/ChannelEventRunnable.java
Patch:
@@ -82,6 +82,7 @@ public void run() {
                     logger.warn("ChannelEventRunnable handle " + state + " operation error, channel is " + channel
                             + ", message is " + message, e);
                 }
+                break;
             case CAUGHT:
                 try {
                     handler.caught(channel, exception);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/InvokerTreeCache.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class InvokerTreeCache<T> {
 
-    TreeNode<T> tree;
+    private TreeNode<T> tree;
 
     public TreeNode buildTree() {
         tree = new TreeNode<>();
@@ -43,7 +43,7 @@ public TreeNode buildTree() {
 
     public List<Invoker<T>> getInvokers(TreeNode<T> node, URL url, Invocation invocation) {
         // We have reached the leaf node.
-        if (node.getChildren() == null || node.getChildren().size() == 0) {
+        if (node.isLeaf()) {
             return node.getInvokers();
         }
 
@@ -102,7 +102,7 @@ public List<Invoker<T>> getInvokers(TreeNode<T> node, URL url, Invocation invoca
             String forceKey = "force." + failoverNode.getConditionKey();
             if (Boolean.valueOf(invocation.getAttachment(forceKey, url.getParameter(forceKey, "false")))) {
                 /**
-                 * This may mistakely return empty list for runtime routers
+                 * This may mistakenly return empty list for runtime routers
                  * see {@link org.apache.dubbo.rpc.cluster.router.tag.TagRouter.getKey()} for the workaround.
                  */
                 return Collections.emptyList();

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java
Patch:
@@ -132,7 +132,8 @@ public <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation
             // dynamic tag group doesn't have any item about the requested app OR it's null after filtered by dynamic tag group but force=false.
             // check static tag
             result = filterInvoker(invokers, invoker -> tag.equals(invoker.getUrl().getParameter(Constants.TAG_KEY)));
-            if (CollectionUtils.isNotEmpty(result) || url.getParameter(Constants.FORCE_USE_TAG, true)) {
+            // If there's no tagged providers that can match the value in this tag. force.tag is set by default to true, which means it will not invoker any providers without a tag unless it's explicitly allowed.
+            if (CollectionUtils.isNotEmpty(result) || Boolean.valueOf(invocation.getAttachment(Constants.FORCE_USE_TAG, url.getParameter(Constants.FORCE_USE_TAG, "false")))) {
                 return result;
             }
             // FAILOVER: return all Providers without any tags.

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Router.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcException;
+import org.apache.dubbo.rpc.cluster.router.TreeNode;
 
 import java.util.List;
 import java.util.Map;
@@ -67,7 +68,7 @@ default boolean isRuntime() {
     }
 
     default String getKey() {
-        return "";
+        return TreeNode.FAILOVER_KEY;
     }
 
     default boolean isForce() {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ConfigConditionRouter.java
Patch:
@@ -174,6 +174,9 @@ private void generateAppConditions() {
 
     @Override
     public String getKey() {
+        if (isRuntime()) {
+            return super.getKey();
+        }
         return TreeNode.FAILOVER_KEY;
     }
 

File: dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java
Patch:
@@ -153,7 +153,7 @@ public void afterPropertiesSet() throws Exception {
         if (getServiceStoreConfig() == null) {
             Map<String, ServiceStoreConfig> serviceStoreConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ServiceStoreConfig.class, false, false);
             if (serviceStoreConfigMap != null && serviceStoreConfigMap.size() == 1) {
-                // 第一个元素
+                // first elements
                 super.setServiceStoreConfig(serviceStoreConfigMap.values().iterator().next());
             } else if(serviceStoreConfigMap != null && serviceStoreConfigMap.size() > 1){
                 throw new IllegalStateException("Multiple ServiceStore configs: " + serviceStoreConfigMap);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java
Patch:
@@ -64,7 +64,6 @@ protected RouterChain(URL url) {
         this.url = url;
     }
 
-
     public void addRouter(Router router) {
         this.routers.add(router);
     }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ConfigConditionRouterFactory.java
Patch:
@@ -34,6 +34,6 @@ public Router getRouter(URL url) {
 
     @Override
     public Router getRouter(DynamicConfiguration dynamicConfiguration, URL url) {
-        return new ConfigConditionRouter(dynamicConfiguration);
+        return new ConfigConditionRouter(dynamicConfiguration, url);
     }
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/model/ConditionRouterRule.java
Patch:
@@ -24,7 +24,9 @@
  *
  */
 public class ConditionRouterRule extends AbstractRouterRule {
-    private String scope;
+    public ConditionRouterRule() {
+    }
+
     private List<String> conditions;
 
     public List<String> getConditions() {

File: dubbo-config/dubbo-config-dynamic/src/main/java/org/apache/dubbo/config/dynamic/support/archaius/ArchaiusDynamicConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public ArchaiusListener(String key, ConfigurationListener listener) {
                 /**
                  * Works for any router rules:
                  * {@link Constants.ROUTERS_SUFFIX}
-                 * {@link org.apache.dubbo.rpc.cluster.router.group.TagRouter.TAGRULE_DATAID}
+                 * {@link org.apache.dubbo.rpc.cluster.router.tag.TagRouter.TAGRULE_DATAID}
                  */
                 type = ConfigType.ROUTERS;
             }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -44,7 +44,6 @@
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.cluster.Cluster;
 import org.apache.dubbo.rpc.cluster.Configurator;
-import org.apache.dubbo.rpc.cluster.RouterChain;
 import org.apache.dubbo.rpc.protocol.InvokerWrapper;
 
 import java.util.ArrayList;
@@ -358,7 +357,7 @@ private <T> Invoker<T> doRefer(Cluster cluster, Registry registry, Class<T> type
         directory.setRegistry(registry);
         directory.setProtocol(protocol);
         directory.setDynamicConfiguration(dynamicConfiguration);
-        directory.setRouterChain(RouterChain.buildChain(dynamicConfiguration, url));
+        directory.buildRouterChain(dynamicConfiguration);
         // all attributes of REFER_KEY
         Map<String, String> parameters = new HashMap<String, String>(directory.getUrl().getParameters());
         URL subscribeUrl = new URL(Constants.CONSUMER_PROTOCOL, parameters.remove(Constants.REGISTER_IP_KEY), 0, type.getName(), parameters);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/AbstractConfigurator.java
Patch:
@@ -47,8 +47,7 @@ public URL getUrl() {
 
     @Override
     public URL configure(URL url) {
-        if (configuratorUrl == null || configuratorUrl.getHost() == null
-                || url == null || url.getHost() == null) {
+        if (configuratorUrl.getHost() == null || url == null || url.getHost() == null) {
             return url;
         }
         // If override url has port, means it is a provider address. We want to control a specific provider with this override url, it may take effect on the specific provider instance or on consumers holding this provider instance.
@@ -115,7 +114,7 @@ public int compareTo(Configurator o) {
         if (ipCompare == 0) {//host is the same, sort by priority
             int i = getUrl().getParameter(Constants.PRIORITY_KEY, 0),
                     j = o.getUrl().getParameter(Constants.PRIORITY_KEY, 0);
-            return i < j ? -1 : (i == j ? 0 : 1);
+            return Integer.compare(i, j);
         } else {
             return ipCompare;
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -98,7 +98,7 @@ public void destroy() {
      * a) Firstly, select an invoker using loadbalance. If this invoker is in previously selected list, or,
      * if this invoker is unavailable, then continue step b (reselect), otherwise return the first selected invoker</br>
      * <p>
-     * b) Reslection, the validation rule for reselection: selected > available. This rule guarantees that
+     * b) Reselection, the validation rule for reselection: selected > available. This rule guarantees that
      * the selected invoker has the minimum chance to be one in the previously selected list, and also
      * guarantees this invoker is available.
      *
@@ -268,8 +268,7 @@ protected abstract Result doInvoke(Invocation invocation, List<Invoker<T>> invok
                                        LoadBalance loadbalance) throws RpcException;
 
     protected List<Invoker<T>> list(Invocation invocation) throws RpcException {
-        List<Invoker<T>> invokers = directory.list(invocation);
-        return invokers;
+        return directory.list(invocation);
     }
 
     /**

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvoker.java
Patch:
@@ -58,7 +58,7 @@ public class FailbackClusterInvoker<T> extends AbstractClusterInvoker<T> {
     private final ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(2,
             new NamedInternalThreadFactory("failback-cluster-timer", true));
 
-    private final ConcurrentMap<Invocation, AbstractClusterInvoker<?>> failed = new ConcurrentHashMap<Invocation, AbstractClusterInvoker<?>>();
+    private final ConcurrentMap<Invocation, AbstractClusterInvoker<?>> failed = new ConcurrentHashMap<>();
     private volatile ScheduledFuture<?> retryFuture;
 
     public FailbackClusterInvoker(Directory<T> directory) {
@@ -91,8 +91,7 @@ void retryFailed() {
         if (failed.size() == 0) {
             return;
         }
-        for (Map.Entry<Invocation, AbstractClusterInvoker<?>> entry : new HashMap<Invocation, AbstractClusterInvoker<?>>(
-                failed).entrySet()) {
+        for (Map.Entry<Invocation, AbstractClusterInvoker<?>> entry : new HashMap<>(failed).entrySet()) {
             Invocation invocation = entry.getKey();
             Invoker<?> invoker = entry.getValue();
             try {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvoker.java
Patch:
@@ -101,14 +101,14 @@ public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, L
                 providers.add(invoker.getUrl().getAddress());
             }
         }
-        throw new RpcException(le != null ? le.getCode() : 0, "Failed to invoke the method "
+        throw new RpcException(le.getCode(), "Failed to invoke the method "
                 + methodName + " in the service " + getInterface().getName()
                 + ". Tried " + len + " times of the providers " + providers
                 + " (" + providers.size() + "/" + copyinvokers.size()
                 + ") from the registry " + directory.getUrl().getAddress()
                 + " on the consumer " + NetUtils.getLocalHost() + " using the dubbo version "
                 + Version.getVersion() + ". Last error is: "
-                + (le != null ? le.getMessage() : ""), le != null && le.getCause() != null ? le.getCause() : le);
+                + le.getMessage(), le.getCause() != null ? le.getCause() : le);
     }
 
 }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -72,7 +72,7 @@ public List<Invoker<T>> list(Invocation invocation) throws RpcException {
 
         try {
             // Get invokers from cache, only runtime routers will be executed.
-            routerChain.route(invokers, getConsumerUrl(), invocation);
+            return routerChain.route(invokers, getConsumerUrl(), invocation);
         } catch (Throwable t) {
             logger.error("Failed to execute router: " + getUrl() + ", cause: " + t.getMessage(), t);
         }

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouter.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.cluster.Router;
+import org.apache.dubbo.rpc.cluster.router.AbstractRouter;
 import org.apache.dubbo.rpc.cluster.router.TreeNode;
 
 import java.text.ParseException;
@@ -44,7 +45,7 @@
  * ConditionRouter
  *
  */
-public class ConditionRouter implements Router, Comparable<Router> {
+public class ConditionRouter extends AbstractRouter implements Comparable<Router> {
 
     private static final Logger logger = LoggerFactory.getLogger(ConditionRouter.class);
     protected static Pattern ROUTE_PATTERN = Pattern.compile("([&!=,]*)\\s*([^&!=,\\s]+)");

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ConditionRuleParser.java
Patch:
@@ -23,7 +23,7 @@ public class ConditionRuleParser {
 
     public static ConditionRouterRule parse(String rawRule) {
         ConditionRouterRule conditionRouterRule = new ConditionRouterRule();
-        conditionRouterRule.setRuleBody("host!=10.20.153.10,10.20.153.11=>");
+        conditionRouterRule.setRuleBody("method!=sayHello => ");
         conditionRouterRule.setValid(true);
         return conditionRouterRule;
     }

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -366,6 +366,7 @@ private List<Router> toRouters(List<URL> urls) {
                 }
                 try {
                     Router router = routerFactory.getRouter(url);
+                    router.setRouterChain(routerChain);
                     if (!routers.contains(router))
                         routers.add(router);
                 } catch (Throwable t) {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -71,7 +71,7 @@ public List<Invoker<T>> list(Invocation invocation) throws RpcException {
         List<Invoker<T>> invokers = doList(invocation);
 
         try {
-            // runtime routers will be executed.
+            // Get invokers from cache, only runtime routers will be executed.
             routerChain.route(invokers, getConsumerUrl(), invocation);
         } catch (Throwable t) {
             logger.error("Failed to execute router: " + getUrl() + ", cause: " + t.getMessage(), t);

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ConditionRuleParser.java
Patch:
@@ -24,6 +24,7 @@ public class ConditionRuleParser {
     public static ConditionRouterRule parse(String rawRule) {
         ConditionRouterRule conditionRouterRule = new ConditionRouterRule();
         conditionRouterRule.setRuleBody("host!=10.20.153.10,10.20.153.11=>");
+        conditionRouterRule.setValid(true);
         return conditionRouterRule;
     }
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java
Patch:
@@ -38,7 +38,6 @@
 
 import javax.script.ScriptEngineManager;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
 import static org.mockito.BDDMockito.given;
@@ -159,8 +158,9 @@ private void initInvokers(URL url, boolean invoker1Status, boolean invoker2Statu
     }
 
     private void initDic(URL url) {
-        RouterChain routerChain = new RouterChain(Arrays.asList(routerFactory.getRouter(url)));
-        dic = new StaticDirectory<FileRouterEngineTest>(url, invokers, routerChain);
+        // FIXME dynamicConfiguration should not be null
+        RouterChain chain = RouterChain.buildChain(null);
+        dic = new StaticDirectory<FileRouterEngineTest>(url, invokers, chain);
     }
 
     static class MockClusterInvoker<T> extends AbstractClusterInvoker<T> {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/Channel.java
Patch:
@@ -21,8 +21,6 @@
 /**
  * Channel. (API/SPI, Prototype, ThreadSafe)
  *
- *
- *
  * @see org.apache.dubbo.remoting.Client
  * @see org.apache.dubbo.remoting.Server#getChannels()
  * @see org.apache.dubbo.remoting.Server#getChannel(InetSocketAddress)
@@ -73,5 +71,4 @@ public interface Channel extends Endpoint {
      * @param key key.
      */
     void removeAttribute(String key);
-
 }
\ No newline at end of file

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/ExchangeChannel.java
Patch:
@@ -57,5 +57,4 @@ public interface ExchangeChannel extends Channel {
      */
     @Override
     void close(int timeout);
-
 }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java
Patch:
@@ -146,6 +146,7 @@ public void disconnected(Channel channel) throws RemotingException {
         try {
             handler.disconnected(exchangeChannel);
         } finally {
+            DefaultFuture.closeChannel(channel);
             HeaderExchangeChannel.removeChannelIfDisconnected(channel);
         }
     }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractChannel.java
Patch:
@@ -43,5 +43,4 @@ public void send(Object message, boolean sent) throws RemotingException {
     public String toString() {
         return getLocalAddress() + " -> " + getRemoteAddress();
     }
-
 }

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvokerAvilableTest.java
Patch:
@@ -131,7 +131,6 @@ public void test_Lazy_ChannelReadOnly() throws Exception {
 
         }
         //invoke method --> init client
-
         IDemoService service = (IDemoService) proxy.getProxy(invoker);
         Assert.assertEquals("ok", service.get());
 

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/org/apache/dubbo/rpc/protocol/thrift/ThriftCodecTest.java
Patch:
@@ -38,7 +38,6 @@
 import org.apache.thrift.transport.TIOStreamTransport;
 import org.apache.thrift.transport.TTransport;
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.ByteArrayInputStream;

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -522,5 +522,4 @@ public String getScope() {
     public void setScope(String scope) {
         this.scope = scope;
     }
-
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractReferenceConfig.java
Patch:
@@ -197,5 +197,4 @@ public void setGroup(String group) {
         checkKey("group", group);
         this.group = group;
     }
-
 }

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoService.java
Patch:
@@ -57,4 +57,6 @@ public interface DemoService {
 
     NonSerialized returnNonSerialized();
 
+    long add(int a, long b);
+
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ApplicationConfig.java
Patch:
@@ -71,10 +71,13 @@ public class ApplicationConfig extends AbstractConfig {
     // directory for saving thread dump
     private String dumpDirectory;
 
+    // whether to enable qos or not
     private Boolean qosEnable;
 
+    // the qos port to listen
     private Integer qosPort;
 
+    // should we accept foreign ip or not?
     private Boolean qosAcceptForeignIp;
 
     // customized parameters

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/protocol/QosProtocolWrapperTest.java
Patch:
@@ -42,9 +42,9 @@ public class QosProtocolWrapperTest {
 
     @Before
     public void setUp() throws Exception {
-        when(url.getParameter(Constants.QOS_ENABLE, "true")).thenReturn("true");
-        when(url.getParameter(Constants.QOS_PORT, "22222")).thenReturn("12345");
-        when(url.getParameter(Constants.ACCEPT_FOREIGN_IP, "true")).thenReturn("false");
+        when(url.getParameter(Constants.QOS_ENABLE, true)).thenReturn(true);
+        when(url.getParameter(Constants.QOS_PORT, 22222)).thenReturn(12345);
+        when(url.getParameter(Constants.ACCEPT_FOREIGN_IP, true)).thenReturn(false);
         when(invoker.getUrl()).thenReturn(url);
         when(url.getProtocol()).thenReturn(Constants.REGISTRY_PROTOCOL);
     }

File: dubbo-compatible/src/main/java/com/alibaba/dubbo/config/annotation/Reference.java
Patch:
@@ -75,7 +75,7 @@
 
     String layer() default "";
 
-    int retries() default 0;
+    int retries() default 2;
 
     String loadbalance() default "";
 

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java
Patch:
@@ -164,7 +164,7 @@
      *
      * @see Constants#DEFAULT_RETRIES
      */
-    int retries() default 0;
+    int retries() default 2;
 
     /**
      * Load balance strategy, legal values include: random, roundrobin, leastactive

File: dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java
Patch:
@@ -113,7 +113,7 @@ public Map<String, String> convert(String[] source) {
         Assert.assertEquals("ondisconnect", referenceBean.getOndisconnect());
         Assert.assertEquals("owner", referenceBean.getOwner());
         Assert.assertEquals("layer", referenceBean.getLayer());
-        Assert.assertEquals(Integer.valueOf(2), referenceBean.getRetries());
+        Assert.assertEquals(Integer.valueOf(1), referenceBean.getRetries());
         Assert.assertEquals("random", referenceBean.getLoadbalance());
         Assert.assertEquals(true, referenceBean.isAsync());
         Assert.assertEquals(Integer.valueOf(1), referenceBean.getActives());
@@ -147,7 +147,7 @@ private static class TestBean {
                 check = false, init = true, lazy = true, stubevent = true,
                 reconnect = "reconnect", sticky = true, proxy = "javassist", stub = "stub",
                 cluster = "failover", connections = 1, callbacks = 1, onconnect = "onconnect",
-                ondisconnect = "ondisconnect", owner = "owner", layer = "layer", retries = 2,
+                ondisconnect = "ondisconnect", owner = "owner", layer = "layer", retries = 1,
                 loadbalance = "random", async = true, actives = 1, sent = true,
                 mock = "mock", validation = "validation", timeout = 2, cache = "cache",
                 filter = {"default", "default"}, listener = {"default", "default"}, parameters = {"key1", "value1"}, application = "application",

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -100,9 +100,9 @@ protected void setRouters(List<Router> routers) {
         // copy list
         routers = routers == null ? new ArrayList<Router>() : new ArrayList<Router>(routers);
         // append url router
-        String routerkey = url.getParameter(Constants.ROUTER_KEY);
-        if (routerkey != null && routerkey.length() > 0) {
-            RouterFactory routerFactory = ExtensionLoader.getExtensionLoader(RouterFactory.class).getExtension(routerkey);
+        String routerKey = url.getParameter(Constants.ROUTER_KEY);
+        if (routerKey != null && routerKey.length() > 0) {
+            RouterFactory routerFactory = ExtensionLoader.getExtensionLoader(RouterFactory.class).getExtension(routerKey);
             routers.add(routerFactory.getRouter(url));
         }
         // append mock invoker selector

File: dubbo-common/src/main/java/org/apache/dubbo/common/Version.java
Patch:
@@ -35,15 +35,15 @@ public final class Version {
     private static final Logger logger = LoggerFactory.getLogger(Version.class);
 
     // Dubbo RPC protocol version, for compatibility, it must not be between 2.0.10 ~ 2.6.2
-    public static final String DEFAULT_DUBBO_PROTOCOL_VERSION = "2.0.1";
+    public static final String DEFAULT_DUBBO_PROTOCOL_VERSION = "2.0.2";
     // Dubbo implementation version, usually is jar version.
     private static final String VERSION = getVersion(Version.class, "");
 
     /**
      * For protocol compatibility purpose.
      * Because {@link #isSupportResponseAttatchment} is checked for every call, int compare expect to has higher performance than string.
      */
-    private static final int LOWEST_VERSION_FOR_RESPONSE_ATTATCHMENT = 20001; // 2.0.1
+    private static final int LOWEST_VERSION_FOR_RESPONSE_ATTATCHMENT = 20002; // 2.0.2
     private static final Map<String, Integer> VERSION2INT = new HashMap<String, Integer>();
 
     static {
@@ -202,4 +202,4 @@ public static void checkDuplicate(String path, boolean failOnError) {
         }
     }
 
-}
\ No newline at end of file
+}

File: dubbo-common/src/test/java/org/apache/dubbo/common/utils/DubboAppenderTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.dubbo.common.utils;
 
-import org.apache.dubbo.common.utils.DubboAppender;
-import org.apache.dubbo.common.utils.Log;
 import org.apache.log4j.Category;
 import org.apache.log4j.Level;
 import org.apache.log4j.spi.LoggingEvent;

File: dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -170,7 +170,7 @@ public void destroy() {
                 registry.unsubscribe(getConsumerUrl(), this);
             }
         } catch (Throwable t) {
-            logger.warn("unexpeced error when unsubscribe service " + serviceKey + "from registry" + registry.getUrl(), t);
+            logger.warn("unexpected error when unsubscribe service " + serviceKey + "from registry" + registry.getUrl(), t);
         }
         super.destroy(); // must be executed after unsubscribing
         try {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -55,7 +55,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
                 .setLocalAddress(invoker.getUrl().getHost(),
                         invoker.getUrl().getPort());
 
-        // mreged from dubbox
+        // merged from dubbox
         // we may already added some attachments into RpcContext before this filter (e.g. in rest protocol)
         // TODO
         if (attachments != null) {

File: dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java
Patch:
@@ -422,6 +422,8 @@ private T createProxy(Map<String, String> map) {
             c = true; // default true
         }
         if (c && !invoker.isAvailable()) {
+            // make it possible for consumer to retry later if provider is temporarily unavailable
+            initialized = false;
             throw new IllegalStateException("Failed to check the status of the service " + interfaceName + ". No provider available for the service " + (group == null ? "" : group + "/") + interfaceName + (version == null ? "" : ":" + version) + " from the url " + invoker.getUrl() + " to the consumer " + NetUtils.getLocalHost() + " use dubbo version " + Version.getVersion());
         }
         if (logger.isInfoEnabled()) {

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvokerTest.java
Patch:
@@ -166,7 +166,7 @@ public void testNoInvoke() {
      * then we should reselect from the latest invokers before retry.
      */
     @Test
-    public void testInvokerDestoryAndReList() {
+    public void testInvokerDestroyAndReList() {
         final URL url = URL.valueOf("test://localhost/" + Demo.class.getName() + "?loadbalance=roundrobin&retries=" + retries);
         RpcException exception = new RpcException(RpcException.TIMEOUT_EXCEPTION);
         MockInvoker<Demo> invoker1 = new MockInvoker<Demo>(Demo.class, url);

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java
Patch:
@@ -135,7 +135,7 @@ public Result invoke(Invocation inv) throws RpcException {
             invocation.addAttachmentsIfAbsent(attachment);
         }
         Map<String, String> contextAttachments = RpcContext.getContext().getAttachments();
-        if (contextAttachments != null) {
+        if (contextAttachments != null && contextAttachments.size() != 0) {
             /**
              * invocation.addAttachmentsIfAbsent(context){@link RpcInvocation#addAttachmentsIfAbsent(Map)}should not be used here,
              * because the {@link RpcContext#setAttachment(String, String)} is passed in the Filter when the call is triggered

File: dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/FutureAdapter.java
Patch:
@@ -74,7 +74,7 @@ public boolean isCancelled() {
 
     @Override
     public boolean isDone() {
-        return this.isDone();
+        return super.isDone();
     }
 
     @Override

File: dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyTransporter.java
Patch:
@@ -25,7 +25,7 @@
 
 public class NettyTransporter implements Transporter {
 
-    public static final String NAME = "netty";
+    public static final String NAME = "netty3";
 
     @Override
     public Server bind(URL url, ChannelHandler listener) throws RemotingException {

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/exchange/support/header/HeartbeatHandlerTest.java
Patch:
@@ -58,7 +58,7 @@ public void after() throws Exception {
 
     @Test
     public void testServerHeartbeat() throws Exception {
-        URL serverURL = URL.valueOf("header://localhost:55555");
+        URL serverURL = URL.valueOf("header://localhost:55555?transporter=netty3");
         serverURL = serverURL.addParameter(Constants.HEARTBEAT_KEY, 1000);
         TestHeartbeatHandler handler = new TestHeartbeatHandler();
         server = Exchangers.bind(serverURL, handler);
@@ -74,7 +74,7 @@ public void testServerHeartbeat() throws Exception {
 
     @Test
     public void testHeartbeat() throws Exception {
-        URL serverURL = URL.valueOf("header://localhost:55555");
+        URL serverURL = URL.valueOf("header://localhost:55555?transporter=netty3");
         serverURL = serverURL.addParameter(Constants.HEARTBEAT_KEY, 1000);
         TestHeartbeatHandler handler = new TestHeartbeatHandler();
         server = Exchangers.bind(serverURL, handler);
@@ -91,7 +91,7 @@ public void testHeartbeat() throws Exception {
     @Test
     public void testClientHeartbeat() throws Exception {
         FakeChannelHandlers.setTestingChannelHandlers();
-        URL serverURL = URL.valueOf("header://localhost:55555");
+        URL serverURL = URL.valueOf("header://localhost:55555?transporter=netty3");
         TestHeartbeatHandler handler = new TestHeartbeatHandler();
         server = Exchangers.bind(serverURL, handler);
         System.out.println("Server bind successfully");

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/ClientReconnectTest.java
Patch:
@@ -80,7 +80,7 @@ public void testReconnect() throws RemotingException, InterruptedException {
     public void testReconnectWarnLog() throws RemotingException, InterruptedException {
         int port = NetUtils.getAvailablePort();
         DubboAppender.doStart();
-        String url = "exchange://127.0.0.2:" + port + "/client.reconnect.test?check=false&"
+        String url = "exchange://127.0.0.2:" + port + "/client.reconnect.test?check=false&client=netty3&"
                 + Constants.RECONNECT_KEY + "=" + 1; //1ms reconnect, ensure that there is enough frequency to reconnect
         try {
             Exchangers.connect(url);
@@ -97,12 +97,12 @@ public void testReconnectWarnLog() throws RemotingException, InterruptedExceptio
     }
 
     public Client startClient(int port, int reconnectPeriod) throws RemotingException {
-        final String url = "exchange://127.0.0.1:" + port + "/client.reconnect.test?check=false&" + Constants.RECONNECT_KEY + "=" + reconnectPeriod;
+        final String url = "exchange://127.0.0.1:" + port + "/client.reconnect.test?check=false&client=netty3&" + Constants.RECONNECT_KEY + "=" + reconnectPeriod;
         return Exchangers.connect(url);
     }
 
     public Server startServer(int port) throws RemotingException {
-        final String url = "exchange://127.0.0.1:" + port + "/client.reconnect.test";
+        final String url = "exchange://127.0.0.1:" + port + "/client.reconnect.test?server=netty3";
         return Exchangers.bind(url, new HandlerAdapter());
     }
 

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/ClientsTest.java
Patch:
@@ -47,7 +47,7 @@ public void testGetTransportNull() {
 
     @Test
     public void testGetTransport3() {
-        String name = "netty";
+        String name = "netty3";
         assertEquals(NettyTransporter.class, ExtensionLoader.getExtensionLoader(Transporter.class).getExtension(name).getClass());
     }
 

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/NettyClientToServerTest.java
Patch:
@@ -29,11 +29,11 @@
 public class NettyClientToServerTest extends ClientToServerTest {
 
     protected ExchangeServer newServer(int port, Replier<?> receiver) throws RemotingException {
-        return Exchangers.bind(URL.valueOf("exchange://localhost:" + port + "?server=netty"), receiver);
+        return Exchangers.bind(URL.valueOf("exchange://localhost:" + port + "?server=netty3"), receiver);
     }
 
     protected ExchangeChannel newClient(int port) throws RemotingException {
-        return Exchangers.connect(URL.valueOf("exchange://localhost:" + port + "?client=netty"));
+        return Exchangers.connect(URL.valueOf("exchange://localhost:" + port + "?client=netty3"));
     }
 
 }
\ No newline at end of file

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/org/apache/dubbo/remoting/transport/netty/NettyStringTest.java
Patch:
@@ -38,8 +38,8 @@ public static void setUp() throws Exception {
         //int port = (int) (1000 * Math.random() + 10000);
         int port = 10001;
         System.out.println(port);
-        server = Exchangers.bind(URL.valueOf("telnet://0.0.0.0:" + port + "?server=netty"), new TelnetServerHandler());
-        client = Exchangers.connect(URL.valueOf("telnet://127.0.0.1:" + port + "?client=netty"), new TelnetClientHandler());
+        server = Exchangers.bind(URL.valueOf("telnet://0.0.0.0:" + port + "?server=netty3"), new TelnetServerHandler());
+        client = Exchangers.connect(URL.valueOf("telnet://127.0.0.1:" + port + "?client=netty3"), new TelnetClientHandler());
     }
 
     @AfterClass

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyTransporter.java
Patch:
@@ -25,7 +25,7 @@
 
 public class NettyTransporter implements Transporter {
 
-    public static final String NAME = "netty4";
+    public static final String NAME = "netty";
 
     @Override
     public Server bind(URL url, ChannelHandler listener) throws RemotingException {

File: dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/LsTest.java
Patch:
@@ -32,7 +32,7 @@ public void testExecute() throws Exception {
 
         Invoker providerInvoker = mock(Invoker.class);
         URL registryUrl = mock(URL.class);
-        when(registryUrl.toFullString()).thenReturn("registry://localhost:8080");
+        when(registryUrl.toFullString()).thenReturn("test://localhost:8080");
         URL providerUrl = mock(URL.class);
         when(providerUrl.getServiceKey()).thenReturn("org.apache.dubbo.BarService");
         when(providerUrl.toFullString()).thenReturn("dubbo://localhost:8888/org.apache.dubbo.BarService");

File: dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java
Patch:
@@ -54,7 +54,7 @@ public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {
         if (inv.getMethodName().equals(Constants.$INVOKE)
                 && inv.getArguments() != null
                 && inv.getArguments().length == 3
-                && !invoker.getInterface().equals(GenericService.class)) {
+                && !GenericService.class.isAssignableFrom(invoker.getInterface())) {
             String name = ((String) inv.getArguments()[0]).trim();
             String[] types = (String[]) inv.getArguments()[1];
             Object[] args = (Object[]) inv.getArguments()[2];

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvokerAvilableTest.java
Patch:
@@ -91,6 +91,7 @@ public void test_normal_channel_close_wait_gracefully() throws Exception {
 
         try{
             System.setProperty(Constants.SHUTDOWN_WAIT_KEY, "2000");
+            System.out.println("------------ConfigUtils.getServerShutdownTimeout(): " + ConfigUtils.getServerShutdownTimeout());
             protocol.destroy();
         }finally {
             System.getProperties().remove(Constants.SHUTDOWN_WAIT_KEY);

File: dubbo-bootstrap/src/main/java/org/apache/dubbo/bootstrap/DubboBootstrap.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.dubbo.bootstrap;
 
-import com.alibaba.dubbo.config.DubboShutdownHook;
-import com.alibaba.dubbo.config.ServiceConfig;
+import org.apache.dubbo.config.DubboShutdownHook;
+import org.apache.dubbo.config.ServiceConfig;
 
 import java.util.ArrayList;
 import java.util.List;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Configurator.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster;
+package org.apache.dubbo.rpc.cluster;
 
-import com.alibaba.dubbo.common.URL;
+import org.apache.dubbo.common.URL;
 
 /**
  * Configurator. (SPI, Prototype, ThreadSafe)

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Merger.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster;
+package org.apache.dubbo.rpc.cluster;
 
-import com.alibaba.dubbo.common.extension.SPI;
+import org.apache.dubbo.common.extension.SPI;
 
 @SPI
 public interface Merger<T> {

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RuleConverter.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.rpc.cluster;
+package org.apache.dubbo.rpc.cluster;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extension.SPI;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.SPI;
 
 import java.util.List;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/absent/AbsentConfigurator.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.configurator.absent;
+package org.apache.dubbo.rpc.cluster.configurator.absent;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.rpc.cluster.configurator.AbstractConfigurator;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.rpc.cluster.configurator.AbstractConfigurator;
 
 /**
  * AbsentConfigurator

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfigurator.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.configurator.override;
+package org.apache.dubbo.rpc.cluster.configurator.override;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.rpc.cluster.configurator.AbstractConfigurator;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.rpc.cluster.configurator.AbstractConfigurator;
 
 /**
  * AbsentConfigurator

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/ArrayMerger.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 import java.lang.reflect.Array;
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/BooleanArrayMerger.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 public class BooleanArrayMerger implements Merger<boolean[]> {
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/ByteArrayMerger.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 public class ByteArrayMerger implements Merger<byte[]> {
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/CharArrayMerger.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 public class CharArrayMerger implements Merger<char[]> {
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/DoubleArrayMerger.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 public class DoubleArrayMerger implements Merger<double[]> {
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/FloatArrayMerger.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 public class FloatArrayMerger implements Merger<float[]> {
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/IntArrayMerger.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 public class IntArrayMerger implements Merger<int[]> {
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/ListMerger.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 import java.util.ArrayList;
 import java.util.List;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/LongArrayMerger.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 public class LongArrayMerger implements Merger<long[]> {
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/MapMerger.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 import java.util.HashMap;
 import java.util.Map;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/SetMerger.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 import java.util.HashSet;
 import java.util.Set;

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/merger/ShortArrayMerger.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
-import com.alibaba.dubbo.rpc.cluster.Merger;
+import org.apache.dubbo.rpc.cluster.Merger;
 
 public class ShortArrayMerger implements Merger<short[]> {
 

File: dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.support;
+package org.apache.dubbo.rpc.cluster.support;
 
-import com.alibaba.dubbo.common.Constants;
-import com.alibaba.dubbo.common.URL;
+import org.apache.dubbo.common.Constants;
+import org.apache.dubbo.common.URL;
 
 import java.util.HashMap;
 import java.util.Map;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/consts/UrlConstant.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.configurator.consts;
+package org.apache.dubbo.rpc.cluster.configurator.consts;
 
 /**
  * test case url constant

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/filter/DemoService.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.filter;
+package org.apache.dubbo.rpc.cluster.filter;
 
 /**
  * <code>TestService</code>

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/filter/DemoServiceLocal.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.filter;
+package org.apache.dubbo.rpc.cluster.filter;
 
 /**
  * <code>TestService</code>

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/filter/DemoServiceMock.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.filter;
+package org.apache.dubbo.rpc.cluster.filter;
 
 /**
  * MockService.java

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/filter/DemoServiceStub.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.filter;
+package org.apache.dubbo.rpc.cluster.filter;
 
 /**
  * <code>TestService</code>

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/filter/MockService.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.filter;
+package org.apache.dubbo.rpc.cluster.filter;
 
 /**
  * MockService.java

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalanceTest.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.loadbalance;
+package org.apache.dubbo.rpc.cluster.loadbalance;
 
-import com.alibaba.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.Invoker;
 
 import org.junit.Assert;
 import org.junit.Ignore;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LeastActiveBalanceTest.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.loadbalance;
+package org.apache.dubbo.rpc.cluster.loadbalance;
 
-import com.alibaba.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.Invoker;
 
 import org.junit.Assert;
 import org.junit.Ignore;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RandomLoadBalanceTest.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.loadbalance;
+package org.apache.dubbo.rpc.cluster.loadbalance;
 
-import com.alibaba.dubbo.rpc.Invoker;
-import com.alibaba.dubbo.rpc.RpcStatus;
+import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.RpcStatus;
 
 import org.junit.Assert;
 import org.junit.Test;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalanceTest.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.loadbalance;
+package org.apache.dubbo.rpc.cluster.loadbalance;
 
-import com.alibaba.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.Invoker;
 
 import org.junit.Assert;
 import org.junit.Test;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/merger/ResultMergerTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.merger;
+package org.apache.dubbo.rpc.cluster.merger;
 
 import org.junit.Assert;
 import org.junit.Test;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ClusterUtilsTest.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.support;
+package org.apache.dubbo.rpc.cluster.support;
 
-import com.alibaba.dubbo.common.Constants;
-import com.alibaba.dubbo.common.URL;
+import org.apache.dubbo.common.Constants;
+import org.apache.dubbo.common.URL;
 
 import org.junit.Assert;
 import org.junit.Test;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/Menu.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.support;
+package org.apache.dubbo.rpc.cluster.support;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/MenuService.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.support;
+package org.apache.dubbo.rpc.cluster.support;
 
 import java.util.List;
 

File: dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/wrapper/MyMockException.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.rpc.cluster.support.wrapper;
+package org.apache.dubbo.rpc.cluster.support.wrapper;
 
 
 public class MyMockException extends RuntimeException {

File: dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common;
+package org.apache.dubbo.common;
 
 import java.util.concurrent.ExecutorService;
 import java.util.regex.Pattern;

File: dubbo-common/src/main/java/org/apache/dubbo/common/Extension.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common;
+package org.apache.dubbo.common;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -51,7 +51,7 @@
  * instead of reporting which extract extension implementation fails and the extract reason.
  * </p>
  *
- * @deprecated because it's too general, switch to use {@link com.alibaba.dubbo.common.extension.SPI}
+ * @deprecated because it's too general, switch to use {@link org.apache.dubbo.common.extension.SPI}
  */
 @Deprecated
 @Documented

File: dubbo-common/src/main/java/org/apache/dubbo/common/Node.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common;
+package org.apache.dubbo.common;
 
 /**
  * Node. (API/SPI, Prototype, ThreadSafe)

File: dubbo-common/src/main/java/org/apache/dubbo/common/Resetable.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common;
+package org.apache.dubbo.common;
 
 /**
  * Resetable.

File: dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanAccessor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.beanutil;
+package org.apache.dubbo.common.beanutil;
 
 public enum JavaBeanAccessor {
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanDescriptor.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.beanutil;
+package org.apache.dubbo.common.beanutil;
 
 import java.io.Serializable;
 import java.util.Iterator;
@@ -30,7 +30,7 @@ public final class JavaBeanDescriptor implements Serializable, Iterable<Map.Entr
     public static final int TYPE_MAP = 4;
     public static final int TYPE_ARRAY = 5;
     /**
-     * @see com.alibaba.dubbo.common.utils.ReflectUtils#isPrimitive(Class)
+     * @see org.apache.dubbo.common.utils.ReflectUtils#isPrimitive(Class)
      */
     public static final int TYPE_PRIMITIVE = 6;
     public static final int TYPE_BEAN = 7;

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.bytecode;
+package org.apache.dubbo.common.bytecode;
 
-import com.alibaba.dubbo.common.utils.ClassHelper;
-import com.alibaba.dubbo.common.utils.ReflectUtils;
+import org.apache.dubbo.common.utils.ClassHelper;
+import org.apache.dubbo.common.utils.ReflectUtils;
 
 import javassist.CannotCompileException;
 import javassist.ClassPool;

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.bytecode;
+package org.apache.dubbo.common.bytecode;
 
-import com.alibaba.dubbo.common.utils.ClassHelper;
-import com.alibaba.dubbo.common.utils.ReflectUtils;
+import org.apache.dubbo.common.utils.ClassHelper;
+import org.apache.dubbo.common.utils.ReflectUtils;
 
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/NoSuchMethodException.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.bytecode;
+package org.apache.dubbo.common.bytecode;
 
 /**
  * NoSuchMethodException.

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/NoSuchPropertyException.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.bytecode;
+package org.apache.dubbo.common.bytecode;
 
 /**
  * NoSuchPropertyException.

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.bytecode;
+package org.apache.dubbo.common.bytecode;
 
-import com.alibaba.dubbo.common.utils.ClassHelper;
-import com.alibaba.dubbo.common.utils.ReflectUtils;
+import org.apache.dubbo.common.utils.ClassHelper;
+import org.apache.dubbo.common.utils.ReflectUtils;
 
 import java.lang.ref.Reference;
 import java.lang.ref.WeakReference;

File: dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.bytecode;
+package org.apache.dubbo.common.bytecode;
 
-import com.alibaba.dubbo.common.utils.ClassHelper;
-import com.alibaba.dubbo.common.utils.ReflectUtils;
+import org.apache.dubbo.common.utils.ClassHelper;
+import org.apache.dubbo.common.utils.ReflectUtils;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/Compiler.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.compiler;
+package org.apache.dubbo.common.compiler;
 
 
-import com.alibaba.dubbo.common.extension.SPI;
+import org.apache.dubbo.common.extension.SPI;
 
 /**
  * Compiler. (SPI, Singleton, ThreadSafe)

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/AbstractCompiler.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.compiler.support;
+package org.apache.dubbo.common.compiler.support;
 
-import com.alibaba.dubbo.common.compiler.Compiler;
-import com.alibaba.dubbo.common.utils.ClassHelper;
+import org.apache.dubbo.common.compiler.Compiler;
+import org.apache.dubbo.common.utils.ClassHelper;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/ClassUtils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.compiler.support;
+package org.apache.dubbo.common.compiler.support;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JavassistCompiler.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.compiler.support;
+package org.apache.dubbo.common.compiler.support;
 
-import com.alibaba.dubbo.common.utils.ClassHelper;
+import org.apache.dubbo.common.utils.ClassHelper;
 
 import javassist.ClassPool;
 import javassist.CtClass;

File: dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.compiler.support;
+package org.apache.dubbo.common.compiler.support;
 
-import com.alibaba.dubbo.common.utils.ClassHelper;
+import org.apache.dubbo.common.utils.ClassHelper;
 
 import javax.tools.DiagnosticCollector;
 import javax.tools.FileObject;

File: dubbo-common/src/main/java/org/apache/dubbo/common/concurrent/ListenableFuture.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.concurrent;
+package org.apache.dubbo.common.concurrent;
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;

File: dubbo-common/src/main/java/org/apache/dubbo/common/concurrent/ListenableFutureTask.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.concurrent;
+package org.apache.dubbo.common.concurrent;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executor;

File: dubbo-common/src/main/java/org/apache/dubbo/common/config/AsyncFor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.config;
+package org.apache.dubbo.common.config;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/Activate.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extension;
+package org.apache.dubbo.common.extension;
 
-import com.alibaba.dubbo.common.URL;
+import org.apache.dubbo.common.URL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/Adaptive.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extension;
+package org.apache.dubbo.common.extension;
 
-import com.alibaba.dubbo.common.URL;
+import org.apache.dubbo.common.URL;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -50,7 +50,7 @@
      * </ol>
      * If default extension's name is not give on interface's {@link SPI}, then a name is generated from interface's
      * class name with the rule: divide classname from capital char into several parts, and separate the parts with
-     * dot '.', for example: for {@code com.alibaba.dubbo.xxx.YyyInvokerWrapper}, its default name is
+     * dot '.', for example: for {@code org.apache.dubbo.xxx.YyyInvokerWrapper}, its default name is
      * <code>String[] {"yyy.invoker.wrapper"}</code>. This name will be used to search for parameter from URL.
      *
      * @return parameter key names in URL

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionFactory.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extension;
+package org.apache.dubbo.common.extension;
 
 /**
  * ExtensionFactory

File: dubbo-common/src/main/java/org/apache/dubbo/common/extension/SPI.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.extension;
+package org.apache.dubbo.common.extension;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.io;
+package org.apache.dubbo.common.io;
 
-import com.alibaba.dubbo.common.utils.IOUtils;
+import org.apache.dubbo.common.utils.IOUtils;
 
 import java.io.File;
 import java.io.FileInputStream;

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.io;
+package org.apache.dubbo.common.io;
 
 import java.io.IOException;
 import java.io.InputStream;

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.io;
+package org.apache.dubbo.common.io;
 
 import java.io.IOException;
 import java.io.InputStream;

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStream.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.io;
+package org.apache.dubbo.common.io;
 
 import java.io.IOException;
 import java.io.OutputStream;

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.io;
+package org.apache.dubbo.common.io;
 
 import java.io.IOException;
 import java.io.Reader;

File: dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.io;
+package org.apache.dubbo.common.io;
 
 import java.io.IOException;
 import java.io.Writer;

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
-import com.alibaba.dubbo.common.bytecode.Wrapper;
-import com.alibaba.dubbo.common.io.Bytes;
+import org.apache.dubbo.common.bytecode.Wrapper;
+import org.apache.dubbo.common.io.Bytes;
 
 import java.io.IOException;
 import java.lang.reflect.Array;

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
-import com.alibaba.dubbo.common.bytecode.Wrapper;
-import com.alibaba.dubbo.common.utils.Stack;
+import org.apache.dubbo.common.bytecode.Wrapper;
+import org.apache.dubbo.common.utils.Stack;
 
 import java.io.IOException;
 import java.io.Reader;

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONArray.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
 import java.io.IOException;
 import java.util.ArrayList;

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONConverter.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
 import java.io.IOException;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONNode.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
 import java.io.IOException;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONObject.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
 import java.io.IOException;
 import java.util.HashMap;

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONReader.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
 import java.io.IOException;
 import java.io.InputStream;

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONToken.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
 /**
  * JSONToken.

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONVisitor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
 /**
  * JSONVisitor.

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
-import com.alibaba.dubbo.common.utils.Stack;
+import org.apache.dubbo.common.utils.Stack;
 
 import java.io.IOException;
 import java.io.OutputStream;

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/ParseException.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
 /**
  * ParseException.

File: dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java
Patch:
@@ -14,13 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.json;
+package org.apache.dubbo.common.json;
 
 /**
  * This class is a scanner generated by
  * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
  * on 7/3/10 3:12 AM from the specification file
- * <tt>/Users/qianlei/dev/proj/dubbo-1.1/dubbo.common/src/main/java/com/alibaba/dubbo/common/json/json.flex</tt>
+ * <tt>/Users/qianlei/dev/proj/dubbo-1.1/dubbo.common/src/main/java/org.apache.dubbo/common/json/json.flex</tt>
  */
 @Deprecated
 public class Yylex {

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/Level.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.logger;
+package org.apache.dubbo.common.logger;
 
 /**
  * Level

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/Logger.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.logger;
+package org.apache.dubbo.common.logger;
 
 /**
  * Logger interface

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/LoggerAdapter.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.logger;
+package org.apache.dubbo.common.logger;
 
-import com.alibaba.dubbo.common.extension.SPI;
+import org.apache.dubbo.common.extension.SPI;
 
 import java.io.File;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/jcl/JclLogger.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.logger.jcl;
+package org.apache.dubbo.common.logger.jcl;
 
-import com.alibaba.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.Logger;
 import org.apache.commons.logging.Log;
 
 import java.io.Serializable;

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLogger.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.logger.jdk;
+package org.apache.dubbo.common.logger.jdk;
 
-import com.alibaba.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.Logger;
 
 import java.util.logging.Level;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j/Log4jLogger.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.logger.log4j;
+package org.apache.dubbo.common.logger.log4j;
 
-import com.alibaba.dubbo.common.logger.Logger;
-import com.alibaba.dubbo.common.logger.support.FailsafeLogger;
+import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.support.FailsafeLogger;
 
 import org.apache.log4j.Level;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/logger/slf4j/Slf4jLogger.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.logger.slf4j;
+package org.apache.dubbo.common.logger.slf4j;
 
-import com.alibaba.dubbo.common.logger.Logger;
-import com.alibaba.dubbo.common.logger.support.FailsafeLogger;
+import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.support.FailsafeLogger;
 
 import org.slf4j.spi.LocationAwareLogger;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/status/Status.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.status;
+package org.apache.dubbo.common.status;
 
 /**
  * Status

File: dubbo-common/src/main/java/org/apache/dubbo/common/status/StatusChecker.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.status;
+package org.apache.dubbo.common.status;
 
-import com.alibaba.dubbo.common.extension.SPI;
+import org.apache.dubbo.common.extension.SPI;
 
 /**
  * StatusChecker

File: dubbo-common/src/main/java/org/apache/dubbo/common/status/support/StatusUtils.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.status.support;
+package org.apache.dubbo.common.status.support;
 
-import com.alibaba.dubbo.common.status.Status;
-import com.alibaba.dubbo.common.status.Status.Level;
+import org.apache.dubbo.common.status.Status;
+import org.apache.dubbo.common.status.Status.Level;
 
 import java.util.Map;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/store/DataStore.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.store;
+package org.apache.dubbo.common.store;
 
-import com.alibaba.dubbo.common.extension.SPI;
+import org.apache.dubbo.common.extension.SPI;
 
 import java.util.Map;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.store.support;
+package org.apache.dubbo.common.store.support;
 
-import com.alibaba.dubbo.common.store.DataStore;
+import org.apache.dubbo.common.store.DataStore;
 
 import java.util.HashMap;
 import java.util.Map;

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadlocal/InternalThread.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.threadlocal;
+package org.apache.dubbo.common.threadlocal;
 
 /**
  * InternalThread

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadlocal/InternalThreadLocal.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.alibaba.dubbo.common.threadlocal;
+package org.apache.dubbo.common.threadlocal;
 
 import java.util.Collections;
 import java.util.IdentityHashMap;

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalMap.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.alibaba.dubbo.common.threadlocal;
+package org.apache.dubbo.common.threadlocal;
 
 import java.util.Arrays;
 import java.util.concurrent.atomic.AtomicInteger;

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadlocal/NamedInternalThreadFactory.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.threadlocal;
+package org.apache.dubbo.common.threadlocal;
 
-import com.alibaba.dubbo.common.utils.NamedThreadFactory;
+import org.apache.dubbo.common.utils.NamedThreadFactory;
 
 /**
  * NamedInternalThreadFactory

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.threadpool.support.eager;
+package org.apache.dubbo.common.threadpool.support.eager;
 
 import java.util.concurrent.RejectedExecutionHandler;
 import java.util.concurrent.ThreadFactory;

File: dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/eager/TaskQueue.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.threadpool.support.eager;
+package org.apache.dubbo.common.threadpool.support.eager;
 
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.RejectedExecutionException;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/Assert.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 public abstract class Assert {
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/AtomicPositiveInteger.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassHelper.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import java.lang.reflect.Array;
 import java.util.Arrays;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import java.lang.reflect.Array;
 import java.math.BigDecimal;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConcurrentHashSet.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import java.util.AbstractSet;
 import java.util.ConcurrentModificationException;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/DubboAppender.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import org.apache.log4j.ConsoleAppender;
 import org.apache.log4j.spi.LoggingEvent;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/Holder.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 /**
  * Helper Class for hold a value.

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import java.io.BufferedReader;
 import java.io.File;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/JVMUtil.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import java.io.OutputStream;
 import java.lang.management.LockInfo;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/LRUCache.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import java.util.LinkedHashMap;
 import java.util.concurrent.locks.Lock;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/Log.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import org.apache.log4j.Level;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogHelper.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
-import com.alibaba.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.Logger;
 
 public class LogHelper {
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogUtil.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
-import com.alibaba.dubbo.common.logger.Logger;
-import com.alibaba.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.LoggerFactory;
 
 import org.apache.log4j.Level;
 

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/NamedThreadFactory.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicInteger;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import java.lang.reflect.Array;
 import java.lang.reflect.Constructor;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import javassist.CtClass;
 import javassist.CtConstructor;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/Stack.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
 import java.util.ArrayList;
 import java.util.EmptyStackException;

File: dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.utils;
+package org.apache.dubbo.common.utils;
 
-import com.alibaba.dubbo.common.Constants;
-import com.alibaba.dubbo.common.URL;
+import org.apache.dubbo.common.Constants;
+import org.apache.dubbo.common.URL;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: dubbo-common/src/test/java/org/apache/dubbo/common/URLTest.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common;
+package org.apache.dubbo.common;
 
-import com.alibaba.dubbo.common.utils.CollectionUtils;
+import org.apache.dubbo.common.utils.CollectionUtils;
 
 import org.junit.Test;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ClassGeneratorTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.bytecode;
+package org.apache.dubbo.common.bytecode;
 
 import junit.framework.TestCase;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/MixinTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.bytecode;
+package org.apache.dubbo.common.bytecode;
 
 import junit.framework.TestCase;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ProxyTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.bytecode;
+package org.apache.dubbo.common.bytecode;
 
 import junit.framework.TestCase;
 import net.sf.cglib.proxy.Enhancer;

File: dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/WrapperTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.bytecode;
+package org.apache.dubbo.common.bytecode;
 
 import org.junit.Test;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/JdkCompilerTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.compiler.support;
+package org.apache.dubbo.common.compiler.support;
 
 import org.junit.Test;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/ExecutionListTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.concurrent;
+package org.apache.dubbo.common.concurrent;
 
 import org.junit.Before;
 import org.junit.Test;

File: dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/ListenableFutureTaskTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.concurrent;
+package org.apache.dubbo.common.concurrent;
 
 import org.junit.Test;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ExtensionLoader_Adaptive_UseJdkCompiler_Test.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader;
+package org.apache.dubbo.common.extensionloader;
 
-import com.alibaba.dubbo.common.compiler.support.AdaptiveCompiler;
+import org.apache.dubbo.common.compiler.support.AdaptiveCompiler;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/NoSpiExt.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader;
+package org.apache.dubbo.common.extensionloader;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extension.Adaptive;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.Adaptive;
 
 /**
  * Has no SPI annotation

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/activate/ActivateExt1.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.extensionloader.activate;
+package org.apache.dubbo.common.extensionloader.activate;
 
-import com.alibaba.dubbo.common.extension.SPI;
+import org.apache.dubbo.common.extension.SPI;
 
 @SPI("impl1")
 public interface ActivateExt1 {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/activate/impl/ActivateExt1Impl1.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.extensionloader.activate.impl;
+package org.apache.dubbo.common.extensionloader.activate.impl;
 
-import com.alibaba.dubbo.common.extension.Activate;
-import com.alibaba.dubbo.common.extensionloader.activate.ActivateExt1;
+import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.common.extensionloader.activate.ActivateExt1;
 
 @Activate(group = {"default_group"})
 public class ActivateExt1Impl1 implements ActivateExt1 {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/activate/impl/GroupActivateExtImpl.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.extensionloader.activate.impl;
+package org.apache.dubbo.common.extensionloader.activate.impl;
 
-import com.alibaba.dubbo.common.extension.Activate;
-import com.alibaba.dubbo.common.extensionloader.activate.ActivateExt1;
+import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.common.extensionloader.activate.ActivateExt1;
 
 @Activate(group = {"group1", "group2"})
 public class GroupActivateExtImpl implements ActivateExt1 {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/activate/impl/OrderActivateExtImpl1.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.extensionloader.activate.impl;
+package org.apache.dubbo.common.extensionloader.activate.impl;
 
-import com.alibaba.dubbo.common.extension.Activate;
-import com.alibaba.dubbo.common.extensionloader.activate.ActivateExt1;
+import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.common.extensionloader.activate.ActivateExt1;
 
 @Activate(order = 1, group = {"order"})
 public class OrderActivateExtImpl1 implements ActivateExt1 {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/activate/impl/OrderActivateExtImpl2.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.extensionloader.activate.impl;
+package org.apache.dubbo.common.extensionloader.activate.impl;
 
-import com.alibaba.dubbo.common.extension.Activate;
-import com.alibaba.dubbo.common.extensionloader.activate.ActivateExt1;
+import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.common.extensionloader.activate.ActivateExt1;
 
 @Activate(order = 2, group = {"order"})
 public class OrderActivateExtImpl2 implements ActivateExt1 {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/activate/impl/ValueActivateExtImpl.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.extensionloader.activate.impl;
+package org.apache.dubbo.common.extensionloader.activate.impl;
 
-import com.alibaba.dubbo.common.extension.Activate;
-import com.alibaba.dubbo.common.extensionloader.activate.ActivateExt1;
+import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.common.extensionloader.activate.ActivateExt1;
 
 @Activate(value = {"value"}, group = {"value"})
 public class ValueActivateExtImpl implements ActivateExt1 {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/adaptive/impl/HasAdaptiveExtImpl1.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.adaptive.impl;
+package org.apache.dubbo.common.extensionloader.adaptive.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.adaptive.HasAdaptiveExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.adaptive.HasAdaptiveExt;
 
 public class HasAdaptiveExtImpl1 implements HasAdaptiveExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/compatible/impl/CompatibleExtImpl2.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.compatible.impl;
+package org.apache.dubbo.common.extensionloader.compatible.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.compatible.CompatibleExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.compatible.CompatibleExt;
 
 public class CompatibleExtImpl2 implements CompatibleExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext1/impl/SimpleExtImpl1.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext1.impl;
+package org.apache.dubbo.common.extensionloader.ext1.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext1.SimpleExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext1.SimpleExt;
 
 public class SimpleExtImpl1 implements SimpleExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext1/impl/SimpleExtImpl2.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext1.impl;
+package org.apache.dubbo.common.extensionloader.ext1.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext1.SimpleExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext1.SimpleExt;
 
 public class SimpleExtImpl2 implements SimpleExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext1/impl/SimpleExtImpl3.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext1.impl;
+package org.apache.dubbo.common.extensionloader.ext1.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext1.SimpleExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext1.SimpleExt;
 
 public class SimpleExtImpl3 implements SimpleExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext2/UrlHolder.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext2;
+package org.apache.dubbo.common.extensionloader.ext2;
 
-import com.alibaba.dubbo.common.URL;
+import org.apache.dubbo.common.URL;
 
 public class UrlHolder {
     private Double Num;

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext3/impl/UseProtocolKeyExtImpl1.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext3.impl;
+package org.apache.dubbo.common.extensionloader.ext3.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext3.UseProtocolKeyExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext3.UseProtocolKeyExt;
 
 public class UseProtocolKeyExtImpl1 implements UseProtocolKeyExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext3/impl/UseProtocolKeyExtImpl2.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext3.impl;
+package org.apache.dubbo.common.extensionloader.ext3.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext3.UseProtocolKeyExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext3.UseProtocolKeyExt;
 
 public class UseProtocolKeyExtImpl2 implements UseProtocolKeyExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext3/impl/UseProtocolKeyExtImpl3.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext3.impl;
+package org.apache.dubbo.common.extensionloader.ext3.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext3.UseProtocolKeyExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext3.UseProtocolKeyExt;
 
 public class UseProtocolKeyExtImpl3 implements UseProtocolKeyExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext4/NoUrlParamExt.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext4;
+package org.apache.dubbo.common.extensionloader.ext4;
 
-import com.alibaba.dubbo.common.extension.Adaptive;
-import com.alibaba.dubbo.common.extension.SPI;
+import org.apache.dubbo.common.extension.Adaptive;
+import org.apache.dubbo.common.extension.SPI;
 
 import java.util.List;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext4/impl/Ext4Impl1.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext4.impl;
+package org.apache.dubbo.common.extensionloader.ext4.impl;
 
-import com.alibaba.dubbo.common.extensionloader.ext4.NoUrlParamExt;
+import org.apache.dubbo.common.extensionloader.ext4.NoUrlParamExt;
 
 import java.util.List;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext4/impl/Ext4Impl2.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext4.impl;
+package org.apache.dubbo.common.extensionloader.ext4.impl;
 
-import com.alibaba.dubbo.common.extensionloader.ext4.NoUrlParamExt;
+import org.apache.dubbo.common.extensionloader.ext4.NoUrlParamExt;
 
 import java.util.List;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext5/NoAdaptiveMethodExt.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext5;
+package org.apache.dubbo.common.extensionloader.ext5;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extension.SPI;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.SPI;
 
 /**
  * No Adaptive Method!!

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext5/impl/Ext5Impl1.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext5.impl;
+package org.apache.dubbo.common.extensionloader.ext5.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext5.NoAdaptiveMethodExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext5.NoAdaptiveMethodExt;
 
 public class Ext5Impl1 implements NoAdaptiveMethodExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext5/impl/Ext5Impl2.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext5.impl;
+package org.apache.dubbo.common.extensionloader.ext5.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext5.NoAdaptiveMethodExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext5.NoAdaptiveMethodExt;
 
 public class Ext5Impl2 implements NoAdaptiveMethodExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext6_inject/Dao.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.extensionloader.ext6_inject;
+package org.apache.dubbo.common.extensionloader.ext6_inject;
 
 public interface Dao {
     public void update();

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext6_inject/impl/DaoImpl.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.extensionloader.ext6_inject.impl;
+package org.apache.dubbo.common.extensionloader.ext6_inject.impl;
 
-import com.alibaba.dubbo.common.extensionloader.ext6_inject.Dao;
+import org.apache.dubbo.common.extensionloader.ext6_inject.Dao;
 
 public class DaoImpl implements Dao {
     public void update() {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext6_inject/impl/Ext6Impl2.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext6_inject.impl;
+package org.apache.dubbo.common.extensionloader.ext6_inject.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext6_inject.Ext6;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext6_inject.Ext6;
 
 import java.util.List;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext6_wrap/WrappedExt.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext6_wrap;
+package org.apache.dubbo.common.extensionloader.ext6_wrap;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extension.SPI;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extension.SPI;
 
 /**
  * No Adaptive Method!!

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext6_wrap/impl/Ext5Impl1.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext6_wrap.impl;
+package org.apache.dubbo.common.extensionloader.ext6_wrap.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext6_wrap.WrappedExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext6_wrap.WrappedExt;
 
 public class Ext5Impl1 implements WrappedExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext6_wrap/impl/Ext5Impl2.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext6_wrap.impl;
+package org.apache.dubbo.common.extensionloader.ext6_wrap.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext6_wrap.WrappedExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext6_wrap.WrappedExt;
 
 public class Ext5Impl2 implements WrappedExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext6_wrap/impl/Ext5Wrapper1.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext6_wrap.impl;
+package org.apache.dubbo.common.extensionloader.ext6_wrap.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext6_wrap.WrappedExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext6_wrap.WrappedExt;
 
 import java.util.concurrent.atomic.AtomicInteger;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext6_wrap/impl/Ext5Wrapper2.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext6_wrap.impl;
+package org.apache.dubbo.common.extensionloader.ext6_wrap.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext6_wrap.WrappedExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext6_wrap.WrappedExt;
 
 import java.util.concurrent.atomic.AtomicInteger;
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext7/impl/Ext7Impl.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext7.impl;
+package org.apache.dubbo.common.extensionloader.ext7.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext7.InitErrorExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext7.InitErrorExt;
 
 public class Ext7Impl implements InitErrorExt {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext7/impl/Ext7InitErrorImpl.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext7.impl;
+package org.apache.dubbo.common.extensionloader.ext7.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext7.InitErrorExt;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext7.InitErrorExt;
 
 public class Ext7InitErrorImpl implements InitErrorExt {
 

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext8_add/impl/AddExt1Impl1.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext8_add.impl;
+package org.apache.dubbo.common.extensionloader.ext8_add.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext8_add.AddExt1;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext8_add.AddExt1;
 
 public class AddExt1Impl1 implements AddExt1 {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext8_add/impl/AddExt1_ManualAdd1.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext8_add.impl;
+package org.apache.dubbo.common.extensionloader.ext8_add.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext8_add.AddExt1;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext8_add.AddExt1;
 
 public class AddExt1_ManualAdd1 implements AddExt1 {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext8_add/impl/AddExt1_ManualAdd2.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext8_add.impl;
+package org.apache.dubbo.common.extensionloader.ext8_add.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext8_add.AddExt1;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext8_add.AddExt1;
 
 public class AddExt1_ManualAdd2 implements AddExt1 {
     public String echo(URL url, String s) {

File: dubbo-common/src/test/java/org/apache/dubbo/common/extensionloader/ext8_add/impl/AddExt2Impl1.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.extensionloader.ext8_add.impl;
+package org.apache.dubbo.common.extensionloader.ext8_add.impl;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.extensionloader.ext8_add.AddExt2;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.extensionloader.ext8_add.AddExt2;
 
 public class AddExt2Impl1 implements AddExt2 {
     public String echo(URL url, String s) {

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java
Patch:
@@ -70,7 +70,7 @@ public void execute(Runnable command) {
             try {
                 if (!queue.retryOffer(command, 0, TimeUnit.MILLISECONDS)) {
                     submittedTaskCount.decrementAndGet();
-                    throw new RejectedExecutionException("Queue capacity is full.");
+                    throw new RejectedExecutionException("Queue capacity is full.", rx);
                 }
             } catch (InterruptedException x) {
                 submittedTaskCount.decrementAndGet();
@@ -79,6 +79,7 @@ public void execute(Runnable command) {
         } catch (Throwable t) {
             // decrease any way
             submittedTaskCount.decrementAndGet();
+            throw t;
         }
     }
 }

File: dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/command/decoder/TelnetCommandDecoder.java
Patch:
@@ -16,15 +16,15 @@
  */
 package com.alibaba.dubbo.qos.command.decoder;
 
+import com.alibaba.dubbo.common.utils.StringUtils;
 import com.alibaba.dubbo.qos.command.CommandContext;
 import com.alibaba.dubbo.qos.command.CommandContextFactory;
 
-import org.apache.commons.lang3.StringUtils;
 
 public class TelnetCommandDecoder {
     public static final CommandContext decode(String str) {
         CommandContext commandContext = null;
-        if (StringUtils.isNotBlank(str)) {
+        if (!StringUtils.isBlank(str)) {
             String[] array = str.split("(?<![\\\\]) ");
             if (array.length > 0) {
                 String name = array[0];

File: dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/server/handler/TelnetProcessHandler.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.alibaba.dubbo.common.logger.Logger;
 import com.alibaba.dubbo.common.logger.LoggerFactory;
+import com.alibaba.dubbo.common.utils.StringUtils;
 import com.alibaba.dubbo.qos.command.CommandContext;
 import com.alibaba.dubbo.qos.command.CommandExecutor;
 import com.alibaba.dubbo.qos.command.DefaultCommandExecutor;
@@ -29,7 +30,6 @@
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
-import org.apache.commons.lang3.StringUtils;
 
 /**
  * Telnet process handler
@@ -50,7 +50,7 @@ protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Except
 
             try {
                 String result = commandExecutor.execute(commandContext);
-                if (StringUtils.equals(QosConstants.CLOSE, result)) {
+                if (StringUtils.isEquals(QosConstants.CLOSE, result)) {
                     ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);
                 } else {
                     ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.prompt);

File: dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/textui/TKv.java
Patch:
@@ -16,7 +16,7 @@
  */
 package com.alibaba.dubbo.qos.textui;
 
-import org.apache.commons.lang3.StringUtils;
+import com.alibaba.dubbo.common.utils.StringUtils;
 
 import java.util.Scanner;
 

File: dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/textui/TLadder.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.apache.commons.lang3.StringUtils.repeat;
+import static com.alibaba.dubbo.common.utils.StringUtils.repeat;
 
 /**
  * Ladder

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/IOUtilsTest.java
Patch:
@@ -107,7 +107,7 @@ public void testReadLines() throws Exception {
     public void testWriteLines() throws Exception {
         IOUtils.writeLines(os, new String[]{TEXT});
         ByteArrayOutputStream bos = (ByteArrayOutputStream) os;
-        assertThat(new String(bos.toByteArray()), equalTo(TEXT + "\n"));
+        assertThat(new String(bos.toByteArray()), equalTo(TEXT + System.lineSeparator()));
     }
 
     @Test

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/RegistryService.java
Patch:
@@ -54,7 +54,7 @@ public interface RegistryService {
     void unregister(URL url);
 
     /**
-     * Subscrib to eligible registered data and automatically push when the registered data is changed.
+     * Subscribe to eligible registered data and automatically push when the registered data is changed.
      * <p>
      * Subscribing need to support contracts:<br>
      * 1. When the URL sets the check=false parameter. When the registration fails, the exception is not thrown and retried in the background. <br>

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalance.java
Patch:
@@ -36,6 +36,7 @@
  *
  */
 public class ConsistentHashLoadBalance extends AbstractLoadBalance {
+    public static final String NAME = "consistenthash";
 
     private final ConcurrentMap<String, ConsistentHashSelector<?>> selectors = new ConcurrentHashMap<String, ConsistentHashSelector<?>>();
 

File: dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java
Patch:
@@ -31,7 +31,7 @@
 import com.alibaba.dubbo.rpc.cluster.directory.StaticDirectory;
 import com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java
Patch:
@@ -33,7 +33,7 @@
 import com.alibaba.dubbo.rpc.cluster.loadbalance.RandomLoadBalance;
 import com.alibaba.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/support/FailSafeClusterInvokerTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.alibaba.dubbo.rpc.cluster.Directory;
 import com.alibaba.dubbo.rpc.cluster.filter.DemoService;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/support/FailbackClusterInvokerTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.alibaba.dubbo.rpc.RpcResult;
 import com.alibaba.dubbo.rpc.cluster.Directory;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/support/FailfastClusterInvokerTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.alibaba.dubbo.rpc.RpcResult;
 import com.alibaba.dubbo.rpc.cluster.Directory;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/support/ForkingClusterInvokerTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.alibaba.dubbo.rpc.RpcResult;
 import com.alibaba.dubbo.rpc.cluster.Directory;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/support/wrapper/MockClusterInvokerTest.java
Patch:
@@ -32,7 +32,7 @@
 import com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker;
 import com.alibaba.dubbo.rpc.support.MockProtocol;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/extensionloader/ExtensionLoaderTest.java
Patch:
@@ -47,7 +47,7 @@
 import com.alibaba.dubbo.common.extensionloader.ext9_empty.Ext9Empty;
 import com.alibaba.dubbo.common.extensionloader.ext9_empty.impl.Ext9EmptyImpl;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Test;
 
 import java.util.HashSet;

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/extensionloader/ExtensionLoader_Adaptive_Test.java
Patch:
@@ -30,7 +30,7 @@
 import com.alibaba.dubbo.common.extensionloader.ext6_inject.impl.Ext6Impl2;
 import com.alibaba.dubbo.common.utils.LogUtil;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Test;
 
 import java.util.HashMap;

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/extensionloader/ext6_inject/impl/Ext6Impl1.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.dubbo.common.extensionloader.ext6_inject.Dao;
 import com.alibaba.dubbo.common.extensionloader.ext6_inject.Ext6;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 public class Ext6Impl1 implements Ext6 {
     public Dao obj;

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/json/JSONTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package com.alibaba.dubbo.common.json;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Test;
 
 import java.io.StringReader;

File: dubbo-config/dubbo-config-api/src/test/java/com/alibaba/dubbo/config/ReferenceConfigTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.alibaba.dubbo.config.api.DemoService;
 import com.alibaba.dubbo.config.provider.impl.DemoServiceImpl;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Test;
 
 public class ReferenceConfigTest {

File: dubbo-config/dubbo-config-api/src/test/java/com/alibaba/dubbo/config/url/UrlTestBase.java
Patch:
@@ -185,7 +185,7 @@ protected String getProviderParamString() {
      */
     protected void assertUrlStringWithLocalTable(String paramStringFromDb,
                                                  Object[][] dataTable, String configName, int column) {
-        final String FAILLOG_HEADER = "The following config items are not found in URL: ";
+        final String FAILLOG_HEADER = "The following config items are not found in URLONE: ";
 
         log.warn("Verifying service url for " + configName + "... ");
         log.warn("Consumer url string: " + paramStringFromDb);

File: dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/ConfigTest.java
Patch:
@@ -381,7 +381,7 @@ public void testInitReference() throws Exception {
         }
     }
 
-    // DUBBO-571 methods key in provider's URL doesn't contain the methods from inherited super interface
+    // DUBBO-571 methods key in provider's URLONE doesn't contain the methods from inherited super interface
     @Test
     public void test_noMethodInterface_methodsKeyHasValue() throws Exception {
         ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(ConfigTest.class.getPackage().getName().replace('.', '/') + "/demo-provider-no-methods-interface.xml");

File: dubbo-registry/dubbo-registry-api/src/test/java/com/alibaba/dubbo/registry/support/AbstractRegistryFactoryTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.dubbo.registry.Registry;
 import com.alibaba.dubbo.registry.RegistryFactory;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Test;
 
 import java.util.List;

File: dubbo-remoting/dubbo-remoting-api/src/test/java/com/alibaba/dubbo/remoting/buffer/DirectChannelBufferTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package com.alibaba.dubbo.remoting.buffer;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 public class DirectChannelBufferTest extends AbstractChannelBufferTest {
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/com/alibaba/dubbo/remoting/buffer/HeapChannelBufferTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package com.alibaba.dubbo.remoting.buffer;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 public class HeapChannelBufferTest extends AbstractChannelBufferTest {
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/com/alibaba/dubbo/remoting/codec/ExchangeCodecTest.java
Patch:
@@ -32,7 +32,7 @@
 import com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec;
 import com.alibaba.dubbo.remoting.telnet.codec.TelnetCodec;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/com/alibaba/dubbo/remoting/codec/TelnetCodecTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.alibaba.dubbo.remoting.buffer.ChannelBuffers;
 import com.alibaba.dubbo.remoting.telnet.codec.TelnetCodec;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: dubbo-remoting/dubbo-remoting-api/src/test/java/com/alibaba/dubbo/remoting/handler/ConnectChannelHandlerTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.dubbo.remoting.exchange.Response;
 import com.alibaba.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;

File: dubbo-remoting/dubbo-remoting-api/src/test/java/com/alibaba/dubbo/remoting/handler/WrappedChannelHandlerTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.dubbo.remoting.RemotingException;
 import com.alibaba.dubbo.remoting.transport.dispatcher.WrappedChannelHandler;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: dubbo-remoting/dubbo-remoting-mina/src/test/java/com/alibaba/remoting/transport/mina/ClientToServerTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.dubbo.remoting.exchange.ResponseFuture;
 import com.alibaba.dubbo.remoting.exchange.support.Replier;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 import org.junit.Test;
 

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/com/alibaba/dubbo/remoting/exchange/support/header/HeartbeatHandlerTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.alibaba.dubbo.remoting.exchange.Exchangers;
 import com.alibaba.dubbo.remoting.transport.dispatcher.FakeChannelHandlers;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.After;
 import org.junit.Test;
 

File: dubbo-remoting/dubbo-remoting-netty/src/test/java/com/alibaba/dubbo/remoting/transport/netty/ClientToServerTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.dubbo.remoting.exchange.ResponseFuture;
 import com.alibaba.dubbo.remoting.exchange.support.Replier;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 import org.junit.Test;
 

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/com/alibaba/dubbo/rpc/protocol/dubbo/DubboInvokerAvilableTest.java
Patch:
@@ -27,7 +27,7 @@
 import com.alibaba.dubbo.rpc.ProxyFactory;
 import com.alibaba.dubbo.rpc.protocol.dubbo.support.ProtocolUtils;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/com/alibaba/dubbo/rpc/protocol/dubbo/DubboProtocolTest.java
Patch:
@@ -31,14 +31,14 @@
 import com.alibaba.dubbo.rpc.protocol.dubbo.support.Type;
 import com.alibaba.dubbo.rpc.service.EchoService;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 /**
  * <code>ProxiesTest</code>

File: dubbo-rpc/dubbo-rpc-dubbo/src/test/java/com/alibaba/dubbo/rpc/protocol/dubbo/ImplicitCallBackTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.alibaba.dubbo.rpc.StaticContext;
 import com.alibaba.dubbo.rpc.protocol.dubbo.support.ProtocolUtils;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: dubbo-rpc/dubbo-rpc-injvm/src/test/java/com/alibaba/dubbo/rpc/protocol/injvm/InjvmProtocolTest.java
Patch:
@@ -30,8 +30,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 /**
  * <code>ProxiesTest</code>

File: dubbo-rpc/dubbo-rpc-rmi/src/test/java/com/alibaba/dubbo/rpc/protocol/rmi/RmiProtocolTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class RmiProtocolTest {
     private Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();

File: dubbo-test/dubbo-test-examples/src/test/java/com/alibaba/dubbo/examples/validation/ValidationTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.dubbo.examples.validation.api.ValidationParameter;
 import com.alibaba.dubbo.examples.validation.api.ValidationService;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Test;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/NetUtils.java
Patch:
@@ -132,7 +132,7 @@ public static InetSocketAddress getLocalSocketAddress(String host, int port) {
                 new InetSocketAddress(port) : new InetSocketAddress(host, port);
     }
 
-    private static boolean isValidAddress(InetAddress address) {
+    static boolean isValidAddress(InetAddress address) {
         if (address == null || address.isLoopbackAddress())
             return false;
         String name = address.getHostAddress();

File: dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/protocol/AbstractProxyProtocol.java
Patch:
@@ -68,7 +68,7 @@ public <T> Exporter<T> export(final Invoker<T> invoker) throws RpcException {
         if (exporter != null) {
             return exporter;
         }
-        final Runnable runnable = doExport(proxyFactory.getProxy(invoker), invoker.getInterface(), invoker.getUrl());
+        final Runnable runnable = doExport(proxyFactory.getProxy(invoker, true), invoker.getInterface(), invoker.getUrl());
         exporter = new AbstractExporter<T>(invoker) {
             @Override
             public void unexport() {
@@ -89,12 +89,12 @@ public void unexport() {
 
     @Override
     public <T> Invoker<T> refer(final Class<T> type, final URL url) throws RpcException {
-        final Invoker<T> tagert = proxyFactory.getInvoker(doRefer(type, url), type, url);
+        final Invoker<T> target = proxyFactory.getInvoker(doRefer(type, url), type, url);
         Invoker<T> invoker = new AbstractInvoker<T>(type, url) {
             @Override
             protected Result doInvoke(Invocation invocation) throws Throwable {
                 try {
-                    Result result = tagert.invoke(invocation);
+                    Result result = target.invoke(invocation);
                     Throwable e = result.getException();
                     if (e != null) {
                         for (Class<?> rpcException : rpcExceptions) {

File: dubbo-rpc/dubbo-rpc-hessian/src/test/java/com/alibaba/dubbo/rpc/protocol/hessian/HessianService.java
Patch:
@@ -30,4 +30,6 @@ public interface HessianService {
 
     String customException();
 
+    String context(String name);
+
 }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/Constants.java
Patch:
@@ -156,7 +156,7 @@ public class Constants {
 
     public static final String LOADBALANCE_KEY = "loadbalance";
 
-    // key for router type, for e.g., "script"/"file",  corresponding to ScriptRouterFactory.NAME, FileRouterFactory.NAME 
+    // key for router type, for e.g., "script"/"file",  corresponding to ScriptRouterFactory.NAME, FileRouterFactory.NAME
     public static final String ROUTER_KEY = "router";
 
     public static final String CLUSTER_KEY = "cluster";
@@ -624,7 +624,7 @@ public class Constants {
     public static final String QOS_PORT = "qos.port";
 
     public static final String ACCEPT_FOREIGN_IP = "qos.accept.foreign.ip";
-    
+
     public static final String HESSIAN2_REQUEST_KEY = "hessian2.request";
 
     public static final boolean DEFAULT_HESSIAN2_REQUEST = false;

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractInterfaceConfig.java
Patch:
@@ -174,7 +174,7 @@ protected List<URL> loadRegistries(boolean provider) {
                     appendParameters(map, application);
                     appendParameters(map, config);
                     map.put("path", RegistryService.class.getName());
-                    map.put("dubbo", Version.getVersion());
+                    map.put("dubbo", Version.getProtocolVersion());
                     map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));
                     if (ConfigUtils.getPid() > 0) {
                         map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));
@@ -220,7 +220,7 @@ protected URL loadMonitor(URL registryURL) {
         appendProperties(monitor);
         Map<String, String> map = new HashMap<String, String>();
         map.put(Constants.INTERFACE_KEY, MonitorService.class.getName());
-        map.put("dubbo", Version.getVersion());
+        map.put("dubbo", Version.getProtocolVersion());
         map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));
         if (ConfigUtils.getPid() > 0) {
             map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java
Patch:
@@ -280,7 +280,7 @@ private void init() {
         Map<String, String> map = new HashMap<String, String>();
         Map<Object, Object> attributes = new HashMap<Object, Object>();
         map.put(Constants.SIDE_KEY, Constants.CONSUMER_SIDE);
-        map.put(Constants.DUBBO_VERSION_KEY, Version.getVersion());
+        map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion());
         map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));
         if (ConfigUtils.getPid() > 0) {
             map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ServiceConfig.java
Patch:
@@ -367,7 +367,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r
 
         Map<String, String> map = new HashMap<String, String>();
         map.put(Constants.SIDE_KEY, Constants.PROVIDER_SIDE);
-        map.put(Constants.DUBBO_VERSION_KEY, Version.getVersion());
+        map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion());
         map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));
         if (ConfigUtils.getPid() > 0) {
             map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));

File: dubbo-config/dubbo-config-api/src/test/java/com/alibaba/dubbo/config/cache/CacheTest.java
Patch:
@@ -29,6 +29,7 @@
 import com.alibaba.dubbo.config.ServiceConfig;
 import com.alibaba.dubbo.rpc.Invocation;
 import com.alibaba.dubbo.rpc.RpcInvocation;
+
 import junit.framework.TestCase;
 import org.junit.Test;
 

File: dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/schema/DubboBeanDefinitionParser.java
Patch:
@@ -31,6 +31,7 @@
 import com.alibaba.dubbo.config.spring.ReferenceBean;
 import com.alibaba.dubbo.config.spring.ServiceBean;
 import com.alibaba.dubbo.rpc.Protocol;
+
 import org.springframework.beans.PropertyValue;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.config.BeanDefinitionHolder;
@@ -213,7 +214,7 @@ private static BeanDefinition parse(Element element, ParserContext parserContext
                                     String invokeRefMethod = value.substring(index + 1);
                                     reference = new RuntimeBeanReference(invokeRef);
                                     beanDefinition.getPropertyValues().addPropertyValue("oninvokeMethod", invokeRefMethod);
-                                }else {
+                                } else {
                                     if ("ref".equals(property) && parserContext.getRegistry().containsBeanDefinition(value)) {
                                         BeanDefinition refBean = parserContext.getRegistry().getBeanDefinition(value);
                                         if (!refBean.isSingleton()) {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/exchange/support/header/HeaderExchangeChannel.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.common.URL;
+import com.alibaba.dubbo.common.Version;
 import com.alibaba.dubbo.common.logger.Logger;
 import com.alibaba.dubbo.common.logger.LoggerFactory;
 import com.alibaba.dubbo.remoting.Channel;
@@ -88,7 +89,7 @@ public void send(Object message, boolean sent) throws RemotingException {
             channel.send(message, sent);
         } else {
             Request request = new Request();
-            request.setVersion("2.0.0");
+            request.setVersion(Version.getProtocolVersion());
             request.setTwoWay(false);
             request.setData(message);
             channel.send(request, sent);
@@ -107,7 +108,7 @@ public ResponseFuture request(Object request, int timeout) throws RemotingExcept
         }
         // create request.
         Request req = new Request();
-        req.setVersion("2.0.0");
+        req.setVersion(Version.getProtocolVersion());
         req.setTwoWay(true);
         req.setData(request);
         DefaultFuture future = new DefaultFuture(channel, req, timeout);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/exchange/support/header/HeaderExchangeServer.java
Patch:
@@ -29,6 +29,7 @@
 import com.alibaba.dubbo.remoting.exchange.ExchangeChannel;
 import com.alibaba.dubbo.remoting.exchange.ExchangeServer;
 import com.alibaba.dubbo.remoting.exchange.Request;
+
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -133,7 +134,7 @@ private void sendChannelReadOnlyEvent() {
         Request request = new Request();
         request.setEvent(Request.READONLY_EVENT);
         request.setTwoWay(false);
-        request.setVersion(Version.getVersion());
+        request.setVersion(Version.getProtocolVersion());
 
         Collection<Channel> channels = getChannels();
         for (Channel channel : channels) {

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/exchange/support/header/HeartBeatTask.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.alibaba.dubbo.remoting.exchange.support.header;
 
+import com.alibaba.dubbo.common.Version;
 import com.alibaba.dubbo.common.logger.Logger;
 import com.alibaba.dubbo.common.logger.LoggerFactory;
 import com.alibaba.dubbo.remoting.Channel;
@@ -57,7 +58,7 @@ public void run() {
                     if ((lastRead != null && now - lastRead > heartbeat)
                             || (lastWrite != null && now - lastWrite > heartbeat)) {
                         Request req = new Request();
-                        req.setVersion("2.0.0");
+                        req.setVersion(Version.getProtocolVersion());
                         req.setTwoWay(true);
                         req.setEvent(Request.HEARTBEAT_EVENT);
                         channel.send(req);

File: dubbo-remoting/dubbo-remoting-api/src/test/java/com/alibaba/dubbo/remoting/transport/codec/DeprecatedExchangeCodec.java
Patch:
@@ -16,6 +16,7 @@
  */
 package com.alibaba.dubbo.remoting.transport.codec;
 
+import com.alibaba.dubbo.common.Version;
 import com.alibaba.dubbo.common.io.Bytes;
 import com.alibaba.dubbo.common.io.StreamUtils;
 import com.alibaba.dubbo.common.io.UnsafeByteArrayInputStream;
@@ -164,7 +165,7 @@ protected Object decodeBody(Channel channel, InputStream is, byte[] header) thro
         } else {
             // decode request.
             Request req = new Request(id);
-            req.setVersion("2.0.0");
+            req.setVersion(Version.getProtocolVersion());
             req.setTwoWay((flag & FLAG_TWOWAY) != 0);
             if ((flag & FLAG_EVENT) != 0) {
                 req.setEvent(Request.HEARTBEAT_EVENT);

File: dubbo-rpc/dubbo-rpc-hessian/src/test/java/com/alibaba/dubbo/rpc/protocol/hessian/HessianProtocolTest.java
Patch:
@@ -51,7 +51,7 @@ public void testHessianProtocol() {
         invoker.destroy();
         exporter.unexport();
     }
-    
+
     @Test
     public void testOverload() {
         HessianServiceImpl server = new HessianServiceImpl();

File: dubbo-rpc/dubbo-rpc-hessian/src/test/java/com/alibaba/dubbo/rpc/protocol/hessian/HessianService.java
Patch:
@@ -23,7 +23,7 @@
 public interface HessianService {
 
     String sayHello(String name);
-    
+
     String sayHello(String name, int times);
 
     void timeOut(int millis);

File: dubbo-rpc/dubbo-rpc-hessian/src/test/java/com/alibaba/dubbo/rpc/protocol/hessian/HessianServiceImpl.java
Patch:
@@ -27,7 +27,7 @@ public String sayHello(String name) {
         called = true;
         return "Hello, " + name;
     }
-    
+
     public String sayHello(String name, int times) {
         called = true;
         StringBuilder sb = new StringBuilder();

File: dubbo-rpc/dubbo-rpc-rmi/src/main/java/com/alibaba/dubbo/rpc/protocol/rmi/RmiProtocol.java
Patch:
@@ -78,7 +78,7 @@ public void run() {
     protected <T> T doRefer(final Class<T> serviceType, final URL url) throws RpcException {
         final RmiProxyFactoryBean rmiProxyFactoryBean = new RmiProxyFactoryBean();
         // RMI needs extra parameter since it uses customized remote invocation object
-        if (url.getParameter(Constants.DUBBO_VERSION_KEY, Version.getVersion()).equals(Version.getVersion())) {
+        if (url.getParameter(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion()).equals(Version.getProtocolVersion())) {
             // Check dubbo version on provider, this feature only support
             rmiProxyFactoryBean.setRemoteInvocationFactory(new RemoteInvocationFactory() {
                 @Override

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/com/alibaba/dubbo/rpc/protocol/thrift/AbstractTest.java
Patch:
@@ -102,12 +102,12 @@ protected void destroy() throws Exception {
             invoker = null;
         }
 
-        try{
-            if(serverTransport != null){
+        try {
+            if (serverTransport != null) {
                 // release port if used
                 serverTransport.close();
             }
-        }catch (Exception e) {
+        } catch (Exception e) {
             // ignore
         }
 

File: hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/CollectionDeserializer.java
Patch:
@@ -87,7 +87,7 @@ public Object readList(AbstractHessianInput in, int length, Class<?> expectType)
         Deserializer deserializer = null;
 
         SerializerFactory factory = findSerializerFactory(in);
-        if(expectType != null){
+        if (expectType != null) {
             deserializer = factory.getDeserializer(expectType.getName());
         }
 
@@ -114,7 +114,7 @@ public Object readLengthList(AbstractHessianInput in, int length, Class<?> expec
         Deserializer deserializer = null;
 
         SerializerFactory factory = findSerializerFactory(in);
-        if(expectType != null){
+        if (expectType != null) {
             deserializer = factory.getDeserializer(expectType.getName());
         }
 

File: hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/SerializerFactory.java
Patch:
@@ -499,7 +499,7 @@ public Object readMap(AbstractHessianInput in, String type)
      * Reads the object as a map.
      */
     public Object readMap(AbstractHessianInput in, String type, Class<?> expectKeyType, Class<?> expectValueType)
-        throws HessianProtocolException, IOException {
+            throws HessianProtocolException, IOException {
         Deserializer deserializer = getDeserializer(type);
 
         if (deserializer != null)

File: hessian-lite/src/test/java/com/alibaba/com/caucho/hessian/io/beans/Hessian2StringShortType.java
Patch:
@@ -20,9 +20,7 @@
 import java.util.Map;
 
 /**
- *
  * test short serialize & deserialize model
- *
  */
 public class Hessian2StringShortType implements Serializable {
 
@@ -32,7 +30,7 @@ public class Hessian2StringShortType implements Serializable {
 
     public Map<String, PersonType> stringPersonTypeMap;
 
-    public Hessian2StringShortType(){
+    public Hessian2StringShortType() {
 
     }
 }

File: hessian-lite/src/test/java/com/alibaba/com/caucho/hessian/io/beans/PersonType.java
Patch:
@@ -25,7 +25,7 @@ public class PersonType implements Serializable {
     int age;
     double money;
     short p1;
-    byte  p2;
+    byte p2;
     List<Short> p3;
 
     public PersonType(String name, int age, double money, short p1, byte p2, List<Short> p3) {

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ProtocolConfig.java
Patch:
@@ -454,7 +454,7 @@ public void setExtension(String extension) {
         this.extension = extension;
     }
 
-    public void destory() {
+    public void destroy() {
         if (name != null) {
             ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(name).destroy();
         }

File: dubbo-config/dubbo-config-api/src/test/java/com/alibaba/dubbo/config/ProtocolConfigTest.java
Patch:
@@ -39,7 +39,7 @@ public void testDestroy() throws Exception {
         MockProtocol2.delegate = protocol;
         ProtocolConfig protocolConfig = new ProtocolConfig();
         protocolConfig.setName("mockprotocol2");
-        protocolConfig.destory();
+        protocolConfig.destroy();
         Mockito.verify(protocol).destroy();
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -557,10 +557,10 @@ private void destroyUnusedInvokers(Map<String, Invoker<T>> oldUrlInvokerMap, Map
                         try {
                             invoker.destroy();
                             if (logger.isDebugEnabled()) {
-                                logger.debug("destory invoker[" + invoker.getUrl() + "] success. ");
+                                logger.debug("destroy invoker[" + invoker.getUrl() + "] success. ");
                             }
                         } catch (Exception e) {
-                            logger.warn("destory invoker[" + invoker.getUrl() + "] faild. " + e.getMessage(), e);
+                            logger.warn("destroy invoker[" + invoker.getUrl() + "] faild. " + e.getMessage(), e);
                         }
                     }
                 }

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -50,6 +50,7 @@
 import static com.alibaba.dubbo.common.Constants.ACCEPT_FOREIGN_IP;
 import static com.alibaba.dubbo.common.Constants.QOS_ENABLE;
 import static com.alibaba.dubbo.common.Constants.QOS_PORT;
+import static com.alibaba.dubbo.common.Constants.VALIDATION_KEY;
 
 /**
  * RegistryProtocol
@@ -227,7 +228,8 @@ private URL getRegistedProviderUrl(final Invoker<?> originInvoker) {
                 .removeParameter(Constants.BIND_PORT_KEY)
                 .removeParameter(QOS_ENABLE)
                 .removeParameter(QOS_PORT)
-                .removeParameter(ACCEPT_FOREIGN_IP);
+                .removeParameter(ACCEPT_FOREIGN_IP)
+                .removeParameter(VALIDATION_KEY);
         return registedProviderUrl;
     }
 

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java
Patch:
@@ -224,7 +224,7 @@ public static URL valueOf(String url) {
             path = url.substring(i + 1);
             url = url.substring(0, i);
         }
-        i = url.indexOf("@");
+        i = url.lastIndexOf("@");
         if (i >= 0) {
             username = url.substring(0, i);
             int j = username.indexOf(":");

File: dubbo-test/dubbo-test-examples/src/main/java/com/alibaba/dubbo/examples/annotation/AnnotationConsumer.java
Patch:
@@ -39,7 +39,7 @@ public static void main(String[] args) throws Exception {
     }
 
     @Configuration
-    @EnableDubbo(scanBasePackages = "com.alibaba.dubbo.examples.annotation.action", multipleConfig = true)
+    @EnableDubbo(scanBasePackages = "com.alibaba.dubbo.examples.annotation.action")
     @PropertySource("classpath:/com/alibaba/dubbo/examples/annotation/dubbo-consumer.properties")
     @ComponentScan(value = {"com.alibaba.dubbo.examples.annotation.action"})
     static public class ConsumerConfiguration {

File: dubbo-test/dubbo-test-examples/src/main/java/com/alibaba/dubbo/examples/annotation/AnnotationProvider.java
Patch:
@@ -36,14 +36,13 @@ public static void main(String[] args) throws Exception {
     }
 
     @Configuration
-    @EnableDubbo(scanBasePackages = "com.alibaba.dubbo.examples.annotation.impl", multipleConfig = true)
+    @EnableDubbo(scanBasePackages = "com.alibaba.dubbo.examples.annotation.impl")
     @PropertySource("classpath:/com/alibaba/dubbo/examples/annotation/dubbo-provider.properties")
-//    @ComponentScan(value = {"com.alibaba.dubbo.examples.annotation.impl"})
     static public class ProviderConfiguration {
         @Bean
         public ProviderConfig providerConfig() {
             ProviderConfig providerConfig = new ProviderConfig();
-            providerConfig.setTimeout(1000);
+            providerConfig.setTimeout(5000);
             return providerConfig;
         }
     }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/threadlocal/InternalThreadLocal.java
Patch:
@@ -58,7 +58,9 @@ public static void removeAll() {
             Object v = threadLocalMap.indexedVariable(variablesToRemoveIndex);
             if (v != null && v != InternalThreadLocalMap.UNSET) {
                 Set<InternalThreadLocal<?>> variablesToRemove = (Set<InternalThreadLocal<?>>) v;
-                for (InternalThreadLocal<?> tlv : variablesToRemove) {
+                InternalThreadLocal<?>[] variablesToRemoveArray =
+                        variablesToRemove.toArray(new InternalThreadLocal[variablesToRemove.size()]);
+                for (InternalThreadLocal<?> tlv : variablesToRemoveArray) {
                     tlv.remove(threadLocalMap);
                 }
             }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/cached/CachedThreadPool.java
Patch:
@@ -18,9 +18,9 @@
 
 import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.common.URL;
+import com.alibaba.dubbo.common.threadlocal.NamedInternalThreadFactory;
 import com.alibaba.dubbo.common.threadpool.ThreadPool;
 import com.alibaba.dubbo.common.threadpool.support.AbortPolicyWithReport;
-import com.alibaba.dubbo.common.utils.NamedThreadFactory;
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -47,7 +47,6 @@ public Executor getExecutor(URL url) {
                 queues == 0 ? new SynchronousQueue<Runnable>() :
                         (queues < 0 ? new LinkedBlockingQueue<Runnable>()
                                 : new LinkedBlockingQueue<Runnable>(queues)),
-                new NamedThreadFactory(name, true), new AbortPolicyWithReport(name, url));
+                new NamedInternalThreadFactory(name, true), new AbortPolicyWithReport(name, url));
     }
-
 }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java
Patch:
@@ -19,9 +19,9 @@
 
 import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.common.URL;
+import com.alibaba.dubbo.common.threadlocal.NamedInternalThreadFactory;
 import com.alibaba.dubbo.common.threadpool.ThreadPool;
 import com.alibaba.dubbo.common.threadpool.support.AbortPolicyWithReport;
-import com.alibaba.dubbo.common.utils.NamedThreadFactory;
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
@@ -48,7 +48,7 @@ public Executor getExecutor(URL url) {
                 alive,
                 TimeUnit.MILLISECONDS,
                 taskQueue,
-                new NamedThreadFactory(name, true),
+                new NamedInternalThreadFactory(name, true),
                 new AbortPolicyWithReport(name, url));
         taskQueue.setExecutor(executor);
         return executor;

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/fixed/FixedThreadPool.java
Patch:
@@ -18,9 +18,9 @@
 
 import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.common.URL;
+import com.alibaba.dubbo.common.threadlocal.NamedInternalThreadFactory;
 import com.alibaba.dubbo.common.threadpool.ThreadPool;
 import com.alibaba.dubbo.common.threadpool.support.AbortPolicyWithReport;
-import com.alibaba.dubbo.common.utils.NamedThreadFactory;
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -44,7 +44,7 @@ public Executor getExecutor(URL url) {
                 queues == 0 ? new SynchronousQueue<Runnable>() :
                         (queues < 0 ? new LinkedBlockingQueue<Runnable>()
                                 : new LinkedBlockingQueue<Runnable>(queues)),
-                new NamedThreadFactory(name, true), new AbortPolicyWithReport(name, url));
+                new NamedInternalThreadFactory(name, true), new AbortPolicyWithReport(name, url));
     }
 
 }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/limited/LimitedThreadPool.java
Patch:
@@ -19,9 +19,9 @@
 
 import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.common.URL;
+import com.alibaba.dubbo.common.threadlocal.NamedInternalThreadFactory;
 import com.alibaba.dubbo.common.threadpool.ThreadPool;
 import com.alibaba.dubbo.common.threadpool.support.AbortPolicyWithReport;
-import com.alibaba.dubbo.common.utils.NamedThreadFactory;
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -45,7 +45,7 @@ public Executor getExecutor(URL url) {
                 queues == 0 ? new SynchronousQueue<Runnable>() :
                         (queues < 0 ? new LinkedBlockingQueue<Runnable>()
                                 : new LinkedBlockingQueue<Runnable>(queues)),
-                new NamedThreadFactory(name, true), new AbortPolicyWithReport(name, url));
+                new NamedInternalThreadFactory(name, true), new AbortPolicyWithReport(name, url));
     }
 
 }

File: hessian-lite/src/test/java/com/alibaba/com/caucho/hessian/io/Hessian1StringShortTest.java
Patch:
@@ -44,7 +44,7 @@ public void serialize_string_short_map_then_deserialize() throws Exception {
         stringShortMap.put("last", (short)60);
         stringShort.stringShortMap = stringShortMap;
 
-        Hessian2StringShortType deserialize = baseHessionSerialize(stringShort);
+        Hessian2StringShortType deserialize = baseHessianSerialize(stringShort);
         assertTrue(deserialize.stringShortMap != null);
         assertTrue(deserialize.stringShortMap.size() == 2);
         assertTrue(deserialize.stringShortMap.get("last") instanceof Short);
@@ -61,7 +61,7 @@ public void serialize_string_byte_map_then_deserialize() throws Exception {
         stringByteMap.put("last", (byte)60);
         stringShort.stringByteMap = stringByteMap;
 
-        Hessian2StringShortType deserialize = baseHessionSerialize(stringShort);
+        Hessian2StringShortType deserialize = baseHessianSerialize(stringShort);
         assertTrue(deserialize.stringByteMap != null);
         assertTrue(deserialize.stringByteMap.size() == 2);
         assertTrue(deserialize.stringByteMap.get("last") instanceof Byte);

File: hessian-lite/src/test/java/com/alibaba/com/caucho/hessian/io/Hessian2EnumSetTest.java
Patch:
@@ -34,23 +34,23 @@ public class Hessian2EnumSetTest extends SerializeTestBase {
     @Test
     public void singleton() throws Exception {
         EnumSet h = EnumSet.of(Type.High);
-        EnumSet set = baseHession2Serialize(h);
+        EnumSet set = baseHessian2Serialize(h);
         assertTrue(Arrays.asList(set.toArray()).contains(Type.High));
         assertFalse(Arrays.asList(set.toArray()).contains(Type.Lower));
     }
 
     @Test
     public void set() throws Exception {
         EnumSet<Type> types = EnumSet.of(Type.High, Type.Lower);
-        EnumSet set = baseHession2Serialize(types);
+        EnumSet set = baseHessian2Serialize(types);
         assertTrue(set.contains(Type.High));
         assertFalse(set.contains(Type.Normal));
     }
 
     @Test
     public void none() throws Exception {
         EnumSet<Type> types = EnumSet.noneOf(Type.class);
-        EnumSet set = baseHession2Serialize(types);
+        EnumSet set = baseHessian2Serialize(types);
         TestCase.assertEquals(set, EnumSet.noneOf(Type.class));
     }
 }

File: hessian-lite/src/test/java/com/alibaba/com/caucho/hessian/io/Hessian2StringShortTest.java
Patch:
@@ -44,7 +44,7 @@ public void serialize_string_short_map_then_deserialize() throws Exception {
         stringShortMap.put("last", (short)60);
         stringShort.stringShortMap = stringShortMap;
 
-        Hessian2StringShortType deserialize = baseHession2Serialize(stringShort);
+        Hessian2StringShortType deserialize = baseHessian2Serialize(stringShort);
         assertTrue(deserialize.stringShortMap != null);
         assertTrue(deserialize.stringShortMap.size() == 2);
         assertTrue(deserialize.stringShortMap.get("last") instanceof Short);
@@ -61,7 +61,7 @@ public void serialize_string_byte_map_then_deserialize() throws Exception {
         stringByteMap.put("last", (byte)60);
         stringShort.stringByteMap = stringByteMap;
 
-        Hessian2StringShortType deserialize = baseHession2Serialize(stringShort);
+        Hessian2StringShortType deserialize = baseHessian2Serialize(stringShort);
         assertTrue(deserialize.stringByteMap != null);
         assertTrue(deserialize.stringByteMap.size() == 2);
         assertTrue(deserialize.stringByteMap.get("last") instanceof Byte);

File: hessian-lite/src/test/java/com/alibaba/com/caucho/hessian/io/LocaleSerializerTest.java
Patch:
@@ -39,7 +39,7 @@ public void locale() throws IOException {
     }
 
     private void assertLocale(Locale locale) throws IOException {
-        TestCase.assertEquals(locale, baseHession2Serialize(locale));
-        TestCase.assertEquals(locale, baseHessionSerialize(locale));
+        TestCase.assertEquals(locale, baseHessian2Serialize(locale));
+        TestCase.assertEquals(locale, baseHessianSerialize(locale));
     }
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ArgumentConfig.java
Patch:
@@ -27,7 +27,7 @@ public class ArgumentConfig implements Serializable {
 
     private static final long serialVersionUID = -2165482463925213595L;
 
-    //arugment index -1 represents not set
+    //argument: index -1 represents not set
     private Integer index = -1;
 
     //argument type

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/status/RegistryStatusChecker.java
Patch:
@@ -33,13 +33,13 @@ public class RegistryStatusChecker implements StatusChecker {
 
     @Override
     public Status check() {
-        Collection<Registry> regsitries = AbstractRegistryFactory.getRegistries();
-        if (regsitries == null || regsitries.isEmpty()) {
+        Collection<Registry> registries = AbstractRegistryFactory.getRegistries();
+        if (registries.isEmpty()) {
             return new Status(Status.Level.UNKNOWN);
         }
         Status.Level level = Status.Level.OK;
         StringBuilder buf = new StringBuilder();
-        for (Registry registry : regsitries) {
+        for (Registry registry : registries) {
             if (buf.length() > 0) {
                 buf.append(",");
             }

File: dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/support/FailoverClusterInvokerTest.java
Patch:
@@ -135,7 +135,7 @@ public void testInvoke_retryTimes() {
             assertSame(result, ret);
             fail();
         } catch (RpcException expected) {
-            assertTrue(expected.isTimeout());
+            assertTrue((expected.isTimeout() || expected.getCode() == 0));
             assertTrue(expected.getMessage().indexOf((retries + 1) + " times") > 0);
         }
     }

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractServiceConfig.java
Patch:
@@ -207,13 +207,13 @@ public String getFilter() {
     @Override
     @Parameter(key = Constants.EXPORTER_LISTENER_KEY, append = true)
     public String getListener() {
-        return super.getListener();
+        return listener;
     }
 
     @Override
     public void setListener(String listener) {
         checkMultiExtension(ExporterListener.class, "listener", listener);
-        super.setListener(listener);
+        this.listener = listener;
     }
 
     public Boolean isRegister() {

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/Constants.java
Patch:
@@ -633,6 +633,8 @@ public class Constants {
 
     public static final boolean DEFAULT_HESSIAN_OVERLOAD_METHOD = false;
 
+    public static final String MULTICAST = "multicast";
+
     /*
      * private Constants(){ }
      */

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
Patch:
@@ -83,7 +83,7 @@ public Result invoke(Invocation invocation) throws RpcException {
                     throw e;
                 } else {
                     if (logger.isWarnEnabled()) {
-                        logger.info("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : " + directory.getUrl(), e);
+                        logger.warn("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : " + directory.getUrl(), e);
                     }
                     result = doMockInvoke(invocation, e);
                 }

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java
Patch:
@@ -116,6 +116,7 @@ public void test_loadProperties_oneFile_notRootPath() throws Exception {
         expected.put("fixed", "com.alibaba.dubbo.common.threadpool.support.fixed.FixedThreadPool");
         expected.put("cached", "com.alibaba.dubbo.common.threadpool.support.cached.CachedThreadPool");
         expected.put("limited", "com.alibaba.dubbo.common.threadpool.support.limited.LimitedThreadPool");
+        expected.put("eager", "com.alibaba.dubbo.common.threadpool.support.eager.EagerThreadPool");
 
         Assert.assertEquals(expected, p);
     }

File: dubbo-remoting/dubbo-remoting-grizzly/src/main/java/com/alibaba/dubbo/remoting/transport/grizzly/GrizzlyChannel.java
Patch:
@@ -75,7 +75,7 @@ static GrizzlyChannel getOrAddChannel(Connection<?> connection, URL url, Channel
         return ret;
     }
 
-    static void removeChannelIfDisconnectd(Connection<?> connection) {
+    static void removeChannelIfDisconnected(Connection<?> connection) {
         if (connection != null && !connection.isOpen()) {
             ATTRIBUTE.remove(connection);
         }
@@ -119,7 +119,7 @@ public void close() {
             logger.warn(e.getMessage(), e);
         }
         try {
-            removeChannelIfDisconnectd(connection);
+            removeChannelIfDisconnected(connection);
         } catch (Exception e) {
             logger.warn(e.getMessage(), e);
         }

File: dubbo-remoting/dubbo-remoting-grizzly/src/main/java/com/alibaba/dubbo/remoting/transport/grizzly/GrizzlyClient.java
Patch:
@@ -83,7 +83,7 @@ protected void doConnect() throws Throwable {
     @Override
     protected void doDisConnect() throws Throwable {
         try {
-            GrizzlyChannel.removeChannelIfDisconnectd(connection);
+            GrizzlyChannel.removeChannelIfDisconnected(connection);
         } catch (Throwable t) {
             logger.warn(t.getMessage());
         }

File: dubbo-remoting/dubbo-remoting-grizzly/src/main/java/com/alibaba/dubbo/remoting/transport/grizzly/GrizzlyCodecAdapter.java
Patch:
@@ -66,14 +66,14 @@ public NextAction handleWrite(FilterChainContext context) throws IOException {
             Object msg = context.getMessage();
             codec.encode(channel, channelBuffer, msg);
 
-            GrizzlyChannel.removeChannelIfDisconnectd(connection);
+            GrizzlyChannel.removeChannelIfDisconnected(connection);
             Buffer buffer = connection.getTransport().getMemoryManager().allocate(channelBuffer.readableBytes());
             buffer.put(channelBuffer.toByteBuffer());
             buffer.flip();
             buffer.allowBufferDispose(true);
             context.setMessage(buffer);
         } finally {
-            GrizzlyChannel.removeChannelIfDisconnectd(connection);
+            GrizzlyChannel.removeChannelIfDisconnected(connection);
         }
         return context.getInvokeAction();
     }
@@ -134,7 +134,7 @@ public NextAction handleRead(FilterChainContext context) throws IOException {
                 return context.getInvokeAction();
             }
         } finally {
-            GrizzlyChannel.removeChannelIfDisconnectd(connection);
+            GrizzlyChannel.removeChannelIfDisconnected(connection);
         }
     }
 

File: dubbo-remoting/dubbo-remoting-mina/src/main/java/com/alibaba/dubbo/remoting/transport/mina/MinaChannel.java
Patch:
@@ -66,7 +66,7 @@ static MinaChannel getOrAddChannel(IoSession session, URL url, ChannelHandler ha
         return ret;
     }
 
-    static void removeChannelIfDisconnectd(IoSession session) {
+    static void removeChannelIfDisconnected(IoSession session) {
         if (session != null && !session.isConnected()) {
             session.removeAttribute(CHANNEL_KEY);
         }
@@ -112,7 +112,7 @@ public void close() {
             logger.warn(e.getMessage(), e);
         }
         try {
-            removeChannelIfDisconnectd(session);
+            removeChannelIfDisconnected(session);
         } catch (Exception e) {
             logger.warn(e.getMessage(), e);
         }

File: dubbo-remoting/dubbo-remoting-mina/src/main/java/com/alibaba/dubbo/remoting/transport/mina/MinaClient.java
Patch:
@@ -107,7 +107,7 @@ public void operationComplete(IoFuture future) {
                                     }
                                     oldSession.close();
                                 } finally {
-                                    MinaChannel.removeChannelIfDisconnectd(oldSession);
+                                    MinaChannel.removeChannelIfDisconnected(oldSession);
                                 }
                             }
                         } finally {
@@ -119,7 +119,7 @@ public void operationComplete(IoFuture future) {
                                     newSession.close();
                                 } finally {
                                     MinaClient.this.session = null;
-                                    MinaChannel.removeChannelIfDisconnectd(newSession);
+                                    MinaChannel.removeChannelIfDisconnected(newSession);
                                 }
                             } else {
                                 MinaClient.this.session = newSession;
@@ -150,7 +150,7 @@ public void operationComplete(IoFuture future) {
     @Override
     protected void doDisConnect() throws Throwable {
         try {
-            MinaChannel.removeChannelIfDisconnectd(session);
+            MinaChannel.removeChannelIfDisconnected(session);
         } catch (Throwable t) {
             logger.warn(t.getMessage());
         }

File: dubbo-remoting/dubbo-remoting-mina/src/main/java/com/alibaba/dubbo/remoting/transport/mina/MinaCodecAdapter.java
Patch:
@@ -77,7 +77,7 @@ public void encode(IoSession session, Object msg, ProtocolEncoderOutput out) thr
             try {
                 codec.encode(channel, buffer, msg);
             } finally {
-                MinaChannel.removeChannelIfDisconnectd(session);
+                MinaChannel.removeChannelIfDisconnected(session);
             }
             out.write(ByteBuffer.wrap(buffer.toByteBuffer()));
             out.flush();
@@ -141,7 +141,7 @@ public void decode(IoSession session, ByteBuffer in, ProtocolDecoderOutput out)
                 } else {
                     buffer = ChannelBuffers.EMPTY_BUFFER;
                 }
-                MinaChannel.removeChannelIfDisconnectd(session);
+                MinaChannel.removeChannelIfDisconnected(session);
             }
         }
 

File: dubbo-remoting/dubbo-remoting-netty4/src/main/java/com/alibaba/dubbo/remoting/transport/netty4/logging/FormattingTuple.java
Patch:
@@ -46,9 +46,9 @@ static Object[] trimmedCopy(Object[] argArray) {
         if (argArray == null || argArray.length == 0) {
             throw new IllegalStateException("non-sensical empty or null argument array");
         }
-        final int trimemdLen = argArray.length - 1;
-        Object[] trimmed = new Object[trimemdLen];
-        System.arraycopy(argArray, 0, trimmed, 0, trimemdLen);
+        final int trimmedLen = argArray.length - 1;
+        Object[] trimmed = new Object[trimmedLen];
+        System.arraycopy(argArray, 0, trimmed, 0, trimmedLen);
         return trimmed;
     }
 

File: hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/LocaleSerializer.java
Patch:
@@ -68,7 +68,7 @@ public void writeObject(Object obj, AbstractHessianOutput out)
         else {
             Locale locale = (Locale) obj;
 
-            out.writeObject(new LocaleHandle(locale.getLanguage(), locale.getCountry(), locale.getVariant()));
+            out.writeObject(new LocaleHandle(locale.toString()));
         }
     }
 }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java
Patch:
@@ -52,7 +52,7 @@
  * <li>192.168.1.3:20880<br>
  * for this case, url protocol = null, url host = 192.168.1.3, port = 20880, url path = null
  * <li>file:///home/user1/router.js?type=script<br>
- * for this case, url protocol = null, url host = null, url path = home/user1/router.js
+ * for this case, url protocol = file, url host = null, url path = home/user1/router.js
  * <li>file://home/user1/router.js?type=script<br>
  * for this case, url protocol = file, url host = home, url path = user1/router.js
  * <li>file:///D:/1/router.js?type=script<br>

File: dubbo-demo/dubbo-demo-provider/src/main/java/com/alibaba/dubbo/demo/provider/DemoServiceImpl.java
Patch:
@@ -26,7 +26,7 @@ public class DemoServiceImpl implements DemoService {
 
     public String sayHello(String name) {
         System.out.println("[" + new SimpleDateFormat("HH:mm:ss").format(new Date()) + "] Hello " + name + ", request from consumer: " + RpcContext.getContext().getRemoteAddress());
-        return "Hello " + name + ", response form provider: " + RpcContext.getContext().getLocalAddress();
+        return "Hello " + name + ", response from provider: " + RpcContext.getContext().getLocalAddress();
     }
 
-}
\ No newline at end of file
+}

File: dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/util/PropertySourcesUtils.java
Patch:
@@ -52,9 +52,7 @@ public static Map<String, String> getSubProperties(PropertySources propertySourc
                     if (name.startsWith(normalizedPrefix)) {
                         String subName = name.substring(normalizedPrefix.length());
                         Object value = source.getProperty(name);
-                        if (value instanceof String) {
-                            subProperties.put(subName, String.valueOf(value));
-                        }
+                        subProperties.put(subName, String.valueOf(value));
                     }
                 }
             }

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -305,7 +305,7 @@ private <T> Invoker<T> doRefer(Cluster cluster, Registry registry, Class<T> type
                         + "," + Constants.ROUTERS_CATEGORY));
 
         Invoker invoker = cluster.join(directory);
-        ProviderConsumerRegTable.registerConsuemr(invoker, url, subscribeUrl, directory);
+        ProviderConsumerRegTable.registerConsumer(invoker, url, subscribeUrl, directory);
         return invoker;
     }
 
@@ -504,4 +504,4 @@ public void run() {
             });
         }
     }
-}
\ No newline at end of file
+}

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/support/ProviderConsumerRegTable.java
Patch:
@@ -73,7 +73,7 @@ public static ProviderInvokerWrapper getProviderWrapper(Invoker invoker) {
         return null;
     }
 
-    public static void registerConsuemr(Invoker invoker, URL registryUrl, URL consumerUrl, RegistryDirectory registryDirectory) {
+    public static void registerConsumer(Invoker invoker, URL registryUrl, URL consumerUrl, RegistryDirectory registryDirectory) {
         ConsumerInvokerWrapper wrapperInvoker = new ConsumerInvokerWrapper(invoker, registryUrl, consumerUrl, registryDirectory);
         String serviceUniqueName = consumerUrl.getServiceKey();
         Set<ConsumerInvokerWrapper> invokers = consumerInvokers.get(serviceUniqueName);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/exchange/support/header/HeaderExchangeClient.java
Patch:
@@ -49,8 +49,8 @@ public class HeaderExchangeClient implements ExchangeClient {
     private final ExchangeChannel channel;
     // heartbeat timer
     private ScheduledFuture<?> heartbeatTimer;
+    // heartbeat(ms), default value is 0 , won't execute a heartbeat.
     private int heartbeat;
-    // heartbeat timeout (ms), default value is 0 , won't execute a heartbeat.
     private int heartbeatTimeout;
 
     public HeaderExchangeClient(Client client, boolean needHeartbeat) {
@@ -66,7 +66,7 @@ public HeaderExchangeClient(Client client, boolean needHeartbeat) {
             throw new IllegalStateException("heartbeatTimeout < heartbeatInterval * 2");
         }
         if (needHeartbeat) {
-            startHeatbeatTimer();
+            startHeartbeatTimer();
         }
     }
 
@@ -160,7 +160,7 @@ public boolean hasAttribute(String key) {
         return channel.hasAttribute(key);
     }
 
-    private void startHeatbeatTimer() {
+    private void startHeartbeatTimer() {
         stopHeartbeatTimer();
         if (heartbeat > 0) {
             heartbeatTimer = scheduled.scheduleWithFixedDelay(

File: dubbo-serialization/dubbo-serialization-fastjson/src/test/java/com/alibaba/dubbo/common/serialize/serialization/FastJsonSerializationTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.dubbo.common.model.media.MediaContent;
 import com.alibaba.dubbo.common.serialize.ObjectInput;
 import com.alibaba.dubbo.common.serialize.ObjectOutput;
-import com.alibaba.dubbo.common.serialize.support.json.FastJsonSerialization;
+import com.alibaba.dubbo.common.serialize.fastjson.FastJsonSerialization;
 import com.alibaba.fastjson.JSONException;
 
 import org.junit.Ignore;

File: dubbo-serialization/dubbo-serialization-fst/src/main/java/com/alibaba/dubbo/common/serialize/fst/FstFactory.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.serialize.support.fst;
+package com.alibaba.dubbo.common.serialize.fst;
 
 import com.alibaba.dubbo.common.serialize.support.SerializableClassRegistry;
 

File: dubbo-serialization/dubbo-serialization-fst/src/main/java/com/alibaba/dubbo/common/serialize/fst/FstObjectOutput.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.serialize.support.fst;
+package com.alibaba.dubbo.common.serialize.fst;
 
 import com.alibaba.dubbo.common.serialize.ObjectOutput;
 

File: dubbo-serialization/dubbo-serialization-fst/src/main/java/com/alibaba/dubbo/common/serialize/fst/FstSerialization.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.serialize.support.fst;
+package com.alibaba.dubbo.common.serialize.fst;
 
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.common.serialize.ObjectInput;

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/com/alibaba/dubbo/common/serialize/hessian2/Hessian2ObjectInput.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.serialize.support.hessian;
+package com.alibaba.dubbo.common.serialize.hessian2;
 
 import com.alibaba.com.caucho.hessian.io.Hessian2Input;
 import com.alibaba.dubbo.common.serialize.ObjectInput;

File: dubbo-serialization/dubbo-serialization-hessian2/src/main/java/com/alibaba/dubbo/common/serialize/hessian2/Hessian2ObjectOutput.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.serialize.support.hessian;
+package com.alibaba.dubbo.common.serialize.hessian2;
 
 import com.alibaba.com.caucho.hessian.io.Hessian2Output;
 import com.alibaba.dubbo.common.serialize.ObjectOutput;

File: dubbo-serialization/dubbo-serialization-hessian2/src/test/java/com/alibaba/dubbo/common/serialize/serialization/Hessian2SerializationTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.alibaba.dubbo.common.serialize.ObjectInput;
 import com.alibaba.dubbo.common.serialize.ObjectOutput;
-import com.alibaba.dubbo.common.serialize.support.hessian.Hessian2Serialization;
+import com.alibaba.dubbo.common.serialize.hessian2.Hessian2Serialization;
 
 import org.junit.Ignore;
 import org.junit.Test;

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/com/alibaba/dubbo/common/serialize/java/CompactedObjectInputStream.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.serialize.support.java;
+package com.alibaba.dubbo.common.serialize.java;
 
 import com.alibaba.dubbo.common.utils.ClassHelper;
 

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/com/alibaba/dubbo/common/serialize/java/CompactedObjectOutputStream.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.serialize.support.java;
+package com.alibaba.dubbo.common.serialize.java;
 
 import java.io.IOException;
 import java.io.ObjectOutputStream;

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/com/alibaba/dubbo/common/serialize/java/JavaObjectInput.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.serialize.support.java;
+package com.alibaba.dubbo.common.serialize.java;
 
-import com.alibaba.dubbo.common.serialize.support.nativejava.NativeJavaObjectInput;
+import com.alibaba.dubbo.common.serialize.nativejava.NativeJavaObjectInput;
 
 import java.io.IOException;
 import java.io.InputStream;

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/com/alibaba/dubbo/common/serialize/java/JavaObjectOutput.java
Patch:
@@ -14,9 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.dubbo.common.serialize.support.java;
+package com.alibaba.dubbo.common.serialize.java;
 
-import com.alibaba.dubbo.common.serialize.support.nativejava.NativeJavaObjectOutput;
+
+import com.alibaba.dubbo.common.serialize.nativejava.NativeJavaObjectOutput;
 
 import java.io.IOException;
 import java.io.ObjectOutputStream;

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/com/alibaba/dubbo/common/serialize/nativejava/NativeJavaObjectInput.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.serialize.support.nativejava;
+package com.alibaba.dubbo.common.serialize.nativejava;
 
 import com.alibaba.dubbo.common.serialize.ObjectInput;
 import com.alibaba.dubbo.common.utils.Assert;

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/com/alibaba/dubbo/common/serialize/nativejava/NativeJavaObjectOutput.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.serialize.support.nativejava;
+package com.alibaba.dubbo.common.serialize.nativejava;
 
 import com.alibaba.dubbo.common.serialize.ObjectOutput;
 import com.alibaba.dubbo.common.utils.Assert;

File: dubbo-serialization/dubbo-serialization-jdk/src/main/java/com/alibaba/dubbo/common/serialize/nativejava/NativeJavaSerialization.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.dubbo.common.serialize.support.nativejava;
+package com.alibaba.dubbo.common.serialize.nativejava;
 
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.common.serialize.ObjectInput;

File: dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/CacheFactory.java
Patch:
@@ -19,6 +19,7 @@
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.common.extension.Adaptive;
 import com.alibaba.dubbo.common.extension.SPI;
+import com.alibaba.dubbo.rpc.Invocation;
 
 /**
  * CacheFactory
@@ -27,6 +28,6 @@
 public interface CacheFactory {
 
     @Adaptive("cache")
-    Cache getCache(URL url);
+    Cache getCache(URL url, Invocation invocation);
 
 }

File: dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java
Patch:
@@ -43,7 +43,7 @@ public void setCacheFactory(CacheFactory cacheFactory) {
 
     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
         if (cacheFactory != null && ConfigUtils.isNotEmpty(invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.CACHE_KEY))) {
-            Cache cache = cacheFactory.getCache(invoker.getUrl().addParameter(Constants.METHOD_KEY, invocation.getMethodName()));
+            Cache cache = cacheFactory.getCache(invoker.getUrl(), invocation);
             if (cache != null) {
                 String key = StringUtils.toArgumentString(invocation.getArguments());
                 Object value = cache.get(key);

File: dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/util/PropertySourcesUtils.java
Patch:
@@ -52,9 +52,7 @@ public static Map<String, String> getSubProperties(PropertySources propertySourc
                     if (name.startsWith(normalizedPrefix)) {
                         String subName = name.substring(normalizedPrefix.length());
                         Object value = source.getProperty(name);
-                        if (value instanceof String) {
-                            subProperties.put(subName, String.valueOf(value));
-                        }
+                        subProperties.put(subName, String.valueOf(value));
                     }
                 }
             }

File: hessian-lite/src/test/java/com/alibaba/com/caucho/hessian/io/beans/PersonType.java
Patch:
@@ -1,7 +1,6 @@
-package com.alibaba.com.caucho.hessian.io;
+package com.alibaba.com.caucho.hessian.io.beans;
 
 import java.io.Serializable;
-import java.util.Arrays;
 import java.util.List;
 
 /**

File: dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/command/impl/Ls.java
Patch:
@@ -37,13 +37,13 @@ public class Ls implements BaseCommand {
     @Override
     public String execute(CommandContext commandContext, String[] args) {
         StringBuilder result = new StringBuilder();
-        result.append(listProvier());
+        result.append(listProvider());
         result.append(listConsumer());
 
         return result.toString();
     }
 
-    public String listProvier() {
+    public String listProvider() {
         StringBuilder stringBuilder = new StringBuilder();
         stringBuilder.append("As Provider side:\n");
         Collection<ProviderModel> ProviderModelList = ApplicationModel.allProviderModels();

File: dubbo-rpc/dubbo-rpc-default/src/test/java/com/alibaba/dubbo/rpc/protocol/dubbo/ImplicitCallBackTest.java
Patch:
@@ -242,7 +242,7 @@ public void test_Async_Future() throws Exception {
         Person ret = demoProxy.get(requestId);
         Assert.assertEquals(null, ret);
         Future<Person> pFuture = RpcContext.getContext().getFuture();
-        ret = pFuture.get(1000, TimeUnit.MICROSECONDS);
+        ret = pFuture.get(1000 * 1000, TimeUnit.MICROSECONDS);
         Assert.assertEquals(requestId, ret.getId());
         destroyService();
     }
@@ -264,8 +264,8 @@ public void test_Async_Future_Multi() throws Exception {
         Assert.assertEquals(null, ret2);
         Future<Person> p2Future = RpcContext.getContext().getFuture();
 
-        ret = p1Future.get(1000, TimeUnit.MICROSECONDS);
-        ret2 = p2Future.get(1000, TimeUnit.MICROSECONDS);
+        ret = p1Future.get(1000 * 1000, TimeUnit.MICROSECONDS);
+        ret2 = p2Future.get(1000 * 1000, TimeUnit.MICROSECONDS);
         Assert.assertEquals(requestId1, ret.getId());
         Assert.assertEquals(requestId2, ret.getId());
         destroyService();

File: dubbo-rpc/dubbo-rpc-default/src/test/java/com/alibaba/dubbo/rpc/protocol/dubbo/ImplicitCallBackTest.java
Patch:
@@ -283,7 +283,7 @@ public void test_Async_Future_Ex() throws Exception {
             Person ret = demoProxy.get(requestId);
             Assert.assertEquals(null, ret);
             Future<Person> pFuture = RpcContext.getContext().getFuture();
-            ret = pFuture.get(1000, TimeUnit.MICROSECONDS);
+            ret = pFuture.get(1000 * 1000, TimeUnit.MICROSECONDS);
             Assert.assertEquals(requestId, ret.getId());
         } finally {
             destroyService();

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/beanutil/JavaBeanDescriptor.java
Patch:
@@ -137,7 +137,7 @@ public String setEnumNameProperty(String name) {
 
     public String getEnumPropertyName() {
         if (isEnumType()) {
-            Object result = getProperty(ENUM_PROPERTY_NAME).toString();
+            Object result = getProperty(ENUM_PROPERTY_NAME);
             return result == null ? null : result.toString();
         }
         throw new IllegalStateException("The instance is not a enum wrapper");

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -330,7 +330,8 @@ public boolean hasExtension(String name) {
         if (name == null || name.length() == 0)
             throw new IllegalArgumentException("Extension name == null");
         try {
-            return getExtensionClass(name) != null;
+            this.getExtensionClass(name);
+            return true;
         } catch (Throwable t) {
             return false;
         }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/CollectionUtils.java
Patch:
@@ -94,7 +94,7 @@ public static Map<String, String> split(List<String> list, String separator) {
             return null;
         }
         Map<String, String> map = new HashMap<String, String>();
-        if (list == null || list.isEmpty()) {
+        if (list.isEmpty()) {
             return map;
         }
         for (String item : list) {
@@ -113,7 +113,7 @@ public static List<String> join(Map<String, String> map, String separator) {
             return null;
         }
         List<String> list = new ArrayList<String>();
-        if (map == null || map.size() == 0) {
+        if (map.size() == 0) {
             return list;
         }
         for (Map.Entry<String, String> entry : map.entrySet()) {

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java
Patch:
@@ -268,7 +268,7 @@ && isPrimitive(method.getReturnType())) {
                     if (parameter == null || !parameter.attribute())
                         continue;
                     String key;
-                    if (parameter != null && parameter.key() != null && parameter.key().length() > 0) {
+                    if (parameter.key() != null && parameter.key().length() > 0) {
                         key = parameter.key();
                     } else {
                         int i = name.startsWith("get") ? 3 : 2;

File: dubbo-registry/dubbo-registry-multicast/src/main/java/com/alibaba/dubbo/registry/multicast/MulticastRegistry.java
Patch:
@@ -395,13 +395,13 @@ public List<URL> lookup(URL url) {
                 urls.addAll(values);
             }
         }
-        if (urls == null || urls.isEmpty()) {
+        if (urls.isEmpty()) {
             List<URL> cacheUrls = getCacheUrls(url);
             if (cacheUrls != null && !cacheUrls.isEmpty()) {
                 urls.addAll(cacheUrls);
             }
         }
-        if (urls == null || urls.isEmpty()) {
+        if (urls.isEmpty()) {
             for (URL u : getRegistered()) {
                 if (UrlUtils.isMatch(url, u)) {
                     urls.add(u);

File: dubbo-rpc/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java
Patch:
@@ -107,7 +107,7 @@ private void fireInvokeCallback(final Invoker<?> invoker, final Invocation invoc
         if (onInvokeMethod == null || onInvokeInst == null) {
             throw new IllegalStateException("service:" + invoker.getUrl().getServiceKey() + " has a onreturn callback config , but no such " + (onInvokeMethod == null ? "method" : "instance") + " found. url:" + invoker.getUrl());
         }
-        if (onInvokeMethod != null && !onInvokeMethod.isAccessible()) {
+        if (!onInvokeMethod.isAccessible()) {
             onInvokeMethod.setAccessible(true);
         }
 
@@ -133,7 +133,7 @@ private void fireReturnCallback(final Invoker<?> invoker, final Invocation invoc
         if (onReturnMethod == null || onReturnInst == null) {
             throw new IllegalStateException("service:" + invoker.getUrl().getServiceKey() + " has a onreturn callback config , but no such " + (onReturnMethod == null ? "method" : "instance") + " found. url:" + invoker.getUrl());
         }
-        if (onReturnMethod != null && !onReturnMethod.isAccessible()) {
+        if (!onReturnMethod.isAccessible()) {
             onReturnMethod.setAccessible(true);
         }
 
@@ -173,7 +173,7 @@ private void fireThrowCallback(final Invoker<?> invoker, final Invocation invoca
         if (onthrowMethod == null || onthrowInst == null) {
             throw new IllegalStateException("service:" + invoker.getUrl().getServiceKey() + " has a onthrow callback config , but no such " + (onthrowMethod == null ? "method" : "instance") + " found. url:" + invoker.getUrl());
         }
-        if (onthrowMethod != null && !onthrowMethod.isAccessible()) {
+        if (!onthrowMethod.isAccessible()) {
             onthrowMethod.setAccessible(true);
         }
         Class<?>[] rParaTypes = onthrowMethod.getParameterTypes();

File: dubbo-rpc/dubbo-rpc-http/src/main/java/com/alibaba/dubbo/rpc/protocol/http/HttpProtocol.java
Patch:
@@ -109,7 +109,7 @@ protected void prepareConnection(HttpURLConnection con,
             HttpComponentsHttpInvokerRequestExecutor httpInvokerRequestExecutor = new HttpComponentsHttpInvokerRequestExecutor();
             httpInvokerRequestExecutor.setReadTimeout(url.getParameter(Constants.CONNECT_TIMEOUT_KEY, Constants.DEFAULT_CONNECT_TIMEOUT));
             httpProxyFactoryBean.setHttpInvokerRequestExecutor(httpInvokerRequestExecutor);
-        } else if (client != null && client.length() > 0) {
+        } else {
             throw new IllegalStateException("Unsupported http protocol client " + client + ", only supported: simple, commons");
         }
         httpProxyFactoryBean.afterPropertiesSet();

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/com/alibaba/dubbo/rpc/protocol/thrift/ThriftProtocolTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.alibaba.dubbo.rpc.protocol.thrift;
 
 import com.alibaba.dubbo.common.URL;
+import com.alibaba.dubbo.common.utils.NetUtils;
 import com.alibaba.dubbo.rpc.Invoker;
 import com.alibaba.dubbo.rpc.gen.dubbo.Demo;
 
@@ -25,7 +26,7 @@
 
 public class ThriftProtocolTest extends AbstractTest {
 
-    public static final int DEFAULT_PORT = 30660;
+    public final int DEFAULT_PORT = NetUtils.getAvailablePort();
 
     private ThriftProtocol protocol;
 

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/annotation/Reference.java
Patch:
@@ -29,7 +29,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.FIELD, ElementType.METHOD})
+@Target({ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE})
 public @interface Reference {
 
     Class<?> interfaceClass() default void.class;

File: dubbo-rpc/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/FutureAdapter.java
Patch:
@@ -67,7 +67,7 @@ public V get() throws InterruptedException, ExecutionException {
 
     @SuppressWarnings("unchecked")
     public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
-        int timeoutInMillis = (int) unit.convert(timeout, TimeUnit.MILLISECONDS);
+        int timeoutInMillis = (int) TimeUnit.MILLISECONDS.convert(timeout, unit);
         try {
             return (V) (((Result) future.get(timeoutInMillis)).recreate());
         } catch (com.alibaba.dubbo.remoting.TimeoutException e) {

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/annotation/Reference.java
Patch:
@@ -29,7 +29,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.FIELD, ElementType.METHOD})
+@Target({ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE})
 public @interface Reference {
 
     Class<?> interfaceClass() default void.class;

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java
Patch:
@@ -304,7 +304,7 @@ private void init() {
         appendParameters(map, module);
         appendParameters(map, consumer, Constants.DEFAULT_KEY);
         appendParameters(map, this);
-        String prifix = StringUtils.getServiceKey(map);
+        String prefix = StringUtils.getServiceKey(map);
         if (methods != null && methods.size() > 0) {
             for (MethodConfig method : methods) {
                 appendParameters(map, method, method.getName());
@@ -315,7 +315,7 @@ private void init() {
                         map.put(method.getName() + ".retries", "0");
                     }
                 }
-                appendAttributes(attributes, method, prifix + "." + method.getName());
+                appendAttributes(attributes, method, prefix + "." + method.getName());
                 checkAndConvertImplicitConfig(method, map, attributes);
             }
         }
@@ -473,7 +473,7 @@ public void setInterface(Class<?> interfaceClass) {
             throw new IllegalStateException("The interface class " + interfaceClass + " is not a interface!");
         }
         this.interfaceClass = interfaceClass;
-        setInterface(interfaceClass == null ? (String) null : interfaceClass.getName());
+        setInterface(interfaceClass == null ? null : interfaceClass.getName());
     }
 
     public void setInterface(String interfaceName) {

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/router/condition/ConditionRouter.java
Patch:
@@ -204,6 +204,9 @@ private boolean matchCondition(Map<String, MatchPair> condition, URL url, URL pa
                 sampleValue = invocation.getMethodName();
             } else {
                 sampleValue = sample.get(key);
+                if (sampleValue == null) {
+                    sampleValue = sample.get(Constants.DEFAULT_KEY_PREFIX + key);
+                }
             }
             if (sampleValue != null) {
                 if (!matchPair.getValue().isMatch(sampleValue, param)) {

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/ConcurrentHashSet.java
Patch:
@@ -21,14 +21,15 @@
 import java.util.Iterator;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
 
 public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E>, java.io.Serializable {
 
     private static final long serialVersionUID = -8672117787651310382L;
 
     private static final Object PRESENT = new Object();
 
-    private final ConcurrentHashMap<E, Object> map;
+    private final ConcurrentMap<E, Object> map;
 
     public ConcurrentHashSet() {
         map = new ConcurrentHashMap<E, Object>();

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/NetUtils.java
Patch:
@@ -183,7 +183,7 @@ public static InetAddress getLocalAddress() {
     }
 
     public static String getLogHost() {
-        InetAddress address = LOCAL_ADDRESS;
+        InetAddress address = getLocalAddress();
         return address == null ? LOCALHOST : address.getHostAddress();
     }
 

File: dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/ServiceBean.java
Patch:
@@ -263,7 +263,9 @@ && getInterface() != null && getInterface().length() > 0
     }
 
     public void destroy() throws Exception {
-        unexport();
+        // This will only be called for singleton scope bean, and expected to be called by spring shutdown hook when BeanFactory/ApplicationContext destroys.
+        // We will guarantee dubbo related resources being released with dubbo shutdown hook.
+        //unexport();
     }
 
     // merged from dubbox

File: dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.alibaba.dubbo.common.Version;
 import com.alibaba.dubbo.config.*;
-import com.alibaba.dubbo.config.spring.AnnotationBean;
 import com.alibaba.dubbo.config.spring.ReferenceBean;
 import com.alibaba.dubbo.config.spring.ServiceBean;
 import org.springframework.beans.factory.xml.NamespaceHandlerSupport;
@@ -44,7 +43,7 @@ public void init() {
         registerBeanDefinitionParser("protocol", new DubboBeanDefinitionParser(ProtocolConfig.class, true));
         registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true));
         registerBeanDefinitionParser("reference", new DubboBeanDefinitionParser(ReferenceBean.class, false));
-        registerBeanDefinitionParser("annotation", new DubboBeanDefinitionParser(AnnotationBean.class, true));
+        registerBeanDefinitionParser("annotation", new AnnotationBeanDefinitionParser());
     }
 
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/context/annotation/DubboConfigBindingRegistrarTest.java
Patch:
@@ -69,7 +69,7 @@ public void testRegisterBeanDefinitionsForMultiple() {
 
     }
 
-    @EnableDubboConfigBinding(prefix = "${application.prefix}", type = ApplicationConfig.class, multiple = true)
+    @EnableDubboConfigBinding(prefix = "${application.prefixes}", type = ApplicationConfig.class, multiple = true)
     @PropertySource("META-INF/config.properties")
     private static class TestMultipleApplicationConfig {
 

File: dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/context/annotation/DubboConfigBindingsRegistrarTest.java
Patch:
@@ -49,7 +49,7 @@ public void test() {
 
     @EnableDubboConfigBindings({
             @EnableDubboConfigBinding(prefix = "${application.prefix}", type = ApplicationConfig.class),
-            @EnableDubboConfigBinding(prefix = "dubbo.application.applicationBean", type = ApplicationConfig.class)
+            @EnableDubboConfigBinding(prefix = "dubbo.applications.applicationBean", type = ApplicationConfig.class)
     })
     @PropertySource("META-INF/config.properties")
     private static class TestConfig {

File: dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/context/annotation/consumer/ConsumerConfiguration.java
Patch:
@@ -23,7 +23,6 @@
 import com.alibaba.dubbo.config.spring.context.annotation.DubboComponentScan;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.ImportResource;
 import org.springframework.context.annotation.PropertySource;
 
 @Configuration("consumerConfiguration")

File: dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/context/annotation/provider/ProviderConfiguration.java
Patch:
@@ -20,10 +20,7 @@
 import com.alibaba.dubbo.config.ProtocolConfig;
 import com.alibaba.dubbo.config.RegistryConfig;
 import com.alibaba.dubbo.config.spring.context.annotation.DubboComponentScan;
-import com.alibaba.dubbo.rpc.Protocol;
-import com.sun.org.apache.regexp.internal.RE;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.ImportResource;
 import org.springframework.context.annotation.Primary;
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.transaction.PlatformTransactionManager;

File: dubbo-filter/dubbo-filter-validation/src/main/java/com/alibaba/dubbo/validation/filter/ValidationFilter.java
Patch:
@@ -24,6 +24,7 @@
 import com.alibaba.dubbo.rpc.Invoker;
 import com.alibaba.dubbo.rpc.Result;
 import com.alibaba.dubbo.rpc.RpcException;
+import com.alibaba.dubbo.rpc.RpcResult;
 import com.alibaba.dubbo.validation.Validation;
 import com.alibaba.dubbo.validation.Validator;
 
@@ -50,7 +51,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             } catch (RpcException e) {
                 throw e;
             } catch (Throwable t) {
-                throw new RpcException(t.getMessage(), t);
+                return new RpcResult(t);
             }
         }
         return invoker.invoke(invocation);

File: dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/command/impl/Quit.java
Patch:
@@ -19,12 +19,12 @@
 import com.alibaba.dubbo.qos.command.BaseCommand;
 import com.alibaba.dubbo.qos.command.CommandContext;
 import com.alibaba.dubbo.qos.command.annotation.Cmd;
-import com.alibaba.dubbo.qos.common.Constants;
+import com.alibaba.dubbo.qos.common.QosConstants;
 
 @Cmd(name = "quit",summary = "quit telnet console")
 public class Quit implements BaseCommand {
     @Override
     public String execute(CommandContext commandContext, String[] args) {
-        return Constants.CLOSE;
+        return QosConstants.CLOSE;
     }
 }

File: dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/server/DubboLogo.java
Patch:
@@ -18,7 +18,7 @@
 
 public class DubboLogo {
     public static String dubbo =
-            "  ████████▄  ███    █▄  ▀█████████▄  ▀█████████▄   ▄██████▄  \n" +
+                    "  ████████▄  ███    █▄  ▀█████████▄  ▀█████████▄   ▄██████▄  \n" +
                     "  ███   ▀███ ███    ███   ███    ███   ███    ███ ███    ███ \n" +
                     "  ███    ███ ███    ███   ███    ███   ███    ███ ███    ███ \n" +
                     "  ███    ███ ███    ███  ▄███▄▄▄██▀   ▄███▄▄▄██▀  ███    ███ \n" +

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -571,7 +571,7 @@ public List<Invoker<T>> doList(Invocation invocation) {
             // 1. No service provider 2. Service providers are disabled
             throw new RpcException(RpcException.FORBIDDEN_EXCEPTION,
                 "No provider available from registry " + getUrl().getAddress() + " for service " + getConsumerUrl().getServiceKey() + " on consumer " +  NetUtils.getLocalHost()
-                    + " use dubbo version " + Version.getVersion() + ", may be providers disabled or not registered ?");
+                        + " use dubbo version " + Version.getVersion() + ", please check status of providers(disabled, not registered or in blacklist).");
         }
         List<Invoker<T>> invokers = null;
         Map<String, List<Invoker<T>>> localMethodInvokerMap = this.methodInvokerMap; // local reference

File: dubbo-registry/dubbo-registry-default/src/test/java/com/alibaba/dubbo/registry/dubbo/RegistryProtocolTest.java
Patch:
@@ -113,7 +113,9 @@ public void testNotifyOverride() throws Exception {
         assertEquals("y", exporter.getInvoker().getUrl().getParameter("x"));
 
         exporter.unexport();
-        assertEquals(false, exporter.getInvoker().isAvailable());
+//        int timeout = ConfigUtils.getServerShutdownTimeout();
+//        Thread.sleep(timeout + 1000);
+//        assertEquals(false, exporter.getInvoker().isAvailable());
         destroyRegistryProtocol();
 
     }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/telnet/codec/TelnetCodec.java
Patch:
@@ -77,7 +77,7 @@ private static Charset getCharset(Channel channel) {
             }
         }
         try {
-            return Charset.forName("GBK");
+            return Charset.forName(Constants.DEFAULT_CHARSET);
         } catch (Throwable t) {
             logger.warn(t.getMessage(), t);
         }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/transport/ChannelHandlerDelegate.java
Patch:
@@ -19,5 +19,5 @@
 import com.alibaba.dubbo.remoting.ChannelHandler;
 
 public interface ChannelHandlerDelegate extends ChannelHandler {
-    public ChannelHandler getHandler();
+    ChannelHandler getHandler();
 }

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/com/alibaba/dubbo/rpc/protocol/thrift/ThriftProtocol.java
Patch:
@@ -19,6 +19,7 @@
 import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.common.extension.ExtensionLoader;
+import com.alibaba.dubbo.common.utils.ConfigUtils;
 import com.alibaba.dubbo.remoting.Channel;
 import com.alibaba.dubbo.remoting.RemotingException;
 import com.alibaba.dubbo.remoting.Transporter;
@@ -137,7 +138,7 @@ public void destroy() {
                     if (logger.isInfoEnabled()) {
                         logger.info("Close dubbo server: " + server.getLocalAddress());
                     }
-                    server.close(getServerShutdownTimeout());
+                    server.close(ConfigUtils.getServerShutdownTimeout());
                 } catch (Throwable t) {
                     logger.warn(t.getMessage(), t);
                 }

File: dubbo-test/dubbo-test-examples/src/main/java/com/alibaba/dubbo/examples/validation/ValidationProvider.java
Patch:
@@ -24,6 +24,7 @@
 public class ValidationProvider {
 
     public static void main(String[] args) throws Exception {
+        System.setProperty("java.net.preferIPv4Stack", "true");
         String config = ValidationProvider.class.getPackage().getName().replace('.', '/') + "/validation-provider.xml";
         ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(config);
         context.start();

File: hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/JavaDeserializer.java
Patch:
@@ -621,7 +621,7 @@ void deserialize(AbstractHessianInput in, Object obj)
 
             try {
                 java.util.Date date = (java.util.Date) in.readObject();
-                value = new java.sql.Time(date.getTime());
+                if (date != null) value = new java.sql.Time(date.getTime());
 
                 _field.set(obj, value);
             } catch (Exception e) {

File: hessian-lite/src/test/java/com/alibaba/com/caucho/hessian/io/beans/Type.java
Patch:
@@ -15,8 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.com.caucho.hessian.io;
-
+package com.alibaba.com.caucho.hessian.io.beans;
 public enum Type {
     High, Normal, Lower
 }

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java
Patch:
@@ -43,7 +43,7 @@ public void test_valueOf_noProtocolAndHost() throws Exception {
         assertNull(url.getUsername());
         assertNull(url.getPassword());
         assertNull(url.getHost());
-        assertEquals(12, url.getPort());
+        assertEquals(0, url.getPort());
         assertEquals("context/path", url.getPath());
         assertEquals(2, url.getParameters().size());
         assertEquals("1.0.0", url.getParameter("version"));

File: dubbo-rpc/dubbo-rpc-thrift/src/main/java/com/alibaba/dubbo/rpc/protocol/thrift/ThriftProtocol.java
Patch:
@@ -19,6 +19,7 @@
 import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.common.extension.ExtensionLoader;
+import com.alibaba.dubbo.common.utils.ConfigUtils;
 import com.alibaba.dubbo.remoting.Channel;
 import com.alibaba.dubbo.remoting.RemotingException;
 import com.alibaba.dubbo.remoting.Transporter;
@@ -137,7 +138,7 @@ public void destroy() {
                     if (logger.isInfoEnabled()) {
                         logger.info("Close dubbo server: " + server.getLocalAddress());
                     }
-                    server.close(getServerShutdownTimeout());
+                    server.close(ConfigUtils.getServerShutdownTimeout());
                 } catch (Throwable t) {
                     logger.warn(t.getMessage(), t);
                 }

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -571,7 +571,7 @@ public List<Invoker<T>> doList(Invocation invocation) {
             // 1. No service provider 2. Service providers are disabled
             throw new RpcException(RpcException.FORBIDDEN_EXCEPTION,
                 "No provider available from registry " + getUrl().getAddress() + " for service " + getConsumerUrl().getServiceKey() + " on consumer " +  NetUtils.getLocalHost()
-                    + " use dubbo version " + Version.getVersion() + ", may be providers disabled or not registered ?");
+                        + " use dubbo version " + Version.getVersion() + ", please check status of providers(disabled, not registered or in blacklist).");
         }
         List<Invoker<T>> invokers = null;
         Map<String, List<Invoker<T>>> localMethodInvokerMap = this.methodInvokerMap; // local reference

File: dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/schema/DubboNamespaceHandler.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.alibaba.dubbo.common.Version;
 import com.alibaba.dubbo.config.*;
-import com.alibaba.dubbo.config.spring.AnnotationBean;
 import com.alibaba.dubbo.config.spring.ReferenceBean;
 import com.alibaba.dubbo.config.spring.ServiceBean;
 import org.springframework.beans.factory.xml.NamespaceHandlerSupport;
@@ -44,7 +43,7 @@ public void init() {
         registerBeanDefinitionParser("protocol", new DubboBeanDefinitionParser(ProtocolConfig.class, true));
         registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true));
         registerBeanDefinitionParser("reference", new DubboBeanDefinitionParser(ReferenceBean.class, false));
-        registerBeanDefinitionParser("annotation", new DubboBeanDefinitionParser(AnnotationBean.class, true));
+        registerBeanDefinitionParser("annotation", new AnnotationBeanDefinitionParser());
     }
 
 }
\ No newline at end of file

File: dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/context/annotation/DubboConfigBindingRegistrarTest.java
Patch:
@@ -69,7 +69,7 @@ public void testRegisterBeanDefinitionsForMultiple() {
 
     }
 
-    @EnableDubboConfigBinding(prefix = "${application.prefix}", type = ApplicationConfig.class, multiple = true)
+    @EnableDubboConfigBinding(prefix = "${application.prefixes}", type = ApplicationConfig.class, multiple = true)
     @PropertySource("META-INF/config.properties")
     private static class TestMultipleApplicationConfig {
 

File: dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/context/annotation/DubboConfigBindingsRegistrarTest.java
Patch:
@@ -49,7 +49,7 @@ public void test() {
 
     @EnableDubboConfigBindings({
             @EnableDubboConfigBinding(prefix = "${application.prefix}", type = ApplicationConfig.class),
-            @EnableDubboConfigBinding(prefix = "dubbo.application.applicationBean", type = ApplicationConfig.class)
+            @EnableDubboConfigBinding(prefix = "dubbo.applications.applicationBean", type = ApplicationConfig.class)
     })
     @PropertySource("META-INF/config.properties")
     private static class TestConfig {

File: dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/context/annotation/consumer/ConsumerConfiguration.java
Patch:
@@ -23,7 +23,6 @@
 import com.alibaba.dubbo.config.spring.context.annotation.DubboComponentScan;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.ImportResource;
 import org.springframework.context.annotation.PropertySource;
 
 @Configuration("consumerConfiguration")

File: dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/context/annotation/provider/ProviderConfiguration.java
Patch:
@@ -20,10 +20,7 @@
 import com.alibaba.dubbo.config.ProtocolConfig;
 import com.alibaba.dubbo.config.RegistryConfig;
 import com.alibaba.dubbo.config.spring.context.annotation.DubboComponentScan;
-import com.alibaba.dubbo.rpc.Protocol;
-import com.sun.org.apache.regexp.internal.RE;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.ImportResource;
 import org.springframework.context.annotation.Primary;
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.transaction.PlatformTransactionManager;

File: dubbo-rpc/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.common.Version;
 import com.alibaba.dubbo.common.extension.ExtensionLoader;
 import com.alibaba.dubbo.common.utils.NetUtils;
 import com.alibaba.dubbo.common.utils.StringUtils;
@@ -342,8 +341,6 @@ private ExchangeClient initClient(URL url) {
         // client type setting.
         String str = url.getParameter(Constants.CLIENT_KEY, url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_CLIENT));
 
-        String version = url.getParameter(Constants.DUBBO_VERSION_KEY);
-        boolean compatible = (version != null && version.startsWith("1.0."));
         url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME);
         // enable heartbeat by default
         url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));

File: hessian-lite/src/test/java/com/alibaba/com/caucho/hessian/io/beans/Type.java
Patch:
@@ -15,8 +15,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.com.caucho.hessian.io;
-
+package com.alibaba.com.caucho.hessian.io.beans;
 public enum Type {
     High, Normal, Lower
 }

File: dubbo-filter/dubbo-filter-validation/src/main/java/com/alibaba/dubbo/validation/filter/ValidationFilter.java
Patch:
@@ -24,6 +24,7 @@
 import com.alibaba.dubbo.rpc.Invoker;
 import com.alibaba.dubbo.rpc.Result;
 import com.alibaba.dubbo.rpc.RpcException;
+import com.alibaba.dubbo.rpc.RpcResult;
 import com.alibaba.dubbo.validation.Validation;
 import com.alibaba.dubbo.validation.Validator;
 
@@ -50,7 +51,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             } catch (RpcException e) {
                 throw e;
             } catch (Throwable t) {
-                throw new RpcException(t.getMessage(), t);
+                return new RpcResult(t);
             }
         }
         return invoker.invoke(invocation);

File: hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/JavaDeserializer.java
Patch:
@@ -621,7 +621,7 @@ void deserialize(AbstractHessianInput in, Object obj)
 
             try {
                 java.util.Date date = (java.util.Date) in.readObject();
-                value = new java.sql.Time(date.getTime());
+                if (date != null) value = new java.sql.Time(date.getTime());
 
                 _field.set(obj, value);
             } catch (Exception e) {

File: dubbo-test/dubbo-test-examples/src/main/java/com/alibaba/dubbo/examples/rest/RestConsumer.java
Patch:
@@ -35,7 +35,7 @@ public static void main(String[] args) throws Exception {
         System.out.println("SUCCESS: registered user with id " + userService.registerUser(user).getId());
 
         RpcContext.getContext().setAttachment("clientName", "demo");
-        RpcContext.getContext().setAttachment("clientImpl", "dubbox");
+        RpcContext.getContext().setAttachment("clientImpl", "dubbo");
         System.out.println("SUCCESS: got user " + userService.getUser(1L));
         System.in.read();
     }

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/ZookeeperTransporter.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.dubbo.common.extension.Adaptive;
 import com.alibaba.dubbo.common.extension.SPI;
 
-@SPI("zkclient")
+@SPI("curator")
 public interface ZookeeperTransporter {
 
     @Adaptive({Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY})

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/router/condition/ConditionRouter.java
Patch:
@@ -204,6 +204,9 @@ private boolean matchCondition(Map<String, MatchPair> condition, URL url, URL pa
                 sampleValue = invocation.getMethodName();
             } else {
                 sampleValue = sample.get(key);
+                if (sampleValue == null) {
+                    sampleValue = sample.get(Constants.DEFAULT_KEY_PREFIX + key);
+                }
             }
             if (sampleValue != null) {
                 if (!matchPair.getValue().isMatch(sampleValue, param)) {

File: dubbo-admin/src/main/java/com/alibaba/dubbo/governance/web/governance/module/screen/Providers.java
Patch:
@@ -130,7 +130,7 @@ else if (application != null && application.length() > 0) {
      */
     private Map<String, Set<String>> getServiceAppMap(List<Provider> providers) {
         Map<String, Set<String>> serviceAppMap = new HashMap<String, Set<String>>();
-        if (providers != null && providers.size() >= 0) {
+        if (providers != null && providers.size() > 0) {
             for (Provider provider : providers) {
                 Set<String> appSet;
                 String service = provider.getService();

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/NetUtils.java
Patch:
@@ -183,7 +183,7 @@ public static InetAddress getLocalAddress() {
     }
 
     public static String getLogHost() {
-        InetAddress address = LOCAL_ADDRESS;
+        InetAddress address = getLocalAddress();
         return address == null ? LOCALHOST : address.getHostAddress();
     }
 

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/ZookeeperTransporter.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.dubbo.common.extension.Adaptive;
 import com.alibaba.dubbo.common.extension.SPI;
 
-@SPI("zkclient")
+@SPI("curator")
 public interface ZookeeperTransporter {
 
     @Adaptive({Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY})

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java
Patch:
@@ -60,7 +60,7 @@ public abstract class AbstractConfig implements Serializable {
 
     private static final Pattern PATTERN_KEY = Pattern.compile("[*,\\-._0-9a-zA-Z]+");
     private static final Map<String, String> legacyProperties = new HashMap<String, String>();
-    private static final String[] SUFFIXS = new String[]{"Config", "Bean"};
+    private static final String[] SUFFIXES = new String[]{"Config", "Bean"};
 
     static {
         legacyProperties.put("dubbo.protocol.name", "dubbo.service.protocol");
@@ -166,7 +166,7 @@ protected static void appendProperties(AbstractConfig config) {
 
     private static String getTagName(Class<?> cls) {
         String tag = cls.getSimpleName();
-        for (String suffix : SUFFIXS) {
+        for (String suffix : SUFFIXES) {
             if (tag.endsWith(suffix)) {
                 tag = tag.substring(0, tag.length() - suffix.length());
                 break;

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java
Patch:
@@ -60,7 +60,7 @@ public abstract class AbstractConfig implements Serializable {
 
     private static final Pattern PATTERN_KEY = Pattern.compile("[*,\\-._0-9a-zA-Z]+");
     private static final Map<String, String> legacyProperties = new HashMap<String, String>();
-    private static final String[] SUFFIXS = new String[]{"Config", "Bean"};
+    private static final String[] SUFFIXES = new String[]{"Config", "Bean"};
 
     static {
         legacyProperties.put("dubbo.protocol.name", "dubbo.service.protocol");
@@ -166,7 +166,7 @@ protected static void appendProperties(AbstractConfig config) {
 
     private static String getTagName(Class<?> cls) {
         String tag = cls.getSimpleName();
-        for (String suffix : SUFFIXS) {
+        for (String suffix : SUFFIXES) {
             if (tag.endsWith(suffix)) {
                 tag = tag.substring(0, tag.length() - suffix.length());
                 break;

File: dubbo-admin/src/main/java/com/alibaba/dubbo/governance/web/common/interceptor/LocaleValve.java
Patch:
@@ -73,7 +73,7 @@ public void invoke(PipelineContext pipelineContext) throws Exception {
             }
         }
         if (locale == null || "".equals(locale)) {
-            locale = "zh";
+            locale = "en";
         }
 
         Locale newLocale = Locale.SIMPLIFIED_CHINESE;

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ServiceConfig.java
Patch:
@@ -403,7 +403,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r
                                             if (argtypes[argument.getIndex()].getName().equals(argument.getType())) {
                                                 appendParameters(map, argument, method.getName() + "." + argument.getIndex());
                                             } else {
-                                                throw new IllegalArgumentException("argument config error : the index attribute and type attirbute not match :index :" + argument.getIndex() + ", type:" + argument.getType());
+                                                throw new IllegalArgumentException("argument config error : the index attribute and type attribute not match :index :" + argument.getIndex() + ", type:" + argument.getType());
                                             }
                                         } else {
                                             // multiple callbacks in the method
@@ -412,7 +412,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r
                                                 if (argclazz.getName().equals(argument.getType())) {
                                                     appendParameters(map, argument, method.getName() + "." + j);
                                                     if (argument.getIndex() != -1 && argument.getIndex() != j) {
-                                                        throw new IllegalArgumentException("argument config error : the index attribute and type attirbute not match :index :" + argument.getIndex() + ", type:" + argument.getType());
+                                                        throw new IllegalArgumentException("argument config error : the index attribute and type attribute not match :index :" + argument.getIndex() + ", type:" + argument.getType());
                                                     }
                                                 }
                                             }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -706,7 +706,7 @@ private T createAdaptiveExtension() {
         try {
             return injectExtension((T) getAdaptiveExtensionClass().newInstance());
         } catch (Exception e) {
-            throw new IllegalStateException("Can not create adaptive extenstion " + type + ", cause: " + e.getMessage(), e);
+            throw new IllegalStateException("Can not create adaptive extension " + type + ", cause: " + e.getMessage(), e);
         }
     }
 

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/extensionloader/ExtensionLoader_Adaptive_Test.java
Patch:
@@ -148,7 +148,7 @@ public void test_getAdaptiveExtension_ExceptionWhenNoAdaptiveMethodOnInterface()
             fail();
         } catch (IllegalStateException expected) {
             assertThat(expected.getMessage(),
-                    allOf(containsString("Can not create adaptive extenstion interface com.alibaba.dubbo.common.extensionloader.ext5.NoAdaptiveMethodExt"),
+                    allOf(containsString("Can not create adaptive extension interface com.alibaba.dubbo.common.extensionloader.ext5.NoAdaptiveMethodExt"),
                             containsString("No adaptive method on extension com.alibaba.dubbo.common.extensionloader.ext5.NoAdaptiveMethodExt, refuse to create the adaptive class")));
         }
         // report same error when get is invoked for multiple times
@@ -157,7 +157,7 @@ public void test_getAdaptiveExtension_ExceptionWhenNoAdaptiveMethodOnInterface()
             fail();
         } catch (IllegalStateException expected) {
             assertThat(expected.getMessage(),
-                    allOf(containsString("Can not create adaptive extenstion interface com.alibaba.dubbo.common.extensionloader.ext5.NoAdaptiveMethodExt"),
+                    allOf(containsString("Can not create adaptive extension interface com.alibaba.dubbo.common.extensionloader.ext5.NoAdaptiveMethodExt"),
                             containsString("No adaptive method on extension com.alibaba.dubbo.common.extensionloader.ext5.NoAdaptiveMethodExt, refuse to create the adaptive class")));
         }
     }

File: dubbo-monitor/dubbo-monitor-api/src/main/java/com/alibaba/dubbo/monitor/support/AbstractMonitorFactory.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.concurrent.locks.ReentrantLock;
 
 /**
- * AbstractMonitorFactroy. (SPI, Singleton, ThreadSafe)
+ * AbstractMonitorFactory. (SPI, Singleton, ThreadSafe)
  *
  * @author william.liangf
  */

File: dubbo-monitor/dubbo-monitor-default/src/main/java/com/alibaba/dubbo/monitor/dubbo/DubboMonitorFactory.java
Patch:
@@ -25,11 +25,11 @@
 import com.alibaba.dubbo.rpc.ProxyFactory;
 
 /**
- * DefaultMonitorFactroy
+ * DefaultMonitorFactory
  *
  * @author william.liangf
  */
-public class DubboMonitorFactroy extends AbstractMonitorFactory {
+public class DubboMonitorFactory extends AbstractMonitorFactory {
 
     private Protocol protocol;
 

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/extensionloader/ExtensionLoader_Adaptive_Test.java
Patch:
@@ -188,7 +188,7 @@ public void test_getAdaptiveExtension_ExceptionWhenNoUrlAttribute() throws Excep
             ExtensionLoader.getExtensionLoader(NoUrlParamExt.class).getAdaptiveExtension();
             fail();
         } catch (Exception expected) {
-            assertThat(expected.getMessage(), containsString("fail to create adative class for interface "));
+            assertThat(expected.getMessage(), containsString("fail to create adaptive class for interface "));
             assertThat(expected.getMessage(), containsString(": not found url parameter or url attribute in parameters of method "));
         }
     }

File: dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/qos/server/Server.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.dubbo.common.logger.Logger;
 import com.alibaba.dubbo.common.logger.LoggerFactory;
+import com.alibaba.dubbo.common.utils.ConfigUtils;
 import com.alibaba.qos.common.Constants;
 import com.alibaba.qos.server.handler.QosProcessHandler;
 import io.netty.bootstrap.ServerBootstrap;
@@ -14,7 +15,6 @@
 import io.netty.util.concurrent.DefaultThreadFactory;
 
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  * <pre>
@@ -36,7 +36,7 @@ public static final Server getInstance() {
         return INSTANCE;
     }
 
-    private final int port = Integer.getInteger(Constants.QOS_PORT, Constants.DEFAULT_PORT);
+    private int port = Integer.parseInt(ConfigUtils.getProperty(Constants.QOS_PORT, Constants.DEFAULT_PORT + ""));
 
     public int getPort() {
         return port;
@@ -67,7 +67,7 @@ public void setWelcome(String welcome) {
      * 启动server，绑定端口
      */
     public void start() throws Throwable {
-        if (!hasStarted.compareAndSet(false,true)){
+        if (!hasStarted.compareAndSet(false, true)) {
             return;
         }
         boss = new NioEventLoopGroup(0, new DefaultThreadFactory("qos-boss", true));

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/router/file/FileRouterFactory.java
Patch:
@@ -50,7 +50,9 @@ public Router getRouter(URL url) {
                 }
             }
             String rule = IOUtils.read(new FileReader(new File(url.getAbsolutePath())));
-            URL script = url.setProtocol(protocol).addParameter(Constants.TYPE_KEY, type).addParameterAndEncoded(Constants.RULE_KEY, rule);
+
+            boolean runtime = url.getParameter(Constants.RUNTIME_KEY, false);
+            URL script = url.setProtocol(protocol).addParameter(Constants.TYPE_KEY, type).addParameter(Constants.RUNTIME_KEY, runtime).addParameterAndEncoded(Constants.RULE_KEY, rule);
 
             return routerFactory.getRouter(script);
         } catch (IOException e) {

File: dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.alibaba.dubbo.rpc.cluster.router.file;
 
+import com.alibaba.dubbo.common.Constants;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.common.extension.ExtensionLoader;
 import com.alibaba.dubbo.rpc.Invocation;
@@ -132,6 +133,7 @@ public void testRouteByMethodName() {
     private URL initUrl(String filename) {
         filename = getClass().getClassLoader().getResource(getClass().getPackage().getName().replace('.', '/') + "/" + filename).toString();
         URL url = URL.valueOf(filename);
+        url = url.addParameter(Constants.RUNTIME_KEY, true);
         return url;
     }
 

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/directory/AbstractDirectory.java
Patch:
@@ -75,7 +75,7 @@ public List<Invoker<T>> list(Invocation invocation) throws RpcException {
         if (localRouters != null && localRouters.size() > 0) {
             for (Router router : localRouters) {
                 try {
-                    if (router.getUrl() == null || router.getUrl().getParameter(Constants.RUNTIME_KEY, true)) {
+                    if (router.getUrl() != null && router.getUrl().getParameter(Constants.RUNTIME_KEY, false)) {
                         invokers = router.route(invokers, getConsumerUrl(), invocation);
                     }
                 } catch (Throwable t) {

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -446,7 +446,7 @@ private List<Invoker<T>> route(List<Invoker<T>> invokers, String method) {
         List<Router> routers = getRouters();
         if (routers != null) {
             for (Router router : routers) {
-                if (router.getUrl() != null && !router.getUrl().getParameter(Constants.RUNTIME_KEY, true)) {
+                if (router.getUrl() != null) {
                     invokers = router.route(invokers, getConsumerUrl(), invocation);
                 }
             }

File: dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.dubbo.config.spring.beans.factory.annotation;
 
-import com.alibaba.dubbo.config.*;
+import com.alibaba.dubbo.config.ConsumerConfig;
 import com.alibaba.dubbo.config.annotation.Reference;
 import com.alibaba.dubbo.config.spring.ReferenceBean;
 import org.springframework.context.ApplicationContext;

File: dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/context/annotation/DubboComponentScan.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.dubbo.config.annotation.Reference;
 import com.alibaba.dubbo.config.annotation.Service;
 import org.springframework.context.annotation.Import;
-import org.springframework.core.annotation.AliasFor;
 
 import java.lang.annotation.*;
 
@@ -29,7 +28,6 @@
      *
      * @return the base packages to scan
      */
-    @AliasFor("basePackages")
     String[] value() default {};
 
     /**
@@ -41,7 +39,6 @@
      *
      * @return the base packages to scan
      */
-    @AliasFor("value")
     String[] basePackages() default {};
 
     /**

File: dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/context/annotation/provider/ProviderConfiguration.java
Patch:
@@ -3,13 +3,15 @@
 import com.alibaba.dubbo.config.spring.context.annotation.DubboComponentScan;
 
 import org.springframework.context.annotation.ImportResource;
+import org.springframework.context.annotation.PropertySource;
 
 /**
  * @author ken.lj
  * @date 2017/11/3
  */
 @DubboComponentScan(basePackages = "com.alibaba.dubbo.config.spring.context.annotation")
 @ImportResource("META-INF/spring/dubbo-annotation-provider.xml")
+@PropertySource("META-INF/default.properties")
 public class ProviderConfiguration {
 
 

File: dubbo-simple/dubbo-monitor-simple/src/main/java/com/alibaba/dubbo/monitor/simple/pages/ChartsPageHandler.java
Patch:
@@ -16,10 +16,10 @@
 package com.alibaba.dubbo.monitor.simple.pages;
 
 import com.alibaba.dubbo.common.URL;
+import com.alibaba.dubbo.common.utils.ConfigUtils;
 import com.alibaba.dubbo.container.page.Page;
 import com.alibaba.dubbo.container.page.PageHandler;
 import com.alibaba.dubbo.monitor.MonitorService;
-import com.alibaba.dubbo.monitor.simple.SimpleMonitorService;
 
 import java.io.File;
 import java.text.SimpleDateFormat;
@@ -44,7 +44,7 @@ public Page handle(URL url) {
             date = new SimpleDateFormat("yyyyMMdd").format(new Date());
         }
         List<List<String>> rows = new ArrayList<List<String>>();
-        String directory = SimpleMonitorService.getInstance().getChartsDirectory();
+        String directory = ConfigUtils.getProperty("dubbo.charts.directory");
         File chartsDir = new File(directory);
         String filename = directory + "/" + date + "/" + service;
         File serviceDir = new File(filename);

File: dubbo-simple/dubbo-monitor-simple/src/main/java/com/alibaba/dubbo/monitor/simple/pages/StatisticsPageHandler.java
Patch:
@@ -16,11 +16,11 @@
 package com.alibaba.dubbo.monitor.simple.pages;
 
 import com.alibaba.dubbo.common.URL;
+import com.alibaba.dubbo.common.utils.ConfigUtils;
 import com.alibaba.dubbo.container.page.Page;
 import com.alibaba.dubbo.container.page.PageHandler;
 import com.alibaba.dubbo.monitor.MonitorService;
 import com.alibaba.dubbo.monitor.simple.CountUtils;
-import com.alibaba.dubbo.monitor.simple.SimpleMonitorService;
 
 import java.io.File;
 import java.text.SimpleDateFormat;
@@ -48,7 +48,7 @@ public Page handle(URL url) {
         }
         String expand = url.getParameter("expand");
         List<List<String>> rows = new ArrayList<List<String>>();
-        String directory = SimpleMonitorService.getInstance().getStatisticsDirectory();
+        String directory = ConfigUtils.getProperty("dubbo.statistics.directory");
         String filename = directory + "/" + date + "/" + service;
         File serviceDir = new File(filename);
         if (serviceDir.exists()) {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/proxy/AbstractProxyInvoker.java
Patch:
@@ -81,8 +81,8 @@ public Result invoke(Invocation invocation) throws RpcException {
 
     @Override
     public String toString() {
-        return getInterface() + " -> " + getUrl() == null ? " " : getUrl().toString();
+        return getInterface() + " -> " + (getUrl() == null ? " " : getUrl().toString());
     }
 
 
-}
\ No newline at end of file
+}

File: dubbo-filter/dubbo-filter-validation/src/main/java/com/alibaba/dubbo/validation/support/jvalidation/JValidator.java
Patch:
@@ -150,7 +150,7 @@ private static Object getMethodParameterBean(Class<?> clazz, Method method, Obje
                     ctField.getFieldInfo().addAttribute(attribute);
                     ctClass.addField(ctField);
                 }
-                parameterClass = ctClass.toClass();
+                parameterClass = ctClass.toClass(clazz.getClassLoader(), null);
             }
             Object parameterBean = parameterClass.newInstance();
             for (int i = 0; i < args.length; i++) {

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/concurrent/ListenableFuture.java
Patch:
@@ -116,4 +116,6 @@ public interface ListenableFuture<V> extends Future<V> {
      *                                    immediately but the executor rejected it.
      */
     void addListener(Runnable listener, Executor executor);
+
+    void addListener(Runnable listener);
 }

File: dubbo-monitor/dubbo-monitor-api/src/main/java/com/alibaba/dubbo/monitor/support/AbstractMonitorFactory.java
Patch:
@@ -80,7 +80,7 @@ public Monitor getMonitor(URL url) {
 
             final URL monitorUrl = url;
             final ListenableFutureTask<Monitor> listenableFutureTask = ListenableFutureTask.create(new MonitorCreator(monitorUrl));
-            listenableFutureTask.addListener(new MonitorListener(key), executor);
+            listenableFutureTask.addListener(new MonitorListener(key));
             executor.execute(listenableFutureTask);
             FUTURES.put(key, listenableFutureTask);
 

File: dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java
Patch:
@@ -27,7 +27,7 @@ public CuratorZookeeperClient(URL url) {
         try {
             CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()
                     .connectString(url.getBackupAddress())
-                    .retryPolicy(new RetryNTimes(Integer.MAX_VALUE, 1000))
+                    .retryPolicy(new RetryNTimes(1, 1000))
                     .connectionTimeoutMs(5000);
             String authority = url.getAuthority();
             if (authority != null && authority.length() > 0) {

File: dubbo-monitor/dubbo-monitor-api/src/main/java/com/alibaba/dubbo/monitor/support/MonitorFilter.java
Patch:
@@ -87,6 +87,9 @@ private void collect(Invoker<?> invoker, Invocation invocation, Result result, S
             String method = RpcUtils.getMethodName(invocation); // 获取方法名
             URL url = invoker.getUrl().getUrlParameter(Constants.MONITOR_KEY);
             Monitor monitor = monitorFactory.getMonitor(url);
+            if (monitor == null) {
+                return;
+            }
             int localPort;
             String remoteKey;
             String remoteValue;

File: dubbo-config/dubbo-config-api/src/test/java/com/alibaba/dubbo/config/validation/ValidationTest.java
Patch:
@@ -89,6 +89,7 @@ public void testValidation() {
                 } catch (RpcException e) {
                     ConstraintViolationException ve = (ConstraintViolationException) e.getCause();
                     Set<ConstraintViolation<?>> violations = ve.getConstraintViolations();
+                    Assert.assertTrue(violations.size() == 3);
                     Assert.assertNotNull(violations);
                 }
 

File: dubbo-filter/dubbo-filter-validation/src/main/java/com/alibaba/dubbo/validation/support/jvalidation/JValidator.java
Patch:
@@ -231,7 +231,7 @@ else if (memberValue instanceof ArrayMemberValue) {
     }
 
     public void validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) throws Exception {
-        String methodClassName = clazz.getName() + "_" + toUpperMethoName(methodName);
+        String methodClassName = clazz.getName() + "$" + toUpperMethoName(methodName);
         Class<?> methodClass = null;
         try {
             methodClass = Class.forName(methodClassName, false, Thread.currentThread().getContextClassLoader());

File: dubbo-admin/src/main/java/com/alibaba/dubbo/governance/service/impl/OverrideServiceImpl.java
Patch:
@@ -75,7 +75,7 @@ public void enableOverride(Long id) {
             return;
         }
 
-        URL newOverride = oldOverride.addParameter("enabled", "enabled");
+        URL newOverride = oldOverride.addParameter("enabled", true);
         registryService.unregister(oldOverride);
         registryService.register(newOverride);
 

File: dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/ConfigTest.java
Patch:
@@ -47,6 +47,7 @@
 import com.alibaba.dubbo.rpc.service.GenericService;
 
 import junit.framework.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.beans.factory.BeanCreationException;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
@@ -68,6 +69,7 @@
  *
  * @author william.liangf
  */
+@Ignore
 public class ConfigTest {
 
     private static void unexportService(ServiceConfig<?> config) {

File: dubbo-monitor/dubbo-monitor-api/src/test/java/com/alibaba/dubbo/monitor/support/AbstractMonitorFactoryTest.java
Patch:
@@ -70,7 +70,7 @@ public void testMonitorFactoryCache() throws Exception {
     @Test
     public void testMonitorFactoryIpCache() throws Exception {
         Monitor monitor1 = monitorFactory.getMonitor(URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":2233"));
-        Monitor monitor2 = monitorFactory.getMonitor(URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostAddress() + ":2233"));
+        Monitor monitor2 = monitorFactory.getMonitor(URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":2233"));
         Assert.assertEquals(monitor1, monitor2);
     }
 

File: dubbo-registry/dubbo-registry-default/src/test/java/com/alibaba/dubbo/registry/dubbo/RegistryProtocolTest.java
Patch:
@@ -53,7 +53,7 @@ public class RegistryProtocolTest {
     }
 
     final String service = "com.alibaba.dubbo.registry.protocol.DemoService:1.0.0";
-    final String serviceUrl = "dubbo://127.0.0.1:9453/" + service + "?notify=true&methods=test1,test2";
+    final String serviceUrl = "dubbo://127.0.0.1:9453/" + service + "?notify=true&methods=test1,test2&side=con&side=consumer";
     final URL registryUrl = URL.valueOf("registry://127.0.0.1:9090/");
     final private Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
 

File: dubbo-rpc/dubbo-rpc-thrift/src/test/java/com/alibaba/dubbo/rpc/protocol/thrift/ThriftCodecTest.java
Patch:
@@ -35,13 +35,15 @@
 import org.apache.thrift.transport.TIOStreamTransport;
 import org.apache.thrift.transport.TTransport;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
 
 /**
  * @author <a href="mailto:gang.lvg@alibaba-inc.com">gang.lvg</a>
  */
+@Ignore
 public class ThriftCodecTest {
 
     private ThriftCodec codec = new ThriftCodec();

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ServiceConfig.java
Patch:
@@ -279,7 +279,7 @@ protected synchronized void doExport() {
                 throw new IllegalStateException(e.getMessage(), e);
             }
             if (!interfaceClass.isAssignableFrom(localClass)) {
-                throw new IllegalStateException("The local implemention class " + localClass.getName() + " not implement interface " + interfaceName);
+                throw new IllegalStateException("The local implementation class " + localClass.getName() + " not implement interface " + interfaceName);
             }
         }
         if (stub != null) {
@@ -293,7 +293,7 @@ protected synchronized void doExport() {
                 throw new IllegalStateException(e.getMessage(), e);
             }
             if (!interfaceClass.isAssignableFrom(stubClass)) {
-                throw new IllegalStateException("The stub implemention class " + stubClass.getName() + " not implement interface " + interfaceName);
+                throw new IllegalStateException("The stub implementation class " + stubClass.getName() + " not implement interface " + interfaceName);
             }
         }
         checkApplication();

File: dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/proxy/wrapper/StubProxyFactoryWrapper.java
Patch:
@@ -72,7 +72,7 @@ public <T> T getProxy(Invoker<T> invoker) throws RpcException {
                 try {
                     Class<?> stubClass = ReflectUtils.forName(stub);
                     if (!serviceType.isAssignableFrom(stubClass)) {
-                        throw new IllegalStateException("The stub implemention class " + stubClass.getName() + " not implement interface " + serviceType.getName());
+                        throw new IllegalStateException("The stub implementation class " + stubClass.getName() + " not implement interface " + serviceType.getName());
                     }
                     try {
                         Constructor<?> constructor = ReflectUtils.findConstructor(stubClass, serviceType);
@@ -89,10 +89,10 @@ public <T> T getProxy(Invoker<T> invoker) throws RpcException {
                             }
                         }
                     } catch (NoSuchMethodException e) {
-                        throw new IllegalStateException("No such constructor \"public " + stubClass.getSimpleName() + "(" + serviceType.getName() + ")\" in stub implemention class " + stubClass.getName(), e);
+                        throw new IllegalStateException("No such constructor \"public " + stubClass.getSimpleName() + "(" + serviceType.getName() + ")\" in stub implementation class " + stubClass.getName(), e);
                     }
                 } catch (Throwable t) {
-                    LOGGER.error("Failed to create stub implemention class " + stub + " in consumer " + NetUtils.getLocalHost() + " use dubbo version " + Version.getVersion() + ", cause: " + t.getMessage(), t);
+                    LOGGER.error("Failed to create stub implementation class " + stub + " in consumer " + NetUtils.getLocalHost() + " use dubbo version " + Version.getVersion() + ", cause: " + t.getMessage(), t);
                     // ignore
                 }
             }

File: dubbo-simple/dubbo-monitor-simple/src/main/java/com/alibaba/dubbo/monitor/simple/SimpleMonitorService.java
Patch:
@@ -247,7 +247,7 @@ private void write() throws Exception {
                 } else {
                     type = PROVIDER;
                     consumer = statistics.getParameter(CONSUMER);
-                    int i = consumer.indexOf(':');
+                    int i = consumer == null ? -1 : consumer.indexOf(':');
                     if (i > 0) {
                         consumer = consumer.substring(0, i);
                     }

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/loadbalance/AbstractLoadBalance.java
Patch:
@@ -48,7 +48,7 @@ public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invo
     protected int getWeight(Invoker<?> invoker, Invocation invocation) {
         int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT);
         if (weight > 0) {
-            long timestamp = invoker.getUrl().getParameter(Constants.TIMESTAMP_KEY, 0L);
+            long timestamp = invoker.getUrl().getParameter(Constants.REMOTE_TIMESTAMP_KEY, 0L);
             if (timestamp > 0L) {
                 int uptime = (int) (System.currentTimeMillis() - timestamp);
                 int warmup = invoker.getUrl().getParameter(Constants.WARMUP_KEY, Constants.DEFAULT_WARMUP);

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/ClusterUtils.java
Patch:
@@ -80,6 +80,8 @@ public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {
             if (methods != null && methods.length() > 0) {
                 map.put(Constants.METHODS_KEY, methods);
             }
+            // 保留provider的启动timestamp
+            map.put(Constants.REMOTE_TIMESTAMP_KEY, remoteMap.get(Constants.TIMESTAMP_KEY));
             // 合并filter和listener
             String remoteFilter = remoteMap.get(Constants.REFERENCE_FILTER_KEY);
             String localFilter = localMap.get(Constants.REFERENCE_FILTER_KEY);

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/Constants.java
Patch:
@@ -296,6 +296,8 @@ public class Constants {
 
     public static final String TIMESTAMP_KEY = "timestamp";
 
+    public static final String REMOTE_TIMESTAMP_KEY = "remote.timestamp";
+
     public static final String WARMUP_KEY = "warmup";
 
     public static final int DEFAULT_WARMUP = 10 * 60 * 1000;

File: dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/AnnotationBean.java
Patch:
@@ -132,6 +132,7 @@ public Object postProcessAfterInitialization(Object bean, String beanName)
         Service service = bean.getClass().getAnnotation(Service.class);
         if (service != null) {
             ServiceBean<Object> serviceConfig = new ServiceBean<Object>(service);
+            serviceConfig.setRef(bean);
             if (void.class.equals(service.interfaceClass())
                     && "".equals(service.interfaceName())) {
                 if (bean.getClass().getInterfaces().length > 0) {
@@ -185,7 +186,6 @@ public Object postProcessAfterInitialization(Object bean, String beanName)
                     throw new IllegalStateException(e.getMessage(), e);
                 }
             }
-            serviceConfig.setRef(bean);
             serviceConfigs.add(serviceConfig);
             serviceConfig.export();
         }

File: dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/ServiceBean.java
Patch:
@@ -117,7 +117,7 @@ private boolean isDelay() {
         if (delay == null && provider != null) {
             delay = provider.getDelay();
         }
-        return supportedApplicationListener && (delay == null || delay.intValue() == -1);
+        return supportedApplicationListener && (delay == null || delay == -1);
     }
 
     @SuppressWarnings({"unchecked", "deprecation"})

File: hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/java8/LocalDateTimeHandle.java
Patch:
@@ -4,7 +4,6 @@
 
 import java.io.Serializable;
 import java.lang.reflect.Method;
-import java.time.LocalDateTime;
 
 @SuppressWarnings("unchecked")
 public class LocalDateTimeHandle implements HessianHandle, Serializable {

File: dubbo-admin/src/main/java/com/alibaba/dubbo/governance/web/common/module/screen/Restful.java
Patch:
@@ -7,13 +7,13 @@
  */
 package com.alibaba.dubbo.governance.web.common.module.screen;
 
+import com.alibaba.dubbo.common.logger.Logger;
+import com.alibaba.dubbo.common.logger.LoggerFactory;
 import com.alibaba.dubbo.common.utils.CompatibleTypeUtils;
 import com.alibaba.dubbo.governance.biz.common.i18n.MessageResourceService;
 import com.alibaba.dubbo.governance.web.common.pulltool.RootContextPath;
 import com.alibaba.dubbo.governance.web.util.WebConstants;
 import com.alibaba.dubbo.registry.common.domain.User;
-
-import org.apache.log4j.Logger;
 import org.springframework.beans.factory.annotation.Autowired;
 
 import java.lang.reflect.Array;
@@ -30,7 +30,7 @@
  */
 public abstract class Restful {
 
-    protected static final Logger logger = Logger.getLogger(Restful.class);
+    protected static final Logger logger = LoggerFactory.getLogger(Restful.class);
 
     protected static final Pattern SPACE_SPLIT_PATTERN = Pattern.compile("\\s+");
     //FIXME 把这些辅助方法提取出去

File: dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/AnnotationBean.java
Patch:
@@ -170,7 +170,7 @@ public Object postProcessAfterInitialization(Object bean, String beanName)
                 }
                 if (service.protocol() != null && service.protocol().length > 0) {
                     List<ProtocolConfig> protocolConfigs = new ArrayList<ProtocolConfig>();
-                    for (String protocolId : service.registry()) {
+                    for (String protocolId : service.protocol()) {
                         if (protocolId != null && protocolId.length() > 0) {
                             protocolConfigs.add((ProtocolConfig) applicationContext.getBean(protocolId, ProtocolConfig.class));
                         }

File: dubbo-admin/src/main/java/com/alibaba/dubbo/governance/service/impl/OverrideServiceImpl.java
Patch:
@@ -75,7 +75,7 @@ public void enableOverride(Long id) {
             return;
         }
 
-        URL newOverride = oldOverride.removeParameter("enabled");
+        URL newOverride = oldOverride.addParameter("enabled", "enabled");
         registryService.unregister(oldOverride);
         registryService.register(newOverride);
 

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/ClassGenerator.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.alibaba.dubbo.common.bytecode;
 
+import com.alibaba.dubbo.common.utils.ClassHelper;
 import com.alibaba.dubbo.common.utils.ReflectUtils;
 
 import javassist.CannotCompileException;
@@ -253,7 +254,7 @@ public ClassPool getClassPool() {
     }
 
     public Class<?> toClass() {
-        return toClass(getClass().getClassLoader(), getClass().getProtectionDomain());
+        return toClass(ClassHelper.getClassLoader(ClassGenerator.class), getClass().getProtectionDomain());
     }
 
     public Class<?> toClass(ClassLoader loader, ProtectionDomain pd) {

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/Proxy.java
Patch:
@@ -65,7 +65,7 @@ protected Proxy() {
      * @return Proxy instance.
      */
     public static Proxy getProxy(Class<?>... ics) {
-        return getProxy(ClassHelper.getCallerClassLoader(Proxy.class), ics);
+        return getProxy(ClassHelper.getClassLoader(Proxy.class), ics);
     }
 
     /**

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -750,7 +750,7 @@ private String createAdaptiveExtensionClassCode() {
 
         codeBuidler.append("package " + type.getPackage().getName() + ";");
         codeBuidler.append("\nimport " + ExtensionLoader.class.getName() + ";");
-        codeBuidler.append("\npublic class " + type.getSimpleName() + "$Adpative" + " implements " + type.getCanonicalName() + " {");
+        codeBuidler.append("\npublic class " + type.getSimpleName() + "$Adaptive" + " implements " + type.getCanonicalName() + " {");
 
         for (Method method : methods) {
             Class<?> rt = method.getReturnType();

File: dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/filter/ExecuteLimitFilter.java
Patch:
@@ -55,20 +55,20 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             }
         }
         long begin = System.currentTimeMillis();
-        boolean isException = false;
+        boolean isSuccess = true;
         RpcStatus.beginCount(url, methodName);
         try {
             Result result = invoker.invoke(invocation);
             return result;
         } catch (Throwable t) {
-            isException = true;
+            isSuccess = false;
             if (t instanceof RuntimeException) {
                 throw (RuntimeException) t;
             } else {
                 throw new RpcException("unexpected exception when ExecuteLimitFilter", t);
             }
         } finally {
-            RpcStatus.endCount(url, methodName, System.currentTimeMillis() - begin, isException);
+            RpcStatus.endCount(url, methodName, System.currentTimeMillis() - begin, isSuccess);
             if(acquireResult) {
                 executesLimit.release();
             }

File: dubbo-rpc/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/telnet/InvokeTelnetHandler.java
Patch:
@@ -136,7 +136,7 @@ public String telnet(Channel channel, String message) {
         if (invoker != null) {
             if (invokeMethod != null) {
                 try {
-                    Object[] array = PojoUtils.realize(list.toArray(), invokeMethod.getParameterTypes());
+                    Object[] array = PojoUtils.realize(list.toArray(), invokeMethod.getParameterTypes(), invokeMethod.getGenericParameterTypes());
                     RpcContext.getContext().setLocalAddress(channel.getLocalAddress()).setRemoteAddress(channel.getRemoteAddress());
                     long start = System.currentTimeMillis();
                     Object result = invoker.invoke(new RpcInvocation(invokeMethod, array)).recreate();

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/transport/AbstractCodec.java
Patch:
@@ -42,7 +42,7 @@ protected static void checkPayload(Channel channel, long size) throws IOExceptio
             payload = channel.getUrl().getParameter(Constants.PAYLOAD_KEY, Constants.DEFAULT_PAYLOAD);
         }
         if (payload > 0 && size > payload) {
-            IOException e = new IOException("Data length too large: " + size + ", max payload: " + payload + ", channel: " + channel);
+            ExceedPayloadLimitException e = new ExceedPayloadLimitException("Data length too large: " + size + ", max payload: " + payload + ", channel: " + channel);
             logger.error(e);
             throw e;
         }

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java
Patch:
@@ -44,7 +44,7 @@ public abstract class AbstractConfig implements Serializable {
 
     protected static final Logger logger = LoggerFactory.getLogger(AbstractConfig.class);
     private static final long serialVersionUID = 4267533505537413570L;
-    private static final int MAX_LENGTH = 100;
+    private static final int MAX_LENGTH = 200;
 
     private static final int MAX_PATH_LENGTH = 200;
 

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/exchange/support/header/HeaderExchanger.java
Patch:
@@ -34,7 +34,7 @@ public class HeaderExchanger implements Exchanger {
     public static final String NAME = "header";
 
     public ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException {
-        return new HeaderExchangeClient(Transporters.connect(url, new DecodeHandler(new HeaderExchangeHandler(handler))));
+        return new HeaderExchangeClient(Transporters.connect(url, new DecodeHandler(new HeaderExchangeHandler(handler))), true);
     }
 
     public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException {

File: dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/filter/TimeoutFilter.java
Patch:
@@ -46,7 +46,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
                 "timeout", Integer.MAX_VALUE)) {
             if (logger.isWarnEnabled()) {
                 logger.warn("invoke time out. method: " + invocation.getMethodName()
-                        + "arguments: " + Arrays.toString(invocation.getArguments()) + " , url is "
+                        + " arguments: " + Arrays.toString(invocation.getArguments()) + " , url is "
                         + invoker.getUrl() + ", invoke elapsed " + elapsed + " ms.");
             }
         }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/dubbo/Builder.java
Patch:
@@ -983,7 +983,7 @@ private static Builder<?> newObjectBuilder(final Class<?> c) {
                 t = t.getSuperclass();
                 if (t == null)
                     throw new RuntimeException("Can not found Constructor?");
-                cs = c.getDeclaredConstructors();
+                cs = t.getDeclaredConstructors();
             }
             while (cs.length == 0);
         }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/filter/ContextFilter.java
Patch:
@@ -46,6 +46,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             attachments.remove(Constants.DUBBO_VERSION_KEY);
             attachments.remove(Constants.TOKEN_KEY);
             attachments.remove(Constants.TIMEOUT_KEY);
+            attachments.remove(Constants.ASYNC_KEY);//清空消费端的异步参数
         }
         RpcContext.getContext()
                 .setInvoker(invoker)

File: dubbo-remoting/dubbo-remoting-api/src/test/java/com/alibaba/dubbo/remoting/transport/AbstractCodecTest.java
Patch:
@@ -19,6 +19,7 @@
 import com.alibaba.dubbo.remoting.Channel;
 
 import junit.framework.TestCase;
+import org.hamcrest.CoreMatchers;
 
 import java.io.IOException;
 
@@ -46,8 +47,8 @@ public void test_checkPayload_default8M() throws Exception {
             AbstractCodec.checkPayload(channel, 15 * 1024 * 1024);
         } catch (IOException expected) {
             assertThat(expected.getMessage(), allOf(
-                    containsString("Data length too large: "),
-                    containsString("max payload: " + 8 * 1024 * 1024)
+                    CoreMatchers.containsString("Data length too large: "),
+                    CoreMatchers.containsString("max payload: " + 8 * 1024 * 1024)
             ));
         }
 

File: dubbo-rpc/dubbo-rpc-http/src/main/java/com/alibaba/dubbo/rpc/protocol/http/HttpProtocol.java
Patch:
@@ -25,7 +25,7 @@
 import com.alibaba.dubbo.rpc.protocol.AbstractProxyProtocol;
 
 import org.springframework.remoting.RemoteAccessException;
-import org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;
+import org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor;
 import org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean;
 import org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter;
 import org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor;
@@ -107,7 +107,7 @@ protected void prepareConnection(HttpURLConnection con,
             };
             httpProxyFactoryBean.setHttpInvokerRequestExecutor(httpInvokerRequestExecutor);
         } else if ("commons".equals(client)) {
-            CommonsHttpInvokerRequestExecutor httpInvokerRequestExecutor = new CommonsHttpInvokerRequestExecutor();
+            HttpComponentsHttpInvokerRequestExecutor httpInvokerRequestExecutor = new HttpComponentsHttpInvokerRequestExecutor();
             httpInvokerRequestExecutor.setReadTimeout(url.getParameter(Constants.CONNECT_TIMEOUT_KEY, Constants.DEFAULT_CONNECT_TIMEOUT));
             httpProxyFactoryBean.setHttpInvokerRequestExecutor(httpInvokerRequestExecutor);
         } else if (client != null && client.length() > 0) {

File: dubbo-rpc/dubbo-rpc-webservice/src/main/java/com/alibaba/dubbo/rpc/protocol/webservice/WebServiceProtocol.java
Patch:
@@ -60,7 +60,7 @@ public class WebServiceProtocol extends AbstractProxyProtocol {
 
     private final ExtensionManagerBus bus = new ExtensionManagerBus();
 
-    private final HTTPTransportFactory transportFactory = new HTTPTransportFactory(bus);
+    private final HTTPTransportFactory transportFactory = new HTTPTransportFactory();
 
     private HttpBinder httpBinder;
 

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -228,6 +228,7 @@ public synchronized void notify(List<URL> urls) {
      *
      * @param invokerUrls 传入的参数不能为null
      */
+    // TODO: 2017/8/31 FIXME 使用线程池去刷新地址，否则可能会导致任务堆积
     private void refreshInvoker(List<URL> invokerUrls) {
         if (invokerUrls != null && invokerUrls.size() == 1 && invokerUrls.get(0) != null
                 && Constants.EMPTY_PROTOCOL.equals(invokerUrls.get(0).getProtocol())) {

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java
Patch:
@@ -228,6 +228,7 @@ public synchronized void notify(List<URL> urls) {
      *
      * @param invokerUrls 传入的参数不能为null
      */
+    // TODO: 2017/8/31 FIXME 使用线程池去刷新地址，否则可能会导致任务堆积
     private void refreshInvoker(List<URL> invokerUrls) {
         if (invokerUrls != null && invokerUrls.size() == 1 && invokerUrls.get(0) != null
                 && Constants.EMPTY_PROTOCOL.equals(invokerUrls.get(0).getProtocol())) {

File: dubbo-rpc/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -398,7 +398,7 @@ public void destroy() {
                     if (logger.isInfoEnabled()) {
                         logger.info("Close dubbo connect: " + client.getLocalAddress() + "-->" + client.getRemoteAddress());
                     }
-                    client.close();
+                    client.close(getServerShutdownTimeout());
                 } catch (Throwable t) {
                     logger.warn(t.getMessage(), t);
                 }
@@ -412,7 +412,7 @@ public void destroy() {
                     if (logger.isInfoEnabled()) {
                         logger.info("Close dubbo connect: " + client.getLocalAddress() + "-->" + client.getRemoteAddress());
                     }
-                    client.close();
+                    client.close(getServerShutdownTimeout());
                 } catch (Throwable t) {
                     logger.warn(t.getMessage(), t);
                 }

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/support/AbstractRegistryFactory.java
Patch:
@@ -58,6 +58,7 @@ public static Collection<Registry> getRegistries() {
     /**
      * 关闭所有已创建注册中心
      */
+    // TODO: 2017/8/30 to move somewhere else better
     public static void destroyAll() {
         if (LOGGER.isInfoEnabled()) {
             LOGGER.info("Close all registries " + getRegistries());

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/exchange/support/header/HeaderExchangeChannel.java
Patch:
@@ -137,7 +137,7 @@ public void close(int timeout) {
         closed = true;
         if (timeout > 0) {
             long start = System.currentTimeMillis();
-            while (DefaultFuture.hasFuture(HeaderExchangeChannel.this)
+            while (DefaultFuture.hasFuture(channel)
                     && System.currentTimeMillis() - start < timeout) {
                 try {
                     Thread.sleep(10);

File: dubbo-monitor/dubbo-monitor-api/src/main/java/com/alibaba/dubbo/monitor/support/AbstractMonitorFactory.java
Patch:
@@ -46,7 +46,7 @@ public static Collection<Monitor> getMonitors() {
 
     public Monitor getMonitor(URL url) {
         url = url.setPath(MonitorService.class.getName()).addParameter(Constants.INTERFACE_KEY, MonitorService.class.getName());
-        String key = url.toServiceString();
+        String key = url.toServiceStringWithoutResolving();
         LOCK.lock();
         try {
             Monitor monitor = MONITORS.get(key);

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -212,7 +212,7 @@ private Invoker<T> reselect(LoadBalance loadbalance,Invocation invocation,
     
     public Result invoke(final Invocation invocation) throws RpcException {
 
-        checkWheatherDestoried();
+        checkWhetherDestroyed();
 
         LoadBalance loadbalance;
         
@@ -227,7 +227,7 @@ public Result invoke(final Invocation invocation) throws RpcException {
         return doInvoke(invocation, invokers, loadbalance);
     }
 
-    protected void checkWheatherDestoried() {
+    protected void checkWhetherDestroyed() {
 
         if(destroyed){
             throw new RpcException("Rpc cluster invoker for " + getInterface() + " on consumer " + NetUtils.getLocalHost()

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/FailoverClusterInvoker.java
Patch:
@@ -65,7 +65,7 @@ public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, L
         	//重试时，进行重新选择，避免重试时invoker列表已发生变化.
         	//注意：如果列表发生了变化，那么invoked判断会失效，因为invoker示例已经改变
         	if (i > 0) {
-        		checkWheatherDestoried();
+        		checkWhetherDestroyed();
         		copyinvokers = list(invocation);
         		//重新检查一下
         		checkInvokers(copyinvokers, invocation);

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/json/JSONTest.java
Patch:
@@ -30,7 +30,6 @@
 
 public class JSONTest {
 	@Test
-	@Ignore
 	public void testException() throws Exception {
 		MyException e = new MyException("001", "AAAAAAAA");
 		

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ServiceConfig.java
Patch:
@@ -467,7 +467,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r
             if (!Constants.SCOPE_REMOTE.toString().equalsIgnoreCase(scope)) {
                 exportLocal(url);
             }
-            //如果配置不是local则暴露为远程服务.(配置为local，则表示只暴露远程服务)
+            //如果配置不是local则暴露为远程服务.(配置为local，则表示只暴露本地服务)
             if (! Constants.SCOPE_LOCAL.toString().equalsIgnoreCase(scope) ){
                 if (logger.isInfoEnabled()) {
                     logger.info("Export dubbo service " + interfaceClass.getName() + " to url " + url);
@@ -724,4 +724,4 @@ private static void putRandomPort(String protocol, Integer port) {
             RANDOM_PORT_MAP.put(protocol, port);
         }
     }
-}
\ No newline at end of file
+}

File: dubbo-registry/dubbo-registry-default/src/test/java/com/alibaba/dubbo/registry/dubbo/RegistryDirectoryTest.java
Patch:
@@ -550,12 +550,12 @@ public void testNotifyRouterUrls() {
         List<Router> routers = registryDirectory.getRouters();
         //default invocation selector
         Assert.assertEquals(1+1, routers.size());
-        Assert.assertEquals(ScriptRouter.class, routers.get(1).getClass());
+        Assert.assertTrue(ScriptRouter.class == routers.get(1).getClass() || ScriptRouter.class == routers.get(0).getClass());
 
         registryDirectory.notify(new ArrayList<URL>());
         routers = registryDirectory.getRouters();
         Assert.assertEquals(1 + 1, routers.size());
-        Assert.assertEquals(ScriptRouter.class, routers.get(1).getClass());
+        Assert.assertTrue(ScriptRouter.class == routers.get(1).getClass() || ScriptRouter.class == routers.get(0).getClass());
 
         serviceUrls.clear();
         serviceUrls.add(routerurl.addParameter(Constants.ROUTER_KEY, Constants.ROUTER_TYPE_CLEAR));

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/ReflectUtils.java
Patch:
@@ -261,6 +261,9 @@ public static Class<?> getGenericClass(Class<?> cls, int i) {
                 return (Class<?>) ((ParameterizedType) genericClass).getRawType();
             } else if (genericClass instanceof GenericArrayType) { // 处理数组泛型
                 return (Class<?>) ((GenericArrayType) genericClass).getGenericComponentType();
+            } else if (((Class)genericClass).isArray()) {
+                // 在 JDK 7 以上的版本, Foo<int[]> 不再是 GenericArrayType
+                return ((Class)genericClass).getComponentType();
             } else {
                 return (Class<?>) genericClass;
             }

File: dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/support/Menu.java
Patch:
@@ -31,7 +31,9 @@ public class Menu {
     public Menu() {}
     
     public Menu( Map<String, List<String>> menus ) {
-        this.menus.putAll( menus );
+        for (String key : menus.keySet()) {
+            this.menus.put(key, new ArrayList<String>(menus.get(key)));
+        }
     }
     
     public void putMenuItem( String menu, String item ) {

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ServiceConfig.java
Patch:
@@ -207,7 +207,7 @@ protected synchronized void doExport() {
             generic = Boolean.FALSE.toString();
         }
         if(local !=null){
-            if(local=="true"){
+            if("true".equals(local)){
                 local=interfaceName+"Local";
             }
             Class<?> localClass;
@@ -221,7 +221,7 @@ protected synchronized void doExport() {
             }
         }
         if(stub !=null){
-            if(stub=="true"){
+            if("true".equals(stub)){
                 stub=interfaceName+"Stub";
             }
             Class<?> stubClass;

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/transport/AbstractEndpoint.java
Patch:
@@ -54,7 +54,7 @@ public void reset(URL url) {
                                         + url + ", cause: Channel closed. channel: " + getLocalAddress());
         }
         try {
-            if (url.hasParameter(Constants.HEARTBEAT_KEY)) {
+            if (url.hasParameter(Constants.TIMEOUT_KEY)) {
                 int t = url.getParameter(Constants.TIMEOUT_KEY, 0);
                 if (t > 0) {
                     this.timeout = t;

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/ReflectUtils.java
Patch:
@@ -784,7 +784,7 @@ private static Class<?>[] desc2classArray(ClassLoader cl, String desc) throws Cl
 	 */
 	public static Method findMethodByMethodSignature(Class<?> clazz, String methodName, String[] parameterTypes)
 	        throws NoSuchMethodException, ClassNotFoundException {
-	    String signature = clazz.getName() + ".";
+	    String signature = clazz.getName() + "." + methodName;
         if(parameterTypes != null && parameterTypes.length > 0){
             signature += StringUtils.join(parameterTypes);
         }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/ReflectUtils.java
Patch:
@@ -784,9 +784,9 @@ private static Class<?>[] desc2classArray(ClassLoader cl, String desc) throws Cl
 	 */
 	public static Method findMethodByMethodSignature(Class<?> clazz, String methodName, String[] parameterTypes)
 	        throws NoSuchMethodException, ClassNotFoundException {
-	    String signature = methodName;
+	    String signature = clazz.getName() + ".";
         if(parameterTypes != null && parameterTypes.length > 0){
-            signature = methodName + StringUtils.join(parameterTypes);
+            signature += StringUtils.join(parameterTypes);
         }
         Method method = Signature_METHODS_CACHE.get(signature);
         if(method != null){

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/transport/AbstractClient.java
Patch:
@@ -109,7 +109,7 @@ public AbstractClient(URL url, ChannelHandler handler) throws RemotingException
                 close();
                 throw t;
             } else {
-                logger.error("Failed to start " + getClass().getSimpleName() + " " + NetUtils.getLocalAddress()
+                logger.warn("Failed to start " + getClass().getSimpleName() + " " + NetUtils.getLocalAddress()
                              + " connect to the server " + getRemoteAddress() + " (check == false, ignore and retry later!), cause: " + t.getMessage(), t);
             }
         } catch (Throwable t){
@@ -399,4 +399,4 @@ public String toString() {
      */
     protected abstract Channel getChannel();
 
-}
\ No newline at end of file
+}

File: dubbo-registry/dubbo-registry-zookeeper/src/main/java/com/alibaba/dubbo/registry/zookeeper/ZookeeperRegistry.java
Patch:
@@ -125,6 +125,7 @@ protected void doSubscribe(final URL url, final NotifyListener listener) {
                     listeners.putIfAbsent(listener, new ChildListener() {
                         public void childChanged(String parentPath, List<String> currentChilds) {
                             for (String child : currentChilds) {
+								child = URL.decode(child);
                                 if (! anyServices.contains(child)) {
                                     anyServices.add(child);
                                     subscribe(url.setPath(child).addParameters(Constants.INTERFACE_KEY, child, 
@@ -138,8 +139,9 @@ public void childChanged(String parentPath, List<String> currentChilds) {
                 zkClient.create(root, false);
                 List<String> services = zkClient.addChildListener(root, zkListener);
                 if (services != null && services.size() > 0) {
-                    anyServices.addAll(services);
                     for (String service : services) {
+						service = URL.decode(service);
+						anyServices.add(service);
                         subscribe(url.setPath(service).addParameters(Constants.INTERFACE_KEY, service, 
                                 Constants.CHECK_KEY, String.valueOf(false)), listener);
                     }

File: dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/filter/GenericFilter.java
Patch:
@@ -52,7 +52,7 @@ public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {
         if (inv.getMethodName().equals(Constants.$INVOKE) 
                 && inv.getArguments() != null
                 && inv.getArguments().length == 3
-                && ! invoker.getUrl().getParameter(Constants.GENERIC_KEY, false)) {
+                && ! ProtocolUtils.isGeneric(invoker.getUrl().getParameter(Constants.GENERIC_KEY))) {
             String name = ((String) inv.getArguments()[0]).trim();
             String[] types = (String[]) inv.getArguments()[1];
             Object[] args = (Object[]) inv.getArguments()[2];

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/beanutil/JavaBeanSerializeUtil.java
Patch:
@@ -101,7 +101,7 @@ private static void serializeInternal(JavaBeanDescriptor descriptor, Object obj,
             for (int i = 0; i < len; i++) {
                 Object item = Array.get(obj, i);
                 if (item == null) {
-                    descriptor.setProperty(i++, null);
+                    descriptor.setProperty(i, null);
                 } else {
                     JavaBeanDescriptor itemDescriptor = createDescriptorIfAbsent(item, accessor, cache);
                     descriptor.setProperty(i, itemDescriptor);

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/exchange/support/header/HeartBeatTask.java
Patch:
@@ -62,8 +62,8 @@ public void run() {
                         req.setTwoWay( true );
                         req.setEvent( Request.HEARTBEAT_EVENT );
                         channel.send( req );
-                        if ( logger.isInfoEnabled() ) {
-                            logger.info( "Send heartbeat to remote channel " + channel.getRemoteAddress()
+                        if ( logger.isDebugEnabled() ) {
+                            logger.debug( "Send heartbeat to remote channel " + channel.getRemoteAddress()
                                                   + ", cause: The channel has no data-transmission exceeds a heartbeat period: " + heartbeat + "ms" );
                         }
                     }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/ThreadPool.java
Patch:
@@ -27,7 +27,7 @@
  * 
  * @author william.liangf
  */
-@SPI("limited")
+@SPI("fixed")
 public interface ThreadPool {
     
     /**

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/extension/ExtensionLoader.java
Patch:
@@ -683,7 +683,7 @@ private String createAdaptiveExtensionClassCode() {
             throw new IllegalStateException("No adaptive method on extension " + type.getName() + ", refuse to create the adaptive class!");
         
         codeBuidler.append("package " + type.getPackage().getName() + ";");
-        codeBuidler.append("\nimport " + ExtensionLoader.class.getPackage().getName() + ";");
+        codeBuidler.append("\nimport " + ExtensionLoader.class.getName() + ";");
         codeBuidler.append("\npublic class " + type.getSimpleName() + "$Adpative" + " implements " + type.getCanonicalName() + " {");
         
         for (Method method : methods) {

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/com/alibaba/dubbo/rpc/protocol/injvm/InjvmInvoker.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.common.utils.NetUtils;
+import com.alibaba.dubbo.common.utils.UrlUtils;
 import com.alibaba.dubbo.rpc.Exporter;
 import com.alibaba.dubbo.rpc.RpcContext;
 import com.alibaba.dubbo.rpc.RpcException;
@@ -54,7 +55,7 @@ public boolean isAvailable() {
 	}
 
 	public Result doInvoke(Invocation invocation) throws Throwable {
-        InjvmExporter<?> exporter = (InjvmExporter<?>) exporterMap.get(key);
+        Exporter<?> exporter = InjvmProtocol.getExporter(exporterMap, getUrl());
         if (exporter == null)  {
             throw new RpcException("Service [" + key + "] not found.");
         }

File: dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/transport/AbstractChannelHandlerDelegate.java
Patch:
@@ -19,7 +19,7 @@ protected AbstractChannelHandlerDelegate(ChannelHandler handler) {
 
     public ChannelHandler getHandler() {
         if (handler instanceof ChannelHandlerDelegate) {
-            ((ChannelHandlerDelegate)handler).getHandler();
+            return ((ChannelHandlerDelegate)handler).getHandler();
         }
         return handler;
     }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/hessian/Hessian2SerializerFactory.java
Patch:
@@ -22,6 +22,7 @@ public class Hessian2SerializerFactory extends SerializerFactory {
 	public static final SerializerFactory SERIALIZER_FACTORY = new Hessian2SerializerFactory();
 
 	private Hessian2SerializerFactory() {
+        addFactory(BigIntegerSerializerFactory.INSTANCE);
 	}
 
 	@Override

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java
Patch:
@@ -366,6 +366,9 @@ protected static void checkMultiExtension(Class<?> type, String property, String
                 if (v.startsWith(Constants.REMOVE_VALUE_PREFIX)) {
                     v = v.substring(1);
                 }
+                if (Constants.DEFAULT_KEY.equals(v)) {
+                	continue;
+                }
                 if (! ExtensionLoader.getExtensionLoader(type).hasExtension(v)) {
                     throw new IllegalStateException("No such extension " + v + " for " + property + "/" + type.getName());
                 }

File: dubbo-cluster/dubbo-cluster-api/src/main/java/com/alibaba/dubbo/rpc/cluster/support/AbstractClusterInvoker.java
Patch:
@@ -31,6 +31,7 @@
 import com.alibaba.dubbo.rpc.RpcException;
 import com.alibaba.dubbo.rpc.cluster.Directory;
 import com.alibaba.dubbo.rpc.cluster.LoadBalance;
+import com.alibaba.dubbo.rpc.support.RpcUtils;
 
 /**
  * AbstractClusterInvoker
@@ -222,7 +223,7 @@ public Result invoke(final Invocation invocation) throws RpcException {
         } else {
             loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(Constants.DEFAULT_LOADBALANCE);
         }
-        
+        RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);
         return doInvoke(invocation, invokers, loadbalance);
     }
 

File: dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryProtocol.java
Patch:
@@ -151,9 +151,10 @@ private Registry doRegister(final Invoker<?> originInvoker){
         final URL registedProviderUrl = getRegistedProviderUrl(originInvoker);
         registry.register(registedProviderUrl);
         // 订阅override数据
-        registry.subscribe(registedProviderUrl.setProtocol(Constants.PROVIDER_PROTOCOL)
+        // FIXME 提供者订阅时，会影响同一JVM即暴露服务，又引用同一服务的的场景，因为subscribed以服务名为缓存的key，导致订阅信息覆盖。
+        /*registry.subscribe(registedProviderUrl.setProtocol(Constants.PROVIDER_PROTOCOL)
                 .addParameters(Constants.CATEGORY_KEY, Constants.OVERRIDES_CATEGORY, 
-                        Constants.CHECK_KEY, String.valueOf(false)), listener);
+                        Constants.CHECK_KEY, String.valueOf(false)), listener);*/
         return registry;
     }
 

File: dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ServiceConfig.java
Patch:
@@ -239,8 +239,6 @@ public synchronized void unexport() {
     		for (Exporter<?> exporter : exporters) {
     			try {
                     exporter.unexport();
-                    LocalServiceStore.getInstance().unregister(
-                            exporter.getInvoker().getUrl());
                 } catch (Throwable t) {
                     logger.warn("unexpected err when unexport" + exporter, t);
                 }
@@ -439,7 +437,6 @@ private void exportLocal(URL url) {
                     .setPort(0);
             Exporter<?> exporter = protocol.export(
                     proxyFactory.getInvoker(ref, (Class) interfaceClass, local));
-            LocalServiceStore.getInstance().register(url, exporter);
         }
     }
 

File: dubbo-rpc/dubbo-rpc-injvm/src/main/java/com/alibaba/dubbo/rpc/protocol/injvm/InjvmProtocol.java
Patch:
@@ -46,4 +46,7 @@ public <T> Invoker<T> refer(Class<T> serviceType, URL url) throws RpcException {
         return new InjvmInvoker<T>(serviceType, url, url.getServiceKey(), exporterMap);
     }
     
+    public boolean isExported(String key) {
+        return exporterMap != null && exporterMap.containsKey(key);
+    }
 }
\ No newline at end of file

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/router/script/ScriptRouter.java
Patch:
@@ -108,7 +108,7 @@ public <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation
             return invokersCopy;
         } catch (ScriptException e) {
             //fail then ignore rule .invokers.
-            logger.error("route error , rule has been ignored .rule :"+ rule + ",invocation:" + invocation + ",url :"+(RpcContext.getContext().getInvoker() == null ? "" : RpcContext.getContext().getInvoker().getUrl()), e);
+            logger.error("route error , rule has been ignored .rule :"+ rule + ", method:" + invocation.getMethodName() + ",url :"+(RpcContext.getContext().getInvoker() == null ? "" : RpcContext.getContext().getInvoker().getUrl()), e);
             return invokers;
         }
     }

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/FailbackClusterInvoker.java
Patch:
@@ -90,7 +90,7 @@ void retryFailed() {
                 invoker.invoke(invocation);
                 failed.remove(invocation);
             } catch (Throwable e) {
-                logger.error("Failed retry to invoke " + invocation + ", waiting again.", e);
+                logger.error("Failed retry to invoke method " + invocation.getMethodName() + ", waiting again.", e);
             }
         }
     }
@@ -101,7 +101,7 @@ protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, Load
             Invoker<T> invoker = select(loadbalance, invocation, invokers, null);
             return invoker.invoke(invocation);
         } catch (Throwable e) {
-            logger.error("Failback to invoke " + invocation + ", wait for retry in background. Ignored exception: "
+            logger.error("Failback to invoke method " + invocation.getMethodName() + ", wait for retry in background. Ignored exception: "
                                  + e.getMessage() + ", ", e);
             addFailed(invocation, this);
             return new RpcResult(); // ignore

File: dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/ExecuteLimitFilter.java
Patch:
@@ -40,7 +40,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         if (max > 0) {
             RpcStatus count = RpcStatus.getStatus(url, invocation.getMethodName());
             if (count.getActive() >= max) {
-                throw new RpcException("Failed to invoke invocation " + invocation + " in provider " + url + ", cause: The service using threads greater than <dubbo:service executes=\"" + max + "\" /> limited.");
+                throw new RpcException("Failed to invoke method " + invocation.getMethodName() + " in provider " + url + ", cause: The service using threads greater than <dubbo:service executes=\"" + max + "\" /> limited.");
             }
         }
         long begin = System.currentTimeMillis();

File: dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/support/MockInvoker.java
Patch:
@@ -77,7 +77,7 @@ public Result invoke(Invocation invocation) throws RpcException {
                 Object value = parseMockValue(mock, returnTypes);
                 return new RpcResult(value);
             } catch (Exception ew) {
-            	throw new RpcException("mock return invoke error .invocation :" + invocation + ", mock:" + mock + ", url: "+ url , ew);
+            	throw new RpcException("mock return invoke error. method :" + invocation.getMethodName() + ", mock:" + mock + ", url: "+ url , ew);
             }
         } else if (mock.startsWith(Constants.THROW_PREFIX)) {
         	mock = mock.substring(Constants.THROW_PREFIX.length()).trim();

File: dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/proxy/AbstractProxyInvoker.java
Patch:
@@ -73,7 +73,7 @@ public Result invoke(Invocation invocation) throws RpcException {
         } catch (InvocationTargetException e) {
             return new RpcResult(e.getTargetException());
         } catch (Throwable e) {
-            throw new RpcException("Failed to invoke remote proxy " + invocation + " to " + getUrl() + ", cause: " + e.getMessage(), e);
+            throw new RpcException("Failed to invoke remote proxy method " + invocation.getMethodName() + " to " + getUrl() + ", cause: " + e.getMessage(), e);
         }
     }
     

File: dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/DubboInvoker.java
Patch:
@@ -107,9 +107,9 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {
             RpcContext.getContext().setFuture(null);
             return (Result) currentClient.request(inv, timeout).get();
         } catch (TimeoutException e) {
-            throw new RpcException(RpcException.TIMEOUT_EXCEPTION, "Failed to invoke remote invocation " + invocation + " to " + getUrl() + ", cause: " + e.getMessage(), e);
+            throw new RpcException(RpcException.TIMEOUT_EXCEPTION, "Invoke remote method timeout. method: " + invocation.getMethodName() + ", provider: " + getUrl() + ", cause: " + e.getMessage(), e);
         } catch (RemotingException e) {
-            throw new RpcException(RpcException.NETWORK_EXCEPTION, "Failed to invoke remote invocation " + invocation + " to " + getUrl() + ", cause: " + e.getMessage(), e);
+            throw new RpcException(RpcException.NETWORK_EXCEPTION, "Can not connect to prvoider. method: " + invocation.getMethodName() + ", provider: " + getUrl() + ", cause: " + e.getMessage(), e);
         }
     }
     

File: dubbo-config/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java
Patch:
@@ -291,7 +291,8 @@ private T createProxy(Map<String, String> map) {
             if (logger.isInfoEnabled()) {
                 logger.info("Using injvm service " + interfaceClass.getName());
             }
-        } else if(! Boolean.valueOf(map.get(Constants.REMOTE_KEY))
+        } else if(StringUtils.isNotEmpty(map.get(Constants.REMOTE_KEY))
+                && "false".equalsIgnoreCase(map.get(Constants.REMOTE_KEY))
                 && LocalServiceStore.getInstance().isRegistered(LocalServiceStore.serviceKey(map))) {
             invoker = referLocal(map);
         } else {

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/Constants.java
Patch:
@@ -312,7 +312,7 @@ public class Constants {
     public static final String       MOCK_PROTOCOL                     	= "mock";
     
     public static final String       RETURN_PREFIX                      = "return ";
-    public static final String       THROW_PREFIX                      =  "throw ";
+    public static final String       THROW_PREFIX                      =  "throw";
     
     public static final String       FAIL_PREFIX                      = "fail:";
     

File: dubbo-rpc-rmi/src/main/java/com/alibaba/dubbo/rpc/protocol/rmi/RmiProxyFactory.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.rmi.Remote;
 
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.rpc.Invoker;
 
@@ -25,6 +26,7 @@
  * 
  * @author william.liangf
  */
+@Extension
 public interface RmiProxyFactory {
 
     <T> Remote getProxy(Invoker<T> invoker);

File: dubbo-validation/src/main/java/com/alibaba/dubbo/validation/ValidationFilter.java
Patch:
@@ -23,6 +23,7 @@
 import javax.validation.Validation;
 import javax.validation.ValidationException;
 import javax.validation.Validator;
+import javax.validation.groups.Default;
 
 import com.alibaba.dubbo.common.logger.Logger;
 import com.alibaba.dubbo.common.logger.LoggerFactory;
@@ -58,7 +59,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             }
             Set<ConstraintViolation<?>> violations = new HashSet<ConstraintViolation<?>>();
             for (Object arg : invocation.getArguments()) {
-                violations.addAll(validator.validate(arg, clazz));
+                violations.addAll(validator.validate(arg, Default.class, clazz));
             }
             if (violations.size() > 0) {
                 throw new ConstraintViolationException(violations);

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/Cluster.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.dubbo.rpc.cluster;
 
 import com.alibaba.dubbo.common.Adaptive;
-import com.alibaba.dubbo.common.Default;
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.rpc.Invoker;
 import com.alibaba.dubbo.rpc.RpcException;
 import com.alibaba.dubbo.rpc.cluster.support.FailoverCluster;
@@ -29,7 +29,7 @@
  * 
  * @author william.liangf
  */
-@Default(FailoverCluster.NAME)
+@Extension(FailoverCluster.NAME)
 public interface Cluster {
 
     /**

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/Merger.java
Patch:
@@ -15,9 +15,12 @@
  */
 package com.alibaba.dubbo.rpc.cluster;
 
+import com.alibaba.dubbo.common.Extension;
+
 /**
  * @author <a href="mailto:gang.lvg@alibaba-inc.com">kimi</a>
  */
+@Extension
 public interface Merger<T> {
 
     T merge(T... items);

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/RouterFactory.java
Patch:
@@ -16,6 +16,7 @@
 package com.alibaba.dubbo.rpc.cluster;
 
 import com.alibaba.dubbo.common.Adaptive;
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.rpc.Invocation;
 
@@ -27,7 +28,8 @@
  * @see com.alibaba.dubbo.rpc.cluster.Cluster#join(Directory)
  * @see com.alibaba.dubbo.rpc.cluster.Directory#list(Invocation)
  * @author chao.liuc
- */
+ */
+@Extension
 public interface RouterFactory {
     
     /**

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/Adaptive.java
Patch:
@@ -28,7 +28,6 @@
  * 
  * @see ExtensionLoader
  * @see URL
- * @see Default
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
@@ -38,7 +37,7 @@
     /**
      * 从{@link URL}的Key名，对应的Value作为要Adapt成的Extension名。
      * <p>
-     * 如果{@link URL}这些Key都没有Value，使用 用 缺省的扩展（在接口的{@link Default}中设定的值）。<br>
+     * 如果{@link URL}这些Key都没有Value，使用 用 缺省的扩展（在接口的{@link Extension}中设定的值）。<br>
      * 比如，<code>String[] {"key1", "key2"}</code>，表示
      * <ol>
      * <li>先在URL上找key1的Value作为要Adapt成的Extension名；
@@ -50,7 +49,7 @@
      * 如果不设置则缺省使用Extension接口类名的点分隔小写字串。<br>
      * 即对于Extension接口{@code com.alibaba.dubbo.xxx.YyyInvokerWrapper}的缺省值为<code>String[] {"yyy.invoker.wrapper"}</code>
      * 
-     * @see Default#value()
+     * @see Extension#value()
      */
     String[] value() default {};
     

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/ExtensionLoader.java
Patch:
@@ -50,7 +50,6 @@
  * @author william.liangf
  * @author ding.lid
  * 
- * @see Default
  * @see Adaptive
  */
 public class ExtensionLoader<T> {
@@ -287,7 +286,7 @@ private Map<String, Class<?>> getExtensionClasses() {
 	}
 	
     private Map<String, Class<?>> loadExtensionClasses() {
-        final Default defaultAnnotation = type.getAnnotation(Default.class);
+        final Extension defaultAnnotation = type.getAnnotation(Extension.class);
         if(defaultAnnotation != null) {
             String[] names = NAME_SEPARATOR.split(defaultAnnotation.value());
             if(names.length > 1) {
@@ -399,7 +398,6 @@ private Map<String, Class<?>> loadExtensionClasses() {
         return extensionClasses;
     }
     
-    @SuppressWarnings("deprecation")
     private String findAnnotationName(Class<?> clazz) {
         Extension extension = clazz.getAnnotation(Extension.class);
         return extension == null ? null : extension.value();

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/Serialization.java
Patch:
@@ -20,7 +20,7 @@
 import java.io.OutputStream;
 
 import com.alibaba.dubbo.common.Adaptive;
-import com.alibaba.dubbo.common.Default;
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 
 /**
@@ -29,7 +29,7 @@
  * @author ding.lid
  * @author william.liangf
  */
-@Default("hessian2")
+@Extension("hessian2")
 public interface Serialization {
 
     /**

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/status/StatusChecker.java
Patch:
@@ -15,11 +15,14 @@
  */
 package com.alibaba.dubbo.common.status;
 
+import com.alibaba.dubbo.common.Extension;
+
 /**
  * StatusChecker
  * 
  * @author william.liangf
  */
+@Extension
 public interface StatusChecker {
     
     /**

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/ThreadPool.java
Patch:
@@ -19,15 +19,15 @@
 
 import com.alibaba.dubbo.common.Adaptive;
 import com.alibaba.dubbo.common.Constants;
-import com.alibaba.dubbo.common.Default;
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 
 /**
  * ThreadPool
  * 
  * @author william.liangf
  */
-@Default("fixed")
+@Extension("fixed")
 public interface ThreadPool {
     
     /**

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/extensionloader/ext2/Ext2.java
Patch:
@@ -16,13 +16,15 @@
 package com.alibaba.dubbo.common.extensionloader.ext2;
 
 import com.alibaba.dubbo.common.Adaptive;
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 
 /**
  * 无Default
  * 
  * @author ding.lid
- */
+ */
+@Extension
 public interface Ext2 {
     @Adaptive
     String echo(UrlHolder holder, String s);

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/extensionloader/ext5/Ext5NoAdaptiveMethod.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.dubbo.common.extensionloader.ext5;
 
-import com.alibaba.dubbo.common.Default;
-import com.alibaba.dubbo.common.URL;
+import com.alibaba.dubbo.common.Extension;
+import com.alibaba.dubbo.common.URL;
 
 /**
  * @author ding.lid
  */
-@Default("impl1")
+@Extension("impl1")
 public interface Ext5NoAdaptiveMethod {
     String echo(URL url, String s);
     

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/extensionloader/ext6_inject/Ext6.java
Patch:
@@ -16,13 +16,15 @@
 package com.alibaba.dubbo.common.extensionloader.ext6_inject;
 
 import com.alibaba.dubbo.common.Adaptive;
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 
 /**
  * 无Default
  * 
  * @author ding.lid
- */
+ */
+@Extension
 public interface Ext6 {
     @Adaptive
     String echo(URL url, String s);

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/extensionloader/ext7/Ext7.java
Patch:
@@ -16,6 +16,7 @@
 package com.alibaba.dubbo.common.extensionloader.ext7;
 
 import com.alibaba.dubbo.common.Adaptive;
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 
 /**
@@ -24,6 +25,7 @@
  * 
  * @author ding.lid
  */
+@Extension
 public interface Ext7 {
     @Adaptive
     String echo(URL url, String s);

File: dubbo-container/src/main/java/com/alibaba/dubbo/container/Container.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.dubbo.container;
 
-import com.alibaba.dubbo.common.Default;
+import com.alibaba.dubbo.common.Extension;
 
 /**
  * Container. (SPI, Singleton, ThreadSafe)
  * 
  * @author william.liangf
  */
-@Default("spring")
+@Extension("spring")
 public interface Container {
     
     /**

File: dubbo-container/src/main/java/com/alibaba/dubbo/container/page/PageHandler.java
Patch:
@@ -15,13 +15,15 @@
  */
 package com.alibaba.dubbo.container.page;
 
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 
 /**
  * PageHandler
  * 
  * @author william.liangf
  */
+@Extension
 public interface PageHandler {
     
     /**

File: dubbo-monitor/src/main/java/com/alibaba/dubbo/monitor/MonitorFactory.java
Patch:
@@ -16,15 +16,15 @@
 package com.alibaba.dubbo.monitor;
 
 import com.alibaba.dubbo.common.Adaptive;
-import com.alibaba.dubbo.common.Default;
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 
 /**
  * MonitorFactory. (SPI, Singleton, ThreadSafe)
  * 
  * @author william.liangf
  */
-@Default("dubbo")
+@Extension("dubbo")
 public interface MonitorFactory {
     
     /**

File: dubbo-registry/src/main/java/com/alibaba/dubbo/registry/RegistryFactory.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.dubbo.registry;
 
 import com.alibaba.dubbo.common.Adaptive;
-import com.alibaba.dubbo.common.Default;
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 
 /**
@@ -27,7 +27,7 @@
  * @see com.alibaba.dubbo.registry.support.AbstractRegistryFactory
  * @author william.liangf
  */
-@Default("dubbo")
+@Extension("dubbo")
 public interface RegistryFactory {
 
     /**

File: dubbo-remoting-http/src/main/java/com/alibaba/dubbo/remoting/http/HttpBinder.java
Patch:
@@ -17,15 +17,15 @@
 
 import com.alibaba.dubbo.common.Adaptive;
 import com.alibaba.dubbo.common.Constants;
-import com.alibaba.dubbo.common.Default;
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 
 /**
  * HttpBinder
  * 
  * @author william.liangf
  */
-@Default("jetty")
+@Extension("jetty")
 public interface HttpBinder {
     
     /**

File: dubbo-remoting-p2p/src/main/java/com/alibaba/dubbo/remoting/p2p/Networker.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.alibaba.dubbo.remoting.p2p;
 
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.remoting.RemotingException;
 
@@ -25,6 +26,7 @@
  * 
  * @author william.liangf
  */
+@Extension
 public interface Networker {
 
     /**

File: dubbo-remoting-p2p/src/main/java/com/alibaba/dubbo/remoting/p2p/exchange/support/FileExchangeNetworker.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.dubbo.remoting.p2p.exchange.support;
 
-import com.alibaba.dubbo.common.Default;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.remoting.RemotingException;
 import com.alibaba.dubbo.remoting.p2p.exchange.ExchangeGroup;

File: dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/Codec.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.alibaba.dubbo.common.Adaptive;
 import com.alibaba.dubbo.common.Constants;
+import com.alibaba.dubbo.common.Extension;
 
 /**
  * Codec. (SPI, Singleton, ThreadSafe)
@@ -29,6 +30,7 @@
  * @author ding.lid
  * @author william.liangf
  */
+@Extension
 public interface Codec {
 
 	/**

File: dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/exchange/Exchanger.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.dubbo.common.Adaptive;
 import com.alibaba.dubbo.common.Constants;
-import com.alibaba.dubbo.common.Default;
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 import com.alibaba.dubbo.remoting.RemotingException;
 import com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchanger;
@@ -30,7 +30,7 @@
  * 
  * @author william.liangf
  */
-@Default(HeaderExchanger.NAME)
+@Extension(HeaderExchanger.NAME)
 public interface Exchanger {
 
     /**

File: dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/telnet/TelnetHandler.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.alibaba.dubbo.remoting.telnet;
 
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.remoting.Channel;
 import com.alibaba.dubbo.remoting.RemotingException;
 
@@ -23,6 +24,7 @@
  * 
  * @author william.liangf
  */
+@Extension
 public interface TelnetHandler {
 
     /**

File: dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/Filter.java
Patch:
@@ -15,12 +15,15 @@
  */
 package com.alibaba.dubbo.rpc;
 
+import com.alibaba.dubbo.common.Extension;
+
 
 /**
  * Filter. (SPI, Singleton, ThreadSafe)
  * 
  * @author william.liangf
  */
+@Extension
 public interface Filter {
 
 	/**

File: dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/InvokerListener.java
Patch:
@@ -15,13 +15,15 @@
  */
 package com.alibaba.dubbo.rpc;
 
+import com.alibaba.dubbo.common.Extension;
 import com.alibaba.dubbo.common.URL;
 
 /**
  * InvokerListener. (SPI, Singleton, ThreadSafe)
  * 
  * @author william.liangf
  */
+@Extension
 public interface InvokerListener {
 
     /**

File: dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java
Patch:
@@ -104,7 +104,7 @@ public RegistryDirectory(Class<T> serviceType, URL url) {
         this.serviceKey = url.getServiceKey();
         this.queryMap = StringUtils.parseQueryString(url.getParameterAndDecoded(RpcConstants.REFER_KEY));
         this.directoryUrl = url.removeParameter(RpcConstants.REFER_KEY).addParameters(queryMap);
-        String group = directoryUrl.getParameter( Constants.GROUP_KEY );
+        String group = directoryUrl.getParameter( Constants.GROUP_KEY, "" );
         this.multiGroup = "*".equals(group) || group.contains( "," );
     }
 

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/io/StreamUtils.java
Patch:
@@ -21,7 +21,8 @@
 /**
  * Stream utils.
  * 
- * @author qian.lei
+ * @author qian.lei
+ * @author ding.lid
  */
 
 public class StreamUtils
@@ -206,7 +207,7 @@ public int available() throws IOException {
                 return available;
             }
         };
-	}
+	}
 	
 	public static InputStream markSupportedInputStream(final InputStream is) {
 	    return markSupportedInputStream(is, 1024);

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/ConfigUtils.java
Patch:
@@ -182,7 +182,7 @@ public static Properties loadProperties(String fileName, boolean allowMultiFile)
             if (list.size() > 1) {
                 String errMsg = String.format("only 1 %s file is expected, but %d dubbo.properties files found on class path: %s",
                         fileName, list.size(), list.toString());
-                logger.error(errMsg);
+                logger.warn(errMsg);
                 // throw new IllegalStateException(errMsg); // see http://code.alibabatech.com/jira/browse/DUBBO-133
             }
             try {

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/FailoverClusterInvoker.java
Patch:
@@ -86,7 +86,7 @@ public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBal
             if(invoker != null ) 
                 urls.add(invoker.getUrl());
         }
-        throw new RpcException(le.getCode(),
+        throw new RpcException(le != null ? le.getCode() : 0,
                 "Tried " + len + " times to invoke providers " + providers + " " + loadbalance.getClass().getAnnotation(Extension.class).value()
                 + " select from all providers " + invokers + " for service " + getInterface().getName() + " method " + invocation.getMethodName()
                 + " on consumer " + NetUtils.getLocalHost() + " use dubbo version " + Version.getVersion()

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/CompatibleTypeUtils.java
Patch:
@@ -86,9 +86,9 @@ public static Object compatibleTypeConvert(Object value, Class<?> type) {
                 return number.floatValue();
             } else if (type == double.class || type == Double.class) {
                 return number.doubleValue();
-            } else if (type == BigInteger.class || type == BigInteger.class) {
+            } else if (type == BigInteger.class) {
                 return BigInteger.valueOf(number.longValue());
-            } else if (type == BigDecimal.class || type == BigDecimal.class) {
+            } else if (type == BigDecimal.class) {
                 return BigDecimal.valueOf(number.doubleValue());
             } else if (type == Date.class) {
                 return new Date(number.longValue());

File: dubbo-container/src/main/java/com/alibaba/dubbo/container/page/PageServlet.java
Patch:
@@ -52,8 +52,6 @@ public class PageServlet extends HttpServlet {
 
     protected final Random        random           = new Random();
     
-    protected final ExtensionLoader<PageHandler> pageHandlerLoader = ExtensionLoader.getExtensionLoader(PageHandler.class);
-
     protected final Map<String, PageHandler>  pages = new ConcurrentHashMap<String, PageHandler>();
 
     protected final List<PageHandler>    menus = new ArrayList<PageHandler>();
@@ -119,6 +117,7 @@ protected final void doPost(HttpServletRequest request, HttpServletResponse resp
                 response.sendError(HttpServletResponse.SC_NOT_FOUND);
                 return;
             }
+            ExtensionLoader<PageHandler> pageHandlerLoader = ExtensionLoader.getExtensionLoader(PageHandler.class);
             PageHandler pageHandler = pageHandlerLoader.hasExtension(uri) ? pageHandlerLoader.getExtension(uri) : null;
             if (isHtml) {
                 writer.println("<html><head><title>Dubbo</title>");

File: dubbo-registry-multicast/src/main/java/com/alibaba/dubbo/registry/multicast/MulticastRegistry.java
Patch:
@@ -137,8 +137,8 @@ private void receive(String msg, InetSocketAddress remoteAddress) {
                     }
                 }
             }
-        } else if (msg.startsWith(UNSUBSCRIBE)) {
-        }
+        }/* else if (msg.startsWith(UNSUBSCRIBE)) {
+        }*/
     }
     
     private void broadcast(String msg) {

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/FailfastClusterInvoker.java
Patch:
@@ -47,7 +47,7 @@ public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBal
         try {
             return invoker.invoke(invocation);
         } catch (Throwable e) {
-            throw new RpcException("Failfast invoke providers " + invoker.getUrl() + " " + loadbalance.getClass().getAnnotation(Extension.class).value() + " select from all providers " + invokers + " for service " + getInterface().getName() + " method " + invocation.getMethodName() + " on consumer " + NetUtils.getLocalHost() + " use dubbo version " + Version.getVersion() + ", but no luck to perform the invocation. Last error is: " + e.getMessage(), e);
+            throw new RpcException(e instanceof RpcException ? ((RpcException)e).getCode() : 0, "Failfast invoke providers " + invoker.getUrl() + " " + loadbalance.getClass().getAnnotation(Extension.class).value() + " select from all providers " + invokers + " for service " + getInterface().getName() + " method " + invocation.getMethodName() + " on consumer " + NetUtils.getLocalHost() + " use dubbo version " + Version.getVersion() + ", but no luck to perform the invocation. Last error is: " + e.getMessage(), e);
         }
     }
 }
\ No newline at end of file

File: dubbo-registry-multicast/src/main/java/com/alibaba/dubbo/registry/multicast/MulticastRegistry.java
Patch:
@@ -128,7 +128,7 @@ private void receive(String msg, InetSocketAddress remoteAddress) {
             if (urls != null && urls.size() > 0) {
                 for (URL u : urls) {
                     String host = remoteAddress != null && remoteAddress.getAddress() != null 
-                            ? remoteAddress.getAddress().getHostAddress() : url.getHost();
+                            ? remoteAddress.getAddress().getHostAddress() : url.getIp();
                     if (url.getParameter("unicast", true) // 消费者的机器是否只有一个进程
                             && ! NetUtils.getLocalHost().equals(host)) { // 同机器多进程不能用unicast单播信息，否则只会有一个进程收到信息
                         unicast(REGISTER + " " + u.toFullString(), host);

File: dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/p2p/exchange/support/ExchangeServerPeer.java
Patch:
@@ -95,7 +95,7 @@ public ExchangeChannel getExchangeChannel(InetSocketAddress remoteAddress) {
         if (channel == null) {
             for (Map.Entry<URL, ExchangeClient> entry : clients.entrySet()) {
                 URL url = entry.getKey();
-                if (url.getHost().equals(host) && url.getPort() == port) {
+                if (url.getIp().equals(host) && url.getPort() == port) {
                     return entry.getValue();
                 }
             }

File: dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/p2p/support/ServerPeer.java
Patch:
@@ -82,7 +82,7 @@ public Channel getChannel(InetSocketAddress remoteAddress) {
         if (channel == null) {
             for (Map.Entry<URL, Client> entry : clients.entrySet()) {
                 URL url = entry.getKey();
-                if (url.getHost().equals(host) && url.getPort() == port) {
+                if (url.getIp().equals(host) && url.getPort() == port) {
                     return entry.getValue();
                 }
             }

File: dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/telnet/codec/TelnetCodec.java
Patch:
@@ -189,7 +189,7 @@ private static boolean isClientSide(Channel channel) {
         InetSocketAddress address = channel.getRemoteAddress();
         URL url = channel.getUrl();
         return url.getPort() == address.getPort() && 
-                    NetUtils.filterLocalHost(url.getHost())
+                    NetUtils.filterLocalHost(url.getIp())
                     .equals(NetUtils.filterLocalHost(address.getAddress().getHostAddress()));
     }
 

File: dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/DubboProtocol.java
Patch:
@@ -84,7 +84,7 @@ private boolean isClientSide(Channel channel) {
             InetSocketAddress address = channel.getRemoteAddress();
             URL url = channel.getUrl();
             return url.getPort() == address.getPort() && 
-                        NetUtils.filterLocalHost(channel.getUrl().getHost())
+                        NetUtils.filterLocalHost(channel.getUrl().getIp())
                         .equals(NetUtils.filterLocalHost(address.getAddress().getHostAddress()));
         }
         

File: dubbo-rpc-hessian/src/main/java/com/alibaba/dubbo/rpc/protocol/hessian/HessianProtocol.java
Patch:
@@ -76,7 +76,7 @@ public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
         final URL url = invoker.getUrl();
         final String uri = url.getAbsolutePath(); // service uri also exporter cache key.
 
-        String addr = url.getHost() + ":" + url.getPort();
+        String addr = url.getIp() + ":" + url.getPort();
         HttpServer server = serverMap.get(addr);
         if (server == null) {
             server = httpTransporter.bind(url, new HessianHandler());

File: dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/RpcContext.java
Patch:
@@ -129,7 +129,7 @@ public boolean isConsumerSide() {
             host = address.getAddress().getHostAddress();
         }
         return url.getPort() == address.getPort() && 
-                NetUtils.filterLocalHost(url.getHost()).equals(NetUtils.filterLocalHost(host));
+                NetUtils.filterLocalHost(url.getIp()).equals(NetUtils.filterLocalHost(host));
     }
     
     /**

File: dubbo-config/src/main/java/com/alibaba/dubbo/config/ServiceConfig.java
Patch:
@@ -327,7 +327,7 @@ private void doExportUrls() {
             }
             map.put("dubbo", Version.getVersion());
             appendParameters(map, application);
-            appendParameters(map, provider, Constants.DEFAULT_KEY);
+            appendParameters(map, provider);
             appendParameters(map, protocolConfig);
             appendParameters(map, this);
             map.put("prompt", "dubbo");

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/ReflectUtils.java
Patch:
@@ -662,6 +662,7 @@ private static Class<?> desc2class(ClassLoader cl, String desc) throws ClassNotF
 		Class<?> clazz = DESC_CLASS_CACHE.get(desc);
 		if(clazz==null){
 		    clazz = Class.forName(desc, true, cl);
+		    DESC_CLASS_CACHE.put(desc, clazz);
 		}
 		return clazz;
 	}

File: dubbo-config/src/main/java/com/alibaba/dubbo/config/spring/ReferenceBean.java
Patch:
@@ -114,7 +114,7 @@ public Object getObject() throws Exception {
         if (isInjvm() == null 
                 && (getConsumer() == null || getConsumer().isInjvm() == null)
                 && applicationContext != null) {
-            Map<String, ServiceConfig<T>> serviceConfigMap = applicationContext.getBeansOfType(ServiceConfig.class);
+            Map<String, ServiceConfig<T>> serviceConfigMap = applicationContext.getBeansOfType(ServiceConfig.class, false, false);
             if (serviceConfigMap != null && serviceConfigMap.size() > 0) {
                 for (ServiceConfig<T> serviceConfig : serviceConfigMap.values()) {
                     if (isEquals(serviceConfig.getInterface(), getInterface())

File: dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/FailoverClusterInvoker.java
Patch:
@@ -53,7 +53,7 @@ public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBal
             len = 1;
 
         // retry loop.
-        Throwable le = null; // last exception.
+        RpcException le = null; // last exception.
         List<Invoker<T>> invoked = new ArrayList<Invoker<T>>(invokers.size()); // invoked invokers.
         Set<URL> providers = new HashSet<URL>(len);
         for (int i = 0; i < len; i++) {
@@ -81,6 +81,6 @@ public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBal
             if(invoker != null ) 
                 urls.add(invoker.getUrl());
         }
-        throw new RpcException("Tried " + len + " times to invoke providers " + providers + " " + loadbalance.getClass().getAnnotation(Extension.class).value() + " select from all providers " + invokers + " for service " + getInterface().getName() + " method " + invocation.getMethodName() + " on consumer " + NetUtils.getLocalHost() + " use dubbo version " + Version.getVersion() + ", but no luck to perform the invocation. Last error is: " + (le != null ? le.getMessage() : ""), le);
+        throw new RpcException(le.getCode(),"Tried " + len + " times to invoke providers " + providers + " " + loadbalance.getClass().getAnnotation(Extension.class).value() + " select from all providers " + invokers + " for service " + getInterface().getName() + " method " + invocation.getMethodName() + " on consumer " + NetUtils.getLocalHost() + " use dubbo version " + Version.getVersion() + ", but no luck to perform the invocation. Last error is: " + (le != null ? le.getMessage() : ""), le);
     }
 }
\ No newline at end of file

File: dubbo-common/src/test/java/com/alibaba/dubbo/common/serialize/serialization/AbstractSerializationTest.java
Patch:
@@ -1189,7 +1189,7 @@ public void test_LoopReference() throws Exception {
     // ================ final field test ================
     
     @Test
-    public void test_URL_mutable() throws Exception {
+    public void test_URL_mutable_withType() throws Exception {
         URL data = URL.valueOf("dubbo://admin:hello1234@10.20.130.230:20880/context/path?version=1.0.0&application=morgan&noValue");
 
         ObjectOutput objectOutput = serialization.serialize(url, byteArrayOutputStream);
@@ -1200,7 +1200,7 @@ public void test_URL_mutable() throws Exception {
                 byteArrayOutputStream.toByteArray());
         ObjectInput deserialize = serialization.deserialize(url, byteArrayInputStream);
 
-        URL actual = (URL) deserialize.readObject();
+        URL actual = (URL) deserialize.readObject(URL.class);
         assertEquals(data, actual);
         assertEquals(data.getParameters(), actual.getParameters());
 

File: dubbo-config/src/main/java/com/alibaba/dubbo/config/ServiceConfig.java
Patch:
@@ -394,7 +394,6 @@ private void doExportUrls() {
                 }
             }
             if ("injvm".equals(protocolConfig.getName())) {
-                protocolConfig.setPort(0);
                 protocolConfig.setRegister(false);
                 map.put("notify", "false");
             }

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/Wrapper.java
Patch:
@@ -257,8 +257,8 @@ private static Wrapper makeWrapper(Class<?> c)
 				c3.append(" && ").append(" $3.length == ").append(len);
 				if (len > 0) {
 					for (int l = 0; l < len; l ++) {
-						c3.append(" && ").append(" $3[").append(l).append("]").append(" == ")
-							.append(m.getParameterTypes()[l].getCanonicalName()).append(".class");
+						c3.append(" && ").append(" $3[").append(l).append("].getName().equals(\"")
+							.append(m.getParameterTypes()[l].getName()).append("\")");
 					}
 				}
 			}

File: dubbo-config/src/main/java/com/alibaba/dubbo/config/MethodConfig.java
Patch:
@@ -46,7 +46,7 @@ public class MethodConfig extends AbstractMethodConfig {
     // 是否过时
     private Boolean           deprecated;
     
-    // 是否需要返回
+    // 是否需要开启stiky策略
     private Boolean           sticky;
 
     // 是否需要返回
@@ -135,7 +135,7 @@ public void setArguments(List<? extends ArgumentConfig> arguments) {
     public List<ArgumentConfig> getArguments() {
         return arguments;
     }
-
+    
     public Boolean getSticky() {
         return sticky;
     }

File: dubbo-config/src/main/java/com/alibaba/dubbo/config/ServiceConfig.java
Patch:
@@ -250,7 +250,7 @@ private void checkInterface() {
     }
 
     public synchronized void unexport() {
-        if (exported) {
+        if (!exported) {
             throw new IllegalStateException("No exported!");
         }
         if (unexported) {

File: dubbo-remoting-netty/src/main/java/com/alibaba/dubbo/remoting/transport/netty/NettyClient.java
Patch:
@@ -123,7 +123,7 @@ protected void doConnect() throws Throwable {
             } else if (future.getCause() != null) {
                 throw future.getCause();
             } else {
-                throw new RemotingException(this, "Faild to connect to server " + getRemoteAddress() + ", the future was not completed within the specified time limit, please check the timeout ["+ getConnectTimeout() +"] config .");
+                throw new RemotingException(this, "Failed to connect to server " + getRemoteAddress() + ", the future was not completed within the specified time limit, please check the timeout ["+ getConnectTimeout() +"] config .");
             }
             
         }catch (InterruptedException e) {

File: dubbo-common/src/main/java/com/alibaba/dubbo/common/Constants.java
Patch:
@@ -225,6 +225,8 @@ public class Constants {
     
     public static final int          DEFAULT_RECONNECT_PERIOD       =  2000;
     
+    public static final String       SHUTDOWN_TIMEOUT_KEY           =  "shutdown.timeout";
+    
     public static final int          DEFAULT_SHUTDOWN_TIMEOUT       =  10000;
 
     public static final String       CHECK_KEY                      = "check";

