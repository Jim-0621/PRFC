File: src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java
Patch:
@@ -39,7 +39,7 @@ public void aggregateAndSendMetrics() {
                             if (method == null || uri == null) {
                                 return;
                             }
-                            if (!method.equals("GET") && !method.equals("POST")) {
+                            if (!"GET".equals(method) && !"POST".equals(method)) {
                                 return;
                             }
                             // Skip URIs that are 2 characters or shorter

File: src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java
Patch:
@@ -182,7 +182,6 @@ public void init() {
         addEndpointToGroup("Python", "extract-image-scans");
         addEndpointToGroup("Python", "html-to-pdf");
         addEndpointToGroup("Python", "url-to-pdf");
-        addEndpointToGroup("Python", "pdf-to-img");
         addEndpointToGroup("Python", "file-to-pdf");
 
         // openCV

File: src/main/java/stirling/software/SPDF/EE/EEAppConfig.java
Patch:
@@ -25,7 +25,7 @@ public EEAppConfig(
 
     @Bean(name = "runningEE")
     public boolean runningEnterpriseEdition() {
-        return licenseKeyChecker.getEnterpriseEnabledResult();
+    	return licenseKeyChecker.getEnterpriseEnabledResult();
     }
 
     @Bean(name = "SSOAutoLogin")

File: src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java
Patch:
@@ -214,6 +214,7 @@ private void addTextWatermark(
                                 + Math.abs(watermarkHeight * Math.cos(radians)));
 
         // Calculating the number of rows and columns.
+
         int watermarkRows = (int) (pageHeight / newWatermarkHeight + 1);
         int watermarkCols = (int) (pageWidth / newWatermarkWidth + 1);
 

File: src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java
Patch:
@@ -54,8 +54,8 @@ public String pipelineForm(Model model) {
         model.addAttribute("currentPage", "pipeline");
         List<String> pipelineConfigs = new ArrayList<>();
         List<Map<String, String>> pipelineConfigsWithNames = new ArrayList<>();
-        if (new File("./pipeline/defaultWebUIConfigs/").exists()) {
-            try (Stream<Path> paths = Files.walk(Paths.get("./pipeline/defaultWebUIConfigs/"))) {
+        if (new File(InstallationPathConfig.getPipelineDefaultWebUIConfigsDir()).exists()) {
+            try (Stream<Path> paths = Files.walk(Paths.get(InstallationPathConfig.getPipelineDefaultWebUIConfigsDir()))) {
                 List<Path> jsonFiles =
                         paths.filter(Files::isRegularFile)
                                 .filter(p -> p.toString().endsWith(".json"))

File: src/test/java/stirling/software/SPDF/SPDFApplicationTest.java
Patch:
@@ -29,7 +29,7 @@ public class SPDFApplicationTest {
 
     @Mock
     private ApplicationProperties applicationProperties;
-    
+
     @InjectMocks
     private SPDFApplication SPDFApplication;
 

File: src/test/java/stirling/software/SPDF/config/security/database/DatabaseConfigTest.java
Patch:
@@ -103,4 +103,4 @@ void exceptionThrown_whenDBTypeIsUnsupported(String datasourceType) {
 
         assertThrows(UnsupportedProviderException.class, () -> databaseConfig.dataSource());
     }
-}
\ No newline at end of file
+}

File: src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java
Patch:
@@ -98,4 +98,4 @@ void oddEvenMerge_multi_test(int totalNumberOfPages, String expectedPageOrder) {
         assertNotNull(newPageOrder, "Returning null instead of page order list");
         assertEquals(Arrays.stream(expectedPageOrder.split(",")).map(Integer::parseInt).toList(), newPageOrder, "Page order doesn't match");
     }
-}
\ No newline at end of file
+}

File: src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java
Patch:
@@ -94,7 +94,7 @@ private JsonNode validateLicense(String licenseKey, String machineFingerprint)
                         .build();
 
         HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
-        log.info(" validateLicenseResponse body: " + response.body());
+        log.debug(" validateLicenseResponse body: " + response.body());
         JsonNode jsonResponse = objectMapper.readTree(response.body());
         if (response.statusCode() == 200) {
 

File: src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java
Patch:
@@ -27,7 +27,9 @@ public class DatabaseConfig {
     private final ApplicationProperties applicationProperties;
     private final boolean runningEE;
 
-    public DatabaseConfig(ApplicationProperties applicationProperties, @Qualifier("runningEE") boolean runningEE) {
+    public DatabaseConfig(
+            ApplicationProperties applicationProperties,
+            @Qualifier("runningEE") boolean runningEE) {
         this.applicationProperties = applicationProperties;
         this.runningEE = runningEE;
     }

File: src/main/java/stirling/software/SPDF/model/ApplicationProperties.java
Patch:
@@ -366,6 +366,7 @@ public static class EnterpriseEdition {
         private boolean enabled;
         @ToString.Exclude private String key;
         private int maxUsers;
+        private boolean ssoAutoLogin;
         private CustomMetadata customMetadata = new CustomMetadata();
 
         @Data

File: src/main/java/stirling/software/SPDF/model/api/security/ManualRedactPdfRequest.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.List;
 
 import io.swagger.v3.oas.annotations.media.Schema;
+
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import stirling.software.SPDF.model.api.PDFWithPageNums;

File: src/main/java/stirling/software/SPDF/model/api/security/RedactionArea.java
Patch:
@@ -1,17 +1,20 @@
 package stirling.software.SPDF.model.api.security;
 
 import io.swagger.v3.oas.annotations.media.Schema;
+
 import lombok.Data;
 
 @Data
 public class RedactionArea {
     @Schema(description = "The left edge point of the area to be redacted.")
     private Double x;
+
     @Schema(description = "The top edge point of the area to be redacted.")
     private Double y;
 
     @Schema(description = "The height of the area to be redacted.")
     private Double height;
+
     @Schema(description = "The width of the area to be redacted.")
     private Double width;
 

File: src/main/java/stirling/software/SPDF/utils/propertyeditor/StringToArrayListPropertyEditor.java
Patch:
@@ -24,8 +24,8 @@ public void setAsText(String text) throws IllegalArgumentException {
         }
         try {
             objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
-            TypeReference<ArrayList<RedactionArea>> typeRef = new TypeReference<ArrayList<RedactionArea>>() {
-            };
+            TypeReference<ArrayList<RedactionArea>> typeRef =
+                    new TypeReference<ArrayList<RedactionArea>>() {};
             List<RedactionArea> list = objectMapper.readValue(text, typeRef);
             setValue(list);
         } catch (Exception e) {

File: src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java
Patch:
@@ -178,9 +178,9 @@ public void exportDatabase() {
             } catch (CannotReadScriptException e) {
                 log.error("Error during database export: File {} not found", insertOutputFilePath);
             }
-        }
 
-        log.info("Database export completed: {}", insertOutputFilePath);
+            log.info("Database export completed: {}", insertOutputFilePath);
+        }
     }
 
     private static void deleteOldestBackup(List<FileInfo> filteredBackupList) {
@@ -226,7 +226,7 @@ private boolean isH2Database() {
         ApplicationProperties.Datasource datasource =
                 applicationProperties.getSystem().getDatasource();
         return !datasource.isEnableCustomDatabase()
-                || datasource.getType().equals(ApplicationProperties.Driver.H2.name());
+                || datasource.getType().equalsIgnoreCase(ApplicationProperties.Driver.H2.name());
     }
 
     /**

File: src/main/java/stirling/software/SPDF/config/security/database/ScheduledTasks.java
Patch:
@@ -2,13 +2,16 @@
 
 import java.sql.SQLException;
 
+import org.springframework.context.annotation.Conditional;
 import org.springframework.scheduling.annotation.Scheduled;
 import org.springframework.stereotype.Component;
 
 import stirling.software.SPDF.config.interfaces.DatabaseInterface;
+import stirling.software.SPDF.controller.api.H2SQLCondition;
 import stirling.software.SPDF.model.provider.UnsupportedProviderException;
 
 @Component
+@Conditional(H2SQLCondition.class)
 public class ScheduledTasks {
 
     private final DatabaseInterface databaseService;

File: src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java
Patch:
@@ -8,6 +8,7 @@
 import java.nio.file.StandardCopyOption;
 
 import org.eclipse.jetty.http.HttpStatus;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.core.io.InputStreamResource;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
@@ -30,6 +31,7 @@
 @Controller
 @RequestMapping("/api/v1/database")
 @PreAuthorize("hasRole('ROLE_ADMIN')")
+@Conditional(H2SQLCondition.class)
 @Tag(name = "Database", description = "Database APIs for backup, import, and management")
 public class DatabaseController {
 

File: src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java
Patch:
@@ -37,6 +37,9 @@ public String database(HttpServletRequest request, Model model, Authentication a
         List<FileInfo> backupList = databaseService.getBackupList();
         model.addAttribute("backupFiles", backupList);
         model.addAttribute("databaseVersion", databaseService.getH2Version());
+        if ("Unknown".equalsIgnoreCase(databaseService.getH2Version())) {
+            model.addAttribute("infoMessage", "notSupported");
+        }
         return "database";
     }
 }

File: src/main/java/stirling/software/SPDF/config/security/CustomLogoutSuccessHandler.java
Patch:
@@ -20,7 +20,7 @@
 import jakarta.servlet.http.HttpServletResponse;
 import lombok.AllArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
-import stirling.software.SPDF.SPdfApplication;
+import stirling.software.SPDF.SPDFApplication;
 import stirling.software.SPDF.config.security.saml2.CertificateUtils;
 import stirling.software.SPDF.config.security.saml2.CustomSaml2AuthenticatedPrincipal;
 import stirling.software.SPDF.model.ApplicationProperties;
@@ -110,7 +110,7 @@ private void getRedirect_saml2(
 
             // Construct URLs required for SAML configuration
             String serverUrl =
-                    SPdfApplication.getStaticBaseUrl() + ":" + SPdfApplication.getStaticPort();
+                    SPDFApplication.getStaticBaseUrl() + ":" + SPDFApplication.getStaticPort();
 
             String relyingPartyIdentifier =
                     serverUrl + "/saml2/service-provider-metadata/" + registrationId;

File: src/main/java/stirling/software/SPDF/config/security/oauth2/CustomOAuth2AuthenticationSuccessHandler.java
Patch:
@@ -1,6 +1,7 @@
 package stirling.software.SPDF.config.security.oauth2;
 
 import java.io.IOException;
+import java.sql.SQLException;
 
 import org.springframework.security.authentication.LockedException;
 import org.springframework.security.core.Authentication;
@@ -18,6 +19,7 @@
 import stirling.software.SPDF.model.ApplicationProperties;
 import stirling.software.SPDF.model.ApplicationProperties.Security.OAUTH2;
 import stirling.software.SPDF.model.AuthenticationType;
+import stirling.software.SPDF.model.provider.UnsupportedProviderException;
 import stirling.software.SPDF.utils.RequestUriUtils;
 
 public class CustomOAuth2AuthenticationSuccessHandler
@@ -97,10 +99,8 @@ public void onAuthenticationSuccess(
                     userService.processSSOPostLogin(username, oAuth.getAutoCreateUser());
                 }
                 response.sendRedirect(contextPath + "/");
-                return;
-            } catch (IllegalArgumentException e) {
+            } catch (IllegalArgumentException | SQLException | UnsupportedProviderException e) {
                 response.sendRedirect(contextPath + "/logout?invalidUsername=true");
-                return;
             }
         }
     }

File: src/main/java/stirling/software/SPDF/config/security/saml2/CustomSaml2AuthenticationSuccessHandler.java
Patch:
@@ -1,6 +1,7 @@
 package stirling.software.SPDF.config.security.saml2;
 
 import java.io.IOException;
+import java.sql.SQLException;
 
 import org.springframework.security.authentication.LockedException;
 import org.springframework.security.core.Authentication;
@@ -18,6 +19,7 @@
 import stirling.software.SPDF.model.ApplicationProperties;
 import stirling.software.SPDF.model.ApplicationProperties.Security.SAML2;
 import stirling.software.SPDF.model.AuthenticationType;
+import stirling.software.SPDF.model.provider.UnsupportedProviderException;
 import stirling.software.SPDF.utils.RequestUriUtils;
 
 @AllArgsConstructor
@@ -109,7 +111,7 @@ public void onAuthenticationSuccess(
                     log.debug("Successfully processed authentication for user: {}", username);
                     response.sendRedirect(contextPath + "/");
                     return;
-                } catch (IllegalArgumentException e) {
+                } catch (IllegalArgumentException | SQLException | UnsupportedProviderException e) {
                     log.debug(
                             "Invalid username detected for user: {}, redirecting to logout",
                             username);

File: src/main/java/stirling/software/SPDF/controller/api/pipeline/ApiDocService.java
Patch:
@@ -20,7 +20,7 @@
 
 import jakarta.servlet.ServletContext;
 import lombok.extern.slf4j.Slf4j;
-import stirling.software.SPDF.SPdfApplication;
+import stirling.software.SPDF.SPDFApplication;
 import stirling.software.SPDF.model.ApiEndpoint;
 import stirling.software.SPDF.model.Role;
 
@@ -44,7 +44,7 @@ public ApiDocService(
 
     private String getApiDocsUrl() {
         String contextPath = servletContext.getContextPath();
-        String port = SPdfApplication.getStaticPort();
+        String port = SPDFApplication.getStaticPort();
         return "http://localhost:" + port + contextPath + "/v1/api-docs";
     }
 

File: src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java
Patch:
@@ -30,7 +30,7 @@
 
 import jakarta.servlet.ServletContext;
 import lombok.extern.slf4j.Slf4j;
-import stirling.software.SPDF.SPdfApplication;
+import stirling.software.SPDF.SPDFApplication;
 import stirling.software.SPDF.model.PipelineConfig;
 import stirling.software.SPDF.model.PipelineOperation;
 import stirling.software.SPDF.model.Role;
@@ -80,7 +80,7 @@ private String getApiKeyForUser() {
 
     private String getBaseUrl() {
         String contextPath = servletContext.getContextPath();
-        String port = SPdfApplication.getStaticPort();
+        String port = SPDFApplication.getStaticPort();
         return "http://localhost:" + port + contextPath + "/";
     }
 

File: src/main/java/stirling/software/SPDF/model/SessionEntity.java
Patch:
@@ -5,7 +5,6 @@
 
 import jakarta.persistence.Entity;
 import jakarta.persistence.Id;
-import jakarta.persistence.Lob;
 import jakarta.persistence.Table;
 import lombok.Data;
 
@@ -15,7 +14,7 @@
 public class SessionEntity implements Serializable {
     @Id private String sessionId;
 
-    @Lob private String principalName;
+    private String principalName;
 
     private Date lastRequest;
 

File: src/main/java/stirling/software/SPDF/model/User.java
Patch:
@@ -47,7 +47,7 @@ public class User implements Serializable {
     @ElementCollection
     @MapKeyColumn(name = "setting_key")
     @Lob
-    @Column(name = "setting_value", columnDefinition = "CLOB")
+    @Column(name = "setting_value", columnDefinition = "text")
     @CollectionTable(name = "user_settings", joinColumns = @JoinColumn(name = "user_id"))
     private Map<String, String> settings = new HashMap<>(); // Key-value pairs of settings.
 

File: src/main/java/stirling/software/SPDF/config/FileFallbackTemplateResolver.java
Patch:
@@ -33,7 +33,8 @@ protected ITemplateResource computeTemplateResource(
             String characterEncoding,
             Map<String, Object> templateResolutionAttributes) {
         Resource resource =
-                resourceLoader.getResource("file:./customFiles/templates/" + resourceName);
+                resourceLoader.getResource(
+                        "file:" + InstallationPathConfig.getTemplatesPath() + resourceName);
         try {
             if (resource.exists() && resource.isReadable()) {
                 return new FileTemplateResource(resource.getFile().getPath(), characterEncoding);

File: src/main/java/stirling/software/SPDF/config/WebMvcConfig.java
Patch:
@@ -23,7 +23,8 @@ public void addInterceptors(InterceptorRegistry registry) {
     public void addResourceHandlers(ResourceHandlerRegistry registry) {
         // Handler for external static resources
         registry.addResourceHandler("/**")
-                .addResourceLocations("file:customFiles/static/", "classpath:/static/");
+                .addResourceLocations(
+                        "file:" + InstallationPathConfig.getStaticPath(), "classpath:/static/");
         // .setCachePeriod(0); // Optional: disable caching
     }
 }

File: src/main/java/stirling/software/SPDF/config/YamlPropertySourceFactory.java
Patch:
@@ -16,7 +16,6 @@ public PropertySource<?> createPropertySource(String name, EncodedResource encod
             throws IOException {
         YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean();
         factory.setResources(encodedResource.getResource());
-
         Properties properties = factory.getObject();
 
         return new PropertiesPropertySource(

File: src/main/java/stirling/software/SPDF/config/security/saml2/CustomSaml2ResponseAuthenticationConverter.java
Patch:
@@ -11,13 +11,11 @@
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
 import org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.ResponseToken;
 import org.springframework.security.saml2.provider.service.authentication.Saml2Authentication;
-import org.springframework.stereotype.Component;
 
 import lombok.extern.slf4j.Slf4j;
 import stirling.software.SPDF.config.security.UserService;
 import stirling.software.SPDF.model.User;
 
-@Component
 @Slf4j
 public class CustomSaml2ResponseAuthenticationConverter
         implements Converter<ResponseToken, Saml2Authentication> {

File: src/main/java/stirling/software/SPDF/controller/api/SettingsController.java
Patch:
@@ -12,6 +12,7 @@
 import io.swagger.v3.oas.annotations.Hidden;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
+import stirling.software.SPDF.config.InstallationPathConfig;
 import stirling.software.SPDF.model.ApplicationProperties;
 import stirling.software.SPDF.utils.GeneralUtils;
 
@@ -33,7 +34,8 @@ public ResponseEntity<String> updateApiKey(@RequestBody Boolean enabled) throws
         if (!"undefined".equals(applicationProperties.getSystem().getEnableAnalytics())) {
             return ResponseEntity.status(HttpStatus.ALREADY_REPORTED)
                     .body(
-                            "Setting has already been set, To adjust please edit /config/settings.yml");
+                            "Setting has already been set, To adjust please edit "
+                                    + InstallationPathConfig.getSettingsPath());
         }
         GeneralUtils.saveKeyToConfig("system.enableAnalytics", String.valueOf(enabled), false);
         applicationProperties.getSystem().setEnableAnalytics(String.valueOf(enabled));

File: src/main/java/stirling/software/SPDF/utils/PDFManipulationUtils.java
Patch:
@@ -1,3 +0,0 @@
-package stirling.software.SPDF.utils;
-
-public class PDFManipulationUtils {}

File: src/main/java/stirling/software/SPDF/utils/PDFToFile.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Objects;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
 
@@ -64,7 +65,7 @@ public ResponseEntity<byte[]> processPdfToHtml(MultipartFile inputFile)
                             .runCommandWithOutputHandling(command, tempOutputDir.toFile());
 
             // Get output files
-            List<File> outputFiles = Arrays.asList(tempOutputDir.toFile().listFiles());
+            File[] outputFiles = Objects.requireNonNull(tempOutputDir.toFile().listFiles());
 
             // Return output files in a ZIP archive
             fileName = pdfBaseName + "ToHtml.zip";

File: src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java
Patch:
@@ -163,6 +163,9 @@ public String login(HttpServletRequest request, Model model, Authentication auth
                 case "invalid_destination":
                     erroroauth = "login.invalid_destination";
                     break;
+                case "relying_party_registration_not_found":
+                    erroroauth = "login.relyingPartyRegistrationNotFound";
+                    break;
                 // Valid InResponseTo was not available from the validation context, unable to
                 // evaluate
                 case "invalid_in_response_to":

File: src/main/java/stirling/software/SPDF/controller/api/MultiPageLayoutController.java
Patch:
@@ -1,6 +1,6 @@
 package stirling.software.SPDF.controller.api;
 
-import java.awt.Color;
+import java.awt.*;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 

File: src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java
Patch:
@@ -1,6 +1,6 @@
 package stirling.software.SPDF.controller.api.misc;
 
-import java.awt.Image;
+import java.awt.*;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
 import java.nio.file.Files;

File: src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java
Patch:
@@ -42,6 +42,8 @@
 @Tag(name = "Misc", description = "Miscellaneous APIs")
 public class ExtractImageScansController {
 
+    private static final String REPLACEFIRST = "[.][^.]+$";
+
     @PostMapping(consumes = "multipart/form-data", value = "/extract-image-scans")
     @Operation(
             summary = "Extract image scans from an input file",
@@ -221,6 +223,4 @@ public ResponseEntity<byte[]> extractImageScans(
                     });
         }
     }
-
-    private static final String REPLACEFIRST = "[.][^.]+$";
 }

File: src/main/java/stirling/software/SPDF/controller/api/misc/PrintFileController.java
Patch:
@@ -1,7 +1,6 @@
 package stirling.software.SPDF.controller.api.misc;
 
-import java.awt.Graphics;
-import java.awt.Graphics2D;
+import java.awt.*;
 import java.awt.image.BufferedImage;
 import java.awt.print.PageFormat;
 import java.awt.print.Printable;

File: src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java
Patch:
@@ -1,6 +1,6 @@
 package stirling.software.SPDF.controller.api.misc;
 
-import java.awt.Color;
+import java.awt.*;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.FileOutputStream;

File: src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java
Patch:
@@ -1,6 +1,6 @@
 package stirling.software.SPDF.controller.api.security;
 
-import java.awt.Color;
+import java.awt.*;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.List;

File: src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java
Patch:
@@ -1,6 +1,6 @@
 package stirling.software.SPDF.controller.api.security;
 
-import java.awt.Color;
+import java.awt.*;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.FileOutputStream;

File: src/main/java/stirling/software/SPDF/utils/FileInfo.java
Patch:
@@ -11,15 +11,14 @@
 @AllArgsConstructor
 @Data
 public class FileInfo {
+    private static final DateTimeFormatter DATE_FORMATTER =
+            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
     private String fileName;
     private String filePath;
     private LocalDateTime modificationDate;
     private long fileSize;
     private LocalDateTime creationDate;
 
-    private static final DateTimeFormatter DATE_FORMATTER =
-            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
-
     // Converts the file path string to a Path object.
     public Path getFilePathAsPath() {
         return Paths.get(filePath);

File: src/test/java/stirling/software/SPDF/SPdfApplicationTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.core.env.Environment;
 
+import stirling.software.SPDF.UI.WebBrowser;
 import stirling.software.SPDF.model.ApplicationProperties;
 
 @ExtendWith(MockitoExtension.class)
@@ -25,13 +26,12 @@ public class SPdfApplicationTest {
 
     @Mock
     private ApplicationProperties applicationProperties;
-
+    
     @InjectMocks
     private SPdfApplication sPdfApplication;
 
     @BeforeEach
     public void setUp() {
-        sPdfApplication = new SPdfApplication();
         sPdfApplication.setServerPortStatic("8080");
     }
 

File: src/test/java/stirling/software/SPDF/utils/ProcessExecutorTest.java
Patch:
@@ -1,13 +1,13 @@
 package stirling.software.SPDF.utils;
 
-import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.*;
 
 public class ProcessExecutorTest {
 

File: src/test/java/stirling/software/SPDF/utils/RequestUriUtilsTest.java
Patch:
@@ -1,10 +1,10 @@
 package stirling.software.SPDF.utils;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import org.junit.jupiter.api.Test;
-
 public class RequestUriUtilsTest {
 
     @Test

File: src/main/java/stirling/software/SPDF/config/interfaces/DatabaseBackupInterface.java
Patch:
@@ -6,6 +6,7 @@
 import stirling.software.SPDF.utils.FileInfo;
 
 public interface DatabaseBackupInterface {
+
     void exportDatabase() throws IOException;
 
     boolean importDatabase();

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java
Patch:
@@ -215,7 +215,7 @@ public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest r
             colorType = "color";
         }
         if (fitOption == null || fitOption.isEmpty()) {
-            fitOption = "fitDocumentToImage";
+            fitOption = "fillPage";
         }
         // Convert the file to PDF and get the resulting bytes
         byte[] bytes =

File: src/main/java/stirling/software/SPDF/EE/LicenseKeyChecker.java
Patch:
@@ -28,7 +28,7 @@ public LicenseKeyChecker(
         this.checkLicense();
     }
 
-    @Scheduled(initialDelay = 604800000,fixedRate = 604800000) // 7 days in milliseconds
+    @Scheduled(initialDelay = 604800000, fixedRate = 604800000) // 7 days in milliseconds
     public void checkLicensePeriodically() {
         checkLicense();
     }

File: src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java
Patch:
@@ -260,6 +260,9 @@ public void init() {
 
         // Pdftohtml dependent endpoints
         addEndpointToGroup("Pdftohtml", "pdf-to-html");
+
+        // disabled for now while we resolve issues
+        disableEndpoint("pdf-to-pdfa");
     }
 
     private void processEnvironmentConfigs() {

File: src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java
Patch:
@@ -75,5 +75,6 @@ private void initializeInternalApiUser() throws IllegalArgumentException, IOExce
             userService.addApiKeyToUser(Role.INTERNAL_API_USER.getRoleId());
             log.info("Internal API user created: " + Role.INTERNAL_API_USER.getRoleId());
         }
+        userService.syncCustomApiUser(applicationProperties.getSecurity().getCustomGlobalAPIKey());
     }
 }

File: src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java
Patch:
@@ -71,7 +71,7 @@ protected void doFilterInternal(
 
         // Check for API key in the request headers if no authentication exists
         if (authentication == null || !authentication.isAuthenticated()) {
-            String apiKey = request.getHeader("X-API-Key");
+            String apiKey = request.getHeader("X-API-KEY");
             if (apiKey != null && !apiKey.trim().isEmpty()) {
                 try {
                     // Use API key to authenticate. This requires you to have an authentication

File: src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java
Patch:
@@ -59,7 +59,7 @@ protected void doFilterInternal(
         String identifier = null;
 
         // Check for API key in the request headers
-        String apiKey = request.getHeader("X-API-Key");
+        String apiKey = request.getHeader("X-API-KEY");
         if (apiKey != null && !apiKey.trim().isEmpty()) {
             identifier =
                     "API_KEY_" + apiKey; // Prefix to distinguish between API keys and usernames
@@ -79,7 +79,7 @@ protected void doFilterInternal(
         Role userRole =
                 getRoleFromAuthentication(SecurityContextHolder.getContext().getAuthentication());
 
-        if (request.getHeader("X-API-Key") != null) {
+        if (request.getHeader("X-API-KEY") != null) {
             // It's an API call
             processRequest(
                     userRole.getApiCallsPerDay(),

File: src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java
Patch:
@@ -221,7 +221,7 @@ private ResponseEntity<byte[]> sendWebRequest(String url, MultiValueMap<String,
 
         HttpHeaders headers = new HttpHeaders();
         String apiKey = getApiKeyForUser();
-        headers.add("X-API-Key", apiKey);
+        headers.add("X-API-KEY", apiKey);
         headers.setContentType(MediaType.MULTIPART_FORM_DATA);
 
         // Create HttpEntity with the body and headers

File: src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java
Patch:
@@ -595,7 +595,9 @@ private void setNodePermissions(PDDocument pdfBoxDoc, ObjectNode permissionsNode
 
         permissionsNode.put("Document Assembly", getPermissionState(ap.canAssembleDocument()));
         permissionsNode.put("Extracting Content", getPermissionState(ap.canExtractContent()));
-        permissionsNode.put("Extracting for accessibility", getPermissionState(ap.canExtractForAccessibility()));
+        permissionsNode.put(
+                "Extracting for accessibility",
+                getPermissionState(ap.canExtractForAccessibility()));
         permissionsNode.put("Form Filling", getPermissionState(ap.canFillInForm()));
         permissionsNode.put("Modifying", getPermissionState(ap.canModify()));
         permissionsNode.put("Modifying annotations", getPermissionState(ap.canModifyAnnotations()));

File: src/main/java/stirling/software/SPDF/model/ApplicationProperties.java
Patch:
@@ -73,6 +73,7 @@ public static class Security {
         private int loginAttemptCount;
         private long loginResetTimeMinutes;
         private String loginMethod = "all";
+        private String customGlobalAPIKey;
 
         public Boolean isAltLogin() {
             return saml2.getEnabled() || oauth2.getEnabled();
@@ -285,6 +286,7 @@ public static class Metrics {
     public static class AutomaticallyGenerated {
         @ToString.Exclude private String key;
         private String UUID;
+        private String appVersion;
     }
 
     @Data

File: src/main/java/stirling/software/SPDF/service/CertificateValidationService.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.service;
 
-import io.github.pixee.security.BoundedLineReader;
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -24,6 +23,8 @@
 
 import org.springframework.stereotype.Service;
 
+import io.github.pixee.security.BoundedLineReader;
+
 import jakarta.annotation.PostConstruct;
 
 @Service

File: src/main/java/stirling/software/SPDF/UI/impl/LoadingWindow.java
Patch:
@@ -90,7 +90,6 @@ public void setProgress(final int progress) {
                     try {
                         progressBar.setValue(Math.min(Math.max(progress, 0), 100));
                         progressBar.setString(progress + "%");
-                        log.info(progress + "%");
                         mainPanel.revalidate();
                         mainPanel.repaint();
                     } catch (Exception e) {

File: src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java
Patch:
@@ -45,6 +45,9 @@ public class AddWatermarkRequest extends PDFFile {
     @Schema(description = "The height spacer between watermark elements", example = "50")
     private int heightSpacer;
 
+    @Schema(description = "The color for watermark", defaultValue = "#d3d3d3")
+    private String customColor = "#d3d3d3";
+
     @Schema(description = "Convert the redacted PDF to an image", defaultValue = "false")
     private boolean convertPDFToImage;
 }

File: src/main/java/stirling/software/SPDF/EE/LicenseKeyChecker.java
Patch:
@@ -28,7 +28,7 @@ public LicenseKeyChecker(
         this.checkLicense();
     }
 
-    @Scheduled(fixedRate = 604800000) // 7 days in milliseconds
+    @Scheduled(initialDelay = 604800000,fixedRate = 604800000) // 7 days in milliseconds
     public void checkLicensePeriodically() {
         checkLicense();
     }

File: src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java
Patch:
@@ -147,7 +147,7 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)
         return WebResponseUtils.pdfDocToWebResponse(
                 document,
                 Filenames.toSimpleFileName(pdfFile.getOriginalFilename())
-                        .replaceFirst("[.][^.]+$", "")
+                                .replaceFirst("[.][^.]+$", "")
                         + "_stamped.pdf");
     }
 
@@ -191,7 +191,7 @@ private void addTextStamp(
             String fileExtension = resourceDir.substring(resourceDir.lastIndexOf("."));
             File tempFile = Files.createTempFile("NotoSansFont", fileExtension).toFile();
             try (InputStream is = classPathResource.getInputStream();
-                 FileOutputStream os = new FileOutputStream(tempFile)) {
+                    FileOutputStream os = new FileOutputStream(tempFile)) {
                 IOUtils.copy(is, os);
                 font = PDType0Font.load(document, tempFile);
             } finally {
@@ -339,4 +339,4 @@ private float calculateTextWidth(String text, PDFont font, float fontSize) throw
     private float calculateTextCapHeight(PDFont font, float fontSize) {
         return font.getFontDescriptor().getCapHeight() / 1000 * fontSize;
     }
-}
\ No newline at end of file
+}

File: src/main/java/stirling/software/SPDF/EE/EEAppConfig.java
Patch:
@@ -3,13 +3,14 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Lazy;
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
 
 import lombok.extern.slf4j.Slf4j;
 import stirling.software.SPDF.model.ApplicationProperties;
 
 @Configuration
-@Lazy
+@Order(Ordered.HIGHEST_PRECEDENCE)
 @Slf4j
 public class EEAppConfig {
 

File: src/main/java/stirling/software/SPDF/EE/LicenseKeyChecker.java
Patch:
@@ -25,9 +25,10 @@ public LicenseKeyChecker(
             KeygenLicenseVerifier licenseService, ApplicationProperties applicationProperties) {
         this.licenseService = licenseService;
         this.applicationProperties = applicationProperties;
+        this.checkLicense();
     }
 
-    @Scheduled(fixedRate = 604800000, initialDelay = 1000) // 7 days in milliseconds
+    @Scheduled(fixedRate = 604800000) // 7 days in milliseconds
     public void checkLicensePeriodically() {
         checkLicense();
     }

File: src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java
Patch:
@@ -43,7 +43,6 @@ private boolean isCommandAvailable(String command) {
                     put("unoconv", List.of("Unoconv"));
                     put("qpdf", List.of("qpdf"));
                     put("tesseract", List.of("tesseract"));
-                    
                 }
             };
 
@@ -98,7 +97,7 @@ private void checkDependencyAndDisableGroup(String command) {
     public void checkDependencies() {
 
         // Check core dependencies
-    	checkDependencyAndDisableGroup("tesseract");
+        checkDependencyAndDisableGroup("tesseract");
         checkDependencyAndDisableGroup("soffice");
         checkDependencyAndDisableGroup("qpdf");
         checkDependencyAndDisableGroup("weasyprint");

File: src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java
Patch:
@@ -30,6 +30,7 @@ public void init() throws IllegalArgumentException, IOException {
             initializeAdminUser();
         } else {
             databaseBackupHelper.exportDatabase();
+            userService.migrateOauth2ToSSO();
         }
         initializeInternalApiUser();
     }

File: src/main/java/stirling/software/SPDF/config/security/oauth2/CustomOAuth2AuthenticationSuccessHandler.java
Patch:
@@ -82,8 +82,7 @@ public void onAuthenticationSuccess(
             }
             if (userService.usernameExistsIgnoreCase(username)
                     && userService.hasPassword(username)
-                    && !userService.isAuthenticationTypeByUsername(
-                            username, AuthenticationType.OAUTH2)
+                    && !userService.isAuthenticationTypeByUsername(username, AuthenticationType.SSO)
                     && oAuth.getAutoCreateUser()) {
                 response.sendRedirect(contextPath + "/logout?oauth2AuthenticationErrorWeb=true");
                 return;
@@ -95,7 +94,7 @@ public void onAuthenticationSuccess(
                     return;
                 }
                 if (principal instanceof OAuth2User) {
-                    userService.processOAuth2PostLogin(username, oAuth.getAutoCreateUser());
+                    userService.processSSOPostLogin(username, oAuth.getAutoCreateUser());
                 }
                 response.sendRedirect(contextPath + "/");
                 return;

File: src/main/java/stirling/software/SPDF/controller/api/UserController.java
Patch:
@@ -244,8 +244,8 @@ public RedirectView saveUser(
             return new RedirectView("/addUsers?messageType=invalidRole", true);
         }
 
-        if (authType.equalsIgnoreCase(AuthenticationType.OAUTH2.toString())) {
-            userService.saveUser(username, AuthenticationType.OAUTH2, role);
+        if (authType.equalsIgnoreCase(AuthenticationType.SSO.toString())) {
+            userService.saveUser(username, AuthenticationType.SSO, role);
         } else {
             if (password.isBlank()) {
                 return new RedirectView("/addUsers?messageType=invalidPassword", true);

File: src/main/java/stirling/software/SPDF/model/AuthenticationType.java
Patch:
@@ -2,5 +2,5 @@
 
 public enum AuthenticationType {
     WEB,
-    OAUTH2
+    SSO
 }

File: src/main/java/stirling/software/SPDF/repository/UserRepository.java
Patch:
@@ -1,5 +1,6 @@
 package stirling.software.SPDF.repository;
 
+import java.util.List;
 import java.util.Optional;
 
 import org.springframework.data.jpa.repository.JpaRepository;
@@ -19,4 +20,6 @@ public interface UserRepository extends JpaRepository<User, Long> {
     Optional<User> findByUsername(String username);
 
     Optional<User> findByApiKey(String apiKey);
+
+    List<User> findByAuthenticationTypeIgnoreCase(String authenticationType);
 }

File: src/main/java/stirling/software/SPDF/utils/FileToPdf.java
Patch:
@@ -241,7 +241,7 @@ public static byte[] convertBookTypeToPdf(byte[] bytes, String originalFilename)
             Files.deleteIfExists(tempOutputFile);
         }
     }
-    
+
     static String sanitizeZipFilename(String entryName) {
         if (entryName == null || entryName.trim().isEmpty()) {
             return entryName;

File: src/main/java/stirling/software/SPDF/controller/api/misc/FakeScanControllerWIP.java
Patch:
@@ -58,7 +58,7 @@ public class FakeScanControllerWIP {
     @Operation(
             summary = "Repair a PDF file",
             description =
-                    "This endpoint repairs a given PDF file by running Ghostscript command. The PDF is first saved to a temporary location, repaired, read back, and then returned as a response.")
+                    "This endpoint repairs a given PDF file by running qpdf command. The PDF is first saved to a temporary location, repaired, read back, and then returned as a response.")
     public ResponseEntity<byte[]> fakeScan(@ModelAttribute PDFFile request) throws IOException {
         MultipartFile inputFile = request.getFileInput();
 

File: src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java
Patch:
@@ -245,8 +245,7 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
             }
 
             // Handle SAML
-            if (applicationProperties.getSecurity().isSaml2Activ()
-                    && applicationProperties.getSystem().getEnableAlphaFunctionality()) {
+            if (applicationProperties.getSecurity().isSaml2Activ()) {
                 http.authenticationProvider(samlAuthenticationProvider());
                 http.saml2Login(
                                 saml2 ->
@@ -452,7 +451,7 @@ public RelyingPartyRegistrationRepository relyingPartyRegistrations() throws Exc
         RelyingPartyRegistration rp =
                 RelyingPartyRegistration.withRegistrationId(samlConf.getRegistrationId())
                         .signingX509Credentials((c) -> c.add(signingCredential))
-                        .assertingPartyDetails(
+                        .assertingPartyMetadata(
                                 (details) ->
                                         details.entityId(samlConf.getIdpIssuer())
                                                 .singleSignOnServiceLocation(

File: src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java
Patch:
@@ -191,6 +191,7 @@ public void init() {
         // LibreOffice
         addEndpointToGroup("LibreOffice", "repair");
         addEndpointToGroup("LibreOffice", "file-to-pdf");
+        addEndpointToGroup("Unoconv", "file-to-pdf");
         addEndpointToGroup("LibreOffice", "xlsx-to-pdf");
         addEndpointToGroup("LibreOffice", "pdf-to-word");
         addEndpointToGroup("LibreOffice", "pdf-to-presentation");

File: src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java
Patch:
@@ -42,6 +42,7 @@ private boolean isCommandAvailable(String command) {
                     put("ocrmypdf", List.of("OCRmyPDF"));
                     put("weasyprint", List.of("Weasyprint"));
                     put("pdftohtml", List.of("Pdftohtml"));
+                    put("unoconv", List.of("Unoconv"));
                 }
             };
 
@@ -101,6 +102,7 @@ public void checkDependencies() {
         checkDependencyAndDisableGroup("ocrmypdf");
         checkDependencyAndDisableGroup("weasyprint");
         checkDependencyAndDisableGroup("pdftohtml");
+        checkDependencyAndDisableGroup("unoconv");
 
         // Special handling for Python/OpenCV dependencies
         boolean pythonAvailable = isCommandAvailable("python3") || isCommandAvailable("python");

File: src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java
Patch:
@@ -6,4 +6,6 @@
 import stirling.software.SPDF.model.PersistentLogin;
 
 @Repository
-public interface PersistentLoginRepository extends JpaRepository<PersistentLogin, String> {}
+public interface PersistentLoginRepository extends JpaRepository<PersistentLogin, String> {
+    void deleteByUsername(String username);
+}

File: src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java
Patch:
@@ -50,4 +50,7 @@ public class SignPDFWithCertRequest extends PDFFile {
             description =
                     "The page number where the signature should be visible. This is required if showSignature is set to true")
     private Integer pageNumber;
+
+    @Schema(description = "Whether to visually show a signature logo along with the signature")
+    private boolean showLogo;
 }

File: src/main/java/stirling/software/SPDF/service/PostHogService.java
Patch:
@@ -43,7 +43,7 @@ public PostHogService(
     }
 
     private void captureSystemInfo() {
-        if (!Boolean.getBoolean(applicationProperties.getSystem().getEnableAnalytics())) {
+        if (!Boolean.parseBoolean(applicationProperties.getSystem().getEnableAnalytics())) {
             return;
         }
         try {

File: src/main/java/stirling/software/SPDF/config/AppConfig.java
Patch:
@@ -15,6 +15,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
+import org.springframework.context.annotation.Scope;
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.core.io.Resource;
 import org.springframework.core.io.ResourceLoader;
@@ -162,12 +163,14 @@ public String accessibilityStatement() {
     }
 
     @Bean(name = "analyticsPrompt")
+    @Scope("request")
     public boolean analyticsPrompt() {
         return applicationProperties.getSystem().getEnableAnalytics() == null
                 || "undefined".equals(applicationProperties.getSystem().getEnableAnalytics());
     }
 
     @Bean(name = "analyticsEnabled")
+    @Scope("request")
     public boolean analyticsEnabled() {
         if (applicationProperties.getEnterpriseEdition().isEnabled()) return true;
         return applicationProperties.getSystem().getEnableAnalytics() != null

File: src/main/java/stirling/software/SPDF/controller/api/SettingsController.java
Patch:
@@ -32,6 +32,7 @@ public ResponseEntity<String> updateApiKey(@RequestBody Boolean enabled) throws
         }
         GeneralUtils.saveKeyToConfig("system.enableAnalytics", String.valueOf(enabled), false);
         applicationProperties.getSystem().setEnableAnalytics(String.valueOf(enabled));
+
         return ResponseEntity.ok("Updated");
     }
 }

File: src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java
Patch:
@@ -203,7 +203,7 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
             }
 
             // Handle SAML
-            if (applicationProperties.getSecurity().isSaml2Activ()) {
+            if (applicationProperties.getSecurity().isSaml2Activ() && applicationProperties.getSystem().getEnableAlphaFunctionality()) {
                 http.authenticationProvider(samlAuthenticationProvider());
                 http.saml2Login(
                                 saml2 ->

File: src/main/java/stirling/software/SPDF/controller/api/pipeline/UserServiceInterface.java
Patch:
@@ -4,4 +4,6 @@ public interface UserServiceInterface {
     String getApiKeyForUser(String username);
 
     String getCurrentUsername();
+    
+    long getTotalUsersCount();
 }

File: src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java
Patch:
@@ -9,6 +9,7 @@
 import org.springframework.web.bind.annotation.*;
 
 import io.swagger.v3.oas.annotations.Operation;
+import io.swagger.v3.oas.annotations.tags.Tag;
 
 import stirling.software.SPDF.model.api.PDFFile;
 import stirling.software.SPDF.service.CustomPDDocumentFactory;

File: src/main/java/stirling/software/SPDF/SPdfApplication.java
Patch:
@@ -39,7 +39,8 @@ public class SPdfApplication {
     public void setServerPortStatic(String port) {
         if (port.equalsIgnoreCase("auto")) {
             // Use Spring Boot's automatic port assignment (server.port=0)
-            SPdfApplication.serverPortStatic = "0"; // This will let Spring Boot assign an available port
+            SPdfApplication.serverPortStatic =
+                    "0"; // This will let Spring Boot assign an available port
         } else {
             SPdfApplication.serverPortStatic = port;
         }

File: src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java
Patch:
@@ -15,7 +15,7 @@
 @Tag(name = "Convert", description = "Convert APIs")
 public class ConverterWebController {
 
-    @ConditionalOnExpression("#{bookAndHtmlFormatsInstalled}")
+    @ConditionalOnExpression("${bookAndHtmlFormatsInstalled}")
     @GetMapping("/book-to-pdf")
     @Hidden
     public String convertBookToPdfForm(Model model) {
@@ -60,7 +60,7 @@ public String convertToPdfForm(Model model) {
 
     // PDF TO......
 
-    @ConditionalOnExpression("#{bookAndHtmlFormatsInstalled}")
+    @ConditionalOnExpression("${bookAndHtmlFormatsInstalled}")
     @GetMapping("/pdf-to-book")
     @Hidden
     public String convertPdfToBookForm(Model model) {

File: src/main/java/stirling/software/SPDF/controller/api/converters/ExtractCSVController.java
Patch:
@@ -30,13 +30,13 @@
 @RestController
 @RequestMapping("/api/v1/convert")
 @Tag(name = "Convert", description = "Convert APIs")
-public class ExtractController {
+public class ExtractCSVController {
 
     private static final Logger logger = LoggerFactory.getLogger(CropController.class);
 
     @PostMapping(value = "/pdf/csv", consumes = "multipart/form-data")
     @Operation(
-            summary = "Extracts a PDF document to csv",
+            summary = "Extracts a CSV document from a PDF",
             description =
                     "This operation takes an input PDF file and returns CSV file of whole page. Input:PDF Output:CSV Type:SISO")
     public ResponseEntity<String> PdfToCsv(@ModelAttribute PDFFilePage form) throws Exception {

File: src/main/java/stirling/software/SPDF/SPdfApplication.java
Patch:
@@ -31,7 +31,6 @@ public class SPdfApplication {
 
     @Autowired private Environment env;
 
-
     @Autowired ApplicationProperties applicationProperties;
 
     private static String serverPortStatic;

File: src/main/java/stirling/software/SPDF/config/AppUpdateService.java
Patch:
@@ -18,7 +18,7 @@ class AppUpdateService {
     @Bean(name = "shouldShow")
     @Scope("request")
     public boolean shouldShow() {
-        boolean showUpdate = applicationProperties.getSystem().getShowUpdate();
+        boolean showUpdate = applicationProperties.getSystem().isShowUpdate();
         boolean showAdminResult = (showAdmin != null) ? showAdmin.getShowUpdateOnlyAdmins() : true;
         return showUpdate && showAdminResult;
     }

File: src/main/java/stirling/software/SPDF/config/security/AppUpdateAuthService.java
Patch:
@@ -20,7 +20,7 @@ class AppUpdateAuthService implements ShowAdminInterface {
 
     @Override
     public boolean getShowUpdateOnlyAdmins() {
-        boolean showUpdate = applicationProperties.getSystem().getShowUpdate();
+        boolean showUpdate = applicationProperties.getSystem().isShowUpdate();
         if (!showUpdate) {
             return showUpdate;
         }

File: src/main/java/stirling/software/SPDF/config/security/oauth2/CustomOAuth2AuthenticationSuccessHandler.java
Patch:
@@ -66,7 +66,7 @@ public void onAuthenticationSuccess(
             // Redirect to the original destination
             super.onAuthenticationSuccess(request, response, authentication);
         } else {
-            OAUTH2 oAuth = applicationProperties.getSecurity().getOAUTH2();
+            OAUTH2 oAuth = applicationProperties.getSecurity().getOauth2();
 
             if (loginAttemptService.isBlocked(username)) {
                 if (session != null) {

File: src/main/java/stirling/software/SPDF/config/security/oauth2/CustomOAuth2LogoutSuccessHandler.java
Patch:
@@ -43,7 +43,7 @@ public void onLogoutSuccess(
             }
             return;
         }
-        OAUTH2 oauth = applicationProperties.getSecurity().getOAUTH2();
+        OAUTH2 oauth = applicationProperties.getSecurity().getOauth2();
 
         if (authentication instanceof OAuth2AuthenticationToken) {
             OAuth2AuthenticationToken oauthToken = (OAuth2AuthenticationToken) authentication;

File: src/main/java/stirling/software/SPDF/config/security/oauth2/CustomOAuth2UserService.java
Patch:
@@ -43,7 +43,7 @@ public CustomOAuth2UserService(
 
     @Override
     public OidcUser loadUser(OidcUserRequest userRequest) throws OAuth2AuthenticationException {
-        OAUTH2 oauth2 = applicationProperties.getSecurity().getOAUTH2();
+        OAUTH2 oauth2 = applicationProperties.getSecurity().getOauth2();
         String usernameAttribute = oauth2.getUseAsUsername();
         if (usernameAttribute == null || usernameAttribute.trim().isEmpty()) {
             Client client = oauth2.getClient();

File: src/main/java/stirling/software/SPDF/controller/api/SplitPDFController.java
Patch:
@@ -27,9 +27,9 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
+import stirling.software.SPDF.config.PdfMetadataService;
 import stirling.software.SPDF.model.PdfMetadata;
 import stirling.software.SPDF.model.api.PDFWithPageNums;
-import stirling.software.SPDF.utils.PdfUtils;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
@@ -51,7 +51,7 @@ public ResponseEntity<byte[]> splitPdf(@ModelAttribute PDFWithPageNums request)
         // open the pdf document
 
         PDDocument document = Loader.loadPDF(file.getBytes());
-        PdfMetadata metadata = PdfUtils.extractMetadataFromPdf(document);
+        PdfMetadata metadata = PdfMetadataService.extractMetadataFromPdf(document);
         int totalPages = document.getNumberOfPages();
         List<Integer> pageNumbers = request.getPageNumbersList(document, false);
         System.out.println(
@@ -79,7 +79,7 @@ public ResponseEntity<byte[]> splitPdf(@ModelAttribute PDFWithPageNums request)
                 previousPageNumber = splitPoint + 1;
 
                 // Transfer metadata to split pdf
-                PdfUtils.setMetadataToPdf(splitDocument, metadata);
+                PdfMetadataService.setMetadataToPdf(splitDocument, metadata);
 
                 ByteArrayOutputStream baos = new ByteArrayOutputStream();
                 splitDocument.save(baos);

File: src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java
Patch:
@@ -31,9 +31,9 @@
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
+import stirling.software.SPDF.config.PdfMetadataService;
 import stirling.software.SPDF.model.PdfMetadata;
 import stirling.software.SPDF.model.api.SplitPdfByChaptersRequest;
-import stirling.software.SPDF.utils.PdfUtils;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
@@ -258,7 +258,7 @@ public List<ByteArrayOutputStream> getSplitDocumentsBoas(
         List<ByteArrayOutputStream> splitDocumentsBoas = new ArrayList<>();
         PdfMetadata metadata = null;
         if (includeMetadata) {
-            metadata = PdfUtils.extractMetadataFromPdf(sourceDocument);
+            metadata = PdfMetadataService.extractMetadataFromPdf(sourceDocument);
         }
         for (Bookmark bookmark : bookmarks) {
             try (PDDocument splitDocument = new PDDocument()) {
@@ -273,7 +273,7 @@ public List<ByteArrayOutputStream> getSplitDocumentsBoas(
                 }
                 ByteArrayOutputStream baos = new ByteArrayOutputStream();
                 if (includeMetadata) {
-                    PdfUtils.setMetadataToPdf(splitDocument, metadata);
+                    PdfMetadataService.setMetadataToPdf(splitDocument, metadata);
                 }
 
                 splitDocument.save(baos);

File: src/main/java/stirling/software/SPDF/controller/api/UserController.java
Patch:
@@ -208,8 +208,8 @@ public String updateUserSettings(HttpServletRequest request, Principal principal
     @PreAuthorize("hasRole('ROLE_ADMIN')")
     @PostMapping("/admin/saveUser")
     public RedirectView saveUser(
-            @RequestParam String username,
-            @RequestParam(name = "password", required = false) String password,
+            @RequestParam(name = "username", required = true) String username,
+            @RequestParam(name = "password", required = true) String password,
             @RequestParam(name = "role") String role,
             @RequestParam(name = "authType") String authType,
             @RequestParam(name = "forceChange", required = false, defaultValue = "false")

File: src/main/java/stirling/software/SPDF/controller/api/misc/FlattenController.java
Patch:
@@ -25,9 +25,9 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
+import stirling.software.SPDF.config.PdfMetadataService;
 import stirling.software.SPDF.model.PdfMetadata;
 import stirling.software.SPDF.model.api.misc.FlattenRequest;
-import stirling.software.SPDF.utils.PdfUtils;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
@@ -46,7 +46,7 @@ public ResponseEntity<byte[]> flatten(@ModelAttribute FlattenRequest request) th
         MultipartFile file = request.getFileInput();
 
         PDDocument document = Loader.loadPDF(file.getBytes());
-        PdfMetadata metadata = PdfUtils.extractMetadataFromPdf(document);
+        PdfMetadata metadata = PdfMetadataService.extractMetadataFromPdf(document);
         Boolean flattenOnlyForms = request.getFlattenOnlyForms();
 
         if (Boolean.TRUE.equals(flattenOnlyForms)) {
@@ -80,7 +80,7 @@ public ResponseEntity<byte[]> flatten(@ModelAttribute FlattenRequest request) th
                     logger.error("exception", e);
                 }
             }
-            PdfUtils.setMetadataToPdf(newDocument, metadata);
+            PdfMetadataService.setMetadataToPdf(newDocument, metadata);
             return WebResponseUtils.pdfDocToWebResponse(
                     newDocument, Filenames.toSimpleFileName(file.getOriginalFilename()));
         }

File: src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java
Patch:
@@ -9,6 +9,7 @@
 import org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
@@ -75,7 +76,8 @@ public ResponseEntity<byte[]> extractHeader(@ModelAttribute PDFFile request) thr
 
             return WebResponseUtils.bytesToWebResponse(
                     script.getBytes(StandardCharsets.UTF_8),
-                    Filenames.toSimpleFileName(inputFile.getOriginalFilename()) + ".js");
+                    Filenames.toSimpleFileName(inputFile.getOriginalFilename()) + ".js",
+                    MediaType.TEXT_PLAIN);
         }
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/pipeline/UserServiceInterface.java
Patch:
@@ -2,4 +2,6 @@
 
 public interface UserServiceInterface {
     String getApiKeyForUser(String username);
+
+    String getCurrentUsername();
 }

File: src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java
Patch:
@@ -51,7 +51,7 @@ public String login(HttpServletRequest request, Model model, Authentication auth
 
         Map<String, String> providerList = new HashMap<>();
 
-        OAUTH2 oauth = applicationProperties.getSecurity().getOAUTH2();
+        OAUTH2 oauth = applicationProperties.getSecurity().getOauth2();
         if (oauth != null) {
             if (oauth.isSettingsValid()) {
                 providerList.put("oidc", oauth.getProvider());
@@ -82,7 +82,7 @@ public String login(HttpServletRequest request, Model model, Authentication auth
 
         model.addAttribute("loginMethod", applicationProperties.getSecurity().getLoginMethod());
         model.addAttribute(
-                "oAuth2Enabled", applicationProperties.getSecurity().getOAUTH2().getEnabled());
+                "oAuth2Enabled", applicationProperties.getSecurity().getOauth2().getEnabled());
 
         model.addAttribute("currentPage", "login");
 
@@ -345,7 +345,7 @@ public String account(HttpServletRequest request, Model model, Authentication au
                 // Retrieve username and other attributes
                 username =
                         userDetails.getAttribute(
-                                applicationProperties.getSecurity().getOAUTH2().getUseAsUsername());
+                                applicationProperties.getSecurity().getOauth2().getUseAsUsername());
                 // Add oAuth2 Login attributes to the model
                 model.addAttribute("oAuth2Login", true);
             }

File: src/main/java/stirling/software/SPDF/repository/UserRepository.java
Patch:
@@ -16,7 +16,6 @@ public interface UserRepository extends JpaRepository<User, Long> {
     @Query("FROM User u LEFT JOIN FETCH u.settings where upper(u.username) = upper(:username)")
     Optional<User> findByUsernameIgnoreCaseWithSettings(@Param("username") String username);
 
-
     Optional<User> findByUsername(String username);
 
     Optional<User> findByApiKey(String apiKey);

File: src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java
Patch:
@@ -159,7 +159,7 @@ protected boolean shouldNotFilter(HttpServletRequest request) throws ServletExce
         };
 
         for (String pattern : permitAllPatterns) {
-            if (uri.startsWith(pattern) || uri.endsWith(".svg")) {
+            if (uri.startsWith(pattern) || uri.endsWith(".svg") || uri.endsWith(".png") || uri.endsWith(".ico")) {
                 return true;
             }
         }

File: src/test/java/stirling/software/SPDF/utils/RequestUriUtilsTest.java
Patch:
@@ -19,7 +19,7 @@ public void testIsStaticResource() {
         assertFalse(RequestUriUtils.isStaticResource("/api/v1/users"));
         assertFalse(RequestUriUtils.isStaticResource("/api/v1/orders"));
         assertFalse(RequestUriUtils.isStaticResource("/"));
-        assertFalse(RequestUriUtils.isStaticResource("/login"));
+        assertTrue(RequestUriUtils.isStaticResource("/login"));
         assertFalse(RequestUriUtils.isStaticResource("/register"));
         assertFalse(RequestUriUtils.isStaticResource("/api/v1/products"));
     }

File: src/main/java/stirling/software/SPDF/repository/UserRepository.java
Patch:
@@ -4,6 +4,7 @@
 
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
 import org.springframework.stereotype.Repository;
 
 import stirling.software.SPDF.model.User;
@@ -13,7 +14,8 @@ public interface UserRepository extends JpaRepository<User, Long> {
     Optional<User> findByUsernameIgnoreCase(String username);
 
     @Query("FROM User u LEFT JOIN FETCH u.settings where upper(u.username) = upper(:username)")
-    Optional<User> findByUsernameIgnoreCaseWithSettings(String username);
+    Optional<User> findByUsernameIgnoreCaseWithSettings(@Param("username") String username);
+
 
     Optional<User> findByUsername(String username);
 

File: src/main/java/stirling/software/SPDF/SPdfApplication.java
Patch:
@@ -31,6 +31,7 @@ public class SPdfApplication {
 
     @Autowired private Environment env;
 
+
     @Autowired ApplicationProperties applicationProperties;
 
     private static String serverPortStatic;

File: src/main/java/stirling/software/SPDF/model/User.java
Patch:
@@ -1,14 +1,14 @@
 package stirling.software.SPDF.model;
 
-import jakarta.persistence.*;
-
 import java.io.Serializable;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.stream.Collectors;
 
+import jakarta.persistence.*;
+
 @Entity
 @Table(name = "users")
 public class User implements Serializable {

File: src/main/java/stirling/software/SPDF/model/api/misc/AddPageNumbersRequest.java
Patch:
@@ -15,6 +15,9 @@ public class AddPageNumbersRequest extends PDFWithPageNums {
             allowableValues = {"small", "medium", "large"})
     private String customMargin;
 
+    private float fontSize;
+    private String fontType;
+
     @Schema(description = "Position: 1 of 9 positions", minimum = "1", maximum = "9")
     private int position;
 

File: src/main/java/stirling/software/SPDF/repository/UserRepository.java
Patch:
@@ -1,11 +1,12 @@
 package stirling.software.SPDF.repository;
 
+import java.util.Optional;
+
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.stereotype.Repository;
-import stirling.software.SPDF.model.User;
 
-import java.util.Optional;
+import stirling.software.SPDF.model.User;
 
 @Repository
 public interface UserRepository extends JpaRepository<User, Long> {

File: src/main/java/stirling/software/SPDF/utils/GeneralUtils.java
Patch:
@@ -262,5 +262,4 @@ public static boolean createDir(String path) {
         }
         return true;
     }
-
 }

File: src/main/java/stirling/software/SPDF/utils/GeneralUtils.java
Patch:
@@ -262,4 +262,5 @@ public static boolean createDir(String path) {
         }
         return true;
     }
+
 }

File: src/main/java/stirling/software/SPDF/config/AppConfig.java
Patch:
@@ -126,13 +126,12 @@ public String finishedFoldersDir() {
     }
 
     @Bean(name = "directoryFilter")
-    public Predicate<Path> processPDFOnlyFilter() {
+    public Predicate<Path> processOnlyFiles() {
         return path -> {
             if (Files.isDirectory(path)) {
                 return !path.toString().contains("processing");
             } else {
-                String fileName = path.getFileName().toString();
-                return fileName.endsWith(".pdf");
+                return true;
             }
         };
     }

File: src/main/java/stirling/software/SPDF/model/User.java
Patch:
@@ -57,7 +57,7 @@ public class User implements Serializable {
     @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, mappedBy = "user")
     private Set<Authority> authorities = new HashSet<>();
 
-    @ElementCollection
+    @ElementCollection(fetch = FetchType.EAGER)
     @MapKeyColumn(name = "setting_key")
     @Lob
     @Column(name = "setting_value", columnDefinition = "CLOB")

File: src/main/java/stirling/software/SPDF/SPdfApplication.java
Patch:
@@ -65,6 +65,7 @@ public void init() {
     public static void main(String[] args) throws IOException, InterruptedException {
 
         SpringApplication app = new SpringApplication(SPdfApplication.class);
+        app.setAdditionalProfiles("default");
         app.addInitializers(new ConfigInitializer());
         Map<String, String> propertyFiles = new HashMap<>();
 

File: src/main/java/stirling/software/SPDF/controller/api/pipeline/ApiDocService.java
Patch:
@@ -43,7 +43,7 @@ private String getApiDocsUrl() {
 
     Map<String, List<String>> outputToFileTypes = new HashMap<>();
 
-    public List getExtensionTypes(boolean output, String operationName) {
+    public List<String> getExtensionTypes(boolean output, String operationName) {
         if (outputToFileTypes.size() == 0) {
             outputToFileTypes.put("PDF", Arrays.asList("pdf"));
             outputToFileTypes.put(

File: src/main/java/stirling/software/SPDF/model/api/converters/UrlToPdfRequest.java
Patch:
@@ -9,6 +9,8 @@
 @EqualsAndHashCode
 public class UrlToPdfRequest {
 
-    @Schema(description = "The input URL to be converted to a PDF file", required = true)
+    @Schema(
+            description = "The input URL to be converted to a PDF file",
+            requiredMode = Schema.RequiredMode.REQUIRED)
     private String urlInput;
 }

File: src/main/java/stirling/software/SPDF/model/api/filter/ContainsTextRequest.java
Patch:
@@ -10,6 +10,6 @@
 @EqualsAndHashCode(callSuper = true)
 public class ContainsTextRequest extends PDFWithPageNums {
 
-    @Schema(description = "The text to check for", required = true)
+    @Schema(description = "The text to check for", requiredMode = Schema.RequiredMode.REQUIRED)
     private String text;
 }

File: src/main/java/stirling/software/SPDF/model/api/filter/FileSizeRequest.java
Patch:
@@ -10,6 +10,6 @@
 @EqualsAndHashCode(callSuper = true)
 public class FileSizeRequest extends PDFComparison {
 
-    @Schema(description = "File Size", required = true)
+    @Schema(description = "File Size", requiredMode = Schema.RequiredMode.REQUIRED)
     private String fileSize;
 }

File: src/main/java/stirling/software/SPDF/model/api/filter/PageRotationRequest.java
Patch:
@@ -10,6 +10,6 @@
 @EqualsAndHashCode(callSuper = true)
 public class PageRotationRequest extends PDFComparison {
 
-    @Schema(description = "Rotation in degrees", required = true)
+    @Schema(description = "Rotation in degrees", requiredMode = Schema.RequiredMode.REQUIRED)
     private int rotation;
 }

File: src/main/java/stirling/software/SPDF/model/api/filter/PageSizeRequest.java
Patch:
@@ -10,6 +10,6 @@
 @EqualsAndHashCode(callSuper = true)
 public class PageSizeRequest extends PDFComparison {
 
-    @Schema(description = "Standard Page Size", required = true)
+    @Schema(description = "Standard Page Size", requiredMode = Schema.RequiredMode.REQUIRED)
     private String standardPageSize;
 }

File: src/main/java/stirling/software/SPDF/model/api/general/OverlayPdfsRequest.java
Patch:
@@ -20,13 +20,13 @@ public class OverlayPdfsRequest extends PDFFile {
     @Schema(
             description =
                     "The mode of overlaying: 'SequentialOverlay' for sequential application, 'InterleavedOverlay' for round-robin application, 'FixedRepeatOverlay' for fixed repetition based on provided counts",
-            required = true)
+            requiredMode = Schema.RequiredMode.REQUIRED)
     private String overlayMode;
 
     @Schema(
             description =
                     "An array of integers specifying the number of times each corresponding overlay file should be applied in the 'FixedRepeatOverlay' mode. This should match the length of the overlayFiles array.",
-            required = false)
+            requiredMode = Schema.RequiredMode.NOT_REQUIRED)
     private int[] counts;
 
     @Schema(description = "Overlay position 0 is Foregound, 1 is Background")

File: src/main/java/stirling/software/SPDF/model/api/general/SplitPdfBySizeOrCountRequest.java
Patch:
@@ -13,14 +13,14 @@ public class SplitPdfBySizeOrCountRequest extends PDFFile {
     @Schema(
             description =
                     "Determines the type of split: 0 for size, 1 for page count, 2 for document count",
-            required = false,
+            requiredMode = Schema.RequiredMode.NOT_REQUIRED,
             defaultValue = "0")
     private int splitType;
 
     @Schema(
             description =
                     "Value for split: size in MB (e.g., '10MB') or number of pages (e.g., '5')",
-            required = false,
+            requiredMode = Schema.RequiredMode.NOT_REQUIRED,
             defaultValue = "10MB")
     private String splitValue;
 }

File: src/main/java/stirling/software/SPDF/model/api/misc/AddStampRequest.java
Patch:
@@ -15,7 +15,7 @@ public class AddStampRequest extends PDFWithPageNums {
     @Schema(
             description = "The stamp type (text or image)",
             allowableValues = {"text", "image"},
-            required = true)
+            requiredMode = Schema.RequiredMode.REQUIRED)
     private String stampType;
 
     @Schema(description = "The stamp text")

File: src/main/java/stirling/software/SPDF/model/api/misc/AutoSplitPdfRequest.java
Patch:
@@ -13,7 +13,7 @@ public class AutoSplitPdfRequest extends PDFFile {
     @Schema(
             description =
                     "Flag indicating if the duplex mode is active, where the page after the divider also gets removed.",
-            required = false,
+            requiredMode = Schema.RequiredMode.NOT_REQUIRED,
             defaultValue = "false")
     private boolean duplexMode;
 }

File: src/main/java/stirling/software/SPDF/model/api/misc/ExtractHeaderRequest.java
Patch:
@@ -13,7 +13,7 @@ public class ExtractHeaderRequest extends PDFFile {
     @Schema(
             description =
                     "Flag indicating whether to use the first text as a fallback if no suitable title is found. Defaults to false.",
-            required = false,
+            requiredMode = Schema.RequiredMode.NOT_REQUIRED,
             defaultValue = "false")
     private boolean useFirstTextAsFallback;
 }

File: src/main/java/stirling/software/SPDF/model/api/misc/ExtractImageScansRequest.java
Patch:
@@ -10,7 +10,9 @@
 @Data
 @EqualsAndHashCode
 public class ExtractImageScansRequest {
-    @Schema(description = "The input file containing image scans", required = true)
+    @Schema(
+            description = "The input file containing image scans",
+            requiredMode = Schema.RequiredMode.REQUIRED)
     private MultipartFile fileInput;
 
     @Schema(

File: src/main/java/stirling/software/SPDF/model/api/misc/PrintFileRequest.java
Patch:
@@ -10,6 +10,8 @@
 @EqualsAndHashCode(callSuper = true)
 public class PrintFileRequest extends PDFFile {
 
-    @Schema(description = "Name of printer to match against", required = true)
+    @Schema(
+            description = "Name of printer to match against",
+            requiredMode = Schema.RequiredMode.REQUIRED)
     private String printerName;
 }

File: src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java
Patch:
@@ -15,7 +15,7 @@ public class AddWatermarkRequest extends PDFFile {
     @Schema(
             description = "The watermark type (text or image)",
             allowableValues = {"text", "image"},
-            required = true)
+            requiredMode = Schema.RequiredMode.REQUIRED)
     private String watermarkType;
 
     @Schema(description = "The watermark text")

File: src/main/java/stirling/software/SPDF/model/api/security/PDFPasswordRequest.java
Patch:
@@ -10,6 +10,8 @@
 @EqualsAndHashCode(callSuper = true)
 public class PDFPasswordRequest extends PDFFile {
 
-    @Schema(description = "The password of the PDF file", required = true)
+    @Schema(
+            description = "The password of the PDF file",
+            requiredMode = Schema.RequiredMode.REQUIRED)
     private String password;
 }

File: src/main/java/stirling/software/SPDF/utils/GeneralUtils.java
Patch:
@@ -6,6 +6,7 @@
 import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
+import java.net.URI;
 import java.net.URL;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
@@ -77,7 +78,7 @@ public static boolean isValidURL(String urlStr) {
 
     public static boolean isURLReachable(String urlStr) {
         try {
-            URL url = new URL(urlStr);
+            URL url = URI.create(urlStr).toURL();
             HttpURLConnection connection = (HttpURLConnection) url.openConnection();
             connection.setRequestMethod("HEAD");
             int responseCode = connection.getResponseCode();

File: src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java
Patch:
@@ -58,7 +58,7 @@ protected void doFilterInternal(
                 try {
                     // Use API key to authenticate. This requires you to have an authentication
                     // provider for API keys.
-                    Optional<User> user = userService.loadUserByApiKey(apiKey);
+                    Optional<User> user = userService.getUserByApiKey(apiKey);
                     if (!user.isPresent()) {
                         response.setStatus(HttpStatus.UNAUTHORIZED.value());
                         response.getWriter().write("Invalid API Key.");

File: src/main/java/stirling/software/SPDF/config/security/UserService.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.security.oauth2.core.user.OAuth2User;
 import org.springframework.stereotype.Service;
 
-import lombok.extern.slf4j.Slf4j;
 import stirling.software.SPDF.config.DatabaseBackupInterface;
 import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;
 import stirling.software.SPDF.controller.api.pipeline.UserServiceInterface;

File: src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java
Patch:
@@ -140,9 +140,9 @@ private void extractImagesFromPage(
             Set<Integer> processedImages,
             ZipOutputStream zos)
             throws IOException {
-        if(page.getResources() == null || page.getResources().getXObjectNames() == null) {
-    		return;
-    	}
+        if (page.getResources() == null || page.getResources().getXObjectNames() == null) {
+            return;
+        }
         for (COSName name : page.getResources().getXObjectNames()) {
             if (page.getResources().isImageXObject(name)) {
                 PDImageXObject image = (PDImageXObject) page.getResources().getXObject(name);

File: src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java
Patch:
@@ -16,6 +16,7 @@
 import io.swagger.v3.oas.annotations.tags.Tag;
 
 import stirling.software.SPDF.model.ApplicationProperties;
+import stirling.software.SPDF.utils.CheckProgramInstall;
 
 @Controller
 @Tag(name = "Misc", description = "Miscellaneous APIs")
@@ -34,6 +35,8 @@ public String compressPdfForm(Model model) {
     @Hidden
     public ModelAndView extractImageScansForm() {
         ModelAndView modelAndView = new ModelAndView("misc/extract-image-scans");
+        boolean isPython = CheckProgramInstall.isPythonAvailable();
+        modelAndView.addObject("isPython", isPython);
         modelAndView.addObject("currentPage", "extract-image-scans");
         return modelAndView;
     }

File: src/main/java/stirling/software/SPDF/repository/UserRepository.java
Patch:
@@ -13,5 +13,5 @@ public interface UserRepository extends JpaRepository<User, Long> {
 
     Optional<User> findByUsername(String username);
 
-    User findByApiKey(String apiKey);
+    Optional<User> findByApiKey(String apiKey);
 }

File: src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java
Patch:
@@ -137,6 +137,7 @@ public void init() {
         addEndpointToGroup("Other", "auto-rename");
         addEndpointToGroup("Other", "get-info-on-pdf");
         addEndpointToGroup("Other", "show-javascript");
+        addEndpointToGroup("Other", "remove-image-pdf");
 
         // CLI
         addEndpointToGroup("CLI", "compress-pdf");
@@ -221,6 +222,7 @@ public void init() {
         addEndpointToGroup("Java", "split-pdf-by-sections");
         addEndpointToGroup("Java", REMOVE_BLANKS);
         addEndpointToGroup("Java", "pdf-to-text");
+        addEndpointToGroup("Java", "remove-image-pdf");
 
         // Javascript
         addEndpointToGroup("Javascript", "pdf-organizer");

File: src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java
Patch:
@@ -44,4 +44,7 @@ public class AddWatermarkRequest extends PDFFile {
 
     @Schema(description = "The height spacer between watermark elements", example = "50")
     private int heightSpacer;
+
+    @Schema(description = "Convert the redacted PDF to an image", defaultValue = "false")
+    private boolean convertPDFToImage;
 }

File: src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java
Patch:
@@ -13,7 +13,7 @@ public class FileToPdfTest {
     @Test
     public void testConvertHtmlToPdf() {
         HTMLToPdfRequest request = new HTMLToPdfRequest();
-        byte[] fileBytes = new byte[10]; // Sample file bytes
+        byte[] fileBytes = new byte[0]; // Sample file bytes
         String fileName = "test.html"; // Sample file name
         boolean htmlFormatsInstalled = true; // Sample boolean value
 

File: src/main/java/stirling/software/SPDF/repository/AuthorityRepository.java
Patch:
@@ -3,9 +3,11 @@
 import java.util.Set;
 
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
 
 import stirling.software.SPDF.model.Authority;
 
+@Repository
 public interface AuthorityRepository extends JpaRepository<Authority, Long> {
     // Set<Authority> findByUsername(String username);
     Set<Authority> findByUser_Username(String username);

File: src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java
Patch:
@@ -1,7 +1,9 @@
 package stirling.software.SPDF.repository;
 
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
 
 import stirling.software.SPDF.model.PersistentLogin;
 
+@Repository
 public interface PersistentLoginRepository extends JpaRepository<PersistentLogin, String> {}

File: src/main/java/stirling/software/SPDF/repository/UserRepository.java
Patch:
@@ -3,10 +3,12 @@
 import java.util.Optional;
 
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
 
 import stirling.software.SPDF.model.User;
 
-public interface UserRepository extends JpaRepository<User, String> {
+@Repository
+public interface UserRepository extends JpaRepository<User, Long> {
     Optional<User> findByUsernameIgnoreCase(String username);
 
     Optional<User> findByUsername(String username);

File: src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java
Patch:
@@ -99,7 +99,7 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req
                 List<String> command = new ArrayList<>();
                 command.add("gs");
                 command.add("-sDEVICE=pdfwrite");
-                command.add("-dCompatibilityLevel=1.4");
+                command.add("-dCompatibilityLevel=1.5");
 
                 switch (optimizeLevel) {
                     case 1:

File: src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java
Patch:
@@ -68,7 +68,7 @@ public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest req
         boolean canModifyAnnotations = request.isCanModifyAnnotations();
         boolean canPrint = request.isCanPrint();
         boolean canPrintFaithful = request.isCanPrintFaithful();
-
+        System.out.println(fileInput.getOriginalFilename());
         PDDocument document = Loader.loadPDF(fileInput.getBytes());
         AccessPermission ap = new AccessPermission();
         ap.setCanAssembleDocument(!canAssembleDocument);

File: src/main/java/stirling/software/SPDF/model/User.java
Patch:
@@ -16,6 +16,7 @@
 import jakarta.persistence.GenerationType;
 import jakarta.persistence.Id;
 import jakarta.persistence.JoinColumn;
+import jakarta.persistence.Lob;
 import jakarta.persistence.MapKeyColumn;
 import jakarta.persistence.OneToMany;
 import jakarta.persistence.Table;
@@ -55,7 +56,8 @@ public class User {
 
     @ElementCollection
     @MapKeyColumn(name = "setting_key")
-    @Column(name = "setting_value")
+    @Lob
+    @Column(name = "setting_value", columnDefinition = "CLOB")
     @CollectionTable(name = "user_settings", joinColumns = @JoinColumn(name = "user_id"))
     private Map<String, String> settings = new HashMap<>(); // Key-value pairs of settings.
 

File: src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java
Patch:
@@ -38,12 +38,12 @@
 import stirling.software.SPDF.config.security.oauth2.CustomOAuth2LogoutSuccessHandler;
 import stirling.software.SPDF.config.security.oauth2.CustomOAuth2UserService;
 import stirling.software.SPDF.model.ApplicationProperties;
-import stirling.software.SPDF.model.ApplicationProperties.GithubProvider;
-import stirling.software.SPDF.model.ApplicationProperties.GoogleProvider;
-import stirling.software.SPDF.model.ApplicationProperties.KeycloakProvider;
 import stirling.software.SPDF.model.ApplicationProperties.Security.OAUTH2;
 import stirling.software.SPDF.model.ApplicationProperties.Security.OAUTH2.Client;
 import stirling.software.SPDF.model.User;
+import stirling.software.SPDF.model.provider.GithubProvider;
+import stirling.software.SPDF.model.provider.GoogleProvider;
+import stirling.software.SPDF.model.provider.KeycloakProvider;
 import stirling.software.SPDF.repository.JPATokenRepositoryImpl;
 
 @Configuration

File: src/main/java/stirling/software/SPDF/config/security/oauth2/CustomOAuth2LogoutSuccessHandler.java
Patch:
@@ -16,6 +16,7 @@
 import stirling.software.SPDF.model.ApplicationProperties;
 import stirling.software.SPDF.model.ApplicationProperties.Security.OAUTH2;
 import stirling.software.SPDF.model.Provider;
+import stirling.software.SPDF.model.provider.UnsupportedProviderException;
 import stirling.software.SPDF.utils.UrlUtils;
 
 public class CustomOAuth2LogoutSuccessHandler extends SimpleUrlLogoutSuccessHandler {
@@ -51,8 +52,8 @@ public void onLogoutSuccess(
                 Provider provider = oauth.getClient().get(registrationId);
                 issuer = provider.getIssuer();
                 clientId = provider.getClientId();
-            } catch (Exception e) {
-                logger.error("exception", e);
+            } catch (UnsupportedProviderException e) {
+                logger.error(e.getMessage());
             }
 
         } else {

File: src/main/java/stirling/software/SPDF/model/SortTypes.java
Patch:
@@ -6,6 +6,7 @@ public enum SortTypes {
     BOOKLET_SORT,
     SIDE_STITCH_BOOKLET_SORT,
     ODD_EVEN_SPLIT,
+    ODD_EVEN_MERGE,
     REMOVE_FIRST,
     REMOVE_LAST,
     REMOVE_FIRST_AND_LAST,

File: src/main/java/stirling/software/SPDF/model/api/general/RearrangePagesRequest.java
Patch:
@@ -19,6 +19,7 @@ public class RearrangePagesRequest extends PDFWithPageNums {
                             + "DUPLEX_SORT: Sorts pages as if all fronts were scanned then all backs in reverse (1, n, 2, n-1, ...). "
                             + "BOOKLET_SORT: Arranges pages for booklet printing (last, first, second, second last, ...).\n"
                             + "ODD_EVEN_SPLIT: Splits and arranges pages into odd and even numbered pages.\n"
+                            + "ODD_EVEN_MERGE: Merges pages and organises them alternately into odd and even pages.\n"
                             + "REMOVE_FIRST: Removes the first page.\n"
                             + "REMOVE_LAST: Removes the last page.\n"
                             + "REMOVE_FIRST_AND_LAST: Removes both the first and the last pages.\n")

File: src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationSuccessHandler.java
Patch:
@@ -37,7 +37,8 @@ public void onAuthenticationSuccess(
                         : null;
 
         if (savedRequest != null
-                && !RequestUriUtils.isStaticResource(savedRequest.getRedirectUrl())) {
+                && !RequestUriUtils.isStaticResource(
+                        request.getContextPath(), savedRequest.getRedirectUrl())) {
             // Redirect to the original destination
             super.onAuthenticationSuccess(request, response, authentication);
         } else {

File: src/main/java/stirling/software/SPDF/config/security/IPRateLimitingFilter.java
Patch:
@@ -33,7 +33,8 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
             String method = httpRequest.getMethod();
             String requestURI = httpRequest.getRequestURI();
             // Check if the request is for static resources
-            boolean isStaticResource = RequestUriUtils.isStaticResource(requestURI);
+            boolean isStaticResource =
+                    RequestUriUtils.isStaticResource(httpRequest.getContextPath(), requestURI);
 
             // If it's a static resource, just continue the filter chain and skip the logic below
             if (isStaticResource) {

File: src/main/java/stirling/software/SPDF/controller/api/UserController.java
Patch:
@@ -59,7 +59,7 @@ public String register(@ModelAttribute UsernameAndPass requestModel, Model model
     @PostMapping("/change-username")
     public RedirectView changeUsername(
             Principal principal,
-            @RequestParam(name = "currentPassword") String currentPassword,
+            @RequestParam(name = "currentPasswordChangeUsername") String currentPassword,
             @RequestParam(name = "newUsername") String newUsername,
             HttpServletRequest request,
             HttpServletResponse response,

File: src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java
Patch:
@@ -58,7 +58,7 @@ public boolean preHandle(
 
                 // Redirect to the URL with only allowed query parameters
                 String redirectUrl = requestURI + "?" + newQueryString;
-                
+
                 response.sendRedirect(request.getContextPath() + redirectUrl);
                 return false;
             }

File: src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java
Patch:
@@ -43,7 +43,7 @@ public void onAuthenticationFailure(
         logger.error("Failed login attempt from IP: {}", ip);
 
         String contextPath = request.getContextPath();
-        
+
         if (exception.getClass().isAssignableFrom(InternalAuthenticationServiceException.class)
                 || "Password must not be null".equalsIgnoreCase(exception.getMessage())) {
             response.sendRedirect(contextPath + "/login?error=oauth2AuthenticationError");

File: src/main/java/stirling/software/SPDF/utils/UrlUtils.java
Patch:
@@ -4,8 +4,7 @@
 
 public class UrlUtils {
 
-private UrlUtils() {
-}
+    private UrlUtils() {}
 
     public static String getOrigin(HttpServletRequest request) {
         String scheme = request.getScheme(); // http or https

File: src/main/java/stirling/software/SPDF/utils/UrlUtils.java
Patch:
@@ -4,6 +4,9 @@
 
 public class UrlUtils {
 
+private UrlUtils() {
+}
+
     public static String getOrigin(HttpServletRequest request) {
         String scheme = request.getScheme(); // http or https
         String serverName = request.getServerName(); // localhost

File: src/main/java/stirling/software/SPDF/utils/UrlUtils.java
Patch:
@@ -4,6 +4,9 @@
 
 public class UrlUtils {
 
+private UrlUtils() {
+}
+
     public static String getOrigin(HttpServletRequest request) {
         String scheme = request.getScheme(); // http or https
         String serverName = request.getServerName(); // localhost

File: src/main/java/stirling/software/SPDF/config/security/AppUpdateAuthService.java
Patch:
@@ -18,6 +18,7 @@ class AppUpdateAuthService implements ShowAdminInterface {
     @Autowired private UserRepository userRepository;
     @Autowired private ApplicationProperties applicationProperties;
 
+    @Override
     public boolean getShowUpdateOnlyAdmins() {
         boolean showUpdate = applicationProperties.getSystem().getShowUpdate();
         if (!showUpdate) {

File: src/main/java/stirling/software/SPDF/model/ApplicationProperties.java
Patch:
@@ -559,6 +559,7 @@ public void setClientSecret(String clientSecret) {
             this.clientSecret = clientSecret;
         }
 
+        @Override
         public Collection<String> getScopes() {
             if (scopes == null || scopes.isEmpty()) {
                 scopes = new ArrayList<>();
@@ -661,6 +662,7 @@ public Collection<String> getScopes() {
             return scopes;
         }
 
+        @Override
         public void setScopes(String scopes) {
             this.scopes =
                     Arrays.stream(scopes.split(",")).map(String::trim).collect(Collectors.toList());

File: src/main/java/stirling/software/SPDF/config/security/AppUpdateAuthService.java
Patch:
@@ -18,6 +18,7 @@ class AppUpdateAuthService implements ShowAdminInterface {
     @Autowired private UserRepository userRepository;
     @Autowired private ApplicationProperties applicationProperties;
 
+    @Override
     public boolean getShowUpdateOnlyAdmins() {
         boolean showUpdate = applicationProperties.getSystem().getShowUpdate();
         if (!showUpdate) {

File: src/main/java/stirling/software/SPDF/model/ApplicationProperties.java
Patch:
@@ -559,6 +559,7 @@ public void setClientSecret(String clientSecret) {
             this.clientSecret = clientSecret;
         }
 
+        @Override
         public Collection<String> getScopes() {
             if (scopes == null || scopes.isEmpty()) {
                 scopes = new ArrayList<>();
@@ -661,6 +662,7 @@ public Collection<String> getScopes() {
             return scopes;
         }
 
+        @Override
         public void setScopes(String scopes) {
             this.scopes =
                     Arrays.stream(scopes.split(",")).map(String::trim).collect(Collectors.toList());

File: src/main/java/stirling/software/SPDF/controller/api/strippers/PDFTableStripper.java
Patch:
@@ -117,7 +117,6 @@ public static void addTo(Interval x, LinkedList<Interval> columns) {
     /**
      * Instantiate a new PDFTableStripper object.
      *
-     * @param document
      * @throws IOException If there is an error loading the properties.
      */
     public PDFTableStripper() throws IOException {

File: src/main/java/stirling/software/SPDF/utils/FileToPdf.java
Patch:
@@ -53,7 +53,7 @@ public static byte[] convertHtmlToPdf(
                 command.add("--paper-size");
                 command.add("a4");
 
-                if (request.getZoom() != 1.0) {
+                if (request != null && request.getZoom() != 1.0) {
                     // Create a temporary CSS file
                     File tempCssFile = Files.createTempFile("customStyle", ".css").toFile();
                     try (FileWriter writer = new FileWriter(tempCssFile)) {

File: src/main/java/stirling/software/SPDF/controller/api/strippers/PDFTableStripper.java
Patch:
@@ -117,7 +117,6 @@ public static void addTo(Interval x, LinkedList<Interval> columns) {
     /**
      * Instantiate a new PDFTableStripper object.
      *
-     * @param document
      * @throws IOException If there is an error loading the properties.
      */
     public PDFTableStripper() throws IOException {

File: src/main/java/stirling/software/SPDF/utils/FileToPdf.java
Patch:
@@ -52,7 +52,7 @@ public static byte[] convertHtmlToPdf(
                 command.add("--paper-size");
                 command.add("a4");
 
-                if (request.getZoom() != 1.0) {
+                if (request != null && request.getZoom() != 1.0) {
                     // Create a temporary CSS file
                     File tempCssFile = Files.createTempFile("customStyle", ".css").toFile();
                     try (FileWriter writer = new FileWriter(tempCssFile)) {

File: src/main/java/stirling/software/SPDF/model/ApplicationProperties.java
Patch:
@@ -357,7 +357,7 @@ public static class Client {
 
                 public Provider get(String registrationId) throws Exception {
                     switch (registrationId) {
-                        case "gogole":
+                        case "google":
                             return getGoogle();
                         case "github":
                             return getGithub();

File: src/main/java/stirling/software/SPDF/model/ApplicationProperties.java
Patch:
@@ -357,7 +357,7 @@ public static class Client {
 
                 public Provider get(String registrationId) throws Exception {
                     switch (registrationId) {
-                        case "gogole":
+                        case "google":
                             return getGoogle();
                         case "github":
                             return getGithub();

File: src/main/java/stirling/software/SPDF/config/ConfigInitializer.java
Patch:
@@ -70,7 +70,6 @@ public void ensureConfigExists() throws IOException, URISyntaxException {
                     if (!entry.isEmpty()) {
                         // Check if this comment has been uncommented in userLines
                         String key = entry.split(":")[0].trim();
-                        System.out.println("key=" + key + ", entry=" + entry );
                         addLine(resultLines, userLines, templateLine, key);
                     } else {
                         resultLines.add(templateLine);
@@ -104,7 +103,6 @@ private static void addLine(List<String> resultLines, List<String> userLines, St
         boolean added = false;
         int templateIndentationLevel = getIndentationLevel(templateLine);
         for (String settingsLine : userLines) {
-        	if(settingsLine.contains("oauth2") || settingsLine.contains("enabled") )
             if (settingsLine.trim().startsWith(key + ":")) {
                 int settingsIndentationLevel = getIndentationLevel(settingsLine);
                 // Check if it is correct settingsLine and has the same parent as templateLine

File: src/main/java/stirling/software/SPDF/config/ConfigInitializer.java
Patch:
@@ -70,7 +70,6 @@ public void ensureConfigExists() throws IOException, URISyntaxException {
                     if (!entry.isEmpty()) {
                         // Check if this comment has been uncommented in userLines
                         String key = entry.split(":")[0].trim();
-                        System.out.println("key=" + key + ", entry=" + entry );
                         addLine(resultLines, userLines, templateLine, key);
                     } else {
                         resultLines.add(templateLine);
@@ -104,7 +103,6 @@ private static void addLine(List<String> resultLines, List<String> userLines, St
         boolean added = false;
         int templateIndentationLevel = getIndentationLevel(templateLine);
         for (String settingsLine : userLines) {
-        	if(settingsLine.contains("oauth2") || settingsLine.contains("enabled") )
             if (settingsLine.trim().startsWith(key + ":")) {
                 int settingsIndentationLevel = getIndentationLevel(settingsLine);
                 // Check if it is correct settingsLine and has the same parent as templateLine

File: src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java
Patch:
@@ -146,14 +146,14 @@ public void init() {
         addEndpointToGroup("CLI", "xlsx-to-pdf");
         addEndpointToGroup("CLI", "pdf-to-word");
         addEndpointToGroup("CLI", "pdf-to-presentation");
-        addEndpointToGroup("CLI", "pdf-to-text");
         addEndpointToGroup("CLI", "pdf-to-html");
         addEndpointToGroup("CLI", "pdf-to-xml");
         addEndpointToGroup("CLI", "ocr-pdf");
         addEndpointToGroup("CLI", "html-to-pdf");
         addEndpointToGroup("CLI", "url-to-pdf");
         addEndpointToGroup("CLI", "book-to-pdf");
         addEndpointToGroup("CLI", "pdf-to-book");
+        addEndpointToGroup("CLI", "pdf-to-rtf");
 
         // Calibre
         addEndpointToGroup("Calibre", "book-to-pdf");
@@ -175,7 +175,7 @@ public void init() {
         addEndpointToGroup("LibreOffice", "xlsx-to-pdf");
         addEndpointToGroup("LibreOffice", "pdf-to-word");
         addEndpointToGroup("LibreOffice", "pdf-to-presentation");
-        addEndpointToGroup("LibreOffice", "pdf-to-text");
+        addEndpointToGroup("LibreOffice", "pdf-to-rtf");
         addEndpointToGroup("LibreOffice", "pdf-to-html");
         addEndpointToGroup("LibreOffice", "pdf-to-xml");
 
@@ -218,6 +218,7 @@ public void init() {
         addEndpointToGroup("Java", "overlay-pdf");
         addEndpointToGroup("Java", "split-pdf-by-sections");
         addEndpointToGroup("Java", REMOVE_BLANKS);
+        addEndpointToGroup("Java", "pdf-to-text");
 
         // Javascript
         addEndpointToGroup("Javascript", "pdf-organizer");

File: src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java
Patch:
@@ -1,5 +1,6 @@
 package stirling.software.SPDF.config.security;
 
+import io.github.pixee.security.Newlines;
 import java.io.IOException;
 import java.time.Duration;
 import java.util.Map;
@@ -125,12 +126,12 @@ private void processRequest(
         ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);
 
         if (probe.isConsumed()) {
-            response.setHeader("X-Rate-Limit-Remaining", Long.toString(probe.getRemainingTokens()));
+            response.setHeader("X-Rate-Limit-Remaining", Newlines.stripAll(Long.toString(probe.getRemainingTokens())));
             filterChain.doFilter(request, response);
         } else {
             long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;
             response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());
-            response.setHeader("X-Rate-Limit-Retry-After-Seconds", String.valueOf(waitForRefill));
+            response.setHeader("X-Rate-Limit-Retry-After-Seconds", Newlines.stripAll(String.valueOf(waitForRefill)));
             response.getWriter().write("Rate limit exceeded for POST requests.");
         }
     }

File: src/main/java/stirling/software/SPDF/repository/AuthorityRepository.java
Patch:
@@ -9,4 +9,6 @@
 public interface AuthorityRepository extends JpaRepository<Authority, Long> {
     // Set<Authority> findByUsername(String username);
     Set<Authority> findByUser_Username(String username);
+
+    Authority findByUserId(long user_id);
 }

File: src/main/java/stirling/software/SPDF/utils/PdfUtils.java
Patch:
@@ -336,14 +336,12 @@ public static byte[] imageToPdf(
         }
     }
 
-    private static void addImageToDocument(
+    public static void addImageToDocument(
             PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate)
             throws IOException {
         boolean imageIsLandscape = image.getWidth() > image.getHeight();
         PDRectangle pageSize = PDRectangle.A4;
 
-        System.out.println(fitOption);
-
         if (autoRotate && imageIsLandscape) {
             pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());
         }

File: src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java
Patch:
@@ -58,10 +58,10 @@ public static ProcessExecutor getInstance(Processes processType, boolean liveUpd
                     long timeoutMinutes =
                             switch (key) {
                                 case LIBRE_OFFICE -> 30;
-                                case PDFTOHTML -> 5;
+                                case PDFTOHTML -> 20;
                                 case OCR_MY_PDF -> 30;
                                 case PYTHON_OPENCV -> 30;
-                                case GHOSTSCRIPT -> 5;
+                                case GHOSTSCRIPT -> 30;
                                 case WEASYPRINT -> 30;
                                 case INSTALL_APP -> 60;
                                 case CALIBRE -> 30;

File: src/main/java/stirling/software/SPDF/repository/AuthorityRepository.java
Patch:
@@ -9,4 +9,7 @@
 public interface AuthorityRepository extends JpaRepository<Authority, Long> {
     // Set<Authority> findByUsername(String username);
     Set<Authority> findByUser_Username(String username);
+
+    Authority findByUserId(long user_id);
+
 }

File: src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java
Patch:
@@ -56,7 +56,7 @@ public void onAuthenticationFailure(
     }
 
     private boolean isDemoUser(String username) {
-        Optional<User> user = userService.findByUsername(username);
+        Optional<User> user = userService.findByUsernameIgnoreCase(username);
         return user.isPresent()
                 && user.get().getAuthorities().stream()
                         .anyMatch(authority -> "ROLE_DEMO_USER".equals(authority.getAuthority()));

File: src/main/java/stirling/software/SPDF/config/security/FirstLoginFilter.java
Patch:
@@ -39,7 +39,7 @@ protected void doFilterInternal(
 
         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
         if (authentication != null && authentication.isAuthenticated()) {
-            Optional<User> user = userService.findByUsername(authentication.getName());
+            Optional<User> user = userService.findByUsernameIgnoreCase(authentication.getName());
             if ("GET".equalsIgnoreCase(method)
                     && user.isPresent()
                     && user.get().isFirstLogin()

File: src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java
Patch:
@@ -38,7 +38,7 @@ public void init() {
                         initialUsername, initialPassword, Role.ADMIN.getRoleId(), true);
             }
         }
-        if (!userService.usernameExists(Role.INTERNAL_API_USER.getRoleId())) {
+        if (!userService.usernameExistsIgnoreCase(Role.INTERNAL_API_USER.getRoleId())) {
             userService.saveUser(
                     Role.INTERNAL_API_USER.getRoleId(),
                     UUID.randomUUID().toString(),

File: src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java
Patch:
@@ -95,7 +95,7 @@ public String account(HttpServletRequest request, Model model, Authentication au
 
                 // Fetch user details from the database
                 Optional<User> user =
-                        userRepository.findByUsername(
+                        userRepository.findByUsernameIgnoreCase(
                                 username); // Assuming findByUsername method exists
                 if (!user.isPresent()) {
                     // Handle error appropriately
@@ -145,7 +145,7 @@ public String changeCreds(
 
                 // Fetch user details from the database
                 Optional<User> user =
-                        userRepository.findByUsername(
+                        userRepository.findByUsernameIgnoreCase(
                                 username); // Assuming findByUsername method exists
                 if (!user.isPresent()) {
                     // Handle error appropriately

File: src/main/java/stirling/software/SPDF/utils/GeneralUtils.java
Patch:
@@ -185,7 +185,7 @@ private static String insertMultiplicationBeforeN(String expression, int nValue)
         // Insert multiplication between a number and 'n' (e.g., "4n" becomes "4*n")
         String withMultiplication = expression.replaceAll("(\\d)n", "$1*n");
         // Now replace 'n' with its current value
-        return withMultiplication.replaceAll("n", String.valueOf(nValue));
+        return withMultiplication.replace("n", String.valueOf(nValue));
     }
 
     private static List<Integer> handlePart(String part, int totalPages, int offset) {

File: src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java
Patch:
@@ -244,6 +244,6 @@ private void processEnvironmentConfigs() {
             }
         }
     }
-    
+
     private static final String REMOVE_BLANKS = "remove-blanks";
 }

File: src/main/java/stirling/software/SPDF/controller/api/UserController.java
Patch:
@@ -291,6 +291,6 @@ public ResponseEntity<String> updateApiKey(Principal principal) {
         }
         return ResponseEntity.ok(apiKey);
     }
-    
+
     private static final String LOGIN_MESSAGETYPE_CREDSUPDATED = "/login?messageType=credsUpdated";
 }

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java
Patch:
@@ -6,8 +6,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;

File: src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java
Patch:
@@ -219,6 +219,6 @@ public ResponseEntity<byte[]> extractImageScans(
                     });
         }
     }
-    
+
     private static final String REPLACEFIRST = "[.][^.]+$";
 }

File: src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java
Patch:
@@ -26,7 +26,6 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 
-import stirling.software.SPDF.model.ApplicationProperties;
 import stirling.software.SPDF.model.PipelineConfig;
 import stirling.software.SPDF.model.PipelineOperation;
 

File: src/main/java/stirling/software/SPDF/repository/UserRepository.java
Patch:
@@ -3,8 +3,6 @@
 import java.util.Optional;
 
 import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.data.repository.query.Param;
 
 import stirling.software.SPDF.model.User;
 

File: src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java
Patch:
@@ -24,6 +24,7 @@ public class ProcessExecutor {
 
     public enum Processes {
         LIBRE_OFFICE,
+        PDFTOHTML,
         OCR_MY_PDF,
         PYTHON_OPENCV,
         GHOSTSCRIPT,
@@ -45,6 +46,7 @@ public static ProcessExecutor getInstance(Processes processType, boolean liveUpd
                     int semaphoreLimit =
                             switch (key) {
                                 case LIBRE_OFFICE -> 1;
+                                case PDFTOHTML -> 1;
                                 case OCR_MY_PDF -> 2;
                                 case PYTHON_OPENCV -> 8;
                                 case GHOSTSCRIPT -> 16;
@@ -56,6 +58,7 @@ public static ProcessExecutor getInstance(Processes processType, boolean liveUpd
                     long timeoutMinutes =
                             switch (key) {
                                 case LIBRE_OFFICE -> 30;
+                                case PDFTOHTML -> 5;
                                 case OCR_MY_PDF -> 30;
                                 case PYTHON_OPENCV -> 30;
                                 case GHOSTSCRIPT -> 5;

File: src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java
Patch:
@@ -130,7 +130,7 @@ public String getText(PDDocument doc) throws IOException {
 
         // Sanitize the header string by removing characters not allowed in a filename.
         if (header != null && header.length() < 255) {
-            header = header.replaceAll("[/\\\\?%*:|\"<>]", "");
+            header = header.replaceAll("[/\\\\?%*:|\"<>]", "").trim();
             return WebResponseUtils.pdfDocToWebResponse(document, header + ".pdf");
         } else {
             logger.info("File has no good title to be found");

File: src/main/java/stirling/software/SPDF/controller/api/misc/AutoSplitPdfController.java
Patch:
@@ -58,7 +58,7 @@ public ResponseEntity<byte[]> autoSplitPdf(@ModelAttribute AutoSplitPdfRequest r
 
         PDDocument document = Loader.loadPDF(file.getBytes());
         PDFRenderer pdfRenderer = new PDFRenderer(document);
-
+        pdfRenderer.setSubsamplingAllowed(true);
         List<PDDocument> splitDocuments = new ArrayList<>();
         List<ByteArrayOutputStream> splitDocumentsBoas = new ArrayList<>();
 

File: src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java
Patch:
@@ -59,7 +59,7 @@ public ResponseEntity<byte[]> removeBlankPages(@ModelAttribute RemoveBlankPagesR
             List<Integer> pagesToKeepIndex = new ArrayList<>();
             int pageIndex = 0;
             PDFRenderer pdfRenderer = new PDFRenderer(document);
-
+            pdfRenderer.setSubsamplingAllowed(true);
             for (PDPage page : pages) {
                 logger.info("checking page " + pageIndex);
                 textStripper.setStartPage(pageIndex + 1);

File: src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java
Patch:
@@ -84,6 +84,7 @@ public ResponseEntity<byte[]> extractImageScans(
                 // Load PDF document
                 try (PDDocument document = Loader.loadPDF(form.getFileInput().getBytes())) {
                     PDFRenderer pdfRenderer = new PDFRenderer(document);
+                    pdfRenderer.setSubsamplingAllowed(true);
                     int pageCount = document.getNumberOfPages();
                     images = new ArrayList<>();
 

File: src/main/java/stirling/software/SPDF/controller/api/misc/FakeScanControllerWIP.java
Patch:
@@ -60,6 +60,7 @@ public ResponseEntity<byte[]> repairPdf(@ModelAttribute PDFFile request) throws
 
         PDDocument document = Loader.loadPDF(inputFile.getBytes());
         PDFRenderer pdfRenderer = new PDFRenderer(document);
+        pdfRenderer.setSubsamplingAllowed(true);
         for (int page = 0; page < document.getNumberOfPages(); ++page) {
             BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
             ImageIO.write(image, "png", new File("scanned-" + (page + 1) + ".png"));

File: src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java
Patch:
@@ -83,6 +83,7 @@ public ResponseEntity<byte[]> redactPdf(@ModelAttribute RedactPdfRequest request
         if (convertPDFToImage) {
             PDDocument imageDocument = new PDDocument();
             PDFRenderer pdfRenderer = new PDFRenderer(document);
+            pdfRenderer.setSubsamplingAllowed(true);
             for (int page = 0; page < document.getNumberOfPages(); ++page) {
                 BufferedImage bim = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
                 PDPage newPage = new PDPage(new PDRectangle(bim.getWidth(), bim.getHeight()));

File: src/main/java/stirling/software/SPDF/utils/GeneralUtils.java
Patch:
@@ -136,6 +136,7 @@ public static List<Integer> parsePageList(String[] pages, int totalPages, boolea
         int offset = oneBased ? 1 : 0;
         for (String page : pages) {
             if ("all".equalsIgnoreCase(page)) {
+
                 for (int i = 0; i < totalPages; i++) {
                     result.add(i + offset);
                 }

File: src/main/java/stirling/software/SPDF/utils/PdfUtils.java
Patch:
@@ -214,6 +214,7 @@ public static byte[] convertFromPdf(
             throws IOException, Exception {
         try (PDDocument document = Loader.loadPDF(inputStream)) {
             PDFRenderer pdfRenderer = new PDFRenderer(document);
+            pdfRenderer.setSubsamplingAllowed(true);
             int pageCount = document.getNumberOfPages();
 
             // Create a ByteArrayOutputStream to save the image(s) to

File: src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java
Patch:
@@ -82,7 +82,7 @@ protected void doFilterInternal(
                 response.setStatus(HttpStatus.UNAUTHORIZED.value());
                 response.getWriter()
                         .write(
-                                "Authentication required. Please provide a X-API-KEY in request header.\nThis is found in Settings -> Account Settings -> API Key\nAlternativly you can disable authentication if this is unexpected");
+                                "Authentication required. Please provide a X-API-KEY in request header.\nThis is found in Settings -> Account Settings -> API Key\nAlternatively you can disable authentication if this is unexpected");
                 return;
             }
         }

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertBookToPDFController.java
Patch:
@@ -37,7 +37,7 @@ public ResponseEntity<byte[]> HtmlToPdf(@ModelAttribute GeneralFile request) thr
 
         if (!bookAndHtmlFormatsInstalled) {
             throw new IllegalArgumentException(
-                    "bookAndHtmlFormatsInstalled flag is False, this functionality is not avaiable");
+                    "bookAndHtmlFormatsInstalled flag is False, this functionality is not available");
         }
 
         if (fileInput == null) {

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToBookController.java
Patch:
@@ -45,7 +45,7 @@ public ResponseEntity<byte[]> HtmlToPdf(@ModelAttribute PdfToBookRequest request
 
         if (!bookAndHtmlFormatsInstalled) {
             throw new IllegalArgumentException(
-                    "bookAndHtmlFormatsInstalled flag is False, this functionality is not avaiable");
+                    "bookAndHtmlFormatsInstalled flag is False, this functionality is not available");
         }
 
         if (fileInput == null) {

File: src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java
Patch:
@@ -51,7 +51,7 @@ public ResponseEntity<byte[]> deletePages(@ModelAttribute PDFWithPageNums reques
         String[] pageOrderArr = pagesToDelete.split(",");
 
         List<Integer> pagesToRemove =
-                GeneralUtils.parsePageList(pageOrderArr, document.getNumberOfPages(), true);
+                GeneralUtils.parsePageList(pageOrderArr, document.getNumberOfPages(), false);
 
         Collections.sort(pagesToRemove);
 
@@ -195,7 +195,7 @@ public ResponseEntity<byte[]> rearrangePages(@ModelAttribute RearrangePagesReque
             if (sortType != null && sortType.length() > 0) {
                 newPageOrder = processSortTypes(sortType, totalPages);
             } else {
-                newPageOrder = GeneralUtils.parsePageList(pageOrderArr, totalPages, true);
+                newPageOrder = GeneralUtils.parsePageList(pageOrderArr, totalPages, false);
             }
             logger.info("newPageOrder = " + newPageOrder);
             logger.info("totalPages = " + totalPages);

File: src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java
Patch:
@@ -88,7 +88,7 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)
         // Load the input PDF
         PDDocument document = Loader.loadPDF(pdfFile.getBytes());
 
-        List<Integer> pageNumbers = request.getPageNumbersList(document, false);
+        List<Integer> pageNumbers = request.getPageNumbersList(document, true);
 
         for (int pageIndex : pageNumbers) {
             int zeroBasedIndex = pageIndex - 1;

File: src/main/java/stirling/software/SPDF/model/api/PDFWithPageNums.java
Patch:
@@ -33,13 +33,13 @@ public List<Integer> getPageNumbersList(boolean zeroCount) {
             // TODO Auto-generated catch block
             e.printStackTrace();
         }
-        return GeneralUtils.parsePageString(pageNumbers, pageCount, zeroCount);
+        return GeneralUtils.parsePageList(pageNumbers, pageCount, zeroCount);
     }
 
     @Hidden
     public List<Integer> getPageNumbersList(PDDocument doc, boolean zeroCount) {
         int pageCount = 0;
         pageCount = doc.getNumberOfPages();
-        return GeneralUtils.parsePageString(pageNumbers, pageCount, zeroCount);
+        return GeneralUtils.parsePageList(pageNumbers, pageCount, zeroCount);
     }
 }

File: src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java
Patch:
@@ -60,6 +60,5 @@ private boolean isDemoUser(String username) {
         return user.isPresent()
                 && user.get().getAuthorities().stream()
                         .anyMatch(authority -> "ROLE_DEMO_USER".equals(authority.getAuthority()));
-
     }
 }

File: src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java
Patch:
@@ -60,5 +60,6 @@ private boolean isDemoUser(String username) {
         return user.isPresent()
                 && user.get().getAuthorities().stream()
                         .anyMatch(authority -> "ROLE_DEMO_USER".equals(authority.getAuthority()));
+
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java
Patch:
@@ -155,5 +155,4 @@ public List<PDDocument> splitPdfPages(
 
         return splitDocuments;
     }
-
 }

File: src/main/java/stirling/software/SPDF/model/ApplicationProperties.java
Patch:
@@ -277,7 +277,6 @@ public String toString() {
                     + enableAlphaFunctionality
                     + "]";
         }
-
     }
 
     public static class Ui {

File: src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java
Patch:
@@ -218,7 +218,7 @@ public void init() {
         addEndpointToGroup("Java", "overlay-pdf");
         addEndpointToGroup("Java", "split-pdf-by-sections");
         addEndpointToGroup("Java", "remove-blanks");
-        
+
         // Javascript
         addEndpointToGroup("Javascript", "pdf-organizer");
         addEndpointToGroup("Javascript", "sign");

File: src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java
Patch:
@@ -140,7 +140,6 @@ public void init() {
         // CLI
         addEndpointToGroup("CLI", "compress-pdf");
         addEndpointToGroup("CLI", "extract-image-scans");
-        addEndpointToGroup("CLI", "remove-blanks");
         addEndpointToGroup("CLI", "repair");
         addEndpointToGroup("CLI", "pdf-to-pdfa");
         addEndpointToGroup("CLI", "file-to-pdf");
@@ -218,7 +217,8 @@ public void init() {
         addEndpointToGroup("Java", "split-by-size-or-count");
         addEndpointToGroup("Java", "overlay-pdf");
         addEndpointToGroup("Java", "split-pdf-by-sections");
-
+        addEndpointToGroup("Java", "remove-blanks");
+        
         // Javascript
         addEndpointToGroup("Javascript", "pdf-organizer");
         addEndpointToGroup("Javascript", "sign");

File: src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java
Patch:
@@ -41,7 +41,7 @@ public class OCRController {
     private static final Logger logger = LoggerFactory.getLogger(OCRController.class);
 
     public List<String> getAvailableTesseractLanguages() {
-        String tessdataDir = "/usr/share/tesseract-ocr/5/tessdata";
+        String tessdataDir = "/usr/share/tessdata";
         File[] files = new File(tessdataDir).listFiles();
         if (files == null) {
             return Collections.emptyList();

File: src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java
Patch:
@@ -82,7 +82,7 @@ public String compareForm(Model model) {
     }
 
     public List<String> getAvailableTesseractLanguages() {
-        String tessdataDir = "/usr/share/tesseract-ocr/5/tessdata";
+        String tessdataDir = "/usr/share/tessdata";
         File[] files = new File(tessdataDir).listFiles();
         if (files == null) {
             return Collections.emptyList();

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java
Patch:
@@ -29,8 +29,8 @@
 public class ConvertWebsiteToPDF {
 
     @Autowired
-    @Qualifier("htmlFormatsInstalled")
-    private boolean htmlFormatsInstalled;
+    @Qualifier("bookAndHtmlFormatsInstalled")
+    private boolean bookAndHtmlFormatsInstalled;
 
     @PostMapping(consumes = "multipart/form-data", value = "/url/pdf")
     @Operation(
@@ -53,7 +53,7 @@ public ResponseEntity<byte[]> urlToPdf(@ModelAttribute UrlToPdfRequest request)
 
             // Prepare the OCRmyPDF command
             List<String> command = new ArrayList<>();
-            if (!htmlFormatsInstalled) {
+            if (!bookAndHtmlFormatsInstalled) {
                 command.add("weasyprint");
             } else {
                 command.add("wkhtmltopdf");

File: src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java
Patch:
@@ -13,15 +13,15 @@
 @Tag(name = "Convert", description = "Convert APIs")
 public class ConverterWebController {
 
-    @ConditionalOnExpression("#{bookFormatsInstalled}")
+    @ConditionalOnExpression("#{bookAndHtmlFormatsInstalled}")
     @GetMapping("/book-to-pdf")
     @Hidden
     public String convertBookToPdfForm(Model model) {
         model.addAttribute("currentPage", "book-to-pdf");
         return "convert/book-to-pdf";
     }
 
-    @ConditionalOnExpression("#{bookFormatsInstalled}")
+    @ConditionalOnExpression("#{bookAndHtmlFormatsInstalled}")
     @GetMapping("/pdf-to-book")
     @Hidden
     public String convertPdfToBookForm(Model model) {

File: src/main/java/stirling/software/SPDF/model/api/misc/AddStampRequest.java
Patch:
@@ -6,11 +6,11 @@
 
 import lombok.Data;
 import lombok.EqualsAndHashCode;
-import stirling.software.SPDF.model.api.PDFFile;
+import stirling.software.SPDF.model.api.PDFWithPageNums;
 
 @Data
 @EqualsAndHashCode(callSuper = true)
-public class AddStampRequest extends PDFFile {
+public class AddStampRequest extends PDFWithPageNums {
 
     @Schema(
             description = "The stamp type (text or image)",

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java
Patch:
@@ -29,8 +29,8 @@
 public class ConvertWebsiteToPDF {
 
     @Autowired
-    @Qualifier("htmlFormatsInstalled")
-    private boolean htmlFormatsInstalled;
+    @Qualifier("bookAndHtmlFormatsInstalled")
+    private boolean bookAndHtmlFormatsInstalled;
 
     @PostMapping(consumes = "multipart/form-data", value = "/url/pdf")
     @Operation(
@@ -53,7 +53,7 @@ public ResponseEntity<byte[]> urlToPdf(@ModelAttribute UrlToPdfRequest request)
 
             // Prepare the OCRmyPDF command
             List<String> command = new ArrayList<>();
-            if (!htmlFormatsInstalled) {
+            if (!bookAndHtmlFormatsInstalled) {
                 command.add("weasyprint");
             } else {
                 command.add("wkhtmltopdf");

File: src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java
Patch:
@@ -13,15 +13,15 @@
 @Tag(name = "Convert", description = "Convert APIs")
 public class ConverterWebController {
 
-    @ConditionalOnExpression("#{bookFormatsInstalled}")
+    @ConditionalOnExpression("#{bookAndHtmlFormatsInstalled}")
     @GetMapping("/book-to-pdf")
     @Hidden
     public String convertBookToPdfForm(Model model) {
         model.addAttribute("currentPage", "book-to-pdf");
         return "convert/book-to-pdf";
     }
 
-    @ConditionalOnExpression("#{bookFormatsInstalled}")
+    @ConditionalOnExpression("#{bookAndHtmlFormatsInstalled}")
     @GetMapping("/pdf-to-book")
     @Hidden
     public String convertPdfToBookForm(Model model) {

File: src/main/java/stirling/software/SPDF/model/api/misc/AddStampRequest.java
Patch:
@@ -6,11 +6,11 @@
 
 import lombok.Data;
 import lombok.EqualsAndHashCode;
-import stirling.software.SPDF.model.api.PDFFile;
+import stirling.software.SPDF.model.api.PDFWithPageNums;
 
 @Data
 @EqualsAndHashCode(callSuper = true)
-public class AddStampRequest extends PDFFile {
+public class AddStampRequest extends PDFWithPageNums {
 
     @Schema(
             description = "The stamp type (text or image)",

File: src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java
Patch:
@@ -75,7 +75,7 @@ public ResponseEntity<byte[]> extractHeader(@ModelAttribute PDFFile request) thr
 
             return WebResponseUtils.bytesToWebResponse(
                     script.getBytes(StandardCharsets.UTF_8),
-                    inputFile.getOriginalFilename() + ".js");
+                    Filenames.toSimpleFileName(inputFile.getOriginalFilename()) + ".js");
         }
     }
 }

File: src/main/java/stirling/software/SPDF/utils/FileToPdf.java
Patch:
@@ -54,7 +54,7 @@ public static byte[] convertHtmlToPdf(
 
                 if (request.getZoom() != 1.0) {
                     // Create a temporary CSS file
-                    File tempCssFile = File.createTempFile("customStyle", ".css");
+                    File tempCssFile = Files.createTempFile("customStyle", ".css").toFile();
                     try (FileWriter writer = new FileWriter(tempCssFile)) {
                         // Write the CSS rule to the file
                         writer.write("body { zoom: " + request.getZoom() + "; }");

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java
Patch:
@@ -29,8 +29,8 @@
 public class ConvertWebsiteToPDF {
 
     @Autowired
-    @Qualifier("installBookAndHtmlFormats")
-    private boolean installBookAndHtmlFormats;
+    @Qualifier("bookAndHtmlFormatsInstalled")
+    private boolean bookAndHtmlFormatsInstalled;
 
     @PostMapping(consumes = "multipart/form-data", value = "/url/pdf")
     @Operation(
@@ -53,7 +53,7 @@ public ResponseEntity<byte[]> urlToPdf(@ModelAttribute UrlToPdfRequest request)
 
             // Prepare the OCRmyPDF command
             List<String> command = new ArrayList<>();
-            if (!installBookAndHtmlFormats) {
+            if (!bookAndHtmlFormatsInstalled) {
                 command.add("weasyprint");
             } else {
                 command.add("wkhtmltopdf");

File: src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java
Patch:
@@ -68,7 +68,9 @@ public ResponseEntity<byte[]> extractHeader(@ModelAttribute PDFFile request) thr
 
             if (script.isEmpty()) {
                 script =
-                        "PDF '" + Filenames.toSimpleFileName(inputFile.getOriginalFilename()) + "' does not contain Javascript";
+                        "PDF '"
+                                + Filenames.toSimpleFileName(inputFile.getOriginalFilename())
+                                + "' does not contain Javascript";
             }
 
             return WebResponseUtils.bytesToWebResponse(

File: src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java
Patch:
@@ -68,7 +68,7 @@ public ResponseEntity<byte[]> extractHeader(@ModelAttribute PDFFile request) thr
 
             if (script.isEmpty()) {
                 script =
-                        "PDF '" + inputFile.getOriginalFilename() + "' does not contain Javascript";
+                        "PDF '" + Filenames.toSimpleFileName(inputFile.getOriginalFilename()) + "' does not contain Javascript";
             }
 
             return WebResponseUtils.bytesToWebResponse(

File: scripts/PropSync.java
Patch:
@@ -16,7 +16,7 @@ public static void main(String[] args) throws IOException {
         Map<String, String> enProps = linesToProps(enLines);
 
         for (File file : files) {
-            if (!file.getName().equals("messages_en_GB.properties")) {
+            if (!"messages_en_GB.properties".equals(file.getName())) {
                 System.out.println("Processing file: " + file.getName());
                 List<String> lines;
                 try {

File: src/main/java/stirling/software/SPDF/LibreOfficeListener.java
Patch:
@@ -6,6 +6,8 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
+import io.github.pixee.security.SystemCommand;
+
 public class LibreOfficeListener {
 
     private static final long ACTIVITY_TIMEOUT = 20 * 60 * 1000; // 20 minutes
@@ -44,7 +46,7 @@ public void start() throws IOException {
         }
 
         // Start the listener process
-        process = Runtime.getRuntime().exec("unoconv --listener");
+        process = SystemCommand.runCommand(Runtime.getRuntime(), "unoconv --listener");
         lastActivityTime = System.currentTimeMillis();
 
         // Start a background thread to monitor the activity timeout

File: src/main/java/stirling/software/SPDF/config/ConfigInitializer.java
Patch:
@@ -84,7 +84,7 @@ public void mergeYamlFiles(List<String> templateLines, Path userFilePath, Path o
         for (String line : templateLines) {
             String key = extractKey.apply(line);
 
-            if (line.trim().equalsIgnoreCase("AutomaticallyGenerated:")) {
+            if ("AutomaticallyGenerated:".equalsIgnoreCase(line.trim())) {
                 insideAutoGenerated = true;
                 mergedLines.add(line);
                 continue;

File: src/main/java/stirling/software/SPDF/controller/api/ToSinglePageController.java
Patch:
@@ -4,6 +4,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.multipdf.LayerUtility;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
@@ -40,7 +41,7 @@ public ResponseEntity<byte[]> pdfToSinglePage(@ModelAttribute PDFFile request)
             throws IOException {
 
         // Load the source document
-        PDDocument sourceDocument = PDDocument.load(request.getFileInput().getInputStream());
+        PDDocument sourceDocument = Loader.loadPDF(request.getFileInput().getBytes());
 
         // Calculate total height and max width
         float totalHeight = 0;

File: src/main/java/stirling/software/SPDF/controller/api/converters/ExtractController.java
Patch:
@@ -1,10 +1,10 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import java.io.ByteArrayInputStream;
 import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
 import org.slf4j.Logger;
@@ -44,8 +44,7 @@ public ResponseEntity<String> PdfToCsv(@ModelAttribute PDFFilePage form) throws
         ArrayList<String> tableData = new ArrayList<>();
         int columnsCount = 0;
 
-        try (PDDocument document =
-                PDDocument.load(new ByteArrayInputStream(form.getFileInput().getBytes()))) {
+        try (PDDocument document = Loader.loadPDF(form.getFileInput().getBytes())) {
             final double res = 72; // PDF units are at 72 DPI
             PDFTableStripper stripper = new PDFTableStripper();
             PDPage pdPage = document.getPage(form.getPageId() - 1);

File: src/main/java/stirling/software/SPDF/model/api/PDFWithPageNums.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.util.List;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 
 import io.swagger.v3.oas.annotations.Hidden;
@@ -27,7 +28,7 @@ public class PDFWithPageNums extends PDFFile {
     public List<Integer> getPageNumbersList() {
         int pageCount = 0;
         try {
-            pageCount = PDDocument.load(getFileInput().getInputStream()).getNumberOfPages();
+            pageCount = Loader.loadPDF(getFileInput().getBytes()).getNumberOfPages();
         } catch (IOException e) {
             // TODO Auto-generated catch block
             e.printStackTrace();

File: src/main/java/stirling/software/SPDF/utils/WebResponseUtils.java
Patch:
@@ -12,6 +12,8 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
+
 public class WebResponseUtils {
 
     public static ResponseEntity<byte[]> boasToWebResponse(
@@ -26,7 +28,7 @@ public static ResponseEntity<byte[]> boasToWebResponse(
 
     public static ResponseEntity<byte[]> multiPartFileToWebResponse(MultipartFile file)
             throws IOException {
-        String fileName = file.getOriginalFilename();
+        String fileName = Filenames.toSimpleFileName(file.getOriginalFilename());
         MediaType mediaType = MediaType.parseMediaType(file.getContentType());
 
         byte[] bytes = file.getBytes();

File: src/main/java/stirling/software/SPDF/LibreOfficeListener.java
Patch:
@@ -1,12 +1,13 @@
 package stirling.software.SPDF;
 
-import io.github.pixee.security.SystemCommand;
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.net.Socket;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
+import io.github.pixee.security.SystemCommand;
+
 public class LibreOfficeListener {
 
     private static final long ACTIVITY_TIMEOUT = 20 * 60 * 1000; // 20 minutes

File: src/main/java/stirling/software/SPDF/SPdfApplication.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF;
 
-import io.github.pixee.security.SystemCommand;
 import java.nio.file.Files;
 import java.nio.file.Paths;
 import java.util.Collections;
@@ -11,6 +10,8 @@
 import org.springframework.core.env.Environment;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
+import io.github.pixee.security.SystemCommand;
+
 import jakarta.annotation.PostConstruct;
 import stirling.software.SPDF.config.ConfigInitializer;
 import stirling.software.SPDF.utils.GeneralUtils;

File: src/main/java/stirling/software/SPDF/controller/api/MultiPageLayoutController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api;
 
-import io.github.pixee.security.Filenames;
 import java.awt.Color;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -22,6 +21,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -137,6 +137,7 @@ public ResponseEntity<byte[]> mergeMultiplePagesIntoOne(
         byte[] result = baos.toByteArray();
         return WebResponseUtils.bytesToWebResponse(
                 result,
-                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "") + "_layoutChanged.pdf");
+                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                        + "_layoutChanged.pdf");
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/PdfOverlayController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api;
 
-import io.github.pixee.security.Filenames;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.IOException;
@@ -21,6 +20,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -77,7 +77,8 @@ public ResponseEntity<byte[]> overlayPdfs(@ModelAttribute OverlayPdfsRequest req
                 overlay.overlay(overlayGuide).save(outputStream);
                 byte[] data = outputStream.toByteArray();
                 String outputFilename =
-                        Filenames.toSimpleFileName(baseFile.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                        Filenames.toSimpleFileName(baseFile.getOriginalFilename())
+                                        .replaceFirst("[.][^.]+$", "")
                                 + "_overlayed.pdf"; // Remove file extension and append .pdf
 
                 return WebResponseUtils.bytesToWebResponse(

File: src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api;
 
-import io.github.pixee.security.Filenames;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.HashMap;
@@ -23,6 +22,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -113,6 +113,7 @@ public ResponseEntity<byte[]> scalePages(@ModelAttribute ScalePagesRequest reque
 
         return WebResponseUtils.bytesToWebResponse(
                 baos.toByteArray(),
-                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "") + "_scaled.pdf");
+                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                        + "_scaled.pdf");
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertBookToPDFController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import io.github.pixee.security.Filenames;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.http.ResponseEntity;
@@ -10,6 +9,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import io.github.pixee.security.Filenames;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.http.ResponseEntity;
@@ -10,6 +9,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import io.github.pixee.security.Filenames;
 import java.util.List;
 import java.util.Map;
 
@@ -20,6 +19,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertOfficeController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import io.github.pixee.security.Filenames;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -17,6 +16,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -90,7 +90,8 @@ public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile reque
         byte[] pdfByteArray = convertToPdf(inputFile);
         return WebResponseUtils.bytesToWebResponse(
                 pdfByteArray,
-                Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                Filenames.toSimpleFileName(inputFile.getOriginalFilename())
+                                .replaceFirst("[.][^.]+$", "")
                         + "_convertedToPDF.pdf");
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToBookController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import io.github.pixee.security.Filenames;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
@@ -16,6 +15,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -93,7 +93,8 @@ public ResponseEntity<byte[]> HtmlToPdf(@ModelAttribute PdfToBookRequest request
         }
 
         String outputFilename =
-                Filenames.toSimpleFileName(fileInput.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                Filenames.toSimpleFileName(fileInput.getOriginalFilename())
+                                .replaceFirst("[.][^.]+$", "")
                         + "."
                         + outputFormat; // Remove file extension and append .pdf
 

File: src/main/java/stirling/software/SPDF/controller/api/filters/FilterController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.filters;
 
-import io.github.pixee.security.Filenames;
 import java.io.IOException;
 
 import org.apache.pdfbox.Loader;
@@ -14,6 +13,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 

File: src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.misc;
 
-import io.github.pixee.security.Filenames;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Comparator;
@@ -19,6 +18,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -134,7 +134,8 @@ public String getText(PDDocument doc) throws IOException {
             return WebResponseUtils.pdfDocToWebResponse(document, header + ".pdf");
         } else {
             logger.info("File has no good title to be found");
-            return WebResponseUtils.pdfDocToWebResponse(document, Filenames.toSimpleFileName(file.getOriginalFilename()));
+            return WebResponseUtils.pdfDocToWebResponse(
+                    document, Filenames.toSimpleFileName(file.getOriginalFilename()));
         }
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.misc;
 
-import io.github.pixee.security.Filenames;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import java.nio.file.Files;
@@ -28,6 +27,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -132,7 +132,8 @@ public ResponseEntity<byte[]> removeBlankPages(@ModelAttribute RemoveBlankPagesR
 
             return WebResponseUtils.pdfDocToWebResponse(
                     document,
-                    Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())
+                                    .replaceFirst("[.][^.]+$", "")
                             + "_blanksRemoved.pdf");
         } catch (IOException e) {
             e.printStackTrace();

File: src/main/java/stirling/software/SPDF/controller/api/misc/PageNumbersController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.misc;
 
-import io.github.pixee.security.Filenames;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.List;
@@ -22,6 +21,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -146,7 +146,8 @@ public ResponseEntity<byte[]> addPageNumbers(@ModelAttribute AddPageNumbersReque
 
         return WebResponseUtils.bytesToWebResponse(
                 baos.toByteArray(),
-                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "") + "_numbersAdded.pdf",
+                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                        + "_numbersAdded.pdf",
                 MediaType.APPLICATION_PDF);
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java
Patch:
@@ -1,7 +1,5 @@
 package stirling.software.SPDF.controller.api.pipeline;
 
-import io.github.pixee.security.Filenames;
-import io.github.pixee.security.ZipSecurity;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -38,6 +36,9 @@
 import org.springframework.web.client.RestTemplate;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
+import io.github.pixee.security.ZipSecurity;
+
 import jakarta.servlet.ServletContext;
 import stirling.software.SPDF.SPdfApplication;
 import stirling.software.SPDF.model.PipelineConfig;

File: src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.security;
 
-import io.github.pixee.security.Filenames;
 import java.awt.Color;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
@@ -26,6 +25,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -105,7 +105,8 @@ public ResponseEntity<byte[]> redactPdf(@ModelAttribute RedactPdfRequest request
         byte[] pdfContent = baos.toByteArray();
         return WebResponseUtils.bytesToWebResponse(
                 pdfContent,
-                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "") + "_redacted.pdf");
+                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                        + "_redacted.pdf");
     }
 
     private void redactFoundText(

File: src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.security;
 
-import io.github.pixee.security.Filenames;
 import java.io.IOException;
 
 import org.apache.pdfbox.Loader;
@@ -29,6 +28,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -77,7 +77,8 @@ public ResponseEntity<byte[]> sanitizePDF(@ModelAttribute SanitizePdfRequest req
 
             return WebResponseUtils.pdfDocToWebResponse(
                     document,
-                    Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())
+                                    .replaceFirst("[.][^.]+$", "")
                             + "_sanitized.pdf");
         }
     }

File: src/main/java/stirling/software/SPDF/utils/PDFToFile.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.utils;
 
-import io.github.pixee.security.Filenames;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
@@ -21,6 +20,8 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
+
 import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;
 
 public class PDFToFile {

File: src/main/java/stirling/software/SPDF/utils/PdfUtils.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.utils;
 
-import io.github.pixee.security.Filenames;
 import java.awt.Graphics;
 import java.awt.image.BufferedImage;
 import java.awt.image.RenderedImage;
@@ -38,6 +37,8 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
+
 public class PdfUtils {
 
     private static final Logger logger = LoggerFactory.getLogger(PdfUtils.class);

File: src/main/java/stirling/software/SPDF/utils/WebResponseUtils.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.utils;
 
-import io.github.pixee.security.Filenames;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.net.URLEncoder;
@@ -13,6 +12,8 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
+
 public class WebResponseUtils {
 
     public static ResponseEntity<byte[]> boasToWebResponse(

File: src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java
Patch:
@@ -68,7 +68,7 @@ public ResponseEntity<byte[]> extractHeader(@ModelAttribute PDFFile request) thr
 
             if (script.isEmpty()) {
                 script =
-                        "PDF '" + inputFile.getOriginalFilename() + "' does not contain Javascript";
+                        "PDF '" + Filenames.toSimpleFileName(inputFile.getOriginalFilename()) + "' does not contain Javascript";
             }
 
             return WebResponseUtils.bytesToWebResponse(

File: src/main/java/stirling/software/SPDF/LibreOfficeListener.java
Patch:
@@ -1,12 +1,13 @@
 package stirling.software.SPDF;
 
-import io.github.pixee.security.SystemCommand;
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.net.Socket;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
+import io.github.pixee.security.SystemCommand;
+
 public class LibreOfficeListener {
 
     private static final long ACTIVITY_TIMEOUT = 20 * 60 * 1000; // 20 minutes

File: src/main/java/stirling/software/SPDF/SPdfApplication.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF;
 
-import io.github.pixee.security.SystemCommand;
 import java.nio.file.Files;
 import java.nio.file.Paths;
 import java.util.Collections;
@@ -11,6 +10,8 @@
 import org.springframework.core.env.Environment;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
+import io.github.pixee.security.SystemCommand;
+
 import jakarta.annotation.PostConstruct;
 import stirling.software.SPDF.config.ConfigInitializer;
 import stirling.software.SPDF.utils.GeneralUtils;

File: src/main/java/stirling/software/SPDF/controller/api/MultiPageLayoutController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api;
 
-import io.github.pixee.security.Filenames;
 import java.awt.Color;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -22,6 +21,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -137,6 +137,7 @@ public ResponseEntity<byte[]> mergeMultiplePagesIntoOne(
         byte[] result = baos.toByteArray();
         return WebResponseUtils.bytesToWebResponse(
                 result,
-                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "") + "_layoutChanged.pdf");
+                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                        + "_layoutChanged.pdf");
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/PdfOverlayController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api;
 
-import io.github.pixee.security.Filenames;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.IOException;
@@ -21,6 +20,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -77,7 +77,8 @@ public ResponseEntity<byte[]> overlayPdfs(@ModelAttribute OverlayPdfsRequest req
                 overlay.overlay(overlayGuide).save(outputStream);
                 byte[] data = outputStream.toByteArray();
                 String outputFilename =
-                        Filenames.toSimpleFileName(baseFile.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                        Filenames.toSimpleFileName(baseFile.getOriginalFilename())
+                                        .replaceFirst("[.][^.]+$", "")
                                 + "_overlayed.pdf"; // Remove file extension and append .pdf
 
                 return WebResponseUtils.bytesToWebResponse(

File: src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api;
 
-import io.github.pixee.security.Filenames;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.HashMap;
@@ -23,6 +22,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -113,6 +113,7 @@ public ResponseEntity<byte[]> scalePages(@ModelAttribute ScalePagesRequest reque
 
         return WebResponseUtils.bytesToWebResponse(
                 baos.toByteArray(),
-                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "") + "_scaled.pdf");
+                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                        + "_scaled.pdf");
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertBookToPDFController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import io.github.pixee.security.Filenames;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.http.ResponseEntity;
@@ -10,6 +9,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import io.github.pixee.security.Filenames;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.http.ResponseEntity;
@@ -10,6 +9,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import io.github.pixee.security.Filenames;
 import java.util.List;
 import java.util.Map;
 
@@ -20,6 +19,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertOfficeController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import io.github.pixee.security.Filenames;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -17,6 +16,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -90,7 +90,8 @@ public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile reque
         byte[] pdfByteArray = convertToPdf(inputFile);
         return WebResponseUtils.bytesToWebResponse(
                 pdfByteArray,
-                Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                Filenames.toSimpleFileName(inputFile.getOriginalFilename())
+                                .replaceFirst("[.][^.]+$", "")
                         + "_convertedToPDF.pdf");
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToBookController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import io.github.pixee.security.Filenames;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
@@ -16,6 +15,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -93,7 +93,8 @@ public ResponseEntity<byte[]> HtmlToPdf(@ModelAttribute PdfToBookRequest request
         }
 
         String outputFilename =
-                Filenames.toSimpleFileName(fileInput.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                Filenames.toSimpleFileName(fileInput.getOriginalFilename())
+                                .replaceFirst("[.][^.]+$", "")
                         + "."
                         + outputFormat; // Remove file extension and append .pdf
 

File: src/main/java/stirling/software/SPDF/controller/api/filters/FilterController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.filters;
 
-import io.github.pixee.security.Filenames;
 import java.io.IOException;
 
 import org.apache.pdfbox.Loader;
@@ -14,6 +13,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 

File: src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.misc;
 
-import io.github.pixee.security.Filenames;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Comparator;
@@ -19,6 +18,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -134,7 +134,8 @@ public String getText(PDDocument doc) throws IOException {
             return WebResponseUtils.pdfDocToWebResponse(document, header + ".pdf");
         } else {
             logger.info("File has no good title to be found");
-            return WebResponseUtils.pdfDocToWebResponse(document, Filenames.toSimpleFileName(file.getOriginalFilename()));
+            return WebResponseUtils.pdfDocToWebResponse(
+                    document, Filenames.toSimpleFileName(file.getOriginalFilename()));
         }
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.misc;
 
-import io.github.pixee.security.Filenames;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import java.nio.file.Files;
@@ -28,6 +27,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -132,7 +132,8 @@ public ResponseEntity<byte[]> removeBlankPages(@ModelAttribute RemoveBlankPagesR
 
             return WebResponseUtils.pdfDocToWebResponse(
                     document,
-                    Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())
+                                    .replaceFirst("[.][^.]+$", "")
                             + "_blanksRemoved.pdf");
         } catch (IOException e) {
             e.printStackTrace();

File: src/main/java/stirling/software/SPDF/controller/api/misc/PageNumbersController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.misc;
 
-import io.github.pixee.security.Filenames;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.List;
@@ -22,6 +21,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -146,7 +146,8 @@ public ResponseEntity<byte[]> addPageNumbers(@ModelAttribute AddPageNumbersReque
 
         return WebResponseUtils.bytesToWebResponse(
                 baos.toByteArray(),
-                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "") + "_numbersAdded.pdf",
+                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                        + "_numbersAdded.pdf",
                 MediaType.APPLICATION_PDF);
     }
 }

File: src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.misc;
 
-import io.github.pixee.security.Filenames;
 import java.nio.charset.StandardCharsets;
 import java.util.Map;
 
@@ -17,6 +16,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -55,7 +55,8 @@ public ResponseEntity<byte[]> extractHeader(@ModelAttribute PDFFile request) thr
 
                         script +=
                                 "// File: "
-                                        + Filenames.toSimpleFileName(inputFile.getOriginalFilename())
+                                        + Filenames.toSimpleFileName(
+                                                inputFile.getOriginalFilename())
                                         + ", Script: "
                                         + name
                                         + "\n"

File: src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java
Patch:
@@ -1,7 +1,5 @@
 package stirling.software.SPDF.controller.api.pipeline;
 
-import io.github.pixee.security.Filenames;
-import io.github.pixee.security.ZipSecurity;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -38,6 +36,9 @@
 import org.springframework.web.client.RestTemplate;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
+import io.github.pixee.security.ZipSecurity;
+
 import jakarta.servlet.ServletContext;
 import stirling.software.SPDF.SPdfApplication;
 import stirling.software.SPDF.model.PipelineConfig;

File: src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.security;
 
-import io.github.pixee.security.Filenames;
 import java.awt.Color;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
@@ -26,6 +25,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -105,7 +105,8 @@ public ResponseEntity<byte[]> redactPdf(@ModelAttribute RedactPdfRequest request
         byte[] pdfContent = baos.toByteArray();
         return WebResponseUtils.bytesToWebResponse(
                 pdfContent,
-                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "") + "_redacted.pdf");
+                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                        + "_redacted.pdf");
     }
 
     private void redactFoundText(

File: src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.security;
 
-import io.github.pixee.security.Filenames;
 import java.io.IOException;
 
 import org.apache.pdfbox.Loader;
@@ -29,6 +28,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -77,7 +77,8 @@ public ResponseEntity<byte[]> sanitizePDF(@ModelAttribute SanitizePdfRequest req
 
             return WebResponseUtils.pdfDocToWebResponse(
                     document,
-                    Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst("[.][^.]+$", "")
+                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())
+                                    .replaceFirst("[.][^.]+$", "")
                             + "_sanitized.pdf");
         }
     }

File: src/main/java/stirling/software/SPDF/utils/PDFToFile.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.utils;
 
-import io.github.pixee.security.Filenames;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
@@ -21,6 +20,8 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
+
 import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;
 
 public class PDFToFile {

File: src/main/java/stirling/software/SPDF/utils/PdfUtils.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.utils;
 
-import io.github.pixee.security.Filenames;
 import java.awt.Graphics;
 import java.awt.image.BufferedImage;
 import java.awt.image.RenderedImage;
@@ -38,6 +37,8 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
+
 public class PdfUtils {
 
     private static final Logger logger = LoggerFactory.getLogger(PdfUtils.class);

File: src/main/java/stirling/software/SPDF/utils/WebResponseUtils.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.utils;
 
-import io.github.pixee.security.Filenames;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.net.URLEncoder;
@@ -13,6 +12,8 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.github.pixee.security.Filenames;
+
 public class WebResponseUtils {
 
     public static ResponseEntity<byte[]> boasToWebResponse(

File: src/main/java/stirling/software/SPDF/controller/api/misc/AutoSplitPdfController.java
Patch:
@@ -68,7 +68,9 @@ public ResponseEntity<byte[]> autoSplitPdf(@ModelAttribute AutoSplitPdfRequest r
                 splitDocuments.add(new PDDocument());
             }
 
-            if (!splitDocuments.isEmpty() && !QR_CONTENT.equals(result) && !QR_CONTENT_OLD.equals(result)) {
+            if (!splitDocuments.isEmpty()
+                    && !QR_CONTENT.equals(result)
+                    && !QR_CONTENT_OLD.equals(result)) {
                 splitDocuments.get(splitDocuments.size() - 1).addPage(document.getPage(page));
             } else if (page == 0) {
                 PDDocument firstDocument = new PDDocument();

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java
Patch:
@@ -96,7 +96,7 @@ public ResponseEntity<Resource> convertToImage(@ModelAttribute ConvertToImageReq
     @Operation(
             summary = "Convert images to a PDF file",
             description =
-                    "This endpoint converts one or more images to a PDF file. Users can specify whether to stretch the images to fit the PDF page, and whether to automatically rotate the images. Input:Image Output:PDF Type:SISO?")
+                    "This endpoint converts one or more images to a PDF file. Users can specify whether to stretch the images to fit the PDF page, and whether to automatically rotate the images. Input:Image Output:PDF Type:MISO")
     public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest request)
             throws IOException {
         MultipartFile[] file = request.getFileInput();

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java
Patch:
@@ -39,7 +39,7 @@ public class ConvertMarkdownToPdf {
     @Operation(
             summary = "Convert a Markdown file to PDF",
             description =
-                    "This endpoint takes a Markdown file input, converts it to HTML, and then to PDF format.")
+                    "This endpoint takes a Markdown file input, converts it to HTML, and then to PDF format. Input:MARKDOWN Output:PDF Type:SISO")
     public ResponseEntity<byte[]> markdownToPdf(@ModelAttribute GeneralFile request)
             throws Exception {
         MultipartFile fileInput = request.getFileInput();
@@ -68,7 +68,7 @@ public ResponseEntity<byte[]> markdownToPdf(@ModelAttribute GeneralFile request)
 
         byte[] pdfBytes =
                 FileToPdf.convertHtmlToPdf(
-                        htmlContent.getBytes(), "converted.html", htmlFormatsInstalled);
+                        null, htmlContent.getBytes(), "converted.html", htmlFormatsInstalled);
 
         String outputFilename =
                 originalFilename.replaceFirst("[.][^.]+$", "")

File: src/main/java/stirling/software/SPDF/controller/api/misc/FakeScanControllerWIP.java
Patch:
@@ -29,7 +29,6 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.ModelAttribute;
-import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
@@ -50,7 +49,7 @@ public class FakeScanControllerWIP {
 
     // TODO
     @Hidden
-    @PostMapping(consumes = "multipart/form-data", value = "/fakeScan")
+    // @PostMapping(consumes = "multipart/form-data", value = "/fakeScan")
     @Operation(
             summary = "Repair a PDF file",
             description =

File: src/main/java/stirling/software/SPDF/controller/api/misc/OverlayImageController.java
Patch:
@@ -30,7 +30,7 @@ public class OverlayImageController {
     @Operation(
             summary = "Overlay image onto a PDF file",
             description =
-                    "This endpoint overlays an image onto a PDF file at the specified coordinates. The image can be overlaid on every page of the PDF if specified.  Input:PDF/IMAGE Output:PDF Type:MF-SISO")
+                    "This endpoint overlays an image onto a PDF file at the specified coordinates. The image can be overlaid on every page of the PDF if specified.  Input:PDF/IMAGE Output:PDF Type:SISO")
     public ResponseEntity<byte[]> overlayImage(@ModelAttribute OverlayImageRequest request) {
         MultipartFile pdfFile = request.getFileInput();
         MultipartFile imageFile = request.getImageFile();

File: src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java
Patch:
@@ -74,7 +74,7 @@ public CreateSignature(KeyStore keystore, char[] pin)
     @Operation(
             summary = "Sign PDF with a Digital Certificate",
             description =
-                    "This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:MF-SISO")
+                    "This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:SISO")
     public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertRequest request)
             throws Exception {
         MultipartFile pdf = request.getFileInput();

File: src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java
Patch:
@@ -115,4 +115,4 @@ protected boolean shouldNotFilter(HttpServletRequest request) throws ServletExce
 
         return false;
     }
-}
\ No newline at end of file
+}

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java
Patch:
@@ -68,7 +68,7 @@ public ResponseEntity<byte[]> markdownToPdf(@ModelAttribute GeneralFile request)
 
         byte[] pdfBytes =
                 FileToPdf.convertHtmlToPdf(
-                        htmlContent.getBytes(), "converted.html", htmlFormatsInstalled);
+                        null, htmlContent.getBytes(), "converted.html", htmlFormatsInstalled);
 
         String outputFilename =
                 originalFilename.replaceFirst("[.][^.]+$", "")

File: src/main/java/stirling/software/SPDF/controller/api/misc/FakeScanControllerWIP.java
Patch:
@@ -50,7 +50,7 @@ public class FakeScanControllerWIP {
 
     // TODO
     @Hidden
-    @PostMapping(consumes = "multipart/form-data", value = "/fakeScan")
+    //@PostMapping(consumes = "multipart/form-data", value = "/fakeScan")
     @Operation(
             summary = "Repair a PDF file",
             description =

File: src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java
Patch:
@@ -115,4 +115,4 @@ protected boolean shouldNotFilter(HttpServletRequest request) throws ServletExce
 
         return false;
     }
-}
\ No newline at end of file
+}

File: src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java
Patch:
@@ -121,8 +121,8 @@ public List<PDDocument> splitPdfPages(
                                     subDoc, subPage, AppendMode.APPEND, true, true)) {
                         // Set clipping area and position
                         float translateX = -subPageWidth * i;
-                       
-                        //float translateY = height - subPageHeight * (verticalDivisions - j);
+
+                        // float translateY = height - subPageHeight * (verticalDivisions - j);
                         float translateY = -subPageHeight * (verticalDivisions - 1 - j);
 
                         contentStream.saveGraphicsState();

File: src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java
Patch:
@@ -115,4 +115,4 @@ protected boolean shouldNotFilter(HttpServletRequest request) throws ServletExce
 
         return false;
     }
-}
\ No newline at end of file
+}

File: src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java
Patch:
@@ -121,8 +121,8 @@ public List<PDDocument> splitPdfPages(
                                     subDoc, subPage, AppendMode.APPEND, true, true)) {
                         // Set clipping area and position
                         float translateX = -subPageWidth * i;
-                       
-                        //float translateY = height - subPageHeight * (verticalDivisions - j);
+
+                        // float translateY = height - subPageHeight * (verticalDivisions - j);
                         float translateY = -subPageHeight * (verticalDivisions - 1 - j);
 
                         contentStream.saveGraphicsState();

File: src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java
Patch:
@@ -121,8 +121,8 @@ public List<PDDocument> splitPdfPages(
                                     subDoc, subPage, AppendMode.APPEND, true, true)) {
                         // Set clipping area and position
                         float translateX = -subPageWidth * i;
-                       
-                        //float translateY = height - subPageHeight * (verticalDivisions - j);
+
+                        // float translateY = height - subPageHeight * (verticalDivisions - j);
                         float translateY = -subPageHeight * (verticalDivisions - 1 - j);
 
                         contentStream.saveGraphicsState();

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java
Patch:
@@ -96,7 +96,7 @@ public ResponseEntity<Resource> convertToImage(@ModelAttribute ConvertToImageReq
     @Operation(
             summary = "Convert images to a PDF file",
             description =
-                    "This endpoint converts one or more images to a PDF file. Users can specify whether to stretch the images to fit the PDF page, and whether to automatically rotate the images. Input:Image Output:PDF Type:SISO?")
+                    "This endpoint converts one or more images to a PDF file. Users can specify whether to stretch the images to fit the PDF page, and whether to automatically rotate the images. Input:Image Output:PDF Type:MISO")
     public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest request)
             throws IOException {
         MultipartFile[] file = request.getFileInput();

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java
Patch:
@@ -39,7 +39,7 @@ public class ConvertMarkdownToPdf {
     @Operation(
             summary = "Convert a Markdown file to PDF",
             description =
-                    "This endpoint takes a Markdown file input, converts it to HTML, and then to PDF format.")
+                    "This endpoint takes a Markdown file input, converts it to HTML, and then to PDF format. Input:MARKDOWN Output:PDF Type:SISO")
     public ResponseEntity<byte[]> markdownToPdf(@ModelAttribute GeneralFile request)
             throws Exception {
         MultipartFile fileInput = request.getFileInput();

File: src/main/java/stirling/software/SPDF/controller/api/misc/OverlayImageController.java
Patch:
@@ -30,7 +30,7 @@ public class OverlayImageController {
     @Operation(
             summary = "Overlay image onto a PDF file",
             description =
-                    "This endpoint overlays an image onto a PDF file at the specified coordinates. The image can be overlaid on every page of the PDF if specified.  Input:PDF/IMAGE Output:PDF Type:MF-SISO")
+                    "This endpoint overlays an image onto a PDF file at the specified coordinates. The image can be overlaid on every page of the PDF if specified.  Input:PDF/IMAGE Output:PDF Type:SISO")
     public ResponseEntity<byte[]> overlayImage(@ModelAttribute OverlayImageRequest request) {
         MultipartFile pdfFile = request.getFileInput();
         MultipartFile imageFile = request.getImageFile();

File: src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java
Patch:
@@ -74,7 +74,7 @@ public CreateSignature(KeyStore keystore, char[] pin)
     @Operation(
             summary = "Sign PDF with a Digital Certificate",
             description =
-                    "This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:MF-SISO")
+                    "This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:SISO")
     public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertRequest request)
             throws Exception {
         MultipartFile pdf = request.getFileInput();

File: src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java
Patch:
@@ -115,4 +115,4 @@ protected boolean shouldNotFilter(HttpServletRequest request) throws ServletExce
 
         return false;
     }
-}
\ No newline at end of file
+}

File: src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java
Patch:
@@ -121,8 +121,8 @@ public List<PDDocument> splitPdfPages(
                                     subDoc, subPage, AppendMode.APPEND, true, true)) {
                         // Set clipping area and position
                         float translateX = -subPageWidth * i;
-                       
-                        //float translateY = height - subPageHeight * (verticalDivisions - j);
+
+                        // float translateY = height - subPageHeight * (verticalDivisions - j);
                         float translateY = -subPageHeight * (verticalDivisions - 1 - j);
 
                         contentStream.saveGraphicsState();

File: src/main/java/stirling/software/SPDF/model/api/user/Username.java
Patch:
@@ -1,7 +1,5 @@
 package stirling.software.SPDF.model.api.user;
 
-import org.springframework.web.multipart.MultipartFile;
-
 import io.swagger.v3.oas.annotations.media.Schema;
 
 import lombok.Data;

File: src/main/java/stirling/software/SPDF/controller/api/MultiPageLayoutController.java
Patch:
@@ -4,6 +4,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.multipdf.LayerUtility;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
@@ -57,7 +58,7 @@ public ResponseEntity<byte[]> mergeMultiplePagesIntoOne(
                         : (int) Math.sqrt(pagesPerSheet);
         int rows = pagesPerSheet == 2 || pagesPerSheet == 3 ? 1 : (int) Math.sqrt(pagesPerSheet);
 
-        PDDocument sourceDocument = PDDocument.load(file.getInputStream());
+        PDDocument sourceDocument = Loader.loadPDF(file.getBytes());
         PDDocument newDocument = new PDDocument();
         PDPage newPage = new PDPage(PDRectangle.A4);
         newDocument.addPage(newPage);

File: src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
 import org.slf4j.Logger;
@@ -42,7 +43,7 @@ public ResponseEntity<byte[]> deletePages(@ModelAttribute PDFWithPageNums reques
         MultipartFile pdfFile = request.getFileInput();
         String pagesToDelete = request.getPageNumbers();
 
-        PDDocument document = PDDocument.load(pdfFile.getBytes());
+        PDDocument document = Loader.loadPDF(pdfFile.getBytes());
 
         // Split the page order string into an array of page numbers or range of numbers
         String[] pageOrderArr = pagesToDelete.split(",");
@@ -179,7 +180,7 @@ public ResponseEntity<byte[]> rearrangePages(@ModelAttribute RearrangePagesReque
         String sortType = request.getCustomMode();
         try {
             // Load the input PDF
-            PDDocument document = PDDocument.load(pdfFile.getInputStream());
+            PDDocument document = Loader.loadPDF(pdfFile.getBytes());
 
             // Split the page order string into an array of page numbers or range of numbers
             String[] pageOrderArr = pageOrder != null ? pageOrder.split(",") : new String[0];

File: src/main/java/stirling/software/SPDF/controller/api/RotationController.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
 import org.apache.pdfbox.pdmodel.PDPageTree;
@@ -37,7 +38,7 @@ public ResponseEntity<byte[]> rotatePDF(@ModelAttribute RotatePDFRequest request
         MultipartFile pdfFile = request.getFileInput();
         Integer angle = request.getAngle();
         // Load the PDF document
-        PDDocument document = PDDocument.load(pdfFile.getBytes());
+        PDDocument document = Loader.loadPDF(pdfFile.getBytes());
 
         // Get the list of pages in the document
         PDPageTree pages = document.getPages();

File: src/main/java/stirling/software/SPDF/controller/api/SplitPDFController.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
@@ -11,6 +10,7 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
 import org.slf4j.Logger;
@@ -46,8 +46,8 @@ public ResponseEntity<byte[]> splitPdf(@ModelAttribute PDFWithPageNums request)
         MultipartFile file = request.getFileInput();
         String pages = request.getPageNumbers();
         // open the pdf document
-        InputStream inputStream = file.getInputStream();
-        PDDocument document = PDDocument.load(inputStream);
+
+        PDDocument document = Loader.loadPDF(file.getBytes());
 
         List<Integer> pageNumbers = request.getPageNumbersList(document);
         if (!pageNumbers.contains(document.getNumberOfPages() - 1))

File: src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySizeController.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
 import org.springframework.http.MediaType;
@@ -42,7 +43,7 @@ public ResponseEntity<byte[]> autoSplitPdf(@ModelAttribute SplitPdfBySizeOrCount
         List<ByteArrayOutputStream> splitDocumentsBoas = new ArrayList<ByteArrayOutputStream>();
 
         MultipartFile file = request.getFileInput();
-        PDDocument sourceDocument = PDDocument.load(file.getInputStream());
+        PDDocument sourceDocument = Loader.loadPDF(file.getBytes());
 
         // 0 = size, 1 = page count, 2 = doc count
         int type = request.getSplitType();

File: src/main/java/stirling/software/SPDF/controller/api/ToSinglePageController.java
Patch:
@@ -4,6 +4,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.multipdf.LayerUtility;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
@@ -40,7 +41,7 @@ public ResponseEntity<byte[]> pdfToSinglePage(@ModelAttribute PDFFile request)
             throws IOException {
 
         // Load the source document
-        PDDocument sourceDocument = PDDocument.load(request.getFileInput().getInputStream());
+        PDDocument sourceDocument = Loader.loadPDF(request.getFileInput().getBytes());
 
         // Calculate total height and max width
         float totalHeight = 0;

File: src/main/java/stirling/software/SPDF/controller/api/converters/ExtractController.java
Patch:
@@ -1,10 +1,10 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import java.io.ByteArrayInputStream;
 import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
 import org.slf4j.Logger;
@@ -44,8 +44,7 @@ public ResponseEntity<String> PdfToCsv(@ModelAttribute PDFFilePage form) throws
         ArrayList<String> tableData = new ArrayList<>();
         int columnsCount = 0;
 
-        try (PDDocument document =
-                PDDocument.load(new ByteArrayInputStream(form.getFileInput().getBytes()))) {
+        try (PDDocument document = Loader.loadPDF(form.getFileInput().getBytes())) {
             final double res = 72; // PDF units are at 72 DPI
             PDFTableStripper stripper = new PDFTableStripper();
             PDPage pdPage = document.getPage(form.getPageId() - 1);

File: src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.Comparator;
 import java.util.List;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.text.PDFTextStripper;
 import org.apache.pdfbox.text.TextPosition;
@@ -43,7 +44,7 @@ public ResponseEntity<byte[]> extractHeader(@ModelAttribute ExtractHeaderRequest
         MultipartFile file = request.getFileInput();
         Boolean useFirstTextAsFallback = request.isUseFirstTextAsFallback();
 
-        PDDocument document = PDDocument.load(file.getInputStream());
+        PDDocument document = Loader.loadPDF(file.getBytes());
         PDFTextStripper reader =
                 new PDFTextStripper() {
                     class LineInfo {

File: src/main/java/stirling/software/SPDF/controller/api/misc/AutoSplitPdfController.java
Patch:
@@ -5,14 +5,14 @@
 import java.awt.image.DataBufferInt;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.rendering.PDFRenderer;
 import org.springframework.http.MediaType;
@@ -54,8 +54,7 @@ public ResponseEntity<byte[]> autoSplitPdf(@ModelAttribute AutoSplitPdfRequest r
         MultipartFile file = request.getFileInput();
         boolean duplexMode = request.isDuplexMode();
 
-        InputStream inputStream = file.getInputStream();
-        PDDocument document = PDDocument.load(inputStream);
+        PDDocument document = Loader.loadPDF(file.getBytes());
         PDFRenderer pdfRenderer = new PDFRenderer(document);
 
         List<PDDocument> splitDocuments = new ArrayList<>();

File: src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java
Patch:
@@ -13,6 +13,7 @@
 
 import javax.imageio.ImageIO;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
 import org.apache.pdfbox.pdmodel.PDPageTree;
@@ -53,7 +54,7 @@ public ResponseEntity<byte[]> removeBlankPages(@ModelAttribute RemoveBlankPagesR
 
         PDDocument document = null;
         try {
-            document = PDDocument.load(inputFile.getInputStream());
+            document = Loader.loadPDF(inputFile.getBytes());
             PDPageTree pages = document.getDocumentCatalog().getPages();
             PDFTextStripper textStripper = new PDFTextStripper();
 

File: src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java
Patch:
@@ -13,6 +13,7 @@
 import javax.imageio.ImageIO;
 
 import org.apache.commons.io.FileUtils;
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.cos.COSName;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
@@ -147,7 +148,7 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req
         if (expectedOutputSize != null && autoMode) {
             long outputFileSize = Files.size(tempOutputFile);
             if (outputFileSize > expectedOutputSize) {
-                try (PDDocument doc = PDDocument.load(new File(tempOutputFile.toString()))) {
+                try (PDDocument doc = Loader.loadPDF(new File(tempOutputFile.toString()))) {
                     long previousFileSize = 0;
                     double scaleFactor = 1.0;
                     while (true) {

File: src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java
Patch:
@@ -1,7 +1,6 @@
 package stirling.software.SPDF.controller.api.misc;
 
 import java.awt.image.BufferedImage;
-import java.io.ByteArrayInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.nio.file.Files;
@@ -17,6 +16,7 @@
 import javax.imageio.ImageIO;
 
 import org.apache.commons.io.FileUtils;
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.rendering.PDFRenderer;
 import org.slf4j.Logger;
@@ -76,8 +76,7 @@ public ResponseEntity<byte[]> extractImageScans(
         // Check if input file is a PDF
         if (extension.equalsIgnoreCase("pdf")) {
             // Load PDF document
-            try (PDDocument document =
-                    PDDocument.load(new ByteArrayInputStream(form.getFileInput().getBytes()))) {
+            try (PDDocument document = Loader.loadPDF(form.getFileInput().getBytes())) {
                 PDFRenderer pdfRenderer = new PDFRenderer(document);
                 int pageCount = document.getNumberOfPages();
                 images = new ArrayList<>();

File: src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java
Patch:
@@ -14,6 +14,7 @@
 
 import javax.imageio.ImageIO;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.cos.COSName;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
@@ -53,7 +54,7 @@ public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFWithImageFormatRe
 
         System.out.println(
                 System.currentTimeMillis() + "file=" + file.getName() + ", format=" + format);
-        PDDocument document = PDDocument.load(file.getBytes());
+        PDDocument document = Loader.loadPDF(file.getBytes());
 
         // Create ByteArrayOutputStream to write zip file to byte array
         ByteArrayOutputStream baos = new ByteArrayOutputStream();

File: src/main/java/stirling/software/SPDF/controller/api/misc/FakeScanControllerWIP.java
Patch:
@@ -16,6 +16,7 @@
 
 import javax.imageio.ImageIO;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
 import org.apache.pdfbox.pdmodel.PDPageContentStream;
@@ -57,7 +58,7 @@ public class FakeScanControllerWIP {
     public ResponseEntity<byte[]> repairPdf(@ModelAttribute PDFFile request) throws IOException {
         MultipartFile inputFile = request.getFileInput();
 
-        PDDocument document = PDDocument.load(inputFile.getBytes());
+        PDDocument document = Loader.loadPDF(inputFile.getBytes());
         PDFRenderer pdfRenderer = new PDFRenderer(document);
         for (int page = 0; page < document.getNumberOfPages(); ++page) {
             BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);

File: src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.cos.COSName;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDDocumentInformation;
@@ -67,7 +68,7 @@ public ResponseEntity<byte[]> metadata(@ModelAttribute MetadataRequest request)
             allRequestParams = new java.util.HashMap<String, String>();
         }
         // Load the PDF file into a PDDocument
-        PDDocument document = PDDocument.load(pdfFile.getBytes());
+        PDDocument document = Loader.loadPDF(pdfFile.getBytes());
 
         // Get the document information from the PDF
         PDDocumentInformation info = document.getDocumentInformation();

File: src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java
Patch:
@@ -3,6 +3,7 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Map;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.common.PDNameTreeNode;
 import org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript;
@@ -36,7 +37,7 @@ public ResponseEntity<byte[]> extractHeader(@ModelAttribute PDFFile request) thr
         MultipartFile inputFile = request.getFileInput();
         String script = "";
 
-        try (PDDocument document = PDDocument.load(inputFile.getInputStream())) {
+        try (PDDocument document = Loader.loadPDF(inputFile.getBytes())) {
 
             if (document.getDocumentCatalog() != null
                     && document.getDocumentCatalog().getNames() != null) {

File: src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java
Patch:
@@ -16,6 +16,7 @@
 import java.security.cert.CertificateFactory;
 import java.util.Calendar;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.examples.signature.CreateSignatureBase;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature;
@@ -132,7 +133,7 @@ private static void sign(
             String name,
             String location,
             String reason) {
-        try (PDDocument doc = PDDocument.load(input)) {
+        try (PDDocument doc = Loader.loadPDF(input)) {
             PDSignature signature = new PDSignature();
             signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);
             signature.setSubFilter(PDSignature.SUBFILTER_ADBE_PKCS7_DETACHED);

File: src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
 import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
@@ -38,7 +39,7 @@ public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest
         MultipartFile fileInput = request.getFileInput();
         String password = request.getPassword();
 
-        PDDocument document = PDDocument.load(fileInput.getBytes(), password);
+        PDDocument document = Loader.loadPDF(fileInput.getBytes(), password);
         document.setAllSecurityToBeRemoved(true);
         return WebResponseUtils.pdfDocToWebResponse(
                 document,
@@ -66,7 +67,7 @@ public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest req
         boolean canPrint = request.isCanPrint();
         boolean canPrintFaithful = request.isCanPrintFaithful();
 
-        PDDocument document = PDDocument.load(fileInput.getBytes());
+        PDDocument document = Loader.loadPDF(fileInput.getBytes());
         AccessPermission ap = new AccessPermission();
         ap.setCanAssembleDocument(!canAssembleDocument);
         ap.setCanExtractContent(!canExtractContent);

File: src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.cos.COSDictionary;
 import org.apache.pdfbox.cos.COSName;
 import org.apache.pdfbox.pdmodel.PDDocument;
@@ -52,7 +53,7 @@ public ResponseEntity<byte[]> sanitizePDF(@ModelAttribute SanitizePdfRequest req
         boolean removeLinks = request.isRemoveLinks();
         boolean removeFonts = request.isRemoveFonts();
 
-        try (PDDocument document = PDDocument.load(inputFile.getInputStream())) {
+        try (PDDocument document = Loader.loadPDF(inputFile.getBytes())) {
             if (removeJavaScript) {
                 sanitizeJavaScript(document);
             }

File: src/main/java/stirling/software/SPDF/model/api/PDFWithPageNums.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.util.List;
 
+import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 
 import io.swagger.v3.oas.annotations.Hidden;
@@ -27,7 +28,7 @@ public class PDFWithPageNums extends PDFFile {
     public List<Integer> getPageNumbersList() {
         int pageCount = 0;
         try {
-            pageCount = PDDocument.load(getFileInput().getInputStream()).getNumberOfPages();
+            pageCount = Loader.loadPDF(getFileInput().getBytes()).getNumberOfPages();
         } catch (IOException e) {
             // TODO Auto-generated catch block
             e.printStackTrace();

File: src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java
Patch:
@@ -115,4 +115,4 @@ protected boolean shouldNotFilter(HttpServletRequest request) throws ServletExce
 
         return false;
     }
-}
+}
\ No newline at end of file

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertOfficeController.java
Patch:
@@ -79,7 +79,7 @@ private boolean isValidFileExtension(String fileExtension) {
     @Operation(
             summary = "Convert a file to a PDF using LibreOffice",
             description =
-                    "This endpoint converts a given file to a PDF using LibreOffice API  Input:Any Output:PDF Type:SISO")
+                    "This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY Output:PDF Type:SISO")
     public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile request)
             throws Exception {
         MultipartFile inputFile = request.getFileInput();

File: src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java
Patch:
@@ -29,12 +29,12 @@
 import stirling.software.SPDF.utils.WebResponseUtils;
 @RestController
 @RequestMapping("/api/v1/general")
-@Tag(name = "Misc", description = "Miscellaneous APIs")
+@Tag(name = "General", description = "General APIs")
 public class SplitPdfBySectionsController {
 
 
 	@PostMapping(value = "/split-pdf-by-sections", consumes = "multipart/form-data")
-    @Operation(summary = "Split PDF pages into smaller sections", description = "Split each page of a PDF into smaller sections based on the user's choice (halves, thirds, quarters, etc.), both vertically and horizontally. Input: PDF, Split Parameters. Output: ZIP containing split documents.")
+    @Operation(summary = "Split PDF pages into smaller sections", description = "Split each page of a PDF into smaller sections based on the user's choice (halves, thirds, quarters, etc.), both vertically and horizontally. Input:PDF Output:ZIP-PDF Type:SISO")
     public ResponseEntity<byte[]> splitPdf(@ModelAttribute SplitPdfBySectionsRequest request) throws Exception {
         List<ByteArrayOutputStream> splitDocumentsBoas = new ArrayList<>();
 

File: src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySizeController.java
Patch:
@@ -26,13 +26,13 @@
 
 @RestController
 @RequestMapping("/api/v1/general")
-@Tag(name = "Misc", description = "Miscellaneous APIs")
+@Tag(name = "General", description = "General APIs")
 public class SplitPdfBySizeController {
 
 
     @PostMapping(value = "/split-by-size-or-count", consumes = "multipart/form-data")
     @Operation(summary = "Auto split PDF pages into separate documents based on size or count", description = "split PDF into multiple paged documents based on size/count, ie if 20 pages and split into 5, it does 5 documents each 4 pages\r\n"
-    		+ " if 10MB and each page is 1MB and you enter 2MB then 5 docs each 2MB (rounded so that it accepts 1.9MB but not 2.1MB) Input:PDF Output:ZIP Type:SIMO")
+    		+ " if 10MB and each page is 1MB and you enter 2MB then 5 docs each 2MB (rounded so that it accepts 1.9MB but not 2.1MB) Input:PDF Output:ZIP-PDF Type:SISO")
     public ResponseEntity<byte[]> autoSplitPdf(@ModelAttribute SplitPdfBySizeOrCountRequest request) throws Exception {
     	List<ByteArrayOutputStream> splitDocumentsBoas = new ArrayList<ByteArrayOutputStream>();
         

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java
Patch:
@@ -28,7 +28,7 @@ public class ConvertWebsiteToPDF {
 	@PostMapping(consumes = "multipart/form-data", value = "/url/pdf")
 	@Operation(
 	    summary = "Convert a URL to a PDF",
-	    description = "This endpoint fetches content from a URL and converts it to a PDF format."
+	    description = "This endpoint fetches content from a URL and converts it to a PDF format. Input:N/A Output:PDF Type:SISO"
 	)
 	public ResponseEntity<byte[]> urlToPdf(@ModelAttribute UrlToPdfRequest request) throws IOException, InterruptedException {
 	    String URL = request.getUrlInput();

File: src/main/java/stirling/software/SPDF/controller/api/converters/ExtractController.java
Patch:
@@ -28,12 +28,12 @@
 
 @RestController
 @RequestMapping("/api/v1/convert")
-@Tag(name = "General", description = "General APIs")
+@Tag(name = "Convert", description = "Convert APIs")
 public class ExtractController {
 
     private static final Logger logger = LoggerFactory.getLogger(CropController.class);
 
-    @PostMapping(value = "/pdf-to-csv", consumes = "multipart/form-data")
+    @PostMapping(value = "/pdf/csv", consumes = "multipart/form-data")
     @Operation(summary = "Extracts a PDF document to csv", description = "This operation takes an input PDF file and returns CSV file of whole page. Input:PDF Output:CSV Type:SISO")
     public ResponseEntity<String> PdfToCsv(@ModelAttribute PDFFilePage form)
             throws Exception {

File: src/main/java/stirling/software/SPDF/controller/api/misc/AutoSplitPdfController.java
Patch:
@@ -43,7 +43,7 @@ public class AutoSplitPdfController {
     private static final String QR_CONTENT = "https://github.com/Frooodle/Stirling-PDF";
 
     @PostMapping(value = "/auto-split-pdf", consumes = "multipart/form-data")
-    @Operation(summary = "Auto split PDF pages into separate documents", description = "This endpoint accepts a PDF file, scans each page for a specific QR code, and splits the document at the QR code boundaries. The output is a zip file containing each separate PDF document. Input:PDF Output:ZIP Type:SISO")
+    @Operation(summary = "Auto split PDF pages into separate documents", description = "This endpoint accepts a PDF file, scans each page for a specific QR code, and splits the document at the QR code boundaries. The output is a zip file containing each separate PDF document. Input:PDF Output:ZIP-PDF Type:SISO")
     public ResponseEntity<byte[]> autoSplitPdf(@ModelAttribute AutoSplitPdfRequest request) throws IOException {
         MultipartFile file = request.getFileInput();
         boolean duplexMode = request.isDuplexMode();

File: src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java
Patch:
@@ -15,6 +15,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
+import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.PDFFile;
 import stirling.software.SPDF.utils.WebResponseUtils;
@@ -25,6 +26,7 @@ public class ShowJavascript {
 
     private static final Logger logger = LoggerFactory.getLogger(ShowJavascript.class);
     @PostMapping(consumes = "multipart/form-data", value = "/show-javascript")
+    @Operation(summary = "Grabs all JS from a PDF and returns a single JS file with all code", description = "desc. Input:PDF Output:JS Type:SISO")
     public ResponseEntity<byte[]> extractHeader(@ModelAttribute PDFFile request) throws Exception {
     	MultipartFile inputFile = request.getFileInput();
         String script = "";

File: src/main/java/stirling/software/SPDF/controller/web/MetricsController.java
Patch:
@@ -27,8 +27,8 @@
 import stirling.software.SPDF.model.ApplicationProperties;
 
 @RestController
-@RequestMapping("/api/v1")
-@Tag(name = "API", description = "Info APIs")
+@RequestMapping("/api/v1/info")
+@Tag(name = "Info", description = "Info APIs")
 public class MetricsController {
 
 	

File: src/main/java/stirling/software/SPDF/model/api/HandleDataRequest.java
Patch:
@@ -13,8 +13,8 @@
 public class HandleDataRequest {
 
     @Schema(description = "The input files")
-    private MultipartFile[] fileInputs;
+    private MultipartFile[] fileInput;
 
     @Schema(description = "JSON String")
-    private String jsonString;
+    private String json;
 }

File: src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java
Patch:
@@ -49,7 +49,7 @@ public class PipelineProcessor {
 	@Autowired
 	private ApiDocService apiDocService;
     
-	@Autowired
+	@Autowired(required=false)
     private UserServiceInterface userService;
 	
 	@Autowired

File: src/main/java/stirling/software/SPDF/utils/PdfUtils.java
Patch:
@@ -203,7 +203,6 @@ public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageT
         try (PDDocument document = PDDocument.load(new ByteArrayInputStream(inputStream))) {
             PDFRenderer pdfRenderer = new PDFRenderer(document);
             int pageCount = document.getNumberOfPages();
-            List<BufferedImage> images = new ArrayList<>();
 
             // Create a ByteArrayOutputStream to save the image(s) to
             ByteArrayOutputStream baos = new ByteArrayOutputStream();
@@ -232,7 +231,8 @@ public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageT
                     writer.dispose();
                 } else {
                     // Combine all images into a single big image
-                    BufferedImage combined = new BufferedImage(images.get(0).getWidth(), images.get(0).getHeight() * pageCount, BufferedImage.TYPE_INT_RGB);
+                    BufferedImage image = pdfRenderer.renderImageWithDPI(0, DPI, colorType);
+                    BufferedImage combined = new BufferedImage(image.getWidth(), image.getHeight() * pageCount, BufferedImage.TYPE_INT_RGB);
                     Graphics g = combined.getGraphics();
 
                     for (int i = 0; i < pageCount; ++i) {

File: src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java
Patch:
@@ -39,7 +39,7 @@ public class OCRController {
     private static final Logger logger = LoggerFactory.getLogger(OCRController.class);
 
     public List<String> getAvailableTesseractLanguages() {
-        String tessdataDir = "/usr/share/tesseract-ocr/4.00/tessdata";
+        String tessdataDir = "/usr/share/tesseract-ocr/5/tessdata";
         File[] files = new File(tessdataDir).listFiles();
         if (files == null) {
             return Collections.emptyList();

File: src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java
Patch:
@@ -78,7 +78,7 @@ public String compareForm(Model model) {
     }
     
     public List<String> getAvailableTesseractLanguages() {
-        String tessdataDir = "/usr/share/tesseract-ocr/4.00/tessdata";
+        String tessdataDir = "/usr/share/tesseract-ocr/5/tessdata";
         File[] files = new File(tessdataDir).listFiles();
         if (files == null) {
             return Collections.emptyList();

File: src/main/java/stirling/software/SPDF/controller/api/misc/FakeScanControllerWIP.java
Patch:
@@ -13,6 +13,7 @@
 //Required for file input/output
 import java.io.File;
 import java.io.IOException;
+import java.security.SecureRandom;
 //Other required classes
 import java.util.Random;
 
@@ -85,7 +86,7 @@ public ResponseEntity<byte[]> repairPdf(@ModelAttribute PDFFile request) throws
     	op.filter(sourceImage, destinationImage);
 
     	// Apply a rotation effect
-    	double rotationRequired = Math.toRadians((new Random().nextInt(3 - 1) + 1));  // Random angle between 1 and 3 degrees
+    	double rotationRequired = Math.toRadians((new SecureRandom().nextInt(3 - 1) + 1));  // Random angle between 1 and 3 degrees
     	double locationX = destinationImage.getWidth() / 2;
     	double locationY = destinationImage.getHeight() / 2;
     	AffineTransform tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
@@ -103,7 +104,7 @@ public ResponseEntity<byte[]> repairPdf(@ModelAttribute PDFFile request) throws
     	destinationImage = blurOp.filter(destinationImage, null);
 
     	// Add noise to the image based on the "dirtiness"
-    	Random random = new Random();
+    	Random random = new SecureRandom();
     	for (int y = 0; y < destinationImage.getHeight(); y++) {
     	    for (int x = 0; x < destinationImage.getWidth(); x++) {
     	        if (random.nextInt(100) < dirtiness) {

File: src/main/java/stirling/software/SPDF/config/AppConfig.java
Patch:
@@ -1,5 +1,6 @@
 package stirling.software.SPDF.config;
 
+import org.springframework.beans.PropertyEditorRegistrar;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -8,6 +9,7 @@
 @Configuration
 public class AppConfig {
 
+    
     @Autowired
     ApplicationProperties applicationProperties;
     

File: src/main/java/stirling/software/SPDF/config/AppConfig.java
Patch:
@@ -1,5 +1,6 @@
 package stirling.software.SPDF.config;
 
+import org.springframework.beans.PropertyEditorRegistrar;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -8,6 +9,7 @@
 @Configuration
 public class AppConfig {
 
+    
     @Autowired
     ApplicationProperties applicationProperties;
     

File: src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java
Patch:
@@ -12,6 +12,7 @@
 import java.security.cert.X509Certificate;
 import java.security.spec.PKCS8EncodedKeySpec;
 import java.text.SimpleDateFormat;
+import java.util.Calendar;
 import java.util.Collections;
 import java.util.Date;
 
@@ -130,7 +131,8 @@ public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertReq
 		signature.setName(name);
 		signature.setLocation(location);
 		signature.setReason(reason);
-
+		signature.setSignDate(Calendar.getInstance());
+		
 		// Load the PDF
 		try (PDDocument document = PDDocument.load(pdf.getBytes())) {
 			logger.info("Successfully loaded the provided PDF");

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java
Patch:
@@ -79,12 +79,12 @@ public ResponseEntity<Resource> convertToImage(@ModelAttribute ConvertToImageReq
             description = "This endpoint converts one or more images to a PDF file. Users can specify whether to stretch the images to fit the PDF page, and whether to automatically rotate the images. Input:Image Output:PDF Type:SISO?")
     public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest request) throws IOException {
         MultipartFile[] file = request.getFileInput();
-        boolean stretchToFit = request.isStretchToFit();
+        String fitOption = request.getFitOption();
         String colorType = request.getColorType();
         boolean autoRotate = request.isAutoRotate();
         
         // Convert the file to PDF and get the resulting bytes
-        byte[] bytes = PdfUtils.imageToPdf(file, stretchToFit, autoRotate, colorType);
+        byte[] bytes = PdfUtils.imageToPdf(file, fitOption, autoRotate, colorType);
         return WebResponseUtils.bytesToWebResponse(bytes, file[0].getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_converted.pdf");
     }
 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java
Patch:
@@ -79,12 +79,12 @@ public ResponseEntity<Resource> convertToImage(@ModelAttribute ConvertToImageReq
             description = "This endpoint converts one or more images to a PDF file. Users can specify whether to stretch the images to fit the PDF page, and whether to automatically rotate the images. Input:Image Output:PDF Type:SISO?")
     public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest request) throws IOException {
         MultipartFile[] file = request.getFileInput();
-        boolean stretchToFit = request.isStretchToFit();
+        String fitOption = request.getFitOption();
         String colorType = request.getColorType();
         boolean autoRotate = request.isAutoRotate();
         
         // Convert the file to PDF and get the resulting bytes
-        byte[] bytes = PdfUtils.imageToPdf(file, stretchToFit, autoRotate, colorType);
+        byte[] bytes = PdfUtils.imageToPdf(file, fitOption, autoRotate, colorType);
         return WebResponseUtils.bytesToWebResponse(bytes, file[0].getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_converted.pdf");
     }
 

File: src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java
Patch:
@@ -186,7 +186,8 @@ public ResponseEntity<byte[]> rearrangePages(@ModelAttribute RearrangePagesReque
 			} else {
 				newPageOrder = GeneralUtils.parsePageList(pageOrderArr, totalPages);
 			}
-
+			logger.info("newPageOrder = "  +newPageOrder);
+			logger.info("totalPages = "  +totalPages);
 			// Create a new list to hold the pages in the new order
 			List<PDPage> newPages = new ArrayList<>();
 			for (int i = 0; i < newPageOrder.size(); i++) {

File: src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java
Patch:
@@ -36,7 +36,7 @@ public class ScalePagesController {
 	@Operation(summary = "Change the size of a PDF page/document", description = "This operation takes an input PDF file and the size to scale the pages to in the output PDF file. Input:PDF Output:PDF Type:SISO")
 	public ResponseEntity<byte[]> scalePages(@ModelAttribute ScalePagesRequest request) throws IOException {
 	    MultipartFile file = request.getFileInput();
-	    String targetPDRectangle = request.getTargetPDRectangle();
+	    String targetPDRectangle = request.getPageSize();
 	    float scaleFactor = request.getScaleFactor();
 
 		Map<String, PDRectangle> sizeMap = new HashMap<>();

File: src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java
Patch:
@@ -35,7 +35,7 @@ public class AutoRenameController {
     @Operation(summary = "Extract header from PDF file", description = "This endpoint accepts a PDF file and attempts to extract its title or header based on heuristics. Input:PDF Output:PDF Type:SISO")
     public ResponseEntity<byte[]> extractHeader(@ModelAttribute ExtractHeaderRequest request) throws Exception {
         MultipartFile file = request.getFileInput();
-        Boolean useFirstTextAsFallback = request.getUseFirstTextAsFallback();
+        Boolean useFirstTextAsFallback = request.isUseFirstTextAsFallback();
 
     	        PDDocument document = PDDocument.load(file.getInputStream());
     	        PDFTextStripper reader = new PDFTextStripper() {

File: src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java
Patch:
@@ -48,7 +48,7 @@ public class CompressController {
     public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest request) throws Exception {
         MultipartFile inputFile = request.getFileInput();
         Integer optimizeLevel = request.getOptimizeLevel();
-        String expectedOutputSizeString = request.getExpectedOutputSizeString();
+        String expectedOutputSizeString = request.getExpectedOutputSize();
 
 
         if(expectedOutputSizeString == null && optimizeLevel == null) {

File: src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java
Patch:
@@ -75,7 +75,7 @@ public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertReq
 	    MultipartFile certFile = request.getCertFile();
 	    MultipartFile p12File = request.getP12File();
 	    String password = request.getPassword();
-	    Boolean showSignature = request.getShowSignature();
+	    Boolean showSignature = request.isShowSignature();
 	    String reason = request.getReason();
 	    String location = request.getLocation();
 	    String name = request.getName();

File: src/main/java/stirling/software/SPDF/model/api/misc/ExtractHeaderRequest.java
Patch:
@@ -10,5 +10,5 @@
 public class ExtractHeaderRequest extends PDFFile {
 
     @Schema(description = "Flag indicating whether to use the first text as a fallback if no suitable title is found. Defaults to false.", required = false, defaultValue = "false")
-    private Boolean useFirstTextAsFallback;
+    private boolean useFirstTextAsFallback;
 }

File: src/main/java/stirling/software/SPDF/model/api/misc/MetadataRequest.java
Patch:
@@ -12,7 +12,7 @@
 public class MetadataRequest extends PDFFile {
 
     @Schema(description = "Delete all metadata if set to true")
-    private Boolean deleteAll;
+    private boolean deleteAll;
 
     @Schema(description = "The author of the document")
     private String author;

File: src/main/java/stirling/software/SPDF/model/api/misc/OptimizePdfRequest.java
Patch:
@@ -14,5 +14,5 @@ public class OptimizePdfRequest extends PDFFile {
     private Integer optimizeLevel;
 
     @Schema(description = "The expected output size, e.g. '100MB', '25KB', etc.")
-    private String expectedOutputSizeString;
+    private String expectedOutputSize;
 }

File: src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java
Patch:
@@ -27,7 +27,7 @@ public class SignPDFWithCertRequest extends PDFFile {
     private String password;
 
     @Schema(description = "Whether to visually show the signature in the PDF file")
-    private Boolean showSignature;
+    private boolean showSignature;
 
     @Schema(description = "The reason for signing the PDF")
     private String reason;

File: src/main/java/stirling/software/SPDF/controller/api/MultiPageLayoutController.java
Patch:
@@ -17,13 +17,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
-import io.swagger.v3.oas.annotations.media.Schema;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.general.MergeMultiplePagesRequest;
 import stirling.software.SPDF.utils.WebResponseUtils;

File: src/main/java/stirling/software/SPDF/controller/api/RotationController.java
Patch:
@@ -11,13 +11,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.general.RotatePDFRequest;
 import stirling.software.SPDF.utils.WebResponseUtils;

File: src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java
Patch:
@@ -18,13 +18,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
-import io.swagger.v3.oas.annotations.media.Schema;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.general.ScalePagesRequest;
 import stirling.software.SPDF.utils.WebResponseUtils;

File: src/main/java/stirling/software/SPDF/controller/api/ToSinglePageController.java
Patch:
@@ -16,12 +16,9 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
-import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.PDFFile;
 import stirling.software.SPDF.utils.WebResponseUtils;

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertEpubToPdf.java
Patch:
@@ -17,7 +17,6 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 import org.w3c.dom.Document;
@@ -29,7 +28,6 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.GeneralFile;
-import stirling.software.SPDF.model.api.PDFFile;
 import stirling.software.SPDF.utils.FileToPdf;
 import stirling.software.SPDF.utils.WebResponseUtils;
 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java
Patch:
@@ -1,12 +1,9 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import java.io.IOException;
-
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java
Patch:
@@ -1,15 +1,12 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import java.io.IOException;
-
 import org.commonmark.node.Node;
 import org.commonmark.parser.Parser;
 import org.commonmark.renderer.html.HtmlRenderer;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertOfficeController.java
Patch:
@@ -13,12 +13,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.GeneralFile;
 import stirling.software.SPDF.utils.ProcessExecutor;

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java
Patch:
@@ -1,6 +1,5 @@
 package stirling.software.SPDF.controller.api.converters;
 
-import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
@@ -10,12 +9,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.PDFFile;
 import stirling.software.SPDF.utils.ProcessExecutor;

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java
Patch:
@@ -10,11 +10,9 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.converters.UrlToPdfRequest;
 import stirling.software.SPDF.utils.GeneralUtils;

File: src/main/java/stirling/software/SPDF/controller/api/filters/FilterController.java
Patch:
@@ -9,13 +9,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
-import io.swagger.v3.oas.annotations.media.Schema;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.PDFComparisonAndCount;
 import stirling.software.SPDF.model.api.PDFWithPageNums;

File: src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java
Patch:
@@ -14,13 +14,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.misc.ExtractHeaderRequest;
 import stirling.software.SPDF.utils.WebResponseUtils;

File: src/main/java/stirling/software/SPDF/controller/api/misc/AutoSplitPdfController.java
Patch:
@@ -19,7 +19,6 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
@@ -32,7 +31,6 @@
 import com.google.zxing.common.HybridBinarizer;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.misc.AutoSplitPdfRequest;
 import stirling.software.SPDF.utils.WebResponseUtils;

File: src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java
Patch:
@@ -23,13 +23,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.misc.RemoveBlankPagesRequest;
 import stirling.software.SPDF.utils.PdfUtils;

File: src/main/java/stirling/software/SPDF/controller/api/misc/FakeScanControllerWIP.java
Patch:
@@ -33,13 +33,11 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Hidden;
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.PDFFile;
 import stirling.software.SPDF.utils.WebResponseUtils;

File: src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java
Patch:
@@ -14,13 +14,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.misc.MetadataRequest;
 import stirling.software.SPDF.utils.WebResponseUtils;

File: src/main/java/stirling/software/SPDF/controller/api/misc/OverlayImageController.java
Patch:
@@ -9,13 +9,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.misc.OverlayImageRequest;
 import stirling.software.SPDF.utils.PdfUtils;

File: src/main/java/stirling/software/SPDF/controller/api/misc/PageNumbersController.java
Patch:
@@ -16,13 +16,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
-import io.swagger.v3.oas.annotations.media.Schema;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.misc.AddPageNumbersRequest;
 import stirling.software.SPDF.utils.GeneralUtils;

File: src/main/java/stirling/software/SPDF/controller/api/misc/RepairController.java
Patch:
@@ -12,15 +12,12 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.PDFFile;
-import stirling.software.SPDF.model.api.misc.AddPageNumbersRequest;
 import stirling.software.SPDF.utils.ProcessExecutor;
 import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;
 import stirling.software.SPDF.utils.WebResponseUtils;

File: src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java
Patch:
@@ -12,7 +12,6 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 

File: src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineController.java
Patch:
@@ -40,8 +40,6 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.client.RestTemplate;
 import org.springframework.web.multipart.MultipartFile;

File: src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java
Patch:
@@ -63,7 +63,6 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
@@ -72,7 +71,6 @@
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.api.PDFFile;
 import stirling.software.SPDF.utils.WebResponseUtils;

File: src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java
Patch:
@@ -21,13 +21,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
-import io.swagger.v3.oas.annotations.media.Schema;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.model.PDFText;
 import stirling.software.SPDF.model.api.security.RedactPdfRequest;

File: src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java
Patch:
@@ -23,13 +23,10 @@
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import stirling.software.SPDF.model.api.security.SanitizePdfRequest;
 import stirling.software.SPDF.utils.WebResponseUtils;
 

File: src/main/java/stirling/software/SPDF/model/api/general/MergePdfsRequest.java
Patch:
@@ -18,5 +18,5 @@ public class MergePdfsRequest extends MultiplePDFFiles {
                 "byPDFTitle"
             }, 
             defaultValue = "orderProvided")
-    private String sortType;
+    private String sortType = "orderProvided";
 }

File: src/main/java/stirling/software/SPDF/model/api/misc/ProcessPdfWithOcrRequest.java
Patch:
@@ -30,7 +30,7 @@ public class ProcessPdfWithOcrRequest extends PDFFile {
     private String ocrType;
 
     @Schema(description = "Specify the OCR render type, either 'hocr' or 'sandwich'", allowableValues = {"hocr", "sandwich"}, defaultValue = "hocr")
-    private String ocrRenderType;
+    private String ocrRenderType = "hocr";
 
     @Schema(description = "Remove images from the output PDF if set to true")
     private Boolean removeImagesAfter;

File: src/main/java/stirling/software/SPDF/model/api/misc/RemoveBlankPagesRequest.java
Patch:
@@ -10,8 +10,8 @@
 public class RemoveBlankPagesRequest extends PDFFile {
 
     @Schema(description = "The threshold value to determine blank pages", example = "10", defaultValue = "10")
-    private int threshold;
+    private int threshold = 10;
 
     @Schema(description = "The percentage of white color on a page to consider it as blank", example = "99.9", defaultValue = "99.9")
-    private float whitePercent;
+    private float whitePercent = 99.9f;
 }

File: src/main/java/stirling/software/SPDF/model/api/security/AddPasswordRequest.java
Patch:
@@ -16,7 +16,7 @@ public class AddPasswordRequest extends PDFFile {
     private String password;
 
     @Schema(description = "The length of the encryption key", allowableValues = {"40", "128", "256"}, defaultValue = "256")
-    private int keyLength;
+    private int keyLength = 256;
 
     @Schema(description = "Whether the document assembly is allowed", example = "false")
     private boolean canAssembleDocument;

File: src/main/java/stirling/software/SPDF/model/api/security/RedactPdfRequest.java
Patch:
@@ -19,7 +19,7 @@ public class RedactPdfRequest extends PDFFile {
     private boolean wholeWordSearch;
 
     @Schema(description = "The color for redaction", defaultValue = "#000000")
-    private String redactColor;
+    private String redactColor = "#000000";
 
     @Schema(description = "Custom padding for redaction", type = "number")
     private float customPadding;

File: src/main/java/stirling/software/SPDF/SPdfApplication.java
Patch:
@@ -51,7 +51,7 @@ public static void main(String[] args) {
     	SpringApplication app = new SpringApplication(SPdfApplication.class);
     	app.addInitializers(new ConfigInitializer());
     	if (Files.exists(Paths.get("configs/settings.yml"))) {
-            app.setDefaultProperties(Collections.singletonMap("spring.config.location", "file:configs/settings.yml"));
+            app.setDefaultProperties(Collections.singletonMap("spring.config.additional-location", "file:configs/settings.yml"));
         } else {
             System.out.println("External configuration file 'configs/settings.yml' does not exist. Using default configuration and environment configuration instead.");
         }

File: src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java
Patch:
@@ -58,14 +58,13 @@ public String login(HttpServletRequest request, Model model, Authentication auth
 	@Autowired
 	private UserRepository userRepository;  // Assuming you have a repository for user operations
 
-	@Autowired
-	private UserService userService;  // Assuming you have a repository for user operations
 
 	@PreAuthorize("hasRole('ROLE_ADMIN')")
 	@GetMapping("/addUsers")
-	public String showAddUserForm(Model model) {
+	public String showAddUserForm(Model model,  Authentication authentication) {
 	    List<User> allUsers = userRepository.findAll();
 	    model.addAttribute("users", allUsers);
+	    model.addAttribute("currentUsername", authentication.getName());
 	    return "addUsers";
 	}
 

File: src/main/java/stirling/software/SPDF/config/AppConfig.java
Patch:
@@ -36,7 +36,7 @@ public String appVersion() {
 
     @Bean(name = "homeText")
     public String homeText() {
-        return applicationProperties.getUi().getHomeDescription();
+    	return (applicationProperties.getUi().getHomeDescription() != null) ? applicationProperties.getUi().getHomeDescription() : "null";
     }
 
 

File: src/main/java/stirling/software/SPDF/controller/api/other/PageNumbersController.java
Patch:
@@ -116,7 +116,7 @@ public ResponseEntity<byte[]> addPageNumbers(
             Rectangle pageSize = page.getPageSize();
             PdfCanvas pdfCanvas = new PdfCanvas(page.newContentStreamAfter(), page.getResources(), pdfDoc);
 
-            String text = customText != null ? customText.replace("{n}", String.valueOf(pageNumber)).replace("{total}", String.valueOf(pdfDoc.getNumberOfPages())) : String.valueOf(pageNumber);
+            String text = customText != null ? customText.replace("{n}", String.valueOf(pageNumber)).replace("{total}", String.valueOf(pdfDoc.getNumberOfPages())).replace("{filename}", file.getOriginalFilename().replaceFirst("[.][^.]+$", "")) : String.valueOf(pageNumber);
 
             PdfFont font = PdfFontFactory.createFont(StandardFonts.HELVETICA);
             float textWidth = font.getWidth(text, fontSize);

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java
Patch:
@@ -43,7 +43,7 @@ public ResponseEntity<Resource> convertToImage(
             @Parameter(description = "Choose between a single image containing all pages or separate images for each page", schema = @Schema(allowableValues = {"single", "multiple"}))
                     String singleOrMultiple,
             @RequestParam("colorType")
-            @Parameter(description = "The color type of the output image(s)", schema = @Schema(allowableValues = {"rgb", "greyscale", "blackwhite"}))
+            @Parameter(description = "The color type of the output image(s)", schema = @Schema(allowableValues = {"color", "greyscale", "blackwhite"}))
                     String colorType,
             @RequestParam("dpi")
             @Parameter(description = "The DPI (dots per inch) for the output image(s)")
@@ -94,7 +94,7 @@ public ResponseEntity<byte[]> convertToPdf(
             @Parameter(description = "Whether to stretch the images to fit the PDF page or maintain the aspect ratio", example = "false")
                     boolean stretchToFit,
             @RequestParam("colorType")
-            @Parameter(description = "The color type of the output image(s)", schema = @Schema(allowableValues = {"rgb", "greyscale", "blackwhite"}))
+            @Parameter(description = "The color type of the output image(s)", schema = @Schema(allowableValues = {"color", "greyscale", "blackwhite"}))
                     String colorType,
             @RequestParam(defaultValue = "false", name = "autoRotate")
             @Parameter(description = "Whether to automatically rotate the images to better fit the PDF page", example = "true")

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java
Patch:
@@ -16,6 +16,7 @@
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.ProcessExecutor;
+import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
@@ -49,7 +50,7 @@ public ResponseEntity<byte[]> pdfToPdfA(
         command.add(tempInputFile.toString());
         command.add(tempOutputFile.toString());
 
-        int returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.OCR_MY_PDF).runCommandWithOutputHandling(command);
+        ProcessExecutorResult returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.OCR_MY_PDF).runCommandWithOutputHandling(command);
 
         // Read the optimized PDF file
         byte[] pdfBytes = Files.readAllBytes(tempOutputFile);

File: src/main/java/stirling/software/SPDF/controller/api/other/BlankPageController.java
Patch:
@@ -31,6 +31,7 @@
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.PdfUtils;
 import stirling.software.SPDF.utils.ProcessExecutor;
+import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
@@ -86,10 +87,10 @@ public ResponseEntity<byte[]> removeBlankPages(
                         List<String> command = new ArrayList<>(Arrays.asList("python3", System.getProperty("user.dir") + "/scripts/detect-blank-pages.py", tempFile.toString() ,"--threshold", String.valueOf(threshold), "--white_percent", String.valueOf(whitePercent)));
     
                         // Run CLI command
-                        int returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV).runCommandWithOutputHandling(command);
+                        ProcessExecutorResult returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV).runCommandWithOutputHandling(command);
     
                         // does contain data
-                        if (returnCode == 0) {
+                        if (returnCode.getRc() == 0) {
                             System.out.println("page " + pageIndex + " has image which is not blank");
                             pagesToKeepIndex.add(pageIndex);
                         } else {

File: src/main/java/stirling/software/SPDF/controller/api/other/CompressController.java
Patch:
@@ -34,6 +34,7 @@
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.GeneralUtils;
 import stirling.software.SPDF.utils.ProcessExecutor;
+import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
@@ -116,7 +117,7 @@ public ResponseEntity<byte[]> optimizePdf(
             command.add("-sOutputFile=" + tempOutputFile.toString());
             command.add(tempInputFile.toString());
 
-            int returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.GHOSTSCRIPT).runCommandWithOutputHandling(command);
+            ProcessExecutorResult returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.GHOSTSCRIPT).runCommandWithOutputHandling(command);
 
             // Check if file size is within expected size or not auto mode so instantly finish
             long outputFileSize = Files.size(tempOutputFile);

File: src/main/java/stirling/software/SPDF/controller/api/other/ExtractImageScansController.java
Patch:
@@ -33,6 +33,7 @@
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.ProcessExecutor;
+import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
@@ -117,7 +118,7 @@ public ResponseEntity<byte[]> extractImageScans(
 
 
             // Run CLI command
-            int returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV).runCommandWithOutputHandling(command);
+            ProcessExecutorResult returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV).runCommandWithOutputHandling(command);
 
             // Read the output photos in temp directory
             List<Path> tempOutputFiles = Files.list(tempDir).sorted().collect(Collectors.toList());

File: src/main/java/stirling/software/SPDF/controller/api/other/RepairController.java
Patch:
@@ -18,6 +18,7 @@
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.ProcessExecutor;
+import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
@@ -51,7 +52,7 @@ public ResponseEntity<byte[]> repairPdf(
         command.add(tempInputFile.toString());
 
 
-        int returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.GHOSTSCRIPT).runCommandWithOutputHandling(command);
+        ProcessExecutorResult returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.GHOSTSCRIPT).runCommandWithOutputHandling(command);
 
         // Read the optimized PDF file
         byte[] pdfBytes = Files.readAllBytes(tempOutputFile);

File: src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java
Patch:
@@ -10,6 +10,8 @@
 @Controller
 @Tag(name = "Security", description = "Security APIs")
 public class SecurityWebController {
+	
+	
     @GetMapping("/add-password")
     @Hidden
     public String addPasswordForm(Model model) {

File: src/main/java/stirling/software/SPDF/utils/PDFToFile.java
Patch:
@@ -20,6 +20,8 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.multipart.MultipartFile;
 
+import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;
+
 public class PDFToFile {
     public ResponseEntity<byte[]> processPdfToOfficeFormat(MultipartFile inputFile, String outputFormat, String libreOfficeFilter) throws IOException, InterruptedException {
 
@@ -53,7 +55,7 @@ public ResponseEntity<byte[]> processPdfToOfficeFormat(MultipartFile inputFile,
             // Run the LibreOffice command
             List<String> command = new ArrayList<>(
                     Arrays.asList("soffice", "--infilter=" + libreOfficeFilter, "--convert-to", outputFormat, "--outdir", tempOutputDir.toString(), tempInputFile.toString()));
-            int returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.LIBRE_OFFICE).runCommandWithOutputHandling(command);
+            ProcessExecutorResult returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.LIBRE_OFFICE).runCommandWithOutputHandling(command);
 
             // Get output files
             List<File> outputFiles = Arrays.asList(tempOutputDir.toFile().listFiles());

File: src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java
Patch:
@@ -44,8 +44,8 @@ public class WatermarkController {
 	@Operation(summary = "Add watermark to a PDF file", description = "This endpoint adds a watermark to a given PDF file. Users can specify the watermark type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO")
 	public ResponseEntity<byte[]> addWatermark(
 			@RequestPart(required = true, value = "fileInput") @Parameter(description = "The input PDF file to add a watermark") MultipartFile pdfFile,
-			@RequestPart(required = true) @Parameter(description = "The watermark type (text or image)") String watermarkType,
-			@RequestPart(required = false) @Parameter(description = "The watermark text") String watermarkText,
+			@RequestParam(required = true) @Parameter(description = "The watermark type (text or image)") String watermarkType,
+			@RequestParam(required = false) @Parameter(description = "The watermark text") String watermarkText,
 			@RequestPart(required = false) @Parameter(description = "The watermark image") MultipartFile watermarkImage,
 			
 			@RequestParam(defaultValue = "roman", name = "alphabet") @Parameter(description = "The selected alphabet", 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java
Patch:
@@ -43,7 +43,7 @@ public ResponseEntity<Resource> convertToImage(
             @Parameter(description = "Choose between a single image containing all pages or separate images for each page", schema = @Schema(allowableValues = {"single", "multiple"}))
                     String singleOrMultiple,
             @RequestParam("colorType")
-            @Parameter(description = "The color type of the output image(s)", schema = @Schema(allowableValues = {"rgb", "greyscale", "blackwhite"}))
+            @Parameter(description = "The color type of the output image(s)", schema = @Schema(allowableValues = {"color", "greyscale", "blackwhite"}))
                     String colorType,
             @RequestParam("dpi")
             @Parameter(description = "The DPI (dots per inch) for the output image(s)")
@@ -94,7 +94,7 @@ public ResponseEntity<byte[]> convertToPdf(
             @Parameter(description = "Whether to stretch the images to fit the PDF page or maintain the aspect ratio", example = "false")
                     boolean stretchToFit,
             @RequestParam("colorType")
-            @Parameter(description = "The color type of the output image(s)", schema = @Schema(allowableValues = {"rgb", "greyscale", "blackwhite"}))
+            @Parameter(description = "The color type of the output image(s)", schema = @Schema(allowableValues = {"color", "greyscale", "blackwhite"}))
                     String colorType,
             @RequestParam(defaultValue = "false", name = "autoRotate")
             @Parameter(description = "Whether to automatically rotate the images to better fit the PDF page", example = "true")

File: src/main/java/stirling/software/SPDF/controller/api/CropController.java
Patch:
@@ -90,7 +90,7 @@ public class CropController {
 	@PostMapping(value = "/crop", consumes = "multipart/form-data")
 	@Operation(summary = "Crops a PDF document", description = "This operation takes an input PDF file and crops it according to the given coordinates. Input:PDF Output:PDF Type:SISO")
 	public ResponseEntity<byte[]> cropPdf(
-	        @Parameter(description = "The input PDF file", required = true) @RequestParam("file") MultipartFile file,
+	        @Parameter(description = "The input PDF file", required = true) @RequestParam("fileInput") MultipartFile file,
 	        @Parameter(description = "The x-coordinate of the top-left corner of the crop area", required = true, schema = @Schema(type = "number")) @RequestParam("x") float x,
 	        @Parameter(description = "The y-coordinate of the top-left corner of the crop area", required = true, schema = @Schema(type = "number")) @RequestParam("y") float y,
 	        @Parameter(description = "The width of the crop area", required = true, schema = @Schema(type = "number")) @RequestParam("width") float width,

File: src/main/java/stirling/software/SPDF/SPdfApplication.java
Patch:
@@ -15,7 +15,7 @@
 import stirling.software.SPDF.utils.GeneralUtils;
 
 @SpringBootApplication
-@EnableScheduling
+//@EnableScheduling
 public class SPdfApplication {
 	
 	@Autowired

File: src/main/java/stirling/software/SPDF/config/MetricsFilter.java
Patch:
@@ -27,7 +27,8 @@ public MetricsFilter(MeterRegistry meterRegistry) {
     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
             throws ServletException, IOException {
         String uri = request.getRequestURI();
-
+        
+        //System.out.println("uri="+uri + ", method=" + request.getMethod() );
         // Ignore static resources
         if (!(uri.startsWith("/js") || uri.startsWith("/images") || uri.endsWith(".ico") || uri.endsWith(".css") || uri.endsWith(".svg")|| uri.endsWith(".js") || uri.contains("swagger") || uri.startsWith("/api"))) {
             Counter counter = Counter.builder("http.requests")
@@ -36,6 +37,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse
                     .register(meterRegistry);
 
             counter.increment();
+            //System.out.println("Counted");
         }
 
         filterChain.doFilter(request, response);

File: src/main/java/stirling/software/SPDF/controller/api/MergeController.java
Patch:
@@ -17,9 +17,11 @@
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
+@Tag(name = "General", description = "General APIs")
 public class MergeController {
 
     private static final Logger logger = LoggerFactory.getLogger(MergeController.class);
@@ -47,7 +49,7 @@ private PDDocument mergeDocuments(List<PDDocument> documents) throws IOException
     @PostMapping(consumes = "multipart/form-data", value = "/merge-pdfs")
     @Operation(
         summary = "Merge multiple PDF files into one",
-        description = "This endpoint merges multiple PDF files into a single PDF file. The merged file will contain all pages from the input files in the order they were provided."
+        description = "This endpoint merges multiple PDF files into a single PDF file. The merged file will contain all pages from the input files in the order they were provided. Input:PDF Output:PDF Type:MISO"
     )
     public ResponseEntity<byte[]> mergePdfs(
         @RequestPart(required = true, value = "fileInput")

File: src/main/java/stirling/software/SPDF/controller/api/MultiPageLayoutController.java
Patch:
@@ -24,15 +24,17 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Schema;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
+@Tag(name = "General", description = "General APIs")
 public class MultiPageLayoutController {
 
 	private static final Logger logger = LoggerFactory.getLogger(MultiPageLayoutController.class);
 
 	@PostMapping(value = "/multi-page-layout", consumes = "multipart/form-data")
-	@Operation(summary = "Merge multiple pages of a PDF document into a single page", description = "This operation takes an input PDF file and the number of pages to merge into a single sheet in the output PDF file.")
+	@Operation(summary = "Merge multiple pages of a PDF document into a single page", description = "This operation takes an input PDF file and the number of pages to merge into a single sheet in the output PDF file. Input:PDF Output:PDF Type:SISO")
 	public ResponseEntity<byte[]> mergeMultiplePagesIntoOne(
 			@Parameter(description = "The input PDF file", required = true) @RequestParam("fileInput") MultipartFile file,
 			@Parameter(description = "The number of pages to fit onto a single sheet in the output PDF. Acceptable values are 2, 3, 4, 9, 16.", required = true, schema = @Schema(type = "integer", allowableValues = {

File: src/main/java/stirling/software/SPDF/controller/api/RotationController.java
Patch:
@@ -16,17 +16,19 @@
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
+@Tag(name = "General", description = "General APIs")
 public class RotationController {
 
     private static final Logger logger = LoggerFactory.getLogger(RotationController.class);
 
     @PostMapping(consumes = "multipart/form-data", value = "/rotate-pdf")
     @Operation(
         summary = "Rotate a PDF file",
-        description = "This endpoint rotates a given PDF file by a specified angle. The angle must be a multiple of 90."
+        description = "This endpoint rotates a given PDF file by a specified angle. The angle must be a multiple of 90. Input:PDF Output:PDF Type:SISO"
     )
     public ResponseEntity<byte[]> rotatePDF(
         @RequestPart(required = true, value = "fileInput")

File: src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java
Patch:
@@ -39,15 +39,17 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Schema;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
+@Tag(name = "General", description = "General APIs")
 public class ScalePagesController {
 
 	private static final Logger logger = LoggerFactory.getLogger(ScalePagesController.class);
 
 	@PostMapping(value = "/scale-pages", consumes = "multipart/form-data")
-	@Operation(summary = "Change the size of a PDF page/document", description = "This operation takes an input PDF file and the size to scale the pages to in the output PDF file.")
+	@Operation(summary = "Change the size of a PDF page/document", description = "This operation takes an input PDF file and the size to scale the pages to in the output PDF file. Input:PDF Output:PDF Type:SISO")
 	public ResponseEntity<byte[]> scalePages(
 			@Parameter(description = "The input PDF file", required = true) @RequestParam("fileInput") MultipartFile file,
 			@Parameter(description = "The scale of pages in the output PDF. Acceptable values are A0-A10, B0-B9, LETTER, TABLOID, LEDGER, LEGAL, EXECUTIVE.", required = true, schema = @Schema(type = "String", allowableValues = {

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java
Patch:
@@ -14,16 +14,18 @@
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.ProcessExecutor;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
+@Tag(name = "Convert", description = "Convert APIs")
 public class ConvertPDFToPDFA {
 
 	@PostMapping(consumes = "multipart/form-data", value = "/pdf-to-pdfa")
 	@Operation(
 	    summary = "Convert a PDF to a PDF/A",
-	    description = "This endpoint converts a PDF file to a PDF/A file. PDF/A is a format designed for long-term archiving of digital documents."
+	    description = "This endpoint converts a PDF file to a PDF/A file. PDF/A is a format designed for long-term archiving of digital documents. Input:PDF Output:PDF Type:SISO"
 	)
 	public ResponseEntity<byte[]> pdfToPdfA(
 	    @RequestPart(required = true, value = "fileInput")

File: src/main/java/stirling/software/SPDF/controller/api/other/CompressController.java
Patch:
@@ -31,17 +31,19 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Schema;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.GeneralUtils;
 import stirling.software.SPDF.utils.ProcessExecutor;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
+@Tag(name = "Other", description = "Other APIs")
 public class CompressController {
 
     private static final Logger logger = LoggerFactory.getLogger(CompressController.class);
 
     @PostMapping(consumes = "multipart/form-data", value = "/compress-pdf")
-    @Operation(summary = "Optimize PDF file", description = "This endpoint accepts a PDF file and optimizes it based on the provided parameters.")
+    @Operation(summary = "Optimize PDF file", description = "This endpoint accepts a PDF file and optimizes it based on the provided parameters. Input:PDF Output:PDF Type:SISO")
     public ResponseEntity<byte[]> optimizePdf(
             @RequestPart(value = "fileInput") @Parameter(description = "The input PDF file to be optimized.", required = true) MultipartFile inputFile,
             @RequestParam(required = false, value = "optimizeLevel") @Parameter(description = "The level of optimization to apply to the PDF file. Higher values indicate greater compression but may reduce quality.", schema = @Schema(allowableValues = {

File: src/main/java/stirling/software/SPDF/controller/api/other/ExtractImageScansController.java
Patch:
@@ -31,17 +31,19 @@
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.ProcessExecutor;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
+@Tag(name = "Other", description = "Other APIs")
 public class ExtractImageScansController {
 
     private static final Logger logger = LoggerFactory.getLogger(ExtractImageScansController.class);
 
     @PostMapping(consumes = "multipart/form-data", value = "/extract-image-scans")
     @Operation(summary = "Extract image scans from an input file",
-            description = "This endpoint extracts image scans from a given file based on certain parameters. Users can specify angle threshold, tolerance, minimum area, minimum contour area, and border size.")
+            description = "This endpoint extracts image scans from a given file based on certain parameters. Users can specify angle threshold, tolerance, minimum area, minimum contour area, and border size. Input:PDF Output:IMAGE/ZIP Type:SIMO")
     public ResponseEntity<byte[]> extractImageScans(
             @RequestPart(required = true, value = "fileInput")
             @Parameter(description = "The input file containing image scans")

File: src/main/java/stirling/software/SPDF/controller/api/other/ExtractImagesController.java
Patch:
@@ -29,15 +29,17 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Schema;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.WebResponseUtils;
 @RestController
+@Tag(name = "Other", description = "Other APIs")
 public class ExtractImagesController {
 
     private static final Logger logger = LoggerFactory.getLogger(ExtractImagesController.class);
 
     @PostMapping(consumes = "multipart/form-data", value = "/extract-images")
     @Operation(summary = "Extract images from a PDF file",
-            description = "This endpoint extracts images from a given PDF file and returns them in a zip file. Users can specify the output image format.")
+            description = "This endpoint extracts images from a given PDF file and returns them in a zip file. Users can specify the output image format. Input:PDF Output:IMAGE/ZIP Type:SIMO")
     public ResponseEntity<byte[]> extractImages(
             @RequestPart(required = true, value = "fileInput")
             @Parameter(description = "The input PDF file containing images")

File: src/main/java/stirling/software/SPDF/controller/api/other/OCRController.java
Patch:
@@ -27,10 +27,12 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Schema;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.ProcessExecutor;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
+@Tag(name = "Other", description = "Other APIs")
 public class OCRController {
 
     private static final Logger logger = LoggerFactory.getLogger(OCRController.class);
@@ -47,7 +49,7 @@ public List<String> getAvailableTesseractLanguages() {
 
     @PostMapping(consumes = "multipart/form-data", value = "/ocr-pdf")
     @Operation(summary = "Process a PDF file with OCR",
-            description = "This endpoint processes a PDF file using OCR (Optical Character Recognition). Users can specify languages, sidecar, deskew, clean, cleanFinal, ocrType, ocrRenderType, and removeImagesAfter options.")
+            description = "This endpoint processes a PDF file using OCR (Optical Character Recognition). Users can specify languages, sidecar, deskew, clean, cleanFinal, ocrType, ocrRenderType, and removeImagesAfter options. Input:PDF Output:PDF Type:SI-Conditional")
     public ResponseEntity<byte[]> processPdfWithOCR(
             @RequestPart(required = true, value = "fileInput")
             @Parameter(description = "The input PDF file to be processed with OCR")

File: src/main/java/stirling/software/SPDF/controller/api/other/OverlayImageController.java
Patch:
@@ -14,18 +14,20 @@
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.PdfUtils;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
+@Tag(name = "Other", description = "Other APIs")
 public class OverlayImageController {
 
     private static final Logger logger = LoggerFactory.getLogger(OverlayImageController.class);
 
     @PostMapping(consumes = "multipart/form-data", value = "/add-image")
     @Operation(
         summary = "Overlay image onto a PDF file",
-        description = "This endpoint overlays an image onto a PDF file at the specified coordinates. The image can be overlaid on every page of the PDF if specified."
+        description = "This endpoint overlays an image onto a PDF file at the specified coordinates. The image can be overlaid on every page of the PDF if specified.  Input:PDF/IMAGE Output:PDF Type:MF-SISO"
     )
     public ResponseEntity<byte[]> overlayImage(
         @RequestPart(required = true, value = "fileInput")

File: src/main/java/stirling/software/SPDF/controller/api/other/RepairController.java
Patch:
@@ -16,18 +16,20 @@
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.ProcessExecutor;
 import stirling.software.SPDF.utils.WebResponseUtils;
 
 @RestController
+@Tag(name = "Other", description = "Other APIs")
 public class RepairController {
 
     private static final Logger logger = LoggerFactory.getLogger(RepairController.class);
 
     @PostMapping(consumes = "multipart/form-data", value = "/repair")
     @Operation(
         summary = "Repair a PDF file",
-        description = "This endpoint repairs a given PDF file by running Ghostscript command. The PDF is first saved to a temporary location, repaired, read back, and then returned as a response."
+        description = "This endpoint repairs a given PDF file by running Ghostscript command. The PDF is first saved to a temporary location, repaired, read back, and then returned as a response. Input:PDF Output:PDF Type:SISO"
     )
     public ResponseEntity<byte[]> repairPdf(
         @RequestPart(required = true, value = "fileInput")

File: src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java
Patch:
@@ -51,8 +51,10 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Schema;
+import io.swagger.v3.oas.annotations.tags.Tag;
 import stirling.software.SPDF.utils.WebResponseUtils;
 @RestController
+@Tag(name = "Security", description = "Security APIs")
 public class CertSignController {
 
     private static final Logger logger = LoggerFactory.getLogger(CertSignController.class);
@@ -63,7 +65,7 @@ public class CertSignController {
 
     @PostMapping(consumes = "multipart/form-data", value = "/cert-sign")
     @Operation(summary = "Sign PDF with a Digital Certificate",
-        description = "This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file.")
+        description = "This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:MF-SISO")
     public ResponseEntity<byte[]> signPDF(
         @RequestPart(required = true, value = "fileInput")
         @Parameter(description = "The input PDF file to be signed")

File: src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java
Patch:
@@ -6,8 +6,10 @@
 import org.springframework.web.servlet.ModelAndView;
 
 import io.swagger.v3.oas.annotations.Hidden;
+import io.swagger.v3.oas.annotations.tags.Tag;
 
 @Controller
+@Tag(name = "Convert", description = "Convert APIs")
 public class ConverterWebController {
 
     @GetMapping("/img-to-pdf")

File: src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java
Patch:
@@ -12,8 +12,10 @@
 import org.springframework.web.servlet.ModelAndView;
 
 import io.swagger.v3.oas.annotations.Hidden;
+import io.swagger.v3.oas.annotations.tags.Tag;
 
 @Controller
+@Tag(name = "Other", description = "Other APIs")
 public class OtherWebController {
     @GetMapping("/compress-pdf")
     @Hidden

File: src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java
Patch:
@@ -5,8 +5,10 @@
 import org.springframework.web.bind.annotation.GetMapping;
 
 import io.swagger.v3.oas.annotations.Hidden;
+import io.swagger.v3.oas.annotations.tags.Tag;
 
 @Controller
+@Tag(name = "Security", description = "Security APIs")
 public class SecurityWebController {
     @GetMapping("/add-password")
     @Hidden

File: src/main/java/stirling/software/SPDF/config/MetricsFilter.java
Patch:
@@ -27,7 +27,8 @@ public MetricsFilter(MeterRegistry meterRegistry) {
     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
             throws ServletException, IOException {
         String uri = request.getRequestURI();
-
+        
+        //System.out.println("uri="+uri + ", method=" + request.getMethod() );
         // Ignore static resources
         if (!(uri.startsWith("/js") || uri.startsWith("/images") || uri.endsWith(".ico") || uri.endsWith(".css") || uri.endsWith(".svg")|| uri.endsWith(".js") || uri.contains("swagger") || uri.startsWith("/api"))) {
             Counter counter = Counter.builder("http.requests")
@@ -36,6 +37,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse
                     .register(meterRegistry);
 
             counter.increment();
+            //System.out.println("Counted");
         }
 
         filterChain.doFilter(request, response);

File: src/main/java/stirling/software/SPDF/controller/api/filters/FilterController.java
Patch:
@@ -37,12 +37,12 @@ public Boolean containsText(
 
 	@PostMapping(consumes = "multipart/form-data", value = "/contains-image")
 	@Operation(summary = "Checks if a PDF contains an image", description = "Input:PDF Output:Boolean Type:SISO")
-	public ResponseEntity<byte[]> containsImage(
+	public Boolean containsImage(
 			@RequestPart(required = true, value = "fileInput") @Parameter(description = "The input PDF file to be converted to a PDF/A file", required = true) MultipartFile inputFile,
 			@Parameter(description = "The page number to check for image on accepts 'All', ranges like '1-4'", required = false) String pageNumber)
 			throws IOException, InterruptedException {
 		PDDocument pdfDocument = PDDocument.load(inputFile.getInputStream());
-		return PdfUtils.hasImagesOnPage(null)
+		return PdfUtils.hasImagesOnPage(null);
 	}
 
 	@PostMapping(consumes = "multipart/form-data", value = "/page-count")

File: src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java
Patch:
@@ -74,7 +74,9 @@ public List<String> getAvailableTesseractLanguages() {
     @Hidden
     public ModelAndView ocrPdfPage() {
         ModelAndView modelAndView = new ModelAndView("other/ocr-pdf");
-        modelAndView.addObject("languages", getAvailableTesseractLanguages());
+        List<String> languages = getAvailableTesseractLanguages();
+        Collections.sort(languages);
+        modelAndView.addObject("languages", languages);
         modelAndView.addObject("currentPage", "ocr-pdf");
         return modelAndView;
     }

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java
Patch:
@@ -99,7 +99,7 @@ public ResponseEntity<byte[]> convertToPdf(
                     boolean autoRotate) throws IOException {
         // Convert the file to PDF and get the resulting bytes
         byte[] bytes = PdfUtils.imageToPdf(file, stretchToFit, autoRotate, colorType);
-        return WebResponseUtils.bytesToWebResponse(bytes, file[0].getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_coverted.pdf");
+        return WebResponseUtils.bytesToWebResponse(bytes, file[0].getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_converted.pdf");
     }
 
     private String getMediaType(String imageFormat) {

File: src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java
Patch:
@@ -1,9 +1,6 @@
 package stirling.software.SPDF.controller.api.security;
 
 import java.io.ByteArrayInputStream;
-import io.swagger.v3.oas.annotations.media.Schema;
-import stirling.software.SPDF.utils.WebResponseUtils;
-
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -53,6 +50,8 @@
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.media.Schema;
+import stirling.software.SPDF.utils.WebResponseUtils;
 @RestController
 public class CertSignController {
 

File: src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java
Patch:
@@ -1,9 +1,6 @@
 package stirling.software.SPDF.controller.api.security;
 
 import java.io.ByteArrayInputStream;
-import io.swagger.v3.oas.annotations.media.Schema;
-import stirling.software.SPDF.utils.WebResponseUtils;
-
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -53,6 +50,8 @@
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.media.Schema;
+import stirling.software.SPDF.utils.WebResponseUtils;
 @RestController
 public class CertSignController {
 

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java
Patch:
@@ -99,7 +99,7 @@ public ResponseEntity<byte[]> convertToPdf(
                     boolean autoRotate) throws IOException {
         // Convert the file to PDF and get the resulting bytes
         byte[] bytes = PdfUtils.imageToPdf(file, stretchToFit, autoRotate, colorType);
-        return WebResponseUtils.bytesToWebResponse(bytes, file[0].getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_coverted.pdf");
+        return WebResponseUtils.bytesToWebResponse(bytes, file[0].getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_converted.pdf");
     }
 
     private String getMediaType(String imageFormat) {

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java
Patch:
@@ -56,8 +56,9 @@ public ResponseEntity<Resource> convertToImage(
         // returns bytes for image
         boolean singleImage = singleOrMultiple.equals("single");
         byte[] result = null;
+        String filename = file.getOriginalFilename().replaceFirst("[.][^.]+$", "");
         try {
-            result = PdfUtils.convertFromPdf(pdfBytes, imageFormat.toUpperCase(), colorTypeResult, singleImage, Integer.valueOf(dpi));
+            result = PdfUtils.convertFromPdf(pdfBytes, imageFormat.toUpperCase(), colorTypeResult, singleImage, Integer.valueOf(dpi), filename);
         } catch (IOException e) {
             // TODO Auto-generated catch block
             e.printStackTrace();
@@ -74,7 +75,7 @@ public ResponseEntity<Resource> convertToImage(
             ByteArrayResource resource = new ByteArrayResource(result);
             // return the Resource in the response
             return ResponseEntity.ok()
-                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + file.getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_convertedToImages.zip")
+                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + filename + "_convertedToImages.zip")
                     .contentType(MediaType.APPLICATION_OCTET_STREAM).contentLength(resource.contentLength()).body(resource);
         }
     }

File: src/main/java/stirling/software/SPDF/controller/api/other/ExtractImagesController.java
Patch:
@@ -59,7 +59,7 @@ public ResponseEntity<byte[]> extractImages(
         zos.setLevel(Deflater.BEST_COMPRESSION);
 
         int imageIndex = 1;
-
+        String filename = file.getOriginalFilename().replaceFirst("[.][^.]+$", "");
         int pageNum = 1;
         // Iterate over each page
         for (PDPage page : document.getPages()) {
@@ -81,7 +81,7 @@ public ResponseEntity<byte[]> extractImages(
                     }
 
                     // Write image to zip file
-                    String imageName = "Image " + imageIndex + " (Page " + pageNum + ")." + format;
+                    String imageName = filename + "_" + imageIndex + " (Page " + pageNum + ")." + format;
                     ZipEntry zipEntry = new ZipEntry(imageName);
                     zos.putNextEntry(zipEntry);
 
@@ -106,7 +106,7 @@ public ResponseEntity<byte[]> extractImages(
         // Create ByteArrayResource from byte array
         byte[] zipContents = baos.toByteArray();
 
-        return PdfUtils.boasToWebResponse(baos, file.getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_extracted-images.zip", MediaType.APPLICATION_OCTET_STREAM);
+        return PdfUtils.boasToWebResponse(baos, filename + "_extracted-images.zip", MediaType.APPLICATION_OCTET_STREAM);
     }
 
 }

File: src/main/java/stirling/software/SPDF/utils/PdfUtils.java
Patch:
@@ -69,7 +69,7 @@ public static ResponseEntity<byte[]> bytesToWebResponse(byte[] bytes, String doc
         return bytesToWebResponse(bytes, docName, MediaType.APPLICATION_PDF);
     }
 
-    public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageType colorType, boolean singleImage, int DPI) throws IOException, Exception {
+    public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageType colorType, boolean singleImage, int DPI, String filename) throws IOException, Exception {
         try (PDDocument document = PDDocument.load(new ByteArrayInputStream(inputStream))) {
             PDFRenderer pdfRenderer = new PDFRenderer(document);
             int pageCount = document.getNumberOfPages();
@@ -107,7 +107,7 @@ public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageT
                             ImageIO.write(image, imageType, baosImage);
 
                             // Add the image to the zip file
-                            zos.putNextEntry(new ZipEntry(String.format("page_%d.%s", i + 1, imageType.toLowerCase())));
+                            zos.putNextEntry(new ZipEntry(String.format(filename + "_%d.%s", i + 1, imageType.toLowerCase())));
                             zos.write(baosImage.toByteArray());
                         }
                     }

File: src/main/java/stirling/software/SPDF/controller/api/other/BlankPageController.java
Patch:
@@ -81,7 +81,7 @@ public ResponseEntity<byte[]> removeBlankPages(
                         BufferedImage image = pdfRenderer.renderImageWithDPI(pageIndex, 300);
                         ImageIO.write(image, "png", tempFile.toFile());
     
-                        List<String> command = new ArrayList<>(Arrays.asList("python3", System.getProperty("user.dir") + "scripts/detect-blank-pages.py", tempFile.toString() ,"--threshold", String.valueOf(threshold), "--white_percent", String.valueOf(whitePercent)));
+                        List<String> command = new ArrayList<>(Arrays.asList("python3", System.getProperty("user.dir") + "/scripts/detect-blank-pages.py", tempFile.toString() ,"--threshold", String.valueOf(threshold), "--white_percent", String.valueOf(whitePercent)));
     
                         // Run CLI command
                         int returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV).runCommandWithOutputHandling(command);

File: src/main/java/stirling/software/SPDF/controller/api/other/OCRController.java
Patch:
@@ -189,7 +189,7 @@ public ResponseEntity<byte[]> processPdfWithOCR(
             Files.delete(sidecarTextPath);
 
             // Return the zip file containing both the PDF and the text file
-            return PdfUtils.bytesToWebResponse(pdfBytes, outputZipFilename, MediaType.APPLICATION_OCTET_STREAM);
+            return PdfUtils.bytesToWebResponse(zipBytes, outputZipFilename, MediaType.APPLICATION_OCTET_STREAM);
         } else {
             // Return the OCR processed PDF as a response
             Files.delete(tempOutputFile);

File: src/main/java/stirling/software/SPDF/controller/api/other/BlankPageController.java
Patch:
@@ -81,7 +81,7 @@ public ResponseEntity<byte[]> removeBlankPages(
                         BufferedImage image = pdfRenderer.renderImageWithDPI(pageIndex, 300);
                         ImageIO.write(image, "png", tempFile.toFile());
     
-                        List<String> command = new ArrayList<>(Arrays.asList("python3", System.getProperty("user.dir") + "scripts/detect-blank-pages.py", tempFile.toString() ,"--threshold", String.valueOf(threshold), "--white_percent", String.valueOf(whitePercent)));
+                        List<String> command = new ArrayList<>(Arrays.asList("python3", System.getProperty("user.dir") + "/scripts/detect-blank-pages.py", tempFile.toString() ,"--threshold", String.valueOf(threshold), "--white_percent", String.valueOf(whitePercent)));
     
                         // Run CLI command
                         int returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV).runCommandWithOutputHandling(command);

File: src/main/java/stirling/software/SPDF/controller/api/other/OCRController.java
Patch:
@@ -189,7 +189,7 @@ public ResponseEntity<byte[]> processPdfWithOCR(
             Files.delete(sidecarTextPath);
 
             // Return the zip file containing both the PDF and the text file
-            return PdfUtils.bytesToWebResponse(pdfBytes, outputZipFilename, MediaType.APPLICATION_OCTET_STREAM);
+            return PdfUtils.bytesToWebResponse(zipBytes, outputZipFilename, MediaType.APPLICATION_OCTET_STREAM);
         } else {
             // Return the OCR processed PDF as a response
             Files.delete(tempOutputFile);

File: src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java
Patch:
@@ -80,9 +80,9 @@ public String signForm(Model model) {
     @ResponseBody
     @Hidden
     public String getRobotsTxt() {
-        String allowGoogleVisibility = System.getProperty("ALLOW_GOOGLE_VISABILITY");
+        String allowGoogleVisibility = System.getProperty("ALLOW_GOOGLE_VISIBILITY");
         if (allowGoogleVisibility == null)
-            allowGoogleVisibility = System.getenv("ALLOW_GOOGLE_VISABILITY");
+            allowGoogleVisibility = System.getenv("ALLOW_GOOGLE_VISIBILITY");
         if (allowGoogleVisibility == null)
             allowGoogleVisibility = "false";
         if (Boolean.parseBoolean(allowGoogleVisibility)) {

File: src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java
Patch:
@@ -89,11 +89,10 @@ public ResponseEntity<byte[]> convertToPdf(
             @RequestParam(defaultValue = "false", name = "stretchToFit")
             @Parameter(description = "Whether to stretch the images to fit the PDF page or maintain the aspect ratio", example = "false")
                     boolean stretchToFit,
-            @RequestParam(defaultValue = "true", name = "autoRotate")
+            @RequestParam(defaultValue = "false", name = "autoRotate")
             @Parameter(description = "Whether to automatically rotate the images to better fit the PDF page", example = "true")
                     boolean autoRotate) throws IOException {
         // Convert the file to PDF and get the resulting bytes
-        System.out.println(stretchToFit);
         byte[] bytes = PdfUtils.imageToPdf(file, stretchToFit, autoRotate);
         return PdfUtils.bytesToWebResponse(bytes, file[0].getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_coverted.pdf");
     }

File: src/main/java/stirling/software/SPDF/config/Beans.java
Patch:
@@ -16,6 +16,7 @@ public class Beans implements WebMvcConfigurer {
     @Override
     public void addInterceptors(InterceptorRegistry registry) {
         registry.addInterceptor(localeChangeInterceptor());
+        registry.addInterceptor(new CleanUrlInterceptor());
     }
 
     @Bean

File: src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java
Patch:
@@ -13,7 +13,7 @@
 public class ProcessExecutor {
 
     public enum Processes {
-        LIBRE_OFFICE, OCR_MY_PDF
+        LIBRE_OFFICE, OCR_MY_PDF, PYTHON_OPENCV, GHOSTSCRIPT
     }
 
     private static final Map<Processes, ProcessExecutor> instances = new ConcurrentHashMap<>();
@@ -23,6 +23,8 @@ public static ProcessExecutor getInstance(Processes processType) {
             int semaphoreLimit = switch (key) {
             case LIBRE_OFFICE -> 1;
             case OCR_MY_PDF -> 2;
+            case PYTHON_OPENCV -> 8;
+            case GHOSTSCRIPT -> 16;
             };
             return new ProcessExecutor(semaphoreLimit);
         });

File: src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java
Patch:
@@ -13,7 +13,7 @@
 public class ProcessExecutor {
 
     public enum Processes {
-        LIBRE_OFFICE, OCR_MY_PDF
+        LIBRE_OFFICE, OCR_MY_PDF, PYTHON_OPENCV
     }
 
     private static final Map<Processes, ProcessExecutor> instances = new ConcurrentHashMap<>();
@@ -23,6 +23,7 @@ public static ProcessExecutor getInstance(Processes processType) {
             int semaphoreLimit = switch (key) {
             case LIBRE_OFFICE -> 1;
             case OCR_MY_PDF -> 2;
+            case PYTHON_OPENCV -> 8;
             };
             return new ProcessExecutor(semaphoreLimit);
         });

File: src/main/java/stirling/software/SPDF/config/Beans.java
Patch:
@@ -16,7 +16,7 @@ public class Beans implements WebMvcConfigurer {
     @Bean
     public LocaleResolver localeResolver() {
         SessionLocaleResolver slr = new SessionLocaleResolver();
-        slr.setDefaultLocale(Locale.US);
+        slr.setDefaultLocale(Locale.UK);
         return slr;
     }
 

File: src/main/java/stirling/software/SPDF/controller/converters/ConvertImgPDFController.java
Patch:
@@ -73,7 +73,6 @@ public ResponseEntity<Resource> convertToImage(@RequestParam("fileInput") Multip
         if (singleImage) {
             HttpHeaders headers = new HttpHeaders();
             headers.setContentType(MediaType.parseMediaType(getMediaType(imageFormat)));
-            headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
             ResponseEntity<Resource> response = new ResponseEntity<>(new ByteArrayResource(result), headers, HttpStatus.OK);
             return response;
         } else {

File: src/main/java/stirling/software/SPDF/controller/converters/ConvertOfficeController.java
Patch:
@@ -53,7 +53,7 @@ public byte[] convertToPdf(MultipartFile inputFile) throws IOException, Interrup
             "-o",
             tempOutputFile.toString(),
             tempInputFile.toString()));
-    int returnCode = ProcessExecutor.runCommandWithOutputHandling(command);
+    int returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.LIBRE_OFFICE).runCommandWithOutputHandling(command);
 
     // Read the converted PDF file
     byte[] pdfBytes = Files.readAllBytes(tempOutputFile);

File: src/main/java/stirling/software/SPDF/controller/CompressController.java
Patch:
@@ -80,6 +80,8 @@ public ResponseEntity<byte[]> optimizePdf(
         // Prepare the OCRmyPDF command
         List<String> command = new ArrayList<>();
         command.add("ocrmypdf");
+        command.add("--skip-text");
+        command.add("--tesseract-timeout=0");
         command.add("--optimize");
         command.add(String.valueOf(optimizeLevel));
 

File: src/main/java/stirling/software/SPDF/controller/CompressController.java
Patch:
@@ -18,6 +18,7 @@
 import com.spire.pdf.exporting.PdfImageInfo;
 import com.spire.pdf.graphics.PdfBitmap;
 
+import stirling.software.SPDF.utils.ErrorUtils;
 import stirling.software.SPDF.utils.PdfUtils;
 
 //import com.spire.pdf.*;
@@ -35,7 +36,6 @@ public String compressPdfForm(Model model) {
     @PostMapping("/compress-pdf")
     public ResponseEntity<byte[]> compressPDF(@RequestParam("fileInput") MultipartFile pdfFile, @RequestParam("imageCompressionLevel") String imageCompressionLevel)
             throws IOException {
-
         // Load a sample PDF document
         PdfDocument document = new PdfDocument();
         document.loadFromBytes(pdfFile.getBytes());
@@ -61,7 +61,7 @@ public ResponseEntity<byte[]> compressPDF(@RequestParam("fileInput") MultipartFi
                 }
         }
 
-        return PdfUtils.pdfDocToWebResponse(document, pdfFile.getName() + "_compressed.pdf");
+        return PdfUtils.pdfDocToWebResponse(document, pdfFile.getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_compressed.pdf");
 
     }
 

File: src/main/java/stirling/software/SPDF/controller/OverlayImageController.java
Patch:
@@ -34,7 +34,7 @@ public ResponseEntity<byte[]> overlayImage(@RequestParam("fileInput") MultipartF
             byte[] imageBytes = imageFile.getBytes();
             byte[] result = PdfUtils.overlayImage(pdfBytes, imageBytes, x, y);
 
-            return PdfUtils.bytesToWebResponse(result, pdfFile.getName() + "_overlayed.pdf");
+            return PdfUtils.bytesToWebResponse(result, pdfFile.getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_overlayed.pdf");
         } catch (IOException e) {
             logger.error("Failed to add image to PDF", e);
             return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

File: src/main/java/stirling/software/SPDF/controller/RearrangePagesPDFController.java
Patch:
@@ -50,7 +50,7 @@ public ResponseEntity<byte[]> deletePages(@RequestParam("fileInput") MultipartFi
             document.removePage(pageIndex);
         }
 
-        return PdfUtils.pdfDocToWebResponse(document, pdfFile.getName() + "_removed_pages.pdf");
+        return PdfUtils.pdfDocToWebResponse(document, pdfFile.getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_removed_pages.pdf");
 
     }
 
@@ -111,7 +111,7 @@ public ResponseEntity<byte[]> rearrangePages(@RequestParam("fileInput") Multipar
                 document.addPage(page);
             }
 
-            return PdfUtils.pdfDocToWebResponse(document, pdfFile.getName() + "_rearranged.pdf");
+            return PdfUtils.pdfDocToWebResponse(document, pdfFile.getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_rearranged.pdf");
         } catch (IOException e) {
 
             logger.error("Failed rearranging documents", e);

File: src/main/java/stirling/software/SPDF/controller/RotationController.java
Patch:
@@ -41,7 +41,7 @@ public ResponseEntity<byte[]> rotatePDF(@RequestParam("fileInput") MultipartFile
             page.setRotation(page.getRotation() + angle);
         }
 
-        return PdfUtils.pdfDocToWebResponse(document, pdfFile.getName() + "_rotated.pdf");
+        return PdfUtils.pdfDocToWebResponse(document, pdfFile.getOriginalFilename().replaceFirst("[.][^.]+$", "") + "_rotated.pdf");
 
     }
 

File: src/main/java/stirling/software/SPDF/controller/converters/ConvertImgPDFController.java
Patch:
@@ -43,7 +43,7 @@ public ResponseEntity<byte[]> convertToPdf(@RequestParam("fileInput") MultipartF
         byte[] bytes = PdfUtils.convertToPdf(file.getInputStream());
         logger.info("File {} successfully converted to pdf", file.getOriginalFilename());
 
-        return PdfUtils.bytesToWebResponse(bytes, file.getName() + "_coverted.pdf");
+        return PdfUtils.bytesToWebResponse(bytes, file.getOriginalFilename().replaceFirst("[.][^.]+$", "")+ "_coverted.pdf");
     }
 
     @PostMapping("/pdf-to-img")

File: src/main/java/stirling/software/SPDF/controller/security/PasswordController.java
Patch:
@@ -44,7 +44,7 @@ public String permissionsForm(Model model) {
     public ResponseEntity<byte[]> compressPDF(@RequestParam("fileInput") MultipartFile fileInput, @RequestParam(name = "password") String password) throws IOException {
         PDDocument document = PDDocument.load(fileInput.getBytes(), password);
         document.setAllSecurityToBeRemoved(true);
-        return PdfUtils.pdfDocToWebResponse(document, fileInput.getName() + "_password_removed.pdf");
+        return PdfUtils.pdfDocToWebResponse(document, fileInput.getOriginalFilename().replaceFirst("[.][^.]+$", "")+ "_password_removed.pdf");
     }
 
     @PostMapping("/add-password")
@@ -75,7 +75,7 @@ public ResponseEntity<byte[]> compressPDF(@RequestParam("fileInput") MultipartFi
 
         document.protect(spp);
 
-        return PdfUtils.pdfDocToWebResponse(document, fileInput.getName() + "_passworded.pdf");
+        return PdfUtils.pdfDocToWebResponse(document, fileInput.getOriginalFilename().replaceFirst("[.][^.]+$", "")+ "_passworded.pdf");
     }
 
 }

File: src/main/java/stirling/software/SPDF/controller/security/WatermarkController.java
Patch:
@@ -69,6 +69,6 @@ public ResponseEntity<byte[]> addWatermark(@RequestParam("fileInput") MultipartF
             // Close the content stream
             contentStream.close();
         }
-        return PdfUtils.pdfDocToWebResponse(document, pdfFile.getName() + "_watermarked.pdf");
+        return PdfUtils.pdfDocToWebResponse(document, pdfFile.getOriginalFilename().replaceFirst("[.][^.]+$", "")  + "_watermarked.pdf");
     }
 }

File: src/main/java/stirling/software/SPDF/SPdfApplication.java
Patch:
@@ -6,8 +6,8 @@
 @SpringBootApplication
 public class SPdfApplication {
 
-	public static void main(String[] args) {
-		SpringApplication.run(SPdfApplication.class, args);
-	}
+    public static void main(String[] args) {
+        SpringApplication.run(SPdfApplication.class, args);
+    }
 
 }

File: src/main/java/stirling/software/SPDF/config/Beans.java
Patch:
@@ -1,5 +1,7 @@
 package stirling.software.SPDF.config;
 
+import java.util.Locale;
+
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.LocaleResolver;
@@ -8,8 +10,6 @@
 import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;
 import org.springframework.web.servlet.i18n.SessionLocaleResolver;
 
-import java.util.Locale;
-
 @Configuration
 public class Beans implements WebMvcConfigurer {
 

File: src/main/java/stirling/software/SPDF/controller/RotationController.java
Patch:
@@ -37,7 +37,7 @@ public String rotatePdfForm(Model model) {
 
 	@PostMapping("/rotate-pdf")
 	public ResponseEntity<byte[]> rotatePDF(@RequestParam("fileInput") MultipartFile pdfFile,
-			@RequestParam("angle") String angle) throws IOException {
+			@RequestParam("angle") Integer angle) throws IOException {
 
 		// Load the PDF document
 		PDDocument document = PDDocument.load(pdfFile.getBytes());
@@ -50,7 +50,7 @@ public ResponseEntity<byte[]> rotatePDF(@RequestParam("fileInput") MultipartFile
 
 		while (iterPage.hasNext()) {
 			PDPage page = iterPage.next();
-			page.setRotation(Integer.valueOf(angle));
+			page.setRotation(page.getRotation() + angle);
 		}
 
 		return PdfUtils.pdfDocToWebResponse(document, pdfFile.getName() + "_rotated.pdf");

