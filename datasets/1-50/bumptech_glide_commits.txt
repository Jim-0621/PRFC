File: integration/sqljournaldiskcache/src/main/java/com/bumptech/glide/integration/sqljournaldiskcache/JournaledLruDiskCache.java
Patch:
@@ -3,7 +3,6 @@
 import android.os.HandlerThread;
 import android.os.Looper;
 import android.os.Process;
-import android.os.SystemClock;
 import android.util.Log;
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
@@ -461,7 +460,7 @@ private File getTempFile(String key) {
   }
 
   private static long getLogTime() {
-    return SystemClock.currentThreadTimeMillis();
+    return System.currentTimeMillis();
   }
 
   private static long getElapsedTime(long startTime) {

File: library/src/main/java/com/bumptech/glide/RegistryFactory.java
Patch:
@@ -12,7 +12,6 @@
 import android.os.ParcelFileDescriptor;
 import androidx.annotation.Nullable;
 import androidx.tracing.Trace;
-import com.bumptech.glide.GlideBuilder.EnableHardwareGainmapFixOnU;
 import com.bumptech.glide.GlideBuilder.EnableImageDecoderForBitmaps;
 import com.bumptech.glide.gifdecoder.GifDecoder;
 import com.bumptech.glide.load.ImageHeaderParser;
@@ -159,8 +158,7 @@ private static void initializeDefaults(
             registry.getImageHeaderParsers(),
             resources.getDisplayMetrics(),
             bitmapPool,
-            arrayPool,
-            experiments.isEnabled(EnableHardwareGainmapFixOnU.class));
+            arrayPool);
 
     ResourceDecoder<ByteBuffer, Bitmap> byteBufferBitmapDecoder;
     ResourceDecoder<InputStream, Bitmap> streamBitmapDecoder;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/GlideBitmapFactory.java
Patch:
@@ -249,8 +249,8 @@ public static Gainmap convertSingleChannelGainmapToTripleChannelGainmap(Gainmap
     private static Bitmap copyAlpha8ToOpaqueArgb888(Bitmap bitmap) {
       Preconditions.checkArgument(bitmap.getConfig() == Config.ALPHA_8);
       // We have to use a canvas operation with an opaque alpha filter to draw the gainmap. We can't
-      // use bitmap.copy(Config.ARGB_8888, /* isMutable= */ false) because the output bitmap will
-      // have zero values for alpha.
+      // use bitmap.copy(Config.ARGB_8888, /* isMutable= */ false) because copying from A8 to RBGA
+      // will result in zero-valued RGB values.
       Bitmap newContents =
           Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Config.ARGB_8888);
       Canvas canvas = new Canvas(newContents);

File: library/src/main/java/com/bumptech/glide/RegistryFactory.java
Patch:
@@ -12,6 +12,7 @@
 import android.os.ParcelFileDescriptor;
 import androidx.annotation.Nullable;
 import androidx.tracing.Trace;
+import com.bumptech.glide.GlideBuilder.EnableHardwareGainmapFixOnU;
 import com.bumptech.glide.GlideBuilder.EnableImageDecoderForBitmaps;
 import com.bumptech.glide.GlideBuilder.PreserveGainmapAndColorSpaceForTransformations;
 import com.bumptech.glide.gifdecoder.GifDecoder;
@@ -160,7 +161,8 @@ private static void initializeDefaults(
             resources.getDisplayMetrics(),
             bitmapPool,
             arrayPool,
-            experiments.isEnabled(PreserveGainmapAndColorSpaceForTransformations.class));
+            experiments.isEnabled(PreserveGainmapAndColorSpaceForTransformations.class),
+            experiments.isEnabled(EnableHardwareGainmapFixOnU.class));
 
     ResourceDecoder<ByteBuffer, Bitmap> byteBufferBitmapDecoder;
     ResourceDecoder<InputStream, Bitmap> streamBitmapDecoder;

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java
Patch:
@@ -5,8 +5,8 @@
 
 /**
  * An {@link com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool BitmapPool} implementation
- * that rejects all {@link android.graphics.Bitmap Bitmap}s added to it and always returns {@code
- * null} from get.
+ * that rejects all {@link android.graphics.Bitmap Bitmap}s added to it and always returns a new
+ * {@link android.graphics.Bitmap Bitmap} from {@link #get}.
  */
 public class BitmapPoolAdapter implements BitmapPool {
   @Override

File: integration/concurrent/src/main/java/com/bumptech/glide/integration/concurrent/GlideFutures.java
Patch:
@@ -181,14 +181,14 @@ private static final class GlideLoadingListener<T> implements RequestListener<T>
 
     @Override
     public boolean onLoadFailed(
-        @Nullable GlideException e, Object model, Target<T> target, boolean isFirst) {
+        @Nullable GlideException e, Object model, @NonNull Target<T> target, boolean isFirst) {
       completer.setException(e != null ? e : new RuntimeException("Unknown error"));
       return true;
     }
 
     @Override
     public boolean onResourceReady(
-        T resource, Object model, Target<T> target, DataSource dataSource, boolean isFirst) {
+        @NonNull T resource, @NonNull Object model, Target<T> target, @NonNull DataSource dataSource, boolean isFirst) {
       try {
         completer.set(new TargetAndResult<>(target, resource));
       } catch (Throwable t) {

File: library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
Patch:
@@ -241,7 +241,7 @@ public void onDestroy() {
 
   @Override
   public synchronized boolean onLoadFailed(
-      @Nullable GlideException e, Object model, Target<R> target, boolean isFirstResource) {
+      @Nullable GlideException e, Object model, @NonNull Target<R> target, boolean isFirstResource) {
     loadFailed = true;
     exception = e;
     waiter.notifyAll(this);
@@ -250,7 +250,7 @@ public synchronized boolean onLoadFailed(
 
   @Override
   public synchronized boolean onResourceReady(
-      R resource, Object model, Target<R> target, DataSource dataSource, boolean isFirstResource) {
+      @NonNull R resource, @NonNull Object model, Target<R> target, @NonNull DataSource dataSource, boolean isFirstResource) {
     // We might get a null result.
     resultReceived = true;
     this.resource = resource;

File: library/test/src/test/java/com/bumptech/glide/RobolectricConstants.java
Patch:
@@ -2,5 +2,5 @@
 
 public class RobolectricConstants {
   /** The default SDK used for Robolectric tests */
-  public static final int ROBOLECTRIC_SDK = 18;
+  public static final int ROBOLECTRIC_SDK = 19;
 }

File: library/test/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.request.RequestOptions.decodeTypeOf;
 import static com.bumptech.glide.request.RequestOptions.errorOf;
 import static com.bumptech.glide.request.RequestOptions.placeholderOf;
@@ -94,7 +95,7 @@
 @LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(
-    sdk = 18,
+    sdk = ROBOLECTRIC_SDK,
     shadows = {
       GlideTest.ShadowFileDescriptorContentResolver.class,
       GlideTest.ShadowMediaMetadataRetriever.class,

File: library/test/src/test/java/com/bumptech/glide/ListPreloaderTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK)
 public class ListPreloaderTest {
 
   @Mock private RequestBuilder<Object> request;

File: library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java
Patch:
@@ -40,7 +40,7 @@
 
 @SuppressWarnings("unchecked")
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK)
 public class RequestBuilderTest {
   @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
 

File: library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -42,7 +43,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class RequestManagerTest {
   @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
 

File: library/test/src/test/java/com/bumptech/glide/load/OptionsTest.java
Patch:
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
+
 import androidx.annotation.NonNull;
 import com.bumptech.glide.load.Option.CacheKeyUpdater;
 import com.bumptech.glide.tests.KeyTester;
@@ -12,7 +14,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class OptionsTest {
   @Rule public final KeyTester keyTester = new KeyTester();
 

File: library/test/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
@@ -15,7 +16,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ExifOrientationStreamTest {
   private ArrayPool byteArrayPool;
 

File: library/test/src/test/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
@@ -18,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class FileDescriptorAssetPathFetcherTest {
 
   @Mock private AssetManager assetManager;

File: library/test/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.mock;
@@ -36,7 +37,7 @@
  * com.bumptech.glide.load.data.HttpUrlFetcherTest}, response handling should go here.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(manifest = Config.NONE, sdk = ROBOLECTRIC_SDK)
 public class HttpUrlFetcherServerTest {
   private static final String DEFAULT_PATH = "/fakepath";
   private static final int TIMEOUT_TIME_MS = 300;

File: library/test/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doThrow;
@@ -30,7 +31,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class HttpUrlFetcherTest {
   @Mock private HttpURLConnection urlConnection;
   @Mock private HttpUrlFetcher.HttpUrlConnectionFactory connectionFactory;

File: library/test/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -23,7 +24,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class LocalUriFetcherTest {
   private TestLocalUriFetcher fetcher;
   @Mock private DataFetcher.DataCallback<Closeable> callback;

File: library/test/src/test/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
@@ -18,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class StreamAssetPathFetcherTest {
   @Mock private AssetManager assetManager;
   @Mock private InputStream expected;

File: library/test/src/test/java/com/bumptech/glide/load/data/mediastore/MediaStoreUtilTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data.mediastore;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.net.Uri;
@@ -10,7 +11,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class MediaStoreUtilTest {
 
   @Test

File: library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data.mediastore;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -19,7 +20,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ThumbFetcherTest {
 
   @Mock private ThumbnailStreamOpener opener;

File: library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data.mediastore;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
@@ -36,7 +37,7 @@
 import org.robolectric.fakes.RoboCursor;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ThumbnailStreamOpenerTest {
   private Harness harness;
 

File: library/test/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data.resource;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.mock;
@@ -28,7 +29,7 @@
 
 @RunWith(RobolectricTestRunner.class)
 @Config(
-    sdk = 18,
+    sdk = ROBOLECTRIC_SDK,
     shadows = {ContentResolverShadow.class})
 public class FileDescriptorLocalUriFetcherTest {
 

File: library/test/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data.resource;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.verify;
 
@@ -26,7 +27,7 @@
 
 @RunWith(RobolectricTestRunner.class)
 @Config(
-    sdk = 18,
+    sdk = ROBOLECTRIC_SDK,
     shadows = {ContentResolverShadow.class})
 public class StreamLocalUriFetcherTest {
   @Mock private DataFetcher.DataCallback<InputStream> callback;

File: library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.Util.anyResource;
 import static com.bumptech.glide.tests.Util.isADataSource;
 import static com.bumptech.glide.tests.Util.mockResource;
@@ -41,7 +42,7 @@
 import org.robolectric.shadows.ShadowLooper;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class EngineJobTest {
   private EngineJobHarness harness;
 

File: library/test/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertThrows;
 
 import androidx.annotation.NonNull;
@@ -23,7 +24,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class EngineKeyTest {
   @Mock private Transformation<Object> transformation;
 

File: library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.Util.mockResource;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -21,7 +22,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class EngineResourceTest {
   private EngineResource<Object> engineResource;
   @Mock private EngineResource.ResourceListener listener;

File: library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.Util.anyResource;
 import static com.bumptech.glide.tests.Util.isADataSource;
 import static com.bumptech.glide.tests.Util.mockResource;
@@ -44,7 +45,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 @SuppressWarnings("unchecked")
 public class EngineTest {
   private EngineTestHarness harness;

File: library/test/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.Util.mockResource;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.never;
@@ -16,7 +17,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ResourceRecyclerTest {
 
   private ResourceRecycler recycler;

File: library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
 import static org.mockito.ArgumentMatchers.eq;
@@ -16,7 +17,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class AttributeStrategyKeyTest {
 
   private AttributeStrategy.KeyPool keyPool;

File: library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
@@ -11,7 +12,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class AttributeStrategyTest {
 
   private AttributeStrategy strategy;

File: library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertNull;
 
@@ -10,7 +11,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class GroupedLinkedMapTest {
 
   private GroupedLinkedMap<Key, Object> map;

File: library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
Patch:
@@ -4,6 +4,7 @@
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -19,7 +20,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class LruArrayPoolTest {
   private static final int MAX_SIZE = 10;
   private static final int MAX_PUT_SIZE = MAX_SIZE / 2;

File: library/test/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine.cache;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
@@ -21,7 +22,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class DiskLruCacheWrapperTest {
   private DiskCache cache;
   private byte[] data;

File: library/test/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine.cache;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertTrue;
 
 import androidx.annotation.NonNull;
@@ -14,7 +15,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class SafeKeyGeneratorTest {
   private SafeKeyGenerator keyGenerator;
   private int nextId;

File: library/test/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine.executor;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 
 import androidx.annotation.NonNull;
@@ -14,7 +15,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class GlideExecutorTest {
 
   @Test

File: library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine.prefill;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.Util.anyResource;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertNotEquals;
@@ -43,7 +44,7 @@
 import org.robolectric.shadows.ShadowLog;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class BitmapPreFillRunnerTest {
   @Mock private BitmapPreFillRunner.Clock clock;
   @Mock private BitmapPool pool;

File: library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine.prefill;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
@@ -30,7 +31,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class BitmapPreFillerTest {
   private static final int DEFAULT_BITMAP_WIDTH = 100;
   private static final int DEFAULT_BITMAP_HEIGHT = 50;

File: library/test/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine.prefill;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 
 import android.graphics.Bitmap;
@@ -10,7 +11,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class PreFillTypeTest {
 
   @Test(expected = IllegalArgumentException.class)

File: library/test/src/test/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
@@ -21,7 +22,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class AssetUriLoaderTest {
   private static final int IMAGE_SIDE = 10;
 

File: library/test/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -26,7 +27,7 @@
 
 /** Tests for the {@link DataUrlLoader} class. */
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class DataUrlLoaderTest {
 
   // A valid base64-encoded PNG (a small "Google" logo).

File: library/test/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
@@ -13,7 +14,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class GlideUrlTest {
 
   @Test(expected = NullPointerException.class)

File: library/test/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -16,7 +17,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class LazyHeadersTest {
   private static final String DEFAULT_USER_AGENT = "default_user_agent";
   private static final String DEFAULT_USER_AGENT_PROPERTY = "http.agent";

File: library/test/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertThrows;
 import static org.mockito.ArgumentMatchers.eq;
@@ -26,7 +27,7 @@
 // containsExactly produces a spurious warning.
 @SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class MultiModelLoaderFactoryTest {
   @Mock private ModelLoaderFactory<String, String> firstFactory;
   @Mock private ModelLoader<String, String> firstModelLoader;

File: library/test/src/test/java/com/bumptech/glide/load/model/ResourceLoaderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -26,7 +27,7 @@
 
 /** Tests for the {@link com.bumptech.glide.load.model.ResourceLoader} class. */
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ResourceLoaderTest {
 
   @Mock private ModelLoader<Uri, Object> uriLoader;

File: library/test/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 
 import androidx.test.core.app.ApplicationProvider;
@@ -17,7 +18,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class StreamEncoderTest {
   private StreamEncoder encoder;
   private File file;

File: library/test/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -26,7 +27,7 @@
 
 /** Tests for the {@link com.bumptech.glide.load.model.StringLoader} class. */
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class StringLoaderTest {
   // Not a magic number, just an arbitrary non zero value.
   private static final int IMAGE_SIDE = 100;

File: library/test/src/test/java/com/bumptech/glide/load/model/UriLoaderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.eq;
@@ -21,7 +22,7 @@
 
 /** Tests for the {@link UriLoader} class. */
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class UriLoaderTest {
   // Not a magic number, just arbitrary non zero.
   private static final int IMAGE_SIDE = 120;

File: library/test/src/test/java/com/bumptech/glide/load/model/UrlUriLoaderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
@@ -17,7 +18,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class UrlUriLoaderTest {
   private static final int IMAGE_SIDE = 100;
   private static final Options OPTIONS = new Options();

File: library/test/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model.stream;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.mockito.ArgumentMatchers.any;
@@ -29,7 +30,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class BaseGlideUrlLoaderTest {
 
   @Mock private ModelCache<Object, GlideUrl> modelCache;

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
 import static org.mockito.ArgumentMatchers.eq;
@@ -17,7 +18,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class BitmapDrawableResourceTest {
   private BitmapDrawableResourceHarness harness;
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.Util.anyContext;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.ArgumentMatchers.any;
@@ -37,7 +38,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 @SuppressWarnings("deprecation")
 public class BitmapDrawableTransformationTest {
   @Rule public final KeyTester keyTester = new KeyTester();

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.Util.mockResource;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -26,7 +27,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class BitmapEncoderTest {
   private EncoderHarness harness;
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
@@ -18,7 +19,7 @@
 
 // TODO: add a test for bitmap size using getAllocationByteSize when robolectric supports kitkat.
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class BitmapResourceTest {
   private int currentBuildVersion;
   private BitmapResourceHarness harness;

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertNull;
@@ -26,7 +27,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class BitmapTransformationTest {
 
   @Mock private BitmapPool bitmapPool;

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
 import static org.mockito.ArgumentMatchers.any;
@@ -32,7 +33,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class CenterInsideTest {
   @Rule public final KeyTester keyTester = new KeyTester();
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParserTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
@@ -23,7 +24,7 @@
 import org.robolectric.util.Util;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class DefaultImageHeaderParserTest {
 
   private static final byte[] PNG_HEADER_WITH_IHDR_CHUNK =

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyInt;
@@ -39,7 +40,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class DrawableTransformationTest {
   @Rule public final KeyTester keyTester = new KeyTester();
   @Mock private Transformation<Bitmap> bitmapTransformation;

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
@@ -31,7 +32,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class FitCenterTest {
   @Rule public final KeyTester keyTester = new KeyTester();
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.doThrow;
@@ -22,7 +23,7 @@
 // Not required in tests.
 @SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class RecyclableBufferedInputStreamTest {
 
   private static final int DATA_SIZE = 30;

File: library/test/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.drawable;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertNotEquals;
 import static org.mockito.Mockito.mock;
@@ -18,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class DrawableResourceTest {
   private TestDrawable drawable;
   private DrawableResource<TestDrawable> resource;

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.gif;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
@@ -32,7 +33,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ByteBufferGifDecoderTest {
   private static final byte[] GIF_HEADER = new byte[] {0x47, 0x49, 0x46};
   private static final int ARRAY_POOL_SIZE_BYTES = 4 * 1024 * 1024;

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.gif;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
@@ -13,7 +14,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class GifDrawableResourceTest {
   private GifDrawable drawable;
   private GifDrawableResource resource;

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.gif;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -48,7 +49,7 @@
 import org.robolectric.shadows.ShadowCanvas;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class GifDrawableTest {
   @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.gif;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.Util.mockResource;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyInt;
@@ -34,7 +35,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class GifDrawableTransformationTest {
   @Rule public final KeyTester keyTester = new KeyTester();
   @Mock private Transformation<Bitmap> wrapped;

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.gif;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
@@ -46,7 +47,7 @@
 
 @LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class GifFrameLoaderTest {
   @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.gif;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.mockito.Mockito.mock;
@@ -18,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class GifFrameResourceDecoderTest {
   private GifDecoder gifDecoder;
   private GifFrameResourceDecoder resourceDecoder;

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.gif;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 
 import com.bumptech.glide.load.ImageHeaderParser;
@@ -21,7 +22,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class StreamGifDecoderTest {
   private static final byte[] GIF_HEADER = new byte[] {0x47, 0x49, 0x46};
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.Util.mockResource;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.Mockito.verify;
@@ -17,7 +18,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class BitmapBytesTranscoderTest {
   private BitmapBytesTranscoderHarness harness;
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.Util.mockResource;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.when;
@@ -16,7 +17,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class BitmapDrawableTranscoderTest {
   private BitmapDrawableTranscoder transcoder;
 

File: library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactoryTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.manager;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.robolectric.Shadows.shadowOf;
@@ -13,7 +14,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class DefaultConnectivityMonitorFactoryTest {
   private ConnectivityMonitorFactory factory;
 

File: library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.manager;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -43,7 +44,7 @@
 
 @LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class RequestManagerRetrieverTest {
   @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
 

File: library/test/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.module;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.ArgumentMatchers.anyString;
@@ -27,7 +28,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 @SuppressWarnings("deprecation")
 public class ManifestParserTest {
   private static final String MODULE_VALUE = "GlideModule";

File: library/test/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -27,7 +28,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class RequestFutureTargetTest {
   private int width;
   private int height;

File: library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.bumptech.glide.tests.Util.isADataSource;
 import static com.bumptech.glide.tests.Util.mockResource;
 import static com.google.common.truth.Truth.assertThat;
@@ -59,7 +60,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 @SuppressWarnings("rawtypes")
 public class SingleRequestTest {
 

File: library/test/src/test/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.target;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.ArgumentMatchers.eq;
@@ -22,7 +23,7 @@
 import org.robolectric.shadows.ShadowAppWidgetManager;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18, shadows = AppWidgetTargetTest.UpdateShadowAppWidgetManager.class)
+@Config(sdk = ROBOLECTRIC_SDK, shadows = AppWidgetTargetTest.UpdateShadowAppWidgetManager.class)
 public class AppWidgetTargetTest {
   private UpdateShadowAppWidgetManager shadowManager;
   private RemoteViews views;

File: library/test/src/test/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.target;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 
 import android.graphics.Bitmap;
@@ -13,7 +14,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class BitmapImageViewTargetTest {
 
   private ImageView view;

File: library/test/src/test/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.target;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.graphics.Bitmap;
@@ -16,7 +17,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ImageViewTargetFactoryTest {
   private ImageViewTargetFactory factory;
   private ImageView view;

File: library/test/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.target;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
@@ -29,7 +30,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ImageViewTargetTest {
 
   @Mock private AnimatedDrawable animatedDrawable;

File: library/test/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.target;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
@@ -22,7 +23,7 @@
 import org.robolectric.shadows.ShadowNotificationManager;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18, shadows = NotificationTargetTest.UpdateShadowNotificationManager.class)
+@Config(sdk = ROBOLECTRIC_SDK, shadows = NotificationTargetTest.UpdateShadowNotificationManager.class)
 public class NotificationTargetTest {
   private UpdateShadowNotificationManager shadowManager;
   private RemoteViews remoteViews;

File: library/test/src/test/java/com/bumptech/glide/request/target/PreloadTargetTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.target;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -19,7 +20,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class PreloadTargetTest {
 
   @Mock private RequestManager requestManager;

File: library/test/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.transition;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
 
@@ -12,7 +13,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class DrawableCrossFadeFactoryTest {
 
   private DrawableCrossFadeFactory factory;

File: library/test/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.transition;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
@@ -18,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class DrawableCrossFadeViewAnimationTest {
   private CrossFadeHarness harness;
 

File: library/test/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.transition;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertFalse;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.eq;
@@ -18,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ViewAnimationTest {
   private ViewTransition<Object> viewAnimation;
   private ViewAdapter adapter;

File: library/test/src/test/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.transition;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertFalse;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.eq;
@@ -19,7 +20,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ViewPropertyAnimationTest {
   private ViewPropertyTransition.Animator animator;
   private ViewPropertyTransition<Object> animation;

File: library/test/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.resize.load;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 
@@ -16,7 +17,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ExifTest {
 
   private ArrayPool byteArrayPool;

File: library/test/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.signature;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertNotNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -21,7 +22,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ApplicationVersionSignatureTest {
   @Rule public final KeyTester keyTester = new KeyTester();
   private Context context;

File: library/test/src/test/java/com/bumptech/glide/util/ByteBufferUtilTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.util;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static org.junit.Assert.assertEquals;
 
 import java.io.ByteArrayInputStream;
@@ -12,7 +13,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ByteBufferUtilTest {
   private static final int BUFFER_SIZE = 16384;
 

File: library/test/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.util;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.ArgumentMatchers.any;
@@ -18,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class ContentLengthInputStreamTest {
   @Mock private InputStream wrapped;
 

File: library/test/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.util;
 
+import static com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK;
 import static com.google.common.truth.Truth.assertThat;
 
 import org.junit.Test;
@@ -8,7 +9,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = ROBOLECTRIC_SDK)
 public class FixedPreloadSizeProviderTest {
 
   // containsExactly doesn't need a return value check.

File: library/test/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = com.bumptech.glide.RobolectricConstants.ROBOLECTRIC_SDK)
 public class ViewPreloadSizeProviderTest {
 
   private View view;

File: integration/cronet/src/main/java/com/bumptech/glide/integration/cronet/ChromiumRequestSerializer.java
Patch:
@@ -369,7 +369,7 @@ private void maybeLogResult(
                 + (buffer.limit() / 1024)
                 + "kb");
       } else if (!isSuccess && Log.isLoggable(TAG, Log.ERROR) && !wasCancelled) {
-        Log.e(TAG, "Request failed", exception);
+        Log.e(TAG, "Request failed, url: " + glideUrl, exception);
       }
     }
 

File: integration/cronet/src/main/java/com/bumptech/glide/integration/cronet/ChromiumRequestSerializer.java
Patch:
@@ -369,7 +369,7 @@ private void maybeLogResult(
                 + (buffer.limit() / 1024)
                 + "kb");
       } else if (!isSuccess && Log.isLoggable(TAG, Log.ERROR) && !wasCancelled) {
-        Log.e(TAG, "Request failed", exception);
+        Log.e(TAG, "Request failed, url: " + glideUrl, exception);
       }
     }
 

File: testutil/src/main/java/com/bumptech/glide/testutil/TearDownGlide.java
Patch:
@@ -39,13 +39,13 @@ public void run() {
             requestManager.onDestroy();
           }
         });
+    Glide.tearDown();
     concurrencyHelper.loadOnOtherThread(
         new Runnable() {
           @Override
           public void run() {
             Glide.get(ApplicationProvider.getApplicationContext()).clearDiskCache();
           }
         });
-    Glide.tearDown();
   }
 }

File: instrumentation/src/androidTest/java/com/bumptech/glide/CenterCropRegressionTest.java
Patch:
@@ -34,7 +34,8 @@ public class CenterCropRegressionTest {
   @Before
   public void setUp() {
     context = ApplicationProvider.getApplicationContext();
-    bitmapRegressionTester = new BitmapRegressionTester(getClass(), testName);
+    bitmapRegressionTester =
+        BitmapRegressionTester.newInstance(getClass(), testName).assumeShouldRun();
     canonical = new CanonicalBitmap();
   }
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/CenterInsideRegressionTest.java
Patch:
@@ -34,7 +34,8 @@ public class CenterInsideRegressionTest {
   @Before
   public void setUp() {
     context = ApplicationProvider.getApplicationContext();
-    bitmapRegressionTester = new BitmapRegressionTester(getClass(), testName);
+    bitmapRegressionTester =
+        BitmapRegressionTester.newInstance(getClass(), testName).assumeShouldRun();
     canonical = new CanonicalBitmap();
   }
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/CircleCropRegressionTest.java
Patch:
@@ -34,7 +34,8 @@ public class CircleCropRegressionTest {
   @Before
   public void setUp() {
     context = ApplicationProvider.getApplicationContext();
-    bitmapRegressionTester = new BitmapRegressionTester(getClass(), testName);
+    bitmapRegressionTester =
+        BitmapRegressionTester.newInstance(getClass(), testName).assumeShouldRun();
     canonical = new CanonicalBitmap();
   }
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/FitCenterRegressionTest.java
Patch:
@@ -36,7 +36,8 @@ public class FitCenterRegressionTest {
   @Before
   public void setUp() {
     context = ApplicationProvider.getApplicationContext();
-    bitmapRegressionTester = new BitmapRegressionTester(getClass(), testName);
+    bitmapRegressionTester =
+        BitmapRegressionTester.newInstance(getClass(), testName).assumeShouldRun();
     canonical = new CanonicalBitmap();
   }
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/RoundedCornersRegressionTest.java
Patch:
@@ -43,7 +43,8 @@ public class RoundedCornersRegressionTest {
   @Before
   public void setUp() throws Exception {
     context = ApplicationProvider.getApplicationContext();
-    bitmapRegressionTester = new BitmapRegressionTester(getClass(), testName);
+    bitmapRegressionTester =
+        BitmapRegressionTester.newInstance(getClass(), testName).assumeShouldRun();
     canonicalBitmap = new CanonicalBitmap();
   }
 

File: library/src/main/java/com/bumptech/glide/load/resource/drawable/AnimatedImageDecoder.java
Patch:
@@ -73,7 +73,7 @@ Resource<Drawable> decode(@NonNull Source source, int width, int height, @NonNul
             source, new DefaultOnHeaderDecodedListener(width, height, options));
     if (!(decoded instanceof AnimatedImageDrawable)) {
       throw new IOException(
-          "Received unexpected drawable type for animated webp, failing: " + decoded);
+          "Received unexpected drawable type for animated image, failing: " + decoded);
     }
     return new AnimatedImageDrawableResource((AnimatedImageDrawable) decoded);
   }

File: instrumentation/src/androidTest/java/com/bumptech/glide/DarkModeTest.java
Patch:
@@ -46,7 +46,7 @@ public class DarkModeTest {
 
   @Rule
   public final IdlingGlideRule idlingGlideRule =
-      IdlingGlideRule.newGlideRule(glideBuilder -> glideBuilder.useDirectResourceLoader(true));
+      IdlingGlideRule.newGlideRule(glideBuilder -> glideBuilder);
 
   @Before
   public void before() {

File: integration/avif/src/main/java/com/bumptech/glide/integration/avif/AvifStreamBitmapDecoder.java
Patch:
@@ -41,6 +41,7 @@ public Resource<Bitmap> decode(InputStream source, int width, int height, Option
 
   @Override
   public boolean handles(InputStream source, Options options) throws IOException {
-    return ImageType.AVIF.equals(ImageHeaderParserUtils.getType(parsers, source, arrayPool));
+    ImageType type = ImageHeaderParserUtils.getType(parsers, source, arrayPool);
+    return type.equals(ImageType.AVIF) || type.equals(ImageType.ANIMATED_AVIF);
   }
 }

File: library/src/main/java/com/bumptech/glide/load/ImageHeaderParser.java
Patch:
@@ -34,6 +34,8 @@ enum ImageType {
     ANIMATED_WEBP(true),
     /** Avif type (may contain alpha). */
     AVIF(true),
+    /** Animated Avif type (may contain alpha). */
+    ANIMATED_AVIF(true),
     /** Unrecognized type. */
     UNKNOWN(false);
 

File: library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
Patch:
@@ -59,8 +59,8 @@ public CustomTarget() {
    * as the requested size (unless overridden by {@link
    * com.bumptech.glide.request.RequestOptions#override(int)} in the request).
    *
-   * @param width The requested width ({@code > 0, or == Target.SIZE_ORIGINAL}).
-   * @param height The requested height ({@code > 0, or == Target.SIZE_ORIGINAL}).
+   * @param width The requested width in pixels ({@code > 0, or == Target.SIZE_ORIGINAL}).
+   * @param height The requested height in pixels ({@code > 0, or == Target.SIZE_ORIGINAL}).
    * @throws IllegalArgumentException if width/height doesn't meet the requirement: {@code > 0, or
    *     == Target.SIZE_ORIGINAL}
    */

File: library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
Patch:
@@ -59,8 +59,8 @@ public CustomTarget() {
    * as the requested size (unless overridden by {@link
    * com.bumptech.glide.request.RequestOptions#override(int)} in the request).
    *
-   * @param width The requested width ({@code > 0, or == Target.SIZE_ORIGINAL}).
-   * @param height The requested height ({@code > 0, or == Target.SIZE_ORIGINAL}).
+   * @param width The requested width in pixels ({@code > 0, or == Target.SIZE_ORIGINAL}).
+   * @param height The requested height in pixels ({@code > 0, or == Target.SIZE_ORIGINAL}).
    * @throws IllegalArgumentException if width/height doesn't meet the requirement: {@code > 0, or
    *     == Target.SIZE_ORIGINAL}
    */

File: library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
Patch:
@@ -62,8 +62,7 @@ public void setUp() {
 
     retriever = new RequestManagerRetriever(/* factory= */ null, mock(GlideExperiments.class));
 
-    harnesses =
-        new RetrieverHarness[] {new DefaultRetrieverHarness(), new SupportRetrieverHarness()};
+    harnesses = new RetrieverHarness[] {new DefaultRetrieverHarness()};
 
     initialSdkVersion = Build.VERSION.SDK_INT;
     Util.setSdkVersionInt(18);

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -420,7 +420,7 @@ private Drawable getFallbackDrawable() {
   private Drawable loadDrawable(@DrawableRes int resourceId) {
     Theme theme =
         requestOptions.getTheme() != null ? requestOptions.getTheme() : context.getTheme();
-    return DrawableDecoderCompat.getDrawable(glideContext, resourceId, theme);
+    return DrawableDecoderCompat.getDrawable(context, resourceId, theme);
   }
 
   @GuardedBy("requestLock")

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapRegressionTester.java
Patch:
@@ -89,7 +89,7 @@ private SplitBySdk getSplitBySdkValues() {
     SplitBySdk result;
     try {
       Method method =
-          testClass.getMethod(testName.getMethodName(), /* parameterTypes= */ (Class[]) null);
+          testClass.getMethod(testName.getMethodName(), /* parameterTypes...= */ (Class[]) null);
       result = method.getAnnotation(SplitBySdk.class);
     } catch (NoSuchMethodException e) {
       throw new RuntimeException(e);

File: instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java
Patch:
@@ -92,6 +92,6 @@ private String getBase64BitmapBytes(CompressFormat format) {
     Bitmap bitmap = ((BitmapDrawable) drawable).getBitmap();
     bitmap.compress(format, 100, bos);
     byte[] data = bos.toByteArray();
-    return Base64.encodeToString(data, /*flags=*/ 0);
+    return Base64.encodeToString(data, /* flags= */ 0);
   }
 }

File: instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerEmulatorTest.java
Patch:
@@ -526,7 +526,7 @@ private static InputStream openFileStream(int width, int height, int exifOrienta
               ".jpeg",
               ApplicationProvider.getApplicationContext().getCacheDir());
       os = new BufferedOutputStream(new FileOutputStream(tempFile));
-      bitmap.compress(CompressFormat.JPEG, /*quality=*/ 100, os);
+      bitmap.compress(CompressFormat.JPEG, /* quality= */ 100, os);
       bitmap.recycle();
       os.close();
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapRegressionTester.java
Patch:
@@ -89,7 +89,7 @@ private SplitBySdk getSplitBySdkValues() {
     SplitBySdk result;
     try {
       Method method =
-          testClass.getMethod(testName.getMethodName(), /* parameterTypes...= */ (Class[]) null);
+          testClass.getMethod(testName.getMethodName(), /* parameterTypes= */ (Class[]) null);
       result = method.getAnnotation(SplitBySdk.class);
     } catch (NoSuchMethodException e) {
       throw new RuntimeException(e);
@@ -151,7 +151,7 @@ private void writeBitmap(Bitmap bitmap) {
     OutputStream os = null;
     try {
       os = new BufferedOutputStream(new FileOutputStream(file));
-      bitmap.compress(CompressFormat.PNG, /*quality=*/ 100, os);
+      bitmap.compress(CompressFormat.PNG, /* quality= */ 100, os);
       os.close();
     } catch (IOException e) {
       throw new RuntimeException(e);

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/CanonicalBitmap.java
Patch:
@@ -46,7 +46,7 @@ private Bitmap decodeBitmap() {
               result,
               (int) (result.getWidth() * scaleFactor),
               (int) (result.getHeight() * scaleFactor),
-              /*filter=*/ false);
+              /* filter= */ false);
     }
     // Make sure the Bitmap is immutable.
     return result;

File: integration/concurrent/src/main/java/com/bumptech/glide/integration/concurrent/GlideFutures.java
Patch:
@@ -139,7 +139,7 @@ public Object attachCompleter(@NonNull Completer<TargetAndResult<T>> completer)
                 new Runnable() {
                   @Override
                   public void run() {
-                    futureTarget.cancel(/*mayInterruptIfRunning=*/ true);
+                    futureTarget.cancel(/* mayInterruptIfRunning= */ true);
                   }
                 },
                 MoreExecutors.directExecutor());

File: integration/cronet/src/test/java/com/bumptech/glide/integration/cronet/ChromiumUrlFetcherTest.java
Patch:
@@ -277,7 +277,7 @@ public void testCancel_withStartedRequest_cancelsRequest() {
   @Test
   public void testRequestComplete_withNonNullException_callsCallbackWithException() {
     CronetException expected =
-        new CronetException("test", /*cause=*/ null) {
+        new CronetException("test", /* cause= */ null) {
           static final long serialVersionUID = 1;
         };
     fetcher.loadData(Priority.LOW, callback);

File: library/src/main/java/com/bumptech/glide/GlideBuilder.java
Patch:
@@ -483,7 +483,7 @@ public GlideBuilder setLogRequestOrigins(boolean isEnabled) {
   public GlideBuilder setImageDecoderEnabledForBitmaps(boolean isEnabled) {
     glideExperimentsBuilder.update(
         new EnableImageDecoderForBitmaps(),
-        /*isEnabled=*/ isEnabled && Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q);
+        /* isEnabled= */ isEnabled && Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q);
     return this;
   }
 

File: library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
Patch:
@@ -148,7 +148,7 @@ private HttpURLConnection buildAndConfigureConnection(URL url, Map<String, Strin
     try {
       urlConnection = connectionFactory.build(url);
     } catch (IOException e) {
-      throw new HttpException("URL.openConnection threw", /*statusCode=*/ 0, e);
+      throw new HttpException("URL.openConnection threw", /* statusCode= */ 0, e);
     }
     for (Map.Entry<String, String> headerEntry : headers.entrySet()) {
       urlConnection.addRequestProperty(headerEntry.getKey(), headerEntry.getValue());

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
Patch:
@@ -306,7 +306,7 @@ private synchronized void release() {
     isCancelled = false;
     hasResource = false;
     isLoadedFromAlternateCacheKey = false;
-    decodeJob.release(/*isRemovedFromQueue=*/ false);
+    decodeJob.release(/* isRemovedFromQueue= */ false);
     decodeJob = null;
     exception = null;
     dataSource = null;
@@ -370,7 +370,7 @@ void notifyCallbacksOfException() {
       incrementPendingCallbacks(copy.size() + 1);
     }
 
-    engineJobListener.onEngineJobComplete(this, localKey, /*resource=*/ null);
+    engineJobListener.onEngineJobComplete(this, localKey, /* resource= */ null);
 
     for (ResourceCallbackAndExecutor entry : copy) {
       entry.executor.execute(new CallLoadFailed(entry.cb));
@@ -514,7 +514,7 @@ static class EngineResourceFactory {
     public <R> EngineResource<R> build(
         Resource<R> resource, boolean isMemoryCacheable, Key key, ResourceListener listener) {
       return new EngineResource<>(
-          resource, isMemoryCacheable, /*isRecyclable=*/ true, key, listener);
+          resource, isMemoryCacheable, /* isRecyclable= */ true, key, listener);
     }
   }
 }

File: library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
Patch:
@@ -43,14 +43,14 @@ synchronized <Model, Data> void append(
       @NonNull Class<Model> modelClass,
       @NonNull Class<Data> dataClass,
       @NonNull ModelLoaderFactory<? extends Model, ? extends Data> factory) {
-    add(modelClass, dataClass, factory, /*append=*/ true);
+    add(modelClass, dataClass, factory, /* append= */ true);
   }
 
   synchronized <Model, Data> void prepend(
       @NonNull Class<Model> modelClass,
       @NonNull Class<Data> dataClass,
       @NonNull ModelLoaderFactory<? extends Model, ? extends Data> factory) {
-    add(modelClass, dataClass, factory, /*append=*/ false);
+    add(modelClass, dataClass, factory, /* append= */ false);
   }
 
   private <Model, Data> void add(

File: library/src/main/java/com/bumptech/glide/load/model/stream/QMediaStoreUriLoader.java
Patch:
@@ -200,9 +200,9 @@ private File queryForFilePath(Uri uri) throws FileNotFoundException {
                 .query(
                     uri,
                     PROJECTION,
-                    /*selection=*/ null,
-                    /*selectionArgs=*/ null,
-                    /*sortOrder=*/ null);
+                    /* selection= */ null,
+                    /* selectionArgs= */ null,
+                    /* sortOrder= */ null);
         if (cursor == null || !cursor.moveToFirst()) {
           throw new FileNotFoundException("Failed to media store entry for: " + uri);
         }

File: library/src/main/java/com/bumptech/glide/load/resource/DefaultOnHeaderDecodedListener.java
Patch:
@@ -61,7 +61,7 @@ public void onHeaderDecoded(
         requestedWidth,
         requestedHeight,
         isHardwareConfigAllowed,
-        /*isExifOrientationRequired=*/ false)) {
+        /* isExifOrientationRequired= */ false)) {
       decoder.setAllocator(ImageDecoder.ALLOCATOR_HARDWARE);
     } else {
       decoder.setAllocator(ImageDecoder.ALLOCATOR_SOFTWARE);

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java
Patch:
@@ -24,7 +24,7 @@ public class BitmapDrawableTransformation implements Transformation<BitmapDrawab
   @SuppressWarnings("WeakerAccess")
   public BitmapDrawableTransformation(Transformation<Bitmap> wrapped) {
     this.wrapped =
-        Preconditions.checkNotNull(new DrawableTransformation(wrapped, /*isRequired=*/ false));
+        Preconditions.checkNotNull(new DrawableTransformation(wrapped, /* isRequired= */ false));
   }
 
   @NonNull

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java
Patch:
@@ -93,7 +93,7 @@ public void update(
   public static final Option<Integer> FRAME_OPTION =
       Option.disk(
           "com.bumptech.glide.load.resource.bitmap.VideoBitmapDecode.FrameOption",
-          /*defaultValue=*/ MediaMetadataRetriever.OPTION_CLOSEST_SYNC,
+          /* defaultValue= */ MediaMetadataRetriever.OPTION_CLOSEST_SYNC,
           new Option.CacheKeyUpdater<Integer>() {
             private final ByteBuffer buffer = ByteBuffer.allocate(Integer.SIZE / Byte.SIZE);
 

File: library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
Patch:
@@ -27,7 +27,7 @@ private DrawableDecoderCompat() {
   /** See {@code getDrawable(Context, int, Theme)}. */
   public static Drawable getDrawable(
       Context ourContext, Context targetContext, @DrawableRes int id) {
-    return getDrawable(ourContext, targetContext, id, /*theme=*/ null);
+    return getDrawable(ourContext, targetContext, id, /* theme= */ null);
   }
 
   /**

File: library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java
Patch:
@@ -89,7 +89,7 @@ private Context findContextForPackage(Uri source, String packageName) {
     }
 
     try {
-      return context.createPackageContext(packageName, /*flags=*/ 0);
+      return context.createPackageContext(packageName, /* flags= */ 0);
     } catch (NameNotFoundException e) {
       // The parent APK holds the correct context if the resource is located in a split
       if (packageName.contains(context.getPackageName())) {

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java
Patch:
@@ -20,7 +20,7 @@ public final class GifBitmapProvider implements GifDecoder.BitmapProvider {
    * when requested.
    */
   public GifBitmapProvider(BitmapPool bitmapPool) {
-    this(bitmapPool, /*arrayPool=*/ null);
+    this(bitmapPool, /* arrayPool= */ null);
   }
 
   /** Constructs an instance with a shared array pool. Arrays will be reused where possible. */

File: library/src/main/java/com/bumptech/glide/provider/LoadPathCache.java
Patch:
@@ -27,8 +27,8 @@ public class LoadPathCache {
                   Object.class,
                   Collections.<ResourceDecoder<Object, Object>>emptyList(),
                   new UnitTranscoder<>(),
-                  /*listPool=*/ null)),
-          /*listPool=*/ null);
+                  /* listPool= */ null)),
+          /* listPool= */ null);
 
   private final ArrayMap<MultiClassKey, LoadPath<?, ?, ?>> cache = new ArrayMap<>();
   private final AtomicReference<MultiClassKey> keyRef = new AtomicReference<>();

File: library/test/src/test/java/com/bumptech/glide/GlideContextTest.java
Patch:
@@ -56,7 +56,7 @@ public RequestOptions build() {
               }
             },
             transitionOptions,
-            /*defaultRequestListeners=*/ Collections.<RequestListener<Object>>emptyList(),
+            /* defaultRequestListeners= */ Collections.<RequestListener<Object>>emptyList(),
             mock(Engine.class),
             mock(GlideExperiments.class),
             Log.DEBUG);

File: library/test/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -230,7 +230,7 @@ private Glide buildGlideWithFakePools() {
         .build(
             context,
             Collections.<GlideModule>emptyList(),
-            /* annotationGeneratedGlideModule=*/ null);
+            /* annotationGeneratedGlideModule= */ null);
   }
 
   @Test

File: library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java
Patch:
@@ -137,7 +137,7 @@ public void testMultipleRequestListeners() {
         .onResourceReady(
             new SimpleResource<>(new Object()),
             DataSource.LOCAL,
-            /*isLoadedFromAlternateCacheKey=*/ false);
+            /* isLoadedFromAlternateCacheKey= */ false);
 
     verify(listener1)
         .onResourceReady(any(), any(), isA(Target.class), isA(DataSource.class), anyBoolean());
@@ -154,7 +154,7 @@ public void testListenerApiOverridesListeners() {
         .onResourceReady(
             new SimpleResource<>(new Object()),
             DataSource.LOCAL,
-            /*isLoadedFromAlternateCacheKey=*/ false);
+            /* isLoadedFromAlternateCacheKey= */ false);
 
     // The #listener API removes any previous listeners, so the first listener should not be called.
     verify(listener1, never())

File: library/test/src/test/java/com/bumptech/glide/load/data/BufferedOutputStreamFuzzTest.java
Patch:
@@ -133,13 +133,13 @@ private Write getOffsetBufferWrite(Random random) {
   private Write getBufferWrite(Random random) {
     byte[] data = new byte[random.nextInt(MAX_BYTES_PER_WRITE)];
     random.nextBytes(data);
-    return new Write(data, /*length=*/ data.length, /*offset=*/ 0, WriteType.BUFFER);
+    return new Write(data, /* length= */ data.length, /* offset= */ 0, WriteType.BUFFER);
   }
 
   private Write getByteWrite(Random random) {
     byte[] data = new byte[1];
     random.nextBytes(data);
-    return new Write(data, /*length=*/ 1, /*offset=*/ 0, WriteType.BYTE);
+    return new Write(data, /* length= */ 1, /* offset= */ 0, WriteType.BYTE);
   }
 
   private WriteType getType(Random random) {

File: library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java
Patch:
@@ -22,7 +22,7 @@ public void setUp() {
 
   @Test
   public void testReturnsNullForGetWithNoBitmap() {
-    Key key = new Key("key", /*width=*/ 1, /*height=*/ 1);
+    Key key = new Key("key", /* width= */ 1, /* height= */ 1);
     assertNull(map.get(key));
   }
 

File: library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
Patch:
@@ -51,7 +51,7 @@ public void testICanAddAndGetABitmap() {
   @Test
   public void testImmutableBitmapsAreNotAdded() {
     Bitmap bitmap = createMutableBitmap();
-    Bitmap immutable = bitmap.copy(Bitmap.Config.ARGB_8888, /*isMutable=*/ false);
+    Bitmap immutable = bitmap.copy(Bitmap.Config.ARGB_8888, /* isMutable= */ false);
     assertThat(immutable.isMutable()).isFalse();
     pool.put(immutable);
     assertThat(strategy.bitmaps).isEmpty();
@@ -154,13 +154,13 @@ public void testPassesArgb8888ToStrategyAsConfigForRequestsWithNullConfigsOnGetD
 
   @Test
   public void get_withNullConfig_andEmptyPool_returnsNewArgb8888Bitmap() {
-    Bitmap result = pool.get(100, 100, /*config=*/ null);
+    Bitmap result = pool.get(100, 100, /* config= */ null);
     assertThat(result.getConfig()).isEqualTo(Bitmap.Config.ARGB_8888);
   }
 
   @Test
   public void getDirty_withNullConfig_andEmptyPool_returnsNewArgb8888Bitmap() {
-    Bitmap result = pool.getDirty(100, 100, /*config=*/ null);
+    Bitmap result = pool.getDirty(100, 100, /* config= */ null);
     assertThat(result.getConfig()).isEqualTo(Bitmap.Config.ARGB_8888);
   }
 

File: library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
Patch:
@@ -204,7 +204,7 @@ public void isCleared_primaryFailed_errorCancelled_returnsTrue() {
   public void isEquivalentTo() {
     assertThat(coordinator.isEquivalentTo(primary)).isFalse();
 
-    ErrorRequestCoordinator other = newCoordinator(/*parent=*/ null);
+    ErrorRequestCoordinator other = newCoordinator(/* parent= */ null);
     assertThat(coordinator.isEquivalentTo(other)).isFalse();
 
     other.setRequests(primary, primary);
@@ -597,10 +597,10 @@ public void canNotifyCleared_primaryRequest_primaryFailed_nonNullParentCanNotify
   }
 
   private static ErrorRequestCoordinator newCoordinator() {
-    return newCoordinator(/*parent=*/ null);
+    return newCoordinator(/* parent= */ null);
   }
 
   private static ErrorRequestCoordinator newCoordinator(@Nullable RequestCoordinator parent) {
-    return new ErrorRequestCoordinator(/*requestLock=*/ new Object(), parent);
+    return new ErrorRequestCoordinator(/* requestLock= */ new Object(), parent);
   }
 }

File: library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
Patch:
@@ -402,10 +402,10 @@ public void testIsEquivalentTo() {
   }
 
   private static ThumbnailRequestCoordinator newCoordinator() {
-    return newCoordinator(/*parent=*/ null);
+    return newCoordinator(/* parent= */ null);
   }
 
   private static ThumbnailRequestCoordinator newCoordinator(RequestCoordinator parent) {
-    return new ThumbnailRequestCoordinator(/*requestLock=*/ new Object(), parent);
+    return new ThumbnailRequestCoordinator(/* requestLock= */ new Object(), parent);
   }
 }

File: library/test/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
Patch:
@@ -123,7 +123,7 @@ public void onResourceReady_withAnimatableResource_startsAnimatableAfterSetResou
     AnimatedDrawable drawable = mock(AnimatedDrawable.class);
     ImageView view = mock(ImageView.class);
     target = new TestTarget(view);
-    target.onResourceReady(drawable, /*transition=*/ null);
+    target.onResourceReady(drawable, /* transition= */ null);
 
     InOrder order = inOrder(view, drawable);
     order.verify(view).setImageDrawable(drawable);
@@ -132,11 +132,11 @@ public void onResourceReady_withAnimatableResource_startsAnimatableAfterSetResou
 
   @Test
   public void onLoadCleared_withAnimatableDrawable_stopsDrawable() {
-    target.onResourceReady(animatedDrawable, /*transition=*/ null);
+    target.onResourceReady(animatedDrawable, /* transition= */ null);
     verify(animatedDrawable).start();
     verify(animatedDrawable, never()).stop();
 
-    target.onLoadCleared(/*placeholder=*/ null);
+    target.onLoadCleared(/* placeholder= */ null);
 
     verify(animatedDrawable).stop();
   }

File: library/src/main/java/com/bumptech/glide/TransitionOptions.java
Patch:
@@ -35,8 +35,8 @@ public final CHILD dontTransition() {
    * load finishes. Will only be run if the resource was loaded asynchronously (i.e. was not in the
    * memory cache).
    *
-   * @param viewAnimationId The resource id of the {@link android.view.animation} to use as the
-   *     transition.
+   * @param viewAnimationId The resource id of the {@link android.view.animation.Animation} to use
+   *     as the transition.
    * @return This request builder.
    */
   @NonNull

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
Patch:
@@ -26,7 +26,7 @@ public interface ArrayPool {
   <T> void put(T array);
 
   /**
-   * Returns a non-null array of the given type with a length >= to the given size.
+   * Returns a non-null array of the given type with a length {@code >=} to the given size.
    *
    * <p>If an array of the given size isn't in the pool, a new one will be allocated.
    *

File: library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java
Patch:
@@ -25,7 +25,7 @@ interface ResourceRemovedListener {
    * <p>If the size multiplier causes the size of the cache to be decreased, items will be evicted
    * until the cache is smaller than the new size.
    *
-   * @param multiplier A size multiplier >= 0.
+   * @param multiplier A size multiplier {@code >= 0}.
    */
   void setSizeMultiplier(float multiplier);
 

File: library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
Patch:
@@ -158,7 +158,7 @@ public static GlideExecutor newSourceExecutor(
   /**
    * Returns a new unlimited thread pool with zero core thread count to make sure no threads are
    * created by default, {@link #KEEP_ALIVE_TIME_MS} keep alive time, the {@link
-   * #SOURCE_UNLIMITED_EXECUTOR_NAME} thread name prefix, the {@link
+   * #DEFAULT_SOURCE_UNLIMITED_EXECUTOR_NAME} thread name prefix, the {@link
    * com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy#DEFAULT}
    * uncaught throwable strategy, and the {@link SynchronousQueue} since using default unbounded
    * blocking queue, for example, {@link PriorityBlockingQueue} effectively won't create more than

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
Patch:
@@ -86,7 +86,7 @@ LoadData<Data> buildLoadData(
   /**
    * Returns true if the given model is a of a recognized type that this loader can probably load.
    *
-   * <p>For example, you may want multiple Uri -> InputStream loaders. One might handle media store
+   * <p>For example, you may want multiple Uri to InputStream loaders. One might handle media store
    * Uris, another might handle asset Uris, and a third might handle file Uris etc.
    *
    * <p>This method is generally expected to do no I/O and complete quickly, so best effort results

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
Patch:
@@ -20,7 +20,7 @@
  * readily accessible. For non-{@link Bitmap} based {@link Drawable}s, this class must first try to
  * draw the {@link Drawable} to a {@link Bitmap} using {@link android.graphics.Canvas}, which is
  * less efficient. {@link Drawable}s that implement {@link android.graphics.drawable.Animatable}
- * will fail with an exception. {@link Drawable}s that return <= 0 for {@link
+ * will fail with an exception. {@link Drawable}s that return {@code <= 0} for {@link
  * Drawable#getIntrinsicHeight()} and/or {@link Drawable#getIntrinsicWidth()} will fail with an
  * exception if the requested size is {@link
  * com.bumptech.glide.request.target.Target#SIZE_ORIGINAL}. {@link Drawable}s without intrinsic

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/ResourceBitmapDecoder.java
Patch:
@@ -20,11 +20,11 @@
  * <p>The framework will decode some resources as {@link Drawable}s that do not wrap {@link
  * Bitmap}s. This decoder will attempt to return a {@link Bitmap} for those {@link Drawable}s anyway
  * by drawing the {@link Drawable} to a {@link Canvas}s using the {@link Drawable}'s intrinsic
- * bounds or the dimensions provided to {@link #decode(Object, int, int, Options)}.
+ * bounds or the dimensions provided to {@link #decode(Uri, int, int, Options)}.
  *
- * <p>For non-{@link Bitmap} {@link Drawable}s that return <= 0 for {@link
+ * <p>For non-{@link Bitmap} {@link Drawable}s that return {@code <= 0} for {@link
  * Drawable#getIntrinsicWidth()} and/or {@link Drawable#getIntrinsicHeight()}, this decoder will
- * fail if the width and height provided to {@link #decode(Object, int, int, Options)} are {@link
+ * fail if the width and height provided to {@link #decode(Uri, int, int, Options)} are {@link
  * Target#SIZE_ORIGINAL}.
  */
 public class ResourceBitmapDecoder implements ResourceDecoder<Uri, Bitmap> {

File: library/src/main/java/com/bumptech/glide/request/target/Target.java
Patch:
@@ -20,7 +20,7 @@
  *   <li>onLoadFailed
  * </ul>
  *
- * The typical lifecycle is onLoadStarted -> onResourceReady or onLoadFailed -> onLoadCleared.
+ * The typical lifecycle is onLoadStarted, then onResourceReady or onLoadFailed, then onLoadCleared.
  * However, there are no guarantees. onLoadStarted may not be called if the resource is in memory or
  * if the load will fail because of a null model object. onLoadCleared similarly may never be called
  * if the target is never cleared. See the docs for the individual methods for details.

File: library/src/main/java/com/bumptech/glide/TransitionOptions.java
Patch:
@@ -35,8 +35,8 @@ public final CHILD dontTransition() {
    * load finishes. Will only be run if the resource was loaded asynchronously (i.e. was not in the
    * memory cache).
    *
-   * @param viewAnimationId The resource id of the {@link android.view.animation} to use as the
-   *     transition.
+   * @param viewAnimationId The resource id of the {@link android.view.animation.Animation} to use
+   * as the transition.
    * @return This request builder.
    */
   @NonNull

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
Patch:
@@ -26,7 +26,7 @@ public interface ArrayPool {
   <T> void put(T array);
 
   /**
-   * Returns a non-null array of the given type with a length >= to the given size.
+   * Returns a non-null array of the given type with a length {@code >=} to the given size.
    *
    * <p>If an array of the given size isn't in the pool, a new one will be allocated.
    *

File: library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java
Patch:
@@ -25,7 +25,7 @@ interface ResourceRemovedListener {
    * <p>If the size multiplier causes the size of the cache to be decreased, items will be evicted
    * until the cache is smaller than the new size.
    *
-   * @param multiplier A size multiplier >= 0.
+   * @param multiplier A size multiplier {@code >= 0}.
    */
   void setSizeMultiplier(float multiplier);
 

File: library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
Patch:
@@ -158,7 +158,7 @@ public static GlideExecutor newSourceExecutor(
   /**
    * Returns a new unlimited thread pool with zero core thread count to make sure no threads are
    * created by default, {@link #KEEP_ALIVE_TIME_MS} keep alive time, the {@link
-   * #SOURCE_UNLIMITED_EXECUTOR_NAME} thread name prefix, the {@link
+   * #DEFAULT_SOURCE_UNLIMITED_EXECUTOR_NAME} thread name prefix, the {@link
    * com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy#DEFAULT}
    * uncaught throwable strategy, and the {@link SynchronousQueue} since using default unbounded
    * blocking queue, for example, {@link PriorityBlockingQueue} effectively won't create more than

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
Patch:
@@ -86,7 +86,7 @@ LoadData<Data> buildLoadData(
   /**
    * Returns true if the given model is a of a recognized type that this loader can probably load.
    *
-   * <p>For example, you may want multiple Uri -> InputStream loaders. One might handle media store
+   * <p>For example, you may want multiple Uri to InputStream loaders. One might handle media store
    * Uris, another might handle asset Uris, and a third might handle file Uris etc.
    *
    * <p>This method is generally expected to do no I/O and complete quickly, so best effort results

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
Patch:
@@ -20,7 +20,7 @@
  * <p>Use cases will look something like this:
  *
  * <pre>
- * <code>
+ * {@code
  * public class FillSpace extends BitmapTransformation {
  *     private static final String ID = "com.bumptech.glide.transformations.FillSpace";
  *     private static final byte[] ID_BYTES = ID.getBytes(Charset.forName("UTF-8"));
@@ -49,7 +49,7 @@
  *       messageDigest.update(ID_BYTES);
  *     }
  * }
- * </code>
+ * }
  * </pre>
  *
  * <p>Using the fully qualified class name as a static final {@link String} (not {@link

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
Patch:
@@ -20,7 +20,7 @@
  * readily accessible. For non-{@link Bitmap} based {@link Drawable}s, this class must first try to
  * draw the {@link Drawable} to a {@link Bitmap} using {@link android.graphics.Canvas}, which is
  * less efficient. {@link Drawable}s that implement {@link android.graphics.drawable.Animatable}
- * will fail with an exception. {@link Drawable}s that return <= 0 for {@link
+ * will fail with an exception. {@link Drawable}s that return {@code <= 0} for {@link
  * Drawable#getIntrinsicHeight()} and/or {@link Drawable#getIntrinsicWidth()} will fail with an
  * exception if the requested size is {@link
  * com.bumptech.glide.request.target.Target#SIZE_ORIGINAL}. {@link Drawable}s without intrinsic

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/ResourceBitmapDecoder.java
Patch:
@@ -20,11 +20,11 @@
  * <p>The framework will decode some resources as {@link Drawable}s that do not wrap {@link
  * Bitmap}s. This decoder will attempt to return a {@link Bitmap} for those {@link Drawable}s anyway
  * by drawing the {@link Drawable} to a {@link Canvas}s using the {@link Drawable}'s intrinsic
- * bounds or the dimensions provided to {@link #decode(Object, int, int, Options)}.
+ * bounds or the dimensions provided to {@link #decode(Uri, int, int, Options)}.
  *
- * <p>For non-{@link Bitmap} {@link Drawable}s that return <= 0 for {@link
+ * <p>For non-{@link Bitmap} {@link Drawable}s that return {@code <= 0} for {@link
  * Drawable#getIntrinsicWidth()} and/or {@link Drawable#getIntrinsicHeight()}, this decoder will
- * fail if the width and height provided to {@link #decode(Object, int, int, Options)} are {@link
+ * fail if the width and height provided to {@link #decode(Uri, int, int, Options)} are {@link
  * Target#SIZE_ORIGINAL}.
  */
 public class ResourceBitmapDecoder implements ResourceDecoder<Uri, Bitmap> {

File: library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
Patch:
@@ -10,8 +10,7 @@
  * implementations of non essential methods that allows the caller to specify an exact width/height.
  * Typically use cases look something like this:
  *
- * <pre>
- * <code>
+ * <pre>{@code
  * Target<Bitmap> target =
  *     Glide.with(fragment)
  *       .asBitmap()
@@ -29,7 +28,7 @@
  * // At some later point, clear the Target to release the resources, prevent load queues from
  * // blowing out proportion, and to improve load times for future requests:
  * Glide.with(fragment).clear(target);
- * </code>
+ * }
  * </pre>
  *
  * <p><em>Warning!</em> this class is extremely prone to mis-use. Use SimpleTarget only as a last

File: library/src/main/java/com/bumptech/glide/request/target/Target.java
Patch:
@@ -20,7 +20,7 @@
  *   <li>onLoadFailed
  * </ul>
  *
- * The typical lifecycle is onLoadStarted -> onResourceReady or onLoadFailed -> onLoadCleared.
+ * The typical lifecycle is onLoadStarted, then onResourceReady or onLoadFailed, then onLoadCleared.
  * However, there are no guarantees. onLoadStarted may not be called if the resource is in memory or
  * if the load will fail because of a null model object. onLoadCleared similarly may never be called
  * if the target is never cleared. See the docs for the individual methods for details.

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -683,7 +683,9 @@ private void onLoadFailed(GlideException e, int maxLogLevel) {
       int logLevel = glideContext.getLogLevel();
       if (logLevel <= maxLogLevel) {
         Log.w(
-            GLIDE_TAG, "Load failed for " + model + " with size [" + width + "x" + height + "]", e);
+            GLIDE_TAG,
+            "Load failed for [" + model + "] with dimensions [" + width + "x" + height + "]",
+            e);
         if (logLevel <= Log.INFO) {
           e.logRootCauses(GLIDE_TAG);
         }

File: library/src/main/java/com/bumptech/glide/RegistryFactory.java
Patch:
@@ -12,7 +12,6 @@
 import android.os.ParcelFileDescriptor;
 import androidx.annotation.Nullable;
 import androidx.tracing.Trace;
-import com.bumptech.glide.GlideBuilder.EnableImageDecoderForAnimatedWebp;
 import com.bumptech.glide.GlideBuilder.EnableImageDecoderForBitmaps;
 import com.bumptech.glide.gifdecoder.GifDecoder;
 import com.bumptech.glide.load.ImageHeaderParser;
@@ -164,8 +163,7 @@ private static void initializeDefaults(
       streamBitmapDecoder = new StreamBitmapDecoder(downsampler, arrayPool);
     }
 
-    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P
-        && experiments.isEnabled(EnableImageDecoderForAnimatedWebp.class)) {
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
       registry.append(
           Registry.BUCKET_ANIMATION,
           InputStream.class,

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -379,7 +379,9 @@ public ArrayPool getArrayPool() {
     return arrayPool;
   }
 
-  /** @return The context associated with this instance. */
+  /**
+   * @return The context associated with this instance.
+   */
   @NonNull
   public Context getContext() {
     return glideContext.getBaseContext();

File: library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java
Patch:
@@ -63,7 +63,9 @@ public static DiskCache create(File directory, long maxSize) {
     return new DiskLruCacheWrapper(directory, maxSize);
   }
 
-  /** @deprecated Do not extend this class. */
+  /**
+   * @deprecated Do not extend this class.
+   */
   @Deprecated
   // Deprecated public API.
   @SuppressWarnings({"WeakerAccess", "DeprecatedIsStillUsed"})

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java
Patch:
@@ -56,7 +56,9 @@ public BitmapEncoder(@NonNull ArrayPool arrayPool) {
     this.arrayPool = arrayPool;
   }
 
-  /** @deprecated Use {@link #BitmapEncoder(ArrayPool)} instead. */
+  /**
+   * @deprecated Use {@link #BitmapEncoder(ArrayPool)} instead.
+   */
   @Deprecated
   public BitmapEncoder() {
     arrayPool = null;

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java
Patch:
@@ -25,7 +25,9 @@ public BitmapDrawableTranscoder(@NonNull Context context) {
     this(context.getResources());
   }
 
-  /** @deprecated Use {@link #BitmapDrawableTranscoder(Resources)}, {@code bitmapPool} is unused. */
+  /**
+   * @deprecated Use {@link #BitmapDrawableTranscoder(Resources)}, {@code bitmapPool} is unused.
+   */
   @Deprecated
   public BitmapDrawableTranscoder(
       @NonNull Resources resources, @SuppressWarnings("unused") BitmapPool bitmapPool) {

File: library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
Patch:
@@ -14,7 +14,9 @@ public BitmapImageViewTarget(ImageView view) {
     super(view);
   }
 
-  /** @deprecated Use {@link #waitForLayout()} instead. */
+  /**
+   * @deprecated Use {@link #waitForLayout()} instead.
+   */
   // Public API.
   @SuppressWarnings({"unused", "deprecation"})
   @Deprecated

File: library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
Patch:
@@ -15,7 +15,9 @@ public BitmapThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
-  /** @deprecated Use {@link #waitForLayout()} instead. */
+  /**
+   * @deprecated Use {@link #waitForLayout()} instead.
+   */
   @SuppressWarnings("deprecation")
   @Deprecated
   public BitmapThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {

File: library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
Patch:
@@ -11,7 +11,9 @@ public DrawableImageViewTarget(ImageView view) {
     super(view);
   }
 
-  /** @deprecated Use {@link #waitForLayout()} instead. */
+  /**
+   * @deprecated Use {@link #waitForLayout()} instead.
+   */
   // Public API.
   @SuppressWarnings({"unused", "deprecation"})
   @Deprecated

File: library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
Patch:
@@ -13,7 +13,9 @@ public DrawableThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
-  /** @deprecated Use {@link #waitForLayout()} instead. */
+  /**
+   * @deprecated Use {@link #waitForLayout()} instead.
+   */
   @Deprecated
   @SuppressWarnings("deprecation")
   public DrawableThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {

File: library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
Patch:
@@ -25,7 +25,9 @@ public ImageViewTarget(ImageView view) {
     super(view);
   }
 
-  /** @deprecated Use {@link #waitForLayout()} instead. */
+  /**
+   * @deprecated Use {@link #waitForLayout()} instead.
+   */
   @SuppressWarnings({"deprecation"})
   @Deprecated
   public ImageViewTarget(ImageView view, boolean waitForLayout) {

File: library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
Patch:
@@ -27,7 +27,9 @@ public ThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
-  /** @deprecated Use {@link #waitForLayout()} insetad. */
+  /**
+   * @deprecated Use {@link #waitForLayout()} insetad.
+   */
   @Deprecated
   @SuppressWarnings({"deprecation"})
   public ThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {

File: library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java
Patch:
@@ -50,7 +50,9 @@ public Builder() {
       this(DEFAULT_DURATION_MS);
     }
 
-    /** @param durationMillis The duration of the cross fade animation in milliseconds. */
+    /**
+     * @param durationMillis The duration of the cross fade animation in milliseconds.
+     */
     public Builder(int durationMillis) {
       this.durationMillis = durationMillis;
     }

File: mocks/src/main/java/com/bumptech/glide/load/engine/executor/MockGlideExecutor.java
Patch:
@@ -27,7 +27,9 @@ public static GlideExecutor newMainThreadExecutor() {
     return newTestExecutor(new DirectExecutorService());
   }
 
-  /** @deprecated Use {@link #newMainThreadExecutor} instead. */
+  /**
+   * @deprecated Use {@link #newMainThreadExecutor} instead.
+   */
   @Deprecated
   public static GlideExecutor newMainThreadUnlimitedExecutor() {
     return newMainThreadExecutor();

File: library/src/main/java/com/bumptech/glide/load/ImageHeaderParser.java
Patch:
@@ -30,6 +30,8 @@ enum ImageType {
     WEBP_A(true),
     /** WebP type without alpha. */
     WEBP(false),
+    /** Avif type (may contain alpha). */
+    AVIF(true),
     /** Unrecognized type. */
     UNKNOWN(false);
 

File: integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerToListViewScrollListener.java
Patch:
@@ -10,7 +10,7 @@
  * Converts {@link androidx.recyclerview.widget.RecyclerView.OnScrollListener} events to {@link
  * AbsListView} scroll events.
  *
- * <p>Requires that the the recycler view be using a {@link LinearLayoutManager} subclass.
+ * <p>Requires that the recycler view be using a {@link LinearLayoutManager} subclass.
  */
 // Public API.
 @SuppressWarnings("WeakerAccess")

File: integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerToListViewScrollListener.java
Patch:
@@ -10,7 +10,7 @@
  * Converts {@link androidx.recyclerview.widget.RecyclerView.OnScrollListener} events to {@link
  * AbsListView} scroll events.
  *
- * <p>Requires that the the recycler view be using a {@link LinearLayoutManager} subclass.
+ * <p>Requires that the recycler view be using a {@link LinearLayoutManager} subclass.
  */
 // Public API.
 @SuppressWarnings("WeakerAccess")

File: library/src/main/java/com/bumptech/glide/load/PreferredColorSpace.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load;
 
 /**
- * Glide's supported handling of color spaces on Android O+, defaults to {@link #SRGB}.
+ * Glide's supported handling of color spaces on Android O+, defaults to null.
  *
  * <p>On Android O, Glide will always request SRGB and will ignore this option if set. A bug on
  * Android O prevents P3 images from being compressed correctly and can result in color distortion.

File: library/src/main/java/com/bumptech/glide/load/PreferredColorSpace.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load;
 
 /**
- * Glide's supported handling of color spaces on Android O+, defaults to {@link #SRGB}.
+ * Glide's supported handling of color spaces on Android O+, defaults to null.
  *
  * <p>On Android O, Glide will always request SRGB and will ignore this option if set. A bug on
  * Android O prevents P3 images from being compressed correctly and can result in color distortion.

File: library/test/src/test/java/com/bumptech/glide/tests/KeyTester.java
Patch:
@@ -136,10 +136,11 @@ protected boolean doEquivalent(@NonNull Key a, @NonNull Key b) {
       byte[] aDigest = sha256.getDigest(a);
       byte[] bDigest = sha256.getDigest(b);
       Object object = new Object();
+      Object sentinel = null;
       return a.equals(b)
           && b.equals(a)
-          && !a.equals(null)
-          && !b.equals(null)
+          && !a.equals(sentinel)
+          && !b.equals(sentinel)
           && !a.equals(object)
           && !b.equals(object)
           && Arrays.equals(aDigest, bDigest);

File: testutil/src/main/java/com/bumptech/glide/testutil/ConcurrencyHelper.java
Patch:
@@ -89,6 +89,9 @@ public void clearOnMainThread(final ImageView imageView) {
     runOnMainThread(
         new Runnable() {
           @Override
+          // Required to avoid a weird emulator issue where the Application passed here is otherwise
+          // cast to a FragmentActivity...
+          @SuppressWarnings("cast")
           public void run() {
             Glide.with((Context) ApplicationProvider.getApplicationContext()).clear(imageView);
           }

File: library/src/main/java/com/bumptech/glide/load/PreferredColorSpace.java
Patch:
@@ -29,8 +29,6 @@
  * Bitmap will actually use the requested color space.
  */
 public enum PreferredColorSpace {
-  /** don't set prefer ColorSpace. */
-  NULL,
   /** Prefers to decode images using {@link android.graphics.ColorSpace.Named#SRGB}. */
   SRGB,
   /** Prefers to decode images using {@link android.graphics.ColorSpace.Named#DISPLAY_P3}. */

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java
Patch:
@@ -16,6 +16,7 @@ private ResourceIds() {
   public interface raw {
     int dl_world_anim = getResourceId("raw", "dl_world_anim");
     int canonical = getResourceId("raw", "canonical");
+    int canonical_large = getResourceId("raw", "canonical_large");
     int canonical_png = getResourceId("raw", "canonical_png");
     int canonical_transparent_png = getResourceId("raw", "canonical_transparent_png");
     int interlaced_transparent_gif = getResourceId("raw", "interlaced_transparent_gif");

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -376,7 +376,7 @@ private Bitmap decodeFromWrappedStreams(
       }
     }
 
-    if(preferredColorSpace != PreferredColorSpace.NULL) {
+    if (preferredColorSpace != PreferredColorSpace.NULL) {
       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
         boolean isP3Eligible =
             preferredColorSpace == PreferredColorSpace.DISPLAY_P3

File: library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
Patch:
@@ -166,9 +166,9 @@ public String getMessage() {
     if (rootCauses.isEmpty()) {
       return result.toString();
     } else if (rootCauses.size() == 1) {
-      result.append("\nThere was 1 cause:");
+      result.append("\nThere was 1 root cause:");
     } else {
-      result.append("\nThere were ").append(rootCauses.size()).append(" causes:");
+      result.append("\nThere were ").append(rootCauses.size()).append(" root causes:");
     }
     for (Throwable cause : rootCauses) {
       result

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -44,7 +44,7 @@ public class FlickrSearchActivity extends AppCompatActivity
     implements SearchView.OnQueryTextListener {
   private static final String TAG = "FlickrSearchActivity";
   private static final String STATE_QUERY = "state_search_string";
-  private static final Query DEFAULT_QUERY = new SearchQuery("kitten");
+  private static final Query DEFAULT_QUERY = new SearchQuery("airplane").requireSafeOverQuality();
 
   private final QueryListener queryListener = new QueryListener();
   private final Set<PhotoViewer> photoViewers = new HashSet<>();

File: library/test/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
Patch:
@@ -50,14 +50,16 @@ public void testDoesNotReturnOriginalDrawableOnGet() {
     assertNotEquals(drawable, resource.get());
   }
 
+  @SuppressWarnings("TruthIncompatibleType")
   @Test
   public void testReturnsNewDrawableOnGet() {
     GifDrawable expected = mock(GifDrawable.class);
     Drawable.ConstantState constantState = mock(Drawable.ConstantState.class);
     when(constantState.newDrawable()).thenReturn(expected);
     when(drawable.getConstantState()).thenReturn(constantState);
 
-    assertThat(resource.get()).isEqualTo(expected);
+    assertThat(resource.get())
+        .isEqualTo(/* expected: TestDrawable, actual: GifDrawable */ expected);
 
     verify(drawable).getConstantState();
     verify(constantState).newDrawable();

File: instrumentation/src/androidTest/java/com/bumptech/glide/LoadResourcesWithDownsamplerTest.java
Patch:
@@ -121,7 +121,6 @@ public void loadTransparentGifResource_asHardware_withNoOtherLoaders_decodesReso
     assumeTrue(
         "Hardware Bitmaps are only supported on O+",
         Build.VERSION.SDK_INT >= Build.VERSION_CODES.O);
-    Glide.enableHardwareBitmaps();
 
     Glide.get(context)
         .getRegistry()

File: library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
Patch:
@@ -58,7 +58,7 @@ public class RequestManagerRetrieverTest {
   public void setUp() {
     appContext = ApplicationProvider.getApplicationContext();
 
-    retriever = new RequestManagerRetriever(/*factory=*/ null);
+    retriever = new RequestManagerRetriever(/*factory=*/ null, /* addFirstFrameWaiter= */ false);
 
     harnesses =
         new RetrieverHarness[] {new DefaultRetrieverHarness(), new SupportRetrieverHarness()};

File: instrumentation/src/androidTest/java/com/bumptech/glide/LoadResourcesWithDownsamplerTest.java
Patch:
@@ -121,6 +121,7 @@ public void loadTransparentGifResource_asHardware_withNoOtherLoaders_decodesReso
     assumeTrue(
         "Hardware Bitmaps are only supported on O+",
         Build.VERSION.SDK_INT >= Build.VERSION_CODES.O);
+    Glide.enableHardwareBitmaps();
 
     Glide.get(context)
         .getRegistry()

File: library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
Patch:
@@ -58,7 +58,7 @@ public class RequestManagerRetrieverTest {
   public void setUp() {
     appContext = ApplicationProvider.getApplicationContext();
 
-    retriever = new RequestManagerRetriever(/*factory=*/ null, /* addFirstFrameWaiter= */ false);
+    retriever = new RequestManagerRetriever(/*factory=*/ null);
 
     harnesses =
         new RetrieverHarness[] {new DefaultRetrieverHarness(), new SupportRetrieverHarness()};

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapRegressionTester.java
Patch:
@@ -87,7 +87,7 @@ private SplitBySdk getSplitBySdkValues() {
     SplitBySdk result;
     try {
       Method method =
-          testClass.getMethod(testName.getMethodName(), /*parameterTypes=*/ (Class[]) null);
+          testClass.getMethod(testName.getMethodName(), /* parameterTypes...= */ (Class[]) null);
       result = method.getAnnotation(SplitBySdk.class);
     } catch (NoSuchMethodException e) {
       throw new RuntimeException(e);

File: library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
Patch:
@@ -34,7 +34,7 @@ public enum DecodeFormat {
    * alpha should return {@link android.graphics.Bitmap.Config#RGB_565} for {@link
    * android.graphics.Bitmap#getConfig()}.
    *
-   * <p>On Android O+, this format will use ARGB_8888 only when it's not possible to use {@link
+   * <p>On Android O+, this format will use RGB_565 only when it's not possible to use {@link
    * android.graphics.Bitmap.Config#HARDWARE}.
    */
   PREFER_RGB_565;

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
Patch:
@@ -149,6 +149,8 @@ public RequestManager get(@NonNull Fragment fragment) {
   public RequestManager get(@NonNull Activity activity) {
     if (Util.isOnBackgroundThread()) {
       return get(activity.getApplicationContext());
+    } else if (activity instanceof FragmentActivity) {
+      return get((FragmentActivity) activity);
     } else {
       assertNotDestroyed(activity);
       android.app.FragmentManager fm = activity.getFragmentManager();

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
Patch:
@@ -149,6 +149,8 @@ public RequestManager get(@NonNull Fragment fragment) {
   public RequestManager get(@NonNull Activity activity) {
     if (Util.isOnBackgroundThread()) {
       return get(activity.getApplicationContext());
+    } else if (activity instanceof FragmentActivity) {
+      return get((FragmentActivity) activity);
     } else {
       assertNotDestroyed(activity);
       android.app.FragmentManager fm = activity.getFragmentManager();

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Api.java
Patch:
@@ -69,7 +69,7 @@ private static List<String> getLargerSizeKeys(int width, int height) {
 
     boolean isFirstLargest = true;
     List<String> result = new ArrayList<>();
-    int size = result.size();
+    int size = SORTED_SIZE_KEYS.size();
     for (int i = 0; i < size; i++) {
       int edge = SORTED_SIZE_KEYS.get(i);
       if (largestEdge <= edge) {

File: library/test/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -16,6 +16,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.robolectric.annotation.LooperMode.Mode.LEGACY;
 
 import android.content.ContentResolver;
 import android.content.Context;
@@ -84,11 +85,13 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
+import org.robolectric.annotation.LooperMode;
 import org.robolectric.annotation.Resetter;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowBitmap;
 
 /** Tests for the {@link Glide} interface and singleton. */
+@LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(
     sdk = 18,

File: library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -9,6 +9,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.robolectric.annotation.LooperMode.Mode.LEGACY;
 
 import android.app.Application;
 import android.content.Context;
@@ -41,7 +42,9 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
+@LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(sdk = 18, shadows = GlideShadowLooper.class)
 public class RequestManagerTest {

File: library/test/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
Patch:
@@ -6,6 +6,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.robolectric.annotation.LooperMode.Mode.LEGACY;
 
 import android.os.Looper;
 import androidx.annotation.NonNull;
@@ -29,7 +30,9 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
+@LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(shadows = GlideShadowLooper.class)
 public class ActiveResourcesTest {

File: library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
Patch:
@@ -17,6 +17,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.robolectric.annotation.LooperMode.Mode.LEGACY;
 
 import com.bumptech.glide.GlideContext;
 import com.bumptech.glide.Priority;
@@ -43,7 +44,9 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
+@LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(
     sdk = 18,

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
Patch:
@@ -8,6 +8,7 @@
 import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.robolectric.annotation.LooperMode.Mode.LEGACY;
 
 import com.bumptech.glide.gifdecoder.GifDecoder;
 import com.bumptech.glide.gifdecoder.GifHeader;
@@ -31,7 +32,9 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
+@LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(sdk = 18, shadows = GlideShadowLooper.class)
 public class ByteBufferGifDecoderTest {

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -13,6 +13,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.robolectric.annotation.LooperMode.Mode.LEGACY;
 
 import android.app.Application;
 import android.graphics.Bitmap;
@@ -50,9 +51,11 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
+import org.robolectric.annotation.LooperMode;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowCanvas;
 
+@LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(
     sdk = 18,

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
Patch:
@@ -12,6 +12,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.robolectric.annotation.LooperMode.Mode.LEGACY;
 
 import android.graphics.Bitmap;
 import android.os.Handler;
@@ -41,7 +42,9 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
+@LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(sdk = 18)
 public class GifFrameLoaderTest {

File: library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
Patch:
@@ -5,6 +5,7 @@
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
+import static org.robolectric.annotation.LooperMode.Mode.LEGACY;
 
 import android.content.BroadcastReceiver;
 import android.content.Context;
@@ -23,11 +24,13 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
+import org.robolectric.annotation.LooperMode;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.ShadowConnectivityManager;
 import org.robolectric.shadows.ShadowNetworkInfo;
 
+@LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(sdk = 18, shadows = PermissionConnectivityManager.class)
 public class DefaultConnectivityMonitorTest {

File: library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
Patch:
@@ -8,6 +8,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
+import static org.robolectric.annotation.LooperMode.Mode.LEGACY;
 
 import android.app.Activity;
 import android.content.Context;
@@ -39,7 +40,9 @@
 import org.robolectric.Shadows;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
+@LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(sdk = 18, shadows = GlideShadowLooper.class)
 public class RequestManagerRetrieverTest {

File: library/test/src/test/java/com/bumptech/glide/request/target/PreloadTargetTest.java
Patch:
@@ -3,6 +3,7 @@
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
+import static org.robolectric.annotation.LooperMode.Mode.LEGACY;
 
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.request.Request;
@@ -13,7 +14,9 @@
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
+@LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(sdk = 18)
 public class PreloadTargetTest {

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -571,7 +571,7 @@ public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {
    *
    * <p>This method returns a "deep" copy in that all non-immutable arguments are copied such that
    * changes to one builder will not affect the other builder. However, in addition to immutable
-   * arguments, the current model is not copied copied so changes to the model will affect both
+   * arguments, the current model is not copied so changes to the model will affect both
    * builders.
    */
   @SuppressWarnings({

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -571,7 +571,7 @@ public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {
    *
    * <p>This method returns a "deep" copy in that all non-immutable arguments are copied such that
    * changes to one builder will not affect the other builder. However, in addition to immutable
-   * arguments, the current model is not copied copied so changes to the model will affect both
+   * arguments, the current model is not copied so changes to the model will affect both
    * builders.
    */
   @SuppressWarnings({

File: library/src/main/java/com/bumptech/glide/request/RequestListener.java
Patch:
@@ -74,10 +74,10 @@ boolean onLoadFailed(
    * @param isFirstResource {@code true} if this is the first resource to in this load to be loaded
    *     into the target. For example when loading a thumbnail and a full-sized image, this will be
    *     {@code true} for the first image to load and {@code false} for the second.
-   * @return {@code true} to prevent {@link Target#onLoadFailed(Drawable)} from being called on
+   * @return {@code true} to prevent {@link Target#onResourceReady(Drawable)} from being called on
    *     {@code target}, typically because the listener wants to update the {@code target} or the
    *     object the {@code target} wraps itself or {@code false} to allow {@link
-   *     Target#onLoadFailed(Drawable)} to be called on {@code target}.
+   *     Target#onResourceReady(Drawable)} to be called on {@code target}.
    */
   boolean onResourceReady(
       R resource, Object model, Target<R> target, DataSource dataSource, boolean isFirstResource);

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java
Patch:
@@ -11,8 +11,8 @@ class ResourceRecycler {
   private final Handler handler =
       new Handler(Looper.getMainLooper(), new ResourceRecyclerCallback());
 
-  synchronized void recycle(Resource<?> resource) {
-    if (isRecycling) {
+  synchronized void recycle(Resource<?> resource, boolean forceNextFrame) {
+    if (isRecycling || forceNextFrame) {
       // If a resource has sub-resources, releasing a sub resource can cause it's parent to be
       // synchronously evicted which leads to a recycle loop when the parent releases it's children.
       // Posting breaks this loop.

File: library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
Patch:
@@ -351,7 +351,7 @@ public void testResourceIsNotAddedToCacheOnReleasedIfNotCacheable() {
   public void testResourceIsRecycledIfNotCacheableWhenReleased() {
     when(harness.resource.isMemoryCacheable()).thenReturn(false);
     harness.getEngine().onResourceReleased(harness.cacheKey, harness.resource);
-    verify(harness.resourceRecycler).recycle(eq(harness.resource));
+    verify(harness.resourceRecycler).recycle(eq(harness.resource), eq(false));
   }
 
   @Test
@@ -372,7 +372,7 @@ public void testEngineAddedAsListenerToMemoryCache() {
   @Test
   public void testResourceIsRecycledWhenRemovedFromCache() {
     harness.getEngine().onResourceRemoved(harness.resource);
-    verify(harness.resourceRecycler).recycle(eq(harness.resource));
+    verify(harness.resourceRecycler).recycle(eq(harness.resource), eq(true));
   }
 
   @Test

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/GranularRoundedCorners.java
Patch:
@@ -7,7 +7,7 @@
 import java.nio.ByteBuffer;
 import java.security.MessageDigest;
 
-/** A {@link BitmapTransformation} which has a different raddius for each corner of a bitmap. */
+/** A {@link BitmapTransformation} which has a different radius for each corner of a bitmap. */
 public final class GranularRoundedCorners extends BitmapTransformation {
   private static final String ID = "com.bumptech.glide.load.resource.bitmap.GranularRoundedCorners";
   private static final byte[] ID_BYTES = ID.getBytes(CHARSET);

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/ExifInterfaceImageHeaderParser.java
Patch:
@@ -1,9 +1,9 @@
 package com.bumptech.glide.load.resource.bitmap;
 
-import android.media.ExifInterface;
 import android.os.Build;
 import androidx.annotation.NonNull;
 import androidx.annotation.RequiresApi;
+import androidx.exifinterface.media.ExifInterface;
 import com.bumptech.glide.load.ImageHeaderParser;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.util.ByteBufferUtil;
@@ -24,13 +24,13 @@ public final class ExifInterfaceImageHeaderParser implements ImageHeaderParser {
 
   @NonNull
   @Override
-  public ImageType getType(@NonNull InputStream is) throws IOException {
+  public ImageType getType(@NonNull InputStream is) {
     return ImageType.UNKNOWN;
   }
 
   @NonNull
   @Override
-  public ImageType getType(@NonNull ByteBuffer byteBuffer) throws IOException {
+  public ImageType getType(@NonNull ByteBuffer byteBuffer) {
     return ImageType.UNKNOWN;
   }
 

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
Patch:
@@ -133,7 +133,7 @@ public MethodSpec apply(ExecutableElement input) {
   }
 
   private MethodSpec overrideGlideStaticMethod(ExecutableElement methodToOverride) {
-    List<ParameterSpec> parameters = ProcessorUtil.getParameters(methodToOverride);
+    List<ParameterSpec> parameters = processorUtil.getParameters(methodToOverride);
 
     TypeElement element =
         (TypeElement) processingEnv.getTypeUtils().asElement(methodToOverride.getReturnType());
@@ -204,7 +204,7 @@ private MethodSpec overrideGlideWithMethod(
       String packageName, TypeSpec generatedRequestManager, ExecutableElement methodToOverride) {
     ClassName generatedRequestManagerClassName =
         ClassName.get(packageName, generatedRequestManager.name);
-    List<ParameterSpec> parameters = ProcessorUtil.getParameters(methodToOverride);
+    List<ParameterSpec> parameters = processorUtil.getParameters(methodToOverride);
     Preconditions.checkArgument(
         parameters.size() == 1, "Expected size of 1, but got %s", methodToOverride);
     ParameterSpec parameter = parameters.iterator().next();

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
Patch:
@@ -377,7 +377,7 @@ private MethodSpec generateRequestBuilderOverride(ExecutableElement methodToOver
         ParameterizedTypeName.get(generatedRequestBuilderClassName, ClassName.get(typeArgument));
 
     MethodSpec.Builder builder =
-        ProcessorUtil.overriding(methodToOverride).returns(generatedRequestBuilderOfType);
+        processorUtil.overriding(methodToOverride).returns(generatedRequestBuilderOfType);
     builder.addCode(
         CodeBlock.builder()
             .add(

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
Patch:
@@ -195,7 +195,8 @@ private MethodSpec generateRequestManagerRequestManagerMethodOverride(
     ClassName generatedRequestManagerName =
         ClassName.get(generatedPackageName, GENERATED_REQUEST_MANAGER_SIMPLE_NAME);
     Builder returns =
-        ProcessorUtil.overriding(method)
+        processorUtil
+            .overriding(method)
             .addAnnotation(processorUtil.nonNull())
             .returns(generatedRequestManagerName);
     return returns
@@ -247,7 +248,7 @@ private MethodSpec generateRequestManagerRequestBuilderMethodOverride(
         ParameterizedTypeName.get(generatedRequestBuilderClassName, ClassName.get(typeArgument));
 
     MethodSpec.Builder builder =
-        ProcessorUtil.overriding(methodToOverride).returns(generatedRequestBuilderOfType);
+        processorUtil.overriding(methodToOverride).returns(generatedRequestBuilderOfType);
     builder.addCode(
         ProcessorUtil.generateCastingSuperCall(generatedRequestBuilderOfType, builder.build()));
 

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsExtensionGenerator.java
Patch:
@@ -86,7 +86,7 @@ private MethodSpec generateMethodsForRequestOptionsExtension(ExecutableElement e
     // The 0th element is expected to be a RequestOptions object.
     List<? extends VariableElement> paramElements =
         element.getParameters().subList(1, element.getParameters().size());
-    List<ParameterSpec> parameters = ProcessorUtil.getParameters(paramElements);
+    List<ParameterSpec> parameters = processorUtil.getParameters(paramElements);
     builder.addParameters(parameters);
 
     String extensionRequestOptionsArgument;

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
Patch:
@@ -270,7 +270,7 @@ private MethodAndStaticVar generateStaticMethodEquivalentForRequestOptionsStatic
 
     StringBuilder createNewOptionAndCall =
         createNewOptionAndCall(
-            memoize, methodSpecBuilder, "new $T().$N(", ProcessorUtil.getParameters(staticMethod));
+            memoize, methodSpecBuilder, "new $T().$N(", processorUtil.getParameters(staticMethod));
 
     FieldSpec requiredStaticField = null;
     if (memoize) {
@@ -390,7 +390,7 @@ private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
 
     StringBuilder createNewOptionAndCall =
         createNewOptionAndCall(
-            memoize, methodSpecBuilder, "new $T().$L(", ProcessorUtil.getParameters(parameters));
+            memoize, methodSpecBuilder, "new $T().$L(", processorUtil.getParameters(parameters));
 
     FieldSpec requiredStaticField = null;
     if (memoize) {

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsOverrideGenerator.java
Patch:
@@ -67,7 +67,7 @@ public MethodSpec apply(ExecutableElement input) {
   private MethodSpec generateRequestOptionOverride(
       TypeName typeToOverrideIn, ExecutableElement methodToOverride) {
     MethodSpec.Builder result =
-        ProcessorUtil.overriding(methodToOverride).returns(typeToOverrideIn);
+        processorUtil.overriding(methodToOverride).returns(typeToOverrideIn);
     result.addCode(
         CodeBlock.builder()
             .add("return ($T) super.$N(", typeToOverrideIn, methodToOverride.getSimpleName())

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java
Patch:
@@ -137,7 +137,7 @@ public static ResourceDecoder<ParcelFileDescriptor, Bitmap> parcel(BitmapPool bi
   @Override
   public boolean handles(@NonNull T data, @NonNull Options options) {
     // Calling setDataSource is expensive so avoid doing so unless we're actually called.
-    // For non-videos this isn't any cheaper, but for videos it safes the redundant call and
+    // For non-videos this isn't any cheaper, but for videos it saves the redundant call and
     // 50-100ms.
     return true;
   }

File: samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MediaStoreDataLoader.java
Patch:
@@ -12,6 +12,7 @@
 import java.util.List;
 
 /** Loads metadata from the media store for images and videos. */
+@SuppressWarnings("InlinedApi")
 public class MediaStoreDataLoader extends AsyncTaskLoader<List<MediaStoreData>> {
   private static final String[] IMAGE_PROJECTION =
       new String[] {

File: library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java
Patch:
@@ -44,6 +44,9 @@ public interface RequestCoordinator {
   /** Must be called when a {@link Request} coordinated by this object fails. */
   void onRequestFailed(Request request);
 
+  /** Returns the top most parent {@code RequestCoordinator}. */
+  RequestCoordinator getRoot();
+
   /** A simple state enum to keep track of the states of individual subrequests. */
   enum RequestState {
     RUNNING(false),

File: library/src/main/java/com/bumptech/glide/ListPreloader.java
Patch:
@@ -225,7 +225,7 @@ private void cancelAll() {
   }
 
   private static final class PreloadTargetQueue {
-    private final Queue<PreloadTarget> queue;
+    @Synthetic final Queue<PreloadTarget> queue;
 
     // The loop is short and the only point is to create the objects.
     @SuppressWarnings("PMD.AvoidInstantiatingObjectsInLoops")

File: library/src/main/java/com/bumptech/glide/ListPreloader.java
Patch:
@@ -219,7 +219,7 @@ private void preloadItem(@Nullable T item, int position, int perItemPosition) {
   }
 
   private void cancelAll() {
-    for (int i = 0; i < maxPreload; i++) {
+    for (int i = 0; i < preloadTargetQueue.queue.size(); i++) {
       requestManager.clear(preloadTargetQueue.next(0, 0));
     }
   }

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
Patch:
@@ -178,7 +178,7 @@ public RequestManager get(@NonNull View view) {
     // prefer to just fall back to the Activity directly.
     if (activity instanceof FragmentActivity) {
       Fragment fragment = findSupportFragment(view, (FragmentActivity) activity);
-      return fragment != null ? get(fragment) : get(activity);
+      return fragment != null ? get(fragment) : get((FragmentActivity) activity);
     }
 
     // Standard Fragments.

File: library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
Patch:
@@ -15,7 +15,7 @@ public enum DecodeFormat {
    * android.graphics.Bitmap.Config#ARGB_8888} for {@link android.graphics.Bitmap#getConfig()} when
    * possible.
    *
-   * <p>On Android O+, this format will will use ARGB_8888 only when it's not possible to use {@link
+   * <p>On Android O+, this format will use ARGB_8888 only when it's not possible to use {@link
    * android.graphics.Bitmap.Config#HARDWARE}. More information is available about hardware Bitmaps
    * here: https://goo.gl/tn2A6k. If you need to disable hardware Bitmaps for a particular request,
    * use {@link com.bumptech.glide.request.RequestOptions#disallowHardwareConfig()}.
@@ -34,7 +34,7 @@ public enum DecodeFormat {
    * alpha should return {@link android.graphics.Bitmap.Config#RGB_565} for {@link
    * android.graphics.Bitmap#getConfig()}.
    *
-   * <p>On Android O+, this format will will use ARGB_8888 only when it's not possible to use {@link
+   * <p>On Android O+, this format will use ARGB_8888 only when it's not possible to use {@link
    * android.graphics.Bitmap.Config#HARDWARE}.
    */
   PREFER_RGB_565;

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
Patch:
@@ -178,7 +178,7 @@ public RequestManager get(@NonNull View view) {
     // prefer to just fall back to the Activity directly.
     if (activity instanceof FragmentActivity) {
       Fragment fragment = findSupportFragment(view, (FragmentActivity) activity);
-      return fragment != null ? get(fragment) : get((FragmentActivity) activity);
+      return fragment != null ? get(fragment) : get(activity);
     }
 
     // Standard Fragments.

File: library/src/main/java/com/bumptech/glide/load/engine/Engine.java
Patch:
@@ -388,7 +388,7 @@ public void onResourceRemoved(@NonNull final Resource<?> resource) {
   }
 
   @Override
-  public synchronized void onResourceReleased(Key cacheKey, EngineResource<?> resource) {
+  public void onResourceReleased(Key cacheKey, EngineResource<?> resource) {
     activeResources.deactivate(cacheKey);
     if (resource.isMemoryCacheable()) {
       cache.put(cacheKey, resource);

File: library/test/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -6,10 +6,10 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Matchers.notNull;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;

File: library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java
Patch:
@@ -1,10 +1,10 @@
 package com.bumptech.glide;
 
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -3,8 +3,8 @@
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/load/MultiTransformationTest.java
Patch:
@@ -4,8 +4,8 @@
 import static com.bumptech.glide.tests.Util.anyResource;
 import static com.bumptech.glide.tests.Util.mockResource;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.never;

File: library/test/src/test/java/com/bumptech/glide/load/data/BufferedOutputStreamFuzzTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.data;
 
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.when;
 

File: library/test/src/test/java/com/bumptech/glide/load/data/BufferedOutputStreamTest.java
Patch:
@@ -3,8 +3,8 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertThrows;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
Patch:
@@ -4,8 +4,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: library/test/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.data.resource;
 
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: library/test/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.bumptech.glide.load.data.resource;
 
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Matchers.isNotNull;
 import static org.mockito.Mockito.verify;
 

File: library/test/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.engine;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;

File: library/test/src/test/java/com/bumptech/glide/load/engine/DataCacheKeyTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.bumptech.glide.load.engine;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 
 import com.bumptech.glide.load.Key;

File: library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
Patch:
@@ -5,7 +5,7 @@
 import static com.bumptech.glide.tests.Util.mockResource;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.doAnswer;

File: library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
Patch:
@@ -5,7 +5,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
Patch:
@@ -7,9 +7,9 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;

File: library/test/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.bumptech.glide.load.engine;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 
 import androidx.annotation.NonNull;

File: library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
Patch:
@@ -3,9 +3,9 @@
 import static com.bumptech.glide.tests.Util.anyResource;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertNotEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.doAnswer;

File: library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
Patch:
@@ -3,8 +3,8 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: library/test/src/test/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.when;
 

File: library/test/src/test/java/com/bumptech/glide/load/model/ResourceLoaderTest.java
Patch:
@@ -3,8 +3,8 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
Patch:
@@ -4,7 +4,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assume.assumeTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.when;
 

File: library/test/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;

File: library/test/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static com.bumptech.glide.tests.Util.mockResource;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import static com.bumptech.glide.tests.Util.anyContext;
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.doAnswer;

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
Patch:
@@ -1,9 +1,9 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
Patch:
@@ -4,8 +4,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.reset;

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
Patch:
@@ -3,9 +3,9 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -5,8 +5,8 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
Patch:
@@ -1,10 +1,10 @@
 package com.bumptech.glide.load.resource.gif;
 
 import static com.bumptech.glide.tests.Util.mockResource;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
Patch:
@@ -3,9 +3,9 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.manager;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.manager;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.request;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: library/test/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
Patch:
@@ -3,7 +3,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.doAnswer;

File: library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
Patch:
@@ -3,7 +3,7 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.inOrder;

File: library/test/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
Patch:
@@ -3,7 +3,7 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;

File: library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
Patch:
@@ -5,7 +5,7 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;

File: library/test/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static com.bumptech.glide.request.transition.Transition.ViewAdapter;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: library/test/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static com.bumptech.glide.request.transition.Transition.ViewAdapter;
 import static org.junit.Assert.assertFalse;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: library/test/src/test/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static com.bumptech.glide.request.transition.Transition.ViewAdapter;
 import static org.junit.Assert.assertFalse;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: library/test/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.request.transition;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: library/test/src/test/java/com/bumptech/glide/tests/Util.java
Patch:
@@ -1,8 +1,8 @@
 package com.bumptech.glide.tests;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.RETURNS_DEFAULTS;
 import static org.mockito.Mockito.mock;
 

File: library/test/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Mockito.when;
 
 import java.io.ByteArrayInputStream;

File: library/test/src/test/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
Patch:
@@ -3,9 +3,9 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: library/src/test/java/com/bumptech/glide/request/target/CustomViewTargetTest.java
Patch:
@@ -4,7 +4,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
Patch:
@@ -178,7 +178,7 @@ public RequestManager get(@NonNull View view) {
     // prefer to just fall back to the Activity directly.
     if (activity instanceof FragmentActivity) {
       Fragment fragment = findSupportFragment(view, (FragmentActivity) activity);
-      return fragment != null ? get(fragment) : get(activity);
+      return fragment != null ? get(fragment) : get((FragmentActivity) activity);
     }
 
     // Standard Fragments.

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -769,7 +769,7 @@ public static RequestManager with(@NonNull FragmentActivity activity) {
    */
   @NonNull
   public static RequestManager with(@NonNull Fragment fragment) {
-    return getRetriever(fragment.getActivity()).get(fragment);
+    return getRetriever(fragment.getContext()).get(fragment);
   }
 
   /**

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -859,6 +859,9 @@ private static void resetOptions(BitmapFactory.Options decodeBitmapOptions) {
     decodeBitmapOptions.inJustDecodeBounds = false;
     decodeBitmapOptions.inDensity = 0;
     decodeBitmapOptions.inTargetDensity = 0;
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+      decodeBitmapOptions.outConfig = null;
+    }
     decodeBitmapOptions.outWidth = 0;
     decodeBitmapOptions.outHeight = 0;
     decodeBitmapOptions.outMimeType = null;

File: instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java
Patch:
@@ -6,8 +6,8 @@
 import static org.junit.Assert.assertThrows;
 import static org.junit.Assert.fail;
 import static org.mockito.AdditionalMatchers.not;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyBoolean;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;

File: instrumentation/src/androidTest/java/com/bumptech/glide/ErrorHandlingTest.java
Patch:
@@ -3,8 +3,8 @@
 import static com.bumptech.glide.test.Matchers.anyDrawable;
 import static com.bumptech.glide.test.Matchers.anyDrawableTarget;
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyBoolean;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/LoadBitmapTest.java
Patch:
@@ -5,8 +5,8 @@
 import static com.bumptech.glide.test.Matchers.anyDrawable;
 import static com.bumptech.glide.test.Matchers.anyDrawableTarget;
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyBoolean;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.verify;
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java
Patch:
@@ -4,8 +4,8 @@
 import static com.bumptech.glide.test.Matchers.anyDrawable;
 import static com.bumptech.glide.test.Matchers.anyDrawableTarget;
 import static org.junit.Assert.fail;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyBoolean;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.verify;
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/LoadDrawableTest.java
Patch:
@@ -3,8 +3,8 @@
 import static com.bumptech.glide.test.Matchers.anyDrawable;
 import static com.bumptech.glide.test.Matchers.anyDrawableTarget;
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyBoolean;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.verify;
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/RequestTest.java
Patch:
@@ -3,8 +3,8 @@
 import static com.bumptech.glide.test.Matchers.anyDrawable;
 import static com.bumptech.glide.test.Matchers.anyDrawableTarget;
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyBoolean;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/Matchers.java
Patch:
@@ -1,6 +1,6 @@
 package com.bumptech.glide.test;
 
-import static org.mockito.Mockito.any;
+import static org.mockito.ArgumentMatchers.any;
 
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -430,6 +430,9 @@ private static void calculateScaling(
     int widthScaleFactor = orientedSourceWidth / outWidth;
     int heightScaleFactor = orientedSourceHeight / outHeight;
 
+    // TODO: This isn't really right for both CenterOutside and CenterInside. Consider allowing
+    // DownsampleStrategy to pick, or trying to do something more sophisticated like picking the
+    // scale factor that leads to an exact match.
     int scaleFactor =
         rounding == SampleSizeRounding.MEMORY
             ? Math.max(widthScaleFactor, heightScaleFactor)

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = 21)
 public class DownsampleStrategyTest {
 
   @Test

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -430,6 +430,9 @@ private static void calculateScaling(
     int widthScaleFactor = orientedSourceWidth / outWidth;
     int heightScaleFactor = orientedSourceHeight / outHeight;
 
+    // TODO: This isn't really right for both CenterOutside and CenterInside. Consider allowing
+    // DownsampleStrategy to pick, or trying to do something more sophisticated like picking the
+    // scale factor that leads to an exact match.
     int scaleFactor =
         rounding == SampleSizeRounding.MEMORY
             ? Math.max(widthScaleFactor, heightScaleFactor)

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = 21)
 public class DownsampleStrategyTest {
 
   @Test

File: third_party/disklrucache/src/test/java/com/bumptech/glide/disklrucache/DiskLruCacheTest.java
Patch:
@@ -930,7 +930,9 @@ private static void deleteDirectory(File file) {
     assertThat(!file.exists() || file.delete()).isTrue();
   }
 
-  static final class FileSubject extends ComparableSubject<FileSubject, File> {
+  // TODO(b/134664588): Remove after go/truth-subject-lsc
+  @SuppressWarnings({"rawtypes", "unchecked"})
+  static final class FileSubject extends ComparableSubject {
     private static final Subject.Factory<FileSubject, File> FACTORY =
         new Subject.Factory<FileSubject, File>() {
           @Override

File: instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java
Patch:
@@ -60,7 +60,7 @@ public void load_withWideGamutImage_bitmapInPoolWithSizeAndConfig_usesBitmapFrom
     Bitmap bitmap =
         concurrency.get(
             Glide.with(context).asBitmap().load(ResourceIds.raw.webkit_logo_p3).submit());
-    assertThat(bitmap).isSameAs(expected);
+    assertThat(bitmap).isSameInstanceAs(expected);
   }
 
   // TODO: Even with hardware allowed, we get a wide F16. Attempting to decode the resource with
@@ -172,7 +172,7 @@ public void loadWideGamutImage_withArgb888OfSufficientSizeInPool_usesArgb8888Bit
 
     Bitmap result = concurrency.get(Glide.with(context).asBitmap().load(data).submit());
 
-    assertThat(result).isSameAs(argb8888);
+    assertThat(result).isSameInstanceAs(argb8888);
   }
 
   private static byte[] asJpeg(Bitmap bitmap) {

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java
Patch:
@@ -16,8 +16,8 @@
 
 /** Truth assertions for comparing {@link Bitmap}s. */
 // Test APIs.
-@SuppressWarnings({"WeakerAccess", "unused"})
-public final class BitmapSubject extends Subject<BitmapSubject, Bitmap> {
+@SuppressWarnings({"WeakerAccess", "unused", "rawtypes", "unchecked"})
+public final class BitmapSubject extends Subject {
 
   private static final Subject.Factory<BitmapSubject, Bitmap> FACTORY =
       new Subject.Factory<BitmapSubject, Bitmap>() {

File: third_party/disklrucache/src/test/java/com/bumptech/glide/disklrucache/DiskLruCacheTest.java
Patch:
@@ -524,7 +524,7 @@ public static void setUpClass() {
   @Test public void readingTheSameFileMultipleTimes() throws Exception {
     set("a", "a", "b");
     DiskLruCache.Value value = cache.get("a");
-    assertThat(value.getFile(0)).isSameAs(value.getFile(0));
+    assertThat(value.getFile(0)).isSameInstanceAs(value.getFile(0));
   }
 
   @Test public void rebuildJournalOnRepeatedReads() throws Exception {

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -592,7 +592,6 @@ private void calculateConfig(
         targetWidth,
         targetHeight,
         optionsWithScaling,
-        format,
         isHardwareConfigAllowed,
         isExifOrientationRequired)) {
       return;

File: library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
Patch:
@@ -62,9 +62,9 @@
  * @deprecated Use {@link CustomViewTarget} if loading the content into a view, the download API if
  *     in the background
  *     (http://bumptech.github.io/glide/doc/getting-started.html#background-threads), or a
- *     {@link CustomTarget} for any specialized use-cases. Using BaseView is unsafe if the
- *     user does not implement {@link #onLoadCleared}, resulting in recycled bitmaps being
- *     referenced from the UI and hard to root-cause crashes.
+ *     {@link CustomTarget} for any specialized use-cases. Using {@link SimpleTarget} or
+ *     {@link BaseTarget} is unsafe if the user does not implement {@link #onLoadCleared}, resulting
+ *     in recycled bitmaps being referenced from the UI and hard to root-cause crashes.
  */
 @Deprecated
 public abstract class SimpleTarget<Z> extends BaseTarget<Z> {

File: library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
Patch:
@@ -61,8 +61,9 @@ public CustomTarget() {
    * as the requested size (unless overridden by
    * {@link com.bumptech.glide.request.RequestOptions#override(int)} in the request).
    *
-   * @param width The requested width (>= 0, or == Target.SIZE_ORIGINAL).
-   * @param height The requested height (>= 0, or == Target.SIZE_ORIGINAL).
+   * @param width The requested width (> 0, or == Target.SIZE_ORIGINAL).
+   * @param height The requested height (> 0, or == Target.SIZE_ORIGINAL).
+   * @throws IllegalArgumentException if width/height doesn't meet (> 0, or == Target.SIZE_ORIGINAL)
    */
   public CustomTarget(int width, int height) {
      if (!Util.isValidDimensions(width, height)) {

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
Patch:
@@ -122,8 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**

File: library/src/main/java/com/bumptech/glide/GlideBuilder.java
Patch:
@@ -484,7 +484,7 @@ Glide build(@NonNull Context context) {
               diskCacheExecutor,
               sourceExecutor,
               GlideExecutor.newUnlimitedSourceExecutor(),
-              GlideExecutor.newAnimationExecutor(),
+              animationExecutor,
               isActiveResourceRetentionAllowed);
     }
 

File: annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
Patch:
@@ -60,7 +60,7 @@ public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptio
 
   @Override
   @NonNull
-  public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {
+  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {
     return (GlideRequests) super.addDefaultRequestListener(listener);
   }
 

File: annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
Patch:
@@ -70,7 +70,7 @@ public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptio
 
   @Override
   @NonNull
-  public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {
+  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {
     return (GlideRequests) super.addDefaultRequestListener(listener);
   }
 

File: library/src/main/java/com/bumptech/glide/GlideContext.java
Patch:
@@ -30,7 +30,7 @@ public class GlideContext extends ContextWrapper {
   private final List<RequestListener<Object>> defaultRequestListeners;
   private final Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions;
   private final Engine engine;
-  private boolean isLoggingRequestOriginsEnabled;
+  private final boolean isLoggingRequestOriginsEnabled;
   private final int logLevel;
 
   public GlideContext(

File: library/src/main/java/com/bumptech/glide/load/engine/CallbackException.java
Patch:
@@ -7,6 +7,8 @@
  * developer errors on the part of developers of Glide itself.
  */
 final class CallbackException extends RuntimeException {
+  private static final long serialVersionUID = -7530898992688511851L;
+
   CallbackException(Throwable cause) {
     super("Unexpected exception thrown by non-Glide code", cause);
   }

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -216,6 +216,8 @@ public void cancel() {
     }
   }
 
+  // We need to rethrow only CallbackException, but not other types of Throwables.
+  @SuppressWarnings("PMD.AvoidRethrowingException")
   @Override
   public void run() {
     // This should be much more fine grained, but since Java's thread pool implementation silently

File: library/src/main/java/com/bumptech/glide/RequestManager.java
Patch:
@@ -27,6 +27,7 @@
 import com.bumptech.glide.manager.RequestManagerTreeNode;
 import com.bumptech.glide.manager.RequestTracker;
 import com.bumptech.glide.manager.TargetTracker;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
@@ -153,7 +154,7 @@ private void updateRequestOptions(@NonNull RequestOptions toUpdate) {
    *
    * <p>The modified options will only be applied to loads started after this method is called.
    *
-   * @see RequestBuilder#apply(com.bumptech.glide.request.BaseRequestOptions)
+   * @see RequestBuilder#apply(BaseRequestOptions)
    *
    * @return This request manager.
    */

File: library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
Patch:
@@ -57,7 +57,7 @@ public CustomTarget() {
   }
 
   /**
-   * Creates a new {@code CustomTarget} that will return the given {@code width} and {@code length}
+   * Creates a new {@code CustomTarget} that will return the given {@code width} and {@code height}
    * as the requested size (unless overridden by
    * {@link com.bumptech.glide.request.RequestOptions#override(int)} in the request).
    *

File: library/src/main/java/com/bumptech/glide/load/engine/Engine.java
Patch:
@@ -392,7 +392,7 @@ public DiskCache getDiskCache() {
   static class DecodeJobFactory {
     @Synthetic final DecodeJob.DiskCacheProvider diskCacheProvider;
     @Synthetic final Pools.Pool<DecodeJob<?>> pool =
-        FactoryPools.simple(JOB_POOL_SIZE,
+        FactoryPools.threadSafe(JOB_POOL_SIZE,
             new FactoryPools.Factory<DecodeJob<?>>() {
           @Override
           public DecodeJob<?> create() {
@@ -452,7 +452,7 @@ static class EngineJobFactory {
     @Synthetic final GlideExecutor animationExecutor;
     @Synthetic final EngineJobListener listener;
     @Synthetic final Pools.Pool<EngineJob<?>> pool =
-        FactoryPools.simple(
+        FactoryPools.threadSafe(
             JOB_POOL_SIZE,
             new FactoryPools.Factory<EngineJob<?>>() {
               @Override

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -337,14 +337,12 @@ private static void throwIncorrectGlideModule(Exception e) {
     final Resources resources = context.getResources();
 
     registry = new Registry();
+    registry.register(new DefaultImageHeaderParser());
     // Right now we're only using this parser for HEIF images, which are only supported on OMR1+.
     // If we need this for other file types, we should consider removing this restriction.
-    // Note that order here matters. We want to check the ExifInterface parser first for orientation
-    // and then fall back to DefaultImageHeaderParser for other fields.
     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {
       registry.register(new ExifInterfaceImageHeaderParser());
     }
-    registry.register(new DefaultImageHeaderParser());
 
     List<ImageHeaderParser> imageHeaderParsers = registry.getImageHeaderParsers();
     Downsampler downsampler =

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
Patch:
@@ -331,6 +331,9 @@ public static Bitmap rotateImageExif(@NonNull BitmapPool pool, @NonNull Bitmap i
     matrix.postTranslate(-newRect.left, -newRect.top);
 
     applyMatrix(inBitmap, result, matrix);
+
+    result.setHasAlpha(inBitmap.hasAlpha());
+
     return result;
   }
 

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java
Patch:
@@ -80,8 +80,7 @@ public Bitmap get(int width, int height, Bitmap.Config config) {
     if (result != null) {
       // Decrement must be called before reconfigure.
       decrementBitmapOfSize(bestKey.size, result);
-      result.reconfigure(width, height,
-          result.getConfig() != null ? result.getConfig() : Bitmap.Config.ARGB_8888);
+      result.reconfigure(width, height, config);
     }
     return result;
   }

File: library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
Patch:
@@ -103,7 +103,7 @@ public void loadData(
       // If a race occurred where we cancelled the fetcher in cancel() and then called loadData here
       // immediately after, make sure that we cancel the newly started fetcher. We don't bother
       // checking cancelled before loadData because it's not required for correctness and would
-      // require an unlikely race to be useful. 
+      // require an unlikely race to be useful.
       if (isCancelled) {
         cancel();
       }

File: library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
Patch:
@@ -215,12 +215,12 @@ public void testBitmapsWithDisallowedConfigsAreIgnored() {
     assertEquals(0, strategy.numPuts);
   }
 
-  @Test
+  @Test @Config(sdk = 19)
   public void testBitmapsWithAllowedNullConfigsAreAllowed() {
     pool = new LruBitmapPool(100, strategy, Collections.<Bitmap.Config>singleton(null));
 
     Bitmap bitmap = createMutableBitmap();
-    Shadows.shadowOf(bitmap).setConfig(null);
+    bitmap.setConfig(null);
 
     pool.put(bitmap);
 

File: library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
@@ -101,9 +100,9 @@ public void testDoesNotRecycleGivenResource() {
     verify(resource, never()).recycle();
   }
 
-  @Test
+  @Test @Config(sdk = 19)
   public void testAsksBitmapPoolForArgb8888IfInConfigIsNull() {
-    Shadows.shadowOf(bitmap).setConfig(null);
+    bitmap.setConfig(null);
 
     centerCrop.transform(context, resource, 10, 10);
 

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsOverrideGenerator.java
Patch:
@@ -86,7 +86,8 @@ public String apply(ParameterSpec input) {
             .add(");\n")
             .build());
 
-    if (methodToOverride.getSimpleName().toString().equals("transforms")) {
+    if (methodToOverride.getSimpleName().toString().contains("transform")
+        && methodToOverride.isVarArgs()) {
       result
           .addModifiers(Modifier.FINAL)
           .addAnnotation(SafeVarargs.class)

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
Patch:
@@ -464,7 +464,7 @@ public static Bitmap roundedCorners(
    *
    * <p>This method does <em>NOT</em> resize the given {@link Bitmap}, it only rounds it's corners.
    * To both resize and round the corners of an image, consider
-   * {@link com.bumptech.glide.request.RequestOptions#transforms(Transformation[])} and/or
+   * {@link com.bumptech.glide.request.RequestOptions#transform(Transformation[])} and/or
    * {@link com.bumptech.glide.load.MultiTransformation}.
    *
    * @param inBitmap the source bitmap to use as a basis for the created bitmap.

File: library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
Patch:
@@ -255,7 +255,7 @@ public void testApplyingDefaultOptions_withTransform_retrainsTransform() {
   @Test
   @SuppressWarnings({"unchecked", "varargs"})
   public void testApplyMultiTransform() {
-    options.transforms(new CircleCrop(), new CenterCrop());
+    options.transform(new CircleCrop(), new CenterCrop());
     assertThat(options.isTransformationRequired()).isTrue();
     assertThat(options.getTransformations()).containsKey(Bitmap.class);
     assertThat(options.getTransformations().get(Bitmap.class))

File: annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java
Patch:
@@ -4,6 +4,9 @@
 import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.test.AppModuleWithExcludes;
+import java.lang.Class;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
 import java.util.HashSet;
 import java.util.Set;
 

File: annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java
Patch:
@@ -4,6 +4,9 @@
 import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.test.AppModuleWithLibraryInPackage;
+import java.lang.Class;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
 import java.util.HashSet;
 import java.util.Set;
 

File: annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java
Patch:
@@ -4,6 +4,9 @@
 import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.test.AppModuleWithMultipleExcludes;
+import java.lang.Class;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
 import java.util.HashSet;
 import java.util.Set;
 

File: annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
Patch:
@@ -5,6 +5,9 @@
 import android.util.Log;
 import com.bumptech.glide.test.EmptyAppModule;
 import com.bumptech.glide.test.EmptyLibraryModule;
+import java.lang.Class;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
 import java.util.Collections;
 import java.util.Set;
 

File: annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
Patch:
@@ -4,6 +4,9 @@
 import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.test.EmptyAppModule;
+import java.lang.Class;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
 import java.util.Collections;
 import java.util.Set;
 

File: annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedRequestManagerFactory.java
Patch:
@@ -6,6 +6,7 @@
 import com.bumptech.glide.manager.RequestManagerRetriever;
 import com.bumptech.glide.manager.RequestManagerTreeNode;
 import com.bumptech.glide.test.GlideRequests;
+import java.lang.Override;
 
 /**
  * Generated code, do not modify

File: annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
Patch:
@@ -12,6 +12,8 @@
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.GlideBuilder;
 import java.io.File;
+import java.lang.Deprecated;
+import java.lang.String;
 
 /**
  * The entry point for interacting with Glide for Applications

File: library/src/main/java/com/bumptech/glide/Registry.java
Patch:
@@ -265,7 +265,9 @@ public <Data, TResource> Registry prepend(
   // Final to avoid a PMD error.
   @NonNull
   public final Registry setResourceDecoderBucketPriorityList(@NonNull List<String> buckets) {
-    List<String> modifiedBuckets = new ArrayList<>(buckets);
+    // See #3296 and https://bugs.openjdk.java.net/browse/JDK-6260652.
+    List<String> modifiedBuckets = new ArrayList<>(buckets.size());
+    modifiedBuckets.addAll(buckets);
     modifiedBuckets.add(0, BUCKET_PREPEND_ALL);
     modifiedBuckets.add(BUCKET_APPEND_ALL);
     decoderRegistry.setBucketPriorityList(modifiedBuckets);

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
Patch:
@@ -88,7 +88,8 @@ boolean maybeWriteAppModule() {
       writeRequestOptions(generatedCodePackageName, generatedRequestOptions);
 
     TypeSpec generatedRequestBuilder =
-        requestBuilderGenerator.generate(generatedCodePackageName, indexedClassNames.extensions);
+        requestBuilderGenerator.generate(
+            generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);
     writeRequestBuilder(generatedCodePackageName, generatedRequestBuilder);
 
     TypeSpec requestManager =

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
Patch:
@@ -68,7 +68,6 @@ final class RequestManagerFactoryGenerator {
 
     TypeElement requestManagerType = elementUtils.getTypeElement(REQUEST_MANAGER_QUALIFIED_NAME);
     requestManagerClassName = ClassName.get(requestManagerType);
-
   }
 
   TypeSpec generate(String generatedCodePackageName, TypeSpec generatedRequestManagerSpec) {

File: annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
Patch:
@@ -20,8 +20,6 @@
 
 /**
  * Verifies only the output we expect to change based on the various configurations of GlideOptions.
- *
- * <p>The output for all classes is tested in {@link LegacyGlideExtensionWithOptionTest}.
  */
 @RunWith(JUnit4.class)
 public class GlideExtensionOptionsTest {

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java
Patch:
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(memoizeStaticMethod = true)
-  public static RequestOptions test(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> test(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/Extension.java
Patch:
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(override = GlideOption.OVERRIDE_EXTEND)
-  public static RequestOptions centerCrop(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> centerCrop(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/Extension.java
Patch:
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(override = GlideOption.OVERRIDE_EXTEND)
-  public static RequestOptions override(RequestOptions requestOptions, int width, int height) {
+  public static BaseRequestOptions<?> override(BaseRequestOptions<?> requestOptions, int width, int height) {
     return requestOptions
         .override(width, height)
         .centerCrop();

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/Extension.java
Patch:
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(override = GlideOption.OVERRIDE_REPLACE)
-  public static RequestOptions centerCrop(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> centerCrop(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/Extension.java
Patch:
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(skipStaticMethod = true)
-  public static RequestOptions test(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> test(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/Extension.java
Patch:
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(staticMethodName = "testSomething")
-  public static RequestOptions test(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> test(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }

File: annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/ExtensionWithOption.java
Patch:
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class ExtensionWithOption {
@@ -14,7 +14,7 @@ private ExtensionWithOption() {
 
   @NonNull
   @GlideOption
-  public static RequestOptions squareThumb(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> squareThumb(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -77,7 +77,9 @@ public class RequestBuilder<TranscodeType> implements Cloneable,
   private boolean isModelSet;
   private boolean isThumbnailBuilt;
 
+  // We only override the method to change the return type, not the functionality.
   @SuppressLint("CheckResult")
+  @SuppressWarnings("PMD.ConstructorCallsOverridableMethod")
   protected RequestBuilder(
       @NonNull Glide glide,
       RequestManager requestManager,

File: library/test/src/test/java/com/bumptech/glide/GlideContextTest.java
Patch:
@@ -12,6 +12,7 @@
 import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
+import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.ImageViewTargetFactory;
 import java.util.Collections;
@@ -42,7 +43,7 @@ public void setUp() {
         new ImageViewTargetFactory(),
         new RequestOptions(),
         transitionOptions,
-        /*defaultRequestListeners=*/ Collections.emptyList(),
+        /*defaultRequestListeners=*/ Collections.<RequestListener<Object>>emptyList(),
         mock(Engine.class),
         Log.DEBUG);
   }

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
Patch:
@@ -53,9 +53,9 @@ public boolean startNext() {
       // TODO(b/73882030): This case gets triggered when it shouldn't. With this assertion it causes
       // all loads to fail. Without this assertion it causes loads to miss the disk cache
       // unnecessarily
-      throw new IllegalStateException(
-         "Failed to find any load path from " + helper.getModelClass() + " to "
-             + helper.getTranscodeClass());
+      // throw new IllegalStateException(
+      //    "Failed to find any load path from " + helper.getModelClass() + " to "
+      //        + helper.getTranscodeClass());
     }
     while (modelLoaders == null || !hasNextModelLoader()) {
       resourceClassIndex++;

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
Patch:
@@ -53,9 +53,9 @@ public boolean startNext() {
       // TODO(b/73882030): This case gets triggered when it shouldn't. With this assertion it causes
       // all loads to fail. Without this assertion it causes loads to miss the disk cache
       // unnecessarily
-      // throw new IllegalStateException(
-      //    "Failed to find any load path from " + helper.getModelClass() + " to "
-      //        + helper.getTranscodeClass());
+      throw new IllegalStateException(
+         "Failed to find any load path from " + helper.getModelClass() + " to "
+             + helper.getTranscodeClass());
     }
     while (modelLoaders == null || !hasNextModelLoader()) {
       resourceClassIndex++;

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
Patch:
@@ -66,6 +66,9 @@ private <Model, Data> void tearDown(
     }
   }
 
+  // We're allocating in a loop to avoid allocating empty lists that will never have anything added
+  // to them.
+  @SuppressWarnings("PMD.AvoidInstantiatingObjectsInLoops")
   @NonNull
   public <A> List<ModelLoader<A, ?>> getModelLoaders(@NonNull A model) {
     List<ModelLoader<A, ?>> modelLoaders = getModelLoadersForClass(getClass(model));

File: library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
Patch:
@@ -111,6 +111,8 @@ public static void toStream(@NonNull ByteBuffer byteBuffer,
     }
   }
 
+  // We check the appropriate offsets, so this is a spurious warning.
+  @SuppressWarnings("ByteBufferBackingArray")
   @NonNull
   public static byte[] toBytes(@NonNull ByteBuffer byteBuffer) {
     final byte[] result;

File: library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowBitmap;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
@@ -239,7 +238,7 @@ private Bitmap createMutableBitmap() {
   }
 
   private Bitmap createMutableBitmap(Bitmap.Config config) {
-    Bitmap bitmap = ShadowBitmap.createBitmap(100, 100, config);
+    Bitmap bitmap = Bitmap.createBitmap(100, 100, config);
     Shadows.shadowOf(bitmap).setMutable(true);
     return bitmap;
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java
Patch:
@@ -8,8 +8,8 @@
 import android.graphics.BitmapFactory;
 import android.graphics.drawable.BitmapDrawable;
 import android.net.Uri;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.GlideApp;
 import com.bumptech.glide.test.ResourceIds;

File: instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java
Patch:
@@ -5,8 +5,8 @@
 import static org.junit.Assert.fail;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.GlideApp;

File: instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java
Patch:
@@ -17,10 +17,10 @@
 import android.graphics.drawable.Drawable;
 import android.os.Handler;
 import android.os.Looper;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
 import android.view.ViewGroup.LayoutParams;
 import android.widget.ImageView;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.engine.cache.LruResourceCache;

File: instrumentation/src/androidTest/java/com/bumptech/glide/CenterCropRegressionTest.java
Patch:
@@ -4,8 +4,8 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.test.BitmapRegressionTester;
 import com.bumptech.glide.test.CanonicalBitmap;
 import com.bumptech.glide.test.GlideApp;

File: instrumentation/src/androidTest/java/com/bumptech/glide/CenterInsideRegressionTest.java
Patch:
@@ -4,8 +4,8 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.test.BitmapRegressionTester;
 import com.bumptech.glide.test.CanonicalBitmap;
 import com.bumptech.glide.test.GlideApp;

File: instrumentation/src/androidTest/java/com/bumptech/glide/CircleCropRegressionTest.java
Patch:
@@ -4,8 +4,8 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.test.BitmapRegressionTester;
 import com.bumptech.glide.test.CanonicalBitmap;
 import com.bumptech.glide.test.GlideApp;

File: instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java
Patch:
@@ -8,10 +8,10 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
 import android.support.v4.content.ContextCompat;
 import android.util.Base64;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.ResourceIds;
 import com.bumptech.glide.test.TearDownGlide;

File: instrumentation/src/androidTest/java/com/bumptech/glide/DownsampleVideoTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.os.Build;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.test.ConcurrencyHelper;

File: instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
Patch:
@@ -13,8 +13,8 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.resource.bitmap.TransformationUtils;
 import com.bumptech.glide.request.RequestOptions;

File: instrumentation/src/androidTest/java/com/bumptech/glide/ErrorHandlingTest.java
Patch:
@@ -13,8 +13,8 @@
 import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.EncodeStrategy;
 import com.bumptech.glide.load.Options;

File: instrumentation/src/androidTest/java/com/bumptech/glide/ExternallyClearedDiskCacheTest.java
Patch:
@@ -5,8 +5,8 @@
 
 import android.content.Context;
 import android.graphics.drawable.Drawable;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.engine.cache.DiskCache.Factory;

File: instrumentation/src/androidTest/java/com/bumptech/glide/FitCenterRegressionTest.java
Patch:
@@ -5,8 +5,8 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.test.BitmapRegressionTester;
 import com.bumptech.glide.test.CanonicalBitmap;
 import com.bumptech.glide.test.GlideApp;

File: instrumentation/src/androidTest/java/com/bumptech/glide/LoadBitmapTest.java
Patch:
@@ -15,8 +15,8 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.drawable.Drawable;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;

File: instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java
Patch:
@@ -17,10 +17,10 @@
 import android.graphics.BitmapFactory;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
 import android.widget.AbsListView.LayoutParams;
 import android.widget.ImageView;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.engine.executor.GlideExecutor;

File: instrumentation/src/androidTest/java/com/bumptech/glide/LoadDrawableTest.java
Patch:
@@ -13,8 +13,8 @@
 import android.graphics.BitmapFactory;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;

File: instrumentation/src/androidTest/java/com/bumptech/glide/LoadResourcesWithDownsamplerTest.java
Patch:
@@ -13,8 +13,8 @@
 import android.os.Build;
 import android.support.annotation.DrawableRes;
 import android.support.annotation.NonNull;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.Options;

File: instrumentation/src/androidTest/java/com/bumptech/glide/LoadVideoResourceTest.java
Patch:
@@ -8,8 +8,8 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.GlideApp;
 import com.bumptech.glide.test.ResourceIds;

File: instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java
Patch:
@@ -16,8 +16,8 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.resource.bitmap.RoundedCorners;
 import com.bumptech.glide.test.ResourceIds;
 import com.bumptech.glide.test.TearDownGlide;

File: instrumentation/src/androidTest/java/com/bumptech/glide/PausedRequestsTest.java
Patch:
@@ -5,8 +5,8 @@
 import android.content.Context;
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
-import android.support.test.InstrumentationRegistry;
 import android.widget.ImageView;
+import androidx.test.InstrumentationRegistry;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.GlideApp;
 import com.bumptech.glide.test.GlideRequests;

File: instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -3,9 +3,9 @@
 import android.content.Context;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
 import android.widget.ImageView;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.manager.Lifecycle;
 import com.bumptech.glide.manager.LifecycleListener;
 import com.bumptech.glide.manager.RequestManagerTreeNode;

File: instrumentation/src/androidTest/java/com/bumptech/glide/RequestTest.java
Patch:
@@ -11,9 +11,9 @@
 
 import android.content.Context;
 import android.graphics.drawable.Drawable;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
 import android.widget.ImageView;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.request.RequestListener;

File: instrumentation/src/androidTest/java/com/bumptech/glide/RoundedCornersRegressionTest.java
Patch:
@@ -6,8 +6,8 @@
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Color;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.resource.bitmap.RoundedCorners;
 import com.bumptech.glide.test.BitmapRegressionTester;
 import com.bumptech.glide.test.CanonicalBitmap;

File: instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java
Patch:
@@ -10,8 +10,8 @@
 import android.graphics.ColorSpace;
 import android.graphics.ColorSpace.Named;
 import android.os.Build;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;
 import com.bumptech.glide.load.resource.bitmap.Downsampler;

File: instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerEmulatorTest.java
Patch:
@@ -18,8 +18,8 @@
 import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.support.annotation.Nullable;
-import android.support.test.runner.AndroidJUnit4;
 import android.util.DisplayMetrics;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.ImageHeaderParser;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;

File: instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -5,13 +5,13 @@
 import android.Manifest.permission;
 import android.content.Context;
 import android.os.Build;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.rule.GrantPermissionRule;
-import android.support.test.runner.AndroidJUnit4;
 import android.view.View;
 import android.view.WindowManager;
 import android.view.WindowManager.LayoutParams;
 import android.widget.ImageView;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.rule.GrantPermissionRule;
+import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.resource.gif.GifDrawable.GifState;
 import com.bumptech.glide.load.resource.gif.GifFrameLoader.OnEveryFrameListener;
 import com.bumptech.glide.request.target.Target;

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapRegressionTester.java
Patch:
@@ -7,7 +7,7 @@
 import android.os.Build;
 import android.os.Environment;
 import android.support.annotation.Nullable;
-import android.support.test.InstrumentationRegistry;
+import androidx.test.InstrumentationRegistry;
 import com.bumptech.glide.RequestBuilder;
 import java.io.BufferedOutputStream;
 import java.io.File;

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java
Patch:
@@ -6,8 +6,8 @@
 import android.graphics.drawable.Drawable;
 import android.support.annotation.DrawableRes;
 import android.support.annotation.NonNull;
-import android.support.test.InstrumentationRegistry;
 import android.support.v4.content.res.ResourcesCompat;
+import androidx.test.InstrumentationRegistry;
 import com.google.common.truth.FailureMetadata;
 import com.google.common.truth.Subject;
 import com.google.common.truth.Truth;

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/CanonicalBitmap.java
Patch:
@@ -5,7 +5,7 @@
 import android.graphics.BitmapFactory;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.test.InstrumentationRegistry;
+import androidx.test.InstrumentationRegistry;
 import com.bumptech.glide.util.Preconditions;
 
 public final class CanonicalBitmap {

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
Patch:
@@ -6,8 +6,8 @@
 import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.test.InstrumentationRegistry;
 import android.widget.ImageView;
+import androidx.test.InstrumentationRegistry;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.request.FutureTarget;

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/MockModelLoader.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.content.Context;
 import android.support.annotation.NonNull;
-import android.support.test.InstrumentationRegistry;
+import androidx.test.InstrumentationRegistry;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.content.Context;
 import android.content.res.Resources;
-import android.support.test.InstrumentationRegistry;
+import androidx.test.InstrumentationRegistry;
 
 /**
  * Internally in google we don't appear to be able to reference resource ids directly, this class is

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java
Patch:
@@ -1,6 +1,6 @@
 package com.bumptech.glide.test;
 
-import android.support.test.InstrumentationRegistry;
+import androidx.test.InstrumentationRegistry;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestManager;
 import org.junit.rules.TestRule;

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.test.InstrumentationRegistry;
+import androidx.test.InstrumentationRegistry;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;

File: library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
Patch:
@@ -687,7 +687,7 @@ public static final class SizedShadowView extends ShadowView {
     private LayoutParams layoutParams;
     private boolean isLaidOut;
     private boolean isLayoutRequested;
-    private final Set<OnAttachStateChangeListener> attachStateListeners = new HashSet<>();
+    final Set<OnAttachStateChangeListener> attachStateListeners = new HashSet<>();
 
     public SizedShadowView setWidth(int width) {
       this.width = width;

File: library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
Patch:
@@ -43,7 +43,7 @@ public void runRequest(@NonNull Request request) {
     if (!isPaused) {
       request.begin();
     } else {
-      request.pause();
+      request.clear();
       if (Log.isLoggable(TAG, Log.VERBOSE)) {
         Log.v(TAG, "Paused, delaying request");
       }

File: library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
Patch:
@@ -192,7 +192,7 @@ public void testCanResetSizeDynamically() {
 
     pool.setSizeMultiplier(1);
 
-    assertEquals(Math.round(MAX_SIZE * sizeMultiplier) - MAX_SIZE, strategy.numRemoves);
+    assertEquals(MAX_SIZE * sizeMultiplier - MAX_SIZE, strategy.numRemoves);
   }
 
   @Test

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -6,7 +6,6 @@
 import android.graphics.BitmapFactory;
 import android.os.Build;
 import android.support.annotation.Nullable;
-import android.support.v4.os.BuildCompat;
 import android.util.DisplayMetrics;
 import android.util.Log;
 import com.bumptech.glide.load.DecodeFormat;
@@ -90,8 +89,7 @@ public final class Downsampler {
    */
   public static final Option<Boolean> ALLOW_HARDWARE_CONFIG =
       Option.memory(
-          "com.bumptech.glide.load.resource.bitmap.Downsampler.AllowHardwareDecode",
-          BuildCompat.isAtLeastP());
+          "com.bumptech.glide.load.resource.bitmap.Downsampler.AllowHardwareDecode", false);
 
   private static final String WBMP_MIME_TYPE = "image/vnd.wap.wbmp";
   private static final String ICO_MIME_TYPE = "image/x-ico";

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -6,6 +6,7 @@
 import android.graphics.BitmapFactory;
 import android.os.Build;
 import android.support.annotation.Nullable;
+import android.support.v4.os.BuildCompat;
 import android.util.DisplayMetrics;
 import android.util.Log;
 import com.bumptech.glide.load.DecodeFormat;
@@ -89,7 +90,8 @@ public final class Downsampler {
    */
   public static final Option<Boolean> ALLOW_HARDWARE_CONFIG =
       Option.memory(
-          "com.bumptech.glide.load.resource.bitmap.Downsampler.AllowHardwareDecode", false);
+          "com.bumptech.glide.load.resource.bitmap.Downsampler.AllowHardwareDecode",
+          BuildCompat.isAtLeastP());
 
   private static final String WBMP_MIME_TYPE = "image/vnd.wap.wbmp";
   private static final String ICO_MIME_TYPE = "image/x-ico";

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -89,7 +89,7 @@ public final class Downsampler {
    */
   public static final Option<Boolean> ALLOW_HARDWARE_CONFIG =
       Option.memory(
-          "com.bumtpech.glide.load.resource.bitmap.Downsampler.AllowHardwareDecode", false);
+          "com.bumptech.glide.load.resource.bitmap.Downsampler.AllowHardwareDecode", false);
 
   private static final String WBMP_MIME_TYPE = "image/vnd.wap.wbmp";
   private static final String ICO_MIME_TYPE = "image/x-ico";

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -182,7 +182,7 @@ public RequestBuilder<TranscodeType> addListener(
   }
 
   /**
-   * Sets a {@link RequestBuilder} that is built and run iff the load started by this
+   * Sets a {@link RequestBuilder} that is built and run if the load started by this
    * {@link RequestBuilder} fails.
    *
    * <p>If this {@link RequestBuilder} uses a thumbnail that succeeds the given error

File: instrumentation/src/androidTest/java/com/bumptech/glide/LoadResourcesWithDownsamplerTest.java
Patch:
@@ -22,6 +22,7 @@
 import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.load.model.ModelLoaderFactory;
 import com.bumptech.glide.load.model.MultiModelLoaderFactory;
+import com.bumptech.glide.load.resource.bitmap.Downsampler;
 import com.bumptech.glide.signature.ObjectKey;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.GlideApp;
@@ -158,7 +159,7 @@ public void loadTransparentGifResource_asHardware_withNoOtherLoaders_decodesReso
         concurrency.get(
             GlideApp.with(context)
                 .asBitmap()
-                // Allow HARDWARE Bitmaps.
+                .set(Downsampler.ALLOW_HARDWARE_CONFIG, true)
                 .format(DecodeFormat.PREFER_ARGB_8888)
                 .load(new Object())
                 .submit());

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -88,7 +88,8 @@ public final class Downsampler {
    * <p>This option is ignored unless we're on Android O+.
    */
   public static final Option<Boolean> ALLOW_HARDWARE_CONFIG =
-      Option.memory("com.bumtpech.glide.load.resource.bitmap.Downsampler.AllowHardwareDecode");
+      Option.memory(
+          "com.bumtpech.glide.load.resource.bitmap.Downsampler.AllowHardwareDecode", false);
 
   private static final String WBMP_MIME_TYPE = "image/vnd.wap.wbmp";
   private static final String ICO_MIME_TYPE = "image/x-ico";

File: library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java
Patch:
@@ -123,7 +123,7 @@ public int read(@NonNull byte[] buffer, int byteOffset, int byteCount) throws IO
   public long skip(long byteCount) throws IOException {
     long skipped = super.skip(byteCount);
     if (skipped > 0) {
-      // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+      // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
       position = (int) (position + skipped);
     }
     return skipped;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
Patch:
@@ -385,7 +385,7 @@ public synchronized long skip(long byteCount) throws IOException {
       pos = (int) (pos + byteCount);
       return byteCount;
     }
-    // See http://errorprone.info/bugpattern/IntLongMath.
+    // See https://errorprone.info/bugpattern/IntLongMath.
     long read = (long) count - pos;
     pos = count;
 
@@ -394,7 +394,7 @@ public synchronized long skip(long byteCount) throws IOException {
         return read;
       }
       if (count - pos >= byteCount - read) {
-        // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+        // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
         pos = (int) (pos + byteCount - read);
         return byteCount;
       }

File: library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
Patch:
@@ -84,7 +84,7 @@ private long getBytesToRead(long targetByteCount) {
 
   private void updateAvailableBytesAfterRead(long bytesRead) {
     if (availableBytes != UNSET && bytesRead != END_OF_STREAM) {
-      // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+      // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
       availableBytes = (int) (availableBytes - bytesRead);
     }
   }

File: library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
Patch:
@@ -94,7 +94,7 @@ public void testAllocationOrderThatDoesNotFitExactlyIntoGivenSizeRoundsDown() {
     for (PreFillType current : sizes) {
       int currentSize =
           Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());
-      // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+      // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
       expectedSize = (int) (expectedSize + (currentSize * (maxSize / (3 * currentSize))));
     }
 

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/ExifInterfaceImageHeaderParser.java
Patch:
@@ -1,7 +1,9 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import android.media.ExifInterface;
+import android.os.Build;
 import android.support.annotation.NonNull;
+import android.support.annotation.RequiresApi;
 import com.bumptech.glide.load.ImageHeaderParser;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.util.ByteBufferUtil;
@@ -17,6 +19,7 @@
  * now this is a simple way to ensure that HEIF files are oriented correctly on platforms where
  * they're supported.
  */
+@RequiresApi(Build.VERSION_CODES.O_MR1)
 public final class ExifInterfaceImageHeaderParser implements ImageHeaderParser {
 
   @NonNull

File: library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
Patch:
@@ -569,7 +569,7 @@ public void testRequestListenerIsCalledWithTarget() {
 
   @Test
   public void testRequestListenerIsCalledWithLoadedFromMemoryIfLoadCompletesSynchronously() {
-    SingleRequest<List> request = builder.addRequestListener(listener1).build();
+    final SingleRequest<List> request = builder.addRequestListener(listener1).build();
 
     when(builder.engine
         .load(

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
Patch:
@@ -766,8 +766,9 @@ private void decodeBitmapData(GifFrame frame) {
         } else if (code == endOfInformation) {
           break;
         } else if (oldCode == NULL_CODE) {
-          pixelStack[top] = suffix[code];
-          ++top;
+          mainPixels[pi] = suffix[code];
+          ++pi;
+          ++i;
           oldCode = code;
           first = code;
           continue;

File: library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java
Patch:
@@ -47,10 +47,10 @@ public Resource<Drawable> decode(@NonNull Uri source, int width, int height,
       @NonNull Options options) {
     @DrawableRes int resId = loadResourceIdFromUri(source);
     String packageName = source.getAuthority();
-    Context toUse = packageName.equals(context.getPackageName())
+    Context targetContext = packageName.equals(context.getPackageName())
         ? context : getContextForPackage(source, packageName);
     // We can't get a theme from another application.
-    Drawable drawable = DrawableDecoderCompat.getDrawable(toUse, resId);
+    Drawable drawable = DrawableDecoderCompat.getDrawable(context, targetContext, resId);
     return NonOwnedDrawableResource.newInstance(drawable);
   }
 

File: library/src/main/java/com/bumptech/glide/ListPreloader.java
Patch:
@@ -33,7 +33,7 @@ public class ListPreloader<T> implements AbsListView.OnScrollListener {
 
   private int lastEnd;
   private int lastStart;
-  private int lastFirstVisible;
+  private int lastFirstVisible = -1;
   private int totalItemCount;
 
   private boolean isIncreasing = true;

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
Patch:
@@ -250,13 +250,12 @@ private MethodSpec generateConstructor(ClassName appGlideModule,
         "Discovered AppGlideModule from annotation: " + appGlideModule);
     // Excluded GlideModule classes from the manifest are logged in Glide's singleton.
     for (String glideModule : libraryGlideModuleClassNames) {
-      ClassName moduleClassName = ClassName.bestGuess(glideModule);
       if (excludedGlideModuleClassNames.contains(glideModule)) {
         constructorBuilder.addStatement("$T.d($S, $S)", androidLogName, GLIDE_LOG_TAG,
-            "AppGlideModule excludes LibraryGlideModule from annotation: " + moduleClassName);
+            "AppGlideModule excludes LibraryGlideModule from annotation: " + glideModule);
       } else {
         constructorBuilder.addStatement("$T.d($S, $S)", androidLogName, GLIDE_LOG_TAG,
-            "Discovered LibraryGlideModule from annotation: " + moduleClassName);
+            "Discovered LibraryGlideModule from annotation: " + glideModule);
       }
     }
     constructorBuilder.endControlFlow();

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -446,7 +446,8 @@ Uri.class, Bitmap.class, new ResourceBitmapDecoder(resourceDrawableDecoder, bitm
             AssetFileDescriptor.class,
             resourceLoaderAssetFileDescriptorFactory)
         .append(int.class, Uri.class, resourceLoaderUriFactory)
-        .append(String.class, InputStream.class, new DataUrlLoader.StreamFactory())
+        .append(String.class, InputStream.class, new DataUrlLoader.StreamFactory<String>())
+        .append(Uri.class, InputStream.class, new DataUrlLoader.StreamFactory<Uri>())
         .append(String.class, InputStream.class, new StringLoader.StreamFactory())
         .append(String.class, ParcelFileDescriptor.class, new StringLoader.FileDescriptorFactory())
         .append(

File: library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
Patch:
@@ -184,7 +184,7 @@ public Builder(Context context) {
      * returns this Builder.
      */
     public Builder setMemoryCacheScreens(float memoryCacheScreens) {
-      Preconditions.checkArgument(bitmapPoolScreens >= 0,
+      Preconditions.checkArgument(memoryCacheScreens >= 0,
           "Memory cache screens must be greater than or equal to 0");
       this.memoryCacheScreens = memoryCacheScreens;
       return this;

File: library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
Patch:
@@ -63,7 +63,9 @@ public synchronized <T, R> List<Class<R>> getResourceClasses(@NonNull Class<T> d
       }
       for (Entry<?, ?> entry : entries) {
         if (entry.handles(dataClass, resourceClass)) {
-          result.add((Class<R>) entry.resourceClass);
+          if (!result.contains((Class<R>) entry.resourceClass)) {
+            result.add((Class<R>) entry.resourceClass);
+          }
         }
       }
     }

File: library/src/main/java/com/bumptech/glide/util/Util.java
Patch:
@@ -111,6 +111,9 @@ private static int getBytesPerPixel(@Nullable Bitmap.Config config) {
       case ARGB_4444:
         bytesPerPixel = 2;
         break;
+      case RGBA_F16:
+        bytesPerPixel = 8;
+        break;
       case ARGB_8888:
       default:
         bytesPerPixel = 4;

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java
Patch:
@@ -16,6 +16,8 @@ private ResourceIds() {
   public interface raw {
     int dl_world_anim = getResourceId("raw", "dl_world_anim");
     int canonical = getResourceId("raw", "canonical");
+    int canonical_png = getResourceId("raw", "canonical_png");
+    int canonical_transparent_png = getResourceId("raw", "canonical_transparent_png");
     int interlaced_transparent_gif = getResourceId("raw", "interlaced_transparent_gif");
     int transparent_gif = getResourceId("raw", "transparent_gif");
     int opaque_gif = getResourceId("raw", "opaque_gif");

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java
Patch:
@@ -20,7 +20,6 @@
 import java.nio.ByteBuffer;
 import java.security.MessageDigest;
 
-
 /**
  * Decodes video data to Bitmaps from {@link ParcelFileDescriptor}s and
  * {@link AssetFileDescriptor}s.

File: third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java
Patch:
@@ -7,7 +7,6 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.Log;
-
 import java.io.BufferedOutputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
Patch:
@@ -64,7 +64,8 @@
  *    }
  *
  *    {@literal @java.lang.Override}
- *    public java.util.Set<java.lang.Class<?>> getExcludedModuleClasses() {
+ *    {@literal @android.support.annotation.NonNull}
+ *    public java.util.Set&lt;java.lang.Class&lt;?>> getExcludedModuleClasses() {
  *      return appGlideModule.getExcludedModuleClasses();
  *    }
  *  }
@@ -164,6 +165,7 @@ private MethodSpec generateGetExcludedModuleClasses(Collection<String> excludedC
     MethodSpec.Builder builder = MethodSpec.methodBuilder("getExcludedModuleClasses")
         .addModifiers(Modifier.PUBLIC)
         .addAnnotation(Override.class)
+        .addAnnotation(ClassName.get("android.support.annotation", "NonNull"))
         .returns(setOfClassOfWildcardOfObject);
 
     if (excludedClassNames.isEmpty()) {

File: annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.test.AppModuleWithExcludes;
 import java.lang.Class;
@@ -37,6 +38,7 @@ public boolean isManifestParsingEnabled() {
   }
 
   @Override
+  @NonNull
   public Set<Class<?>> getExcludedModuleClasses() {
     Set<Class<?>> excludedClasses = new HashSet<Class<?>>();
     excludedClasses.add(com.bumptech.glide.test.EmptyLibraryModule.class);

File: annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.test.AppModuleWithMultipleExcludes;
 import java.lang.Class;
@@ -38,6 +39,7 @@ public boolean isManifestParsingEnabled() {
   }
 
   @Override
+  @NonNull
   public Set<Class<?>> getExcludedModuleClasses() {
     Set<Class<?>> excludedClasses = new HashSet<Class<?>>();
     excludedClasses.add(com.bumptech.glide.test.EmptyLibraryModule1.class);

File: annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.test.EmptyAppModule;
 import com.bumptech.glide.test.EmptyLibraryModule;
@@ -39,6 +40,7 @@ public boolean isManifestParsingEnabled() {
   }
 
   @Override
+  @NonNull
   public Set<Class<?>> getExcludedModuleClasses() {
     return Collections.emptySet();
   }

File: annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.test.EmptyAppModule;
 import java.lang.Class;
@@ -36,6 +37,7 @@ public boolean isManifestParsingEnabled() {
   }
 
   @Override
+  @NonNull
   public Set<Class<?>> getExcludedModuleClasses() {
     return Collections.emptySet();
   }

File: annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
Patch:
@@ -38,7 +38,8 @@ public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode tr
 
   @Override
   @CheckResult
-  public <ResourceType> GlideRequest<ResourceType> as(Class<ResourceType> resourceClass) {
+  @NonNull
+  public <ResourceType> GlideRequest<ResourceType> as(@NonNull Class<ResourceType> resourceClass) {
     return new GlideRequest<>(glide, this, resourceClass, context);
   }
 

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
Patch:
@@ -39,7 +39,8 @@ public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode tr
 
   @Override
   @CheckResult
-  public <ResourceType> GlideRequest<ResourceType> as(Class<ResourceType> resourceClass) {
+  @NonNull
+  public <ResourceType> GlideRequest<ResourceType> as(@NonNull Class<ResourceType> resourceClass) {
     return new GlideRequest<>(glide, this, resourceClass, context);
   }
 

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
Patch:
@@ -64,6 +64,7 @@ public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> i
 
   @Override
   @CheckResult
+  @NonNull
   protected GlideRequest<File> getDownloadOnlyRequest() {
     return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
Patch:
@@ -39,7 +39,8 @@ public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode tr
 
   @Override
   @CheckResult
-  public <ResourceType> GlideRequest<ResourceType> as(Class<ResourceType> resourceClass) {
+  @NonNull
+  public <ResourceType> GlideRequest<ResourceType> as(@NonNull Class<ResourceType> resourceClass) {
     return new GlideRequest<>(glide, this, resourceClass, context);
   }
 

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
Patch:
@@ -273,6 +273,7 @@ private MethodSpec generateAdditionalRequestManagerMethodLegacy(
         .returns(parameterizedTypeName)
         .addJavadoc(processorUtil.generateSeeMethodJavadoc(extensionMethod))
         .addAnnotation(AnnotationSpec.builder(NON_NULL_CLASS_NAME).build())
+        .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
         .addStatement(
             "$T requestBuilder = this.as($T.class)", parameterizedTypeName, returnTypeClassName)
         .addStatement("$T.$N(requestBuilder)",
@@ -294,6 +295,7 @@ private MethodSpec generateAdditionalRequestManagerMethodNew(
         .returns(parameterizedTypeName)
         .addJavadoc(processorUtil.generateSeeMethodJavadoc(extensionMethod))
         .addAnnotation(AnnotationSpec.builder(NON_NULL_CLASS_NAME).build())
+        .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
         .addStatement(
             "return ($T) $T.$N(this.as($T.class))",
             parameterizedTypeName,

File: annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
Patch:
@@ -47,6 +47,7 @@ public <ResourceType> GlideRequest<ResourceType> as(Class<ResourceType> resource
    * @see ExtensionWithType#asNumber(RequestBuilder)
    */
   @NonNull
+  @CheckResult
   public GlideRequest<Number> asNumber() {
     return (GlideRequest<Number>) ExtensionWithType.asNumber(this.as(Number.class));
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
Patch:
@@ -47,6 +47,7 @@ public <ResourceType> GlideRequest<ResourceType> as(Class<ResourceType> resource
    * @see ExtensionWithType#asInteger(RequestBuilder)
    */
   @NonNull
+  @CheckResult
   public GlideRequest<Number> asInteger() {
     GlideRequest<Number> requestBuilder = this.as(Number.class);
     ExtensionWithType.asInteger(requestBuilder);

File: annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/ExtensionWithType.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.test;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideType;
@@ -11,6 +12,7 @@ private ExtensionWithType() {
     // Utility class.
   }
 
+  @NonNull
   @GlideType(Number.class)
   public static RequestBuilder<Number> asNumber(RequestBuilder<Number> builder) {
     return builder;

File: annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
Patch:
@@ -46,6 +46,7 @@ public <ResourceType> GlideRequest<ResourceType> as(Class<ResourceType> resource
   /**
    * @see ExtensionWithType#asNumber(RequestBuilder)
    */
+  @NonNull
   public GlideRequest<Number> asNumber() {
     return (GlideRequest<Number>) ExtensionWithType.asNumber(this.as(Number.class));
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
Patch:
@@ -46,6 +46,7 @@ public <ResourceType> GlideRequest<ResourceType> as(Class<ResourceType> resource
   /**
    * @see ExtensionWithType#asInteger(RequestBuilder)
    */
+  @NonNull
   public GlideRequest<Number> asInteger() {
     GlideRequest<Number> requestBuilder = this.as(Number.class);
     ExtensionWithType.asInteger(requestBuilder);

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -577,6 +577,7 @@ GlideContext getGlideContext() {
    * {@link com.bumptech.glide.load.engine.prefill.PreFillType.Builder Builders} representing
    * individual sizes and configurations of {@link android.graphics.Bitmap}s to be pre-filled.
    */
+  @SuppressWarnings("unused") // Public API
   public void preFillBitmapPool(@NonNull PreFillType.Builder... bitmapAttributeBuilders) {
     bitmapPreFiller.preFill(bitmapAttributeBuilders);
   }
@@ -644,6 +645,7 @@ public RequestManagerRetriever getRequestManagerRetriever() {
    *
    * @return the previous MemoryCategory used by Glide.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   @NonNull
   public MemoryCategory setMemoryCategory(@NonNull MemoryCategory memoryCategory) {
     // Engine asserts this anyway when removing resources, fail faster and consistently

File: library/src/main/java/com/bumptech/glide/ListPreloader.java
Patch:
@@ -224,6 +224,8 @@ private void cancelAll() {
   private static final class PreloadTargetQueue {
     private final Queue<PreloadTarget> queue;
 
+    // The loop is short and the only point is to create the objects.
+    @SuppressWarnings("PMD.AvoidInstantiatingObjectsInLoops")
     PreloadTargetQueue(int size) {
       queue = Util.createQueue(size);
 

File: library/src/main/java/com/bumptech/glide/load/MultiTransformation.java
Patch:
@@ -18,7 +18,7 @@ public class MultiTransformation<T> implements Transformation<T> {
   @SafeVarargs
   @SuppressWarnings("varargs")
   public MultiTransformation(Transformation<T>... transformations) {
-    if (transformations.length < 1) {
+    if (transformations.length == 0) {
       throw new IllegalArgumentException(
           "MultiTransformation must contain at least one Transformation");
     }

File: library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
Patch:
@@ -51,6 +51,9 @@ public boolean startNext() {
       }
 
       Key sourceId = cacheKeys.get(sourceIdIndex);
+      // PMD.AvoidInstantiatingObjectsInLoops The loop iterates a limited number of times
+      // and the actions it performs are much more expensive than a single allocation.
+      @SuppressWarnings("PMD.AvoidInstantiatingObjectsInLoops")
       Key originalKey = new DataCacheKey(sourceId, helper.getSignature());
       cacheFile = helper.getDiskCache().get(originalKey);
       if (cacheFile != null) {

File: library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
Patch:
@@ -75,7 +75,6 @@ public Class<Data> getDataClass() {
 
   @Override
   public String toString() {
-    return "LoadPath{" + "decodePaths="
-        + Arrays.toString(decodePaths.toArray(new DecodePath<?, ?, ?>[decodePaths.size()])) + '}';
+    return "LoadPath{" + "decodePaths=" + Arrays.toString(decodePaths.toArray()) + '}';
   }
 }

File: library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java
Patch:
@@ -22,7 +22,7 @@ public class DiskLruCacheWrapper implements DiskCache {
 
   private static final int APP_VERSION = 1;
   private static final int VALUE_COUNT = 1;
-  private static DiskLruCacheWrapper wrapper = null;
+  private static DiskLruCacheWrapper wrapper;
 
   private final SafeKeyGenerator safeKeyGenerator;
   private final File directory;

File: library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java
Patch:
@@ -37,7 +37,7 @@ public static class Factory implements ModelLoaderFactory<File, ByteBuffer> {
 
     @NonNull
     @Override
-    public ModelLoader<File, ByteBuffer> build(MultiModelLoaderFactory multiFactory) {
+    public ModelLoader<File, ByteBuffer> build(@NonNull MultiModelLoaderFactory multiFactory) {
       return new ByteBufferFileLoader();
     }
 
@@ -47,7 +47,7 @@ public void teardown() {
     }
   }
 
-  private static class ByteBufferFetcher implements DataFetcher<ByteBuffer> {
+  private static final class ByteBufferFetcher implements DataFetcher<ByteBuffer> {
 
     private final File file;
 

File: library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
Patch:
@@ -152,12 +152,13 @@ public Class<InputStream> getDataClass() {
 
     @NonNull
     @Override
-    public final ModelLoader<String, InputStream> build(MultiModelLoaderFactory multiFactory) {
+    public ModelLoader<String, InputStream> build(
+        @NonNull MultiModelLoaderFactory multiFactory) {
       return new DataUrlLoader<>(opener);
     }
 
     @Override
-    public final void teardown() {
+    public void teardown() {
       // Do nothing.
     }
   }

File: library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
Patch:
@@ -52,7 +52,7 @@ public interface FileOpener<Data> {
     Class<Data> getDataClass();
   }
 
-  private static class FileFetcher<Data> implements DataFetcher<Data> {
+  private static final class FileFetcher<Data> implements DataFetcher<Data> {
     private final File file;
     private final FileOpener<Data> opener;
     private Data data;
@@ -118,7 +118,7 @@ public Factory(FileOpener<Data> opener) {
 
     @NonNull
     @Override
-    public final ModelLoader<File, Data> build(MultiModelLoaderFactory multiFactory) {
+    public final ModelLoader<File, Data> build(@NonNull MultiModelLoaderFactory multiFactory) {
       return new FileLoader<>(opener);
     }
 

File: library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
Patch:
@@ -68,8 +68,7 @@ public boolean handles(@NonNull Model model) {
 
   @Override
   public String toString() {
-    return "MultiModelLoader{" + "modelLoaders=" + Arrays
-        .toString(modelLoaders.toArray(new ModelLoader<?, ?>[modelLoaders.size()])) + '}';
+    return "MultiModelLoader{" + "modelLoaders=" + Arrays.toString(modelLoaders.toArray()) + '}';
   }
 
   static class MultiFetcher<Data> implements DataFetcher<Data>, DataCallback<Data> {

File: library/src/main/java/com/bumptech/glide/load/model/StringLoader.java
Patch:
@@ -42,7 +42,8 @@ private static Uri parseUri(String model) {
     Uri uri;
     if (TextUtils.isEmpty(model)) {
       return null;
-    } else if (model.startsWith("/")) {
+    // See https://pmd.github.io/pmd-6.0.0/pmd_rules_java_performance.html#simplifystartswith
+    } else if (model.charAt(0) == '/') {
       uri = toFileUri(model);
     } else {
       uri = Uri.parse(model);

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
Patch:
@@ -69,6 +69,7 @@ public Resource<Drawable> transform(@NonNull Context context,
     }
   }
 
+  // It's clearer to cast the result in a separate line from obtaining it.
   @SuppressWarnings({"unchecked", "PMD.UnnecessaryLocalBeforeReturn"})
   private Resource<Drawable> newDrawableResource(
       Context context, Resource<Bitmap> transformed) {

File: library/src/main/java/com/bumptech/glide/util/FixedPreloadSizeProvider.java
Patch:
@@ -25,6 +25,9 @@ public FixedPreloadSizeProvider(int width, int height) {
 
   @Nullable
   @Override
+  // It's better to take on the risk that callers may mutate the array when there isn't any reason
+  // for them to do so than it the performance overhead of copying the array with every call.
+  @SuppressWarnings("PMD.MethodReturnsInternalArray")
   public int[] getPreloadSize(@NonNull T item, int adapterPosition, int itemPosition) {
     return size;
   }

File: library/src/main/java/com/bumptech/glide/util/LruCache.java
Patch:
@@ -15,10 +15,10 @@
  * @param <Y> The type of the values.
  */
 public class LruCache<T, Y> {
-  private final LinkedHashMap<T, Y> cache = new LinkedHashMap<>(100, 0.75f, true);
+  private final Map<T, Y> cache = new LinkedHashMap<>(100, 0.75f, true);
   private final long initialMaxSize;
   private long maxSize;
-  private long currentSize = 0;
+  private long currentSize;
 
   /**
    * Constructor for LruCache.

File: library/src/main/java/com/bumptech/glide/util/Util.java
Patch:
@@ -81,7 +81,7 @@ public static int getBitmapByteSize(@NonNull Bitmap bitmap) {
       // Workaround for KitKat initial release NPE in Bitmap, fixed in MR1. See issue #148.
       try {
         return bitmap.getAllocationByteCount();
-      } catch (NullPointerException e) {
+      } catch (@SuppressWarnings("PMD.AvoidCatchingNPE") NullPointerException e) {
         // Do nothing.
       }
     }

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -30,6 +30,7 @@
 import com.bumptech.glide.request.target.ViewTarget;
 import com.bumptech.glide.signature.ApplicationVersionSignature;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import java.io.File;
 import java.net.URL;
@@ -572,7 +573,7 @@ public <Y extends Target<TranscodeType>> Y into(@NonNull Y target) {
   }
 
   @NonNull
-  private <Y extends Target<TranscodeType>> Y into(
+  @Synthetic <Y extends Target<TranscodeType>> Y into(
       @NonNull Y target,
       @Nullable RequestListener<TranscodeType> targetListener) {
     return into(target, targetListener, getMutableOptions());

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
Patch:
@@ -111,7 +111,7 @@ static String getBitmapString(int size) {
   static class KeyPool extends BaseKeyPool<Key> {
 
     public Key get(int size) {
-      Key result = get();
+      Key result = super.get();
       result.init(size);
       return result;
     }
@@ -149,6 +149,8 @@ public int hashCode() {
       return size;
     }
 
+    // PMD.AccessorMethodGeneration: https://github.com/pmd/pmd/issues/807
+    @SuppressWarnings("PMD.AccessorMethodGeneration")
     @Override
     public String toString() {
       return getBitmapString(size);

File: library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
Patch:
@@ -433,7 +433,8 @@ public synchronized Thread newThread(@NonNull Runnable runnable) {
       final Thread result = new Thread(runnable, "glide-" + name + "-thread-" + threadNum) {
         @Override
         public void run() {
-          android.os.Process.setThreadPriority(DEFAULT_PRIORITY);
+          // why PMD suppression is needed: https://github.com/pmd/pmd/issues/808
+          android.os.Process.setThreadPriority(DEFAULT_PRIORITY); //NOPMD AccessorMethodGeneration
           if (preventNetworkOperations) {
             StrictMode.setThreadPolicy(
                 new ThreadPolicy.Builder()

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
Patch:
@@ -69,7 +69,7 @@ public Resource<Drawable> transform(@NonNull Context context,
     }
   }
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"unchecked", "PMD.UnnecessaryLocalBeforeReturn"})
   private Resource<Drawable> newDrawableResource(
       Context context, Resource<Bitmap> transformed) {
     Resource<? extends Drawable> result =

File: library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
Patch:
@@ -8,6 +8,7 @@
 import android.support.annotation.Nullable;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.request.transition.Transition;
+import com.bumptech.glide.util.Synthetic;
 
 /**
  * A one time use {@link com.bumptech.glide.request.target.Target} class that loads a resource into
@@ -51,7 +52,8 @@ public void onResourceReady(@NonNull Z resource, @Nullable Transition<? super Z>
     HANDLER.obtainMessage(MESSAGE_CLEAR, this).sendToTarget();
   }
 
-  private void clear() {
+  @SuppressWarnings("WeakerAccess")
+  @Synthetic void clear() {
     requestManager.clear(this);
   }
 }

File: library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
Patch:
@@ -30,6 +30,8 @@ public void setUp() {
 
   @After
   public void tearDown() {
+    // GC before delete() to release files on Windows (https://stackoverflow.com/a/4213208/253468)
+    System.gc();
     if (!file.delete()) {
       throw new IllegalStateException("Failed to delete: " + file);
     }

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
Patch:
@@ -126,6 +126,8 @@ String encode() throws IOException {
     }
 
     void tearDown() {
+      // GC before delete() to release files on Windows (https://stackoverflow.com/a/4213208/253468)
+      System.gc();
       if (file.exists() && !file.delete()) {
         throw new IllegalStateException("Failed to delete: " + file);
       }

File: library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
Patch:
@@ -43,7 +43,9 @@ public void pause() {
   @Override
   public void clear() {
     primary.clear();
-    if (primary.isFailed()) {
+    // Don't check primary.isFailed() here because it will have been reset by the clear call
+    // immediately before this.
+    if (error.isRunning()) {
       error.clear();
     }
   }

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/ResourceBitmapDecoder.java
Patch:
@@ -48,6 +48,9 @@ public boolean handles(@NonNull Uri source, @NonNull Options options) {
   public Resource<Bitmap> decode(@NonNull Uri source, int width, int height,
       @NonNull Options options) {
     Resource<Drawable> drawableResource = drawableDecoder.decode(source, width, height, options);
+    if (drawableResource == null) {
+      return null;
+    }
     Drawable drawable = drawableResource.get();
     return DrawableToBitmapConverter.convert(bitmapPool, drawable, width, height);
   }

File: library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java
Patch:
@@ -7,6 +7,7 @@
 import android.net.Uri;
 import android.support.annotation.DrawableRes;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.Resource;
@@ -40,7 +41,7 @@ public boolean handles(@NonNull Uri source, @NonNull Options options) {
     return source.getScheme().equals(ContentResolver.SCHEME_ANDROID_RESOURCE);
   }
 
-  @NonNull
+  @Nullable
   @Override
   public Resource<Drawable> decode(@NonNull Uri source, int width, int height,
       @NonNull Options options) {

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -107,6 +107,9 @@ public RequestBuilder<TranscodeType> apply(@NonNull RequestOptions requestOption
     return this;
   }
 
+  // We're checking to see if we need to clone our options object because we want to make sure the
+  // original is never modified, so we need reference equality.
+  @SuppressWarnings("ReferenceEquality")
   @NonNull
   protected RequestOptions getMutableOptions() {
     return defaultRequestOptions == this.requestOptions

File: library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
Patch:
@@ -51,6 +51,8 @@ void setLoggingDetails(Key key, DataSource dataSource, Class<?> dataClass) {
     this.dataClass = dataClass;
   }
 
+  // No need to synchronize when doing nothing whatsoever.
+  @SuppressWarnings("UnsynchronizedOverridesSynchronized")
   @Override
   public Throwable fillInStackTrace() {
     // Avoid an expensive allocation by doing nothing here. Causes should contain all relevant

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategy.java
Patch:
@@ -13,6 +13,7 @@ class AttributeStrategy implements LruPoolStrategy {
   private final KeyPool keyPool = new KeyPool();
   private final GroupedLinkedMap<Key, Bitmap> groupedMap = new GroupedLinkedMap<>();
 
+  @Override
   public void put(Bitmap bitmap) {
     final Key key = keyPool.get(bitmap.getWidth(), bitmap.getHeight(), bitmap.getConfig());
 

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
Patch:
@@ -110,7 +110,9 @@ private <T> T getForKey(Key key, Class<T> arrayClass) {
     return result;
   }
 
-  @SuppressWarnings("unchecked")
+
+  // Our cast is safe because the Key is based on the type.
+  @SuppressWarnings({"unchecked", "TypeParameterUnusedInFormals"})
   @Nullable
   private <T> T getArrayForKey(Key key) {
     return (T) groupedMap.get(key);

File: library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactory.java
Patch:
@@ -17,6 +17,7 @@ public class DefaultConnectivityMonitorFactory implements ConnectivityMonitorFac
   private static final String NETWORK_PERMISSION = "android.permission.ACCESS_NETWORK_STATE";
 
   @NonNull
+  @Override
   public ConnectivityMonitor build(
       @NonNull Context context,
       @NonNull ConnectivityMonitor.ConnectivityListener listener) {

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
Patch:
@@ -327,6 +327,7 @@ public RequestManager get(@NonNull android.app.Fragment fragment) {
     }
   }
 
+  @NonNull
   RequestManagerFragment getRequestManagerFragment(
       @NonNull final android.app.FragmentManager fm, @Nullable android.app.Fragment parentHint) {
     RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);

File: library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
Patch:
@@ -13,9 +13,9 @@
 import static org.mockito.Mockito.when;
 
 import android.graphics.Bitmap;
+import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
 import org.junit.Before;
@@ -228,7 +228,7 @@ private Bitmap createMutableBitmap(Bitmap.Config config) {
   }
 
   private static class MockStrategy implements LruPoolStrategy {
-    private final LinkedList<Bitmap> bitmaps = new LinkedList<>();
+    private final ArrayDeque<Bitmap> bitmaps = new ArrayDeque<>();
     private int numRemoves;
     private int numPuts;
 

File: library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
Patch:
@@ -94,7 +94,8 @@ public void testAllocationOrderThatDoesNotFitExactlyIntoGivenSizeRoundsDown() {
     for (PreFillType current : sizes) {
       int currentSize =
           Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());
-      expectedSize += currentSize * (maxSize / (3 * currentSize));
+      // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+      expectedSize = (int) (expectedSize + (currentSize * (maxSize / (3 * currentSize))));
     }
 
     assertEquals(expectedSize, byteSize);

File: library/src/test/java/com/bumptech/glide/load/model/ByteArrayLoaderTest.java
Patch:
@@ -43,7 +43,7 @@ public void testCanHandleByteArray() {
 
   @Test
   public void testFetcherReturnsObjectReceivedFromConverter() throws IOException {
-    byte[] data = "fake".getBytes();
+    byte[] data = "fake".getBytes("UTF-8");
     Object expected = new Object();
     when(converter.convert(eq(data))).thenReturn(expected);
 

File: library/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java
Patch:
@@ -118,7 +118,7 @@ public void testDecodeWrongEncoding() {
     assertNotNull(callback.exception);
   }
 
-  private class CallBack implements DataFetcher.DataCallback<Object> {
+  private static final class CallBack implements DataFetcher.DataCallback<Object> {
 
     public Object data;
     public Exception exception;

File: library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
Patch:
@@ -38,11 +38,11 @@ public void tearDown() {
   @Test
   public void testWritesDataFromInputStreamToOutputStream() throws IOException {
     String fakeData = "SomeRandomFakeData";
-    ByteArrayInputStream is = new ByteArrayInputStream(fakeData.getBytes());
+    ByteArrayInputStream is = new ByteArrayInputStream(fakeData.getBytes("UTF-8"));
     encoder.encode(is, file, new Options());
 
     byte[] data = ByteBufferUtil.toBytes(ByteBufferUtil.fromFile(file));
 
-    assertEquals(fakeData, new String(data));
+    assertEquals(fakeData, new String(data, "UTF-8"));
   }
 }

File: library/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
Patch:
@@ -136,7 +136,7 @@ public void testDoesNotInteractWithModelCacheIfNull() {
             urlLoader.buildLoadData(new Object(), width, height, options)).fetcher);
   }
 
-  private class TestLoader extends BaseGlideUrlLoader<Object> {
+  private static final class TestLoader extends BaseGlideUrlLoader<Object> {
     String resultUrl;
 
     TestLoader(ModelLoader<GlideUrl, InputStream> concreteLoader,

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
Patch:
@@ -122,7 +122,7 @@ String encode() throws IOException {
       BitmapEncoder encoder = new BitmapEncoder();
       encoder.encode(resource, file, options);
       byte[] data = ByteBufferUtil.toBytes(ByteBufferUtil.fromFile(file));
-      return new String(data);
+      return new String(data, "UTF-8");
     }
 
     void tearDown() {

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
Patch:
@@ -184,7 +184,7 @@ private Resource<Bitmap> mockResource(int width, int height) {
     return resource;
   }
 
-  private class SizeTrackingTransform extends BitmapTransformation {
+  private static final class SizeTrackingTransform extends BitmapTransformation {
     int givenWidth;
     int givenHeight;
 

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -625,6 +625,7 @@ public static final class BitmapTrackingShadowCanvas extends ShadowCanvas {
     private final Set<Bitmap> drawnBitmaps = new HashSet<>();
 
     @Implementation
+    @Override
     public void drawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint) {
       drawnBitmaps.add(bitmap);
     }

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
Patch:
@@ -8,6 +8,7 @@
 import android.graphics.Bitmap;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
+import java.nio.charset.Charset;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -71,7 +72,7 @@ String getTranscodedDescription() {
       BitmapBytesTranscoder transcoder = new BitmapBytesTranscoder(compressFormat, quality);
       Resource<byte[]> bytesResource = transcoder.transcode(bitmapResource, options);
 
-      return new String(bytesResource.get());
+      return new String(bytesResource.get(), Charset.defaultCharset());
     }
   }
 }

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
Patch:
@@ -9,6 +9,7 @@
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -31,7 +32,7 @@ public void setUp() {
   @Test
   public void testReturnsBytesOfGivenGifDrawable() {
     for (String fakeData : new String[] { "test", "1235asfklaw3", "@$@#" }) {
-      ByteBuffer expected = ByteBuffer.wrap(fakeData.getBytes());
+      ByteBuffer expected = ByteBuffer.wrap(fakeData.getBytes(Charset.defaultCharset()));
       when(gifDrawable.getBuffer()).thenReturn(expected);
 
       Resource<byte[]> transcoded = transcoder.transcode(resource, new Options());

File: library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
Patch:
@@ -187,6 +187,7 @@ public static final class PermissionConnectivityManager extends ShadowConnectivi
     private boolean isNetworkPermissionGranted = true;
 
     @Implementation
+    @Override
     public NetworkInfo getActiveNetworkInfo() {
       if (!isNetworkPermissionGranted) {
         throw new SecurityException();

File: library/src/test/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java
Patch:
@@ -130,6 +130,7 @@ public static class UpdateShadowAppWidgetManager extends ShadowAppWidgetManager
     ComponentName updatedComponentName;
 
     @Implementation
+    @Override
     public void updateAppWidget(int[] appWidgetIds, RemoteViews views) {
       updatedWidgetIds = appWidgetIds;
       updatedRemoteViews = views;

File: library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
Patch:
@@ -98,6 +98,7 @@ public static class UpdateShadowNotificationManager extends ShadowNotificationMa
     Notification updatedNotification;
 
     @Implementation
+    @Override
     public void notify(String notificationTag, int notificationId, Notification notification) {
       updatedNotificationTag = notificationTag;
       updatedNotificationId = notificationId;

File: library/src/test/java/com/bumptech/glide/tests/GlideShadowLooper.java
Patch:
@@ -19,6 +19,7 @@ public static MessageQueue myQueue() {
   }
 
   @Resetter
+  @Override
   public void reset() {
     queue = mock(MessageQueue.class);
   }

File: library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
Patch:
@@ -122,7 +122,7 @@ private static boolean isLowMemoryDevice(ActivityManager activityManager) {
     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
       return activityManager.isLowRamDevice();
     } else {
-      return false;
+      return true;
     }
   }
 

File: library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
Patch:
@@ -32,7 +32,6 @@ public class MemorySizeCalculatorTest {
   @Before
   public void setUp() {
     initialSdkVersion = Build.VERSION.SDK_INT;
-    Util.setSdkVersionInt(18);
     harness = new MemorySizeHarness();
   }
 
@@ -139,7 +138,6 @@ public void testCumulativePoolAndMemoryCacheSizesAreSmallerOnLowMemoryDevices()
   @Test
   public void testByteArrayPoolSize_withLowRamDevice_isHalfTheSpecifiedBytes() {
     LowRamActivityManager activityManager = Shadow.extract(harness.activityManager);
-    Util.setSdkVersionInt(19);
     activityManager.setMemoryClass(getLargeEnoughMemoryClass());
     activityManager.setIsLowRam();
 

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -443,8 +443,10 @@ private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource)
       if (lockedResource != null) {
         lockedResource.unlock();
       }
-      onEncodeComplete();
     }
+    // Call onEncodeComplete outside the finally block so that it's not called if the encode process
+    // throws.
+    onEncodeComplete();
   }
 
   private <Data> Resource<R> decodeFromData(DataFetcher<?> fetcher, Data data,

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -619,7 +619,7 @@ private <Y extends Target<TranscodeType>> Y into(
   // equivalent. See #2663 for additional context.
   private boolean isSkipMemoryCacheWithCompletePreviousRequest(
       RequestOptions options, Request previous) {
-    return options.isSkipMemoryCacheSet() && previous.isComplete();
+    return !options.isMemoryCacheable() && previous.isComplete();
   }
 
   /**

File: annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.compiler.test.Util.annotation;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
@@ -43,7 +44,7 @@ public void compilation_generatesExpectedIndexer() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(annotation(expectedClassName))
         .contentsAsUtf8String()
-        .isEqualTo(forResource(expectedClassName + ".java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource(expectedClassName + ".java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {

File: annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.annotation.compiler;
 
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
 import static com.google.testing.compile.CompilationSubject.assertThat;
@@ -94,7 +95,7 @@ String file() {
   }
 
   private void runTest(String subDir, Subject subject) throws IOException {
-     Compilation compilation =
+    Compilation compilation =
         javac()
             .withProcessors(new GlideAnnotationProcessor())
             .compile(
@@ -105,7 +106,7 @@ private void runTest(String subDir, Subject subject) throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage(subject.name()))
         .contentsAsUtf8String()
-        .isEqualTo(forResource(subDir, subject.file()).getCharContent(true));
+        .isEqualTo(asUnixChars(forResource(subDir, subject.file()).getCharContent(true)));
   }
 
   private JavaFileObject extension(String subdir) {

File: annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.annotation.compiler;
 
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
 import static com.google.testing.compile.CompilationSubject.assertThat;
@@ -83,7 +84,7 @@ String file() {
   }
 
   private void runTest(String subDir, Subject subject) throws IOException {
-     Compilation compilation =
+    Compilation compilation =
         javac()
             .withProcessors(new GlideAnnotationProcessor())
             .compile(
@@ -94,7 +95,7 @@ private void runTest(String subDir, Subject subject) throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage(subject.name()))
         .contentsAsUtf8String()
-        .isEqualTo(forResource(subDir, subject.file()).getCharContent(true));
+        .isEqualTo(asUnixChars(forResource(subDir, subject.file()).getCharContent(true)));
   }
 
   private JavaFileObject extension(String subdir) {

File: annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.compiler.test.Util.annotation;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
@@ -45,7 +46,7 @@ public void compilation_generatesExpectedIndexerForModules() throws IOException
     assertThat(compilation)
         .generatedSourceFile(annotation(expectedClassName))
         .contentsAsUtf8String()
-        .isEqualTo(forResource(expectedClassName + ".java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource(expectedClassName + ".java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {

File: library/src/main/java/com/bumptech/glide/provider/LoadPathCache.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.support.annotation.Nullable;
 import android.support.v4.util.ArrayMap;
+import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.DecodePath;
 import com.bumptech.glide.load.engine.LoadPath;
 import com.bumptech.glide.load.resource.transcode.UnitTranscoder;
@@ -20,11 +21,11 @@ public class LoadPathCache {
           Object.class,
           Object.class,
           Collections.singletonList(
-              new DecodePath<>(
+              new DecodePath<Object, Object, Object>(
                   Object.class,
                   Object.class,
                   Object.class,
-                  Collections.emptyList(),
+                  Collections.<ResourceDecoder<Object, Object>>emptyList(),
                   new UnitTranscoder<>(),
                   /*listPool=*/ null)),
           /*listPool=*/ null);

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class ConcurrencyHelper {
   private final Handler handler = new Handler(Looper.getMainLooper());
-  private static final long TIMEOUT_SECONDS = 5;
+  private static final long TIMEOUT_SECONDS = 10;
   private static final TimeUnit TIMEOUT_UNIT = TimeUnit.SECONDS;
 
   public <T> T get(final Future<T> future) {

File: library/src/test/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java
Patch:
@@ -210,7 +210,7 @@ public void put_withSameValueTwice_doesNotEvictItems() {
   @Test
   public void put_withExistingNullValue_doesNotNotifyListener() {
     String key = getKey();
-    cache.put(key, /*value=*/ null);
+    cache.put(key, /* item= */ null);
     cache.put(key, new Object());
 
     verify(listener, never()).onItemRemoved(anyObject());

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -200,6 +200,9 @@ public static synchronized void init(Context context, GlideBuilder builder) {
   @VisibleForTesting
   public static synchronized void tearDown() {
     if (glide != null) {
+      glide.getContext()
+          .getApplicationContext()
+          .unregisterComponentCallbacks(glide);
       glide.engine.shutdown();
     }
     glide = null;

File: library/src/main/java/com/bumptech/glide/request/RequestListener.java
Patch:
@@ -19,7 +19,7 @@ public interface RequestListener<R> {
    * {@link Target#onLoadFailed(Drawable)}. Will only be called if we currently want to display an
    * image for the given model in the given target. It is recommended to create a single instance
    * per activity/fragment rather than instantiate a new object for each call to {@code
-   * Glide.load()} to avoid object churn.
+   * Glide.with(fragment/activity).load()} to avoid object churn.
    *
    * <p>It is not safe to reload this or a different model in this callback. If you need to do so
    * use {@link com.bumptech.glide.RequestBuilder#error(RequestBuilder)} instead.

File: annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java
Patch:
@@ -16,6 +16,9 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
+/**
+ * Tests AppGlideModules that use the @Excludes annotation with a single excluded Module class.
+ */
 @RunWith(JUnit4.class)
 public class AppGlideModuleWithExcludesTest {
   private Compilation compilation;

File: annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithMultipleExcludesTest.java
Patch:
@@ -15,6 +15,9 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
+/**
+ * Tests AppGlideModules that use the @Excludes annotation with multiple excluded Module classes.
+ */
 @RunWith(JUnit4.class)
 public class AppGlideModuleWithMultipleExcludesTest {
   private Compilation compilation;

File: library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
Patch:
@@ -110,7 +110,9 @@ private boolean parentIsAnyResourceSet() {
   @Override
   public void begin() {
     isRunning = true;
-    if (!thumb.isRunning()) {
+    // If the request has completed previously, there's no need to restart both the full and the
+    // thumb, we can just restart the full.
+    if (!full.isComplete() && !thumb.isRunning()) {
       thumb.begin();
     }
     if (isRunning && !full.isRunning()) {

File: library/src/main/java/com/bumptech/glide/load/engine/Engine.java
Patch:
@@ -338,6 +338,7 @@ public void clearDiskCache() {
   public void shutdown() {
     engineJobFactory.shutdown();
     diskCacheProvider.clearDiskCacheIfCreated();
+    activeResources.shutdown();
   }
 
   /**

File: instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -8,7 +8,7 @@
 import com.bumptech.glide.manager.Lifecycle;
 import com.bumptech.glide.manager.LifecycleListener;
 import com.bumptech.glide.manager.RequestManagerTreeNode;
-import com.bumptech.glide.request.FutureTarget;
+import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.ResourceIds;
 import com.bumptech.glide.test.ResourceIds.raw;
@@ -82,7 +82,7 @@ public void run() {
       }
     });
 
-    final FutureTarget<Drawable> target =
+    final Target<Drawable> target =
         concurrency.wait(requestManager.load(raw.canonical).submit());
 
     concurrency.runOnMainThread(new Runnable() {

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
Patch:
@@ -9,6 +9,7 @@
 import android.widget.ImageView;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.target.DrawableImageViewTarget;
 import com.bumptech.glide.request.target.SizeReadyCallback;
@@ -50,7 +51,7 @@ public boolean await(long timeout, TimeUnit timeUnit) throws InterruptedExceptio
     return reference.get();
   }
 
-  public <T, Y extends Future<T>> Y wait(Y future) {
+  public <T> Target<T> wait(FutureTarget<T> future) {
     get(future);
     return future;
   }

File: library/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
Patch:
@@ -4,6 +4,7 @@
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 
 import android.os.MessageQueue.IdleHandler;
@@ -35,6 +36,8 @@ public void setUp() {
     MockitoAnnotations.initMocks(this);
     resources = new ActiveResources();
     resources.setListener(listener);
+
+    reset(GlideShadowLooper.queue);
   }
 
   @Test

File: library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
Patch:
@@ -14,6 +14,7 @@
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -472,6 +473,8 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
 
   @Test
   public void load_afterResourceIsGcedFromActive_returnsFromMemoryCache() {
+    // clear previous calls to addIdleHandler
+    reset(GlideShadowLooper.queue);
     when(harness.resource.getResource()).thenReturn(mock(Resource.class));
     when(harness.resource.isCacheable()).thenReturn(true);
     harness.cache = new LruResourceCache(100);

File: library/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
Patch:
@@ -24,7 +24,7 @@ public class ErrorRequestCoordinatorTest {
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
-    coordinator = new ErrorRequestCoordinator(/*coordinator=*/ null);
+    coordinator = new ErrorRequestCoordinator(/*parent=*/ null);
     coordinator.setRequests(primary, error);
   }
 
@@ -248,7 +248,7 @@ public void recycle_recyclesPrimaryAndError() {
   public void isEquivalentTo() {
     assertThat(coordinator.isEquivalentTo(primary)).isFalse();
 
-    ErrorRequestCoordinator other = new ErrorRequestCoordinator(/*coordinator=*/ null);
+    ErrorRequestCoordinator other = new ErrorRequestCoordinator(/*parent=*/ null);
     assertThat(coordinator.isEquivalentTo(other)).isFalse();
 
     other.setRequests(primary, primary);

File: library/src/main/java/com/bumptech/glide/RequestManager.java
Patch:
@@ -414,7 +414,7 @@ public RequestBuilder<Drawable> load(@Nullable Integer resourceId) {
   }
 
   /**
-   * Equivalent to calling {@link #asDrawable()} and then {@link RequestBuilder#load(URL).
+   * Equivalent to calling {@link #asDrawable()} and then {@link RequestBuilder#load(URL)}.
    *
    * @return A new request builder for loading a {@link Drawable} using the given model.
    */

File: instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.rules.ExpectedException;
 import org.junit.rules.TestName;
 import org.junit.runner.RunWith;
+import org.mockito.MockitoAnnotations;
 
 @RunWith(AndroidJUnit4.class)
 public class NonBitmapDrawableResourcesTest {
@@ -41,6 +42,7 @@ public class NonBitmapDrawableResourcesTest {
 
   @Before
   public void setUp() {
+    MockitoAnnotations.initMocks(this);
     context = InstrumentationRegistry.getTargetContext();
   }
 

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
Patch:
@@ -63,15 +63,15 @@ public Resource<Drawable> transform(Context context, Resource<Drawable> resource
       transformedBitmapResource.recycle();
       return resource;
     } else {
-      return newDrawableResource(context, transformedBitmapResource.get());
+      return newDrawableResource(context, transformedBitmapResource);
     }
   }
 
   @SuppressWarnings("unchecked")
   private Resource<Drawable> newDrawableResource(
-      Context context, Bitmap transformed) {
+      Context context, Resource<Bitmap> transformed) {
     Resource<? extends Drawable> result =
-        LazyBitmapDrawableResource.obtain(context, transformed);
+        LazyBitmapDrawableResource.obtain(context.getResources(), transformed);
     return (Resource<Drawable>) result;
   }
 

File: library/src/main/java/com/bumptech/glide/load/resource/drawable/NonOwnedDrawableResource.java
Patch:
@@ -10,7 +10,7 @@
 final class NonOwnedDrawableResource extends DrawableResource<Drawable> {
 
   @SuppressWarnings("unchecked")
-  public static Resource<Drawable> newInstance(Drawable drawable) {
+  static Resource<Drawable> newInstance(Drawable drawable) {
     return new NonOwnedDrawableResource(drawable);
   }
 

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJobListener.java
Patch:
@@ -4,7 +4,7 @@
 
 interface EngineJobListener {
 
-  void onEngineJobComplete(Key key, EngineResource<?> resource);
+  void onEngineJobComplete(EngineJob<?> engineJob, Key key, EngineResource<?> resource);
 
   void onEngineJobCancelled(EngineJob<?> engineJob, Key key);
 }

File: library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine.cache;
 
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.engine.Resource;
@@ -12,7 +13,7 @@ public interface MemoryCache {
    * An interface that will be called whenever a bitmap is removed from the cache.
    */
   interface ResourceRemovedListener {
-    void onResourceRemoved(Resource<?> removed);
+    void onResourceRemoved(@NonNull Resource<?> removed);
   }
 
   /**

File: library/src/main/java/com/bumptech/glide/load/model/ModelCache.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
 import com.bumptech.glide.util.LruCache;
@@ -29,7 +30,7 @@ public ModelCache() {
   public ModelCache(long size) {
     cache = new LruCache<ModelKey<A>, B>(size) {
       @Override
-      protected void onItemEvicted(ModelKey<A> key, B item) {
+      protected void onItemEvicted(@NonNull ModelKey<A> key, @Nullable B item) {
         key.release();
       }
     };

File: library/src/main/java/com/bumptech/glide/request/RequestOptions.java
Patch:
@@ -468,6 +468,7 @@ public RequestOptions useAnimationPool(boolean flag) {
   }
 
   /**
+   *
    * If set to true, will only load an item if found in the cache, and will not fetch from source.
    */
   @CheckResult

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
Patch:
@@ -16,7 +16,7 @@ public interface ArrayPool {
    * <p>Arrays may be ignored, for example if the array is larger than the maximum size of the
    * pool.
    *
-   * @deprecated Use {@link #put(Object)Class}
+   * @deprecated Use {@link #put(Object)}
    */
   @Deprecated
   <T> void put(T array, Class<T> arrayClass);

File: library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
Patch:
@@ -105,7 +105,7 @@ public void testReplace_returnsPreviouslyRegisteredFactories_withModelAndDataCla
     multiFactory.append(String.class, String.class, firstOtherFactory);
     multiFactory.append(String.class, String.class, secondOtherFactory);
 
-    List<ModelLoaderFactory<String, String>> removed =
+    List<ModelLoaderFactory<? extends String, ? extends String>> removed =
         multiFactory.replace(String.class, String.class, firstFactory);
     assertThat(removed).containsExactly(firstOtherFactory, secondOtherFactory);
   }
@@ -127,7 +127,7 @@ public void testRemove_returnsPreviouslyRegisteredFactories_withModelAndDataClas
     multiFactory.append(String.class, String.class, other);
     multiFactory.append(String.class, String.class, firstFactory);
 
-    List<ModelLoaderFactory<String, String>> removed =
+    List<ModelLoaderFactory<? extends String, ? extends String>> removed =
         multiFactory.remove(String.class, String.class);
     assertThat(removed).containsExactly(firstFactory, other);
   }

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
Patch:
@@ -389,7 +389,7 @@ Set<String> findClassValuesFromAnnotationOnClassAsNames(
     }
     Object value = excludedModuleAnnotationValue.getValue();
     if (value instanceof List) {
-      List values = (List) value;
+      List<?> values = (List<?>) value;
       Set<String> result = new HashSet<>(values.size());
       for (Object current : values) {
         Attribute.Class currentClass = (Attribute.Class) current;

File: annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
Patch:
@@ -493,6 +493,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
Patch:
@@ -639,6 +639,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
Patch:
@@ -496,6 +496,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
Patch:
@@ -652,6 +652,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
Patch:
@@ -488,6 +488,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
Patch:
@@ -639,6 +639,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
Patch:
@@ -479,6 +479,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
Patch:
@@ -639,6 +639,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
Patch:
@@ -488,6 +488,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
Patch:
@@ -639,6 +639,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
Patch:
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
Patch:
@@ -652,6 +652,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
Patch:
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
Patch:
@@ -652,6 +652,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
Patch:
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
Patch:
@@ -652,6 +652,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
Patch:
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
Patch:
@@ -496,6 +496,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
Patch:
@@ -652,6 +652,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
Patch:
@@ -488,6 +488,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
Patch:
@@ -639,6 +639,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
Patch:
@@ -488,6 +488,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
Patch:
@@ -639,6 +639,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
Patch:
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
Patch:
@@ -652,6 +652,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
Patch:
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
Patch:
@@ -652,6 +652,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
Patch:
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
Patch:
@@ -652,6 +652,7 @@ public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeT
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }

File: annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
Patch:
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);

File: annotation/src/main/java/com/bumptech/glide/annotation/Excludes.java
Patch:
@@ -16,5 +16,5 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Excludes {
-  Class[] value();
+  Class<?>[] value();
 }

File: library/src/main/java/com/bumptech/glide/ListPreloader.java
Patch:
@@ -85,7 +85,7 @@ public interface PreloadModelProvider<U> {
      * @param item The model to load.
      */
     @Nullable
-    RequestBuilder getPreloadRequestBuilder(U item);
+    RequestBuilder<?> getPreloadRequestBuilder(U item);
   }
 
   /**
@@ -206,7 +206,7 @@ private void preloadItem(@Nullable T item, int position, int perItemPosition) {
       return;
     }
     RequestBuilder<Object> preloadRequestBuilder =
-        preloadModelProvider.getPreloadRequestBuilder(item);
+        (RequestBuilder<Object>) preloadModelProvider.getPreloadRequestBuilder(item);
     if (preloadRequestBuilder == null) {
       return;
     }

File: library/src/main/java/com/bumptech/glide/load/HttpException.java
Patch:
@@ -13,6 +13,8 @@
 // Public API.
 @SuppressWarnings({"WeakerAccess", "unused"})
 public final class HttpException extends IOException {
+  private static final long serialVersionUID = 1L;
+
   public static final int UNKNOWN = -1;
   private final int statusCode;
 

File: library/src/main/java/com/bumptech/glide/load/MultiTransformation.java
Patch:
@@ -15,6 +15,7 @@ public class MultiTransformation<T> implements Transformation<T> {
   private final Collection<? extends Transformation<T>> transformations;
 
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public MultiTransformation(Transformation<T>... transformations) {
     if (transformations.length < 1) {
       throw new IllegalArgumentException(

File: library/src/main/java/com/bumptech/glide/load/engine/Engine.java
Patch:
@@ -288,7 +288,7 @@ public void onEngineJobComplete(Key key, EngineResource<?> resource) {
   }
 
   @Override
-  public void onEngineJobCancelled(EngineJob engineJob, Key key) {
+  public void onEngineJobCancelled(EngineJob<?> engineJob, Key key) {
     Util.assertMainThread();
     EngineJob<?> current = jobs.get(key);
     if (engineJob.equals(current)) {

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJobListener.java
Patch:
@@ -6,5 +6,5 @@ interface EngineJobListener {
 
   void onEngineJobComplete(Key key, EngineResource<?> resource);
 
-  void onEngineJobCancelled(EngineJob engineJob, Key key);
+  void onEngineJobCancelled(EngineJob<?> engineJob, Key key);
 }

File: library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
Patch:
@@ -18,6 +18,8 @@
 // Public API.
 @SuppressWarnings("WeakerAccess")
 public final class GlideException extends Exception {
+  private static final long serialVersionUID = 1L;
+
   private static final StackTraceElement[] EMPTY_ELEMENTS = new StackTraceElement[0];
 
   private final List<Throwable> causes;

File: library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
Patch:
@@ -76,6 +76,6 @@ public Class<Data> getDataClass() {
   @Override
   public String toString() {
     return "LoadPath{" + "decodePaths="
-        + Arrays.toString(decodePaths.toArray(new DecodePath[decodePaths.size()])) + '}';
+        + Arrays.toString(decodePaths.toArray(new DecodePath<?, ?, ?>[decodePaths.size()])) + '}';
   }
 }

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/PrettyPrintTreeMap.java
Patch:
@@ -2,6 +2,8 @@
 
 import java.util.TreeMap;
 
+// Never serialized.
+@SuppressWarnings("serial")
 class PrettyPrintTreeMap<K, V> extends TreeMap<K, V> {
   @Override
   public String toString() {

File: library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
Patch:
@@ -68,7 +68,7 @@ public boolean handles(Model model) {
   @Override
   public String toString() {
     return "MultiModelLoader{" + "modelLoaders=" + Arrays
-        .toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + '}';
+        .toString(modelLoaders.toArray(new ModelLoader<?, ?>[modelLoaders.size()])) + '}';
   }
 
   static class MultiFetcher<Data> implements DataFetcher<Data>, DataCallback<Data> {

File: library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
Patch:
@@ -277,6 +277,8 @@ void notifyAll(Object toNotify) {
   }
 
   private static class GlideExecutionException extends ExecutionException {
+    private static final long serialVersionUID = 1L;
+
 
     private final GlideException cause;
 

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -623,7 +623,7 @@ private void onLoadFailed(GlideException e, int maxLogLevel) {
   @Override
   public boolean isEquivalentTo(Request o) {
     if (o instanceof SingleRequest) {
-      SingleRequest that = (SingleRequest) o;
+      SingleRequest<?> that = (SingleRequest<?>) o;
       return overrideWidth == that.overrideWidth
           && overrideHeight == that.overrideHeight
           && Util.bothModelsNullEquivalentOrEquals(model, that.model)

File: library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
Patch:
@@ -439,7 +439,7 @@ public void runTest() {
   @Test
   public void load_afterResourceIsLoadedInActiveResources_returnsFromMemoryCache() {
     when(harness.resource.isCacheable()).thenReturn(true);
-    doAnswer(new Answer() {
+    doAnswer(new Answer<Object>() {
       @Override
       public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         harness.getEngine().onEngineJobComplete(harness.cacheKey, harness.resource);
@@ -455,7 +455,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
   public void load_afterResourceIsLoadedAndReleased_returnsFromMemoryCache() {
     harness.cache = new LruResourceCache(100);
     when(harness.resource.isCacheable()).thenReturn(true);
-    doAnswer(new Answer() {
+    doAnswer(new Answer<Object>() {
       @Override
       public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         harness.getEngine().onEngineJobComplete(harness.cacheKey, harness.resource);
@@ -473,7 +473,7 @@ public void load_afterResourceIsGcedFromActive_returnsFromMemoryCache() {
     when(harness.resource.getResource()).thenReturn(mock(Resource.class));
     when(harness.resource.isCacheable()).thenReturn(true);
     harness.cache = new LruResourceCache(100);
-    doAnswer(new Answer() {
+    doAnswer(new Answer<Object>() {
       @Override
       public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         harness.getEngine().onEngineJobComplete(harness.cacheKey, harness.resource);

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
Patch:
@@ -114,7 +114,7 @@ public void transform_withColorDrawable_andUnitBitmapTransformation_recycles() {
     ColorDrawable colorDrawable = new ColorDrawable(Color.RED);
     final Resource<Drawable> input = new SimpleResource<Drawable>(colorDrawable);
 
-    doAnswer(new Answer() {
+    doAnswer(new Answer<Void>() {
       @Override
       public Void answer(InvocationOnMock invocationOnMock) throws Throwable {
         Bitmap bitmap = (Bitmap) invocationOnMock.getArguments()[0];

File: library/src/test/java/com/bumptech/glide/tests/KeyTester.java
Patch:
@@ -32,14 +32,11 @@ public Statement apply(final Statement base, Description description) {
 
       @Override
       public void evaluate() throws Throwable {
-        try {
           isUsedAsRule = true;
           base.evaluate();
-        } finally {
           if (isUsedWithoutCallingTest) {
             fail("You used KeyTester but failed to call test()!");
           }
-        }
       }
     };
   }

File: instrumentation/src/androidTest/java/com/bumptech/glide/RequestTest.java
Patch:
@@ -52,7 +52,7 @@ public void setUp() {
     // Some emulators only have a single resize thread, so waiting on a latch will block them
     // forever.
     Glide.init(context,
-        new GlideBuilder().setResizeExecutor(GlideExecutor.newUnlimitedSourceExecutor()));
+        new GlideBuilder().setSourceExecutor(GlideExecutor.newUnlimitedSourceExecutor()));
   }
 
   @Test

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java
Patch:
@@ -22,7 +22,8 @@ public final class BitmapSubject extends Subject<BitmapSubject, Bitmap> {
   private static final Subject.Factory<BitmapSubject, Bitmap> FACTORY =
       new Subject.Factory<BitmapSubject, Bitmap>() {
         @Override
-        public BitmapSubject createSubject(@NonNull FailureMetadata metadata, @NonNull Bitmap actual) {
+        public BitmapSubject createSubject(
+            @NonNull FailureMetadata metadata, @NonNull Bitmap actual) {
           return new BitmapSubject(metadata, actual);
         }
       };

File: library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
Patch:
@@ -85,6 +85,9 @@ public void onLoadFailed(@Nullable Drawable errorDrawable) {
   @Override
   public void onLoadCleared(@Nullable Drawable placeholder) {
     super.onLoadCleared(placeholder);
+    if (animatable != null) {
+      animatable.stop();
+    }
     setResourceInternal(null);
     setDrawable(placeholder);
   }

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
Patch:
@@ -166,8 +166,8 @@ private void writeRequestBuilder(String packageName, TypeSpec requestBuilder) {
   }
 
   private static final class FoundIndexedClassNames {
-    final Set<String> glideModules;
-    final Set<String> extensions;
+    private final Set<String> glideModules;
+    private final Set<String> extensions;
 
     private FoundIndexedClassNames(Set<String> glideModules, Set<String> extensions) {
       this.glideModules = glideModules;

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java
Patch:
@@ -27,7 +27,7 @@ final class ExtensionProcessor {
     extensionValidator = new GlideExtensionValidator(processingEnvironment, processorUtil);
   }
 
-  boolean processExtensions(Set<? extends TypeElement> set, RoundEnvironment env) {
+  boolean processExtensions(RoundEnvironment env) {
     List<TypeElement> elements = processorUtil.getElementsFor(GlideExtension.class, env);
     processorUtil.debugLog("Processing types : " + elements);
     for (TypeElement typeElement : elements) {

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/LibraryModuleProcessor.java
Patch:
@@ -14,15 +14,15 @@
  * {@code LibraryGlideModule}s.
  */
 final class LibraryModuleProcessor {
-  private ProcessorUtil processorUtil;
-  private IndexerGenerator indexerGenerator;
+  private final ProcessorUtil processorUtil;
+  private final IndexerGenerator indexerGenerator;
 
   LibraryModuleProcessor(ProcessorUtil processorUtil, IndexerGenerator indexerGenerator) {
     this.processorUtil = processorUtil;
     this.indexerGenerator = indexerGenerator;
   }
 
-  boolean processModules(Set<? extends TypeElement> set, RoundEnvironment env) {
+  boolean processModules(RoundEnvironment env) {
      // Order matters here, if we find an Indexer below, we return before writing the root module.
     // If we fail to add to appModules before then, we might accidentally skip a valid RootModule.
     List<TypeElement> libraryGlideModules = new ArrayList<>();

File: annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java
Patch:
@@ -19,7 +19,7 @@
 @SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(JUnit4.class)
 public class InvalidGlideExtensionTest {
-  @Rule public ExpectedException expectedException = ExpectedException.none();
+  @Rule public final ExpectedException expectedException = ExpectedException.none();
 
   @Test
   public void compilation_withPublicConstructor_fails() {

File: annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
Patch:
@@ -20,7 +20,7 @@
 @SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(JUnit4.class)
 public class InvalidGlideOptionsExtensionTest {
-  @Rule public ExpectedException expectedException = ExpectedException.none();
+  @Rule public final ExpectedException expectedException = ExpectedException.none();
 
   @Test
   public void compilation_withAnnotatedNonStaticMethod_fails() {

File: annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
Patch:
@@ -23,7 +23,7 @@
 @SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(JUnit4.class)
 public class InvalidGlideTypeExtensionTest {
-  @Rule public ExpectedException expectedException = ExpectedException.none();
+  @Rule public final ExpectedException expectedException = ExpectedException.none();
 
   @Test
   public void compilation_withAnnotatedNonStaticMethod_fails() {

File: annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 @RunWith(JUnit4.class)
 public class MultipleAppGlideModuleTest {
-  @Rule public ExpectedException expectedException = ExpectedException.none();
+  @Rule public final ExpectedException expectedException = ExpectedException.none();
   private static final String FIRST_MODULE = "EmptyAppModule1.java";
   private static final String SECOND_MODULE = "EmptyAppModule2.java";
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java
Patch:
@@ -47,7 +47,7 @@ public class CachingTest {
 
   @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
   @Mock private RequestListener<Drawable> requestListener;
-  private ConcurrencyHelper concurrency = new ConcurrencyHelper();
+  private final ConcurrencyHelper concurrency = new ConcurrencyHelper();
 
   private Context context;
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/CenterCropRegressionTest.java
Patch:
@@ -25,8 +25,8 @@
 @SplitByCpu
 @SplitBySdk({24, 21, 16})
 public class CenterCropRegressionTest {
-  @Rule public TestName testName = new TestName();
-  @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
+  @Rule public final TestName testName = new TestName();
+  @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();
   private BitmapRegressionTester bitmapRegressionTester;
   private Context context;
   private CanonicalBitmap canonical;

File: instrumentation/src/androidTest/java/com/bumptech/glide/CenterInsideRegressionTest.java
Patch:
@@ -26,9 +26,9 @@
 @SplitBySdk({24, 21, 16})
 @RegressionTest
 public class CenterInsideRegressionTest {
-  @Rule public TestName testName = new TestName();
-  @Rule public ExpectedException expectedException = ExpectedException.none();
-  @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
+  @Rule public final TestName testName = new TestName();
+  @Rule public final ExpectedException expectedException = ExpectedException.none();
+  @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();
   private BitmapRegressionTester bitmapRegressionTester;
   private Context context;
   private CanonicalBitmap canonical;

File: instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
Patch:
@@ -29,7 +29,7 @@
 
 @RunWith(AndroidJUnit4.class)
 public class DrawableTransformationTest {
-  @Rule public ExpectedException expectedException = ExpectedException.none();
+  @Rule public final ExpectedException expectedException = ExpectedException.none();
 
   private Context context;
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/FitCenterRegressionTest.java
Patch:
@@ -26,9 +26,9 @@
 @SplitBySdk({24, 23, 21, 19, 18, 16})
 @RegressionTest
 public class FitCenterRegressionTest {
-  @Rule public TestName testName = new TestName();
-  @Rule public ExpectedException expectedException = ExpectedException.none();
-  @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
+  @Rule public final TestName testName = new TestName();
+  @Rule public final ExpectedException expectedException = ExpectedException.none();
+  @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();
   private BitmapRegressionTester bitmapRegressionTester;
   private Context context;
   private CanonicalBitmap canonical;

File: instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -22,10 +22,10 @@
 
 @RunWith(AndroidJUnit4.class)
 public class RequestManagerTest {
-  @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
+  @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();
   @Mock private RequestManagerTreeNode treeNode;
 
-  private ConcurrencyHelper concurrency = new ConcurrencyHelper();
+  private final ConcurrencyHelper concurrency = new ConcurrencyHelper();
   private RequestManager requestManager;
   private Context context;
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/RequestTest.java
Patch:
@@ -37,7 +37,7 @@
 public class RequestTest {
   @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
   @Mock private RequestListener<Drawable> requestListener;
-  private ConcurrencyHelper concurrency = new ConcurrencyHelper();
+  private final ConcurrencyHelper concurrency = new ConcurrencyHelper();
   private Context context;
   private ImageView imageView;
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/RoundedCornersRegressionTest.java
Patch:
@@ -33,8 +33,8 @@
 @SplitBySdk({26, 24, 23, 21, 19, 18, 16})
 @RegressionTest
 public class RoundedCornersRegressionTest {
-  @Rule public TestRule tearDownGlide = new TearDownGlide();
-  @Rule public TestName testName = new TestName();
+  @Rule public final TestRule tearDownGlide = new TearDownGlide();
+  @Rule public final TestName testName = new TestName();
 
   private Context context;
   private BitmapRegressionTester bitmapRegressionTester;

File: instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -114,7 +114,7 @@ private void addViewToWindow(View view) {
     layoutParams.type = LayoutParams.TYPE_SYSTEM_ALERT;
     final WindowManager windowManager =
         (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-    windowManager.addView(view, layoutParams);
+    Preconditions.checkNotNull(windowManager).addView(view, layoutParams);
   }
 
   private static void waitOrThrow(CountDownLatch latch) {

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapRegressionTester.java
Patch:
@@ -39,7 +39,7 @@ public final class BitmapRegressionTester {
   private static final String GENERATED_FILES_DIR = "test_files";
   private static final String SEPARATOR = "_";
 
-  private Class<?> testClass;
+  private final Class<?> testClass;
   private final TestName testName;
   private final Context context = InstrumentationRegistry.getTargetContext();
 

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java
Patch:
@@ -26,7 +26,7 @@ public final class WaitModelLoader<Model, Data>
 
   private final ModelLoader<Model, Data> wrapped;
 
-  WaitModelLoader(ModelLoader<Model, Data> wrapped) {
+  private WaitModelLoader(ModelLoader<Model, Data> wrapped) {
     this.wrapped = wrapped;
   }
 
@@ -103,7 +103,7 @@ public void teardown() {
   private static final class WaitFetcher<Data> implements DataFetcher<Data> {
 
     private final DataFetcher<Data> wrapped;
-    private CountDownLatch toWaitOn;
+    private final CountDownLatch toWaitOn;
 
     WaitFetcher(DataFetcher<Data> wrapped, CountDownLatch toWaitOn) {
       this.wrapped = wrapped;

File: integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerToListViewScrollListener.java
Patch:
@@ -11,6 +11,8 @@
  *
  * <p>Requires that the the recycler view be using a {@link LinearLayoutManager} subclass.
  */
+// Public API.
+@SuppressWarnings("WeakerAccess")
 public final class RecyclerToListViewScrollListener extends RecyclerView.OnScrollListener {
   public static final int UNKNOWN_SCROLL_STATE = Integer.MIN_VALUE;
   private final AbsListView.OnScrollListener scrollListener;

File: integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java
Patch:
@@ -51,8 +51,7 @@
 public class VolleyStreamFetcherServerTest {
   private static final String DEFAULT_PATH = "/fakepath";
 
-  @Mock VolleyRequestFactory requestFactory;
-  @Mock DataFetcher.DataCallback<InputStream> callback;
+  @Mock private DataFetcher.DataCallback<InputStream> callback;
 
   private MockWebServer mockWebServer;
   private RequestQueue requestQueue;

File: library/src/main/java/com/bumptech/glide/GeneratedAppGlideModule.java
Patch:
@@ -16,7 +16,6 @@ abstract class GeneratedAppGlideModule extends AppGlideModule {
   /**
    * This method can be removed when manifest parsing is no longer supported.
    */
-  @Deprecated
   @NonNull
   abstract Set<Class<?>> getExcludedModuleClasses();
 

File: library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java
Patch:
@@ -9,7 +9,8 @@
  *
  * @param <TranscodeType> The type of the resource that will be displayed.
  */
-@SuppressWarnings("PMD.UseUtilityClass")
+// Public API.
+@SuppressWarnings({"PMD.UseUtilityClass", "unused"})
 public final class GenericTransitionOptions<TranscodeType> extends
     TransitionOptions<GenericTransitionOptions<TranscodeType>, TranscodeType> {
   /**

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -559,7 +559,8 @@ public void trimMemory(int level) {
    *     This method should always be called on a background thread, since it is a blocking call.
    * </p>
    */
-  @SuppressWarnings("unused") // Public API
+  // Public API.
+  @SuppressWarnings({"unused", "WeakerAccess"})
   public void clearDiskCache() {
     Util.assertBackgroundThread();
     engine.clearDiskCache();

File: library/src/main/java/com/bumptech/glide/GlideContext.java
Patch:
@@ -24,7 +24,7 @@
 public class GlideContext extends ContextWrapper {
   @VisibleForTesting
   static final TransitionOptions<?, ?> DEFAULT_TRANSITION_OPTIONS =
-      new GenericTransitionOptions<Object>();
+      new GenericTransitionOptions<>();
   private final Handler mainHandler;
   private final Registry registry;
   private final ImageViewTargetFactory imageViewTargetFactory;

File: library/src/main/java/com/bumptech/glide/MemoryCategory.java
Patch:
@@ -18,7 +18,7 @@ public enum MemoryCategory {
    */
   HIGH(1.5f);
 
-  private float multiplier;
+  private final float multiplier;
 
   MemoryCategory(float multiplier) {
     this.multiplier = multiplier;

File: library/src/main/java/com/bumptech/glide/Registry.java
Patch:
@@ -32,6 +32,8 @@
  * Manages component registration to extend or replace Glide's default loading, decoding, and
  * encoding logic.
  */
+// Public API.
+@SuppressWarnings({"WeakerAccess", "unused"})
 public class Registry {
   public static final String BUCKET_GIF = "Gif";
   public static final String BUCKET_BITMAP = "Bitmap";

File: library/src/main/java/com/bumptech/glide/TransitionOptions.java
Patch:
@@ -37,7 +37,7 @@ public final CHILD dontTransition() {
    * @return This request builder.
    */
   public final CHILD transition(int viewAnimationId) {
-    return transition(new ViewAnimationFactory<TranscodeType>(viewAnimationId));
+    return transition(new ViewAnimationFactory<>(viewAnimationId));
   }
 
   /**
@@ -50,7 +50,7 @@ public final CHILD transition(int viewAnimationId) {
    * @return This request builder.
    */
   public final CHILD transition(ViewPropertyTransition.Animator animator) {
-    return transition(new ViewPropertyAnimationFactory<TranscodeType>(animator));
+    return transition(new ViewPropertyAnimationFactory<>(animator));
   }
 
   /**

File: library/src/main/java/com/bumptech/glide/load/HttpException.java
Patch:
@@ -10,6 +10,8 @@
  * users may attempt to retry or otherwise uniformly handle certain types of errors regardless of
  * the underlying http library.
  */
+// Public API.
+@SuppressWarnings({"WeakerAccess", "unused"})
 public final class HttpException extends IOException {
   public static final int UNKNOWN = -1;
   private final int statusCode;

File: library/src/main/java/com/bumptech/glide/load/ImageHeaderParser.java
Patch:
@@ -56,7 +56,6 @@ public boolean hasAlpha() {
    *
    * @return The exif orientation if present or -1 if the header couldn't be parsed or doesn't
    * contain an orientation
-   * @throws IOException
    */
   int getOrientation(InputStream is, ArrayPool byteArrayPool) throws IOException;
   int getOrientation(ByteBuffer byteBuffer, ArrayPool byteArrayPool) throws IOException;

File: library/src/main/java/com/bumptech/glide/load/Option.java
Patch:
@@ -81,7 +81,7 @@ public static <T> Option<T> disk(String key, T defaultValue, CacheKeyUpdater<T>
     return new Option<>(key, defaultValue, cacheKeyUpdater);
   }
 
-  Option(String key, T defaultValue, CacheKeyUpdater<T> cacheKeyUpdater) {
+  private Option(String key, T defaultValue, CacheKeyUpdater<T> cacheKeyUpdater) {
     this.key = Preconditions.checkNotEmpty(key);
     this.defaultValue = defaultValue;
     this.cacheKeyUpdater = Preconditions.checkNotNull(cacheKeyUpdater);
@@ -90,6 +90,8 @@ public static <T> Option<T> disk(String key, T defaultValue, CacheKeyUpdater<T>
   /**
    * Returns a reasonable default to use if no other value is set, or {@code null}.
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @Nullable
   public T getDefaultValue() {
     return defaultValue;

File: library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
Patch:
@@ -19,6 +19,8 @@ public abstract class AssetPathFetcher<T> implements DataFetcher<T> {
   private final AssetManager assetManager;
   private T data;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public AssetPathFetcher(AssetManager assetManager, String assetPath) {
     this.assetManager = assetManager;
     this.assetPath = assetPath;
@@ -74,7 +76,6 @@ public DataSource getDataSource() {
    * Closes the concrete data type if necessary.
    *
    * @param data The data to close.
-   * @throws IOException
    */
   protected abstract void close(T data) throws IOException;
 }

File: library/src/main/java/com/bumptech/glide/load/data/DataRewinder.java
Patch:
@@ -34,7 +34,6 @@ interface Factory<T> {
    * returns the re-wound data (or a wrapper for the re-wound data).
    *
    * @return An object pointing to the wrapped data.
-   * @throws IOException
    */
   T rewindAndGet() throws IOException;
 

File: library/src/main/java/com/bumptech/glide/load/data/DataRewinderRegistry.java
Patch:
@@ -46,10 +46,10 @@ public synchronized <T> DataRewinder<T> build(T data) {
     return result.build(data);
   }
 
-  private static class DefaultRewinder implements DataRewinder<Object> {
+  private static final class DefaultRewinder implements DataRewinder<Object> {
     private final Object data;
 
-    public DefaultRewinder(Object data) {
+    DefaultRewinder(Object data) {
       this.data = data;
     }
 

File: library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.data;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
 import android.text.TextUtils;
 import android.util.Log;
 import com.bumptech.glide.Priority;
@@ -23,7 +24,7 @@
 public class HttpUrlFetcher implements DataFetcher<InputStream> {
   private static final String TAG = "HttpUrlFetcher";
   private static final int MAXIMUM_REDIRECTS = 5;
-  // Visible for testing.
+  @VisibleForTesting
   static final HttpUrlConnectionFactory DEFAULT_CONNECTION_FACTORY =
       new DefaultHttpUrlConnectionFactory();
 
@@ -39,7 +40,7 @@ public HttpUrlFetcher(GlideUrl glideUrl, int timeout) {
     this(glideUrl, timeout, DEFAULT_CONNECTION_FACTORY);
   }
 
-  // Visible for testing.
+  @VisibleForTesting
   HttpUrlFetcher(GlideUrl glideUrl, int timeout, HttpUrlConnectionFactory connectionFactory) {
     this.glideUrl = glideUrl;
     this.timeout = timeout;

File: library/src/main/java/com/bumptech/glide/load/data/InputStreamRewinder.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;
+import com.bumptech.glide.util.Synthetic;
 import java.io.IOException;
 import java.io.InputStream;
 
@@ -15,6 +16,7 @@ public final class InputStreamRewinder implements DataRewinder<InputStream> {
 
   private final RecyclableBufferedInputStream bufferedStream;
 
+  @Synthetic
   InputStreamRewinder(InputStream is, ArrayPool byteArrayPool) {
     bufferedStream = new RecyclableBufferedInputStream(is, byteArrayPool);
     bufferedStream.mark(MARK_LIMIT);

File: library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java
Patch:
@@ -30,6 +30,8 @@ public abstract class LocalUriFetcher<T> implements DataFetcher<T> {
    *                by {@link ContentResolver#openInputStream(android.net.Uri)}
    * @see ContentResolver#openInputStream(android.net.Uri)
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public LocalUriFetcher(ContentResolver contentResolver, Uri uri) {
     this.contentResolver = contentResolver;
     this.uri = uri;

File: library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
Patch:
@@ -6,6 +6,7 @@
 import android.net.Uri;
 import android.provider.MediaStore;
 import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
 import android.util.Log;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.Priority;
@@ -28,8 +29,6 @@ public class ThumbFetcher implements DataFetcher<InputStream> {
   private final ThumbnailStreamOpener opener;
   private InputStream inputStream;
 
-  // TODO(nnaze): These build methods do not need the full Glide or Context objects.
-
   public static ThumbFetcher buildImageFetcher(Context context, Uri uri) {
     return build(context, uri, new ImageThumbnailQuery(context.getContentResolver()));
   }
@@ -46,7 +45,7 @@ private static ThumbFetcher build(Context context, Uri uri, ThumbnailQuery query
     return new ThumbFetcher(uri, opener);
   }
 
-  // Visible for testing.
+  @VisibleForTesting
   ThumbFetcher(Uri mediaStoreImageUri, ThumbnailStreamOpener opener) {
     this.mediaStoreImageUri = mediaStoreImageUri;
     this.opener = opener;

File: library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
Patch:
@@ -15,7 +15,7 @@
 class DataCacheGenerator implements DataFetcherGenerator,
     DataFetcher.DataCallback<Object> {
 
-  private List<Key> cacheKeys;
+  private final List<Key> cacheKeys;
   private final DecodeHelper<?> helper;
   private final FetcherReadyCallback cb;
 

File: library/src/main/java/com/bumptech/glide/load/engine/DataCacheKey.java
Patch:
@@ -11,12 +11,12 @@ final class DataCacheKey implements Key {
   private final Key sourceKey;
   private final Key signature;
 
-  public DataCacheKey(Key sourceKey, Key signature) {
+  DataCacheKey(Key sourceKey, Key signature) {
     this.sourceKey = sourceKey;
     this.signature = signature;
   }
 
-  public Key getSourceKey() {
+  Key getSourceKey() {
     return sourceKey;
   }
 

File: library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
Patch:
@@ -6,6 +6,7 @@
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.data.DataRewinder;
 import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
+import com.bumptech.glide.util.Preconditions;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
@@ -47,7 +48,7 @@ public Resource<Transcode> decode(DataRewinder<DataType> rewinder, int width, in
 
   private Resource<ResourceType> decodeResource(DataRewinder<DataType> rewinder, int width,
       int height, Options options) throws GlideException {
-    List<Throwable> exceptions = listPool.acquire();
+    List<Throwable> exceptions = Preconditions.checkNotNull(listPool.acquire());
     try {
       return decodeResourceWithList(rewinder, width, height, options, exceptions);
     } finally {

File: library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java
Patch:
@@ -21,7 +21,7 @@ class EngineKey implements Key {
   private final Options options;
   private int hashCode;
 
-  public EngineKey(Object model, Key signature, int width, int height,
+  EngineKey(Object model, Key signature, int width, int height,
       Map<Class<?>, Transformation<?>> transformations, Class<?> resourceClass,
       Class<?> transcodeClass, Options options) {
     this.model = Preconditions.checkNotNull(model);

File: library/src/main/java/com/bumptech/glide/load/engine/EngineKeyFactory.java
Patch:
@@ -8,7 +8,7 @@
 class EngineKeyFactory {
 
   @SuppressWarnings("rawtypes")
-  public EngineKey buildKey(Object model, Key signature, int width, int height,
+  EngineKey buildKey(Object model, Key signature, int width, int height,
       Map<Class<?>, Transformation<?>> transformations, Class<?> resourceClass,
       Class<?> transcodeClass, Options options) {
     return new EngineKey(model, signature, width, height, transformations, resourceClass,

File: library/src/main/java/com/bumptech/glide/load/engine/EngineResource.java
Patch:
@@ -94,9 +94,9 @@ void acquire() {
    * Decrements the number of consumers using the wrapped resource. Must be called on the main
    * thread.
    *
-   * <p> This must only be called when a consumer that called the {@link #acquire()} method is now
-   * done with the resource. Generally external users should never callthis method, the framework
-   * will take care of this for you. </p>
+   * <p>This must only be called when a consumer that called the {@link #acquire()} method is now
+   * done with the resource. Generally external users should never call this method, the framework
+   * will take care of this for you.
    */
   void release() {
     if (acquired <= 0) {

File: library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
Patch:
@@ -15,6 +15,8 @@
 /**
  * An exception with zero or more causes indicating why a load in Glide failed.
  */
+// Public API.
+@SuppressWarnings("WeakerAccess")
 public final class GlideException extends Exception {
   private static final StackTraceElement[] EMPTY_ELEMENTS = new StackTraceElement[0];
 

File: library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
Patch:
@@ -37,7 +37,7 @@ public LoadPath(Class<Data> dataClass, Class<ResourceType> resourceClass,
 
   public Resource<Transcode> load(DataRewinder<Data> rewinder, Options options, int width,
       int height, DecodePath.DecodeCallback<ResourceType> decodeCallback) throws GlideException {
-    List<Throwable> throwables = listPool.acquire();
+    List<Throwable> throwables = Preconditions.checkNotNull(listPool.acquire());
     try {
       return loadWithExceptionList(rewinder, options, width, height, decodeCallback, throwables);
     } finally {

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
Patch:
@@ -31,7 +31,7 @@ class ResourceCacheGenerator implements DataFetcherGenerator,
   private File cacheFile;
   private ResourceCacheKey currentKey;
 
-  public ResourceCacheGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {
+  ResourceCacheGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {
     this.helper = helper;
     this.cb = cb;
   }

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheKey.java
Patch:
@@ -21,7 +21,7 @@ final class ResourceCacheKey implements Key {
   private final Options options;
   private final Transformation<?> transformation;
 
-  public ResourceCacheKey(Key sourceKey, Key signature, int width, int height,
+  ResourceCacheKey(Key sourceKey, Key signature, int width, int height,
       Transformation<?> appliedTransformation, Class<?> decodedResourceClass, Options options) {
     this.sourceKey = sourceKey;
     this.signature = signature;

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java
Patch:
@@ -14,7 +14,7 @@ class ResourceRecycler {
   private final Handler handler =
       new Handler(Looper.getMainLooper(), new ResourceRecyclerCallback());
 
-  public void recycle(Resource<?> resource) {
+  void recycle(Resource<?> resource) {
     Util.assertMainThread();
 
     if (isRecycling) {
@@ -30,8 +30,8 @@ public void recycle(Resource<?> resource) {
     }
   }
 
-  private static class ResourceRecyclerCallback implements Handler.Callback {
-    public static final int RECYCLE_RESOURCE = 1;
+  private static final class ResourceRecyclerCallback implements Handler.Callback {
+    static final int RECYCLE_RESOURCE = 1;
 
     @Synthetic
     ResourceRecyclerCallback() { }

File: library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java
Patch:
@@ -32,7 +32,7 @@ class SourceGenerator implements DataFetcherGenerator,
   private volatile ModelLoader.LoadData<?> loadData;
   private DataCacheKey originalKey;
 
-  public SourceGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {
+  SourceGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {
     this.helper = helper;
     this.cb = cb;
   }

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java
Patch:
@@ -3,7 +3,7 @@
  * Interface for handling operations on a primitive array type.
  * @param <T> Array type (e.g. byte[], int[])
  */
-public interface ArrayAdapterInterface<T> {
+interface ArrayAdapterInterface<T> {
 
   /**
    * TAG for logging.

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BaseKeyPool.java
Patch:
@@ -7,7 +7,7 @@ abstract class BaseKeyPool<T extends Poolable> {
   private static final int MAX_SIZE = 20;
   private final Queue<T> keyPool = Util.createQueue(MAX_SIZE);
 
-  protected T get() {
+  T get() {
     T result = keyPool.poll();
     if (result == null) {
       result = create();
@@ -21,5 +21,5 @@ public void offer(T key) {
     }
   }
 
-  protected abstract T create();
+  abstract T create();
 }

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java
Patch:
@@ -127,11 +127,11 @@ private static class LinkedEntry<K, V> {
 
     // Used only for the first item in the list which we will treat specially and which will not
     // contain a value.
-    public LinkedEntry() {
+    LinkedEntry() {
       this(null);
     }
 
-    public LinkedEntry(K key) {
+    LinkedEntry(K key) {
       next = prev = this;
       this.key = key;
     }

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
Patch:
@@ -16,7 +16,7 @@
  */
 public final class LruArrayPool implements ArrayPool {
   // 4MB.
-  static final int DEFAULT_SIZE = 4 * 1024 * 1024;
+  private static final int DEFAULT_SIZE = 4 * 1024 * 1024;
 
   /**
    * The maximum number of times larger an int array may be to be than a requested size to eligible

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
Patch:
@@ -62,6 +62,8 @@ public LruBitmapPool(long maxSize) {
    *                       allowed to be put into the pool. Configs not in the allowed put will be
    *                       rejected.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   public LruBitmapPool(long maxSize, Set<Bitmap.Config> allowedConfigs) {
     this(maxSize, getDefaultStrategy(), allowedConfigs);
   }
@@ -306,7 +308,7 @@ public void remove(Bitmap bitmap) {
     }
   }
 
-  private static class NullBitmapTracker implements BitmapTracker {
+  private static final class NullBitmapTracker implements BitmapTracker {
 
     @Synthetic
     NullBitmapTracker() { }

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
Patch:
@@ -4,6 +4,7 @@
 import android.graphics.Bitmap;
 import android.os.Build;
 import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
 import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import java.util.TreeMap;
@@ -106,7 +107,7 @@ static String getBitmapString(int size) {
     return "[" + size + "]";
   }
 
-  // Visible for testing.
+  @VisibleForTesting
   static class KeyPool extends BaseKeyPool<Key> {
 
     public Key get(int size) {
@@ -121,7 +122,7 @@ protected Key create() {
     }
   }
 
-  // Visible for testing.
+  @VisibleForTesting
   static final class Key implements Poolable {
     private final KeyPool pool;
     @Synthetic int size;

File: library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java
Patch:
@@ -64,6 +64,8 @@ interface Writer {
    *
    * @param key The key to remove.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   void delete(Key key);
 
   /**

File: library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalCacheDiskCacheFactory.java
Patch:
@@ -11,6 +11,8 @@
  *
  * @deprecated use {@link ExternalPreferredCacheDiskCacheFactory} instead.
  */
+// Public API.
+@SuppressWarnings({"unused", "WeakerAccess"})
 @Deprecated
 public final class ExternalCacheDiskCacheFactory extends DiskLruCacheFactory {
 

File: library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java
Patch:
@@ -11,6 +11,8 @@
  *
  * <p><b>Images can be read by everyone when using external disk cache.</b>
  */
+// Public API.
+@SuppressWarnings({"unused", "WeakerAccess"})
 public final class ExternalPreferredCacheDiskCacheFactory extends DiskLruCacheFactory {
 
   public ExternalPreferredCacheDiskCacheFactory(Context context) {

File: library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
Patch:
@@ -7,6 +7,8 @@
  * Creates an {@link com.bumptech.glide.disklrucache.DiskLruCache} based disk cache in the internal
  * disk cache directory.
  */
+// Public API.
+@SuppressWarnings({"WeakerAccess", "unused"})
 public final class InternalCacheDiskCacheFactory extends DiskLruCacheFactory {
 
   public InternalCacheDiskCacheFactory(Context context) {

File: library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
Patch:
@@ -3,6 +3,7 @@
 import android.os.StrictMode;
 import android.os.StrictMode.ThreadPolicy;
 import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
 import android.util.Log;
 import com.bumptech.glide.util.Synthetic;
 import java.io.File;
@@ -206,7 +207,7 @@ public static GlideExecutor newAnimationExecutor() {
         new PriorityBlockingQueue<Runnable>());
   }
 
-  // Visible for testing.
+  @VisibleForTesting
   GlideExecutor(int poolSize, String name,
       UncaughtThrowableStrategy uncaughtThrowableStrategy, boolean preventNetworkOperations,
       boolean executeSynchronously) {

File: library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
Patch:
@@ -3,6 +3,7 @@
 import android.graphics.Bitmap;
 import android.os.Handler;
 import android.os.Looper;
+import android.support.annotation.VisibleForTesting;
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
@@ -53,7 +54,7 @@ public void preFill(PreFillType.Builder... bitmapAttributeBuilders) {
     handler.post(current);
   }
 
-  // Visible for testing.
+  @VisibleForTesting
   PreFillQueue generateAllocationOrder(PreFillType... preFillSizes) {
     final long maxSize =
         memoryCache.getMaxSize() - memoryCache.getCurrentSize() + bitmapPool.getMaxSize();

File: library/src/main/java/com/bumptech/glide/load/engine/prefill/PreFillType.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.graphics.Bitmap;
 import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
 import com.bumptech.glide.util.Preconditions;
 
 /**
@@ -10,7 +11,7 @@
  * single size and configuration.
  */
 public final class PreFillType {
-  // Visible for testing.
+  @VisibleForTesting
   static final Bitmap.Config DEFAULT_CONFIG = Bitmap.Config.RGB_565;
   private final int width;
   private final int height;

File: library/src/main/java/com/bumptech/glide/load/model/AssetUriLoader.java
Patch:
@@ -25,6 +25,8 @@ public class AssetUriLoader<Data> implements ModelLoader<Uri, Data> {
   private final AssetManager assetManager;
   private final AssetFetcherFactory<Data> factory;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public AssetUriLoader(AssetManager assetManager, AssetFetcherFactory<Data> factory) {
     this.assetManager = assetManager;
     this.factory = factory;

File: library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java
Patch:
@@ -20,6 +20,8 @@
 public class ByteArrayLoader<Data> implements ModelLoader<byte[], Data> {
   private final Converter<Data> converter;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public ByteArrayLoader(Converter<Data> converter) {
     this.converter = converter;
   }
@@ -49,7 +51,7 @@ private static class Fetcher<Data> implements DataFetcher<Data> {
     private final byte[] model;
     private final Converter<Data> converter;
 
-    public Fetcher(byte[] model, Converter<Data> converter) {
+    Fetcher(byte[] model, Converter<Data> converter) {
       this.model = model;
       this.converter = converter;
     }

File: library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
Patch:
@@ -25,6 +25,8 @@ public class FileLoader<Data> implements ModelLoader<File, Data> {
 
   private final FileOpener<Data> fileOpener;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public FileLoader(FileOpener<Data> fileOpener) {
     this.fileOpener = fileOpener;
   }
@@ -55,7 +57,7 @@ private static class FileFetcher<Data> implements DataFetcher<Data> {
     private final FileOpener<Data> opener;
     private Data data;
 
-    public FileFetcher(File file, FileOpener<Data> opener) {
+    FileFetcher(File file, FileOpener<Data> opener) {
       this.file = file;
       this.opener = opener;
     }

File: library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
Patch:
@@ -97,7 +97,7 @@ public int hashCode() {
    * would usually append an additional value. </p>
    */
    // PMD doesn't like the necessary static block to initialize DEFAULT_HEADERS.
-  @SuppressWarnings("PMD.FieldDeclarationsShouldBeAtStartOfClass")
+  @SuppressWarnings({"PMD.FieldDeclarationsShouldBeAtStartOfClass", "WeakerAccess"})
   public static final class Builder {
     private static final String USER_AGENT_HEADER = "User-Agent";
     private static final String DEFAULT_USER_AGENT = getSanitizedUserAgent();
@@ -163,6 +163,8 @@ public Builder addHeader(String key, LazyHeaderFactory factory) {
      * <p> Use {@link #setHeader(String, LazyHeaderFactory)} if obtaining the value requires I/O
      * (i.e. an OAuth token). </p>
      */
+    // Public API.
+    @SuppressWarnings("UnusedReturnValue")
     public Builder setHeader(String key, String value) {
       return setHeader(key, value == null ? null : new StringHeaderFactory(value));
     }

File: library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java
Patch:
@@ -22,7 +22,9 @@ public final class MediaStoreFileLoader implements ModelLoader<Uri, File>  {
 
   private final Context context;
 
-  MediaStoreFileLoader(Context context) {
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
+  public MediaStoreFileLoader(Context context) {
     this.context = context;
   }
 

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
Patch:
@@ -12,6 +12,8 @@
  * Maintains an ordered put of {@link ModelLoader}s and the model and data types they handle in
  * order from highest priority to lowest.
  */
+// Hides Model throughout.
+@SuppressWarnings("TypeParameterHidesVisibleType")
 public class ModelLoaderRegistry {
 
   private final MultiModelLoaderFactory multiModelLoaderFactory;
@@ -21,8 +23,7 @@ public ModelLoaderRegistry(Pool<List<Throwable>> throwableListPool) {
     this(new MultiModelLoaderFactory(throwableListPool));
   }
 
-  // Visible for testing.
-  ModelLoaderRegistry(MultiModelLoaderFactory multiModelLoaderFactory) {
+  private ModelLoaderRegistry(MultiModelLoaderFactory multiModelLoaderFactory) {
     this.multiModelLoaderFactory = multiModelLoaderFactory;
   }
 

File: library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
Patch:
@@ -137,7 +137,7 @@ public void onDataReady(Data data) {
 
     @Override
     public void onLoadFailed(Exception e) {
-      exceptions.add(e);
+      Preconditions.checkNotNull(exceptions).add(e);
       startNextOrFail();
     }
 
@@ -146,6 +146,7 @@ private void startNextOrFail() {
         currentIndex++;
         loadData(priority, callback);
       } else {
+        Preconditions.checkNotNull(exceptions);
         callback.onLoadFailed(new GlideException("Fetch failed", new ArrayList<>(exceptions)));
       }
     }

File: library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java
Patch:
@@ -20,6 +20,8 @@ public class ResourceLoader<Data> implements ModelLoader<Integer, Data> {
   private final ModelLoader<Uri, Data> uriLoader;
   private final Resources resources;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public ResourceLoader(Resources resources, ModelLoader<Uri, Data> uriLoader) {
     this.resources = resources;
     this.uriLoader = uriLoader;

File: library/src/main/java/com/bumptech/glide/load/model/StringLoader.java
Patch:
@@ -17,6 +17,8 @@
 public class StringLoader<Data> implements ModelLoader<String, Data> {
   private final ModelLoader<Uri, Data> uriLoader;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public StringLoader(ModelLoader<Uri, Data> uriLoader) {
     this.uriLoader = uriLoader;
   }

File: library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java
Patch:
@@ -45,7 +45,7 @@ private static class UnitFetcher<Model> implements DataFetcher<Model> {
 
     private final Model resource;
 
-    public UnitFetcher(Model resource) {
+    UnitFetcher(Model resource) {
       this.resource = resource;
     }
 

File: library/src/main/java/com/bumptech/glide/load/model/UriLoader.java
Patch:
@@ -35,6 +35,8 @@ public class UriLoader<Data> implements ModelLoader<Uri, Data> {
 
   private final LocalUriFetcherFactory<Data> factory;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public UriLoader(LocalUriFetcherFactory<Data> factory) {
     this.factory = factory;
   }

File: library/src/main/java/com/bumptech/glide/load/model/UrlUriLoader.java
Patch:
@@ -25,6 +25,8 @@ public class UrlUriLoader<Data> implements ModelLoader<Uri, Data> {
   );
   private final ModelLoader<GlideUrl, Data> urlLoader;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public UrlUriLoader(ModelLoader<GlideUrl, Data> urlLoader) {
     this.urlLoader = urlLoader;
   }

File: library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java
Patch:
@@ -59,7 +59,7 @@ public LoadData<InputStream> buildLoadData(Model model, int width, int height, O
     List<String> alternateUrls = getAlternateUrls(model, width, height, options);
     LoadData<InputStream> concreteLoaderData = concreteLoader.buildLoadData(result, width, height,
         options);
-    if (alternateUrls.isEmpty()) {
+    if (concreteLoaderData == null || alternateUrls.isEmpty()) {
       return concreteLoaderData;
     } else {
       return new LoadData<>(concreteLoaderData.sourceKey, getAlternateKeys(alternateUrls),
@@ -108,6 +108,8 @@ protected List<String> getAlternateUrls(Model model, int width, int height,
    * @param width The width in pixels of the view/target the image will be loaded into.
    * @param height The height in pixels of the view/target the image will be loaded into.
    */
+  // Public API.
+  @SuppressWarnings({"unused", "WeakerAccess"})
   @Nullable
   protected Headers getHeaders(Model model, int width, int height, Options options) {
     return Headers.DEFAULT;

File: library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java
Patch:
@@ -15,6 +15,8 @@
  * An {@link com.bumptech.glide.load.model.ModelLoader} for translating {@link
  * com.bumptech.glide.load.model.GlideUrl} (http/https URLS) into {@link java.io.InputStream} data.
  */
+// Public API.
+@SuppressWarnings("WeakerAccess")
 public class HttpGlideUrlLoader implements ModelLoader<GlideUrl, InputStream> {
   /**
    * An integer option that is used to determine the maximum connect and read timeout durations (in
@@ -31,7 +33,7 @@ public HttpGlideUrlLoader() {
     this(null);
   }
 
-  public HttpGlideUrlLoader(ModelCache<GlideUrl, GlideUrl> modelCache) {
+  public HttpGlideUrlLoader(@Nullable ModelCache<GlideUrl, GlideUrl> modelCache) {
     this.modelCache = modelCache;
   }
 

File: library/src/main/java/com/bumptech/glide/load/model/stream/HttpUriLoader.java
Patch:
@@ -21,6 +21,8 @@ public class HttpUriLoader implements ModelLoader<Uri, InputStream> {
 
   private final ModelLoader<GlideUrl, InputStream> urlLoader;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public HttpUriLoader(ModelLoader<GlideUrl, InputStream> urlLoader) {
     this.urlLoader = urlLoader;
   }

File: library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreImageThumbLoader.java
Patch:
@@ -16,8 +16,10 @@
  * thumbnails for those {@link Uri}s in the media store.
  */
 public class MediaStoreImageThumbLoader implements ModelLoader<Uri, InputStream> {
-  public final Context context;
+  private final Context context;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public MediaStoreImageThumbLoader(Context context) {
     this.context = context.getApplicationContext();
   }

File: library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreVideoThumbLoader.java
Patch:
@@ -25,15 +25,16 @@
 public class MediaStoreVideoThumbLoader implements ModelLoader<Uri, InputStream> {
   private final Context context;
 
-  MediaStoreVideoThumbLoader(Context context) {
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
+  public MediaStoreVideoThumbLoader(Context context) {
     this.context = context.getApplicationContext();
   }
 
   @Override
   @Nullable
   public LoadData<InputStream> buildLoadData(Uri model, int width, int height, Options options) {
     if (MediaStoreUtil.isThumbnailSize(width, height) && isRequestingDefaultFrame(options)) {
-      // TODO(nnaze): Tighten down this call to just the dependencies neede by buildVideoFetcher
       return new LoadData<>(new ObjectKey(model), ThumbFetcher.buildVideoFetcher(context, model));
     } else {
       return null;

File: library/src/main/java/com/bumptech/glide/load/model/stream/UrlLoader.java
Patch:
@@ -17,6 +17,8 @@
 public class UrlLoader implements ModelLoader<URL, InputStream> {
   private final ModelLoader<GlideUrl, InputStream> glideUrlLoader;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public UrlLoader(ModelLoader<GlideUrl, InputStream> glideUrlLoader) {
     this.glideUrlLoader = glideUrlLoader;
   }

File: library/src/main/java/com/bumptech/glide/load/resource/UnitTransformation.java
Patch:
@@ -6,12 +6,12 @@
 import java.security.MessageDigest;
 
 /**
- * A noop Transformation that simply returns the given resource.
+ * A no-op Transformation that simply returns the given resource.
  *
  * @param <T> The type of the resource that will always be returned unmodified.
  */
 public final class UnitTransformation<T> implements Transformation<T> {
-  private static final Transformation<?> TRANSFORMATION = new UnitTransformation<Object>();
+  private static final Transformation<?> TRANSFORMATION = new UnitTransformation<>();
 
   /**
    * Returns a UnitTransformation for the given type.

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableDecoder.java
Patch:
@@ -23,6 +23,8 @@ public class BitmapDrawableDecoder<DataType> implements ResourceDecoder<DataType
   private final Resources resources;
   private final BitmapPool bitmapPool;
 
+  // Public API.
+  @SuppressWarnings("unused")
   public BitmapDrawableDecoder(Context context, ResourceDecoder<DataType, Bitmap> decoder) {
     this(context.getResources(), Glide.get(context).getBitmapPool(), decoder);
   }

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResource.java
Patch:
@@ -20,6 +20,8 @@ public class BitmapDrawableResource extends DrawableResource<BitmapDrawable>
     implements Initializable {
   private final BitmapPool bitmapPool;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public BitmapDrawableResource(BitmapDrawable drawable, BitmapPool bitmapPool) {
     super(drawable);
     this.bitmapPool = bitmapPool;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java
Patch:
@@ -20,6 +20,8 @@ public class BitmapDrawableTransformation implements Transformation<BitmapDrawab
 
   private final Transformation<Drawable> wrapped;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public BitmapDrawableTransformation(Transformation<Bitmap> wrapped) {
     this.wrapped =
         Preconditions.checkNotNull(new DrawableTransformation(wrapped, /*isRequired=*/ false));
@@ -72,6 +74,7 @@ private static Resource<Drawable> convertToDrawableResource(
     return (Resource<Drawable>) (Resource<? extends Drawable>) toConvert;
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public boolean equals(Object o) {
     if (o instanceof BitmapDrawableTransformation) {

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java
Patch:
@@ -10,6 +10,8 @@
 /**
  * Contains {@link Bitmap} specific animation options.
  */
+// Public API.
+@SuppressWarnings({"unused", "WeakerAccess"})
 public final class BitmapTransitionOptions extends
     TransitionOptions<BitmapTransitionOptions, Bitmap> {
 

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/CircleCrop.java
Patch:
@@ -25,6 +25,7 @@ public CircleCrop() {
 
   /**
    * @deprecated Use {@link #CircleCrop()}.
+   * @param context Ignored.
    */
   @Deprecated
   public CircleCrop(@SuppressWarnings("unused") Context context) {
@@ -33,6 +34,7 @@ public CircleCrop(@SuppressWarnings("unused") Context context) {
 
   /**
    * @deprecated Use {@link #CircleCrop()}
+   * @param bitmapPool Ignored.
    */
   @Deprecated
   public CircleCrop(@SuppressWarnings("unused") BitmapPool bitmapPool) {

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser.java
Patch:
@@ -31,7 +31,7 @@ public final class DefaultImageHeaderParser implements ImageHeaderParser {
   private static final int MOTOROLA_TIFF_MAGIC_NUMBER = 0x4D4D;
   // "II".
   private static final int INTEL_TIFF_MAGIC_NUMBER = 0x4949;
-  static final String JPEG_EXIF_SEGMENT_PREAMBLE = "Exif\0\0";
+  private static final String JPEG_EXIF_SEGMENT_PREAMBLE = "Exif\0\0";
   static final byte[] JPEG_EXIF_SEGMENT_PREAMBLE_BYTES =
       JPEG_EXIF_SEGMENT_PREAMBLE.getBytes(Charset.forName("UTF-8"));
   private static final int SEGMENT_SOS = 0xDA;
@@ -137,7 +137,6 @@ private ImageType getType(Reader reader) throws IOException {
    *
    * @return The exif orientation if present or -1 if the header couldn't be parsed or doesn't
    * contain an orientation
-   * @throws IOException
    */
   private int getOrientation(Reader reader, ArrayPool byteArrayPool) throws IOException {
     final int magicNumber = reader.getUInt16();

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java
Patch:
@@ -5,6 +5,8 @@
 /**
  * Indicates the algorithm to use when downsampling images.
  */
+// Public API.
+@SuppressWarnings("WeakerAccess")
 public abstract class DownsampleStrategy {
 
   /**

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResource.java
Patch:
@@ -15,7 +15,7 @@
  * Lazily allocates a {@link android.graphics.drawable.BitmapDrawable} from a given
  * {@link android.graphics.Bitmap} on the first call to {@link #get()}.
  */
-public class LazyBitmapDrawableResource implements Resource<BitmapDrawable>,
+public final class LazyBitmapDrawableResource implements Resource<BitmapDrawable>,
     Initializable {
 
   private final Bitmap bitmap;
@@ -31,7 +31,7 @@ public static LazyBitmapDrawableResource obtain(Resources resources, BitmapPool
     return new LazyBitmapDrawableResource(resources, bitmapPool, bitmap);
   }
 
-  LazyBitmapDrawableResource(Resources resources, BitmapPool bitmapPool, Bitmap bitmap) {
+  private LazyBitmapDrawableResource(Resources resources, BitmapPool bitmapPool, Bitmap bitmap) {
     this.resources = Preconditions.checkNotNull(resources);
     this.bitmapPool = Preconditions.checkNotNull(bitmapPool);
     this.bitmap = Preconditions.checkNotNull(bitmap);

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java
Patch:
@@ -74,7 +74,7 @@ static class UntrustedCallbacks implements Downsampler.DecodeCallbacks {
     private final RecyclableBufferedInputStream bufferedStream;
     private final ExceptionCatchingInputStream exceptionStream;
 
-    public UntrustedCallbacks(RecyclableBufferedInputStream bufferedStream,
+    UntrustedCallbacks(RecyclableBufferedInputStream bufferedStream,
         ExceptionCatchingInputStream exceptionStream) {
       this.bufferedStream = bufferedStream;
       this.exceptionStream = exceptionStream;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/UnitBitmapDecoder.java
Patch:
@@ -1,7 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import android.graphics.Bitmap;
-import android.support.annotation.Nullable;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.Resource;
@@ -20,7 +19,6 @@ public boolean handles(Bitmap source, Options options) throws IOException {
     return true;
   }
 
-  @Nullable
   @Override
   public Resource<Bitmap> decode(Bitmap source, int width, int height, Options options)
       throws IOException {

File: library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java
Patch:
@@ -10,6 +10,8 @@
 public class ByteBufferRewinder implements DataRewinder<ByteBuffer> {
   private final ByteBuffer buffer;
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public ByteBufferRewinder(ByteBuffer buffer) {
     this.buffer = buffer;
   }

File: library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java
Patch:
@@ -8,6 +8,8 @@
 /**
  * Contains {@link Drawable} specific animation options.
  */
+// Public API.
+@SuppressWarnings("WeakerAccess")
 public final class DrawableTransitionOptions extends
     TransitionOptions<DrawableTransitionOptions, Drawable> {
 

File: library/src/main/java/com/bumptech/glide/load/resource/file/FileResource.java
Patch:
@@ -6,6 +6,8 @@
 /**
  * A simple {@link com.bumptech.glide.load.engine.Resource} that wraps a {@link File}.
  */
+// Public API.
+@SuppressWarnings("WeakerAccess")
 public class FileResource extends SimpleResource<File> {
   public FileResource(File file) {
     super(file);

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableResource.java
Patch:
@@ -8,6 +8,8 @@
  */
 public class GifDrawableResource extends DrawableResource<GifDrawable>
     implements Initializable {
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public GifDrawableResource(GifDrawable drawable) {
     super(drawable);
   }

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java
Patch:
@@ -20,6 +20,8 @@ public BitmapBytesTranscoder() {
     this(Bitmap.CompressFormat.JPEG, 100);
   }
 
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public BitmapBytesTranscoder(Bitmap.CompressFormat compressFormat, int quality) {
     this.compressFormat = compressFormat;
     this.quality = quality;

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java
Patch:
@@ -19,6 +19,8 @@ public class BitmapDrawableTranscoder implements ResourceTranscoder<Bitmap, Bitm
   private final Resources resources;
   private final BitmapPool bitmapPool;
 
+  // Public API.
+  @SuppressWarnings("unused")
   public BitmapDrawableTranscoder(Context context) {
     this(context.getResources(), Glide.get(context).getBitmapPool());
   }

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/UnitTranscoder.java
Patch:
@@ -9,7 +9,7 @@
  * @param <Z> The type of the resource that will be transcoded from and to.
  */
 public class UnitTranscoder<Z> implements ResourceTranscoder<Z, Z> {
-  private static final UnitTranscoder<?> UNIT_TRANSCODER = new UnitTranscoder<Object>();
+  private static final UnitTranscoder<?> UNIT_TRANSCODER = new UnitTranscoder<>();
 
   @SuppressWarnings("unchecked")
   public static <Z> ResourceTranscoder<Z, Z> get() {

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
Patch:
@@ -50,7 +50,7 @@ public RequestManagerFragment() {
    *
    * @param requestManager The request manager to use.
    */
-  public void setRequestManager(RequestManager requestManager) {
+  public void setRequestManager(@Nullable RequestManager requestManager) {
     this.requestManager = requestManager;
   }
 
@@ -86,7 +86,7 @@ private void removeChildRequestManagerFragment(RequestManagerFragment child) {
    * our parent is the fragment that we are annotating).
    */
   @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-  public Set<RequestManagerFragment> getDescendantRequestManagerFragments() {
+  private Set<RequestManagerFragment> getDescendantRequestManagerFragments() {
     if (rootRequestManagerFragment == this) {
       return Collections.unmodifiableSet(childRequestManagerFragments);
     } else if (rootRequestManagerFragment == null
@@ -110,7 +110,7 @@ public Set<RequestManagerFragment> getDescendantRequestManagerFragments() {
    * Sets a hint for which fragment is our parent which allows the fragment to return correct
    * information about its parents before pending fragment transactions have been executed.
    */
-  void setParentFragmentHint(Fragment parentFragmentHint) {
+  void setParentFragmentHint(@Nullable Fragment parentFragmentHint) {
     this.parentFragmentHint = parentFragmentHint;
     if (parentFragmentHint != null && parentFragmentHint.getActivity() != null) {
       registerFragmentWithRoot(parentFragmentHint.getActivity());

File: library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.manager;
 
 import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.util.Util;
 import java.util.ArrayList;
@@ -43,7 +44,7 @@ public void runRequest(Request request) {
     }
   }
 
-  // Visible for testing.
+  @VisibleForTesting
   void addRequest(Request request) {
     requests.add(request);
   }

File: library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
Patch:
@@ -49,7 +49,7 @@ public SupportRequestManagerFragment(ActivityFragmentLifecycle lifecycle) {
    *
    * @param requestManager The manager to put.
    */
-  public void setRequestManager(RequestManager requestManager) {
+  public void setRequestManager(@Nullable RequestManager requestManager) {
     this.requestManager = requestManager;
   }
 
@@ -86,7 +86,7 @@ private void removeChildRequestManagerFragment(SupportRequestManagerFragment chi
    * Returns the set of fragments that this RequestManagerFragment's parent is a parent to. (i.e.
    * our parent is the fragment that we are annotating).
    */
-  public Set<SupportRequestManagerFragment> getDescendantRequestManagerFragments() {
+  private Set<SupportRequestManagerFragment> getDescendantRequestManagerFragments() {
     if (rootRequestManagerFragment == null) {
       return Collections.emptySet();
     } else if (rootRequestManagerFragment == this) {
@@ -107,7 +107,7 @@ public Set<SupportRequestManagerFragment> getDescendantRequestManagerFragments()
    * Sets a hint for which fragment is our parent which allows the fragment to return correct
    * information about its parents before pending fragment transactions have been executed.
    */
-  void setParentFragmentHint(Fragment parentFragmentHint) {
+  void setParentFragmentHint(@Nullable Fragment parentFragmentHint) {
     this.parentFragmentHint = parentFragmentHint;
     if (parentFragmentHint != null && parentFragmentHint.getActivity() != null) {
       registerFragmentWithRoot(parentFragmentHint.getActivity());

File: library/src/main/java/com/bumptech/glide/module/AppGlideModule.java
Patch:
@@ -20,6 +20,8 @@
  * annotation processor, {@link AppGlideModule} implementations should override
  * {@link #isManifestParsingEnabled()} and return {@code false}.
  */
+// Used only in javadoc.
+@SuppressWarnings("deprecation")
 public abstract class AppGlideModule extends LibraryGlideModule implements AppliesOptions {
   /**
    * Returns {@code true} if Glide should check the AndroidManifest for {@link GlideModule}s.

File: library/src/main/java/com/bumptech/glide/module/ManifestParser.java
Patch:
@@ -10,6 +10,8 @@
 /**
  * Parses {@link com.bumptech.glide.module.GlideModule} references out of the AndroidManifest file.
  */
+// Used only in javadoc.
+@SuppressWarnings("deprecation")
 public final class ManifestParser {
   private static final String TAG = "ManifestParser";
   private static final String GLIDE_MODULE_VALUE = "GlideModule";

File: library/src/main/java/com/bumptech/glide/module/RegistersComponents.java
Patch:
@@ -7,6 +7,8 @@
 /**
  * An internal interface, to be removed when {@link GlideModule}s are removed.
  */
+// Used only in javadocs.
+@SuppressWarnings("deprecation")
 interface RegistersComponents {
 
   /**

File: library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
Patch:
@@ -34,14 +34,14 @@ public synchronized <T> void prepend(Class<T> dataClass, Encoder<T> encoder) {
 
   private static final class Entry<T> {
     private final Class<T> dataClass;
-    @Synthetic final Encoder<T> encoder;
+    @Synthetic @SuppressWarnings("WeakerAccess") final Encoder<T> encoder;
 
-    public Entry(Class<T> dataClass, Encoder<T> encoder) {
+    Entry(Class<T> dataClass, Encoder<T> encoder) {
       this.dataClass = dataClass;
       this.encoder = encoder;
     }
 
-    public boolean handles(Class<?> dataClass) {
+    boolean handles(Class<?> dataClass) {
       return this.dataClass.isAssignableFrom(dataClass);
     }
   }

File: library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class ResourceEncoderRegistry {
   // TODO: this should probably be a put.
-  final List<Entry<?>> encoders = new ArrayList<>();
+  private final List<Entry<?>> encoders = new ArrayList<>();
 
   public synchronized <Z> void append(Class<Z> resourceClass, ResourceEncoder<Z> encoder) {
     encoders.add(new Entry<>(resourceClass, encoder));

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -149,6 +149,7 @@ public static <R> SingleRequest<R> obtain(
     return request;
   }
 
+  @SuppressWarnings("WeakerAccess")
   @Synthetic
   SingleRequest() {
     // just create, instances are reused with recycle/init

File: library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java
Patch:
@@ -15,6 +15,8 @@
  * <p> Note - For cancellation to work correctly, you must pass in the same instance of this class
  * for every subsequent load. </p>
  */
+// Public API.
+@SuppressWarnings("WeakerAccess")
 public class AppWidgetTarget extends SimpleTarget<Bitmap> {
   private final int[] widgetIds;
   private final ComponentName componentName;

File: library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
Patch:
@@ -8,6 +8,8 @@
 /**
  * Efficiently displays multiple Bitmaps loaded serially into a single {@link android.view.View}.
  */
+// Public API.
+@SuppressWarnings("unused")
 public class BitmapThumbnailImageViewTarget extends ThumbnailImageViewTarget<Bitmap> {
   public BitmapThumbnailImageViewTarget(ImageView view) {
     super(view);

File: library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
Patch:
@@ -13,6 +13,8 @@ public DrawableImageViewTarget(ImageView view) {
     super(view);
   }
 
+  // Public API.
+  @SuppressWarnings("unused")
   public DrawableImageViewTarget(ImageView view, boolean waitForLayout) {
     super(view, waitForLayout);
   }

File: library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
Patch:
@@ -6,6 +6,8 @@
 /**
  * Efficiently displays multiple Drawables loaded serially into a single {@link android.view.View}.
  */
+// Public API.
+@SuppressWarnings("unused")
 public class DrawableThumbnailImageViewTarget extends ThumbnailImageViewTarget<Drawable> {
   public DrawableThumbnailImageViewTarget(ImageView view) {
     super(view);

File: library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
Patch:
@@ -13,6 +13,8 @@
  * @param <Z> The type of resource that this target will display in the wrapped {@link
  *            android.widget.ImageView}.
  */
+// Public API.
+@SuppressWarnings("WeakerAccess")
 public abstract class ImageViewTarget<Z> extends ViewTarget<ImageView, Z>
     implements Transition.ViewAdapter {
 

File: library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
Patch:
@@ -20,6 +20,8 @@
  *
  * @param <T> The type of resource that will be displayed in the ImageView.
  */
+// Public API.
+@SuppressWarnings("WeakerAccess")
 public abstract class ThumbnailImageViewTarget<T> extends ImageViewTarget<T> {
 
   public ThumbnailImageViewTarget(ImageView view) {

File: library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeTransition.java
Patch:
@@ -25,6 +25,8 @@ public class DrawableCrossFadeTransition implements Transition<Drawable> {
    *                         alpha at 100. See
    *                         {@link TransitionDrawable#setCrossFadeEnabled(boolean)}.
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public DrawableCrossFadeTransition(int duration,
       boolean isCrossFadeEnabled) {
     this.duration = duration;

File: library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java
Patch:
@@ -10,7 +10,7 @@
  * {@link com.bumptech.glide.request.target.Target}.
  */
 public class NoTransition<R> implements Transition<R> {
-  @Synthetic static final NoTransition<?> NO_ANIMATION = new NoTransition<Object>();
+  @Synthetic static final NoTransition<?> NO_ANIMATION = new NoTransition<>();
   @SuppressWarnings("rawtypes")
   private static final TransitionFactory<?> NO_ANIMATION_FACTORY = new NoAnimationFactory();
 

File: library/src/main/java/com/bumptech/glide/request/transition/ViewPropertyTransition.java
Patch:
@@ -19,6 +19,8 @@ public class ViewPropertyTransition<R> implements Transition<R> {
    *
    * @param animator The animator to use.
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public ViewPropertyTransition(Animator animator) {
     this.animator = animator;
   }

File: library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java
Patch:
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
+import android.support.annotation.VisibleForTesting;
 import com.bumptech.glide.load.Key;
 import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
@@ -34,7 +35,7 @@ public static Key obtain(Context context) {
     return result;
   }
 
-  // Visible for testing.
+  @VisibleForTesting
   static void reset() {
     PACKAGE_NAME_TO_KEY.clear();
   }

File: library/src/main/java/com/bumptech/glide/util/ViewPreloadSizeProvider.java
Patch:
@@ -37,6 +37,8 @@ public ViewPreloadSizeProvider() {
    * @param view A not null View the size will be extracted from async using an {@link
    *             android.view.ViewTreeObserver .OnPreDrawListener}
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   public ViewPreloadSizeProvider(View view) {
     this.viewTarget = new SizeViewTarget(view, this);
   }
@@ -73,7 +75,7 @@ public void setView(View view) {
   }
 
   private static final class SizeViewTarget extends ViewTarget<View, Object> {
-    public SizeViewTarget(View view, SizeReadyCallback callback) {
+    SizeViewTarget(View view, SizeReadyCallback callback) {
       super(view);
       getSize(callback);
     }

File: library/src/test/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -161,7 +161,7 @@ public void testDoesNotRestartRequestsOnDisconnected() {
   public void testThrowsIfResumeCalledOnBackgroundThread() throws InterruptedException {
     testInBackground(new BackgroundUtil.BackgroundTester() {
       @Override
-      public void runTest() throws Exception {
+      public void runTest() {
         manager.resumeRequests();
       }
     });
@@ -171,7 +171,7 @@ public void runTest() throws Exception {
   public void testThrowsIfPauseCalledOnBackgroundThread() throws InterruptedException {
     testInBackground(new BackgroundUtil.BackgroundTester() {
       @Override
-      public void runTest() throws Exception {
+      public void runTest() {
         manager.pauseRequests();
       }
     });

File: library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
Patch:
@@ -41,7 +41,7 @@ public class HttpUrlFetcherServerTest {
   private static final String DEFAULT_PATH = "/fakepath";
   private static final int TIMEOUT_TIME_MS = 300;
 
-  @Mock DataFetcher.DataCallback<InputStream> callback;
+  @Mock private DataFetcher.DataCallback<InputStream> callback;
 
   private MockWebServer mockWebServer;
   private boolean defaultFollowRedirects;

File: library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
Patch:
@@ -26,7 +26,7 @@
 @Config(manifest = Config.NONE, sdk = 18)
 public class LocalUriFetcherTest {
   private TestLocalUriFetcher fetcher;
-  @Mock DataFetcher.DataCallback<Closeable> callback;
+  @Mock private DataFetcher.DataCallback<Closeable> callback;
 
   @Before
   public void setUp() {
@@ -61,7 +61,7 @@ public void testHandlesExceptionOnClose() throws Exception {
   private static class TestLocalUriFetcher extends LocalUriFetcher<Closeable> {
     final Closeable closeable = mock(Closeable.class);
 
-    public TestLocalUriFetcher(Context context, Uri uri) {
+    TestLocalUriFetcher(Context context, Uri uri) {
       super(context.getContentResolver(), uri);
     }
 

File: library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
Patch:
@@ -22,9 +22,9 @@
 @Config(manifest = Config.NONE, sdk = 18)
 public class ThumbFetcherTest {
 
-  @Mock ThumbnailStreamOpener opener;
-  @Mock DataFetcher.DataCallback<InputStream> callback;
-  @Mock InputStream expected;
+  @Mock private ThumbnailStreamOpener opener;
+  @Mock private DataFetcher.DataCallback<InputStream> callback;
+  @Mock private InputStream expected;
 
   private ThumbFetcher fetcher;
   private Uri uri;

File: library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
Patch:
@@ -120,7 +120,7 @@ static class Factory {
     int height = 100;
     Transformation<?> transformation = mock(Transformation.class);
     Class<?> resourceClass = Object.class;
-    Options options = new Options();
+    final Options options = new Options();
 
     Factory() {
       doAnswer(new Util.WriteDigest("transformation")).when(transformation)

File: library/src/test/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java
Patch:
@@ -326,15 +326,15 @@ private String getKey() {
   }
 
   private interface CacheListener {
-    public void onItemRemoved(Object item);
+    void onItemRemoved(Object item);
 
-    public int getSize(Object item);
+    int getSize(Object item);
   }
 
   private static class TestLruCache extends LruCache<String, Object> {
     private final CacheListener listener;
 
-    public TestLruCache(int size, CacheListener listener) {
+    TestLruCache(int size, CacheListener listener) {
       super(size);
       this.listener = listener;
     }

File: library/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
Patch:
@@ -42,10 +42,10 @@ private String getNextId() {
     return String.valueOf(nextId++);
   }
 
-  private static class MockKey implements Key {
-    private String id;
+  private static final class MockKey implements Key {
+    private final String id;
 
-    public MockKey(String id) {
+    MockKey(String id) {
       this.id = id;
     }
 

File: library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
Patch:
@@ -30,7 +30,9 @@ public void setUp() {
 
   @After
   public void tearDown() {
-    file.delete();
+    if (!file.delete()) {
+      throw new IllegalStateException("Failed to delete: " + file);
+    }
   }
 
   @Test

File: library/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java
Patch:
@@ -7,6 +7,7 @@
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.data.HttpUrlFetcher;
 import com.bumptech.glide.load.model.GlideUrl;
+import com.bumptech.glide.util.Preconditions;
 import java.io.InputStream;
 import org.junit.Before;
 import org.junit.Test;
@@ -29,7 +30,8 @@ public void setUp() {
 
   @Test
   public void testReturnsValidFetcher() {
-    DataFetcher<InputStream> result = loader.buildLoadData(model, 100, 100, new Options()).fetcher;
+    DataFetcher<InputStream> result =
+        Preconditions.checkNotNull(loader.buildLoadData(model, 100, 100, new Options())).fetcher;
     assertThat(result).isInstanceOf(HttpUrlFetcher.class);
   }
 }

File: library/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
Patch:
@@ -24,7 +24,7 @@ public class HttpUriLoaderTest {
   private static final int IMAGE_SIDE = 100;
   private static final Options OPTIONS = new Options();
 
-  @Mock ModelLoader<GlideUrl, InputStream> urlLoader;
+  @Mock private ModelLoader<GlideUrl, InputStream> urlLoader;
   private HttpUriLoader loader;
 
   @Before

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
Patch:
@@ -54,10 +54,10 @@ public void testBitmapIsReturnedToPoolOnRecycle() {
   }
 
   private static class BitmapDrawableResourceHarness {
-    BitmapPool bitmapPool = mock(BitmapPool.class);
-    Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
+    final BitmapPool bitmapPool = mock(BitmapPool.class);
+    final Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
 
-    public BitmapDrawableResource create() {
+    BitmapDrawableResource create() {
       return new BitmapDrawableResource(
           new BitmapDrawable(RuntimeEnvironment.application.getResources(), bitmap), bitmapPool);
     }

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
Patch:
@@ -40,9 +40,9 @@
 @SuppressWarnings("deprecation")
 public class BitmapDrawableTransformationTest {
 
-  @Mock BitmapPool bitmapPool;
-  @Mock Transformation<Bitmap> wrapped;
-  @Mock Resource<BitmapDrawable> drawableResourceToTransform;
+  @Mock private BitmapPool bitmapPool;
+  @Mock private Transformation<Bitmap> wrapped;
+  @Mock private Resource<BitmapDrawable> drawableResourceToTransform;
 
   private BitmapDrawableTransformation transformation;
   private Bitmap bitmapToTransform;

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
Patch:
@@ -69,8 +69,8 @@ public void testThrowsIfBitmapAndBitmapPoolAreNull() {
   }
 
   private static class BitmapResourceHarness {
-    Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
-    BitmapPool bitmapPool = mock(BitmapPool.class);
-    BitmapResource resource = new BitmapResource(bitmap, bitmapPool);
+    final Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
+    final BitmapPool bitmapPool = mock(BitmapPool.class);
+    final BitmapResource resource = new BitmapResource(bitmap, bitmapPool);
   }
 }

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
Patch:
@@ -36,9 +36,9 @@
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
 public class CenterCropTest {
-  @Mock Resource<Bitmap> resource;
-  @Mock BitmapPool pool;
-  @Mock Transformation<Bitmap> transformation;
+  @Mock private Resource<Bitmap> resource;
+  @Mock private BitmapPool pool;
+  @Mock private Transformation<Bitmap> transformation;
 
   private CenterCrop centerCrop;
   private int bitmapWidth;

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java
Patch:
@@ -40,8 +40,8 @@
 @Config(manifest = Config.NONE, sdk = 18, shadows = { CenterInsideTest.DrawNothingCanvas.class })
 public class CenterInsideTest {
 
-  @Mock Resource<Bitmap> resource;
-  @Mock Transformation<Bitmap> transformation;
+  @Mock private Resource<Bitmap> resource;
+  @Mock private Transformation<Bitmap> transformation;
   private CenterInside centerInside;
   private int bitmapWidth;
   private int bitmapHeight;

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
Patch:
@@ -39,8 +39,8 @@
 @Config(manifest = Config.NONE, sdk = 18, shadows = { FitCenterTest.DrawNothingCanvas.class })
 public class FitCenterTest {
 
-  @Mock Resource<Bitmap> resource;
-  @Mock Transformation<Bitmap> transformation;
+  @Mock private Resource<Bitmap> resource;
+  @Mock private Transformation<Bitmap> transformation;
   private FitCenter fitCenter;
   private int bitmapWidth;
   private int bitmapHeight;

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
Patch:
@@ -19,6 +19,8 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
+// Not required in tests.
+@SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
 public class RecyclableBufferedInputStreamTest {

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
Patch:
@@ -36,7 +36,7 @@
     TransformationUtilsTest.AlphaShadowBitmap.class })
 public class TransformationUtilsTest {
 
-  @Mock BitmapPool bitmapPool;
+  @Mock private BitmapPool bitmapPool;
 
   @Before
   public void setUp() {

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
Patch:
@@ -13,6 +13,7 @@
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.util.Preconditions;
 import java.io.FileDescriptor;
 import java.io.IOException;
 import org.junit.Before;
@@ -48,7 +49,8 @@ public void testReturnsRetrievedFrameForResource() throws IOException {
 
     FileDescriptor toSet = FileDescriptor.in;
     when(resource.getFileDescriptor()).thenReturn(toSet);
-    Resource<Bitmap> result = decoder.decode(resource, 100, 100, options);
+    Resource<Bitmap> result =
+        Preconditions.checkNotNull(decoder.decode(resource, 100, 100, options));
 
     verify(retriever).setDataSource(eq(toSet));
     assertEquals(expected, result.get());

File: library/src/test/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.util.Preconditions;
 import java.io.File;
 import java.io.IOException;
 import org.junit.Before;
@@ -26,7 +27,7 @@ public void setUp() {
   @Test
   public void testReturnsGivenFileAsResource() throws IOException {
     File expected = new File("testFile");
-    Resource<File> decoded = decoder.decode(expected, 1, 1, options);
+    Resource<File> decoded = Preconditions.checkNotNull(decoder.decode(expected, 1, 1, options));
 
     assertEquals(expected, decoded.get());
   }

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
Patch:
@@ -35,8 +35,8 @@
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
 public class GifDrawableTransformationTest {
-  @Mock Transformation<Bitmap> wrapped;
-  @Mock BitmapPool bitmapPool;
+  @Mock private Transformation<Bitmap> wrapped;
+  @Mock private BitmapPool bitmapPool;
 
   private GifDrawableTransformation transformation;
   private Context context;

File: library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
Patch:
@@ -25,16 +25,15 @@
 public class StreamGifDecoderTest {
   private static final byte[] GIF_HEADER = new byte[] { 0x47, 0x49, 0x46 };
 
-  @Mock
-  ResourceDecoder<ByteBuffer, GifDrawable> byteBufferDecoder;
+  @Mock private ResourceDecoder<ByteBuffer, GifDrawable> byteBufferDecoder;
   private StreamGifDecoder decoder;
   private Options options;
 
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
 
-    List<ImageHeaderParser> parsers = new ArrayList<ImageHeaderParser>();
+    List<ImageHeaderParser> parsers = new ArrayList<>();
     parsers.add(new DefaultImageHeaderParser());
 
     decoder = new StreamGifDecoder(parsers, byteBufferDecoder, new LruArrayPool());

File: library/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
Patch:
@@ -129,7 +129,7 @@ private void runTest(TestCase testCase) {
   }
 
   private interface TestCase {
-    public void runTest(Harness harness);
+    void runTest(Harness harness);
   }
 
   private interface Harness {
@@ -145,7 +145,7 @@ private interface Harness {
 
     void onLowMemory();
 
-    void onTrimMemory(int level);
+    void onTrimMemory(@SuppressWarnings("SameParameterValue") int level);
   }
 
   private static class RequestManagerHarness implements Harness {

File: library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
Patch:
@@ -356,9 +356,9 @@ public void testReturnsFalseFromIsPausedWhenResumed() {
 
   private class ClearAndRemoveRequest implements Answer<Void> {
 
-    private Request toRemove;
+    private final Request toRemove;
 
-    public ClearAndRemoveRequest(Request toRemove) {
+    ClearAndRemoveRequest(Request toRemove) {
       this.toRemove = toRemove;
     }
 

File: library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
Patch:
@@ -124,7 +124,7 @@ private abstract static class AnimatedDrawable extends Drawable implements Anima
   private static final class TestTarget extends ImageViewTarget<Drawable> {
     public Drawable resource;
 
-    public TestTarget(ImageView view) {
+    TestTarget(ImageView view) {
       super(view);
     }
 

File: library/src/test/java/com/bumptech/glide/request/target/PreloadTargetTest.java
Patch:
@@ -18,7 +18,7 @@
 @Config(manifest = Config.NONE, sdk = 18)
 public class PreloadTargetTest {
 
-  @Mock RequestManager requestManager;
+  @Mock private RequestManager requestManager;
 
   @Before
   public void setUp() {

File: library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
Patch:
@@ -21,7 +21,7 @@ public class ExifTest {
 
   private ArrayPool byteArrayPool;
 
-  private InputStream open(String imageName) throws IOException {
+  private InputStream open(String imageName) {
     return TestResourceUtil.openResource(getClass(), "exif-orientation-examples/" + imageName);
   }
 

File: library/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
Patch:
@@ -11,6 +11,8 @@
 @Config(manifest = Config.NONE, sdk = 18)
 public class FixedPreloadSizeProviderTest {
 
+  // containsExactly doesn't need a return value check.
+  @SuppressWarnings("ResultOfMethodCallIgnored")
   @Test
   public void testReturnsGivenSize() {
     int width = 500;

File: library/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
Patch:
@@ -12,6 +12,8 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
+// containsExactly does not need its return value checked.
+@SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
 public class ViewPreloadSizeProviderTest {

File: samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java
Patch:
@@ -21,6 +21,7 @@
 import android.widget.ImageView;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.Target;
+import com.bumptech.glide.util.Preconditions;
 
 /**
  * An activity that demonstrates loading photos using
@@ -83,7 +84,8 @@ public void onClick(View v) {
   @Override
   protected void onActivityResult(int requestCode, int resultCode, Intent data) {
     if (requestCode == REQUEST_CONTACT && resultCode == RESULT_OK) {
-      final Cursor cursor = getContentResolver().query(data.getData(), null, null, null, null);
+      Uri uri = Preconditions.checkNotNull(data.getData());
+      final Cursor cursor = getContentResolver().query(uri, null, null, null, null);
       try {
         if (cursor != null && cursor.moveToFirst()) {
           final long contactId = cursor.getLong(cursor.getColumnIndex(Contacts._ID));

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideExtension.java
Patch:
@@ -8,6 +8,8 @@
 /**
  * Extension methods for the Flickr sample's generated API.
  */
+// Required by Glide's annotation processor.
+@SuppressWarnings("WeakerAccess")
 @GlideExtension
 public final class FlickrGlideExtension {
 

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/PhotoViewer.java
Patch:
@@ -7,11 +7,11 @@
  * An interface for an object that displays {@link com.bumptech.glide.samples.flickr.api.Photo}
  * objects.
  */
-public interface PhotoViewer {
+interface PhotoViewer {
   /**
    * Called whenever new {@link com.bumptech.glide.samples.flickr.api.Photo}s are loaded.
    *
    * @param photos The loaded photos.
    */
-  public void onPhotosUpdated(List<Photo> photos);
+  void onPhotosUpdated(List<Photo> photos);
 }

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/SquareImageView.java
Patch:
@@ -22,6 +22,8 @@ public SquareImageView(Context context, AttributeSet attrs, int defStyleAttr) {
     super(context, attrs, defStyleAttr);
   }
 
+  // We want a square view.
+  @SuppressWarnings("SuspiciousNameCombination")
   @Override
   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
     super.onMeasure(widthMeasureSpec, widthMeasureSpec);

File: samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/HorizontalGalleryFragment.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.samples.gallery;
 
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.LoaderManager;
 import android.support.v4.content.Loader;
@@ -27,8 +28,8 @@ public void onCreate(Bundle savedInstanceState) {
   }
 
   @Override
-  public View onCreateView(LayoutInflater inflater, ViewGroup container,
-      Bundle savedInstanceState) {
+  public View onCreateView(
+      @NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View result = inflater.inflate(R.layout.recycler_view, container, false);
     recyclerView = (RecyclerView) result.findViewById(R.id.recycler_view);
     GridLayoutManager layoutManager = new GridLayoutManager(getActivity(), 1);

File: samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MediaStoreDataLoader.java
Patch:
@@ -37,7 +37,7 @@ public class MediaStoreDataLoader extends AsyncTaskLoader<List<MediaStoreData>>
   private boolean observerRegistered = false;
   private final ForceLoadContentObserver forceLoadContentObserver = new ForceLoadContentObserver();
 
-  public MediaStoreDataLoader(Context context) {
+  MediaStoreDataLoader(Context context) {
     super(context);
   }
 

File: samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ApplicationModule.java
Patch:
@@ -8,7 +8,7 @@
  * The Application Dagger module for the Imgur sample.
  */
 @Module
-public class ApplicationModule {
+class ApplicationModule {
   @Provides
   OkHttpClient okHttpClient() {
     return new OkHttpClient();

File: samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Gallery.java
Patch:
@@ -7,7 +7,7 @@
  *
  * <p>Populated automatically by GSON.
  */
-public final class Gallery {
+final class Gallery {
   public List<Image> data;
 
   @Override

File: samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Image.java
Patch:
@@ -6,11 +6,11 @@
  * <p>Populated automatically by GSON
  */
 public final class Image {
-  public String id;
+  private String id;
   public String title;
   public String description;
   public String link;
-  public boolean is_album;
+  boolean is_album;
 
   @Override
   public String toString() {

File: samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurObservables.java
Patch:
@@ -10,15 +10,15 @@
 /**
  * Observables for retrieving metadata from Imgur's API.
  */
-public final class ImgurObservables {
+final class ImgurObservables {
 
   private final ImgurService imgurService;
 
   ImgurObservables(ImgurService imgurService) {
     this.imgurService = imgurService;
   }
 
-  public Observable<List<Image>> getHotViralImages(int maxPages) {
+  Observable<List<Image>> getHotViralImages(@SuppressWarnings("SameParameterValue") int maxPages) {
     return Observable.range(0, maxPages)
         .flatMap(new Func1<Integer, Observable<List<Image>>>() {
           @Override

File: samples/svg/src/main/java/com/bumptech/glide/samples/svg/MainActivity.java
Patch:
@@ -13,6 +13,7 @@
 import android.widget.TextView;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.util.Preconditions;
 import java.io.File;
 
 /**
@@ -53,7 +54,7 @@ public void clearCache(View v) {
     glideRequests.clear(imageViewRes);
     glideRequests.clear(imageViewNet);
     GlideApp.get(this).clearMemory();
-    File cacheDir = Glide.getPhotoCacheDir(this);
+    File cacheDir = Preconditions.checkNotNull(Glide.getPhotoCacheDir(this));
     if (cacheDir.isDirectory()) {
       for (File child : cacheDir.listFiles()) {
         if (!child.delete()) {

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -203,7 +203,8 @@ public static synchronized void init(Context context, GlideBuilder builder) {
   @VisibleForTesting
   public static synchronized void tearDown() {
     if (glide != null) {
-      glide.engine.tearDown();
+      glide.engine.shutdown();
+      glide.engine.clearDiskCache();
     }
     glide = null;
   }
@@ -564,7 +565,6 @@ public void clearDiskCache() {
     engine.clearDiskCache();
   }
 
-
   /**
    * Internal method.
    */

File: instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.bumptech.glide;
 
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.anyBoolean;
-import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyBoolean;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.verify;
 
 import android.content.Context;

File: library/src/main/java/com/bumptech/glide/load/engine/Engine.java
Patch:
@@ -54,7 +54,7 @@ public Engine(MemoryCache memoryCache,
         animationExecutor,
         /*jobs=*/ null,
         /*keyFactory=*/ null,
-        /*activeEngineResources=*/ null,
+        /*activeResources=*/ null,
         /*engineJobFactory=*/ null,
         /*decodeJobFactory=*/ null,
         /*resourceRecycler=*/ null);

File: library/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
Patch:
@@ -31,7 +31,7 @@ public class EngineResourceTest {
   public void setUp() {
     resource = mockResource();
     engineResource =
-        new EngineResource<>(resource, /*isMemoryCacheable=*/ true, /*isRecyclable=*/ true);
+        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
     listener = mock(EngineResource.ResourceListener.class);
     engineResource.setResourceListener(cacheKey, listener);
   }

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java
Patch:
@@ -17,6 +17,7 @@ public Statement apply(final Statement base, Description description) {
     return new Statement() {
       @Override
       public void evaluate() throws Throwable {
+        tearDownGlide();
         base.evaluate();
         tearDownGlide();
       }

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
Patch:
@@ -294,7 +294,7 @@ public StateVerifier getVerifier() {
   // Visible for testing.
   static class EngineResourceFactory {
     public <R> EngineResource<R> build(Resource<R> resource, boolean isMemoryCacheable) {
-      return new EngineResource<>(resource, isMemoryCacheable);
+      return new EngineResource<>(resource, isMemoryCacheable, /*isRecyclable=*/ true);
     }
   }
 

File: library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
Patch:
@@ -20,7 +20,7 @@ private DrawableDecoderCompat() {
   }
 
   /**
-   * @see #getDrawable(Context, int, Theme)
+   * See {@code getDrawable(Context, int, Theme)}.
    */
   public static Drawable getDrawable(Context context, @DrawableRes int id) {
     return getDrawable(context, id, /*theme=*/ null);

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
Patch:
@@ -55,7 +55,7 @@ public void setUp() {
     BitmapDrawable drawableToTransform = new BitmapDrawable(bitmapToTransform);
 
     context = RuntimeEnvironment.application;
-    Glide.init(new GlideBuilder().setBitmapPool(bitmapPool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(bitmapPool));
     when(drawableResourceToTransform.get()).thenReturn(drawableToTransform);
     transformation = new BitmapDrawableTransformation(wrapped);
   }

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
Patch:
@@ -38,7 +38,7 @@ public void setUp() {
     MockitoAnnotations.initMocks(this);
     context = RuntimeEnvironment.application;
 
-    Glide.init(new GlideBuilder().setBitmapPool(bitmapPool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(bitmapPool));
   }
 
   @After

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
Patch:
@@ -57,7 +57,7 @@ public void setUp() {
     when(pool.get(anyInt(), anyInt(), any(Bitmap.Config.class)))
         .thenAnswer(new Util.CreateBitmap());
     context = RuntimeEnvironment.application;
-    Glide.init(new GlideBuilder().setBitmapPool(pool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(pool));
 
     centerCrop = new CenterCrop();
   }

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java
Patch:
@@ -57,7 +57,7 @@ public void setUp() {
 
     context = RuntimeEnvironment.application;
     BitmapPool pool = new BitmapPoolAdapter();
-    Glide.init(new GlideBuilder().setBitmapPool(pool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(pool));
 
     centerInside = new CenterInside();
   }

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
Patch:
@@ -38,7 +38,7 @@ public void setup() {
     when(bitmapPool.get(anyInt(), anyInt(), any(Bitmap.Config.class)))
         .thenAnswer(new Util.CreateBitmap());
     Context context = RuntimeEnvironment.application;
-    Glide.init(new GlideBuilder().setBitmapPool(bitmapPool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(bitmapPool));
     circleCrop = new CircleCrop();
   }
 

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
Patch:
@@ -56,7 +56,7 @@ public void setUp() {
 
     BitmapPool pool = new BitmapPoolAdapter();
     context = RuntimeEnvironment.application;
-    Glide.init(new GlideBuilder().setBitmapPool(pool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(pool));
 
 
     fitCenter = new FitCenter();

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
Patch:
@@ -46,7 +46,7 @@ public void setUp() {
     MockitoAnnotations.initMocks(this);
     context = RuntimeEnvironment.application;
 
-    Glide.init(new GlideBuilder().setBitmapPool(bitmapPool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(bitmapPool));
     transformation = new GifDrawableTransformation(wrapped);
   }
 

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -184,6 +184,9 @@ public static synchronized void init(Glide glide) {
 
   @VisibleForTesting
   public static synchronized void tearDown() {
+    if (glide != null) {
+      glide.engine.tearDown();
+    }
     glide = null;
   }
 

File: library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java
Patch:
@@ -26,7 +26,7 @@
  * convenience. </p>
  */
 public class GlideUrl implements Key {
-  private static final String ALLOWED_URI_CHARS = "@#&=*+-_.,:!?()/~'%";
+  private static final String ALLOWED_URI_CHARS = "@#&=*+-_.,:!?()/~'%;$";
   private final Headers headers;
   @Nullable private final URL url;
   @Nullable private final String stringUrl;

File: annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/ExtensionWithType.java
Patch:
@@ -14,5 +14,7 @@ private ExtensionWithType() {
   }
 
   @GlideType(Number.class)
-  public static void asInteger(RequestBuilder<Number> builder) {}
+  public static RequestBuilder<Number> asNumber(RequestBuilder<Number> builder) {
+    return builder;
+  }
 }

File: library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
Patch:
@@ -111,8 +111,10 @@ public void onStop() {
   }
 
   private void setResourceInternal(@Nullable Z resource) {
-    maybeUpdateAnimatable(resource);
+    // Order matters here. Set the resource first to make sure that the Drawable has a valid and
+    // non-null Callback before starting it.
     setResource(resource);
+    maybeUpdateAnimatable(resource);
   }
 
   private void maybeUpdateAnimatable(@Nullable Z resource) {

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
Patch:
@@ -61,7 +61,6 @@ public Resource<Drawable> transform(Context context, Resource<Drawable> resource
 
     if (transformedBitmapResource.equals(bitmapResourceToTransform)) {
       transformedBitmapResource.recycle();
-      bitmapResourceToTransform.recycle();
       return resource;
     } else {
       return newDrawableResource(context, transformedBitmapResource.get());

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -785,7 +785,7 @@ private Request buildRequest(
     return buildRequestRecursive(
         target,
         targetListener,
-        /*requestCoordinator=*/ null,
+        /*parentCoordinator=*/ null,
         transitionOptions,
         requestOptions.getPriority(),
         requestOptions.getOverrideWidth(),

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -52,6 +52,7 @@
 import com.bumptech.glide.load.resource.bitmap.ByteBufferBitmapDecoder;
 import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.Downsampler;
+import com.bumptech.glide.load.resource.bitmap.ResourceBitmapDecoder;
 import com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder;
 import com.bumptech.glide.load.resource.bitmap.VideoBitmapDecoder;
 import com.bumptech.glide.load.resource.bytes.ByteBufferRewinder;
@@ -333,6 +334,8 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
             new GifFrameResourceDecoder(bitmapPool))
         /* Drawables */
         .append(Uri.class, Drawable.class, new ResourceDrawableDecoder(context))
+        .append(Uri.class, Bitmap.class,
+            new ResourceBitmapDecoder(new ResourceDrawableDecoder(context), bitmapPool))
         /* Files */
         .register(new ByteBufferRewinder.Factory())
         .append(File.class, ByteBuffer.class, new ByteBufferFileLoader.Factory())

File: instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
Patch:
@@ -35,7 +35,7 @@ public class TransformationUtilsTest {
   @Before
   public void setUp() throws Exception {
     bitmapPool = new BitmapPoolAdapter();
-    context = InstrumentationRegistry.getContext();
+    context = InstrumentationRegistry.getTargetContext();
     // TODO: Add Android API specific resources that work > API 16.
     assumeTrue(Build.VERSION.SDK_INT <= VERSION_CODES.JELLY_BEAN);
   }

File: instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java
Patch:
@@ -27,7 +27,7 @@ public interface drawable {
   }
 
   private static int getResourceId(String type, String resourceName) {
-    Context context = InstrumentationRegistry.getContext();
+    Context context = InstrumentationRegistry.getTargetContext();
     Resources res = context.getResources();
     return res.getIdentifier(resourceName, type, context.getPackageName());
   }

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -378,6 +378,7 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
         .append(GlideUrl.class, InputStream.class, new HttpGlideUrlLoader.Factory())
         .append(byte[].class, ByteBuffer.class, new ByteArrayLoader.ByteBufferFactory())
         .append(byte[].class, InputStream.class, new ByteArrayLoader.StreamFactory())
+        .append(Uri.class, Uri.class, new UnitModelLoader.Factory<Uri>())
         /* Transcoders */
         .register(Bitmap.class, BitmapDrawable.class,
             new BitmapDrawableTranscoder(resources, bitmapPool))

File: library/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -127,7 +127,7 @@ public Boolean answer(InvocationOnMock invocation) throws Throwable {
 
     Lifecycle lifecycle = mock(Lifecycle.class);
     RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);
-    requestManager = new RequestManager(Glide.get(getContext()), lifecycle, treeNode);
+    requestManager = new RequestManager(Glide.get(getContext()), lifecycle, treeNode, getContext());
     requestManager.resumeRequests();
   }
 

File: library/src/test/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -44,6 +44,7 @@ public class RequestManagerTest {
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
+    Context context = RuntimeEnvironment.application;
     connectivityMonitor = mock(ConnectivityMonitor.class);
     ConnectivityMonitorFactory factory = mock(ConnectivityMonitorFactory.class);
     when(factory.build(isA(Context.class), isA(ConnectivityMonitor.ConnectivityListener.class)))
@@ -61,7 +62,8 @@ public ConnectivityMonitor answer(InvocationOnMock invocation) throws Throwable
             lifecycle,
             treeNode,
             requestTracker,
-            factory);
+            factory,
+            context);
   }
 
   @Test

File: library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
Patch:
@@ -97,7 +97,7 @@ public SingleRequest<List> getRequest() {
         .signature(signature)
         .useUnlimitedSourceGeneratorsPool(useUnlimitedSourceGeneratorsPool);
       return SingleRequest
-          .obtain(glideContext, model, transcodeClass, requestOptions, overrideWidth,
+          .obtain(glideContext, glideContext, model, transcodeClass, requestOptions, overrideWidth,
               overrideHeight, priority, target, requestListener, requestCoordinator, engine,
               factory);
     }

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -595,7 +595,8 @@ public boolean isEquivalentTo(Request o) {
           // We do not want to require that RequestListeners implement equals/hashcode, so we don't
           // compare them using equals(). We can however, at least assert that the request listener
           // is either present or not present in both requests.
-          && requestListener != null ? that.requestListener != null : that.requestListener == null;
+          && (requestListener != null
+          ? that.requestListener != null : that.requestListener == null);
     }
     return false;
   }

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -674,7 +674,7 @@ void registerRequestManager(RequestManager requestManager) {
   void unregisterRequestManager(RequestManager requestManager) {
     synchronized (managers) {
       if (!managers.contains(requestManager)) {
-        throw new IllegalStateException("Cannot register not yet registered manager");
+        throw new IllegalStateException("Cannot unregister not yet registered manager");
       }
       managers.remove(requestManager);
     }

File: library/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
Patch:
@@ -86,13 +86,13 @@ public void testHandlesStreamIfContainsGifHeaderAndDisabledIsNotSet() throws IOE
 
   @Test
   public void testHandlesStreamIfContainsGifHeaderAndDisabledIsFalse() throws IOException {
-    options.set(ByteBufferGifDecoder.DISABLE_ANIMATION, false);
+    options.set(GifOptions.DISABLE_ANIMATION, false);
     assertThat(decoder.handles(ByteBuffer.wrap(GIF_HEADER), options)).isTrue();
   }
 
   @Test
   public void testDoesNotHandleStreamIfDisabled() throws IOException {
-    options.set(ByteBufferGifDecoder.DISABLE_ANIMATION, true);
+    options.set(GifOptions.DISABLE_ANIMATION, true);
     assertThat(decoder.handles(ByteBuffer.wrap(GIF_HEADER), options)).isFalse();
   }
 

File: library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
Patch:
@@ -53,13 +53,13 @@ public void testHandlesStreamIfContainsGifHeaderAndDisabledIsNotSet() throws IOE
 
   @Test
   public void testHandlesStreamIfContainsGifHeaderAndDisabledIsFalse() throws IOException {
-    options.set(StreamGifDecoder.DISABLE_ANIMATION, false);
+    options.set(GifOptions.DISABLE_ANIMATION, false);
     assertThat(decoder.handles(new ByteArrayInputStream(GIF_HEADER), options)).isTrue();
   }
 
   @Test
   public void testDoesNotHandleStreamIfDisabled() throws IOException {
-    options.set(StreamGifDecoder.DISABLE_ANIMATION, true);
+    options.set(GifOptions.DISABLE_ANIMATION, true);
     assertThat(decoder.handles(new ByteArrayInputStream(GIF_HEADER), options)).isFalse();
   }
 }

File: library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
Patch:
@@ -292,8 +292,8 @@ public void testIgnoresOnSizeReadyIfNotWaitingForSize() {
             anyBoolean(),
             any(Options.class),
             anyBoolean(),
-            /*useAnimationPool=*/ anyBoolean(),
             anyBoolean(),
+            /*useAnimationPool=*/ anyBoolean(),
             anyBoolean(),
             any(ResourceCallback.class));
   }
@@ -715,7 +715,7 @@ public void testCallsEngineWithOverrideWidthAndHeightIfSet() {
             any(Options.class),
             anyBoolean(),
             anyBoolean(),
-            /*useAnimationPool*/ anyBoolean(),
+            /*useAnimationPool=*/ anyBoolean(),
             anyBoolean(),
             any(ResourceCallback.class));
   }

File: library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
Patch:
@@ -131,7 +131,7 @@ private static int getSampleSize(GifHeader gifHeader, int targetWidth, int targe
     // Although functionally equivalent to 0 for BitmapFactory, 1 is a safer default for our code
     // than 0.
     int sampleSize = Math.max(1, powerOfTwoSampleSize);
-    if (Log.isLoggable(TAG, Log.VERBOSE)) {
+    if (Log.isLoggable(TAG, Log.VERBOSE) && sampleSize > 1) {
       Log.v(TAG, "Downsampling GIF"
           + ", sampleSize: " + sampleSize
           + ", target dimens: [" + targetWidth + "x" + targetHeight + "]"

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
Patch:
@@ -205,7 +205,7 @@ private void loadNextFrame() {
 
     gifDecoder.advance();
     next = new DelayTarget(handler, gifDecoder.getCurrentFrameIndex(), targetTime);
-    requestBuilder.clone().apply(signatureOf(getFrameSignature())).load(gifDecoder).into(next);
+    requestBuilder.apply(signatureOf(getFrameSignature())).load(gifDecoder).into(next);
   }
 
   private void recycleFirstFrame() {
@@ -298,11 +298,12 @@ private static RequestBuilder<Bitmap> getRequestBuilder(
         .asBitmap()
         .apply(
             diskCacheStrategyOf(DiskCacheStrategy.NONE)
+                .useAnimationPool(true)
                 .skipMemoryCache(true)
                 .override(width, height));
   }
 
-  static Key getFrameSignature() {
+  private static Key getFrameSignature() {
     // Some devices seem to have crypto bugs that throw exceptions when you create a new UUID.
     // See #1510.
     return new ObjectKey(Math.random());

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -439,6 +439,7 @@ public void onSizeReady(int width, int height) {
         requestOptions.getOptions(),
         requestOptions.isMemoryCacheable(),
         requestOptions.getUseUnlimitedSourceGeneratorsPool(),
+        requestOptions.getUseAnimationPool(),
         requestOptions.getOnlyRetrieveFromCache(),
         this);
     if (Log.isLoggable(TAG, Log.VERBOSE)) {

File: library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java
Patch:
@@ -1,7 +1,6 @@
 package com.bumptech.glide.load.engine.cache;
 
 import android.content.Context;
-
 import android.support.annotation.Nullable;
 import java.io.File;
 

File: samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplicationComponent.java
Patch:
@@ -4,7 +4,6 @@
 import dagger.Component;
 import dagger.android.AndroidInjector;
 import dagger.android.support.AndroidSupportInjectionModule;
-
 import javax.inject.Singleton;
 
 /**

File: library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.manager;
 
+import android.annotation.SuppressLint;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
@@ -55,6 +56,8 @@ private void unregister() {
   }
 
   @Synthetic
+  // Permissions are checked in the factory instead.
+  @SuppressLint("MissingPermission")
   boolean isConnected(Context context) {
     ConnectivityManager connectivityManager =
         (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);

File: library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
Patch:
@@ -57,7 +57,7 @@ public void reset() throws IOException {
   public long skip(long byteCount) throws IOException {
     long toSkip = getBytesToRead(byteCount);
     if (toSkip == END_OF_STREAM) {
-      return END_OF_STREAM;
+      return 0;
     }
 
     long read = super.skip(toSkip);

File: library/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
Patch:
@@ -135,7 +135,7 @@ public void testReturnsEndOfStream_whenSkipping_withZeroBytesRemainingInMarkLimi
     is.mark(MARK_LIMIT);
 
     assertEquals(MARK_LIMIT, is.skip(DATA_SIZE));
-    assertEquals(-1, is.skip(1));
+    assertEquals(0, is.skip(1));
   }
 
   @Test

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
Patch:
@@ -15,9 +15,9 @@
 
 /**
  * Runs the final steps of Glide's annotation process and generates the combined
- * {@link AppGlideModule}, {@link com.bumptech.glide.Glide},
- * {@link com.bumptech.glide.RequestManager}, and
- * {@link com.bumptech.glide.request.RequestOptions} classes.
+ * {@code AppGlideModule}, {@code com.bumptech.glide.Glide},
+ * {@code com.bumptech.glide.RequestManager}, and
+ * {@code com.bumptech.glide.request.RequestOptions} classes.
  */
 final class AppModuleProcessor {
   private static final String COMPILER_PACKAGE_NAME =

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
Patch:
@@ -23,7 +23,7 @@
  * Generates a Glide look-alike that acts as the entry point to the generated API
  * (GlideApp.with(...)).
  *
- * <p>>Generated {@link com.bumptech.glide.Glide} look-alikes look like this (note that the name
+ * <p>>Generated {@code com.bumptech.glide.Glide} look-alikes look like this (note that the name
  * is configurable in {@link com.bumptech.glide.annotation.GlideModule}):
  * <pre>
  * <code>

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/LibraryModuleProcessor.java
Patch:
@@ -11,7 +11,7 @@
 
 /**
  * Generates Indexer classes annotated with {@link Index} for all
- * {@link LibraryGlideModule}s.
+ * {@code LibraryGlideModule}s.
  */
 final class LibraryModuleProcessor {
   private ProcessorUtil processorUtil;

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
Patch:
@@ -10,10 +10,10 @@
 
 /**
  * Generates an implementation of
- * {@link com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory} that returns a
- * generated {@link com.bumptech.glide.RequestManager} implementation.
+ * {@code com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory} that returns a
+ * generated {@code com.bumptech.glide.RequestManager} implementation.
  *
- * <p>Generated {@link com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}
+ * <p>Generated {@code com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}
  * classes look like this:
  * <pre>
  * <code>

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
Patch:
@@ -30,10 +30,10 @@
 import javax.lang.model.util.Elements;
 
 /**
- * Generates an implementation of {@link com.bumptech.glide.RequestManager} that contains generated
+ * Generates an implementation of {@code com.bumptech.glide.RequestManager} that contains generated
  * methods from {@link GlideExtension}s and {@link GlideType}.
  *
- * <p>Generated {@link com.bumptech.glide.RequestManager} implementations look like this:
+ * <p>Generated {@code com.bumptech.glide.RequestManager} implementations look like this:
  * <pre>
  * <code>
  * public final class GeneratedRequestManager extends RequestManager {

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
Patch:
@@ -38,7 +38,7 @@
 import javax.lang.model.element.VariableElement;
 
 /**
- * Generates a new implementation of {@link com.bumptech.glide.request.RequestOptions}
+ * Generates a new implementation of {@code com.bumptech.glide.request.RequestOptions}
  * containing static versions of methods included in the base class and static and instance versions
  * of all methods annotated with {@link GlideOption} in classes annotated with
  * {@link GlideExtension}.
@@ -327,7 +327,7 @@ private List<MethodAndStaticVar> generateStaticMethodOverridesForRequestOptions(
    * an existing method in RequestOptions.
    *
    * <p>The string names here just map between the static methods in
-   * {@link com.bumptech.glide.request.RequestOptions} and the instance methods they call.
+   * {@code com.bumptech.glide.request.RequestOptions} and the instance methods they call.
    */
   private static String getInstanceMethodNameFromStaticMethodName(String staticMethodName) {
     String equivalentInstanceMethodName;

File: annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java
Patch:
@@ -16,7 +16,7 @@
 public @interface GlideModule {
   /**
    * Returns the name of the class that will be used as a replacement for
-   * {@link com.bumptech.glide.Glide} in Applications that depend on Glide's generated code.
+   * {@code com.bumptech.glide.Glide} in Applications that depend on Glide's generated code.
    */
   String glideName() default "GlideApp";
 }

File: library/src/main/java/com/bumptech/glide/load/model/Model.java
Patch:
@@ -9,7 +9,7 @@ public interface Model {
      * Returns {@code true} if this model produces the same image using the same mechanism
      * (server, authentication, source etc) as the given model.
      * <p>
-     * Models must also implement {@link #equals(Object other)} and {@link #hashCode()}
+     * Models must also override {@link Object#equals(Object other)} and {@link Object#hashCode()}
      * to ensure that caching functions correctly.
      * If this object returns {@code true} from this method for a given Model,
      * it must also be equal to and have the same hash code as the given model.

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -53,7 +53,7 @@ public final class Downsampler {
    */
   public static final Option<DownsampleStrategy> DOWNSAMPLE_STRATEGY =
       Option.memory("com.bumptech.glide.load.resource.bitmap.Downsampler.DownsampleStrategy",
-          DownsampleStrategy.AT_LEAST);
+          DownsampleStrategy.DEFAULT);
   /**
    * Ensure that the size of the bitmap is fixed to the requested width and height of the
    * resource from the caller.  The final resource dimensions may differ from the requested

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -249,7 +249,7 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
     } catch (ClassNotFoundException e) {
       if (Log.isLoggable(TAG, Log.WARN)) {
         Log.w(TAG, "Failed to find GeneratedAppGlideModule. You should include an"
-            + " annotationProcessor compile dependency on com.github.bumptech.glide:glide:compiler"
+            + " annotationProcessor compile dependency on com.github.bumptech.glide:compiler"
             + " in your application and a @GlideModule annotated AppGlideModule implementation or"
             + " LibraryGlideModules will be silently ignored");
       }

File: library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
Patch:
@@ -42,7 +42,7 @@ public Resource<Transcode> decode(DataRewinder<DataType> rewinder, int width, in
       Options options, DecodeCallback<ResourceType> callback) throws GlideException {
     Resource<ResourceType> decoded = decodeResource(rewinder, width, height, options);
     Resource<ResourceType> transformed = callback.onResourceDecoded(decoded);
-    return transcoder.transcode(transformed);
+    return transcoder.transcode(transformed, options);
   }
 
   private Resource<ResourceType> decodeResource(DataRewinder<DataType> rewinder, int width,

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.resource.transcode;
 
 import android.graphics.Bitmap;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.bytes.BytesResource;
 import java.io.ByteArrayOutputStream;
@@ -25,7 +26,7 @@ public BitmapBytesTranscoder(Bitmap.CompressFormat compressFormat, int quality)
   }
 
   @Override
-  public Resource<byte[]> transcode(Resource<Bitmap> toTranscode) {
+  public Resource<byte[]> transcode(Resource<Bitmap> toTranscode, Options options) {
     ByteArrayOutputStream os = new ByteArrayOutputStream();
     toTranscode.get().compress(compressFormat, quality, os);
     toTranscode.recycle();

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java
Patch:
@@ -5,6 +5,7 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.resource.bitmap.LazyBitmapDrawableResource;
@@ -28,7 +29,7 @@ public BitmapDrawableTranscoder(Resources resources, BitmapPool bitmapPool) {
   }
 
   @Override
-  public Resource<BitmapDrawable> transcode(Resource<Bitmap> toTranscode) {
+  public Resource<BitmapDrawable> transcode(Resource<Bitmap> toTranscode, Options options) {
     return LazyBitmapDrawableResource.obtain(resources, bitmapPool, toTranscode.get());
   }
 }

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoder.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.bytes.BytesResource;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
@@ -13,7 +14,7 @@
  */
 public class GifDrawableBytesTranscoder implements ResourceTranscoder<GifDrawable, byte[]> {
   @Override
-  public Resource<byte[]> transcode(Resource<GifDrawable> toTranscode) {
+  public Resource<byte[]> transcode(Resource<GifDrawable> toTranscode, Options options) {
     GifDrawable gifData = toTranscode.get();
     ByteBuffer byteBuffer = gifData.getBuffer();
     return new BytesResource(ByteBufferUtil.toBytes(byteBuffer));

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 
 /**
@@ -15,5 +16,5 @@ public interface ResourceTranscoder<Z, R> {
    *
    * @param toTranscode The resource to transcode.
    */
-  Resource<R> transcode(Resource<Z> toTranscode);
+  Resource<R> transcode(Resource<Z> toTranscode, Options options);
 }

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/UnitTranscoder.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 
 /**
@@ -16,7 +17,7 @@ public static <Z> ResourceTranscoder<Z, Z> get() {
   }
 
   @Override
-  public Resource<Z> transcode(Resource<Z> toTranscode) {
+  public Resource<Z> transcode(Resource<Z> toTranscode, Options options) {
     return toTranscode;
   }
 }

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
Patch:
@@ -6,6 +6,7 @@
 import static org.mockito.Mockito.when;
 
 import android.graphics.Bitmap;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import org.junit.Before;
 import org.junit.Test;
@@ -59,6 +60,7 @@ private static class BitmapBytesTranscoderHarness {
     final String description = "TestDescription";
     Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ALPHA_8);
     Resource<Bitmap> bitmapResource = mockResource();
+    Options options = new Options();
 
     public BitmapBytesTranscoderHarness() {
       when(bitmapResource.get()).thenReturn(bitmap);
@@ -67,7 +69,7 @@ public BitmapBytesTranscoderHarness() {
 
     public String getTranscodedDescription() {
       BitmapBytesTranscoder transcoder = new BitmapBytesTranscoder(compressFormat, quality);
-      Resource<byte[]> bytesResource = transcoder.transcode(bitmapResource);
+      Resource<byte[]> bytesResource = transcoder.transcode(bitmapResource, options);
 
       return new String(bytesResource.get());
     }

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
Patch:
@@ -7,6 +7,7 @@
 
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import org.junit.Before;
@@ -33,7 +34,7 @@ public void testReturnsBitmapDrawableResourceContainingGivenBitmap() {
     Resource<Bitmap> resource = mockResource();
     when(resource.get()).thenReturn(expected);
 
-    Resource<BitmapDrawable> transcoded = transcoder.transcode(resource);
+    Resource<BitmapDrawable> transcoded = transcoder.transcode(resource, new Options());
 
     assertEquals(expected, transcoded.get().getBitmap());
   }

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
Patch:
@@ -5,6 +5,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import java.nio.ByteBuffer;
@@ -33,7 +34,7 @@ public void testReturnsBytesOfGivenGifDrawable() {
       ByteBuffer expected = ByteBuffer.wrap(fakeData.getBytes());
       when(gifDrawable.getBuffer()).thenReturn(expected);
 
-      Resource<byte[]> transcoded = transcoder.transcode(resource);
+      Resource<byte[]> transcoded = transcoder.transcode(resource, new Options());
 
       assertArrayEquals(expected.array(), transcoded.get());
     }

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
Patch:
@@ -3,6 +3,7 @@
 import static com.bumptech.glide.tests.Util.mockResource;
 import static org.junit.Assert.assertEquals;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -16,6 +17,6 @@ public void testReturnsTheGivenResource() {
     Resource<Object> resource = mockResource();
     ResourceTranscoder<Object, Object> unitTranscoder = UnitTranscoder.get();
 
-    assertEquals(resource, unitTranscoder.transcode(resource));
+    assertEquals(resource, unitTranscoder.transcode(resource, new Options()));
   }
 }

File: samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgDrawableTranscoder.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.graphics.Picture;
 import android.graphics.drawable.PictureDrawable;
-
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.SimpleResource;
 import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
@@ -14,7 +14,7 @@
  */
 public class SvgDrawableTranscoder implements ResourceTranscoder<SVG, PictureDrawable> {
   @Override
-  public Resource<PictureDrawable> transcode(Resource<SVG> toTranscode) {
+  public Resource<PictureDrawable> transcode(Resource<SVG> toTranscode, Options options) {
     SVG svg = toTranscode.get();
     Picture picture = svg.renderToPicture();
     PictureDrawable drawable = new PictureDrawable(picture);

File: library/src/main/java/com/bumptech/glide/Registry.java
Patch:
@@ -23,7 +23,6 @@
 import com.bumptech.glide.provider.ResourceDecoderRegistry;
 import com.bumptech.glide.provider.ResourceEncoderRegistry;
 import com.bumptech.glide.util.pool.FactoryPools;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;

File: library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
Patch:
@@ -1,10 +1,8 @@
 package com.bumptech.glide.provider;
 
 import android.support.annotation.Nullable;
-
 import com.bumptech.glide.load.ResourceEncoder;
 import com.bumptech.glide.util.Synthetic;
-
 import java.util.ArrayList;
 import java.util.List;
 

File: library/src/main/java/com/bumptech/glide/util/Util.java
Patch:
@@ -4,7 +4,6 @@
 import android.graphics.Bitmap;
 import android.os.Build;
 import android.os.Looper;
-
 import com.bumptech.glide.load.model.Model;
 import com.bumptech.glide.request.target.Target;
 import java.util.ArrayDeque;

File: library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
Patch:
@@ -66,7 +66,9 @@ private Resource<ResourceType> decodeResourceWithList(DataRewinder<DataType> rew
           data = rewinder.rewindAndGet();
           result = decoder.decode(data, width, height, options);
         }
-      } catch (IOException e) {
+        // Some decoders throw unexpectedly. If they do, we shouldn't fail the entire load path, but
+        // instead log and continue. See #2406 for an example.
+      } catch (IOException | RuntimeException e) {
         if (Log.isLoggable(TAG, Log.VERBOSE)) {
           Log.v(TAG, "Failed to decode data for " + decoder, e);
         }

File: library/src/main/java/com/bumptech/glide/Registry.java
Patch:
@@ -252,7 +252,8 @@ public <Data, TResource> Registry prepend(
    *
    * @param buckets The list of bucket identifiers in order from highest priority to least priority.
    */
-  public Registry setResourceDecoderBucketPriorityList(List<String> buckets) {
+  // Final to avoid a PMD error.
+  public final Registry setResourceDecoderBucketPriorityList(List<String> buckets) {
     List<String> modifiedBuckets = new ArrayList<>(buckets);
     modifiedBuckets.add(0, BUCKET_PREPEND_ALL);
     modifiedBuckets.add(BUCKET_APPEND_ALL);

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
Patch:
@@ -165,6 +165,7 @@ TypeSpec generate(String generatedCodePackageName, @Nullable TypeSpec generatedO
         .addModifiers(Modifier.PUBLIC)
         .addTypeVariable(transcodeTypeName)
         .superclass(requestBuilderOfTranscodeType)
+        .addSuperinterface(Cloneable.class)
         .addMethods(generateConstructors())
         .addMethod(generateDownloadOnlyRequestMethod())
         .addMethods(generateGeneratedRequestOptionsEquivalents(generatedOptions))

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
Patch:
@@ -138,6 +138,7 @@ public MethodSignature apply(MethodAndStaticVar f) {
         .addJavadoc(generateClassJavadoc(glideExtensionClassNames))
         .addModifiers(Modifier.FINAL)
         .addModifiers(Modifier.PUBLIC)
+        .addSuperinterface(Cloneable.class)
         .superclass(requestOptionsName);
 
     for (MethodAndStaticVar methodAndStaticVar : allMethodsAndStaticVars) {

File: integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java
Patch:
@@ -5,7 +5,6 @@
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.load.model.GlideUrl;
-import com.bumptech.glide.module.GlideModule;
 import java.io.InputStream;
 
 /**
@@ -20,7 +19,7 @@
  * @deprecated replaced with com.bumptech.glide.integration.okhttp3.OkHttpGlideModule.
  */
 @Deprecated
-public class OkHttpGlideModule implements GlideModule {
+public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {
   @Override
   public void applyOptions(Context context, GlideBuilder builder) {
     // Do nothing.

File: integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java
Patch:
@@ -15,8 +15,11 @@
  * <p>For Applications that depend on this library and include an
  * {@link AppGlideModule} and Glide's annotation processor, this class
  * will be automatically included.
+ *
+ * @deprecated Prefer the okhttp3 version instead.
  */
 @GlideModule
+@Deprecated
 public class OkHttpLibraryGlideModule extends LibraryGlideModule {
   @Override
   public void registerComponents(Context context, Glide glide, Registry registry) {

File: integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
Patch:
@@ -5,7 +5,6 @@
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.load.model.GlideUrl;
-import com.bumptech.glide.module.GlideModule;
 import java.io.InputStream;
 
 /**
@@ -21,7 +20,7 @@
  * annotations.
  */
 @Deprecated
-public class OkHttpGlideModule implements GlideModule {
+public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {
   @Override
   public void applyOptions(Context context, GlideBuilder builder) {
     // Do nothing.

File: integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
Patch:
@@ -5,7 +5,6 @@
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.load.model.GlideUrl;
-import com.bumptech.glide.module.GlideModule;
 import java.io.InputStream;
 
 /**
@@ -20,7 +19,8 @@
  * @deprecated Replaced with {@link VolleyLibraryGlideModule}.
  */
 @Deprecated
-public class VolleyGlideModule implements GlideModule {
+@SuppressWarnings("deprecation")
+public class VolleyGlideModule implements com.bumptech.glide.module.GlideModule {
   @Override
   public void applyOptions(Context context, GlideBuilder builder) {
     // Do nothing.

File: library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
Patch:
@@ -30,6 +30,7 @@ public BitmapPreFiller(MemoryCache memoryCache, BitmapPool bitmapPool,
     this.defaultFormat = defaultFormat;
   }
 
+  @SuppressWarnings("deprecation")
   public void preFill(PreFillType.Builder... bitmapAttributeBuilders) {
     if (current != null) {
       current.cancel();

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -186,7 +186,7 @@ public Resource<Bitmap> decode(InputStream is, int outWidth, int outHeight,
    * @return A new bitmap containing the image from the given InputStream, or recycle if recycle is
    * not null.
    */
-  @SuppressWarnings("resource")
+  @SuppressWarnings({"resource", "deprecation"})
   public Resource<Bitmap> decode(InputStream is, int requestedWidth, int requestedHeight,
       Options options, DecodeCallbacks callbacks) throws IOException {
     Preconditions.checkArgument(is.markSupported(), "You must provide an InputStream that supports"
@@ -476,6 +476,7 @@ private boolean shouldUsePool(ImageType imageType) throws IOException {
     return TYPES_THAT_USE_POOL_PRE_KITKAT.contains(imageType);
   }
 
+  @SuppressWarnings("deprecation")
   private void calculateConfig(
       InputStream is,
       DecodeFormat format,
@@ -672,6 +673,7 @@ private static void releaseOptions(BitmapFactory.Options decodeBitmapOptions) {
     }
   }
 
+  @SuppressWarnings("deprecation")
   private static void resetOptions(BitmapFactory.Options decodeBitmapOptions) {
     decodeBitmapOptions.inTempStorage = null;
     decodeBitmapOptions.inDither = false;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
Patch:
@@ -72,6 +72,7 @@ private HardwareConfigState() {
   }
 
   @TargetApi(Build.VERSION_CODES.O)
+  @SuppressWarnings("deprecation")
   boolean setHardwareConfigIfAllowed(
       int targetWidth,
       int targetHeight,

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
Patch:
@@ -159,6 +159,7 @@ private void unregisterFragmentWithRoot() {
     }
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public void onAttach(Activity activity) {
     super.onAttach(activity);

File: library/src/main/java/com/bumptech/glide/request/target/FixedSizeDrawable.java
Patch:
@@ -71,6 +71,7 @@ public int getChangingConfigurations() {
     return wrapped.getChangingConfigurations();
   }
 
+  @Deprecated
   @Override
   public void setDither(boolean dither) {
     wrapped.setDither(dither);

File: library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
Patch:
@@ -258,6 +258,7 @@ public void testAllocationOrderRoundRobinsDifferentSizes() {
   }
 
   @Test
+  @SuppressWarnings("deprecation")
   public void testSetsConfigOnBuildersToDefaultIfNotSet() {
     PreFillType.Builder builder = mock(PreFillType.Builder.class);
     when(builder.build())

File: library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
Patch:
@@ -253,6 +253,7 @@ public void testApplyingDefaultOptions_withTransform_retrainsTransform() {
   }
 
   @Test
+  @SuppressWarnings({"unchecked", "varargs"})
   public void testApplyMultiTransform() {
     options.transforms(new CircleCrop(), new CenterCrop());
     assertThat(options.isTransformationRequired()).isTrue();

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
Patch:
@@ -198,6 +198,7 @@ public void resetFrameIndex() {
     framePointer = INITIAL_FRAME_POINTER;
   }
 
+  @Deprecated
   @Override
   public int getLoopCount() {
     if (header.loopCount == GifHeader.NETSCAPE_LOOP_COUNT_DOES_NOT_EXIST) {

File: library/src/main/java/com/bumptech/glide/request/RequestOptions.java
Patch:
@@ -1005,7 +1005,7 @@ public RequestOptions transform(@NonNull Transformation<Bitmap> transformation)
    * @see #optionalTransform(Transformation)
    * @see #optionalTransform(Class, Transformation)
    */
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"unchecked", "varargs"})
   public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (isAutoCloneEnabled) {
       return clone().transforms(transformations);

File: library/src/main/java/com/bumptech/glide/request/RequestOptions.java
Patch:
@@ -122,7 +122,7 @@ public static RequestOptions sizeMultiplierOf(float sizeMultiplier) {
   }
 
   /**
-   * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set.
+   * Returns a {@link RequestOptions} object with {@link #diskCacheStrategy(DiskCacheStrategy)} set.
    */
   public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy diskCacheStrategy) {
     return new RequestOptions().diskCacheStrategy(diskCacheStrategy);

File: library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
Patch:
@@ -99,7 +99,7 @@ public synchronized boolean isCancelled() {
 
   @Override
   public synchronized boolean isDone() {
-    return isCancelled || resultReceived;
+    return isCancelled || resultReceived || loadFailed;
   }
 
   @Override

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -26,7 +26,6 @@
 import com.bumptech.glide.samples.flickr.api.Api;
 import com.bumptech.glide.samples.flickr.api.Photo;
 import com.bumptech.glide.samples.flickr.api.Query;
-import com.bumptech.glide.samples.flickr.api.RecentQuery;
 import com.bumptech.glide.samples.flickr.api.SearchQuery;
 import java.io.File;
 import java.util.ArrayList;
@@ -46,6 +45,7 @@ public class FlickrSearchActivity extends AppCompatActivity
     implements SearchView.OnQueryTextListener {
   private static final String TAG = "FlickrSearchActivity";
   private static final String STATE_QUERY = "state_search_string";
+  private static final Query DEFAULT_QUERY = new SearchQuery("kitten");
 
   private final QueryListener queryListener = new QueryListener();
   private View searching;
@@ -143,7 +143,7 @@ public void onCreate(Bundle savedInstanceState) {
         executeQuery(savedQuery);
       }
     } else {
-      executeQuery(RecentQuery.get());
+      executeQuery(DEFAULT_QUERY);
     }
 
     int smallGridSize = res.getDimensionPixelSize(R.dimen.small_photo_side);

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
Patch:
@@ -172,7 +172,7 @@ public static Bitmap fitCenter(@NonNull BitmapPool pool, @NonNull Bitmap inBitma
    * height is larger than the given dimensions
    */
   public static Bitmap centerInside(@NonNull BitmapPool pool, @NonNull Bitmap inBitmap, int width,
-                                 int height) {
+      int height) {
     if (inBitmap.getWidth() <= width && inBitmap.getHeight() <= height) {
       if (Log.isLoggable(TAG, Log.VERBOSE)) {
         Log.v(TAG, "requested target size larger or equal to input, returning input");
@@ -368,7 +368,7 @@ private static Bitmap getAlphaSafeBitmap(@NonNull BitmapPool pool,
 
     Bitmap argbBitmap = pool.get(maybeAlphaSafe.getWidth(), maybeAlphaSafe.getHeight(),
         Bitmap.Config.ARGB_8888);
-    new Canvas(argbBitmap).drawBitmap(maybeAlphaSafe, 0 /*left*/, 0 /*top*/, null /*pain*/);
+    new Canvas(argbBitmap).drawBitmap(maybeAlphaSafe, 0 /*left*/, 0 /*top*/, null /*paint*/);
 
     // We now own this Bitmap. It's our responsibility to replace it in the pool outside this method
     // when we're finished with it.

File: library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
Patch:
@@ -136,7 +136,7 @@ public static final class Builder {
      * pool is much less important on O than it was on previous versions.
      */
     static final int BITMAP_POOL_TARGET_SCREENS =
-        Build.VERSION.SDK_INT > Build.VERSION_CODES.O ? 4 : 1;
+        Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? 4 : 1;
 
     static final float MAX_SIZE_MULTIPLIER = 0.4f;
     static final float LOW_MEMORY_MAX_SIZE_MULTIPLIER = 0.33f;

File: library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
Patch:
@@ -27,7 +27,7 @@ public enum DecodeFormat {
 
   /**
    * Identical to {@link #PREFER_ARGB_8888} but prevents Glide from using {@link
-   * android.graphics.Bitmap.Config#HARDWARE} on Android O+
+   * android.graphics.Bitmap.Config#HARDWARE} on Android O+.
    *
    * @deprecated If you must disable hardware bitmaps, set
    * {@link com.bumptech.glide.load.resource.bitmap.Downsampler#ALLOW_HARDWARE_CONFIG} to false

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -478,7 +478,9 @@ private <Data, ResourceType> Resource<R> runLoadPath(Data data, DataSource dataS
     Options options = getOptionsWithHardwareConfig(dataSource);
     DataRewinder<Data> rewinder = glideContext.getRegistry().getRewinder(data);
     try {
-      return path.load(rewinder, options, width, height, new DecodeCallback<>(dataSource));
+      // ResourceType in DecodeCallback below is required for compilation to work with gradle.
+      return path.load(
+          rewinder, options, width, height, new DecodeCallback<ResourceType>(dataSource));
     } finally {
       rewinder.cleanup();
     }

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -194,8 +194,8 @@ public Resource<Bitmap> decode(InputStream is, int requestedWidth, int requested
     DecodeFormat decodeFormat = options.get(DECODE_FORMAT);
     DownsampleStrategy downsampleStrategy = options.get(DOWNSAMPLE_STRATEGY);
     boolean fixBitmapToRequestedDimensions = options.get(FIX_BITMAP_SIZE_TO_REQUESTED_DIMENSIONS);
-    boolean isHardwareConfigAllowed = options.get(ALLOW_HARDWARE_CONFIG) != null
-        ? options.get(ALLOW_HARDWARE_CONFIG) : false;
+    boolean isHardwareConfigAllowed =
+      options.get(ALLOW_HARDWARE_CONFIG) != null && options.get(ALLOW_HARDWARE_CONFIG);
     if (decodeFormat == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE) {
       isHardwareConfigAllowed = false;
     }

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.os.Build;
@@ -70,6 +71,7 @@ private HardwareConfigState() {
     // Singleton constructor.
   }
 
+  @TargetApi(Build.VERSION_CODES.O)
   boolean setHardwareConfigIfAllowed(
       int targetWidth,
       int targetHeight,

File: library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
Patch:
@@ -46,5 +46,5 @@ public enum DecodeFormat {
   /**
    * The default value for DecodeFormat.
    */
-  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;
+  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;
 }

File: library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
Patch:
@@ -267,6 +267,7 @@ public void testSetsConfigOnBuildersToDefaultIfNotSet() {
 
     InOrder order = inOrder(builder);
     order.verify(builder).setConfig(DecodeFormat.DEFAULT == DecodeFormat.PREFER_ARGB_8888
+        || DecodeFormat.DEFAULT == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE
         ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
     order.verify(builder).build();
   }

File: library/src/main/java/com/bumptech/glide/GlideBuilder.java
Patch:
@@ -199,7 +199,7 @@ public <T> GlideBuilder setDefaultTransitionOptions(
    */
   @Deprecated
   public GlideBuilder setDecodeFormat(DecodeFormat decodeFormat) {
-    defaultRequestOptions.apply(new RequestOptions().format(decodeFormat));
+    defaultRequestOptions = defaultRequestOptions.apply(new RequestOptions().format(decodeFormat));
     return this;
   }
 

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
Patch:
@@ -245,6 +245,7 @@ private static LruPoolStrategy getDefaultStrategy() {
     return strategy;
   }
 
+  @TargetApi(Build.VERSION_CODES.O)
   private static Set<Bitmap.Config> getDefaultAllowedConfigs() {
     Set<Bitmap.Config> configs = new HashSet<>();
     configs.addAll(Arrays.asList(Bitmap.Config.values()));

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.os.Build;
@@ -76,6 +77,7 @@ private HardwareConfigState() {
     // Singleton constructor.
   }
 
+  @TargetApi(Build.VERSION_CODES.O)
   boolean setHardwareConfigIfAllowed(
       int targetWidth, int targetHeight, BitmapFactory.Options optionsWithScaling) {
     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {

File: library/src/main/java/com/bumptech/glide/util/LruCache.java
Patch:
@@ -58,7 +58,7 @@ protected int getSize(Y item) {
   /**
    * Returns the number of entries stored in cache.
    */
-  protected int getCount() {
+  protected synchronized int getCount() {
     return cache.size();
   }
 

File: library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
Patch:
@@ -88,7 +88,6 @@ public List<Exception> getRootCauses() {
    * complete stack traces.
    */
   public void logRootCauses(String tag) {
-    Log.e(tag, getClass() + ": " + getMessage());
     List<Exception> causes = getRootCauses();
     for (int i = 0, size = causes.size(); i < size; i++) {
       Log.i(tag, "Root cause (" + (i + 1) + " of " + size + ")", causes.get(i));

File: library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
Patch:
@@ -53,6 +53,7 @@ public static ByteBuffer fromFile(File file) throws IOException {
   }
 
   public static void toFile(ByteBuffer buffer, File file) throws IOException {
+    buffer.position(0);
     RandomAccessFile raf = null;
     FileChannel channel = null;
     try {

File: samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java
Patch:
@@ -51,8 +51,8 @@ protected void onCreate(Bundle savedInstanceState) {
     numberEntry = (EditText) findViewById(R.id.number_entry);
     // Make sure that user gives application required permissions
     if (ContextCompat.checkSelfPermission(
-    getApplication(),
-    Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) {
+        getApplication(),
+        Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) {
       // No explanation needed, we can request the permission.
       ActivityCompat.requestPermissions(this,
       new String[]{Manifest.permission.READ_CONTACTS},

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -237,7 +237,7 @@ private static void initializeGlide(Context context) {
   }
 
   @Nullable
-  @SuppressWarnings({"unchecked", "deprecation"})
+  @SuppressWarnings({"unchecked", "deprecation", "TryWithIdenticalCatches"})
   private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
     GeneratedAppGlideModule result = null;
     try {
@@ -256,6 +256,7 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
       throw new IllegalStateException("GeneratedAppGlideModuleImpl is implemented incorrectly."
           + " If you've manually implemented this class, remove your implementation. The Annotation"
           + " processor will generate a correct implementation.", e);
+      // These exceptions can't be squashed across all versions of Android.
     } catch (IllegalAccessException e) {
       throw new IllegalStateException("GeneratedAppGlideModuleImpl is implemented incorrectly."
           + " If you've manually implemented this class, remove your implementation. The Annotation"
@@ -483,6 +484,7 @@ public void trimMemory(int level) {
    *     This method should always be called on a background thread, since it is a blocking call.
    * </p>
    */
+  @SuppressWarnings("unused") // Public API
   public void clearDiskCache() {
     Util.assertBackgroundThread();
     engine.clearDiskCache();

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -3,6 +3,7 @@
 import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.DrawableRes;
+import android.support.annotation.Nullable;
 import android.support.v4.content.res.ResourcesCompat;
 import android.support.v4.util.Pools;
 import android.support.v7.content.res.AppCompatResources;
@@ -85,6 +86,7 @@ private enum Status {
 
   private RequestCoordinator requestCoordinator;
   private GlideContext glideContext;
+  @Nullable
   private Object model;
   private Class<R> transcodeClass;
   private RequestOptions requestOptions;
@@ -557,7 +559,7 @@ public boolean isEquivalentTo(Request o) {
       SingleRequest that = (SingleRequest) o;
       return overrideWidth == that.overrideWidth
           && overrideHeight == that.overrideHeight
-          && model.equals(that.model)
+          && Util.bothNullOrEqual(model, that.model)
           && transcodeClass.equals(that.transcodeClass)
           && requestOptions.equals(that.requestOptions)
           && priority == that.priority;

File: library/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -13,6 +13,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.robolectric.Shadows.shadowOf;
 
 import android.content.ContentResolver;
 import android.content.Context;
@@ -78,9 +79,9 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Resetter;
-import org.robolectric.res.builder.RobolectricPackageManager;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowBitmap;
+import org.robolectric.shadows.ShadowPackageManager;
 
 /**
  * Tests for the {@link Glide} interface and singleton.
@@ -101,7 +102,7 @@ public class GlideTest {
   public void setUp() throws Exception {
     Glide.tearDown();
 
-    RobolectricPackageManager pm = RuntimeEnvironment.getRobolectricPackageManager();
+    ShadowPackageManager pm = shadowOf(RuntimeEnvironment.application.getPackageManager());
     ApplicationInfo info =
         pm.getApplicationInfo(RuntimeEnvironment.application.getPackageName(), 0);
     info.metaData = new Bundle();

File: library/src/main/java/com/bumptech/glide/module/RegistersComponents.java
Patch:
@@ -16,7 +16,7 @@ interface RegistersComponents {
    * <p> This method will be called once and only once per implementation. </p>
    *
    * @param context  An Application {@link android.content.Context}.
-   * @param glide The Glide singleton that is in the process of being initialized. 
+   * @param glide The Glide singleton that is in the process of being initialized.
    * @param registry An {@link com.bumptech.glide.Registry} to use to register components.
    */
   void registerComponents(Context context, Glide glide, Registry registry);

File: samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgModule.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.graphics.drawable.PictureDrawable;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.annotation.GlideModule;
 import com.bumptech.glide.module.AppGlideModule;
@@ -14,7 +15,7 @@
 @GlideModule
 public class SvgModule extends AppGlideModule {
   @Override
-  public void registerComponents(Context context, Registry registry) {
+  public void registerComponents(Context context, Glide glide, Registry registry) {
     registry.register(SVG.class, PictureDrawable.class, new SvgDrawableTranscoder())
         .append(InputStream.class, SVG.class, new SvgDecoder());
   }

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -507,6 +507,7 @@ private static RequestManagerRetriever getRetriever(@Nullable Context context) {
     // Context could be null for other reasons (ie the user passes in null), but in practice it will
     // only occur due to errors with the Fragment lifecycle.
     Preconditions.checkNotNull(
+        context,
         "You cannot start a load on a not yet attached View or a  Fragment where getActivity() "
             + "returns null (which usually occurs when getActivity() is called before the Fragment "
             + "is attached or after the Fragment is destroyed).");

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -234,6 +234,9 @@ public void run() {
         throw e;
       }
     } finally {
+      if (currentFetcher != null) {
+        currentFetcher.cleanup();
+      }
       TraceCompat.endSection();
     }
   }

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
Patch:
@@ -186,7 +186,8 @@ private static void findAllSupportFragmentsWithViews(
       return;
     }
     for (Fragment fragment : topLevelFragments) {
-      if (fragment.getView() == null) {
+      // getFragment()s in the support FragmentManager may contain null values, see #1991.
+      if (fragment == null || fragment.getView() == null) {
         continue;
       }
       result.put(fragment.getView(), fragment);

File: library/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide;
 
 import static com.bumptech.glide.request.RequestOptions.decodeTypeOf;
+import static com.bumptech.glide.request.RequestOptions.errorOf;
 import static com.bumptech.glide.request.RequestOptions.placeholderOf;
 import static org.junit.Assert.assertNotNull;
 import static org.mockito.Matchers.anyInt;
@@ -486,7 +487,7 @@ public void testNullModelDoesNotThrow() {
     Drawable drawable = new ColorDrawable(Color.RED);
     requestManager
         .load(null)
-        .apply(placeholderOf(drawable))
+        .apply(errorOf(drawable))
         .into(target);
 
     verify(target).onLoadFailed(eq(drawable));

File: library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
Patch:
@@ -354,7 +354,7 @@ public void testPlaceholderDrawableSetOnNullModelWithNoErrorDrawable() {
 
     MockTarget target = new MockTarget();
 
-    harness.placeholderDrawable = placeholder;
+    harness.errorDrawable = placeholder;
     harness.target = target;
     harness.model = null;
     SingleRequest<List> request = harness.getRequest();

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -238,6 +238,7 @@ && canNotifyStatusChanged()) {
    */
   void cancel() {
     stateVerifier.throwIfRecycled();
+    target.removeCallback(this);
     status = Status.CANCELLED;
     if (loadStatus != null) {
       loadStatus.cancel();

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
Patch:
@@ -153,7 +153,7 @@ int getFrameCount() {
   }
 
   int getLoopCount() {
-    return gifDecoder.getLoopCount();
+    return gifDecoder.getTotalIterationCount();
   }
 
   private void start() {

File: samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgModule.java
Patch:
@@ -4,15 +4,15 @@
 import android.graphics.drawable.PictureDrawable;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.annotation.GlideModule;
-import com.bumptech.glide.module.RootGlideModule;
+import com.bumptech.glide.module.AppGlideModule;
 import com.caverock.androidsvg.SVG;
 import java.io.InputStream;
 
 /**
  * Module for the SVG sample app.
  */
 @GlideModule
-public class SvgModule extends RootGlideModule {
+public class SvgModule extends AppGlideModule {
   @Override
   public void registerComponents(Context context, Registry registry) {
     registry.register(SVG.class, PictureDrawable.class, new SvgDrawableTranscoder())

File: library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
Patch:
@@ -129,7 +129,7 @@ public void testStopsAllocatingBitmapsUntilNextIdleCallIfAllocationsTakeLongerTh
   public void testPreFillHandlerDoesNotPostIfHasNoBitmapsToAllocate() {
     BitmapPreFillRunner handler = getHandler(new HashMap<PreFillType, Integer>());
     handler.run();
-    verify(mainHandler, never()).postDelayed(any(Runnable.class), anyInt());
+    verify(mainHandler, never()).postDelayed(any(Runnable.class), anyLong());
   }
 
   @Test

File: library/src/main/java/com/bumptech/glide/util/ContentLengthInputStream.java
Patch:
@@ -51,7 +51,9 @@ public synchronized int available() throws IOException {
 
   @Override
   public synchronized int read() throws IOException {
-    return checkReadSoFarOrThrow(super.read());
+    int value = super.read();
+    checkReadSoFarOrThrow(value >= 0 ? 1 : -1);
+    return value;
   }
 
   @Override

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
Patch:
@@ -153,7 +153,7 @@ int getFrameCount() {
   }
 
   int getLoopCount() {
-    return gifDecoder.getLoopCount();
+    return gifDecoder.getTotalIterationCount();
   }
 
   private void start() {

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.File;
 import java.util.Collections;
 import java.util.List;
-import java.util.Set;
 import javax.annotation.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.ExecutableElement;
@@ -102,7 +101,7 @@ final class RequestBuilderGenerator {
    */
   private static final String TRANSCODE_TYPE_NAME = "TranscodeType";
   /** A set of method names to avoid overriding from BaseRequestOptions. */
-  private static final Set<String> EXCLUDED_METHODS_FROM_BASE_REQUEST_OPTIONS =
+  private static final ImmutableSet<String> EXCLUDED_METHODS_FROM_BASE_REQUEST_OPTIONS =
       ImmutableSet.of("clone", "apply", "autoLock", "lock");
 
   private final ProcessingEnvironment processingEnv;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java
Patch:
@@ -62,9 +62,9 @@ public abstract class DownsampleStrategy {
   public static final DownsampleStrategy NONE = new None();
 
   /**
-   * Default strategy, currently {@link #AT_LEAST}.
+   * Default strategy, currently {@link #CENTER_OUTSIDE}.
    */
-  public static final DownsampleStrategy DEFAULT = AT_LEAST;
+  public static final DownsampleStrategy DEFAULT = CENTER_OUTSIDE;
 
   /**
    * Returns a float (0, +infinity) indicating a scale factor to apply to the source

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RootModuleGenerator.java
Patch:
@@ -69,10 +69,10 @@
  * </pre>
  */
 final class RootModuleGenerator {
+  static final String GENERATED_ROOT_MODULE_PACKAGE_NAME = "com.bumptech.glide";
   private static final String GLIDE_LOG_TAG = "Glide";
   private static final String GENERATED_ROOT_MODULE_IMPL_SIMPLE_NAME =
       "GeneratedRootGlideModuleImpl";
-  private static final String GENERATED_ROOT_MODULE_PACKAGE_NAME = "com.bumptech.glide";
   private static final String GENERATED_ROOT_MODULE_SIMPLE_NAME = "GeneratedRootGlideModule";
   private final ProcessorUtil processorUtil;
 

File: library/src/main/java/com/bumptech/glide/RequestManager.java
Patch:
@@ -379,7 +379,7 @@ public RequestBuilder<File> asFile() {
    * @return A new request builder for loading the given resource class.
    */
   public <ResourceType> RequestBuilder<ResourceType> as(Class<ResourceType> resourceClass) {
-    return new RequestBuilder<>(glide.getGlideContext(), this, resourceClass);
+    return new RequestBuilder<>(glide, this, resourceClass);
   }
 
   /**

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
Patch:
@@ -181,7 +181,7 @@ CodeBlock generateSeeMethodJavadoc(
             new Function<ParameterSpec, Object>() {
               @Override
               public Object apply(ParameterSpec input) {
-                return input.name;
+                return input.type;
               }
             }));
   }

File: annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
Patch:
@@ -345,7 +345,7 @@ public String apply(AnnotationSpec input) {
           }
         }).contains(Override.class.getCanonicalName())
         && requestOptionMethod.returnType.toString()
-            .equals(requestOptionMethod.toString());
+            .equals(requestOptionsClassName.toString());
   }
 
    /**

File: annotation/src/main/java/com/bumptech/glide/annotation/ExtendsRequestOptions.java
Patch:
@@ -6,7 +6,8 @@
 import java.lang.annotation.Target;
 
 /**
- * Identifies methods that extend {@link com.bumptech.glide.request.BaseRequestOptions}.
+ * Identifies methods in {@link GlideExtension} annotated classes that extend
+ * {@link com.bumptech.glide.request.BaseRequestOptions}.
  *
  * <p>All annotated methods will be added to a single
  * {@link com.bumptech.glide.request.BaseRequestOptions} implementation generated per application.

File: library/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -100,8 +100,7 @@ public class GlideTest {
   public void setUp() throws Exception {
     Glide.tearDown();
 
-    RobolectricPackageManager pm =
-        (RobolectricPackageManager) RuntimeEnvironment.application.getPackageManager();
+    RobolectricPackageManager pm = RuntimeEnvironment.getRobolectricPackageManager();
     ApplicationInfo info =
         pm.getApplicationInfo(RuntimeEnvironment.application.getPackageName(), 0);
     info.metaData = new Bundle();

File: library/src/main/java/com/bumptech/glide/util/Util.java
Patch:
@@ -150,7 +150,7 @@ public static boolean isOnMainThread() {
   }
 
   /**
-   * Returns {@code true} if called on the main thread, {@code false} otherwise.
+   * Returns {@code true} if called on a background thread, {@code false} otherwise.
    */
   public static boolean isOnBackgroundThread() {
     return !isOnMainThread();

File: library/src/main/java/com/bumptech/glide/util/Util.java
Patch:
@@ -150,7 +150,7 @@ public static boolean isOnMainThread() {
   }
 
   /**
-   * Returns {@code true} if called on the main thread, {@code false} otherwise.
+   * Returns {@code true} if called on a background thread, {@code false} otherwise.
    */
   public static boolean isOnBackgroundThread() {
     return !isOnMainThread();

File: integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
Patch:
@@ -36,7 +36,6 @@ public OkHttpStreamFetcher(OkHttpClient client, GlideUrl url) {
   @Override
   public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {
     Request.Builder requestBuilder = new Request.Builder().url(url.toStringUrl());
-    boolean isUserAgentSet = false;
     for (Map.Entry<String, String> headerEntry : url.getHeaders().entrySet()) {
       String key = headerEntry.getKey();
       requestBuilder.addHeader(key, headerEntry.getValue());
@@ -56,7 +55,7 @@ public void onFailure(Request request, IOException e) {
       public void onResponse(Response response) throws IOException {
         responseBody = response.body();
         if (response.isSuccessful()) {
-          long contentLength = response.body().contentLength();
+          long contentLength = responseBody.contentLength();
           stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);
         } else if (Log.isLoggable(TAG, Log.DEBUG)) {
           Log.d(TAG, "OkHttp got error response: " + response.code() + ", " + response.message());

File: integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
Patch:
@@ -54,7 +54,7 @@ public void onFailure(Call call, IOException e) {
       public void onResponse(Call call, Response response) throws IOException {
         responseBody = response.body();
         if (response.isSuccessful()) {
-          long contentLength = response.body().contentLength();
+          long contentLength = responseBody.contentLength();
           stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);
         } else if (Log.isLoggable(TAG, Log.DEBUG)) {
           Log.d(TAG, "OkHttp got error response: " + response.code() + ", " + response.message());

File: library/src/main/java/com/bumptech/glide/load/ImageHeaderParserUtils.java
Patch:
@@ -17,7 +17,7 @@ public final class ImageHeaderParserUtils {
   // will resize up to this amount if necessary.
   private static final int MARK_POSITION = 5 * 1024 * 1024;
 
-  private ImageHeaderParserUtils() {}
+  private ImageHeaderParserUtils() { }
 
   /** Returns the ImageType for the given InputStream. */
   public static ImageType getType(List<ImageHeaderParser> parsers, @Nullable InputStream is,

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -464,11 +464,12 @@ public StateVerifier getVerifier() {
     return stateVerifier;
   }
 
-  private class DecodeCallback<Z> implements DecodePath.DecodeCallback<Z> {
+  private final class DecodeCallback<Z> implements DecodePath.DecodeCallback<Z> {
 
     private final DataSource dataSource;
 
-    private DecodeCallback(DataSource dataSource) {
+    @Synthetic
+    DecodeCallback(DataSource dataSource) {
       this.dataSource = dataSource;
     }
 

File: library/src/main/java/com/bumptech/glide/load/engine/Initializable.java
Patch:
@@ -7,7 +7,7 @@
 public interface Initializable {
 
   /**
-   * Called on a background thread so the {@link Resource} can do some eager initialization
+   * Called on a background thread so the {@link Resource} can do some eager initialization.
    */
   void initialize();
 

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -373,7 +373,7 @@ private Bitmap.Config getConfig(InputStream is, DecodeFormat format) throws IOEx
 
     boolean hasAlpha = false;
     try {
-      hasAlpha = ImageHeaderParserUtils.getType(parsers, is, byteArrayPool).hasAlpha();;
+      hasAlpha = ImageHeaderParserUtils.getType(parsers, is, byteArrayPool).hasAlpha();
     } catch (IOException e) {
       if (Log.isLoggable(TAG, Log.DEBUG)) {
         Log.d(TAG, "Cannot determine whether the image has alpha or not from header"

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParserTest.java
Patch:
@@ -208,8 +208,8 @@ public void run(DefaultImageHeaderParser parser, InputStream is, ArrayPool byteA
         assertEquals(ImageType.UNKNOWN, parser.getType(is));
       }
       @Override
-      public void run(DefaultImageHeaderParser parser, ByteBuffer byteBuffer, ArrayPool byteArrayPool)
-          throws IOException {
+      public void run(DefaultImageHeaderParser parser, ByteBuffer byteBuffer,
+          ArrayPool byteArrayPool) throws IOException {
         assertEquals(ImageType.UNKNOWN, parser.getType(byteBuffer));
       }
     });
@@ -296,7 +296,7 @@ public void getOrientation_withExifSegmentAndPreambleButLessThanLength_returnsUn
   }
 
   @Test
-  public void getOrientation_withExifSegmentAndPreambleAndMoreThanLengthButLessThanExpected_returnsUnknown()
+  public void getOrientation_withExifSegmentAndPreambleBetweenLengthAndExpected_returnsUnknown()
       throws IOException {
     ByteBuffer jpegHeaderBytes = getExifMagicNumber();
     ByteBuffer exifSegmentPreamble =

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
Patch:
@@ -16,7 +16,6 @@
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.DownsamplerTest.AllocationSizeBitmap;
 import com.bumptech.glide.tests.Util;
 import java.io.ByteArrayInputStream;

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java
Patch:
@@ -460,7 +460,8 @@ private void skip() {
     int blockSize;
     do {
       blockSize = read();
-      rawData.position(rawData.position() + blockSize);
+      int newPosition = Math.min(rawData.position() + blockSize, rawData.limit());
+      rawData.position(newPosition);
     } while (blockSize > 0);
   }
 

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
Patch:
@@ -353,7 +353,7 @@ public void testRotateImage() {
     assertTrue(toRotate == zero);
 
     Bitmap ninety = TransformationUtils.rotateImage(toRotate, 90);
-    assertTrue(Shadows.shadowOf(ninety).getDescription().contains("rotate=90.0"));
+    assertThat(Shadows.shadowOf(ninety).getDescription()).contains("rotate=90.0");
     assertEquals(toRotate.getWidth(), toRotate.getHeight());
   }
 

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -354,6 +354,7 @@ public void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetche
   @Override
   public void onDataFetcherFailed(Key attemptedKey, Exception e, DataFetcher<?> fetcher,
       DataSource dataSource) {
+    fetcher.cleanup();
     GlideException exception = new GlideException("Fetching data failed", e);
     exception.setLoggingDetails(attemptedKey, dataSource, fetcher.getDataClass());
     exceptions.add(exception);

File: library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
-import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
+import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;
 import com.bumptech.glide.testutil.TestResourceUtil;
 import java.io.IOException;
 import java.io.InputStream;
@@ -29,7 +29,7 @@ private void assertOrientation(String filePrefix, int expectedOrientation) {
     InputStream is = null;
     try {
       is = open(filePrefix + "_" + expectedOrientation + ".jpg");
-      assertEquals(new ImageHeaderParser(is, byteArrayPool).getOrientation(),
+      assertEquals(new DefaultImageHeaderParser().getOrientation(is, byteArrayPool),
           expectedOrientation);
     } catch (IOException e) {
       throw new RuntimeException(e);
@@ -52,7 +52,7 @@ public void setUp() {
   @Test
   public void testIssue387() throws IOException {
     InputStream is = TestResourceUtil.openResource(getClass(), "issue387_rotated_jpeg.jpg");
-    assertThat(new ImageHeaderParser(is, byteArrayPool).getOrientation()).isEqualTo(6);
+    assertThat(new DefaultImageHeaderParser().getOrientation(is, byteArrayPool)).isEqualTo(6);
   }
 
   @Test

File: library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
-import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;
+import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.testutil.TestResourceUtil;
 import java.io.IOException;
 import java.io.InputStream;
@@ -29,7 +29,7 @@ private void assertOrientation(String filePrefix, int expectedOrientation) {
     InputStream is = null;
     try {
       is = open(filePrefix + "_" + expectedOrientation + ".jpg");
-      assertEquals(new DefaultImageHeaderParser().getOrientation(is, byteArrayPool),
+      assertEquals(new ImageHeaderParser(is, byteArrayPool).getOrientation(),
           expectedOrientation);
     } catch (IOException e) {
       throw new RuntimeException(e);
@@ -52,7 +52,7 @@ public void setUp() {
   @Test
   public void testIssue387() throws IOException {
     InputStream is = TestResourceUtil.openResource(getClass(), "issue387_rotated_jpeg.jpg");
-    assertThat(new DefaultImageHeaderParser().getOrientation(is, byteArrayPool)).isEqualTo(6);
+    assertThat(new ImageHeaderParser(is, byteArrayPool).getOrientation()).isEqualTo(6);
   }
 
   @Test

File: library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
-import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
+import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;
 import com.bumptech.glide.testutil.TestResourceUtil;
 import java.io.IOException;
 import java.io.InputStream;
@@ -29,7 +29,7 @@ private void assertOrientation(String filePrefix, int expectedOrientation) {
     InputStream is = null;
     try {
       is = open(filePrefix + "_" + expectedOrientation + ".jpg");
-      assertEquals(new ImageHeaderParser(is, byteArrayPool).getOrientation(),
+      assertEquals(new DefaultImageHeaderParser().getOrientation(is, byteArrayPool),
           expectedOrientation);
     } catch (IOException e) {
       throw new RuntimeException(e);
@@ -52,7 +52,7 @@ public void setUp() {
   @Test
   public void testIssue387() throws IOException {
     InputStream is = TestResourceUtil.openResource(getClass(), "issue387_rotated_jpeg.jpg");
-    assertThat(new ImageHeaderParser(is, byteArrayPool).getOrientation()).isEqualTo(6);
+    assertThat(new DefaultImageHeaderParser().getOrientation(is, byteArrayPool)).isEqualTo(6);
   }
 
   @Test

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoder.java
Patch:
@@ -25,8 +25,7 @@ public boolean handles(GifDecoder source, Options options) {
   }
 
   @Override
-  public Resource<Bitmap> decode(GifDecoder source, int width, int height,
-      Options options) {
+  public Resource<Bitmap> decode(GifDecoder source, int width, int height, Options options) {
     Bitmap bitmap = source.getNextFrame();
     return BitmapResource.obtain(bitmap, bitmapPool);
   }

File: library/src/main/java/com/bumptech/glide/request/RequestOptions.java
Patch:
@@ -144,7 +144,7 @@ public static RequestOptions centerInsideTransform(Context context) {
   }
 
   /**
-   * Returns a {@link RequestOptions} object with {@link #circleCrop(Context)} set.
+   * Returns a {@link RequestOptions} object with {@link #centerCrop(Context)} set.
    */
   public static RequestOptions centerCropTransform(Context context) {
     if (centerCropOptions == null) {

File: integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
Patch:
@@ -6,6 +6,7 @@
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.util.ContentLengthInputStream;
+import com.bumptech.glide.util.Synthetic;
 import com.squareup.okhttp.OkHttpClient;
 import com.squareup.okhttp.Request;
 import com.squareup.okhttp.Response;
@@ -24,8 +25,8 @@ public class OkHttpStreamFetcher implements DataFetcher<InputStream> {
   private static final String TAG = "OkHttpFetcher";
   private final OkHttpClient client;
   private final GlideUrl url;
-  private InputStream stream;
-  private ResponseBody responseBody;
+  @Synthetic InputStream stream;
+  @Synthetic ResponseBody responseBody;
 
   public OkHttpStreamFetcher(OkHttpClient client, GlideUrl url) {
     this.client = client;

File: integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
Patch:
@@ -7,6 +7,7 @@
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.util.ContentLengthInputStream;
+import com.bumptech.glide.util.Synthetic;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Map;
@@ -22,8 +23,8 @@ public class OkHttpStreamFetcher implements DataFetcher<InputStream> {
   private static final String TAG = "OkHttpFetcher";
   private final Call.Factory client;
   private final GlideUrl url;
-  private InputStream stream;
-  private ResponseBody responseBody;
+  @Synthetic InputStream stream;
+  @Synthetic ResponseBody responseBody;
   private volatile Call call;
 
   public OkHttpStreamFetcher(Call.Factory client, GlideUrl url) {

File: library/src/main/java/com/bumptech/glide/RequestManager.java
Patch:
@@ -28,6 +28,7 @@
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.target.ViewTarget;
 import com.bumptech.glide.request.transition.Transition;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import java.io.File;
 
@@ -51,7 +52,7 @@ public class RequestManager implements LifecycleListener {
           .skipMemoryCache(true);
 
   private final Glide glide;
-  private final Lifecycle lifecycle;
+  @Synthetic final Lifecycle lifecycle;
   private final RequestTracker requestTracker;
   private final RequestManagerTreeNode treeNode;
   private final TargetTracker targetTracker = new TargetTracker();

File: library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine;
 
 import android.support.v4.util.Pools;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.pool.FactoryPools;
 import com.bumptech.glide.util.pool.StateVerifier;
 
@@ -32,7 +33,8 @@ static <Z> LockedResource<Z> obtain(Resource<Z> resource) {
     return result;
   }
 
-  private LockedResource() { }
+  @Synthetic
+  LockedResource() { }
 
   private void init(Resource<Z> toWrap) {
     isRecycled = false;

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategy.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
 import android.graphics.Bitmap;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 
 /**
@@ -53,7 +54,8 @@ private static String getBitmapString(Bitmap bitmap) {
     return getBitmapString(bitmap.getWidth(), bitmap.getHeight(), bitmap.getConfig());
   }
 
-  private static String getBitmapString(int width, int height, Bitmap.Config config) {
+  @Synthetic
+  static String getBitmapString(int width, int height, Bitmap.Config config) {
     return "[" + width + "x" + height + "], " + config;
   }
 

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
 import android.support.annotation.Nullable;
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -119,7 +120,7 @@ private static <K, V> void removeEntry(LinkedEntry<K, V> entry) {
   }
 
   private static class LinkedEntry<K, V> {
-    private final K key;
+    @Synthetic final K key;
     private List<V> values;
     LinkedEntry<K, V> next;
     LinkedEntry<K, V> prev;

File: library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java
Patch:
@@ -3,6 +3,7 @@
 import android.support.v4.util.Pools;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.util.LruCache;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import com.bumptech.glide.util.pool.FactoryPools;
 import com.bumptech.glide.util.pool.StateVerifier;
@@ -54,7 +55,7 @@ private String calculateHexStringDigest(Key key) {
 
   private static final class PoolableDigestContainer implements FactoryPools.Poolable {
 
-    private final MessageDigest messageDigest;
+    @Synthetic final MessageDigest messageDigest;
     private final StateVerifier stateVerifier = StateVerifier.newInstance();
 
     PoolableDigestContainer(MessageDigest messageDigest) {

File: library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
Patch:
@@ -4,6 +4,7 @@
 import android.os.StrictMode.ThreadPolicy;
 import android.support.annotation.NonNull;
 import android.util.Log;
+import com.bumptech.glide.util.Synthetic;
 import java.io.File;
 import java.io.FilenameFilter;
 import java.util.concurrent.BlockingQueue;
@@ -316,8 +317,8 @@ protected void handle(Throwable t) {
    */
   private static final class DefaultThreadFactory implements ThreadFactory {
     private final String name;
-    private final UncaughtThrowableStrategy uncaughtThrowableStrategy;
-    private final boolean preventNetworkOperations;
+    @Synthetic final UncaughtThrowableStrategy uncaughtThrowableStrategy;
+    @Synthetic final boolean preventNetworkOperations;
     private int threadNum;
 
     DefaultThreadFactory(String name, UncaughtThrowableStrategy uncaughtThrowableStrategy,

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -75,7 +76,7 @@ public synchronized <Z, R> List<Class<R>> getTranscodeClasses(Class<Z> resourceC
   private static final class Entry<Z, R> {
     private final Class<Z> fromClass;
     private final Class<R> toClass;
-    private final ResourceTranscoder<Z, R> transcoder;
+    @Synthetic final ResourceTranscoder<Z, R> transcoder;
 
     Entry(Class<Z> fromClass, Class<R> toClass, ResourceTranscoder<Z, R> transcoder) {
       this.fromClass = fromClass;

File: library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.support.annotation.Nullable;
 import com.bumptech.glide.load.Encoder;
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -29,7 +30,7 @@ public synchronized <T> void add(Class<T> dataClass, Encoder<T> encoder) {
 
   private static final class Entry<T> {
     private final Class<T> dataClass;
-    private final Encoder<T> encoder;
+    @Synthetic final Encoder<T> encoder;
 
     public Entry(Class<T> dataClass, Encoder<T> encoder) {
       this.dataClass = dataClass;

File: library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.provider;
 
 import com.bumptech.glide.load.ResourceDecoder;
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -50,8 +51,8 @@ public synchronized <T, R> void prepend(ResourceDecoder<T, R> decoder, Class<T>
 
   private static class Entry<T, R> {
     private final Class<T> dataClass;
-    private final Class<R> resourceClass;
-    private final ResourceDecoder<T, R> decoder;
+    @Synthetic final Class<R> resourceClass;
+    @Synthetic final ResourceDecoder<T, R> decoder;
 
     public Entry(Class<T> dataClass, Class<R> resourceClass, ResourceDecoder<T, R> decoder) {
       this.dataClass = dataClass;

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -16,6 +16,7 @@
 import com.bumptech.glide.request.transition.Transition;
 import com.bumptech.glide.request.transition.TransitionFactory;
 import com.bumptech.glide.util.LogTime;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import com.bumptech.glide.util.pool.FactoryPools;
 import com.bumptech.glide.util.pool.StateVerifier;
@@ -136,7 +137,8 @@ public static <R> SingleRequest<R> obtain(
     return request;
   }
 
-  private SingleRequest() {
+  @Synthetic
+  SingleRequest() {
     // just create, instances are reused with recycle/init
   }
 

File: library/src/main/java/com/bumptech/glide/request/target/FixedSizeDrawable.java
Patch:
@@ -11,6 +11,7 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 
 /**
  * A wrapper drawable to square the wrapped drawable so that it expands to fill a square with
@@ -195,8 +196,8 @@ public ConstantState getConstantState() {
 
   static class State extends ConstantState {
     private final ConstantState wrapped;
-    private final int width;
-    private final int height;
+    @Synthetic final int width;
+    @Synthetic final int height;
 
     State(State other) {
       this(other.wrapped, other.width, other.height);

File: library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
Patch:
@@ -15,6 +15,7 @@
 import android.view.WindowManager;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.List;
@@ -184,7 +185,8 @@ private void notifyCbs(int width, int height) {
       }
     }
 
-    private void checkCurrentDimens() {
+    @Synthetic
+    void checkCurrentDimens() {
       if (cbs.isEmpty()) {
         return;
       }

File: library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.request.transition;
 
 import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.util.Synthetic;
 
 /**
  * A simple {@link Transition} that performs no actions.
@@ -9,7 +10,7 @@
  * {@link com.bumptech.glide.request.target.Target}.
  */
 public class NoTransition<R> implements Transition<R> {
-  private static final NoTransition<?> NO_ANIMATION = new NoTransition<Object>();
+  @Synthetic static final NoTransition<?> NO_ANIMATION = new NoTransition<Object>();
   @SuppressWarnings("rawtypes")
   private static final TransitionFactory<?> NO_ANIMATION_FACTORY = new NoAnimationFactory();
 

File: library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
Patch:
@@ -142,9 +142,9 @@ private static SafeArray getSafeArray(ByteBuffer byteBuffer) {
   }
 
   static final class SafeArray {
-    private final int offset;
-    private final int limit;
-    private final byte[] data;
+    @Synthetic final int offset;
+    @Synthetic final int limit;
+    @Synthetic final byte[] data;
 
     public SafeArray(byte[] data, int offset, int limit) {
       this.data = data;

File: integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
Patch:
@@ -53,9 +53,9 @@ public void onFailure(Request request, IOException e) {
 
       @Override
       public void onResponse(Response response) throws IOException {
+        responseBody = response.body();
         if (response.isSuccessful()) {
           long contentLength = response.body().contentLength();
-          responseBody = response.body();
           stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);
         } else if (Log.isLoggable(TAG, Log.DEBUG)) {
           Log.d(TAG, "OkHttp got error response: " + response.code() + ", " + response.message());

File: integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
Patch:
@@ -52,9 +52,9 @@ public void onFailure(Call call, IOException e) {
 
       @Override
       public void onResponse(Call call, Response response) throws IOException {
+        responseBody = response.body();
         if (response.isSuccessful()) {
           long contentLength = response.body().contentLength();
-          responseBody = response.body();
           stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);
         } else if (Log.isLoggable(TAG, Log.DEBUG)) {
           Log.d(TAG, "OkHttp got error response: " + response.code() + ", " + response.message());

File: integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
Patch:
@@ -53,9 +53,9 @@ public void onFailure(Request request, IOException e) {
 
       @Override
       public void onResponse(Response response) throws IOException {
+        responseBody = response.body();
         if (response.isSuccessful()) {
           long contentLength = response.body().contentLength();
-          responseBody = response.body();
           stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);
         } else if (Log.isLoggable(TAG, Log.DEBUG)) {
           Log.d(TAG, "OkHttp got error response: " + response.code() + ", " + response.message());

File: integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
Patch:
@@ -52,9 +52,9 @@ public void onFailure(Call call, IOException e) {
 
       @Override
       public void onResponse(Call call, Response response) throws IOException {
+        responseBody = response.body();
         if (response.isSuccessful()) {
           long contentLength = response.body().contentLength();
-          responseBody = response.body();
           stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);
         } else if (Log.isLoggable(TAG, Log.DEBUG)) {
           Log.d(TAG, "OkHttp got error response: " + response.code() + ", " + response.message());

File: integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java
Patch:
@@ -116,7 +116,7 @@ private boolean encodeTransformedToFile(GifDrawable drawable, File file) {
 
     }
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
-      Log.v(TAG, "Re-encoded gif with " + drawable.getFrameCount() + " frames and "
+      Log.v(TAG, "Re-encoded GIF with " + drawable.getFrameCount() + " frames and "
           + drawable.getBuffer().limit() + " bytes in " + LogTime.getElapsedMillis(startTime)
           + " ms");
     }
@@ -158,7 +158,7 @@ private boolean writeDataDirect(ByteBuffer data, File file) {
       ByteBufferUtil.toFile(data, file);
     } catch (IOException e) {
       if (Log.isLoggable(TAG, Log.WARN)) {
-        Log.w(TAG, "Failed to write gif data", e);
+        Log.w(TAG, "Failed to write GIF data", e);
       }
       return false;
     }

File: integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
Patch:
@@ -75,6 +75,7 @@ public void setUp() {
     when(factory.buildFrameResource(any(Bitmap.class), any(BitmapPool.class)))
         .thenReturn(frameResource);
 
+    // TODO Util.anyResource once Util is moved to testutil module (remove unchecked above!)
     when(frameTransformation.transform(any(Resource.class), anyInt(), anyInt()))
         .thenReturn(frameResource);
 

File: library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java
Patch:
@@ -11,8 +11,7 @@
  */
 @SuppressWarnings("PMD.UseUtilityClass")
 public final class GenericTransitionOptions<TranscodeType> extends
-  TransitionOptions<GenericTransitionOptions<TranscodeType>, TranscodeType> {
-
+    TransitionOptions<GenericTransitionOptions<TranscodeType>, TranscodeType> {
   /**
    * Removes any existing animation put on the builder.
    *

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -213,12 +213,12 @@ public static void tearDown() {
         .append(ParcelFileDescriptor.class, BitmapDrawable.class,
             new BitmapDrawableDecoder<>(resources, bitmapPool, new VideoBitmapDecoder(bitmapPool)))
         .register(BitmapDrawable.class, new BitmapDrawableEncoder(bitmapPool, new BitmapEncoder()))
-        /* Gifs */
+        /* GIFs */
         .prepend(InputStream.class, GifDrawable.class,
             new StreamGifDecoder(byteBufferGifDecoder, arrayPool))
         .prepend(ByteBuffer.class, GifDrawable.class, byteBufferGifDecoder)
         .register(GifDrawable.class, new GifDrawableEncoder())
-        /* Gif Frames */
+        /* GIF Frames */
         .append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<GifDecoder>())
         .append(GifDecoder.class, Bitmap.class, new GifFrameResourceDecoder(bitmapPool))
         /* Files */

File: library/src/main/java/com/bumptech/glide/ListPreloader.java
Patch:
@@ -179,7 +179,7 @@ private void preloadAdapterPosition(List<T> items, int position, boolean isIncre
   private void preloadItem(T item, int position, int i) {
     final int[] dimensions = this.preloadDimensionProvider.getPreloadSize(item, position, i);
     if (dimensions != null) {
-      RequestBuilder preloadRequestBuilder =
+      RequestBuilder<Object> preloadRequestBuilder =
           this.preloadModelProvider.getPreloadRequestBuilder(item);
       preloadRequestBuilder.into(preloadTargetQueue.next(dimensions[0], dimensions[1]));
     }

File: library/src/main/java/com/bumptech/glide/Registry.java
Patch:
@@ -231,7 +231,7 @@ public NoModelLoaderAvailableException(Object model) {
       super("Failed to find any ModelLoaders for model: " + model);
     }
 
-    public NoModelLoaderAvailableException(Class modelClass, Class dataClass) {
+    public NoModelLoaderAvailableException(Class<?> modelClass, Class<?> dataClass) {
       super("Failed to find any ModelLoaders for model: " + modelClass + " and data: " + dataClass);
     }
   }

File: library/src/main/java/com/bumptech/glide/RequestManager.java
Patch:
@@ -390,7 +390,7 @@ public <ResourceType> RequestBuilder<ResourceType> as(Class<ResourceType> resour
    * @param view The view to cancel loads and free resources for.
    * @throws IllegalArgumentException if an object other than Glide's metadata is put as the view's
    *                                  tag.
-   * @see #clear(Target).
+   * @see #clear(Target)
    */
   public void clear(View view) {
     clear(new ClearTarget(view));

File: library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java
Patch:
@@ -21,7 +21,7 @@ public interface ResourceDecoder<T, Z> {
    * <p> Decoders should make a best effort attempt to quickly determine if they are likely to be
    * able to decode data, but should not attempt to completely read the given data. A typical
    * implementation would check the file headers verify they match content the decoder expects to
-   * handle (ie a GIF decoder should verify that the image contains the GIF header block. </p>
+   * handle (i.e. a GIF decoder should verify that the image contains the GIF header block. </p>
    *
    * <p> Decoders that return {@code true} from {@link #handles(Object, Options)} may still
    * return {@code null} from {@link #decode(Object, int, int, Options)} if the data is

File: library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java
Patch:
@@ -35,6 +35,7 @@ interface DataCallback<T> {
 
     /**
      * Called when the load fails.
+     *
      * @param e a non-null {@link Exception} indicating why the load failed.
      */
     void onLoadFailed(Exception e);

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -142,7 +142,7 @@ void release(boolean isRemovedFromQueue) {
   }
 
   /**
-   * Called when we've finished encoding (either becasue the encode process is complete, or because
+   * Called when we've finished encoding (either because the encode process is complete, or because
    * we don't have anything to encode).
    */
   private void onEncodeComplete() {

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
Patch:
@@ -284,7 +284,7 @@ private static class MainThreadCallback implements Handler.Callback {
 
     @Override
     public boolean handleMessage(Message message) {
-      EngineJob job = (EngineJob) message.obj;
+      EngineJob<?> job = (EngineJob<?>) message.obj;
       switch (message.what) {
         case MSG_COMPLETE:
           job.handleResultOnMainThread();

File: library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
Patch:
@@ -59,10 +59,10 @@ public Throwable fillInStackTrace() {
   /**
    * Returns a list of causes that are immediate children of this exception.
    *
-   * @see #getRootCauses().
-   *
    * <p>Causes may or may not be {@link GlideException GlideExceptions}. Causes may also not be root
-   * causes, and in turn my have been caused by other failures.
+   * causes, and in turn my have been caused by other failures.</p>
+   *
+   * @see #getRootCauses()
    */
   public List<Exception> getCauses() {
     return causes;

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java
Patch:
@@ -36,7 +36,7 @@ private static class ResourceRecyclerCallback implements Handler.Callback {
     @Override
     public boolean handleMessage(Message message) {
       if (message.what == RECYCLE_RESOURCE) {
-        Resource resource = (Resource) message.obj;
+        Resource<?> resource = (Resource<?>) message.obj;
         resource.recycle();
         return true;
       }

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 /**
  * Interface for handling operations on a primitive array type.
- * @param <T> Array type (eg byte[], int[])
+ * @param <T> Array type (e.g. byte[], int[])
  */
 public interface ArrayAdapterInterface<T> {
 

File: library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
Patch:
@@ -19,7 +19,7 @@
  *
  * <p>See http://www.ietf.org/rfc/rfc2397.txt  for a complete description of the 'data' URL scheme.
  *
- * <p>Briefly, a 'data' URL has the form: <pre>data:[mediatype][;base64],somedata"</pre>
+ * <p>Briefly, a 'data' URL has the form: <pre>data:[mediatype][;base64],some_data</pre>
  *
  * @param <Data> The type of data that can be opened.
  */

File: library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
Patch:
@@ -131,7 +131,7 @@ public static final class Builder {
      * Adds a value for the given header and returns this builder.
      *
      * <p> Use {@link #addHeader(String, LazyHeaderFactory)} if obtaining the value requires I/O
-     * (ie an oauth token). </p>
+     * (i.e. an OAuth token). </p>
      *
      * @see #addHeader(String, LazyHeaderFactory)
 
@@ -168,7 +168,7 @@ public Builder addHeader(String key, LazyHeaderFactory factory) {
      * <p> If the given value is {@code null}, the header at the given key will be removed. </p>
      *
      * <p> Use {@link #setHeader(String, LazyHeaderFactory)} if obtaining the value requires I/O
-     * (ie an oauth token). </p>
+     * (i.e. an OAuth token). </p>
      */
     public Builder setHeader(String key, String value) {
       return setHeader(key, value == null ? null : new StringHeaderFactory(value));

File: library/src/main/java/com/bumptech/glide/load/model/ModelCache.java
Patch:
@@ -110,7 +110,7 @@ public void release() {
     @Override
     public boolean equals(Object o) {
       if (o instanceof ModelKey) {
-        ModelKey other = (ModelKey) o;
+        @SuppressWarnings("unchecked") ModelKey<A> other = (ModelKey<A>) o;
         return width == other.width && height == other.height && model.equals(other.model);
       }
       return false;

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
Patch:
@@ -23,7 +23,7 @@
  *
  * This not only avoids having to duplicate dimensions in xml and in your code in order to determine
  * the size of a view on devices with different densities, but also allows you to use layout weights
- * or otherwise programatically put the dimensions of the view without forcing you to fetch a
+ * or otherwise programmatically put the dimensions of the view without forcing you to fetch a
  * generic resource size.
  *
  * The smaller the resource you fetch, the less bandwidth and battery life you use, and the lower

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
Patch:
@@ -109,7 +109,7 @@ public final Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth,
    * @param toTransform The {@link android.graphics.Bitmap} to transform.
    * @param outWidth    The ideal width of the transformed bitmap (the transformed width does not
    *                    need to match exactly).
-   * @param outHeight   The ideal height of the transformed bitmap (the transformed heightdoes not
+   * @param outHeight   The ideal height of the transformed bitmap (the transformed height does not
    *                    need to match exactly).
    */
   protected abstract Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform,

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
 
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.util.Preconditions;
@@ -39,7 +40,8 @@ public RoundedCorners(Context context, int roundingRadius) {
   }
 
   @Override
-  protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
+  protected Bitmap transform(
+      @NonNull BitmapPool pool, @NonNull Bitmap toTransform, int outWidth, int outHeight) {
     return TransformationUtils.roundedCorners(pool, toTransform, outWidth, outHeight,
         roundingRadius);
   }

File: library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
Patch:
@@ -115,7 +115,7 @@ private GifDrawableResource decode(ByteBuffer byteBuffer, int width, int height,
             firstFrame);
 
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
-      Log.v(TAG, "Decoded gif from stream in " + LogTime.getElapsedMillis(startTime));
+      Log.v(TAG, "Decoded GIF from stream in " + LogTime.getElapsedMillis(startTime));
     }
 
     return new GifDrawableResource(gifDrawable);
@@ -129,7 +129,7 @@ private static int getSampleSize(GifHeader gifHeader, int targetWidth, int targe
     // than 0.
     int sampleSize = Math.max(1, powerOfTwoSampleSize);
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
-      Log.v(TAG, "Downsampling gif"
+      Log.v(TAG, "Downsampling GIF"
           + ", sampleSize: " + sampleSize
           + ", target dimens: [" + targetWidth + "x" + targetHeight + "]"
           + ", actual dimens: [" + gifHeader.getWidth() + "x" + gifHeader.getHeight() + "]");

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableEncoder.java
Patch:
@@ -32,7 +32,7 @@ public boolean encode(Resource<GifDrawable> data, File file, Options options) {
       success = true;
     } catch (IOException e) {
       if (Log.isLoggable(TAG, Log.WARN)) {
-        Log.w(TAG, "Failed to encode gif drawable data", e);
+        Log.w(TAG, "Failed to encode GIF drawable data", e);
       }
     }
     return success;

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java
Patch:
@@ -37,7 +37,7 @@ public Resource<GifDrawable> transform(Resource<GifDrawable> resource, int outWi
 
     // The drawable needs to be initialized with the correct width and height in order for a view
     // displaying it to end up with the right dimensions. Since our transformations may arbitrarily
-    // modify the dimensions of our gif, here we create a stand in for a frame and pass it to the
+    // modify the dimensions of our GIF, here we create a stand in for a frame and pass it to the
     // transformation to see what the final transformed dimensions will be so that our drawable can
     // report the correct intrinsic width and height.
     Bitmap firstFrame = drawable.getFirstFrame();

File: library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
Patch:
@@ -7,7 +7,7 @@
 
 /**
  * Contains an ordered list of {@link ResourceDecoder}s capable of decoding arbitrary data types
- * into arbitrary resource types from highest priority decoders to loweset priority decoders.
+ * into arbitrary resource types from highest priority decoders to lowest priority decoders.
  */
 @SuppressWarnings("rawtypes")
 public class ResourceDecoderRegistry {

File: library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java
Patch:
@@ -365,7 +365,7 @@ public final CHILD override(int size) {
    * @param signature A unique non-null {@link com.bumptech.glide.load.Key} representing the current
    *                  state of the model that will be mixed in to the cache key.
    * @return This request builder.
-   * @see com.bumptech.glide.signature.StringSignature
+   * @see com.bumptech.glide.signature.ObjectKey
    */
   public final CHILD signature(@NonNull Key signature) {
     if (isAutoCloneEnabled) {
@@ -461,7 +461,7 @@ public CHILD encodeQuality(int quality) {
    * <p>{@link DecodeFormat} is a request, not a requirement. It's possible the resource will be
    * decoded using a decoder that cannot control the format
    * ({@link android.media.MediaMetadataRetriever} for example), or that the decoder may choose to
-   * ignore the requested format if it can't display the image (ie RGB_565 is requested, but the
+   * ignore the requested format if it can't display the image (i.e. RGB_565 is requested, but the
    * image has alpha).
    */
   public CHILD format(@NonNull DecodeFormat format) {

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -281,7 +281,7 @@ public void pause() {
     status = Status.PAUSED;
   }
 
-  private void releaseResource(Resource resource) {
+  private void releaseResource(Resource<?> resource) {
     engine.release(resource);
     this.resource = null;
   }

File: library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
Patch:
@@ -27,7 +27,7 @@ public void setRequests(Request full, Request thumb) {
   }
 
   /**
-   * Returns true if the request is either the request loading the fullsize image or if the request
+   * Returns true if the request is either the request loading the full size image or if the request
    * loading the full size image has not yet completed.
    *
    * @param request {@inheritDoc}
@@ -42,7 +42,7 @@ private boolean parentCanSetImage() {
   }
 
   /**
-   * Returns true if the request is the request loading the fullsize image and if neither the full
+   * Returns true if the request is the request loading the full size image and if neither the full
    * nor the thumbnail image have completed successfully.
    *
    * @param request {@inheritDoc}.

File: library/src/main/java/com/bumptech/glide/request/transition/BitmapContainerTransitionFactory.java
Patch:
@@ -12,7 +12,7 @@
  * The transitioning bitmap is wrapped in a {@link android.graphics.drawable.BitmapDrawable}.
  * Most commonly used with {@link DrawableCrossFadeFactory}.
  *
- *  @param <R> The type of the composite object that contains the {@link android.graphics.Bitmap} to
+ * @param <R> The type of the composite object that contains the {@link android.graphics.Bitmap} to
  *            be transitioned.
  */
 public abstract class BitmapContainerTransitionFactory<R> implements TransitionFactory<R> {
@@ -30,8 +30,8 @@ public Transition<R> build(DataSource dataSource, boolean isFirstResource) {
 
   /**
    * Retrieve the Bitmap from a composite object.
-   * <br>
-   * <b>Warning:</b> Do not convert any arbitrary object to Bitmap via expensive drawing here.
+   * <p><b>Warning:</b> Do not convert any arbitrary object to Bitmap
+   * via expensive drawing here, this method is called on the UI thread.</p>
    *
    * @param current composite object containing a Bitmap and some other information
    * @return the Bitmap contained within {@code current}

File: library/src/main/java/com/bumptech/glide/signature/ObjectKey.java
Patch:
@@ -11,8 +11,8 @@
  * method to the {@link java.security.MessageDigest} in
  * {@link #updateDiskCacheKey(java.security.MessageDigest)}.
  *
- * <p> The Object's {@link #toString()} method must be unique and suitable for use as a disk cache
- * key. </p>
+ * <p>The Object's {@link #toString()} method must be unique and suitable for use as a disk cache
+ * key.</p>
  */
 public final class ObjectKey implements Key {
   private final Object object;

File: library/src/main/java/com/bumptech/glide/util/ViewPreloadSizeProvider.java
Patch:
@@ -75,14 +75,13 @@ public void setView(View view) {
   }
 
   private static final class SizeViewTarget extends ViewTarget<View, Object> {
-
     public SizeViewTarget(View view, SizeReadyCallback callback) {
       super(view);
       getSize(callback);
     }
 
     @Override
-    public void onResourceReady(Object resource, Transition transition) {
+    public void onResourceReady(Object resource, Transition<? super Object> transition) {
       // Do nothing
     }
   }

File: library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
Patch:
@@ -20,7 +20,7 @@ public static StateVerifier newInstance() {
   private StateVerifier() { }
 
   /**
-   * Throws an exception if we believe our object is recycled and inactive (ie is currently in an
+   * Throws an exception if we believe our object is recycled and inactive (i.e. is currently in an
    * object pool).
    */
   public abstract void throwIfRecycled();

File: library/src/test/java/com/bumptech/glide/load/model/ByteArrayLoaderTest.java
Patch:
@@ -52,7 +52,7 @@ public void testFetcherReturnsObjectReceivedFromConverter() throws IOException {
   }
 
   @Test
-  public void testFetcherRetrunsDataClassFromConverter() {
+  public void testFetcherReturnsDataClassFromConverter() {
     when(converter.getDataClass()).thenReturn(Object.class);
     assertEquals(Object.class,
         loader.buildLoadData(new byte[10], 10, 10, options).fetcher.getDataClass());

File: library/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
Patch:
@@ -101,9 +101,9 @@ public void testAddsNewUrlToCacheIfNotPresentInCache() {
     int width = 400;
     int height = 500;
 
-    doAnswer(new Answer() {
+    doAnswer(new Answer<Void>() {
       @Override
-      public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+      public Void answer(InvocationOnMock invocationOnMock) throws Throwable {
         GlideUrl glideUrl = (GlideUrl) invocationOnMock.getArguments()[3];
         assertEquals(urlLoader.resultUrl, glideUrl.toStringUrl());
         return null;

File: library/src/test/java/com/bumptech/glide/load/resource/SimpleResourceTest.java
Patch:
@@ -10,12 +10,12 @@
 @RunWith(JUnit4.class)
 public class SimpleResourceTest {
   private Anything object;
-  private SimpleResource resource;
+  private SimpleResource<?> resource;
 
   @Before
   public void setUp() {
     object = new Anything();
-    resource = new SimpleResource(object);
+    resource = new SimpleResource<>(object);
   }
 
   @Test

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
Patch:
@@ -11,6 +11,7 @@
 import android.graphics.Color;
 import android.graphics.Paint;
 import android.graphics.Rect;
+import android.os.Build;
 
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.tests.Util;
@@ -88,7 +89,7 @@ private void assertSamePixels(Bitmap expected, Bitmap actual) {
     }
   }
 
-  @TargetApi(12)
+  @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
   private Bitmap createBitmapWithRedCircle(int width, int height) {
     int minEdge = Math.min(width, height);
     float radius = minEdge / 2f;

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -543,6 +543,7 @@ public void testSetColorFilterSetsColorFilterOnPaint() {
 
   @Test
   public void testReturnsCurrentTransformationInGetFrameTransformation() {
+    @SuppressWarnings("unchecked")
     Transformation<Bitmap> newTransformation = mock(Transformation.class);
     Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
     drawable.setFrameTransformation(newTransformation, bitmap);

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import static com.bumptech.glide.tests.Util.mockResource;
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -55,13 +55,12 @@ public void testBitmapResourceIsRecycled() {
     verify(harness.bitmapResource).recycle();
   }
 
-  @SuppressWarnings("unchecked")
   private static class BitmapBytesTranscoderHarness {
     Bitmap.CompressFormat compressFormat = Bitmap.CompressFormat.JPEG;
     int quality = 100;
     final String description = "TestDescription";
     Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ALPHA_8);
-    Resource<Bitmap> bitmapResource = mock(Resource.class);
+    Resource<Bitmap> bitmapResource = mockResource();
 
     public BitmapBytesTranscoderHarness() {
       when(bitmapResource.get()).thenReturn(bitmap);

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import static com.bumptech.glide.tests.Util.mockResource;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -31,7 +32,7 @@ public void setUp() {
   @Test
   public void testReturnsBitmapDrawableResourceContainingGivenBitmap() {
     Bitmap expected = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
-    Resource<Bitmap> resource = mock(Resource.class);
+    Resource<Bitmap> resource = mockResource();
     when(resource.get()).thenReturn(expected);
 
     Resource<BitmapDrawable> transcoded = transcoder.transcode(resource);

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import static com.bumptech.glide.tests.Util.mockResource;
 import static org.junit.Assert.assertArrayEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -20,11 +21,10 @@ public class GifDrawableBytesTranscoderTest {
   private GifDrawable gifDrawable;
   private Resource<GifDrawable> resource;
 
-  @SuppressWarnings("unchecked")
   @Before
   public void setUp() {
     gifDrawable = mock(GifDrawable.class);
-    resource = mock(Resource.class);
+    resource = mockResource();
     when(resource.get()).thenReturn(gifDrawable);
     transcoder = new GifDrawableBytesTranscoder();
   }

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
Patch:
@@ -27,7 +27,8 @@ public void testReturnsUnitDecoderIfClassesAreIdentical() {
 
   @Test
   public void testCanRegisterAndRetrieveResourceTranscoder() {
-    ResourceTranscoder transcoder = mock(ResourceTranscoder.class);
+    @SuppressWarnings("unchecked")
+    ResourceTranscoder<File, String> transcoder = mock(ResourceTranscoder.class);
     factories.register(File.class, String.class, transcoder);
 
     assertEquals(transcoder, factories.get(File.class, String.class));

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import static com.bumptech.glide.tests.Util.mockResource;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
 
 import com.bumptech.glide.load.engine.Resource;
 
@@ -14,7 +14,7 @@ public class UnitTranscoderTest {
 
   @Test
   public void testReturnsTheGivenResource() {
-    Resource resource = mock(Resource.class);
+    Resource<Object> resource = mockResource();
     ResourceTranscoder<Object, Object> unitTranscoder = UnitTranscoder.get();
 
     assertEquals(resource, unitTranscoder.transcode(resource));

File: library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
Patch:
@@ -41,7 +41,7 @@ public void testReturnsTargetForBitmapDrawables() {
     BitmapDrawable drawable = new BitmapDrawable(RuntimeEnvironment.application.getResources(),
         Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_4444));
 
-    Target target = factory.buildTarget(view, BitmapDrawable.class);
+    Target<BitmapDrawable> target = factory.buildTarget(view, BitmapDrawable.class);
     target.onResourceReady(drawable, null);
     assertThat(target).isInstanceOf(DrawableImageViewTarget.class);
   }

File: library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
Patch:
@@ -74,7 +74,7 @@ public void testSetsDrawableOnLoadCleared() {
 
   @Test
   public void testSetsDrawableOnViewInOnResourceReadyWhenAnimationReturnsFalse() {
-    Transition<Drawable> animation = mock(Transition.class);
+    @SuppressWarnings("unchecked") Transition<Drawable> animation = mock(Transition.class);
     when(animation.transition(any(Drawable.class), eq(target))).thenReturn(false);
     Drawable resource = new ColorDrawable(Color.GRAY);
     target.onResourceReady(resource, animation);
@@ -85,7 +85,7 @@ public void testSetsDrawableOnViewInOnResourceReadyWhenAnimationReturnsFalse() {
   @Test
   public void testDoesNotSetDrawableOnViewInOnResourceReadyWhenAnimationReturnsTrue() {
     Drawable resource = new ColorDrawable(Color.RED);
-    Transition<Drawable> animation = mock(Transition.class);
+    @SuppressWarnings("unchecked") Transition<Drawable> animation = mock(Transition.class);
     when(animation.transition(eq(resource), eq(target))).thenReturn(true);
     target.onResourceReady(resource, animation);
 
@@ -97,7 +97,7 @@ public void testProvidesCurrentPlaceholderToAnimationIfPresent() {
     Drawable placeholder = new ColorDrawable(Color.BLACK);
     view.setImageDrawable(placeholder);
 
-    Transition<Drawable> animation = mock(Transition.class);
+    @SuppressWarnings("unchecked") Transition<Drawable> animation = mock(Transition.class);
 
     target.onResourceReady(new ColorDrawable(Color.GREEN), animation);
 

File: library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
Patch:
@@ -44,7 +44,7 @@
     ViewTargetTest.PreDrawShadowViewTreeObserver.class })
 public class ViewTargetTest {
   private View view;
-  private ViewTarget target;
+  private ViewTarget<View, Object> target;
   private SizedShadowView shadowView;
   private PreDrawShadowViewTreeObserver shadowObserver;
 
@@ -489,7 +489,7 @@ public void onLoadFailed(Drawable errorDrawable) {
     }
 
     @Override
-    public void onResourceReady(Object resource, Transition transition) {
+    public void onResourceReady(Object resource, Transition<? super Object> transition) {
 
     }
 

File: library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
Patch:
@@ -25,7 +25,7 @@ public class DrawableCrossFadeFactoryTest {
   public void setUp() {
     ViewAnimationFactory<Drawable> viewAnimationFactory = mock(ViewAnimationFactory.class);
     factory = new DrawableCrossFadeFactory(viewAnimationFactory, 100 /*duration*/,
-        false /*isCrosFadeEnabled*/);
+        false /*isCrossFadeEnabled*/);
   }
 
   @Test

File: library/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
Patch:
@@ -25,12 +25,12 @@
 @Config(manifest = Config.NONE)
 public class ViewTransitionAnimationFactoryTest {
   private ViewTransition.ViewTransitionAnimationFactory viewTransitionAnimationFactory;
-  private ViewAnimationFactory factory;
+  private ViewAnimationFactory<Object> factory;
 
   @Before
   public void setUp() {
     viewTransitionAnimationFactory = mock(ViewTransition.ViewTransitionAnimationFactory.class);
-    factory = new ViewAnimationFactory(viewTransitionAnimationFactory);
+    factory = new ViewAnimationFactory<>(viewTransitionAnimationFactory);
   }
 
   @Test

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -208,7 +208,7 @@ public List<Photo> getPreloadItems(int position) {
     }
 
     @Override
-    public RequestBuilder getPreloadRequestBuilder(Photo item) {
+    public RequestBuilder<Drawable> getPreloadRequestBuilder(Photo item) {
       return preloadRequest.load(item);
     }
   }

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
Patch:
@@ -176,7 +176,7 @@ public List<Photo> getPreloadItems(int position) {
     }
 
     @Override
-    public RequestBuilder getPreloadRequestBuilder(Photo item) {
+    public RequestBuilder<Drawable> getPreloadRequestBuilder(Photo item) {
       return fullRequest.thumbnail(thumbRequest.load(item)).load(item);
     }
   }

File: samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java
Patch:
@@ -26,7 +26,7 @@ public final class Api {
   private static final String TRENDING_PATH = "v1/gifs/trending";
   private final Handler bgHandler;
   private final Handler mainHandler;
-  private final HashSet<Monitor> monitors = new HashSet<Monitor>();
+  private final HashSet<Monitor> monitors = new HashSet<>();
 
   private static String signUrl(String url) {
     return url + "&api_key=" + BETA_KEY;
@@ -154,7 +154,7 @@ public String toString() {
    */
   public static class GifResult {
     public String id;
-    // Page url not gif url
+    // Page url not GIF url
     public String url;
     public GifUrlSet images;
 

File: samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
Patch:
@@ -145,7 +145,7 @@ public List<Api.GifResult> getPreloadItems(int position) {
     }
 
     @Override
-    public RequestBuilder getPreloadRequestBuilder(Api.GifResult item) {
+    public RequestBuilder<Drawable> getPreloadRequestBuilder(Api.GifResult item) {
       return requestBuilder.load(item);
     }
   }

File: testutil/src/main/java/com/bumptech/glide/testutil/TestResourceUtil.java
Patch:
@@ -17,7 +17,7 @@ private TestResourceUtil() {
    * @param subPath   The sub-path under androidTest/resources where the desired resource is
    *                  located. Should not be prefixed with a '/'
    */
-  public static InputStream openResource(Class testClass, String subPath) {
+  public static InputStream openResource(Class<?> testClass, String subPath) {
     return testClass.getResourceAsStream("/" + subPath);
   }
 }

File: testutil/src/main/java/com/bumptech/glide/testutil/TestUtil.java
Patch:
@@ -14,7 +14,7 @@ private TestUtil() {
     // Utility class.
   }
 
-  public static byte[] resourceToBytes(Class testClass, String resourceName) throws IOException {
+  public static byte[] resourceToBytes(Class<?> testClass, String resourceName) throws IOException {
     return isToBytes(TestResourceUtil.openResource(testClass, resourceName));
   }
 
@@ -33,7 +33,7 @@ public static byte[] isToBytes(InputStream is) throws IOException {
   }
 
   public static String isToString(InputStream is) throws IOException {
-    return new String(isToBytes(is));
+    return new String(isToBytes(is), "utf-8");
   }
 
   public static void assertStreamOf(String expected, InputStream result) throws IOException {

File: third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java
Patch:
@@ -191,7 +191,7 @@ public boolean addFrame(Bitmap im, int x, int y) {
             getImagePixels(); // convert to correct format if necessary
             analyzePixels(); // build color table & map pixels
             if (firstFrame) {
-                writeLSD(); // logical screen descriptior
+                writeLSD(); // logical screen descriptor
                 writePalette(); // global color table
                 if (repeat >= 0) {
                     // use NS app extension to indicate reps
@@ -222,7 +222,7 @@ public boolean finish() {
         boolean ok = true;
         started = false;
         try {
-            out.write(0x3b); // gif trailer
+            out.write(0x3b); // GIF trailer
             out.flush();
             if (closeStream) {
                 out.close();

File: library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
Patch:
@@ -66,7 +66,7 @@ public ByteBufferGifDecoder(
       ArrayPool arrayPool,
       GifHeaderParserPool parserPool,
       GifDecoderFactory gifDecoderFactory) {
-    this.context = context;
+    this.context = context.getApplicationContext();
     this.bitmapPool = bitmapPool;
     this.gifDecoderFactory = gifDecoderFactory;
     this.provider = new GifBitmapProvider(bitmapPool, arrayPool);

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeader.java
Patch:
@@ -33,7 +33,6 @@ public class GifHeader {
   int bgIndex;
   // Pixel aspect ratio.
   int pixelAspect;
-  //TODO: this is set both during reading the header and while decoding frames...
   int bgColor;
   int loopCount;
 

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeader.java
Patch:
@@ -33,7 +33,6 @@ public class GifHeader {
   int bgIndex;
   // Pixel aspect ratio.
   int pixelAspect;
-  //TODO: this is set both during reading the header and while decoding frames...
   int bgColor;
   int loopCount;
 

File: library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java
Patch:
@@ -85,7 +85,7 @@ public Animation build(Context context) {
    */
   public static class Builder {
     private static final int DEFAULT_DURATION_MS = 300;
-    private int durationMillis = DEFAULT_DURATION_MS;
+    private int durationMillis;
     private ViewAnimationFactory<Drawable> factory;
     private boolean isCrossFadeEnabled;
 
@@ -101,6 +101,7 @@ public Builder() {
      *     {@link #setDefaultAnimationFactory(ViewAnimationFactory)} is called.
      */
     public Builder(int durationMillis) {
+      this.durationMillis = durationMillis;
       factory = new ViewAnimationFactory<>(
           new DefaultViewTransitionAnimationFactory(durationMillis));
     }

File: library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
Patch:
@@ -24,7 +24,8 @@ public class DrawableCrossFadeFactoryTest {
   @Before
   public void setUp() {
     ViewAnimationFactory<Drawable> viewAnimationFactory = mock(ViewAnimationFactory.class);
-    factory = new DrawableCrossFadeFactory(viewAnimationFactory, 100 /*duration*/);
+    factory = new DrawableCrossFadeFactory(viewAnimationFactory, 100 /*duration*/,
+        false /*isCrosFadeEnabled*/);
   }
 
   @Test

File: library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
Patch:
@@ -73,7 +73,7 @@ private static class CrossFadeHarness {
     Transition<Drawable> defaultAnimation = mock(Transition.class);
     int duration = 200;
     DrawableCrossFadeTransition animation =
-        new DrawableCrossFadeTransition(defaultAnimation, duration);
+        new DrawableCrossFadeTransition(defaultAnimation, duration, true /*isCrossFadeEnabled*/);
   }
 }
 

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -193,7 +193,7 @@ public static void tearDown() {
         new Downsampler(resources.getDisplayMetrics(), bitmapPool, arrayPool);
     ByteBufferGifDecoder byteBufferGifDecoder =
         new ByteBufferGifDecoder(context, bitmapPool, arrayPool);
-    registry = new Registry(context)
+    registry = new Registry()
         .register(ByteBuffer.class, new ByteBufferEncoder())
         .register(InputStream.class, new StreamEncoder(arrayPool))
         /* Bitmaps */

File: library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java
Patch:
@@ -26,7 +26,7 @@ public abstract class LocalUriFetcher<T> implements DataFetcher<T> {
   /**
    * Opens an input stream for a uri pointing to a local asset. Only certain uris are supported
    *
-   * @param context Any {@link android.content.Context}.
+   * @param contentResolver Any {@link android.content.ContentResolver}.
    * @param uri     A Uri pointing to a local asset. This load will fail if the uri isn't openable
    *                by {@link ContentResolver#openInputStream(android.net.Uri)}
    * @see ContentResolver#openInputStream(android.net.Uri)

File: library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
Patch:
@@ -22,6 +22,7 @@
  * A {@link DataFetcher} implementation for {@link InputStream}s that loads data from thumbnail
  * files obtained from the {@link MediaStore}.
  */
+@SuppressWarnings("PMD.FieldDeclarationsShouldBeAtStartOfClass")
 public class ThumbFetcher implements DataFetcher<InputStream> {
   private static final String TAG = "MediaStoreThumbFetcher";
   private final Uri mediaStoreImageUri;

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
Patch:
@@ -1,6 +1,5 @@
 package com.bumptech.glide.load.model;
 
-import android.content.Context;
 import android.support.v4.util.Pools.Pool;
 
 import java.util.ArrayList;
@@ -18,8 +17,8 @@ public class ModelLoaderRegistry {
   private final MultiModelLoaderFactory multiModelLoaderFactory;
   private final ModelLoaderCache cache = new ModelLoaderCache();
 
-  public ModelLoaderRegistry(Context context, Pool<List<Exception>> exceptionListPool) {
-    this(new MultiModelLoaderFactory(context, exceptionListPool));
+  public ModelLoaderRegistry(Pool<List<Exception>> exceptionListPool) {
+    this(new MultiModelLoaderFactory(exceptionListPool));
   }
 
   // Visible for testing.

File: library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
@@ -46,8 +45,8 @@ public void setUp() {
     MockitoAnnotations.initMocks(this);
     exceptionListPool = FactoryPools.threadSafeList();
 
-    multiFactory = new MultiModelLoaderFactory(RuntimeEnvironment.application, exceptionListPool,
-            multiModelLoaderFactory);
+    multiFactory = new MultiModelLoaderFactory(exceptionListPool,
+        multiModelLoaderFactory);
     when(firstFactory.build(eq(multiFactory))).thenReturn(firstModelLoader);
     when(secondFactory.build(eq(multiFactory))).thenReturn(secondModelLoader);
   }

File: integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
Patch:
@@ -93,7 +93,7 @@ private static Request.Priority glideToVolleyPriority(Priority priority) {
   }
 
   /**
-   * Default {@link com.android.volley.Request} implementation for Glide that recives errors and
+   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and
    * results on volley's background thread.
    */
   public static class GlideRequest extends Request<byte[]> {

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -20,7 +20,7 @@
 import com.bumptech.glide.request.target.PreloadTarget;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.signature.ApplicationVersionSignature;
-import com.bumptech.glide.signature.StringSignature;
+import com.bumptech.glide.signature.ObjectKey;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Util;
 
@@ -312,7 +312,7 @@ public RequestBuilder<TranscodeType> load(@Nullable URL url) {
    * @see #load(Object)
    */
   public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {
-    return loadGeneric(model).apply(signatureOf(new StringSignature(UUID.randomUUID().toString()))
+    return loadGeneric(model).apply(signatureOf(new ObjectKey(UUID.randomUUID().toString()))
         .diskCacheStrategy(DiskCacheStrategy.NONE).skipMemoryCache(true /*skipMemoryCache*/));
   }
 

File: library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
Patch:
@@ -63,7 +63,7 @@ public DataSource getDataSource() {
 
   /**
    * Opens the given asset path with the given {@link android.content.res.AssetManager} and returns
-   * the conrete data type returned by the AssetManager.
+   * the concrete data type returned by the AssetManager.
    *
    * @param assetManager An AssetManager to use to open the given path.
    * @param path         A string path pointing to a resource in assets to open.

File: library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
Patch:
@@ -11,7 +11,7 @@
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.data.ExifOrientationStream;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -37,7 +37,7 @@ public static ThumbFetcher buildVideoFetcher(Context context, Uri uri) {
   }
 
   private static ThumbFetcher build(Context context, Uri uri, ThumbnailQuery query) {
-    ByteArrayPool byteArrayPool = Glide.get(context).getByteArrayPool();
+    ArrayPool byteArrayPool = Glide.get(context).getArrayPool();
     return new ThumbFetcher(context, uri, new ThumbnailStreamOpener(query, byteArrayPool));
   }
 

File: library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
Patch:
@@ -28,7 +28,7 @@ interface FetcherReadyCallback {
      * @param sourceKey The id of the loaded data.
      * @param data The loaded data, or null if the load failed.
      * @param fetcher The data fetcher we attempted to load from.
-     * @param dataSource The data souce we were loading from.
+     * @param dataSource The data source we were loading from.
      * @param attemptedKey The key we were loading data from (may be an alternate).
      */
     void onDataFetcherReady(Key sourceKey, @Nullable Object data, DataFetcher<?> fetcher,

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -561,7 +561,7 @@ private static class DeferredEncodeManager<Z> {
     private ResourceEncoder<Z> encoder;
     private LockedResource<Z> toEncode;
 
-    // We just need the encoder and resouce type to match, which this will enforce.
+    // We just need the encoder and resource type to match, which this will enforce.
     @SuppressWarnings("unchecked")
     <X> void init(Key key, ResourceEncoder<X> encoder, LockedResource<X> toEncode) {
       this.key = key;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java
Patch:
@@ -5,8 +5,8 @@
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
 import com.bumptech.glide.util.ExceptionCatchingInputStream;
 import com.bumptech.glide.util.MarkEnforcingInputStream;
 
@@ -19,9 +19,9 @@
 public class StreamBitmapDecoder implements ResourceDecoder<InputStream, Bitmap> {
 
   private final Downsampler downsampler;
-  private final ByteArrayPool byteArrayPool;
+  private final ArrayPool byteArrayPool;
 
-  public StreamBitmapDecoder(Downsampler downsampler, ByteArrayPool byteArrayPool) {
+  public StreamBitmapDecoder(Downsampler downsampler, ArrayPool byteArrayPool) {
     this.downsampler = downsampler;
     this.byteArrayPool = byteArrayPool;
   }

File: library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
Patch:
@@ -14,8 +14,7 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.load.resource.UnitTransformation;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType;
@@ -75,7 +74,7 @@ public ByteBufferGifDecoder(
 
   @Override
   public boolean handles(ByteBuffer source, Options options) throws IOException {
-    ByteArrayPool byteArrayPool = new LruByteArrayPool();
+    ArrayPool byteArrayPool = new LruArrayPool();
     return !options.get(DISABLE_ANIMATION)
         && new ImageHeaderParser(source, byteArrayPool).getType() == ImageType.GIF;
   }

File: library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java
Patch:
@@ -6,7 +6,7 @@
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.Resource;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType;
 
@@ -31,10 +31,10 @@ public class StreamGifDecoder implements ResourceDecoder<InputStream, GifDrawabl
       "com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder.DisableAnimation", false);
 
   private final ResourceDecoder<ByteBuffer, GifDrawable> byteBufferDecoder;
-  private final ByteArrayPool byteArrayPool;
+  private final ArrayPool byteArrayPool;
 
   public StreamGifDecoder(ResourceDecoder<ByteBuffer, GifDrawable> byteBufferDecoder,
-      ByteArrayPool byteArrayPool) {
+      ArrayPool byteArrayPool) {
     this.byteBufferDecoder = byteBufferDecoder;
     this.byteArrayPool = byteArrayPool;
   }

File: library/src/main/java/com/bumptech/glide/manager/Lifecycle.java
Patch:
@@ -11,7 +11,7 @@ public interface Lifecycle {
 
   /**
    * Removes the given listener from the set of listeners managed by this Lifecycle implementation,
-   * returning {@code true} if the listener was removed sucessfully, and {@code false} otherwise.
+   * returning {@code true} if the listener was removed successfully, and {@code false} otherwise.
    *
    * <p>This is an optimization only, there is no guarantee that every added listener will
    * eventually be removed.

File: library/src/main/java/com/bumptech/glide/module/GlideModule.java
Patch:
@@ -19,7 +19,7 @@
  *                      public class FlickrGlideModule implements GlideModule {
  *                          {@literal @}Override
  *                          public void applyOptions(Context context, GlideBuilder builder) {
- *                              buidler.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);
+ *                              builder.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);
  *                          }
  *
  *                          {@literal @}Override

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -341,9 +341,9 @@ private Drawable getFallbackDrawable() {
     return fallbackDrawable;
   }
 
-  private Drawable loadDrawable(int resouceId) {
+  private Drawable loadDrawable(int resourceId) {
     Resources resources = glideContext.getResources();
-    return ResourcesCompat.getDrawable(resources, resouceId, requestOptions.getTheme());
+    return ResourcesCompat.getDrawable(resources, resourceId, requestOptions.getTheme());
   }
 
   private void setErrorPlaceholder() {

File: library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
Patch:
@@ -43,7 +43,7 @@ private boolean parentCanSetImage() {
 
   /**
    * Returns true if the request is the request loading the fullsize image and if neither the full
-   * nor the thumbnail image have completed sucessfully.
+   * nor the thumbnail image have completed successfully.
    *
    * @param request {@inheritDoc}.
    */

File: library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * A simple {@link com.bumptech.glide.request.target.Target} base class with default (usually noop)
  * implementations of non essential methods that allows the caller to specify an exact width/height.
- * Typicaly use cases look something like this:
+ * Typically use cases look something like this:
  * <pre>
  * <code>
  * Glide.load("http://somefakeurl.com/fakeImage.jpeg")

File: library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
Patch:
@@ -14,7 +14,7 @@
  * com.bumptech.glide.RequestBuilder#thumbnail(com.bumptech.glide.RequestBuilder)} API into views in
  * a scrolling list like ListView, GridView, or RecyclerView.
  *
- * <p>{@link FixedSizeDrawable} may cause skewing or other undesireable behavior depending on
+ * <p>{@link FixedSizeDrawable} may cause skewing or other undesirable behavior depending on
  * your images, views, and scaling. If this occurs, consider {@link DrawableImageViewTarget} or
  * {@link BitmapImageViewTarget} as alternatives.
  *

File: library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java
Patch:
@@ -55,7 +55,7 @@ private static Key obtainVersionSignature(Context context) {
     } else {
       versionCode = UUID.randomUUID().toString();
     }
-    return new StringSignature(versionCode);
+    return new ObjectKey(versionCode);
   }
 
   private ApplicationVersionSignature() {

File: library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
Patch:
@@ -26,7 +26,7 @@ private StateVerifier() { }
   public abstract void throwIfRecycled();
 
   /**
-   * Sets whether or not our objet is recycled.
+   * Sets whether or not our object is recycled.
    */
   abstract void setRecycled(boolean isRecycled);
 

File: library/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -508,7 +508,7 @@ public void testNullModelPrefersErrorDrawable() {
   }
 
   @Test
-  public void testNullModelPrefersFallbackDrwaable() {
+  public void testNullModelPrefersFallbackDrawable() {
     Drawable placeholder = new ColorDrawable(Color.GREEN);
     Drawable error = new ColorDrawable(Color.RED);
     Drawable fallback = new ColorDrawable(Color.BLUE);
@@ -535,7 +535,7 @@ public void testClone() throws IOException {
     doAnswer(new CallSizeReady(100, 100)).when(firstTarget).getSize(isA(SizeReadyCallback.class));
     Target secondTarget = mock(Target.class);
     doAnswer(new CallSizeReady(100, 100)).when(secondTarget).getSize(isA(SizeReadyCallback.class));
-    RequestBuilder<Drawable> firstRequest = Glide.with(getContext())
+    RequestBuilder<Drawable> firstRequest = requestManager
         .load(mockUri("content://first"));
 
     firstRequest.into(firstTarget);
@@ -544,7 +544,7 @@ public void testClone() throws IOException {
         .apply(placeholderOf(new ColorDrawable(Color.RED)))
         .into(secondTarget);
 
-    verify(firstTarget).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));
+    verify(firstTarget).onResourceReady(isA(Drawable.class), isA(Transition.class));
     verify(secondTarget).onResourceReady(notNull(), isA(Transition.class));
   }
 

File: library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
Patch:
@@ -61,8 +61,8 @@ public void testLoadResource_withNullInputStream_callsLoadFailed() {
 
     shadow.registerInputStream(uri, null /*inputStream*/);
 
-    StreamLocalUriFetcher fecther = new StreamLocalUriFetcher(context, uri);
-    fecther.loadData(Priority.LOW, callback);
+    StreamLocalUriFetcher fetcher = new StreamLocalUriFetcher(context, uri);
+    fetcher.loadData(Priority.LOW, callback);
 
     verify(callback).onLoadFailed(isA(FileNotFoundException.class));
   }

File: library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
Patch:
@@ -3,7 +3,7 @@
 import static org.junit.Assert.assertEquals;
 
 import com.bumptech.glide.load.Options;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.util.ByteBufferUtil;
 
 import org.junit.After;
@@ -26,7 +26,7 @@ public class StreamEncoderTest {
 
   @Before
   public void setUp() {
-    encoder = new StreamEncoder(new LruByteArrayPool());
+    encoder = new StreamEncoder(new LruArrayPool());
     file = new File(RuntimeEnvironment.application.getCacheDir(), "test");
   }
 

File: library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -32,7 +32,7 @@ public class StreamGifDecoderTest {
   public void setUp() {
     MockitoAnnotations.initMocks(this);
 
-    decoder = new StreamGifDecoder(byteBufferDecoder, new LruByteArrayPool());
+    decoder = new StreamGifDecoder(byteBufferDecoder, new LruArrayPool());
     options = new Options();
   }
 

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
Patch:
@@ -49,7 +49,7 @@ public void testUsesGivenFormat() {
   }
 
   @Test
-  public void testBitampResourceIsRecycled() {
+  public void testBitmapResourceIsRecycled() {
     harness.getTranscodedDescription();
 
     verify(harness.bitmapResource).recycle();

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
Patch:
@@ -26,7 +26,7 @@ public void testReturnsUnitDecoderIfClassesAreIdentical() {
   }
 
   @Test
-  public void testCanRegisterAndRetreiveResouceTranscoder() {
+  public void testCanRegisterAndRetrieveResourceTranscoder() {
     ResourceTranscoder transcoder = mock(ResourceTranscoder.class);
     factories.register(File.class, String.class, transcoder);
 

File: library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
Patch:
@@ -65,7 +65,7 @@ public void testClearRemoveAndRecycle_withTrackedRequest_clearsRecyclesAndReturn
   }
 
   @Test
-  public void testClearRemoveAndRecyle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {
+  public void testClearRemoveAndRecycle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {
     Request request = mock(Request.class);
     tracker.addRequest(request);
     tracker.clearRemoveAndRecycle(request);

File: library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
Patch:
@@ -40,7 +40,7 @@ public void testReturnsReturnsAnimationIfNotFromMemoryCacheAndIsFirstResource()
   }
 
   @Test
-  public void testReturnsAnimationIfNotFromMemocyCacheAndNotIsFirstResource() {
+  public void testReturnsAnimationIfNotFromMemoryCacheAndNotIsFirstResource() {
     assertNotEquals(NoTransition.<Drawable>get(),
         factory.build(DataSource.DATA_DISK_CACHE, false /*isFirstResource*/));
   }

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.List;
 
 /**
- * A fragment that shows square image thumbnails whose size is determined by the framgent's
+ * A fragment that shows square image thumbnails whose size is determined by the fragment's
  * arguments in a grid pattern.
  */
 public class FlickrPhotoGrid extends Fragment implements PhotoViewer {

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/RecentQuery.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.os.Parcel;
 
-/** Query wusing flickr's recent API. */
+/** Query using Flickr's recent API. */
 public final class RecentQuery implements Query {
   public static final Creator<RecentQuery> CREATOR = new Creator<RecentQuery>() {
     @Override

File: integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
Patch:
@@ -93,7 +93,7 @@ private static Request.Priority glideToVolleyPriority(Priority priority) {
   }
 
   /**
-   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and
+   * Default {@link com.android.volley.Request} implementation for Glide that recives errors and
    * results on volley's background thread.
    */
   public static class GlideRequest extends Request<byte[]> {

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -20,7 +20,7 @@
 import com.bumptech.glide.request.target.PreloadTarget;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.signature.ApplicationVersionSignature;
-import com.bumptech.glide.signature.ObjectKey;
+import com.bumptech.glide.signature.StringSignature;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Util;
 
@@ -312,7 +312,7 @@ public RequestBuilder<TranscodeType> load(@Nullable URL url) {
    * @see #load(Object)
    */
   public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {
-    return loadGeneric(model).apply(signatureOf(new ObjectKey(UUID.randomUUID().toString()))
+    return loadGeneric(model).apply(signatureOf(new StringSignature(UUID.randomUUID().toString()))
         .diskCacheStrategy(DiskCacheStrategy.NONE).skipMemoryCache(true /*skipMemoryCache*/));
   }
 

File: library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
Patch:
@@ -63,7 +63,7 @@ public DataSource getDataSource() {
 
   /**
    * Opens the given asset path with the given {@link android.content.res.AssetManager} and returns
-   * the concrete data type returned by the AssetManager.
+   * the conrete data type returned by the AssetManager.
    *
    * @param assetManager An AssetManager to use to open the given path.
    * @param path         A string path pointing to a resource in assets to open.

File: library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
Patch:
@@ -11,7 +11,7 @@
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.data.ExifOrientationStream;
-import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -37,7 +37,7 @@ public static ThumbFetcher buildVideoFetcher(Context context, Uri uri) {
   }
 
   private static ThumbFetcher build(Context context, Uri uri, ThumbnailQuery query) {
-    ArrayPool byteArrayPool = Glide.get(context).getArrayPool();
+    ByteArrayPool byteArrayPool = Glide.get(context).getByteArrayPool();
     return new ThumbFetcher(context, uri, new ThumbnailStreamOpener(query, byteArrayPool));
   }
 

File: library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
Patch:
@@ -28,7 +28,7 @@ interface FetcherReadyCallback {
      * @param sourceKey The id of the loaded data.
      * @param data The loaded data, or null if the load failed.
      * @param fetcher The data fetcher we attempted to load from.
-     * @param dataSource The data source we were loading from.
+     * @param dataSource The data souce we were loading from.
      * @param attemptedKey The key we were loading data from (may be an alternate).
      */
     void onDataFetcherReady(Key sourceKey, @Nullable Object data, DataFetcher<?> fetcher,

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -561,7 +561,7 @@ private static class DeferredEncodeManager<Z> {
     private ResourceEncoder<Z> encoder;
     private LockedResource<Z> toEncode;
 
-    // We just need the encoder and resource type to match, which this will enforce.
+    // We just need the encoder and resouce type to match, which this will enforce.
     @SuppressWarnings("unchecked")
     <X> void init(Key key, ResourceEncoder<X> encoder, LockedResource<X> toEncode) {
       this.key = key;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java
Patch:
@@ -5,8 +5,8 @@
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.Resource;
-import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
 import com.bumptech.glide.util.ExceptionCatchingInputStream;
 import com.bumptech.glide.util.MarkEnforcingInputStream;
 
@@ -19,9 +19,9 @@
 public class StreamBitmapDecoder implements ResourceDecoder<InputStream, Bitmap> {
 
   private final Downsampler downsampler;
-  private final ArrayPool byteArrayPool;
+  private final ByteArrayPool byteArrayPool;
 
-  public StreamBitmapDecoder(Downsampler downsampler, ArrayPool byteArrayPool) {
+  public StreamBitmapDecoder(Downsampler downsampler, ByteArrayPool byteArrayPool) {
     this.downsampler = downsampler;
     this.byteArrayPool = byteArrayPool;
   }

File: library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
Patch:
@@ -14,7 +14,8 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 import com.bumptech.glide.load.resource.UnitTransformation;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType;
@@ -74,7 +75,7 @@ public ByteBufferGifDecoder(
 
   @Override
   public boolean handles(ByteBuffer source, Options options) throws IOException {
-    ArrayPool byteArrayPool = new LruArrayPool();
+    ByteArrayPool byteArrayPool = new LruByteArrayPool();
     return !options.get(DISABLE_ANIMATION)
         && new ImageHeaderParser(source, byteArrayPool).getType() == ImageType.GIF;
   }

File: library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java
Patch:
@@ -6,7 +6,7 @@
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.Resource;
-import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType;
 
@@ -31,10 +31,10 @@ public class StreamGifDecoder implements ResourceDecoder<InputStream, GifDrawabl
       "com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder.DisableAnimation", false);
 
   private final ResourceDecoder<ByteBuffer, GifDrawable> byteBufferDecoder;
-  private final ArrayPool byteArrayPool;
+  private final ByteArrayPool byteArrayPool;
 
   public StreamGifDecoder(ResourceDecoder<ByteBuffer, GifDrawable> byteBufferDecoder,
-      ArrayPool byteArrayPool) {
+      ByteArrayPool byteArrayPool) {
     this.byteBufferDecoder = byteBufferDecoder;
     this.byteArrayPool = byteArrayPool;
   }

File: library/src/main/java/com/bumptech/glide/manager/Lifecycle.java
Patch:
@@ -11,7 +11,7 @@ public interface Lifecycle {
 
   /**
    * Removes the given listener from the set of listeners managed by this Lifecycle implementation,
-   * returning {@code true} if the listener was removed successfully, and {@code false} otherwise.
+   * returning {@code true} if the listener was removed sucessfully, and {@code false} otherwise.
    *
    * <p>This is an optimization only, there is no guarantee that every added listener will
    * eventually be removed.

File: library/src/main/java/com/bumptech/glide/module/GlideModule.java
Patch:
@@ -19,7 +19,7 @@
  *                      public class FlickrGlideModule implements GlideModule {
  *                          {@literal @}Override
  *                          public void applyOptions(Context context, GlideBuilder builder) {
- *                              builder.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);
+ *                              buidler.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);
  *                          }
  *
  *                          {@literal @}Override

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -341,9 +341,9 @@ private Drawable getFallbackDrawable() {
     return fallbackDrawable;
   }
 
-  private Drawable loadDrawable(int resourceId) {
+  private Drawable loadDrawable(int resouceId) {
     Resources resources = glideContext.getResources();
-    return ResourcesCompat.getDrawable(resources, resourceId, requestOptions.getTheme());
+    return ResourcesCompat.getDrawable(resources, resouceId, requestOptions.getTheme());
   }
 
   private void setErrorPlaceholder() {

File: library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
Patch:
@@ -43,7 +43,7 @@ private boolean parentCanSetImage() {
 
   /**
    * Returns true if the request is the request loading the fullsize image and if neither the full
-   * nor the thumbnail image have completed successfully.
+   * nor the thumbnail image have completed sucessfully.
    *
    * @param request {@inheritDoc}.
    */

File: library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * A simple {@link com.bumptech.glide.request.target.Target} base class with default (usually noop)
  * implementations of non essential methods that allows the caller to specify an exact width/height.
- * Typically use cases look something like this:
+ * Typicaly use cases look something like this:
  * <pre>
  * <code>
  * Glide.load("http://somefakeurl.com/fakeImage.jpeg")

File: library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
Patch:
@@ -14,7 +14,7 @@
  * com.bumptech.glide.RequestBuilder#thumbnail(com.bumptech.glide.RequestBuilder)} API into views in
  * a scrolling list like ListView, GridView, or RecyclerView.
  *
- * <p>{@link FixedSizeDrawable} may cause skewing or other undesirable behavior depending on
+ * <p>{@link FixedSizeDrawable} may cause skewing or other undesireable behavior depending on
  * your images, views, and scaling. If this occurs, consider {@link DrawableImageViewTarget} or
  * {@link BitmapImageViewTarget} as alternatives.
  *

File: library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java
Patch:
@@ -55,7 +55,7 @@ private static Key obtainVersionSignature(Context context) {
     } else {
       versionCode = UUID.randomUUID().toString();
     }
-    return new ObjectKey(versionCode);
+    return new StringSignature(versionCode);
   }
 
   private ApplicationVersionSignature() {

File: library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
Patch:
@@ -26,7 +26,7 @@ private StateVerifier() { }
   public abstract void throwIfRecycled();
 
   /**
-   * Sets whether or not our object is recycled.
+   * Sets whether or not our objet is recycled.
    */
   abstract void setRecycled(boolean isRecycled);
 

File: library/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -508,7 +508,7 @@ public void testNullModelPrefersErrorDrawable() {
   }
 
   @Test
-  public void testNullModelPrefersFallbackDrawable() {
+  public void testNullModelPrefersFallbackDrwaable() {
     Drawable placeholder = new ColorDrawable(Color.GREEN);
     Drawable error = new ColorDrawable(Color.RED);
     Drawable fallback = new ColorDrawable(Color.BLUE);
@@ -535,7 +535,7 @@ public void testClone() throws IOException {
     doAnswer(new CallSizeReady(100, 100)).when(firstTarget).getSize(isA(SizeReadyCallback.class));
     Target secondTarget = mock(Target.class);
     doAnswer(new CallSizeReady(100, 100)).when(secondTarget).getSize(isA(SizeReadyCallback.class));
-    RequestBuilder<Drawable> firstRequest = requestManager
+    RequestBuilder<Drawable> firstRequest = Glide.with(getContext())
         .load(mockUri("content://first"));
 
     firstRequest.into(firstTarget);
@@ -544,7 +544,7 @@ public void testClone() throws IOException {
         .apply(placeholderOf(new ColorDrawable(Color.RED)))
         .into(secondTarget);
 
-    verify(firstTarget).onResourceReady(isA(Drawable.class), isA(Transition.class));
+    verify(firstTarget).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));
     verify(secondTarget).onResourceReady(notNull(), isA(Transition.class));
   }
 

File: library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
Patch:
@@ -61,8 +61,8 @@ public void testLoadResource_withNullInputStream_callsLoadFailed() {
 
     shadow.registerInputStream(uri, null /*inputStream*/);
 
-    StreamLocalUriFetcher fetcher = new StreamLocalUriFetcher(context, uri);
-    fetcher.loadData(Priority.LOW, callback);
+    StreamLocalUriFetcher fecther = new StreamLocalUriFetcher(context, uri);
+    fecther.loadData(Priority.LOW, callback);
 
     verify(callback).onLoadFailed(isA(FileNotFoundException.class));
   }

File: library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
Patch:
@@ -3,7 +3,7 @@
 import static org.junit.Assert.assertEquals;
 
 import com.bumptech.glide.load.Options;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 import com.bumptech.glide.util.ByteBufferUtil;
 
 import org.junit.After;
@@ -26,7 +26,7 @@ public class StreamEncoderTest {
 
   @Before
   public void setUp() {
-    encoder = new StreamEncoder(new LruArrayPool());
+    encoder = new StreamEncoder(new LruByteArrayPool());
     file = new File(RuntimeEnvironment.application.getCacheDir(), "test");
   }
 

File: library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -32,7 +32,7 @@ public class StreamGifDecoderTest {
   public void setUp() {
     MockitoAnnotations.initMocks(this);
 
-    decoder = new StreamGifDecoder(byteBufferDecoder, new LruArrayPool());
+    decoder = new StreamGifDecoder(byteBufferDecoder, new LruByteArrayPool());
     options = new Options();
   }
 

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
Patch:
@@ -49,7 +49,7 @@ public void testUsesGivenFormat() {
   }
 
   @Test
-  public void testBitmapResourceIsRecycled() {
+  public void testBitampResourceIsRecycled() {
     harness.getTranscodedDescription();
 
     verify(harness.bitmapResource).recycle();

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
Patch:
@@ -26,7 +26,7 @@ public void testReturnsUnitDecoderIfClassesAreIdentical() {
   }
 
   @Test
-  public void testCanRegisterAndRetrieveResourceTranscoder() {
+  public void testCanRegisterAndRetreiveResouceTranscoder() {
     ResourceTranscoder transcoder = mock(ResourceTranscoder.class);
     factories.register(File.class, String.class, transcoder);
 

File: library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
Patch:
@@ -65,7 +65,7 @@ public void testClearRemoveAndRecycle_withTrackedRequest_clearsRecyclesAndReturn
   }
 
   @Test
-  public void testClearRemoveAndRecycle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {
+  public void testClearRemoveAndRecyle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {
     Request request = mock(Request.class);
     tracker.addRequest(request);
     tracker.clearRemoveAndRecycle(request);

File: library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
Patch:
@@ -40,7 +40,7 @@ public void testReturnsReturnsAnimationIfNotFromMemoryCacheAndIsFirstResource()
   }
 
   @Test
-  public void testReturnsAnimationIfNotFromMemoryCacheAndNotIsFirstResource() {
+  public void testReturnsAnimationIfNotFromMemocyCacheAndNotIsFirstResource() {
     assertNotEquals(NoTransition.<Drawable>get(),
         factory.build(DataSource.DATA_DISK_CACHE, false /*isFirstResource*/));
   }

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.List;
 
 /**
- * A fragment that shows square image thumbnails whose size is determined by the fragment's
+ * A fragment that shows square image thumbnails whose size is determined by the framgent's
  * arguments in a grid pattern.
  */
 public class FlickrPhotoGrid extends Fragment implements PhotoViewer {

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/RecentQuery.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.os.Parcel;
 
-/** Query using Flickr's recent API. */
+/** Query wusing flickr's recent API. */
 public final class RecentQuery implements Query {
   public static final Creator<RecentQuery> CREATOR = new Creator<RecentQuery>() {
     @Override

File: integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java
Patch:
@@ -18,6 +18,7 @@
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.load.model.Headers;
+
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 

File: library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
Patch:
@@ -10,6 +10,7 @@
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.load.model.Headers;
 import com.bumptech.glide.testutil.TestUtil;
+
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
Patch:
@@ -165,7 +165,7 @@ public void onAttach(Activity activity) {
     super.onAttach(activity);
     try {
       registerFragmentWithRoot(activity);
-    } catch (IllegalArgumentException e) {
+    } catch (IllegalStateException e) {
       // OnAttach can be called after the activity is destroyed, see #497.
       if (Log.isLoggable(TAG, Log.WARN)) {
         Log.w(TAG, "Unable to register fragment with root", e);

File: library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
Patch:
@@ -154,7 +154,7 @@ public void onAttach(Activity activity) {
     super.onAttach(activity);
     try {
       registerFragmentWithRoot(getActivity());
-    } catch (IllegalArgumentException e) {
+    } catch (IllegalStateException e) {
       // OnAttach can be called after the activity is destroyed, see #497.
       if (Log.isLoggable(TAG, Log.WARN)) {
         Log.w(TAG, "Unable to register fragment with root", e);

File: integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
Patch:
@@ -93,7 +93,7 @@ private static Request.Priority glideToVolleyPriority(Priority priority) {
   }
 
   /**
-   * Default {@link com.android.volley.Request} implementation for Glide that recives errors and
+   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and
    * results on volley's background thread.
    */
   public static class GlideRequest extends Request<byte[]> {

File: library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
Patch:
@@ -63,7 +63,7 @@ public DataSource getDataSource() {
 
   /**
    * Opens the given asset path with the given {@link android.content.res.AssetManager} and returns
-   * the conrete data type returned by the AssetManager.
+   * the concrete data type returned by the AssetManager.
    *
    * @param assetManager An AssetManager to use to open the given path.
    * @param path         A string path pointing to a resource in assets to open.

File: library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
Patch:
@@ -28,7 +28,7 @@ interface FetcherReadyCallback {
      * @param sourceKey The id of the loaded data.
      * @param data The loaded data, or null if the load failed.
      * @param fetcher The data fetcher we attempted to load from.
-     * @param dataSource The data souce we were loading from.
+     * @param dataSource The data source we were loading from.
      * @param attemptedKey The key we were loading data from (may be an alternate).
      */
     void onDataFetcherReady(Key sourceKey, @Nullable Object data, DataFetcher<?> fetcher,

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -561,7 +561,7 @@ private static class DeferredEncodeManager<Z> {
     private ResourceEncoder<Z> encoder;
     private LockedResource<Z> toEncode;
 
-    // We just need the encoder and resouce type to match, which this will enforce.
+    // We just need the encoder and resource type to match, which this will enforce.
     @SuppressWarnings("unchecked")
     <X> void init(Key key, ResourceEncoder<X> encoder, LockedResource<X> toEncode) {
       this.key = key;

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
Patch:
@@ -17,7 +17,7 @@
 public final class LruArrayPool implements ArrayPool {
 
   /**
-   * The maximum number of times larger an int array may be to be than a requested size to eligble
+   * The maximum number of times larger an int array may be to be than a requested size to eligible
    * to be returned from the pool.
    */
   private static final int MAX_OVER_SIZE_MULTIPLE = 8;

File: library/src/main/java/com/bumptech/glide/manager/Lifecycle.java
Patch:
@@ -11,7 +11,7 @@ public interface Lifecycle {
 
   /**
    * Removes the given listener from the set of listeners managed by this Lifecycle implementation,
-   * returning {@code true} if the listener was removed sucessfully, and {@code false} otherwise.
+   * returning {@code true} if the listener was removed successfully, and {@code false} otherwise.
    *
    * <p>This is an optimization only, there is no guarantee that every added listener will
    * eventually be removed.

File: library/src/main/java/com/bumptech/glide/module/GlideModule.java
Patch:
@@ -19,7 +19,7 @@
  *                      public class FlickrGlideModule implements GlideModule {
  *                          {@literal @}Override
  *                          public void applyOptions(Context context, GlideBuilder builder) {
- *                              buidler.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);
+ *                              builder.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);
  *                          }
  *
  *                          {@literal @}Override

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -341,9 +341,9 @@ private Drawable getFallbackDrawable() {
     return fallbackDrawable;
   }
 
-  private Drawable loadDrawable(int resouceId) {
+  private Drawable loadDrawable(int resourceId) {
     Resources resources = glideContext.getResources();
-    return ResourcesCompat.getDrawable(resources, resouceId, requestOptions.getTheme());
+    return ResourcesCompat.getDrawable(resources, resourceId, requestOptions.getTheme());
   }
 
   private void setErrorPlaceholder() {

File: library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
Patch:
@@ -43,7 +43,7 @@ private boolean parentCanSetImage() {
 
   /**
    * Returns true if the request is the request loading the fullsize image and if neither the full
-   * nor the thumbnail image have completed sucessfully.
+   * nor the thumbnail image have completed successfully.
    *
    * @param request {@inheritDoc}.
    */

File: library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * A simple {@link com.bumptech.glide.request.target.Target} base class with default (usually noop)
  * implementations of non essential methods that allows the caller to specify an exact width/height.
- * Typicaly use cases look something like this:
+ * Typically use cases look something like this:
  * <pre>
  * <code>
  * Glide.load("http://somefakeurl.com/fakeImage.jpeg")

File: library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
Patch:
@@ -14,7 +14,7 @@
  * com.bumptech.glide.RequestBuilder#thumbnail(com.bumptech.glide.RequestBuilder)} API into views in
  * a scrolling list like ListView, GridView, or RecyclerView.
  *
- * <p>{@link FixedSizeDrawable} may cause skewing or other undesireable behavior depending on
+ * <p>{@link FixedSizeDrawable} may cause skewing or other undesirable behavior depending on
  * your images, views, and scaling. If this occurs, consider {@link DrawableImageViewTarget} or
  * {@link BitmapImageViewTarget} as alternatives.
  *

File: library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
Patch:
@@ -26,7 +26,7 @@ private StateVerifier() { }
   public abstract void throwIfRecycled();
 
   /**
-   * Sets whether or not our objet is recycled.
+   * Sets whether or not our object is recycled.
    */
   abstract void setRecycled(boolean isRecycled);
 

File: library/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -508,7 +508,7 @@ public void testNullModelPrefersErrorDrawable() {
   }
 
   @Test
-  public void testNullModelPrefersFallbackDrwaable() {
+  public void testNullModelPrefersFallbackDrawable() {
     Drawable placeholder = new ColorDrawable(Color.GREEN);
     Drawable error = new ColorDrawable(Color.RED);
     Drawable fallback = new ColorDrawable(Color.BLUE);

File: library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
Patch:
@@ -100,7 +100,7 @@ public void testVideoQueryReturnsVideoCursor() {
   }
 
   @Test
-  public void testImageQueryReturnsImageCurosr() {
+  public void testImageQueryReturnsImageCursor() {
     Uri queryUri = MediaStore.Images.Thumbnails.EXTERNAL_CONTENT_URI;
     ThumbFetcher.ImageThumbnailQuery query = new ThumbFetcher.ImageThumbnailQuery();
     RoboCursor testCursor = new RoboCursor();

File: library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
Patch:
@@ -61,8 +61,8 @@ public void testLoadResource_withNullInputStream_callsLoadFailed() {
 
     shadow.registerInputStream(uri, null /*inputStream*/);
 
-    StreamLocalUriFetcher fecther = new StreamLocalUriFetcher(context, uri);
-    fecther.loadData(Priority.LOW, callback);
+    StreamLocalUriFetcher fetcher = new StreamLocalUriFetcher(context, uri);
+    fetcher.loadData(Priority.LOW, callback);
 
     verify(callback).onLoadFailed(isA(FileNotFoundException.class));
   }

File: library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
Patch:
@@ -432,7 +432,7 @@ public void testSubmitsDecodeJobToDiskCacheServiceWhenDecodingFromCacheOnStart()
   }
 
   @Test
-  public void testSubmitsDecodeJobToSourceServiceWhenDecodingFromSoureOnlyOnStart() {
+  public void testSubmitsDecodeJobToSourceServiceWhenDecodingFromSourceOnlyOnStart() {
     EngineJob<Object> job = harness.getJob();
     when(harness.decodeJob.willDecodeFromCache()).thenReturn(false);
     harness.diskCacheService.shutdownNow();

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
Patch:
@@ -49,7 +49,7 @@ public void testUsesGivenFormat() {
   }
 
   @Test
-  public void testBitampResourceIsRecycled() {
+  public void testBitmapResourceIsRecycled() {
     harness.getTranscodedDescription();
 
     verify(harness.bitmapResource).recycle();

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
Patch:
@@ -26,7 +26,7 @@ public void testReturnsUnitDecoderIfClassesAreIdentical() {
   }
 
   @Test
-  public void testCanRegisterAndRetreiveResouceTranscoder() {
+  public void testCanRegisterAndRetrieveResourceTranscoder() {
     ResourceTranscoder transcoder = mock(ResourceTranscoder.class);
     factories.register(File.class, String.class, transcoder);
 

File: library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
Patch:
@@ -65,7 +65,7 @@ public void testClearRemoveAndRecycle_withTrackedRequest_clearsRecyclesAndReturn
   }
 
   @Test
-  public void testClearRemoveAndRecyle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {
+  public void testClearRemoveAndRecycle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {
     Request request = mock(Request.class);
     tracker.addRequest(request);
     tracker.clearRemoveAndRecycle(request);

File: library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
Patch:
@@ -40,7 +40,7 @@ public void testReturnsReturnsAnimationIfNotFromMemoryCacheAndIsFirstResource()
   }
 
   @Test
-  public void testReturnsAnimationIfNotFromMemocyCacheAndNotIsFirstResource() {
+  public void testReturnsAnimationIfNotFromMemoryCacheAndNotIsFirstResource() {
     assertNotEquals(NoTransition.<Drawable>get(),
         factory.build(DataSource.DATA_DISK_CACHE, false /*isFirstResource*/));
   }

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.List;
 
 /**
- * A fragment that shows square image thumbnails whose size is determined by the framgent's
+ * A fragment that shows square image thumbnails whose size is determined by the fragment's
  * arguments in a grid pattern.
  */
 public class FlickrPhotoGrid extends Fragment implements PhotoViewer {

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/RecentQuery.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.os.Parcel;
 
-/** Query wusing flickr's recent API. */
+/** Query using Flickr's recent API. */
 public final class RecentQuery implements Query {
   public static final Creator<RecentQuery> CREATOR = new Creator<RecentQuery>() {
     @Override

File: integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
Patch:
@@ -93,7 +93,7 @@ private static Request.Priority glideToVolleyPriority(Priority priority) {
   }
 
   /**
-   * Default {@link com.android.volley.Request} implementation for Glide that recives errors and
+   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and
    * results on volley's background thread.
    */
   public static class GlideRequest extends Request<byte[]> {

File: library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
Patch:
@@ -63,7 +63,7 @@ public DataSource getDataSource() {
 
   /**
    * Opens the given asset path with the given {@link android.content.res.AssetManager} and returns
-   * the conrete data type returned by the AssetManager.
+   * the concrete data type returned by the AssetManager.
    *
    * @param assetManager An AssetManager to use to open the given path.
    * @param path         A string path pointing to a resource in assets to open.

File: library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
Patch:
@@ -28,7 +28,7 @@ interface FetcherReadyCallback {
      * @param sourceKey The id of the loaded data.
      * @param data The loaded data, or null if the load failed.
      * @param fetcher The data fetcher we attempted to load from.
-     * @param dataSource The data souce we were loading from.
+     * @param dataSource The data source we were loading from.
      * @param attemptedKey The key we were loading data from (may be an alternate).
      */
     void onDataFetcherReady(Key sourceKey, @Nullable Object data, DataFetcher<?> fetcher,

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -561,7 +561,7 @@ private static class DeferredEncodeManager<Z> {
     private ResourceEncoder<Z> encoder;
     private LockedResource<Z> toEncode;
 
-    // We just need the encoder and resouce type to match, which this will enforce.
+    // We just need the encoder and resource type to match, which this will enforce.
     @SuppressWarnings("unchecked")
     <X> void init(Key key, ResourceEncoder<X> encoder, LockedResource<X> toEncode) {
       this.key = key;

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
Patch:
@@ -17,7 +17,7 @@
 public final class LruArrayPool implements ArrayPool {
 
   /**
-   * The maximum number of times larger an int array may be to be than a requested size to eligble
+   * The maximum number of times larger an int array may be to be than a requested size to eligible
    * to be returned from the pool.
    */
   private static final int MAX_OVER_SIZE_MULTIPLE = 8;

File: library/src/main/java/com/bumptech/glide/manager/Lifecycle.java
Patch:
@@ -11,7 +11,7 @@ public interface Lifecycle {
 
   /**
    * Removes the given listener from the set of listeners managed by this Lifecycle implementation,
-   * returning {@code true} if the listener was removed sucessfully, and {@code false} otherwise.
+   * returning {@code true} if the listener was removed successfully, and {@code false} otherwise.
    *
    * <p>This is an optimization only, there is no guarantee that every added listener will
    * eventually be removed.

File: library/src/main/java/com/bumptech/glide/module/GlideModule.java
Patch:
@@ -19,7 +19,7 @@
  *                      public class FlickrGlideModule implements GlideModule {
  *                          {@literal @}Override
  *                          public void applyOptions(Context context, GlideBuilder builder) {
- *                              buidler.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);
+ *                              builder.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);
  *                          }
  *
  *                          {@literal @}Override

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -341,9 +341,9 @@ private Drawable getFallbackDrawable() {
     return fallbackDrawable;
   }
 
-  private Drawable loadDrawable(int resouceId) {
+  private Drawable loadDrawable(int resourceId) {
     Resources resources = glideContext.getResources();
-    return ResourcesCompat.getDrawable(resources, resouceId, requestOptions.getTheme());
+    return ResourcesCompat.getDrawable(resources, resourceId, requestOptions.getTheme());
   }
 
   private void setErrorPlaceholder() {

File: library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
Patch:
@@ -43,7 +43,7 @@ private boolean parentCanSetImage() {
 
   /**
    * Returns true if the request is the request loading the fullsize image and if neither the full
-   * nor the thumbnail image have completed sucessfully.
+   * nor the thumbnail image have completed successfully.
    *
    * @param request {@inheritDoc}.
    */

File: library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * A simple {@link com.bumptech.glide.request.target.Target} base class with default (usually noop)
  * implementations of non essential methods that allows the caller to specify an exact width/height.
- * Typicaly use cases look something like this:
+ * Typically use cases look something like this:
  * <pre>
  * <code>
  * Glide.load("http://somefakeurl.com/fakeImage.jpeg")

File: library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
Patch:
@@ -14,7 +14,7 @@
  * com.bumptech.glide.RequestBuilder#thumbnail(com.bumptech.glide.RequestBuilder)} API into views in
  * a scrolling list like ListView, GridView, or RecyclerView.
  *
- * <p>{@link FixedSizeDrawable} may cause skewing or other undesireable behavior depending on
+ * <p>{@link FixedSizeDrawable} may cause skewing or other undesirable behavior depending on
  * your images, views, and scaling. If this occurs, consider {@link DrawableImageViewTarget} or
  * {@link BitmapImageViewTarget} as alternatives.
  *

File: library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
Patch:
@@ -26,7 +26,7 @@ private StateVerifier() { }
   public abstract void throwIfRecycled();
 
   /**
-   * Sets whether or not our objet is recycled.
+   * Sets whether or not our object is recycled.
    */
   abstract void setRecycled(boolean isRecycled);
 

File: library/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -508,7 +508,7 @@ public void testNullModelPrefersErrorDrawable() {
   }
 
   @Test
-  public void testNullModelPrefersFallbackDrwaable() {
+  public void testNullModelPrefersFallbackDrawable() {
     Drawable placeholder = new ColorDrawable(Color.GREEN);
     Drawable error = new ColorDrawable(Color.RED);
     Drawable fallback = new ColorDrawable(Color.BLUE);

File: library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
Patch:
@@ -100,7 +100,7 @@ public void testVideoQueryReturnsVideoCursor() {
   }
 
   @Test
-  public void testImageQueryReturnsImageCurosr() {
+  public void testImageQueryReturnsImageCursor() {
     Uri queryUri = MediaStore.Images.Thumbnails.EXTERNAL_CONTENT_URI;
     ThumbFetcher.ImageThumbnailQuery query = new ThumbFetcher.ImageThumbnailQuery();
     RoboCursor testCursor = new RoboCursor();

File: library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
Patch:
@@ -61,8 +61,8 @@ public void testLoadResource_withNullInputStream_callsLoadFailed() {
 
     shadow.registerInputStream(uri, null /*inputStream*/);
 
-    StreamLocalUriFetcher fecther = new StreamLocalUriFetcher(context, uri);
-    fecther.loadData(Priority.LOW, callback);
+    StreamLocalUriFetcher fetcher = new StreamLocalUriFetcher(context, uri);
+    fetcher.loadData(Priority.LOW, callback);
 
     verify(callback).onLoadFailed(isA(FileNotFoundException.class));
   }

File: library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
Patch:
@@ -432,7 +432,7 @@ public void testSubmitsDecodeJobToDiskCacheServiceWhenDecodingFromCacheOnStart()
   }
 
   @Test
-  public void testSubmitsDecodeJobToSourceServiceWhenDecodingFromSoureOnlyOnStart() {
+  public void testSubmitsDecodeJobToSourceServiceWhenDecodingFromSourceOnlyOnStart() {
     EngineJob<Object> job = harness.getJob();
     when(harness.decodeJob.willDecodeFromCache()).thenReturn(false);
     harness.diskCacheService.shutdownNow();

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
Patch:
@@ -49,7 +49,7 @@ public void testUsesGivenFormat() {
   }
 
   @Test
-  public void testBitampResourceIsRecycled() {
+  public void testBitmapResourceIsRecycled() {
     harness.getTranscodedDescription();
 
     verify(harness.bitmapResource).recycle();

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
Patch:
@@ -26,7 +26,7 @@ public void testReturnsUnitDecoderIfClassesAreIdentical() {
   }
 
   @Test
-  public void testCanRegisterAndRetreiveResouceTranscoder() {
+  public void testCanRegisterAndRetrieveResourceTranscoder() {
     ResourceTranscoder transcoder = mock(ResourceTranscoder.class);
     factories.register(File.class, String.class, transcoder);
 

File: library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
Patch:
@@ -65,7 +65,7 @@ public void testClearRemoveAndRecycle_withTrackedRequest_clearsRecyclesAndReturn
   }
 
   @Test
-  public void testClearRemoveAndRecyle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {
+  public void testClearRemoveAndRecycle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {
     Request request = mock(Request.class);
     tracker.addRequest(request);
     tracker.clearRemoveAndRecycle(request);

File: library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
Patch:
@@ -40,7 +40,7 @@ public void testReturnsReturnsAnimationIfNotFromMemoryCacheAndIsFirstResource()
   }
 
   @Test
-  public void testReturnsAnimationIfNotFromMemocyCacheAndNotIsFirstResource() {
+  public void testReturnsAnimationIfNotFromMemoryCacheAndNotIsFirstResource() {
     assertNotEquals(NoTransition.<Drawable>get(),
         factory.build(DataSource.DATA_DISK_CACHE, false /*isFirstResource*/));
   }

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.List;
 
 /**
- * A fragment that shows square image thumbnails whose size is determined by the framgent's
+ * A fragment that shows square image thumbnails whose size is determined by the fragment's
  * arguments in a grid pattern.
  */
 public class FlickrPhotoGrid extends Fragment implements PhotoViewer {

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/RecentQuery.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.os.Parcel;
 
-/** Query wusing flickr's recent API. */
+/** Query using Flickr's recent API. */
 public final class RecentQuery implements Query {
   public static final Creator<RecentQuery> CREATOR = new Creator<RecentQuery>() {
     @Override

File: library/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -535,7 +535,7 @@ public void testClone() throws IOException {
     doAnswer(new CallSizeReady(100, 100)).when(firstTarget).getSize(isA(SizeReadyCallback.class));
     Target secondTarget = mock(Target.class);
     doAnswer(new CallSizeReady(100, 100)).when(secondTarget).getSize(isA(SizeReadyCallback.class));
-    RequestBuilder<Drawable> firstRequest = Glide.with(getContext())
+    RequestBuilder<Drawable> firstRequest = requestManager
         .load(mockUri("content://first"));
 
     firstRequest.into(firstTarget);
@@ -544,7 +544,7 @@ public void testClone() throws IOException {
         .apply(placeholderOf(new ColorDrawable(Color.RED)))
         .into(secondTarget);
 
-    verify(firstTarget).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));
+    verify(firstTarget).onResourceReady(isA(Drawable.class), isA(Transition.class));
     verify(secondTarget).onResourceReady(notNull(), isA(Transition.class));
   }
 

File: library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.model;
 
 import android.content.Context;
+import android.support.annotation.Nullable;
 import android.support.v4.util.Pools.Pool;
 
 import com.bumptech.glide.Registry.NoModelLoaderAvailableException;
@@ -196,9 +197,10 @@ public <Model, Data> MultiModelLoader<Model, Data> build(
 
   private static class EmptyModelLoader implements ModelLoader<Object, Object> {
 
+    @Nullable
     @Override
     public LoadData<Object> buildLoadData(Object o, int width, int height, Options options) {
-      throw new UnsupportedOperationException("EmptyModelLoader does not handle data");
+      return null;
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
Patch:
@@ -248,7 +248,7 @@ private static final class DefaultThreadFactory implements ThreadFactory {
 
     @Override
     public synchronized Thread newThread(@NonNull Runnable runnable) {
-      final Thread result = new Thread(runnable, name + "-thread-" + threadNum) {
+      final Thread result = new Thread(runnable, "glide-" + name + "-thread-" + threadNum) {
         @Override
         public void run() {
           android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);

File: library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java
Patch:
@@ -93,7 +93,7 @@ public boolean decodeCachedData() {
   public static final DiskCacheStrategy RESOURCE = new DiskCacheStrategy() {
     @Override
     public boolean isDataCacheable(DataSource dataSource) {
-      return true;
+      return false;
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java
Patch:
@@ -93,7 +93,7 @@ public boolean decodeCachedData() {
   public static final DiskCacheStrategy RESOURCE = new DiskCacheStrategy() {
     @Override
     public boolean isDataCacheable(DataSource dataSource) {
-      return true;
+      return false;
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -390,6 +390,9 @@ public Target<TranscodeType> into(ImageView view) {
         case CENTER_CROP:
           requestOptions.optionalCenterCrop(context);
           break;
+        case CENTER_INSIDE:
+          requestOptions.optionalCenterInside(context);
+          break;
         case FIT_CENTER:
         case FIT_START:
         case FIT_END:

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -400,17 +400,19 @@ private static Bitmap decodeStream(InputStream is, BitmapFactory.Options options
     int sourceHeight = options.outHeight;
     String outMimeType = options.outMimeType;
     final Bitmap result;
+    TransformationUtils.getBitmapDrawableLock().lock();
     try {
       result = BitmapFactory.decodeStream(is, null, options);
     } catch (IllegalArgumentException e) {
       throw newIoExceptionForInBitmapAssertion(e, sourceWidth, sourceHeight, outMimeType, options);
+    } finally {
+      TransformationUtils.getBitmapDrawableLock().unlock();
     }
 
     if (options.inJustDecodeBounds) {
       is.reset();
 
     }
-
     return result;
   }
 

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
Patch:
@@ -91,11 +91,11 @@ public void testAtLeast_withSourceGreaterInOneDimension_returnsScaleFactorOfSmal
 
   @Test
   public void testCenterInside_scalesImageToFitWithinRequestedBounds() {
-    assertThat(DownsampleStrategy.CENTER_INSIDE.getScaleFactor(100, 200, 300, 300))
+    assertThat(DownsampleStrategy.FIT_CENTER.getScaleFactor(100, 200, 300, 300))
         .isEqualTo(300 / 200f);
-    assertThat(DownsampleStrategy.CENTER_INSIDE.getScaleFactor(270, 480, 724, 440))
+    assertThat(DownsampleStrategy.FIT_CENTER.getScaleFactor(270, 480, 724, 440))
         .isEqualTo(440 / 480f);
-    assertThat(DownsampleStrategy.CENTER_INSIDE.getScaleFactor(100, 100, 100, 100)).isEqualTo(1f);
+    assertThat(DownsampleStrategy.FIT_CENTER.getScaleFactor(100, 100, 100, 100)).isEqualTo(1f);
   }
 
   @Test

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
Patch:
@@ -112,7 +112,7 @@ public void testCalculateScaling_withAtLeast() {
 
   @Test
   public void testCalculateScaling_withCenterInside() {
-    DownsampleStrategy strategy = DownsampleStrategy.CENTER_INSIDE;
+    DownsampleStrategy strategy = DownsampleStrategy.FIT_CENTER;
     runScaleTest(100, 100, 100, 100, strategy, 100, 100);
     runScaleTest(200, 200, 100, 100, strategy, 100, 100);
     runScaleTest(400, 400, 100, 100, strategy, 100, 100);

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -390,9 +390,6 @@ public Target<TranscodeType> into(ImageView view) {
         case CENTER_CROP:
           requestOptions.optionalCenterCrop(context);
           break;
-        case CENTER_INSIDE:
-          requestOptions.optionalCenterInside(context);
-          break;
         case FIT_CENTER:
         case FIT_START:
         case FIT_END:

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -400,19 +400,17 @@ private static Bitmap decodeStream(InputStream is, BitmapFactory.Options options
     int sourceHeight = options.outHeight;
     String outMimeType = options.outMimeType;
     final Bitmap result;
-    TransformationUtils.getBitmapDrawableLock().lock();
     try {
       result = BitmapFactory.decodeStream(is, null, options);
     } catch (IllegalArgumentException e) {
       throw newIoExceptionForInBitmapAssertion(e, sourceWidth, sourceHeight, outMimeType, options);
-    } finally {
-      TransformationUtils.getBitmapDrawableLock().unlock();
     }
 
     if (options.inJustDecodeBounds) {
       is.reset();
 
     }
+
     return result;
   }
 

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
Patch:
@@ -91,11 +91,11 @@ public void testAtLeast_withSourceGreaterInOneDimension_returnsScaleFactorOfSmal
 
   @Test
   public void testCenterInside_scalesImageToFitWithinRequestedBounds() {
-    assertThat(DownsampleStrategy.FIT_CENTER.getScaleFactor(100, 200, 300, 300))
+    assertThat(DownsampleStrategy.CENTER_INSIDE.getScaleFactor(100, 200, 300, 300))
         .isEqualTo(300 / 200f);
-    assertThat(DownsampleStrategy.FIT_CENTER.getScaleFactor(270, 480, 724, 440))
+    assertThat(DownsampleStrategy.CENTER_INSIDE.getScaleFactor(270, 480, 724, 440))
         .isEqualTo(440 / 480f);
-    assertThat(DownsampleStrategy.FIT_CENTER.getScaleFactor(100, 100, 100, 100)).isEqualTo(1f);
+    assertThat(DownsampleStrategy.CENTER_INSIDE.getScaleFactor(100, 100, 100, 100)).isEqualTo(1f);
   }
 
   @Test

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
Patch:
@@ -112,7 +112,7 @@ public void testCalculateScaling_withAtLeast() {
 
   @Test
   public void testCalculateScaling_withCenterInside() {
-    DownsampleStrategy strategy = DownsampleStrategy.FIT_CENTER;
+    DownsampleStrategy strategy = DownsampleStrategy.CENTER_INSIDE;
     runScaleTest(100, 100, 100, 100, strategy, 100, 100);
     runScaleTest(200, 200, 100, 100, strategy, 100, 100);
     runScaleTest(400, 400, 100, 100, strategy, 100, 100);

File: library/src/main/java/com/bumptech/glide/load/Option.java
Patch:
@@ -142,6 +142,8 @@ public String toString() {
   /**
    * An interface that updates a {@link MessageDigest} with the given value as part of a process to
    * generate a disk cache key.
+   *
+   * @param <T> The type of the option.
    */
   public interface CacheKeyUpdater<T> {
     /**

File: library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java
Patch:
@@ -15,6 +15,9 @@ public class NoTransition<R> implements Transition<R> {
 
   /**
    * A factory that always returns the same {@link NoTransition}.
+   *
+   * @param <R> the resource type that will be transitioned into a
+   * {@link com.bumptech.glide.request.target.Target}.
    */
   public static class NoAnimationFactory<R> implements TransitionFactory<R> {
     @SuppressWarnings("unchecked")

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -400,17 +400,19 @@ private static Bitmap decodeStream(InputStream is, BitmapFactory.Options options
     int sourceHeight = options.outHeight;
     String outMimeType = options.outMimeType;
     final Bitmap result;
+    TransformationUtils.getBitmapDrawableLock().lock();
     try {
       result = BitmapFactory.decodeStream(is, null, options);
     } catch (IllegalArgumentException e) {
       throw newIoExceptionForInBitmapAssertion(e, sourceWidth, sourceHeight, outMimeType, options);
+    } finally {
+      TransformationUtils.getBitmapDrawableLock().unlock();
     }
 
     if (options.inJustDecodeBounds) {
       is.reset();
 
     }
-
     return result;
   }
 

File: library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
Patch:
@@ -156,7 +156,7 @@ public <T> Future<T> submit(Runnable task, T result) {
 
   @Override
   public <T> Future<T> submit(Callable<T> task) {
-    return super.submit(task);
+    return maybeWait(super.submit(task));
   }
 
   /**

File: library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
Patch:
@@ -21,6 +21,8 @@
  * <p>See http://www.ietf.org/rfc/rfc2397.txt  for a complete description of the 'data' URL scheme.
  *
  * <p>Briefly, a 'data' URL has the form: <pre>data:[mediatype][;base64],somedata"</pre>
+ *
+ * @param <Data> The type of data that can be opened.
  */
 public final class DataUrlLoader<Data> implements ModelLoader<String, Data> {
 

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -400,17 +400,19 @@ private static Bitmap decodeStream(InputStream is, BitmapFactory.Options options
     int sourceHeight = options.outHeight;
     String outMimeType = options.outMimeType;
     final Bitmap result;
+    TransformationUtils.getBitmapDrawableLock().lock();
     try {
       result = BitmapFactory.decodeStream(is, null, options);
     } catch (IllegalArgumentException e) {
       throw newIoExceptionForInBitmapAssertion(e, sourceWidth, sourceHeight, outMimeType, options);
+    } finally {
+      TransformationUtils.getBitmapDrawableLock().unlock();
     }
 
     if (options.inJustDecodeBounds) {
       is.reset();
 
     }
-
     return result;
   }
 

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -378,6 +378,9 @@ public Target<TranscodeType> into(ImageView view) {
         case CENTER_CROP:
           requestOptions.optionalCenterCrop(context);
           break;
+        case CENTER_INSIDE:
+          requestOptions.optionalCenterInside(context);
+          break;
         case FIT_CENTER:
         case FIT_START:
         case FIT_END:

File: library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
Patch:
@@ -117,9 +117,9 @@ public static final class Builder {
     }
 
     private boolean copyOnModify = true;
-    private boolean isEncodingDefault = true;
     private Map<String, List<LazyHeaderFactory>> headers = DEFAULT_HEADERS;
-    private boolean isUserAgentDefault = headers.containsKey(DEFAULT_USER_AGENT);
+    private boolean isEncodingDefault = true;
+    private boolean isUserAgentDefault = true;
 
     /**
      * Adds a value for the given header and returns this builder.

File: library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
Patch:
@@ -70,12 +70,12 @@ public void testRemovesPreviousRequestFromRequestTracker() {
     verify(requestManager).clear(eq(target));
   }
 
-  @Test(expected = IllegalArgumentException.class)
+  @Test(expected = NullPointerException.class)
   public void testThrowsIfGivenNullTarget() {
     getNullModelRequest().into((Target) null);
   }
 
-  @Test(expected = IllegalArgumentException.class)
+  @Test(expected = NullPointerException.class)
   public void testThrowsIfGivenNullView() {
     getNullModelRequest().into((ImageView) null);
   }

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
Patch:
@@ -40,6 +40,9 @@ public ResourceCacheGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {
   @Override
   public boolean startNext() {
     List<Key> sourceIds = helper.getCacheKeys();
+    if (sourceIds.isEmpty()) {
+      return false;
+    }
     List<Class<?>> resourceClasses = helper.getRegisteredResourceClasses();
     while (modelLoaders == null || !hasNextModelLoader()) {
       resourceClassIndex++;

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
 /**
- * Interface for an array pool that pools arrays of different types
+ * Interface for an array pool that pools arrays of different types.
  */
 public interface ArrayPool {
   /**

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Arrays;
 
 /**
- * Adapter for handling primitive byte arrays
+ * Adapter for handling primitive byte arrays.
  */
 public final class ByteArrayAdapter implements ArrayAdapterInterface<byte[]> {
   private static final String TAG = "ByteArrayPool";

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/IntegerArrayAdapter.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Arrays;
 
 /**
- * Adapter for handling primitive int arrays
+ * Adapter for handling primitive int arrays.
  */
 public final class IntegerArrayAdapter implements ArrayAdapterInterface<int[]> {
   private static final String TAG = "IntegerArrayPool";

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruByteArrayPool.java
Patch:
@@ -4,15 +4,15 @@
  * A fixed size LruByteArrayPool that evicts arrays using an LRU strategy to keep the pool under
  * the maximum byte size.
  *
- * TODO: update Glide to use ArrayPool<byte[]> instead
+ * TODO: update Glide to use ArrayPool<byte[]> instead.
  */
 public final class LruByteArrayPool implements ByteArrayPool {
   // 4MB.
   static final int DEFAULT_SIZE = 4 * 1024 * 1024;
 
   private final ArrayPool arrayPool;
 
-  public LruByteArrayPool(){
+  public LruByteArrayPool() {
     this(DEFAULT_SIZE);
   }
 

File: library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
Patch:
@@ -205,7 +205,7 @@ public Builder setLowMemoryMaxSizeMultiplier(float lowMemoryMaxSizeMultiplier) {
 
     /**
      * Sets the size in bytes of the {@link
-     * com.bumptech.glide.load.engine.bitmap_recycle.GenericArrayPool} to use to store temporary
+     * com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool} to use to store temporary
      * arrays while decoding data and returns this builder.
      *
      * <p>This number will be halved on low memory devices that return {@code true} from

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
-import android.support.annotation.Nullable;
 
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.util.Preconditions;
@@ -46,7 +45,7 @@ protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, in
   }
 
   @Override
-  public boolean equals(@Nullable Object o) {
+  public boolean equals(Object o) {
     return (o instanceof RoundedCorners) && ((RoundedCorners) o).roundingRadius == roundingRadius;
   }
 

File: library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
Patch:
@@ -47,7 +47,6 @@ public class ByteBufferGifDecoder implements ResourceDecoder<ByteBuffer, GifDraw
   private final Context context;
   private final GifHeaderParserPool parserPool;
   private final BitmapPool bitmapPool;
-  private final ArrayPool arrayPool;
   private final GifDecoderFactory gifDecoderFactory;
   private final GifBitmapProvider provider;
 
@@ -69,7 +68,6 @@ public ByteBufferGifDecoder(
       GifDecoderFactory gifDecoderFactory) {
     this.context = context;
     this.bitmapPool = bitmapPool;
-    this.arrayPool = arrayPool;
     this.gifDecoderFactory = gifDecoderFactory;
     this.provider = new GifBitmapProvider(bitmapPool, arrayPool);
     this.parserPool = parserPool;

File: library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
Patch:
@@ -99,7 +99,7 @@ private void fillPool(LruArrayPool pool, int arrayCount, int arrayLength) {
 
   private Object createArray(Class type, int size, int value) {
     Object array = null;
-    if (type.equals(int[].class)){
+    if (type.equals(int[].class)) {
       array = new int[size];
       Arrays.fill((int[]) array, value);
     } else if (type.equals(byte[].class)) {

File: library/src/test/java/com/bumptech/glide/request/BaseRequestOptionsTest.java
Patch:
@@ -106,7 +106,7 @@ public void testApplyingOptions_withDontTransform_overridesTransformations() {
   public void testApplyingOptions_withTransformation_overridesDontTransform() {
     options.dontTransform();
     TestOptions other = new TestOptions();
-    other.transform(RuntimeEnvironment.application, transformation);;
+    other.transform(RuntimeEnvironment.application, transformation);
 
     options.apply(other);
 

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
Patch:
@@ -171,13 +171,13 @@ public interface BitmapProvider {
     void release(byte[] bytes);
 
     /**
-     * Returns an int array used for decoding/generating the frame bitmaps
+     * Returns an int array used for decoding/generating the frame bitmaps.
      * @param size
      */
     int[] obtainIntArray(int size);
 
     /**
-     * Release the given array back to the pool
+     * Release the given array back to the pool.
      * @param array
      */
     void release(int[] array);

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java
Patch:
@@ -81,7 +81,7 @@ public GifHeader parseHeader() {
 
   /**
    * Determines if the GIF is animated by trying to read in the first 2 frames
-   * This method reparses the data even if the header has already been read
+   * This method reparses the data even if the header has already been read.
    */
   public boolean isAnimated() {
     readHeader();

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -368,7 +368,9 @@ public Target<TranscodeType> into(ImageView view) {
       throw new IllegalArgumentException("You must pass in a non null View");
     }
 
-    if (!requestOptions.isTransformationSet() && view.getScaleType() != null) {
+    if (!requestOptions.isTransformationSet()
+        && requestOptions.isTransformationAllowed()
+        && view.getScaleType() != null) {
       if (requestOptions.isLocked()) {
         requestOptions = requestOptions.clone();
       }

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java
Patch:
@@ -17,7 +17,7 @@ public class GifHeaderParser {
   public static final String TAG = "GifHeaderParser";
 
   // The minimum frame delay in hundredths of a second.
-  static final int MIN_FRAME_DELAY = 3;
+  static final int MIN_FRAME_DELAY = 2;
   // The default frame delay in hundredths of a second for GIFs with frame delays less than the
   // minimum.
   static final int DEFAULT_FRAME_DELAY = 10;

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
Patch:
@@ -137,7 +137,7 @@ boolean hasLoadPath(Class<?> dataClass) {
   <Z> Transformation<Z> getTransformation(Class<Z> resourceClass) {
     Transformation<Z> result = (Transformation<Z>) transformations.get(resourceClass);
      if (result == null) {
-      if (!transformations.isEmpty() && isTransformationRequired) {
+      if (transformations.isEmpty() && isTransformationRequired) {
         throw new IllegalArgumentException(
             "Missing transformation for " + resourceClass + ". If you wish to"
                 + " ignore unknown resource types, use the optional transformation methods.");

File: library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
Patch:
@@ -141,7 +141,7 @@ public void testByteArrayPoolSize_withLowRamDevice_isHalfTheSpecifiedBytes() {
 
     Util.setSdkVersionInt(10);
 
-    int byteArrayPoolSize = harness.getCalculator().getByteArrayPoolSize();
+    int byteArrayPoolSize = harness.getCalculator().getArrayPoolSizeInBytes();
     assertThat(byteArrayPoolSize).isEqualTo(harness.byteArrayPoolSizeBytes / 2);
   }
 
@@ -161,7 +161,7 @@ private static class MemorySizeHarness {
     float memoryCacheScreens = MemorySizeCalculator.Builder.MEMORY_CACHE_TARGET_SCREENS;
     float bitmapPoolScreens = MemorySizeCalculator.Builder.BITMAP_POOL_TARGET_SCREENS;
     float sizeMultiplier = MemorySizeCalculator.Builder.MAX_SIZE_MULTIPLIER;
-    int byteArrayPoolSizeBytes = MemorySizeCalculator.Builder.BYTE_ARRAY_POOL_SIZE_BYTES;
+    int byteArrayPoolSizeBytes = MemorySizeCalculator.Builder.ARRAY_POOL_SIZE_BYTES;
     ActivityManager activityManager =
         (ActivityManager) RuntimeEnvironment.application.getSystemService(Context.ACTIVITY_SERVICE);
     MemorySizeCalculator.ScreenDimensions screenDimensions =
@@ -176,7 +176,7 @@ public MemorySizeCalculator getCalculator() {
           .setMaxSizeMultiplier(sizeMultiplier)
           .setActivityManager(activityManager)
           .setScreenDimensions(screenDimensions)
-          .setByteArrayPoolSize(byteArrayPoolSizeBytes)
+          .setArrayPoolSize(byteArrayPoolSizeBytes)
           .build();
     }
 

File: library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
Patch:
@@ -141,7 +141,7 @@ public void testByteArrayPoolSize_withLowRamDevice_isHalfTheSpecifiedBytes() {
 
     Util.setSdkVersionInt(10);
 
-    int byteArrayPoolSize = harness.getCalculator().getArrayPoolSizeInBytes();
+    int byteArrayPoolSize = harness.getCalculator().getByteArrayPoolSize();
     assertThat(byteArrayPoolSize).isEqualTo(harness.byteArrayPoolSizeBytes / 2);
   }
 
@@ -161,7 +161,7 @@ private static class MemorySizeHarness {
     float memoryCacheScreens = MemorySizeCalculator.Builder.MEMORY_CACHE_TARGET_SCREENS;
     float bitmapPoolScreens = MemorySizeCalculator.Builder.BITMAP_POOL_TARGET_SCREENS;
     float sizeMultiplier = MemorySizeCalculator.Builder.MAX_SIZE_MULTIPLIER;
-    int byteArrayPoolSizeBytes = MemorySizeCalculator.Builder.ARRAY_POOL_SIZE_BYTES;
+    int byteArrayPoolSizeBytes = MemorySizeCalculator.Builder.BYTE_ARRAY_POOL_SIZE_BYTES;
     ActivityManager activityManager =
         (ActivityManager) RuntimeEnvironment.application.getSystemService(Context.ACTIVITY_SERVICE);
     MemorySizeCalculator.ScreenDimensions screenDimensions =
@@ -176,7 +176,7 @@ public MemorySizeCalculator getCalculator() {
           .setMaxSizeMultiplier(sizeMultiplier)
           .setActivityManager(activityManager)
           .setScreenDimensions(screenDimensions)
-          .setArrayPoolSize(byteArrayPoolSizeBytes)
+          .setByteArrayPoolSize(byteArrayPoolSizeBytes)
           .build();
     }
 

File: library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
Patch:
@@ -141,7 +141,7 @@ public void testByteArrayPoolSize_withLowRamDevice_isHalfTheSpecifiedBytes() {
 
     Util.setSdkVersionInt(10);
 
-    int byteArrayPoolSize = harness.getCalculator().getByteArrayPoolSize();
+    int byteArrayPoolSize = harness.getCalculator().getArrayPoolSizeInBytes();
     assertThat(byteArrayPoolSize).isEqualTo(harness.byteArrayPoolSizeBytes / 2);
   }
 
@@ -161,7 +161,7 @@ private static class MemorySizeHarness {
     float memoryCacheScreens = MemorySizeCalculator.Builder.MEMORY_CACHE_TARGET_SCREENS;
     float bitmapPoolScreens = MemorySizeCalculator.Builder.BITMAP_POOL_TARGET_SCREENS;
     float sizeMultiplier = MemorySizeCalculator.Builder.MAX_SIZE_MULTIPLIER;
-    int byteArrayPoolSizeBytes = MemorySizeCalculator.Builder.BYTE_ARRAY_POOL_SIZE_BYTES;
+    int byteArrayPoolSizeBytes = MemorySizeCalculator.Builder.ARRAY_POOL_SIZE_BYTES;
     ActivityManager activityManager =
         (ActivityManager) RuntimeEnvironment.application.getSystemService(Context.ACTIVITY_SERVICE);
     MemorySizeCalculator.ScreenDimensions screenDimensions =
@@ -176,7 +176,7 @@ public MemorySizeCalculator getCalculator() {
           .setMaxSizeMultiplier(sizeMultiplier)
           .setActivityManager(activityManager)
           .setScreenDimensions(screenDimensions)
-          .setByteArrayPoolSize(byteArrayPoolSizeBytes)
+          .setArrayPoolSize(byteArrayPoolSizeBytes)
           .build();
     }
 

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
Patch:
@@ -11,7 +11,7 @@
 public interface ResourceTranscoder<Z, R> {
 
   /**
-   * Transcodes the given resource to the new resource type and returns the wew resource.
+   * Transcodes the given resource to the new resource type and returns the new resource.
    *
    * @param toTranscode The resource to transcode.
    */

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
Patch:
@@ -11,7 +11,7 @@
 public interface ResourceTranscoder<Z, R> {
 
   /**
-   * Transcodes the given resource to the new resource type and returns the wew resource.
+   * Transcodes the given resource to the new resource type and returns the new resource.
    *
    * @param toTranscode The resource to transcode.
    */

File: integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java
Patch:
@@ -202,7 +202,7 @@ public void testAppliesHeadersInGlideUrl() throws Exception {
   }
 
   private DataFetcher<InputStream> getFetcher() {
-    return getFetcher(Headers.NONE);
+    return getFetcher(Headers.DEFAULT);
   }
 
   private DataFetcher<InputStream> getFetcher(Headers headers) {

File: library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
Patch:
@@ -55,7 +55,7 @@ public void setUp() throws IOException {
     defaultFollowRedirects = HttpURLConnection.getFollowRedirects();
     HttpURLConnection.setFollowRedirects(false);
     mockWebServer = new MockWebServer();
-    mockWebServer.play();
+    mockWebServer.start();
 
     streamCaptor = ArgumentCaptor.forClass(InputStream.class);
   }
@@ -204,7 +204,7 @@ public void testSetsReadTimeout() throws Exception {
     MockWebServer tempWebServer = new MockWebServer();
     tempWebServer.enqueue(
         new MockResponse().setBody("test").throttleBody(1, TIMEOUT_TIME_MS, TimeUnit.MILLISECONDS));
-    tempWebServer.play();
+    tempWebServer.start();
 
     try {
       getFetcher().loadData(Priority.HIGH, callback);
@@ -233,7 +233,7 @@ public void testAppliesHeadersInGlideUrl() throws Exception {
   }
 
   private HttpUrlFetcher getFetcher() {
-    return getFetcher(Headers.NONE);
+    return getFetcher(Headers.DEFAULT);
   }
 
   private HttpUrlFetcher getFetcher(Headers headers) {

File: library/src/test/java/com/bumptech/glide/tests/Util.java
Patch:
@@ -24,6 +24,7 @@
 import java.io.OutputStream;
 import java.security.MessageDigest;
 
+// FIXME move to testutil module
 public class Util {
 
   public static String getExpectedClassId(Class clazz) {

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -354,7 +354,7 @@ public void run() {
         FutureTarget<File> futureTarget = Glide.with(context)
             .downloadOnly()
             .load(photo)
-            .into(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE);
+            .submit(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE);
 
         try {
           futureTarget.get();

File: integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java
Patch:
@@ -202,7 +202,7 @@ public void testAppliesHeadersInGlideUrl() throws Exception {
   }
 
   private DataFetcher<InputStream> getFetcher() {
-    return getFetcher(Headers.NONE);
+    return getFetcher(Headers.DEFAULT);
   }
 
   private DataFetcher<InputStream> getFetcher(Headers headers) {

File: library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
Patch:
@@ -55,7 +55,7 @@ public void setUp() throws IOException {
     defaultFollowRedirects = HttpURLConnection.getFollowRedirects();
     HttpURLConnection.setFollowRedirects(false);
     mockWebServer = new MockWebServer();
-    mockWebServer.play();
+    mockWebServer.start();
 
     streamCaptor = ArgumentCaptor.forClass(InputStream.class);
   }
@@ -204,7 +204,7 @@ public void testSetsReadTimeout() throws Exception {
     MockWebServer tempWebServer = new MockWebServer();
     tempWebServer.enqueue(
         new MockResponse().setBody("test").throttleBody(1, TIMEOUT_TIME_MS, TimeUnit.MILLISECONDS));
-    tempWebServer.play();
+    tempWebServer.start();
 
     try {
       getFetcher().loadData(Priority.HIGH, callback);
@@ -233,7 +233,7 @@ public void testAppliesHeadersInGlideUrl() throws Exception {
   }
 
   private HttpUrlFetcher getFetcher() {
-    return getFetcher(Headers.NONE);
+    return getFetcher(Headers.DEFAULT);
   }
 
   private HttpUrlFetcher getFetcher(Headers headers) {

File: library/src/test/java/com/bumptech/glide/tests/Util.java
Patch:
@@ -24,6 +24,7 @@
 import java.io.OutputStream;
 import java.security.MessageDigest;
 
+// FIXME move to testutil module
 public class Util {
 
   public static String getExpectedClassId(Class clazz) {

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -354,7 +354,7 @@ public void run() {
         FutureTarget<File> futureTarget = Glide.with(context)
             .downloadOnly()
             .load(photo)
-            .into(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE);
+            .submit(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE);
 
         try {
           futureTarget.get();

File: library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
Patch:
@@ -9,6 +9,7 @@
 
 import android.widget.ImageView;
 
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.Target;
@@ -106,7 +107,8 @@ private RequestBuilder getNullModelRequest() {
     when(glideContext.buildImageViewTarget(isA(ImageView.class), isA(Class.class)))
         .thenReturn(mock(Target.class));
     when(glideContext.getDefaultRequestOptions()).thenReturn(new RequestOptions());
-    when(requestManager.getDefaultRequestOptions()).thenReturn(new RequestOptions());
+    when(requestManager.getDefaultRequestOptions())
+        .thenReturn((BaseRequestOptions) new RequestOptions());
     return new RequestBuilder(glideContext, requestManager, Object.class)
         .load((Object) null);
   }

File: library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
Patch:
@@ -105,7 +105,8 @@ public void runTest() throws Exception {
   private RequestBuilder getNullModelRequest() {
     when(glideContext.buildImageViewTarget(isA(ImageView.class), isA(Class.class)))
         .thenReturn(mock(Target.class));
-    when(glideContext.getOptions()).thenReturn(new RequestOptions());
+    when(glideContext.getDefaultRequestOptions()).thenReturn(new RequestOptions());
+    when(requestManager.getDefaultRequestOptions()).thenReturn(new RequestOptions());
     return new RequestBuilder(glideContext, requestManager, Object.class)
         .load((Object) null);
   }

File: library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java
Patch:
@@ -38,11 +38,11 @@ public class GlideUrl implements Key {
   @Nullable private volatile byte[] cacheKeyBytes;
 
   public GlideUrl(URL url) {
-    this(url, Headers.NONE);
+    this(url, Headers.DEFAULT);
   }
 
   public GlideUrl(String url) {
-    this(url, Headers.NONE);
+    this(url, Headers.DEFAULT);
   }
 
   public GlideUrl(URL url, Headers headers) {

File: library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java
Patch:
@@ -112,6 +112,6 @@ protected List<String> getAlternateUrls(Model model, int width, int height,
    */
   @Nullable
   protected Headers getHeaders(Model model, int width, int height, Options options) {
-    return Headers.NONE;
+    return Headers.DEFAULT;
   }
 }

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
Patch:
@@ -144,7 +144,7 @@ public Bitmap getDirty(int width, int height, Bitmap.Config config) {
 
   @Nullable
   private synchronized Bitmap getDirtyOrNull(int width, int height, Bitmap.Config config) {
-     // Config will be null for non public config types, which can lead to transformations naively
+    // Config will be null for non public config types, which can lead to transformations naively
     // passing in null as the requested config here. See issue #194.
     final Bitmap result = strategy.get(width, height, config != null ? config : DEFAULT_CONFIG);
     if (result == null) {

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java
Patch:
@@ -29,7 +29,7 @@ public interface BitmapPool {
    * Adds the given {@link android.graphics.Bitmap} if it is eligible to be re-used and the pool
    * can fit it, or calls {@link Bitmap#recycle()} on the Bitmap and discards it.
    *
-   * <p> Callers most <em>not</em> continue to use the Bitmap after calling this method. </p>
+   * <p> Callers must <em>not</em> continue to use the Bitmap after calling this method. </p>
    *
    * @param bitmap The {@link android.graphics.Bitmap} to attempt to add.
    * @see android.graphics.Bitmap#isMutable()

File: library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
Patch:
@@ -437,7 +437,6 @@ public void testSubmitsDecodeJobToSourceServiceWhenDecodingFromSoureOnlyOnStart(
     verify(harness.sourceService).execute(eq(harness.decodeJob));
   }
 
-
   @SuppressWarnings("unchecked")
   private static class MultiCbHarness {
     Key key = mock(Key.class);

File: library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
Patch:
@@ -265,7 +265,8 @@ public void testSetsConfigOnBuildersToDefaultIfNotSet() {
     bitmapPreFiller.preFill(builder);
 
     InOrder order = inOrder(builder);
-    order.verify(builder).setConfig(Bitmap.Config.RGB_565);
+    order.verify(builder).setConfig(DecodeFormat.DEFAULT == DecodeFormat.PREFER_ARGB_8888
+        ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
     order.verify(builder).build();
   }
 

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -331,7 +331,7 @@ public <Y extends Target<TranscodeType>> Y into(Y target) {
       throw new IllegalArgumentException("You must pass in a non null Target");
     }
     if (!isModelSet) {
-      throw new IllegalArgumentException("You must first put a model (try #load())");
+      throw new IllegalArgumentException("You must call #load() before calling #into()");
     }
 
     Request previous = target.getRequest();

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
Patch:
@@ -79,7 +79,8 @@ EngineJob<R> init(Key key, boolean isCacheable) {
 
   public void start(DecodeJob<R> decodeJob) {
     this.decodeJob = decodeJob;
-    diskCacheExecutor.execute(decodeJob);
+    GlideExecutor executor = decodeJob.willDecodeFromCache() ? diskCacheExecutor : sourceExecutor;
+    executor.execute(decodeJob);
   }
 
   public void addCallback(ResourceCallback cb) {

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/SquareImageView.java
Patch:
@@ -1,6 +1,8 @@
 package com.bumptech.glide.samples.flickr;
 
+import android.annotation.TargetApi;
 import android.content.Context;
+import android.os.Build;
 import android.util.AttributeSet;
 import android.widget.ImageView;
 
@@ -21,6 +23,7 @@ public SquareImageView(Context context, AttributeSet attrs, int defStyleAttr) {
     super(context, attrs, defStyleAttr);
   }
 
+  @TargetApi(Build.VERSION_CODES.LOLLIPOP)
   public SquareImageView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
     super(context, attrs, defStyleAttr, defStyleRes);
   }

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -471,7 +471,7 @@ public void onLoadFailed(GlideException e) {
     loadStatus = null;
     status = Status.FAILED;
     //TODO: what if this is a thumbnail request?
-    if (requestListener == null || !requestListener.onLoadFailed(model, target,
+    if (requestListener == null || !requestListener.onLoadFailed(e, model, target,
         isFirstReadyResource())) {
       setErrorPlaceholder();
     }

File: library/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -33,6 +33,7 @@
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.data.DataFetcher;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
@@ -326,7 +327,7 @@ private void runTestUriStringDefaultLoader() {
   private void runTestStringDefaultLoader(String string) {
     requestManager.asDrawable().load(string).listener(new RequestListener<Drawable>() {
       @Override
-      public boolean onLoadFailed(Object model, Target target,
+      public boolean onLoadFailed(GlideException e, Object model, Target target,
           boolean isFirstResource) {
         throw new RuntimeException("Load failed");
       }

File: samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.target.Target;
@@ -69,7 +70,7 @@ public void onClick(View view) {
     Glide.with(this).asDrawable().thumbnail(thumbnailRequest).load(result.images.original.url)
         .listener(new RequestListener<Drawable>() {
           @Override
-          public boolean onLoadFailed(Object model, Target<Drawable> target,
+          public boolean onLoadFailed(GlideException e, Object model, Target<Drawable> target,
               boolean isFirstResource) {
             return false;
           }

File: samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgSoftwareLayerSetter.java
Patch:
@@ -5,6 +5,7 @@
 import android.os.Build;
 import android.widget.ImageView;
 
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.target.ImageViewTarget;
 import com.bumptech.glide.request.target.Target;
@@ -18,7 +19,7 @@
 public class SvgSoftwareLayerSetter implements RequestListener<PictureDrawable> {
 
   @Override
-  public boolean onLoadFailed(Object model, Target<PictureDrawable> target,
+  public boolean onLoadFailed(GlideException e, Object model, Target<PictureDrawable> target,
       boolean isFirstResource) {
     ImageView view = ((ImageViewTarget<?>) target).getView();
     if (Build.VERSION_CODES.HONEYCOMB <= Build.VERSION.SDK_INT) {

File: samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java
Patch:
@@ -22,8 +22,8 @@ public final class Api {
   private static volatile Api api = null;
   private static final String BETA_KEY = "dc6zaTOxFJmzC";
   private static final String BASE_URL = "https://api.giphy.com/";
-  private static final String SEARCH_PATH = "/v1/gifs/search";
-  private static final String TRENDING_PATH = "/v1/gifs/trending";
+  private static final String SEARCH_PATH = "v1/gifs/search";
+  private static final String TRENDING_PATH = "v1/gifs/trending";
   private final Handler bgHandler;
   private final Handler mainHandler;
   private final HashSet<Monitor> monitors = new HashSet<Monitor>();

File: library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
Patch:
@@ -66,7 +66,7 @@ public boolean startNext() {
       fetcher =
           modelLoader.buildLoadData(cacheFile, helper.getWidth(), helper.getHeight(),
               helper.getOptions()).fetcher;
-      if (fetcher != null) {
+      if (fetcher != null && helper.hasLoadPath(fetcher.getDataClass())) {
         started = true;
         fetcher.loadData(helper.getPriority(), this);
       }

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
Patch:
@@ -71,7 +71,7 @@ public boolean startNext() {
       fetcher =
           modelLoader.buildLoadData(cacheFile, helper.getWidth(), helper.getHeight(),
               helper.getOptions()).fetcher;
-      if (fetcher != null) {
+      if (fetcher != null && helper.hasLoadPath(fetcher.getDataClass())) {
         started = true;
         fetcher.loadData(helper.getPriority(), this);
       }

File: library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java
Patch:
@@ -56,7 +56,9 @@ public boolean startNext() {
     boolean started = false;
     while (!started && hasNextModelLoader()) {
       loadData = helper.getLoadData().get(loadDataListIndex++);
-      if (loadData != null) {
+      if (loadData != null
+          && (helper.getDiskCacheStrategy().isDataCacheable(loadData.fetcher.getDataSource())
+          || helper.hasLoadPath(loadData.fetcher.getDataClass()))) {
         started = true;
         loadData.fetcher.loadData(helper.getPriority(), this);
       }

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
Patch:
@@ -66,8 +66,7 @@ public LoadData(Key sourceKey, List<Key> alternateKeys, DataFetcher<Data> fetche
    * {@link DataFetcher} will not be used if the resource is already cached.
    *
    * <p> Note - If no valid data fetcher can be returned (for example if a model has a null URL),
-   * then it is acceptable to return a null data fetcher from this method. Doing so will be treated
-   * any other failure or exception during the load process. </p>
+   * then it is acceptable to return a null data fetcher from this method. </p>
    *
    * @param model  The model representing the resource.
    * @param width  The width in pixels of the view or target the resource will be loaded into, or

File: integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
Patch:
@@ -12,8 +12,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.gifdecoder.GifDecoder;
@@ -36,6 +34,7 @@
 import org.mockito.InOrder;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java
Patch:
@@ -1,16 +1,14 @@
 package com.bumptech.glide.integration.volley;
 
-import static com.bumptech.glide.testutil.TestUtil.assertStreamOf;
 import static com.google.common.truth.Truth.assertThat;
+import static com.bumptech.glide.testutil.TestUtil.assertStreamOf;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.os.SystemClock;
 
 import com.android.volley.RequestQueue;
@@ -31,6 +29,7 @@
 import org.mockito.MockitoAnnotations;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;

File: library/src/test/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -13,8 +13,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
@@ -62,6 +60,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;

File: library/src/test/java/com/bumptech/glide/ListPreloaderTest.java
Patch:
@@ -7,8 +7,6 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.request.target.SizeReadyCallback;
@@ -21,6 +19,7 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.mockito.verification.VerificationMode;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;

File: library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
Patch:
@@ -7,8 +7,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.widget.ImageView;
 
 import com.bumptech.glide.request.Request;
@@ -21,6 +19,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -10,8 +10,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.Context;
 
 import com.bumptech.glide.manager.ConnectivityMonitor;
@@ -30,6 +28,7 @@
 import org.mockito.MockitoAnnotations;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/OptionsTest.java
Patch:
@@ -1,10 +1,10 @@
 package com.bumptech.glide.load;
 
 import com.google.common.testing.EqualsTester;
-import org.robolectric.RobolectricTestRunner;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
Patch:
@@ -2,15 +2,14 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.testutil.TestResourceUtil;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.IOException;

File: library/src/test/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java
Patch:
@@ -6,8 +6,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.res.AssetFileDescriptor;
 import android.content.res.AssetManager;
 import android.os.ParcelFileDescriptor;
@@ -19,6 +17,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.IOException;

File: library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
Patch:
@@ -6,8 +6,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.load.model.Headers;
@@ -23,6 +21,7 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.IOException;

File: library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java
Patch:
@@ -7,8 +7,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.model.GlideUrl;
 
@@ -18,6 +16,7 @@
 import org.mockito.InOrder;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;

File: library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
Patch:
@@ -5,8 +5,6 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.ContentResolver;
 import android.content.Context;
 import android.net.Uri;
@@ -18,6 +16,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java
Patch:
@@ -5,8 +5,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.res.AssetManager;
 
 import com.bumptech.glide.Priority;
@@ -16,6 +14,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.IOException;

File: library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
Patch:
@@ -5,8 +5,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.net.Uri;
 import android.provider.MediaStore;
 
@@ -18,6 +16,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
Patch:
@@ -8,8 +8,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.database.MatrixCursor;
 import android.net.Uri;
 import android.provider.MediaStore;
@@ -20,6 +18,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;

File: library/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
Patch:
@@ -5,8 +5,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.res.AssetFileDescriptor;
@@ -23,6 +21,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.internal.ShadowExtractor;

File: library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
Patch:
@@ -3,8 +3,6 @@
 import static org.mockito.Matchers.isNotNull;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.Context;
 import android.net.Uri;
 
@@ -17,6 +15,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
Patch:
@@ -13,8 +13,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.os.Handler;
 import android.support.v4.util.Pools;
 
@@ -28,6 +26,7 @@
 import org.mockito.InOrder;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLooper;

File: library/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
Patch:
@@ -5,8 +5,6 @@
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Option;
 import com.bumptech.glide.load.Options;
@@ -19,6 +17,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.UnsupportedEncodingException;

File: library/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
Patch:
@@ -9,13 +9,12 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.Key;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
Patch:
@@ -16,8 +16,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.GlideContext;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.Key;
@@ -35,6 +33,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.lang.ref.WeakReference;

File: library/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
Patch:
@@ -5,15 +5,14 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.os.Looper;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.mockito.Mockito.verify;
 
 import com.google.common.testing.EqualsTester;
-import org.robolectric.RobolectricTestRunner;
 
 import android.graphics.Bitmap;
 
@@ -16,6 +15,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
Patch:
@@ -3,13 +3,12 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowBitmap;
 

File: library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java
Patch:
@@ -4,11 +4,10 @@
 import static org.junit.Assert.assertNull;
 import static org.mockito.Mockito.mock;
 
-import org.robolectric.RobolectricTestRunner;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
Patch:
@@ -1,9 +1,9 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
+import static com.google.common.truth.Truth.assertThat;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;
-import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
@@ -12,13 +12,12 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowBitmap;

File: library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
Patch:
@@ -4,14 +4,13 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.tests.Util;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
Patch:
@@ -5,7 +5,6 @@
 import static org.mockito.Mockito.when;
 
 import com.google.common.collect.Range;
-import org.robolectric.RobolectricTestRunner;
 
 import android.app.ActivityManager;
 import android.content.Context;
@@ -17,6 +16,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;

File: library/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
Patch:
@@ -2,13 +2,12 @@
 
 import static org.junit.Assert.assertTrue;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.Key;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.security.MessageDigest;

File: library/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java
Patch:
@@ -2,10 +2,9 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import org.robolectric.RobolectricTestRunner;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;

File: library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
Patch:
@@ -13,8 +13,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.os.Handler;
 
@@ -31,6 +29,7 @@
 import org.mockito.InOrder;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;

File: library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
Patch:
@@ -11,7 +11,6 @@
 import static org.mockito.Mockito.when;
 
 import com.google.common.collect.Range;
-import org.robolectric.RobolectricTestRunner;
 
 import android.graphics.Bitmap;
 
@@ -24,6 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;

File: library/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
Patch:
@@ -3,12 +3,12 @@
 import static org.junit.Assert.assertEquals;
 
 import com.google.common.testing.EqualsTester;
-import org.robolectric.RobolectricTestRunner;
 
 import android.graphics.Bitmap;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java
Patch:
@@ -6,8 +6,6 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.res.AssetManager;
 import android.net.Uri;
 
@@ -19,6 +17,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java
Patch:
@@ -4,10 +4,10 @@
 import static org.mockito.Mockito.mock;
 
 import com.google.common.testing.EqualsTester;
-import org.robolectric.RobolectricTestRunner;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.net.MalformedURLException;

File: library/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java
Patch:
@@ -5,12 +5,12 @@
 import static org.mockito.Mockito.when;
 
 import com.google.common.testing.EqualsTester;
-import org.robolectric.RobolectricTestRunner;
 
 import com.bumptech.glide.load.model.LazyHeaders.Builder;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.Map;

File: library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
Patch:
@@ -7,8 +7,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.Context;
 
 import com.bumptech.glide.Registry.NoModelLoaderAvailableException;
@@ -21,6 +19,7 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/model/ResourceLoaderTest.java
Patch:
@@ -10,8 +10,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.net.Uri;
 
 import com.bumptech.glide.load.Key;
@@ -23,6 +21,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
Patch:
@@ -2,8 +2,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 import com.bumptech.glide.util.ByteBufferUtil;
@@ -12,6 +10,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
Patch:
@@ -8,8 +8,6 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.net.Uri;
 
 import com.bumptech.glide.load.Key;
@@ -22,6 +20,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/model/UriLoaderTest.java
Patch:
@@ -6,8 +6,6 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.Context;
 import android.net.Uri;
 
@@ -19,6 +17,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
Patch:
@@ -9,8 +9,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.data.DataFetcher;
@@ -25,6 +23,7 @@
 import org.mockito.MockitoAnnotations;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.InputStream;

File: library/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
Patch:
@@ -4,8 +4,6 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.net.Uri;
 
 import com.bumptech.glide.load.Options;
@@ -17,6 +15,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.InputStream;

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
Patch:
@@ -6,8 +6,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 
@@ -16,6 +14,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
Patch:
@@ -9,8 +9,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 
@@ -28,6 +26,7 @@
 import org.mockito.MockitoAnnotations;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
Patch:
@@ -6,8 +6,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.load.EncodeStrategy;
@@ -19,6 +17,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
Patch:
@@ -8,8 +8,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.os.Build;
 
@@ -20,6 +18,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 //TODO: add a test for bitmap size using getAllocationByteSize when robolectric supports kitkat.

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
Patch:
@@ -6,8 +6,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.load.engine.Resource;
@@ -19,6 +17,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.security.MessageDigest;

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
Patch:
@@ -11,8 +11,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.load.Transformation;
@@ -26,6 +24,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
Patch:
@@ -2,10 +2,9 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import org.robolectric.RobolectricTestRunner;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
Patch:
@@ -6,8 +6,6 @@
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.util.DisplayMetrics;
@@ -23,6 +21,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
Patch:
@@ -9,8 +9,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.load.Transformation;
@@ -24,6 +22,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.security.MessageDigest;

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
Patch:
@@ -3,15 +3,14 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType;
 import com.bumptech.glide.testutil.TestResourceUtil;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.Util;
 

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
Patch:
@@ -7,13 +7,12 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
Patch:
@@ -12,7 +12,6 @@
 import static org.mockito.Mockito.when;
 
 import com.google.common.collect.Range;
-import org.robolectric.RobolectricTestRunner;
 
 import android.graphics.Bitmap;
 import android.graphics.Matrix;
@@ -23,6 +22,7 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
Patch:
@@ -7,8 +7,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.media.MediaMetadataRetriever;
 import android.os.ParcelFileDescriptor;
@@ -22,6 +20,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.FileDescriptor;

File: library/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
Patch:
@@ -6,8 +6,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
 import android.graphics.drawable.Drawable;
@@ -17,6 +15,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
Patch:
@@ -9,8 +9,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.gifdecoder.GifDecoder;
 import com.bumptech.glide.gifdecoder.GifHeader;
 import com.bumptech.glide.gifdecoder.GifHeaderParser;
@@ -25,6 +23,7 @@
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
Patch:
@@ -5,12 +5,11 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -14,8 +14,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
@@ -38,6 +36,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;
@@ -49,7 +48,8 @@
 import java.util.Set;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18, shadows = { GlideShadowLooper.class, BitmapTrackingShadowCanvas.class })
+@Config(manifest = Config.NONE, sdk = 18,
+    shadows = { GlideShadowLooper.class, BitmapTrackingShadowCanvas.class })
 public class GifDrawableTest {
   private GifDrawable drawable;
   private int frameHeight;

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
Patch:
@@ -8,8 +8,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.load.Transformation;
@@ -24,6 +22,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.security.MessageDigest;

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
Patch:
@@ -14,7 +14,6 @@
 import static org.mockito.Mockito.when;
 
 import com.google.common.testing.EqualsTester;
-import org.robolectric.RobolectricTestRunner;
 
 import android.graphics.Bitmap;
 import android.os.Handler;
@@ -39,6 +38,7 @@
 import org.mockito.InOrder;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
Patch:
@@ -5,8 +5,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.gifdecoder.GifDecoder;
@@ -16,6 +14,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.IOException;

File: library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
Patch:
@@ -2,8 +2,6 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
@@ -13,6 +11,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
Patch:
@@ -5,15 +5,14 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.load.engine.Resource;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
Patch:
@@ -4,8 +4,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 
@@ -15,6 +13,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/manager/ConnectivityMonitorFactoryTest.java
Patch:
@@ -3,11 +3,10 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.Mockito.mock;
 
-import org.robolectric.RobolectricTestRunner;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;

File: library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
Patch:
@@ -7,8 +7,6 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
@@ -18,6 +16,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;

File: library/src/test/java/com/bumptech/glide/manager/LifecycleTest.java
Patch:
@@ -4,11 +4,10 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;

File: library/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
Patch:
@@ -7,8 +7,6 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.app.Activity;
 import android.support.v4.app.FragmentActivity;
 
@@ -19,6 +17,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.exceptions.base.MockitoAssertionError;
 import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ActivityController;
 

File: library/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
Patch:
@@ -1,16 +1,14 @@
 package com.bumptech.glide.manager;
 
-import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
 import static com.google.common.truth.Truth.assertThat;
+import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.app.Activity;
 import android.content.Context;
 import android.content.ContextWrapper;
@@ -30,6 +28,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;

File: library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
Patch:
@@ -5,8 +5,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
@@ -20,6 +18,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.List;

File: library/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
Patch:
@@ -12,8 +12,6 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.os.Handler;
 
 import com.bumptech.glide.request.target.SizeReadyCallback;
@@ -23,6 +21,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CancellationException;

File: library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
Patch:
@@ -14,8 +14,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
@@ -38,6 +36,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;

File: library/src/test/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java
Patch:
@@ -6,8 +6,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.appwidget.AppWidgetManager;
 import android.content.ComponentName;
 import android.graphics.Bitmap;
@@ -16,6 +14,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;

File: library/src/test/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
Patch:
@@ -2,15 +2,14 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 import android.widget.ImageView;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
Patch:
@@ -2,8 +2,6 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.graphics.drawable.BitmapDrawable;
@@ -14,6 +12,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
Patch:
@@ -8,8 +8,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
@@ -20,6 +18,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
Patch:
@@ -5,8 +5,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.app.Notification;
 import android.app.NotificationManager;
 import android.content.Context;
@@ -16,6 +14,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;

File: library/src/test/java/com/bumptech/glide/request/target/PreloadTargetTest.java
Patch:
@@ -4,8 +4,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.request.Request;
 
@@ -14,6 +12,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.bumptech.glide.request.target;
 
+import static com.google.common.truth.Truth.assertThat;
 import static android.view.ViewGroup.LayoutParams;
 import static android.view.ViewTreeObserver.OnPreDrawListener;
-import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.mockito.Matchers.anyInt;
@@ -13,8 +13,6 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.Context;
 import android.graphics.drawable.Drawable;
 import android.view.View;
@@ -28,6 +26,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;

File: library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
Patch:
@@ -4,13 +4,12 @@
 import static org.junit.Assert.assertNotEquals;
 import static org.mockito.Mockito.mock;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.drawable.Drawable;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
Patch:
@@ -9,8 +9,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
@@ -20,6 +18,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
Patch:
@@ -8,15 +8,14 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.Context;
 import android.view.animation.Animation;
 import android.widget.ImageView;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java
Patch:
@@ -9,14 +9,13 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.view.View;
 import android.widget.ImageView;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
Patch:
@@ -3,15 +3,14 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.testutil.TestResourceUtil;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.IOException;

File: library/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
Patch:
@@ -2,14 +2,13 @@
 
 import static org.junit.Assert.assertNotNull;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.tests.KeyAssertions;
 
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
Patch:
@@ -6,13 +6,12 @@
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.io.IOException;

File: library/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
Patch:
@@ -2,10 +2,9 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import org.robolectric.RobolectricTestRunner;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/util/UtilTest.java
Patch:
@@ -2,12 +2,11 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
Patch:
@@ -3,14 +3,13 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertNull;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.view.View;
 import android.view.ViewGroup;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
Patch:
@@ -3,15 +3,14 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.testutil.TestUtil;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 

File: samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerViewFragment.java
Patch:
@@ -60,7 +60,7 @@ public void onLoadFinished(Loader<List<MediaStoreData>> loader,
         new ListPreloader<>(requestManager, adapter, adapter, 3);
     RecyclerViewPreloaderListener recyclerViewPreloaderListener =
         new RecyclerViewPreloaderListener(preloader);
-    recyclerView.setOnScrollListener(recyclerViewPreloaderListener);
+    recyclerView.addOnScrollListener(recyclerViewPreloaderListener);
     recyclerView.setAdapter(adapter);
   }
 

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java
Patch:
@@ -43,7 +43,7 @@ public class VideoBitmapDecoder implements ResourceDecoder<ParcelFileDescriptor,
         public void update(byte[] keyBytes, Long value, MessageDigest messageDigest) {
           messageDigest.update(keyBytes);
           synchronized (buffer) {
-            buffer.rewind();
+            buffer.position(0);
             messageDigest.update(buffer.putLong(value).array());
           }
         }

File: library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java
Patch:
@@ -17,7 +17,7 @@ public ByteBufferRewinder(ByteBuffer buffer) {
 
   @Override
   public ByteBuffer rewindAndGet() throws IOException {
-    buffer.rewind();
+    buffer.position(0);
     return buffer;
   }
 

File: library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
Patch:
@@ -102,7 +102,7 @@ public static byte[] toBytes(ByteBuffer byteBuffer) {
     } else {
       ByteBuffer toCopy = byteBuffer.asReadOnlyBuffer();
       result = new byte[toCopy.limit()];
-      toCopy.rewind();
+      toCopy.position(0);
       toCopy.get(result);
     }
     return result;

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
Patch:
@@ -400,7 +400,7 @@ public synchronized void setData(GifHeader header, ByteBuffer buffer, int sample
     framePointer = INITIAL_FRAME_POINTER;
     // Initialize the raw data buffer.
     rawData = buffer.asReadOnlyBuffer();
-    rawData.rewind();
+    rawData.position(0);
     rawData.order(ByteOrder.LITTLE_ENDIAN);
 
     // No point in specially saving an old frame if we're never going to use it.

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java
Patch:
@@ -33,7 +33,7 @@ public class GifHeaderParser {
   public GifHeaderParser setData(ByteBuffer data) {
     reset();
     rawData = data.asReadOnlyBuffer();
-    rawData.rewind();
+    rawData.position(0);
     rawData.order(ByteOrder.LITTLE_ENDIAN);
     return this;
   }

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
Patch:
@@ -122,7 +122,7 @@ int getHeight() {
 
   List<Class<?>> getRegisteredResourceClasses() {
     return glideContext.getRegistry()
-        .getRegisteredResourceClasses(model.getClass(), resourceClass);
+        .getRegisteredResourceClasses(model.getClass(), resourceClass, transcodeClass);
   }
 
   <Data> LoadPath<Data, ?, Transcode> getLoadPath(Class<Data> dataClass) {

File: library/src/androidTest/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -33,7 +33,6 @@
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.data.DataFetcher;
-import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.engine.cache.MemoryCache;

File: library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -3,8 +3,8 @@
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -5,7 +5,6 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.isA;
 import static org.mockito.Matchers.isNull;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
Patch:
@@ -4,8 +4,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -56,7 +56,6 @@ public class GifFrameLoaderTest {
   @Mock RequestManager requestManager;
   private GifFrameLoader loader;
   private RequestBuilder<Bitmap> requestBuilder;
-  private ByteBuffer byteBuffer;
   private Bitmap firstFrame;
 
   @SuppressWarnings("unchecked")
@@ -67,7 +66,7 @@ public void setUp() {
 
     firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
 
-    byteBuffer = ByteBuffer.allocate(10);
+    ByteBuffer byteBuffer = ByteBuffer.allocate(10);
     when(gifDecoder.getData()).thenReturn(byteBuffer);
 
     requestBuilder = mock(RequestBuilder.class, new ReturnsSelfAnswer());

File: library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java
Patch:
@@ -93,6 +93,9 @@ public DataSource getDataSource() {
     }
   }
 
+  /**
+   * {@link ModelLoaderFactory} for {@link MediaStoreFileLoader}s.
+   */
   public static final class Factory implements ModelLoaderFactory<Uri, File> {
 
     @Override

File: library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.bumptech.glide;
 
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
-import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -55,7 +55,7 @@ public void testAddsNewRequestToRequestTracker() {
     Target target = mock(Target.class);
     getNullModelRequest().into(target);
 
-    verify(requestManager).track(eq(target), any(Request.class));
+    verify(requestManager).track(eq(target), isA(Request.class));
   }
 
   @Test
@@ -103,7 +103,7 @@ public void runTest() throws Exception {
   }
 
   private RequestBuilder getNullModelRequest() {
-    when(glideContext.buildImageViewTarget(any(ImageView.class), any(Class.class)))
+    when(glideContext.buildImageViewTarget(isA(ImageView.class), isA(Class.class)))
         .thenReturn(mock(Target.class));
     when(glideContext.getOptions()).thenReturn(new RequestOptions());
     return new RequestBuilder(glideContext, requestManager, Object.class)

File: library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -3,7 +3,7 @@
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -48,7 +48,7 @@ public void setUp() {
     MockitoAnnotations.initMocks(this);
     connectivityMonitor = mock(ConnectivityMonitor.class);
     ConnectivityMonitorFactory factory = mock(ConnectivityMonitorFactory.class);
-    when(factory.build(any(Context.class), any(ConnectivityMonitor.ConnectivityListener.class)))
+    when(factory.build(isA(Context.class), isA(ConnectivityMonitor.ConnectivityListener.class)))
         .thenAnswer(new Answer<ConnectivityMonitor>() {
           @Override
           public ConnectivityMonitor answer(InvocationOnMock invocation) throws Throwable {

File: library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
Patch:
@@ -126,8 +126,8 @@ private static int getSampleSize(GifHeader gifHeader, int targetWidth, int targe
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
       Log.v(TAG, "Downsampling gif"
           + ", sampleSize: " + sampleSize
-          + ", target dimens: [" + targetWidth + "x" + targetHeight
-          + ", actual dimens: [" + gifHeader.getWidth() + "x" + gifHeader.getHeight());
+          + ", target dimens: [" + targetWidth + "x" + targetHeight + "]"
+          + ", actual dimens: [" + gifHeader.getWidth() + "x" + gifHeader.getHeight() + "]");
     }
     return sampleSize;
   }

File: library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
Patch:
@@ -61,16 +61,18 @@ public boolean startNext() {
     }
 
     fetcher = null;
+    boolean started = false;
     while (fetcher == null && hasNextModelLoader()) {
       ModelLoader<File, ?> modelLoader = modelLoaders.get(modelLoaderIndex++);
       fetcher =
           modelLoader.buildLoadData(cacheFile, helper.getWidth(), helper.getHeight(),
               helper.getOptions()).fetcher;
       if (fetcher != null) {
+        started = true;
         fetcher.loadData(helper.getPriority(), this);
       }
     }
-    return fetcher != null;
+    return started;
   }
 
   private boolean hasNextModelLoader() {

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -247,8 +247,7 @@ private void runGenerators() {
       generator = getNextGenerator();
 
       if (stage == Stage.SOURCE) {
-        runReason = RunReason.SWITCH_TO_SOURCE_SERVICE;
-        callback.reschedule(this);
+        reschedule();
         return;
       }
     }

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
Patch:
@@ -64,17 +64,19 @@ public boolean startNext() {
     }
 
     fetcher = null;
+    boolean started = false;
     while (fetcher == null && hasNextModelLoader()) {
       ModelLoader<File, ?> modelLoader = modelLoaders.get(modelLoaderIndex++);
       fetcher =
           modelLoader.buildLoadData(cacheFile, helper.getWidth(), helper.getHeight(),
               helper.getOptions()).fetcher;
       if (fetcher != null) {
+        started = true;
         fetcher.loadData(helper.getPriority(), this);
       }
     }
 
-    return fetcher != null;
+    return started;
   }
 
   private boolean hasNextModelLoader() {

File: library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java
Patch:
@@ -50,13 +50,15 @@ public boolean startNext() {
     sourceCacheGenerator = null;
 
     loadData = null;
+    boolean started = false;
     while (loadData == null && hasNextModelLoader()) {
       loadData = helper.getLoadData().get(loadDataListIndex++);
       if (loadData != null) {
+        started = true;
         loadData.fetcher.loadData(helper.getPriority(), this);
       }
     }
-    return loadData != null;
+    return started;
   }
 
   private boolean hasNextModelLoader() {

File: library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
Patch:
@@ -22,7 +22,7 @@ public class GlideExecutor extends ThreadPoolExecutor {
    * @param poolSize The number of threads.
    */
   public GlideExecutor(int poolSize) {
-    this(poolSize, UncaughtThrowableStrategy.THROW);
+    this(poolSize, UncaughtThrowableStrategy.LOG);
   }
 
   /**
@@ -48,7 +48,7 @@ public GlideExecutor(int poolSize,
    */
   public GlideExecutor(String name, int poolSize) {
     this(poolSize, poolSize, 0, TimeUnit.MILLISECONDS, new DefaultThreadFactory(name),
-        UncaughtThrowableStrategy.THROW);
+        UncaughtThrowableStrategy.LOG);
   }
 
   public GlideExecutor(int corePoolSize, int maximumPoolSize, long keepAlive,

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -572,6 +572,7 @@ private Request obtainRequest(Target<TranscodeType> target,
         requestOptions,
         overrideWidth,
         overrideHeight,
+        priority,
         target,
         requestListener,
         requestCoordinator,

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
Patch:
@@ -17,6 +17,7 @@ class ResourceCacheGenerator implements DataFetcherGenerator,
     DataFetcher.DataCallback<Object> {
 
   private final FetcherReadyCallback cb;
+  private final DecodeHelper<?> helper;
 
   private int sourceIdIndex = 0;
   private int resourceClassIndex = -1;
@@ -28,7 +29,6 @@ class ResourceCacheGenerator implements DataFetcherGenerator,
   // multiple calls to startNext.
   @SuppressWarnings("PMD.SingularField")
   private File cacheFile;
-  private DecodeHelper<?> helper;
 
   public ResourceCacheGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {
     this.helper = helper;

File: library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
Patch:
@@ -17,7 +17,7 @@ public class GlideExecutor extends ThreadPoolExecutor {
 
   /**
    * Constructor to build a fixed thread pool with the given pool size using
-   * {@link * com.bumptech.glide.load.engine.executor.GlideExecutor.DefaultThreadFactory}.
+   * {@link com.bumptech.glide.load.engine.executor.GlideExecutor.DefaultThreadFactory}.
    *
    * @param poolSize The number of threads.
    */
@@ -27,7 +27,7 @@ public GlideExecutor(int poolSize) {
 
   /**
    * Constructor to build a fixed thread pool with the given pool size using
-   * {@link * com.bumptech.glide.load.engine.executor.GlideExecutor.DefaultThreadFactory}.
+   * {@link com.bumptech.glide.load.engine.executor.GlideExecutor.DefaultThreadFactory}.
    *
    * @param poolSize The number of threads.
    * @param uncaughtThrowableStrategy Dictates how the pool should handle uncaught and unexpected

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -419,6 +419,7 @@ public static void clear(Target<?> target) {
         Request request = target.getRequest();
         if (request != null) {
             request.clear();
+            target.setRequest(null);
         }
     }
 

File: library/src/main/java/com/bumptech/glide/RequestBuilder.java
Patch:
@@ -321,7 +321,7 @@ public RequestBuilder<TranscodeType> clone() {
    *
    * @param target The target to load the resource into.
    * @return The given target.
-   * @see {@link #requestManager
+   * @see RequestManager#clear(Target)
    */
   public <Y extends Target<TranscodeType>> Y into(Y target) {
     Util.assertMainThread();

File: library/src/main/java/com/bumptech/glide/request/target/BaseTarget.java
Patch:
@@ -10,7 +10,7 @@
  *
  * <p> For maximum efficiency, clear this target when you have finished using or displaying the
  * {@link com.bumptech.glide.load.engine.Resource} loaded into it using
- * {@link com.bumptech.glide.Glide#clear(Target)}.</p>
+ * {@link com.bumptech.glide.RequestManager#clear(Target)}.</p>
  *
  * <p> For loading {@link com.bumptech.glide.load.engine.Resource}s into {@link android.view.View}s,
  * {@link com.bumptech.glide.request.target.ViewTarget} or

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
Patch:
@@ -151,7 +151,7 @@ public synchronized Bitmap getDirty(int width, int height, Bitmap.Config config)
 
     @Override
     public void clearMemory() {
-        if (Log.isLoggable(TAG, Log.VERBOSE)) {
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
             Log.d(TAG, "clearMemory");
         }
         trimToSize(0);
@@ -160,7 +160,7 @@ public void clearMemory() {
     @SuppressLint("InlinedApi")
     @Override
     public void trimMemory(int level) {
-        if (Log.isLoggable(TAG, Log.VERBOSE)) {
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
             Log.d(TAG, "trimMemory, level=" + level);
         }
         if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {

File: library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
Patch:
@@ -31,6 +31,7 @@ public BitmapPreFiller(MemoryCache memoryCache, BitmapPool bitmapPool, DecodeFor
         this.defaultFormat = defaultFormat;
     }
 
+    @SuppressWarnings("deprecation")
     public void preFill(PreFillType.Builder... bitmapAttributeBuilders) {
         if (current != null) {
             current.cancel();

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -188,6 +188,7 @@ private int getRoundedSampleSize(int degreesToRotate, int inWidth, int inHeight,
         if (degreesToRotate == 90 || degreesToRotate == 270) {
             // If we're rotating the image +-90 degrees, we need to downsample accordingly so the image width is
             // decreased to near our target's height and the image height is decreased to near our target width.
+            //noinspection SuspiciousNameCombination
             exactSampleSize = getSampleSize(inHeight, inWidth, targetWidth, targetHeight);
         } else {
             exactSampleSize = getSampleSize(inWidth, inHeight, targetWidth, targetHeight);
@@ -247,6 +248,7 @@ private static boolean shouldUsePool(InputStream is) {
         return false;
     }
 
+    @SuppressWarnings("deprecation")
     private static Bitmap.Config getConfig(InputStream is, DecodeFormat format) {
         // Changing configs can cause skewing on 4.1, see issue #128.
         if (format == DecodeFormat.ALWAYS_ARGB_8888 || format == DecodeFormat.PREFER_ARGB_8888

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
Patch:
@@ -151,7 +151,7 @@ public synchronized Bitmap getDirty(int width, int height, Bitmap.Config config)
 
     @Override
     public void clearMemory() {
-        if (Log.isLoggable(TAG, Log.VERBOSE)) {
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
             Log.d(TAG, "clearMemory");
         }
         trimToSize(0);
@@ -160,7 +160,7 @@ public void clearMemory() {
     @SuppressLint("InlinedApi")
     @Override
     public void trimMemory(int level) {
-        if (Log.isLoggable(TAG, Log.VERBOSE)) {
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
             Log.d(TAG, "trimMemory, level=" + level);
         }
         if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {

File: library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
Patch:
@@ -31,6 +31,7 @@ public BitmapPreFiller(MemoryCache memoryCache, BitmapPool bitmapPool, DecodeFor
         this.defaultFormat = defaultFormat;
     }
 
+    @SuppressWarnings("deprecation")
     public void preFill(PreFillType.Builder... bitmapAttributeBuilders) {
         if (current != null) {
             current.cancel();

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -188,6 +188,7 @@ private int getRoundedSampleSize(int degreesToRotate, int inWidth, int inHeight,
         if (degreesToRotate == 90 || degreesToRotate == 270) {
             // If we're rotating the image +-90 degrees, we need to downsample accordingly so the image width is
             // decreased to near our target's height and the image height is decreased to near our target width.
+            //noinspection SuspiciousNameCombination
             exactSampleSize = getSampleSize(inHeight, inWidth, targetWidth, targetHeight);
         } else {
             exactSampleSize = getSampleSize(inWidth, inHeight, targetWidth, targetHeight);
@@ -247,6 +248,7 @@ private static boolean shouldUsePool(InputStream is) {
         return false;
     }
 
+    @SuppressWarnings("deprecation")
     private static Bitmap.Config getConfig(InputStream is, DecodeFormat format) {
         // Changing configs can cause skewing on 4.1, see issue #128.
         if (format == DecodeFormat.ALWAYS_ARGB_8888 || format == DecodeFormat.PREFER_ARGB_8888

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
Patch:
@@ -45,7 +45,8 @@ public void setUp() throws Exception {
     options = new Options();
     DisplayMetrics displayMetrics =
         RuntimeEnvironment.application.getResources().getDisplayMetrics();
-    when(byteArrayPool.get(anyInt())).thenReturn(new byte[ByteArrayPool.DEFAULT_BUFFER]);
+    when(byteArrayPool.get(anyInt()))
+        .thenReturn(new byte[ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);
     downsampler = new Downsampler(displayMetrics, bitmapPool, byteArrayPool);
   }
 

File: library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java
Patch:
@@ -26,7 +26,7 @@ public StreamEncoder(ByteArrayPool byteArrayPool) {
 
   @Override
   public boolean encode(InputStream data, File file, Options options) {
-    byte[] buffer = byteArrayPool.get(ByteArrayPool.DEFAULT_BUFFER);
+    byte[] buffer = byteArrayPool.get(ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES);
     boolean success = false;
     OutputStream os = null;
     try {

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -135,7 +135,7 @@ public Resource<Bitmap> decode(InputStream is, int requestedWidth, int requested
     Preconditions.checkArgument(is.markSupported(), "You must provide an InputStream that supports"
         + " mark()");
 
-    byte[] bytesForOptions = byteArrayPool.get(ByteArrayPool.DEFAULT_BUFFER);
+    byte[] bytesForOptions = byteArrayPool.get(ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES);
     BitmapFactory.Options bitmapFactoryOptions = getDefaultOptions();
     bitmapFactoryOptions.inTempStorage = bytesForOptions;
 

File: library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java
Patch:
@@ -7,8 +7,6 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.request.target.SizeReadyCallback;
@@ -21,6 +19,7 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.mockito.verification.VerificationMode;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;

File: library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java
Patch:
@@ -7,8 +7,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.widget.ImageView;
 
 import com.bumptech.glide.request.Request;
@@ -21,6 +19,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/androidTest/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
Patch:
@@ -7,8 +7,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.content.Context;
 
 import com.bumptech.glide.Registry.NoModelLoaderAvailableException;
@@ -21,6 +19,7 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
@@ -37,7 +36,7 @@ public class MultiModelLoaderFactoryTest {
   @Mock ModelLoaderFactory<String, String> secondFactory;
   @Mock ModelLoader<String, String> secondModelLoader;
 
-  public @Rule ExpectedException exception = ExpectedException.none();
+  @Rule public ExpectedException exception = ExpectedException.none();
 
   private MultiModelLoaderFactory multiFactory;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
Patch:
@@ -15,7 +15,6 @@
 import static org.mockito.Mockito.when;
 
 import com.google.common.testing.EqualsTester;
-import org.robolectric.RobolectricTestRunner;
 
 import android.graphics.Bitmap;
 import android.os.Handler;
@@ -40,6 +39,7 @@
 import org.mockito.InOrder;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/androidTest/java/com/bumptech/glide/request/RequestFutureTargetTest.java
Patch:
@@ -12,8 +12,6 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.os.Handler;
 
 import com.bumptech.glide.request.target.SizeReadyCallback;
@@ -23,6 +21,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CancellationException;

File: library/src/androidTest/java/com/bumptech/glide/request/target/PreloadTargetTest.java
Patch:
@@ -4,8 +4,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-import org.robolectric.RobolectricTestRunner;
-
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.request.Request;
 
@@ -14,6 +12,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
Patch:
@@ -28,7 +28,6 @@ class DataCacheGenerator implements DataFetcherGenerator,
   private List<ModelLoader<File, ?>> modelLoaders;
   private int modelLoaderIndex;
   private volatile DataFetcher<?> fetcher;
-  private File cacheFile;
 
   public DataCacheGenerator(List<Key> sourceIds, int width, int height, DiskCache diskCache,
       RequestContext<?, ?> requestContext, FetcherReadyCallback cb) {
@@ -42,6 +41,7 @@ public DataCacheGenerator(List<Key> sourceIds, int width, int height, DiskCache
 
   @Override
   public boolean startNext() {
+    File cacheFile = null;
     while (modelLoaders == null || !hasNextModelLoader()) {
       sourceIdIndex++;
       if (sourceIdIndex >= sourceIds.size()) {

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
Patch:
@@ -29,7 +29,6 @@ class ResourceCacheGenerator implements DataFetcherGenerator,
   private List<ModelLoader<File, ?>> modelLoaders;
   private int modelLoaderIndex;
   private volatile DataFetcher<?> fetcher;
-  private File cacheFile;
 
   public ResourceCacheGenerator(int width, int height, DiskCache diskCache,
       RequestContext<?, ?> requestContext, FetcherReadyCallback cb) {
@@ -44,6 +43,7 @@ public ResourceCacheGenerator(int width, int height, DiskCache diskCache,
   public boolean startNext() {
     List<Key> sourceIds = requestContext.getCacheKeys();
     List<Class<?>> resourceClasses = requestContext.getRegisteredResourceClasses();
+    File cacheFile = null;
     while (modelLoaders == null || !hasNextModelLoader()) {
       resourceClassIndex++;
       if (resourceClassIndex >= resourceClasses.size()) {

File: library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java
Patch:
@@ -32,8 +32,8 @@ class SourceGenerator<Model> implements DataFetcherGenerator,
   private final RequestContext<Model, ?> requestContext;
   private final DiskCache diskCache;
   private final FetcherReadyCallback cb;
+  private final List<LoadData<?>> loadDataList;
 
-  private List<LoadData<?>> loadDataList;
   private int loadDataListIndex;
   private DataCacheGenerator sourceCacheGenerator;
   private Object dataToCache;

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -89,8 +89,8 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 
     final FixedPreloadSizeProvider<Photo> preloadSizeProvider =
         new FixedPreloadSizeProvider<Photo>(photoSize, photoSize);
-    final ListPreloader<Photo> preloader =
-        new ListPreloader<Photo>(adapter, preloadSizeProvider, args.getInt(PRELOAD_KEY));
+    final ListPreloader<Photo> preloader = new ListPreloader<Photo>(Glide.with(this), adapter,
+        preloadSizeProvider, args.getInt(PRELOAD_KEY));
     grid.setOnScrollListener(preloader);
 
     if (currentPhotos != null) {

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
Patch:
@@ -64,8 +64,8 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
     list.setAdapter(adapter);
 
     preloadSizeProvider = new ViewPreloadSizeProvider<Photo>();
-    ListPreloader<Photo> preloader =
-        new ListPreloader<Photo>(adapter, preloadSizeProvider, PRELOAD_AHEAD_ITEMS);
+    ListPreloader<Photo> preloader = new ListPreloader<Photo>(Glide.with(this), adapter,
+        preloadSizeProvider, PRELOAD_AHEAD_ITEMS);
     list.setOnScrollListener(preloader);
 
     if (currentPhotos != null) {

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -387,7 +387,7 @@ public void run() {
             Log.d(TAG, "Got ExecutionException waiting for background downloadOnly", e);
           }
         }
-        Glide.clear(futureTarget);
+        futureTarget.cancel(true /*mayInterruptIfRunning*/);
       }
     }
   }

File: samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
Patch:
@@ -52,7 +52,7 @@ protected void onCreate(Bundle savedInstanceState) {
     adapter = new GifAdapter(this, gifItemRequest, preloadSizeProvider);
     gifList.setAdapter(adapter);
     ListPreloader<Api.GifResult> preloader =
-        new ListPreloader<Api.GifResult>(adapter, preloadSizeProvider, 2);
+        new ListPreloader<Api.GifResult>(Glide.with(this), adapter, preloadSizeProvider, 2);
     gifList.setOnScrollListener(preloader);
   }
 

File: samples/svg/src/main/java/com/bumptech/svgsample/app/MainActivity.java
Patch:
@@ -52,8 +52,8 @@ protected void onStart() {
 
   public void clearCache(View v) {
     Log.w(TAG, "clearing cache");
-    Glide.clear(imageViewRes);
-    Glide.clear(imageViewNet);
+    Glide.with(this).clear(imageViewRes);
+    Glide.with(this).clear(imageViewNet);
     Glide.get(this).clearMemory();
     File cacheDir = Glide.getPhotoCacheDir(this);
     if (cacheDir.isDirectory()) {

File: library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java
Patch:
@@ -20,6 +20,8 @@ public List<Class<?>> get(Class<?> modelClass, Class<?> resourceClass) {
     MultiClassKey key = resourceClassKeyRef.getAndSet(null);
     if (key == null) {
       key = new MultiClassKey(modelClass, resourceClass);
+    } else {
+      key.set(modelClass, resourceClass);
     }
     final List<Class<?>> result;
     synchronized (registeredResourceClassCache) {

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -137,7 +137,8 @@ public void begin() {
       target.getSize(this);
     }
 
-    if (!isComplete() && !isFailed() && canNotifyStatusChanged()) {
+    if ((status == Status.RUNNING || status == Status.WAITING_FOR_SIZE)
+        && canNotifyStatusChanged()) {
       target.onLoadStarted(requestContext.getPlaceholderDrawable());
     }
     if (Log.isLoggable(TAG, Log.VERBOSE)) {

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -74,6 +74,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         .asDrawable()
         .transition(withCrossFade(R.anim.fade_in, 150))
         .apply(diskCacheStrategyOf(DiskCacheStrategy.DATA)
+            .centerCrop(getActivity())
             .override(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE));
 
     preloadRequest =

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -248,7 +248,7 @@ private Resource<Z> transcode(Resource<T> transformed) {
     }
 
     private void logWithTimeAndKey(String message, long startTime) {
-        Log.v(TAG, message + " in " + LogTime.getElapsedMillis(startTime) + resultKey);
+        Log.v(TAG, message + " in " + LogTime.getElapsedMillis(startTime) + ", key: " + resultKey);
     }
 
     class SourceWriter<DataType> implements DiskCache.Writer {

File: integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
Patch:
@@ -17,7 +17,6 @@
  * Fetches an {@link InputStream} using the okhttp library.
  */
 public class OkHttpStreamFetcher implements DataFetcher<InputStream> {
-    private static final String CONTENT_LENGTH_HEADER = "Content-Length";
     private final OkHttpClient client;
     private final GlideUrl url;
     private InputStream stream;
@@ -43,7 +42,7 @@ public InputStream loadData(Priority priority) throws Exception {
             throw new IOException("Request failed with code: " + response.code());
         }
 
-        String contentLength = response.header(CONTENT_LENGTH_HEADER);
+        long contentLength = responseBody.contentLength();
         stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);
         return stream;
     }

File: library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
Patch:
@@ -10,7 +10,6 @@
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
Patch:
@@ -2,10 +2,9 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import org.robolectric.RobolectricTestRunner;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
Patch:
@@ -4,8 +4,6 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 
@@ -19,6 +17,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java
Patch:
@@ -18,11 +18,11 @@
  *  number of threads interested in each lock is updated atomically so that when the count reaches
  *  0, the lock can safely be removed from the map. </p>
  */
-public final class DiskCacheWriteLocker {
+final class DiskCacheWriteLocker {
   private final Map<Key, WriteLock> locks = new HashMap<>();
   private final WriteLockPool writeLockPool = new WriteLockPool();
 
-  public void acquire(Key key) {
+  void acquire(Key key) {
     WriteLock writeLock;
     synchronized (this) {
       writeLock = locks.get(key);
@@ -36,7 +36,7 @@ public void acquire(Key key) {
     writeLock.lock.lock();
   }
 
-  public void release(Key key) {
+  void release(Key key) {
     WriteLock writeLock;
     synchronized (this) {
       writeLock = Preconditions.checkNotNull(locks.get(key));

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -239,7 +239,7 @@ static void calculateScaling(DownsampleStrategy downsampleStrategy, int degreesT
         : Math.min(widthScaleFactor, heightScaleFactor);
 
     int powerOfTwoSampleSize = Math.max(1, Integer.highestOneBit(scaleFactor));
-    if (rounding == SampleSizeRounding.MEMORY && powerOfTwoSampleSize < exactScaleFactor) {
+    if (rounding == SampleSizeRounding.MEMORY && powerOfTwoSampleSize < (1.f / exactScaleFactor)) {
       powerOfTwoSampleSize = powerOfTwoSampleSize << 1;
     }
 

File: library/src/main/java/com/bumptech/glide/GlideBuilder.java
Patch:
@@ -189,7 +189,7 @@ Glide createGlide() {
         }
 
         if (diskCacheFactory == null) {
-            diskCacheFactory = new InternalCacheDiskCacheFactory(context, Glide.DEFAULT_DISK_CACHE_SIZE);
+            diskCacheFactory = new InternalCacheDiskCacheFactory(context);
         }
 
         if (engine == null) {

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -130,8 +130,8 @@ public Resource<Z> decodeFromSource() throws Exception {
     }
 
     public void cancel() {
-        fetcher.cancel();
         isCancelled = true;
+        fetcher.cancel();
     }
 
     private Resource<Z> transformEncodeAndTranscode(Resource<T> decoded) {

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/CircleCrop.java
Patch:
@@ -12,10 +12,10 @@
  * A Glide {@link BitmapTransformation} to circle crop an image.  Behaves similar to a
  * {@link FitCenter} transform, but the resulting image is masked to a circle.
  *
- * <p> Uses a PorterDuff blend mode, , seehttp://ssp.impulsetrain.com/porterduff.html. </p>
+ * <p> Uses a PorterDuff blend mode, see http://ssp.impulsetrain.com/porterduff.html. </p>
  */
 public class CircleCrop extends BitmapTransformation {
-  private static final String ID = "com.google.android.apps.photos.accountswitcher.CircleCrop";
+  private static final String ID = "com.bumptech.glide.load.resource.bitmap.CircleCrop";
   private static final byte[] ID_BYTES = ID.getBytes(CHARSET);
 
   public CircleCrop(Context context) {

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -208,9 +208,6 @@ private Bitmap downsampleWithSize(MarkEnforcingInputStream is, RecyclableBuffere
         Bitmap.Config config = getConfig(is, decodeFormat);
         options.inSampleSize = sampleSize;
         options.inPreferredConfig = config;
-        if (options.inPreferredConfig != Bitmap.Config.ARGB_8888) {
-            options.inDither = true;
-        }
         if ((options.inSampleSize == 1 || Build.VERSION_CODES.KITKAT <= Build.VERSION.SDK_INT) && shouldUsePool(is)) {
             int targetWidth = (int) Math.ceil(inWidth / (double) sampleSize);
             int targetHeight = (int) Math.ceil(inHeight / (double) sampleSize);

File: library/src/main/java/com/bumptech/glide/request/GenericRequest.java
Patch:
@@ -417,7 +417,7 @@ public void onSizeReady(int width, int height) {
         final DataFetcher<T> dataFetcher = modelLoader.getResourceFetcher(model, width, height);
 
         if (dataFetcher == null) {
-            onException(new Exception("Failed to load model: " + model));
+            onException(new Exception("Failed to load model: \'" + model + "\'"));
             return;
         }
         ResourceTranscoder<Z, R> transcoder = loadProvider.getTranscoder();

File: library/src/main/java/com/bumptech/glide/request/GenericRequest.java
Patch:
@@ -417,7 +417,7 @@ public void onSizeReady(int width, int height) {
         final DataFetcher<T> dataFetcher = modelLoader.getResourceFetcher(model, width, height);
 
         if (dataFetcher == null) {
-            onException(new Exception("Got null fetcher from model loader"));
+            onException(new Exception("Failed to load model: " + model));
             return;
         }
         ResourceTranscoder<Z, R> transcoder = loadProvider.getTranscoder();

File: integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java
Patch:
@@ -9,7 +9,6 @@
 import com.bumptech.glide.gifdecoder.GifHeaderParser;
 import com.bumptech.glide.gifencoder.AnimatedGifEncoder;
 import com.bumptech.glide.load.EncodeStrategy;
-import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Option;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceEncoder;
@@ -51,9 +50,9 @@ public class ReEncodingGifResourceEncoder implements ResourceEncoder<GifDrawable
   public static final Option<Boolean> ENCODE_TRANSFORMATION =
       Option.disk(KEY_ENCODE_TRANSFORMATION, false, new Option.CacheKeyUpdater<Boolean>() {
         @Override
-        public void update(String key, Boolean value, MessageDigest messageDigest) {
+        public void update(byte[] keyBytes, Boolean value, MessageDigest messageDigest) {
           if (value) {
-            messageDigest.update(KEY_ENCODE_TRANSFORMATION.getBytes(Key.CHARSET));
+            messageDigest.update(keyBytes);
           }
         }
       });

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
Patch:
@@ -3,8 +3,6 @@
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.annotation.TargetApi;
 import android.content.Context;
 import android.graphics.Bitmap;
@@ -16,11 +14,11 @@
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 
 import org.junit.Before;
-import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
Patch:
@@ -2,8 +2,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 
 import com.bumptech.glide.load.DecodeFormat;
@@ -16,6 +14,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java
Patch:
@@ -11,7 +11,7 @@
  * <p>This class assumes that the wrapped stream contains an image format that can contain
  * exif information and performs no verification. </p>
  */
-public class ExifOrientationStream extends FilterInputStream {
+public final class ExifOrientationStream extends FilterInputStream {
   /** Allow two bytes for the file format. */
   private static final int SEGMENT_START_POSITION = 2;
   private static final byte[] EXIF_SEGMENT = new byte[] {
@@ -29,7 +29,7 @@ public class ExifOrientationStream extends FilterInputStream {
       0x66,
       0x00,
       0x00,
-      /** mototorola byte order (big endian). */
+      /** motorola byte order (big endian). */
       (byte) 0x4D,
       (byte) 0x4D,
       /** filler? */

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -67,11 +67,12 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 
     fullRequest = Glide.with(this)
         .asDrawable()
-        .apply(centerCropTransform(getActivity()))
-        .transition(withCrossFade(R.anim.fade_in, 150));
+        .transition(withCrossFade(R.anim.fade_in, 150))
+        .apply(centerCropTransform(getActivity()));
 
     thumbnailRequest = Glide.with(this)
         .asDrawable()
+        .transition(withCrossFade(R.anim.fade_in, 150))
         .apply(diskCacheStrategyOf(DiskCacheStrategy.DATA)
             .override(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE));
 

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -67,6 +67,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         thumbnailRequest = Glide.with(this)
                 .from(Photo.class)
                 .diskCacheStrategy(DiskCacheStrategy.SOURCE)
+                .crossFade(R.anim.fade_in, 150)
                 .override(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE);
 
         preloadRequest = thumbnail ? thumbnailRequest.clone().priority(Priority.HIGH) : fullRequest;

File: library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
Patch:
@@ -201,7 +201,9 @@ private synchronized R doGet(Long timeoutMillis)
    */
   @Override
   public void run() {
-    request.clear();
+    if (request != null) {
+      request.clear();
+    }
   }
 
   /**

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
Patch:
@@ -343,10 +343,9 @@ public long skip(long total) throws IOException {
                 return 0;
             }
 
-            long skipped;
             long toSkip = total;
             while (toSkip > 0) {
-                skipped = is.skip(toSkip);
+                long skipped = is.skip(toSkip);
                 if (skipped > 0) {
                     toSkip -= skipped;
                 } else {

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
Patch:
@@ -5,12 +5,11 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -14,8 +14,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
@@ -38,6 +36,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
Patch:
@@ -15,7 +15,6 @@
 import static org.mockito.Mockito.when;
 
 import com.google.common.testing.EqualsTester;
-import org.robolectric.RobolectricTestRunner;
 
 import android.graphics.Bitmap;
 import android.os.Handler;
@@ -39,6 +38,7 @@
 import org.mockito.InOrder;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
@@ -51,7 +51,8 @@ public class GifFrameLoaderTest {
 
   @Mock GifFrameLoader.FrameCallback callback;
   @Mock GifDecoder gifDecoder;
-  @Mock Handler handler;
+  @Mock
+  Handler handler;
   @Mock Transformation<Bitmap> transformation;
   private GifFrameLoader loader;
   private RequestBuilder<Bitmap> requestBuilder;

File: library/src/main/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor.java
Patch:
@@ -1,7 +1,5 @@
 package com.bumptech.glide.load.engine.executor;
 
-import java.util.concurrent.CancellationException;
-import java.util.concurrent.ExecutionException;
 import java.util.concurrent.FutureTask;
 import java.util.concurrent.PriorityBlockingQueue;
 import java.util.concurrent.RunnableFuture;

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -355,6 +355,7 @@ public static void clear(Target<?> target) {
     Request request = target.getRequest();
     if (request != null) {
       request.clear();
+      target.setRequest(null);
     }
   }
 
@@ -366,6 +367,7 @@ public static void clear(Target<?> target) {
    */
   public static void clear(FutureTarget<?> target) {
     target.clear();
+    target.setRequest(null);
   }
 
   /**

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -335,6 +335,9 @@ public void onResourceReady(Resource<?> resource) {
    *                 <code>null</code>
    */
   private void onResourceReady(Resource<R> resource, R result) {
+    status = Status.COMPLETE;
+    this.resource = resource;
+
     if (requestListener == null
         || !requestListener.onResourceReady(result, requestContext.getModel(), target,
         loadedFromMemoryCache, isFirstReadyResource())) {
@@ -343,8 +346,6 @@ loadedFromMemoryCache, isFirstReadyResource())) {
       target.onResourceReady(result, animation);
     }
 
-    status = Status.COMPLETE;
-    this.resource = resource;
     notifyLoadSuccess();
 
     if (Log.isLoggable(TAG, Log.VERBOSE)) {

File: library/src/main/java/com/bumptech/glide/util/LruCache.java
Patch:
@@ -154,7 +154,7 @@ public synchronized void clearMemory() {
    *
    * @param size The size the cache should be less than.
    */
-  protected void trimToSize(int size) {
+  protected synchronized void trimToSize(int size) {
     Map.Entry<T, Y> last;
     while (currentSize > size) {
       last = cache.entrySet().iterator().next();

File: library/src/main/java/com/bumptech/glide/request/GenericRequest.java
Patch:
@@ -493,14 +493,15 @@ public void onResourceReady(Resource<?> resource) {
      * @param result object returned by {@link Resource#get()}, checked for type and never <code>null</code>
      */
     private void onResourceReady(Resource<?> resource, R result) {
+        status = Status.COMPLETE;
+        this.resource = resource;
+
         if (requestListener == null || !requestListener.onResourceReady(result, model, target, loadedFromMemoryCache,
                 isFirstReadyResource())) {
             GlideAnimation<R> animation = animationFactory.build(loadedFromMemoryCache, isFirstReadyResource());
             target.onResourceReady(result, animation);
         }
 
-        status = Status.COMPLETE;
-        this.resource = resource;
         notifyLoadSuccess();
 
         if (Log.isLoggable(TAG, Log.VERBOSE)) {

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
Patch:
@@ -9,8 +9,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.robolectric.RobolectricTestRunner;
-
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 
@@ -28,6 +26,7 @@
 import org.mockito.MockitoAnnotations;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 

File: library/src/main/java/com/bumptech/glide/load/data/LoadDataSet.java
Patch:
@@ -57,8 +57,8 @@ public Iterator<ModelLoader.LoadData<?>> iterator() {
 
   @Override
   public String toString() {
-    return "DataFetcherSet{modelLoaders=" +
-        Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + "}";
+    return "DataFetcherSet{modelLoaders="
+        + Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + "}";
   }
 
   class LoadDataIterator implements Iterator<ModelLoader.LoadData<?>> {

File: library/src/main/java/com/bumptech/glide/load/model/UrlUriLoader.java
Patch:
@@ -14,6 +14,8 @@
 /**
  * Handles http/https Uris by delegating to the {@link ModelLoader} for {@link
  * com.bumptech.glide.load.model.GlideUrl GlideUrls}.
+ *
+ * @param <Data> The type of data this Loader will obtain for a {@link Uri}.
  */
 public class UrlUriLoader<Data> implements ModelLoader<Uri, Data> {
   private static final Set<String> SCHEMES = Collections.unmodifiableSet(

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
Patch:
@@ -335,7 +335,8 @@ public synchronized void reset() throws IOException {
       throw new IOException("Stream is closed");
     }
     if (-1 == markpos) {
-      throw new InvalidMarkException("Mark has been invalidated, pos: " + pos + " markLimit: " + marklimit);
+      throw new InvalidMarkException("Mark has been invalidated, pos: " + pos + " markLimit: "
+          + marklimit);
     }
     pos = markpos;
   }

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
Patch:
@@ -335,7 +335,7 @@ public synchronized void reset() throws IOException {
       throw new IOException("Stream is closed");
     }
     if (-1 == markpos) {
-      throw new InvalidMarkException("Mark has been invalidated");
+      throw new InvalidMarkException("Mark has been invalidated, pos: " + pos + " markLimit: " + marklimit);
     }
     pos = markpos;
   }
@@ -391,7 +391,7 @@ public synchronized long skip(long byteCount) throws IOException {
    * An exception thrown when a mark can no longer be obeyed because the underlying buffer size is
    * smaller than the amount of data read after the mark position.
    */
-  public static class InvalidMarkException extends RuntimeException {
+  public static class InvalidMarkException extends IOException {
     private static final long serialVersionUID = -4338378848813561757L;
 
     public InvalidMarkException(String detailMessage) {

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -208,6 +208,9 @@ private Bitmap downsampleWithSize(MarkEnforcingInputStream is, RecyclableBuffere
         Bitmap.Config config = getConfig(is, decodeFormat);
         options.inSampleSize = sampleSize;
         options.inPreferredConfig = config;
+        if (options.inPreferredConfig != Bitmap.Config.ARGB_8888) {
+            options.inDither = true;
+        }
         if ((options.inSampleSize == 1 || Build.VERSION_CODES.KITKAT <= Build.VERSION.SDK_INT) && shouldUsePool(is)) {
             int targetWidth = (int) Math.ceil(inWidth / (double) sampleSize);
             int targetHeight = (int) Math.ceil(inHeight / (double) sampleSize);

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
Patch:
@@ -17,7 +17,7 @@
  */
 public final class TransformationUtils {
     private static final String TAG = "TransformationUtils";
-    public static final int PAINT_FLAGS = Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG | Paint.FILTER_BITMAP_FLAG;
+    public static final int PAINT_FLAGS = Paint.DITHER_FLAG | Paint.FILTER_BITMAP_FLAG;
 
     private TransformationUtils() {
         // Utility class.

File: library/src/main/java/com/bumptech/glide/load/engine/RequestContext.java
Patch:
@@ -101,7 +101,7 @@ synchronized LoadDataSet<Model> getLoadDataSet() {
     }
     if (loadDataSet == null) {
       loadDataSet = glideContext.getRegistry().getLoadDataSet(model, width, height,
-          glideContext.getOptions().getOptions());
+          requestOptions.getOptions());
     }
     return loadDataSet;
   }
@@ -164,7 +164,7 @@ <X> Encoder<X> getSourceEncoder(X data) throws Registry.NoSourceEncoderAvailable
   LoadDataSet<File> getDataFetchers(File file, int width, int height)
       throws Registry.NoModelLoaderAvailableException {
     return glideContext.getRegistry().getLoadDataSet(file, width, height,
-        glideContext.getOptions().getOptions());
+        requestOptions.getOptions());
   }
 
   public int getOverrideWidth() {

File: integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java
Patch:
@@ -6,7 +6,6 @@
 import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.load.model.ModelLoaderFactory;
 import com.bumptech.glide.load.model.MultiModelLoaderFactory;
-import com.bumptech.glide.signature.ObjectKey;
 import com.squareup.okhttp.OkHttpClient;
 
 import java.io.InputStream;
@@ -31,7 +30,7 @@ public boolean handles(GlideUrl url) {
   @Override
   public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,
       Map<String, Object> options) {
-    return new LoadData<>(new ObjectKey(model), new OkHttpStreamFetcher(client, model));
+    return new LoadData<>(model, new OkHttpStreamFetcher(client, model));
   }
 
   /**

File: integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java
Patch:
@@ -8,7 +8,6 @@
 import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.load.model.ModelLoaderFactory;
 import com.bumptech.glide.load.model.MultiModelLoaderFactory;
-import com.bumptech.glide.signature.ObjectKey;
 
 import java.io.InputStream;
 import java.util.Map;
@@ -38,8 +37,7 @@ public boolean handles(GlideUrl url) {
   @Override
   public LoadData<InputStream> buildLoadData(GlideUrl url, int width, int height,
       Map<String, Object> options) {
-    return new LoadData<>(new ObjectKey(url),
-        new VolleyStreamFetcher(requestQueue, url, requestFactory));
+    return new LoadData<>(url, new VolleyStreamFetcher(requestQueue, url, requestFactory));
   }
 
   /**

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
Patch:
@@ -95,7 +95,7 @@ public int getPriority() {
   }
 
   @Override
-  public synchronized void run() {
+  public void run() {
     switch (runReason) {
       case INITIALIZE:
         stage = Stage.RESOURCE_CACHE;
@@ -169,7 +169,7 @@ private Stage getNextStage() {
   }
 
   @Override
-  public synchronized void onDataFetcherReady(Key sourceKey, Object data, DataFetcher fetcher,
+  public void onDataFetcherReady(Key sourceKey, Object data, DataFetcher fetcher,
       DataSource dataSource) {
     this.currentSourceKey = sourceKey;
     this.currentData = data;

File: library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java
Patch:
@@ -14,7 +14,7 @@ public enum DiskCacheStrategy {
   ALL(true /*decodeCachedData*/, true /*decodeCachedResource*/) {
     @Override
     public boolean isDataCacheable(DataSource dataSource) {
-      return true;
+      return dataSource != DataSource.DATA_DISK_CACHE && dataSource != DataSource.MEMORY_CACHE;
     }
 
     @Override
@@ -44,7 +44,7 @@ public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource d
   DATA(true /*decodeCachedData*/, false /*decodeCachedResource*/) {
     @Override
     public boolean isDataCacheable(DataSource dataSource) {
-      return true;
+      return dataSource != DataSource.DATA_DISK_CACHE && dataSource != DataSource.MEMORY_CACHE;
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/load/model/BasicHeaders.java
Patch:
@@ -60,14 +60,15 @@ public int hashCode() {
     public static final class Builder {
         private final Map<String, Set<String>> headers = new HashMap<String, Set<String>>();
 
-        public void addHeader(String key, String value) {
+        public Builder addHeader(String key, String value) {
             if (headers.containsKey(key)) {
                 headers.get(key).add(value);
             } else {
                 Set<String> values = new HashSet<String>();
                 values.add(value);
                 headers.put(key, values);
             }
+            return this;
         }
 
         public BasicHeaders build() {

File: library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java
Patch:
@@ -7,7 +7,6 @@
 import com.bumptech.glide.load.model.Headers;
 import com.bumptech.glide.load.model.ModelCache;
 import com.bumptech.glide.load.model.ModelLoader;
-import com.bumptech.glide.signature.ObjectKey;
 
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -72,7 +71,7 @@ public LoadData<InputStream> buildLoadData(Model model, int width, int height,
   private static List<Key> getAlternateKeys(List<String> alternateUrls) {
     List<Key> result = new ArrayList<>(alternateUrls.size());
     for (String alternate : alternateUrls) {
-      result.add(new ObjectKey(alternate));
+      result.add(new GlideUrl(alternate));
     }
     return result;
   }

File: library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java
Patch:
@@ -8,7 +8,6 @@
 import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.load.model.ModelLoaderFactory;
 import com.bumptech.glide.load.model.MultiModelLoaderFactory;
-import com.bumptech.glide.signature.ObjectKey;
 
 import java.io.InputStream;
 import java.util.Map;
@@ -60,7 +59,7 @@ public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height
         url = model;
       }
     }
-    return new LoadData<>(new ObjectKey(url), new HttpUrlFetcher(url));
+    return new LoadData<>(url, new HttpUrlFetcher(url));
   }
 
   @Override

File: library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.engine.cache.DiskCache;
@@ -50,7 +51,7 @@ public boolean startNext() {
       Key originalKey = new DataCacheKey(sourceId, requestContext.getSignature());
       File cacheFile = diskCache.get(originalKey);
       if (cacheFile != null) {
-        this.sourceKey = originalKey;
+        this.sourceKey = sourceId;
         loadDataIterator = requestContext.getDataFetchers(cacheFile, width, height).iterator();
       }
     }
@@ -67,6 +68,6 @@ public boolean startNext() {
 
   @Override
   public void onDataReady(Object data) {
-    cb.onDataFetcherReady(sourceKey, data, fetcher);
+    cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.DATA_DISK_CACHE);
   }
 }

File: library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.data.DataFetcher;
 
@@ -21,7 +22,7 @@ interface FetcherReadyCallback {
      * @param data The loaded data, or null if the load failed.
      * @param fetcher The data fetcher we attempted to load from.
      */
-    void onDataFetcherReady(Key sourceKey, Object data, DataFetcher fetcher);
+    void onDataFetcherReady(Key sourceKey, Object data, DataFetcher fetcher, DataSource dataSource);
   }
 
   /**

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.data.DataFetcher;
@@ -63,7 +64,7 @@ public boolean startNext() {
           transformation, resourceClass);
       File cacheFile = diskCache.get(key);
       if (cacheFile != null) {
-        this.sourceKey = key;
+        this.sourceKey = sourceId;
         loadDataIterator = requestContext.getDataFetchers(cacheFile, width, height).iterator();
       }
     }
@@ -81,6 +82,6 @@ public boolean startNext() {
 
   @Override
   public void onDataReady(Object data) {
-    cb.onDataFetcherReady(sourceKey, data, fetcher);
+    cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.RESOURCE_DISK_CACHE);
   }
 }

File: library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
Patch:
@@ -66,7 +66,9 @@ public void onRequestSuccess(Request request) {
     if (coordinator != null) {
       coordinator.onRequestSuccess(this);
     }
-    thumb.clear();
+    if (!thumb.isComplete()) {
+      thumb.clear();
+    }
   }
 
   private boolean parentIsAnyResourceSet() {

File: integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java
Patch:
@@ -4,6 +4,7 @@
 import com.android.volley.Request.Priority;
 
 import java.io.InputStream;
+import java.util.Map;
 
 /**
  * Used to construct a custom Volley request, such as for authentication header decoration.
@@ -14,6 +15,7 @@ public interface VolleyRequestFactory {
      * Returns a Volley request for the given image url. The given future should be set as a
      * listener or called when the request completes.
      */
-    Request<byte[]> create(String url, VolleyRequestFuture<InputStream> future, Priority priority);
+    Request<byte[]> create(String url, VolleyRequestFuture<InputStream> future, Priority priority,
+        Map<String, String> headers);
 
 }

File: library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java
Patch:
@@ -742,7 +742,6 @@ private Request buildRequest(Target<TranscodeType> target) {
         if (priority == null) {
             priority = Priority.NORMAL;
         }
-        isThumbnailBuilt = false;
         return buildRequestRecursive(target, null);
     }
 
@@ -769,9 +768,11 @@ private Request buildRequestRecursive(Target<TranscodeType> target, ThumbnailReq
 
             ThumbnailRequestCoordinator coordinator = new ThumbnailRequestCoordinator(parentCoordinator);
             Request fullRequest = obtainRequest(target, sizeMultiplier, priority, coordinator);
+            // Guard against infinite recursion.
             isThumbnailBuilt = true;
             // Recursively generate thumbnail requests.
             Request thumbRequest = thumbnailRequestBuilder.buildRequestRecursive(target, coordinator);
+            isThumbnailBuilt = false;
             coordinator.setRequests(fullRequest, thumbRequest);
             return coordinator;
         } else if (thumbSizeMultiplier != null) {

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
Patch:
@@ -84,14 +84,13 @@ public boolean hasAlpha() throws IOException {
     }
 
     public ImageType getType() throws IOException {
-        int firstByte = streamReader.getUInt8();
+        int firstTwoBytes = streamReader.getUInt16();
 
         // JPEG.
-        if (firstByte == EXIF_MAGIC_NUMBER >> 8) {
+        if (firstTwoBytes == EXIF_MAGIC_NUMBER) {
             return JPEG;
         }
 
-        final int firstTwoBytes = firstByte << 8 & 0xFF00 | streamReader.getUInt8() & 0xFF;
         final int firstFourBytes = firstTwoBytes << 16 & 0xFFFF0000 | streamReader.getUInt16() & 0xFFFF;
         // PNG.
         if (firstFourBytes == PNG_HEADER) {

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -44,9 +44,9 @@
 import com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder;
 import com.bumptech.glide.load.resource.file.FileDecoder;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
+import com.bumptech.glide.load.resource.gif.GifDrawableEncoder;
 import com.bumptech.glide.load.resource.gif.GifFrameResourceDecoder;
 import com.bumptech.glide.load.resource.gif.GifResourceDecoder;
-import com.bumptech.glide.load.resource.gif.GifResourceEncoder;
 import com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder;
 import com.bumptech.glide.load.resource.transcode.BitmapDrawableTranscoder;
 import com.bumptech.glide.load.resource.transcode.GifDrawableBytesTranscoder;
@@ -178,7 +178,7 @@ static void tearDown() {
                 .register(BitmapDrawable.class, new BitmapDrawableEncoder(bitmapPool, new BitmapEncoder()))
         /* Gifs */
                 .prepend(InputStream.class, GifDrawable.class, new GifResourceDecoder(context, bitmapPool))
-                .register(GifDrawable.class, new GifResourceEncoder(bitmapPool))
+                .register(GifDrawable.class, new GifDrawableEncoder())
         /* Gif Frames */
                  .append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<GifDecoder>())
                  .append(GifDecoder.class, Bitmap.class, new GifFrameResourceDecoder(bitmapPool))

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
Patch:
@@ -49,7 +49,7 @@ public void testAlwaysArgb8888() throws FileNotFoundException {
         Downsampler downsampler = Downsampler.AT_LEAST;
         InputStream is = new FileInputStream(tempFile);
         try {
-            Bitmap result = downsampler.decode(is, mock(BitmapPool.class), 100, 100, DecodeFormat.ALWAYS_ARGB_8888);
+            Bitmap result = downsampler.decode(is, mock(BitmapPool.class), 100, 100, DecodeFormat.PREFER_ARGB_8888);
             assertEquals(Bitmap.Config.ARGB_8888, result.getConfig());
         } finally {
             try {

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoderTest.java
Patch:
@@ -61,7 +61,7 @@ public void testHasValidId() {
     private static class DecoderHarness {
         Downsampler downsampler = mock(Downsampler.class);
         BitmapPool bitmapPool = mock(BitmapPool.class);
-        DecodeFormat decodeFormat = DecodeFormat.ALWAYS_ARGB_8888;
+        DecodeFormat decodeFormat = DecodeFormat.PREFER_ARGB_8888;
         InputStream source = new ByteArrayInputStream(new byte[0]);
         int width = 100;
         int height = 100;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
Patch:
@@ -38,7 +38,7 @@ public class VideoBitmapDecoderTest {
     @Before
     public void setup() {
         bitmapPool = mock(BitmapPool.class);
-        decodeFormat = DecodeFormat.ALWAYS_ARGB_8888;
+        decodeFormat = DecodeFormat.PREFER_ARGB_8888;
         resource = mock(ParcelFileDescriptor.class);
         factory = mock(VideoBitmapDecoder.MediaMetadataRetrieverFactory.class);
         retriever = mock(MediaMetadataRetriever.class);

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
Patch:
@@ -213,7 +213,7 @@ private void dumpUnchecked() {
     private static LruPoolStrategy getDefaultStrategy() {
         final LruPoolStrategy strategy;
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
-            strategy = new SizeStrategy();
+            strategy = new SizeConfigStrategy();
         } else {
             strategy = new AttributeStrategy();
         }

File: library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
Patch:
@@ -40,7 +40,8 @@ public void preFill(PreFillType.Builder... bitmapAttributeBuilders) {
         for (int i = 0; i < bitmapAttributeBuilders.length; i++) {
             PreFillType.Builder builder = bitmapAttributeBuilders[i];
             if (builder.getConfig() == null) {
-                builder.setConfig(defaultFormat == DecodeFormat.ALWAYS_ARGB_8888
+                builder.setConfig(
+                        defaultFormat == DecodeFormat.ALWAYS_ARGB_8888 || defaultFormat == DecodeFormat.PREFER_ARGB_8888
                         ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
             }
             bitmapAttributes[i] = builder.build();

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -247,7 +247,8 @@ private static boolean shouldUsePool(InputStream is) {
 
     private static Bitmap.Config getConfig(InputStream is, DecodeFormat format) {
         // Changing configs can cause skewing on 4.1, see issue #128.
-        if (format == DecodeFormat.ALWAYS_ARGB_8888 || Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN) {
+        if (format == DecodeFormat.ALWAYS_ARGB_8888 || format == DecodeFormat.PREFER_ARGB_8888
+                || Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN) {
             return Bitmap.Config.ARGB_8888;
         }
 

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
Patch:
@@ -71,8 +71,8 @@ public void onDestroy() {
 
     @Override
     public void onTrimMemory(int level) {
-      // If an activity is re-created, onTrimMemory may be called before a manager is ever set.
-      // See #329.
+        // If an activity is re-created, onTrimMemory may be called before a manager is ever set.
+        // See #329.
         if (requestManager != null) {
             requestManager.onTrimMemory(level);
         }

File: library/src/main/java/com/bumptech/glide/request/GenericRequest.java
Patch:
@@ -255,7 +255,7 @@ public void begin() {
         }
 
         status = Status.WAITING_FOR_SIZE;
-        if (overrideWidth > 0 && overrideHeight > 0) {
+        if (Util.isValidDimensions(overrideWidth, overrideHeight)) {
             onSizeReady(overrideWidth, overrideHeight);
         } else {
             target.getSize(this);

File: library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java
Patch:
@@ -9,6 +9,7 @@
 
 import android.widget.ImageView;
 
+import com.bumptech.glide.load.engine.DecodeOptions;
 import com.bumptech.glide.manager.Lifecycle;
 import com.bumptech.glide.manager.RequestTracker;
 import com.bumptech.glide.request.Request;
@@ -132,6 +133,7 @@ public void runTest() throws Exception {
 
     private RequestBuilder getNullModelRequest() {
         when(glideContext.buildImageViewTarget(any(ImageView.class), any(Class.class))).thenReturn(mock(Target.class));
+        when(glideContext.getDecodeOptions()).thenReturn(new DecodeOptions(Robolectric.application));
         return new RequestBuilder(glideContext, Object.class, requestTracker, lifecycle)
                 .load((Object) null);
     }

File: library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java
Patch:
@@ -26,6 +26,7 @@
 import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
@@ -42,6 +43,8 @@
 import java.util.List;
 import java.util.Map;
 
+// TODO: Finalize load paths and fix these tests.
+@Ignore
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, emulateSdk = 18)
 public class DecodeJobTest {

File: library/src/main/java/com/bumptech/glide/GlideContext.java
Patch:
@@ -21,7 +21,6 @@
 import com.bumptech.glide.load.engine.Engine;
 import com.bumptech.glide.load.engine.LoadPath;
 import com.bumptech.glide.load.engine.Resource;
-import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
 import com.bumptech.glide.request.target.ImageViewTargetFactory;
 import com.bumptech.glide.request.target.Target;
@@ -217,7 +216,7 @@ public void onLowMemory() {
     }
 
     /**
-     * Thrown when no {@link ModelLoader} is registered for a given model class.
+     * Thrown when no {@link com.bumptech.glide.load.model.ModelLoader} is registered for a given model class.
      */
     public static class NoModelLoaderAvailableException extends RuntimeException {
         public NoModelLoaderAvailableException(Object model) {
@@ -237,7 +236,7 @@ public NoResultEncoderAvailableException(Class<?> resourceClass) {
     /**
      * Thrown when no {@link Encoder} is registered for a given data class.
      */
-    public static class NoSourceEncoderAvailableException extends MissingComponentException{
+    public static class NoSourceEncoderAvailableException extends MissingComponentException {
         public NoSourceEncoderAvailableException(Class<?> dataClass) {
             super("Failed to find source encoder for data class: " + dataClass);
         }

File: library/src/main/java/com/bumptech/glide/load/engine/DecodeOptions.java
Patch:
@@ -16,6 +16,7 @@
  * </p>
  *
  */
+@SuppressWarnings("PMD.UseUtilityClass")
 public final class DecodeOptions extends BaseDecodeOptions<DecodeOptions> {
 
     public static DecodeOptions fitCenter(Context context) {
@@ -54,7 +55,6 @@ public static DecodeOptions downsample(Context context, DownsampleStrategy strat
         return new DecodeOptions(context).downsample(strategy);
     }
 
-
     public DecodeOptions(Context context) {
         super(context);
     }

File: library/src/main/java/com/bumptech/glide/load/engine/RequestContext.java
Patch:
@@ -37,7 +37,7 @@ public class RequestContext<TranscodeClass> extends ContextWrapper {
     private final BaseDecodeOptions<?> decodeOptions;
     private final RequestOptions requestOptions;
     private final LoadDebugger debugger = Log.isLoggable(TAG, Log.VERBOSE)
-            ? new LoadDebuggerImpl() : new EmptyLoadDebugger();
+            ? new PrettyPrintDebugger() : new EmptyLoadDebugger();
 
     private DataFetcherSet<?> fetchers;
 
@@ -138,7 +138,8 @@ <X> Encoder<X> getSourceEncoder(X data) throws GlideContext.NoSourceEncoderAvail
         return glideContext.getSourceEncoder(data);
     }
 
-    DataFetcherSet<?> getDataFetchers(File file, int width, int height) throws GlideContext.NoModelLoaderAvailableException {
+    DataFetcherSet<?> getDataFetchers(File file, int width, int height)
+            throws GlideContext.NoModelLoaderAvailableException {
         return glideContext.getDataFetchers(file, width, height);
     }
 

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
Patch:
@@ -11,7 +11,7 @@
 
 /**
  * Maintains an ordered set of {@link ModelLoader}s and the model and data types they handle in order from highest
- * priority to lowe
+ * priority to lowest.
  */
 public class ModelLoaderRegistry {
 
@@ -66,7 +66,7 @@ public synchronized <Model, Data> ModelLoader<Model, Data> build(Class<Model> mo
         return multiModelLoaderFactory.build(modelClass, dataClass);
     }
 
-    public synchronized List<Class<?>> getDataClasses(Class<?> modelClass){
+    public synchronized List<Class<?>> getDataClasses(Class<?> modelClass) {
         return multiModelLoaderFactory.getDataClasses(modelClass);
     }
 

File: library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
Patch:
@@ -39,8 +39,8 @@ public boolean handles(Model model) {
 
     @Override
     public String toString() {
-        return "MultiModelLoader{" +
-                "modelLoaders=" + Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) +
-                '}';
+        return "MultiModelLoader{"
+                + "modelLoaders=" + Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()]))
+                + '}';
     }
 }

File: library/src/main/java/com/bumptech/glide/load/model/stream/HttpUriLoader.java
Patch:
@@ -27,7 +27,8 @@ public class HttpUriLoader implements ModelLoader<Uri, InputStream> {
                     )
             )
     );
-    private ModelLoader<GlideUrl, InputStream> urlLoader;
+
+    private final ModelLoader<GlideUrl, InputStream> urlLoader;
 
     public HttpUriLoader(ModelLoader<GlideUrl, InputStream> urlLoader) {
         this.urlLoader = urlLoader;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableEncoder.java
Patch:
@@ -9,6 +9,9 @@
 
 import java.io.OutputStream;
 
+/**
+ * Encodes {@link android.graphics.drawable.BitmapDrawable}s.
+ */
 public class BitmapDrawableEncoder implements ResourceEncoder<BitmapDrawable> {
 
     private final BitmapPool bitmapPool;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -155,8 +155,8 @@ public Bitmap decode(InputStream is, BitmapPool pool, int outWidth, int outHeigh
                     ? (DecodeFormat) options.get(KEY_DECODE_FORMAT) :  DecodeFormat.DEFAULT;
 
             final Bitmap downsampled =
-                    downsampleWithSize(invalidatingStream, bufferedStream, bitmapFactoryOptions, pool, inWidth, inHeight, sampleSize,
-                            decodeFormat);
+                    downsampleWithSize(invalidatingStream, bufferedStream, bitmapFactoryOptions, pool, inWidth,
+                            inHeight, sampleSize, decodeFormat);
 
             // BitmapFactory swallows exceptions during decodes and in some cases when inBitmap is non null, may catch
             // and log a stack trace but still return a non null bitmap. To avoid displaying partially decoded bitmaps,

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java
Patch:
@@ -54,7 +54,8 @@ public Bitmap decode(ParcelFileDescriptor resource, BitmapPool bitmapPool, int o
             Map<String, Object> options) throws IOException {
         int frame = options.containsKey(KEY_TARGET_FRAME) ? (Integer) options.get(KEY_TARGET_FRAME) : DEFAULT_FRAME;
         if (frame < 0 && frame != DEFAULT_FRAME) {
-            throw new IllegalArgumentException("Requested frame must be non-negative, or DEFAULT_FRAME, given: " + frame);
+            throw new IllegalArgumentException("Requested frame must be non-negative, or DEFAULT_FRAME, given: "
+                    + frame);
         }
 
         MediaMetadataRetriever mediaMetadataRetriever = factory.build();

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java
Patch:
@@ -74,7 +74,7 @@ private static final class Entry<Z, R> {
         private final Class<R> toClass;
         private final ResourceTranscoder<Z, R> transcoder;
 
-        private Entry(Class<Z> fromClass, Class<R> toClass, ResourceTranscoder<Z, R> transcoder) {
+        Entry(Class<Z> fromClass, Class<R> toClass, ResourceTranscoder<Z, R> transcoder) {
             this.fromClass = fromClass;
             this.toClass = toClass;
             this.transcoder = transcoder;

File: library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
Patch:
@@ -31,7 +31,7 @@ private static final class Entry<T> {
         private final Class<T> resourceClass;
         private final ResourceEncoder<T> encoder;
 
-        private Entry(Class<T> resourceClass, ResourceEncoder<T> encoder) {
+        Entry(Class<T> resourceClass, ResourceEncoder<T> encoder) {
             this.resourceClass = resourceClass;
             this.encoder = encoder;
         }

File: samples/svg/src/main/java/com/bumptech/svgsample/app/MainActivity.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.svgsample.app;
 
+import static com.bumptech.glide.load.resource.drawable.DrawableAnimationOptions.withCrossFade;
 import static com.bumptech.glide.request.RequestOptions.diskCacheStrategyOf;
 import static com.bumptech.glide.request.RequestOptions.placeholderOf;
 
@@ -16,7 +17,6 @@
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.drawable.DrawableAnimationOptions;
 
 import java.io.File;
 
@@ -42,7 +42,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 .as(PictureDrawable.class)
                 .apply(placeholderOf(R.drawable.image_loading)
                         .error(R.drawable.image_error))
-                .animate(new DrawableAnimationOptions().crossFade())
+                .animate(withCrossFade())
                 .listener(new SvgSoftwareLayerSetter());
     }
 

File: library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java
Patch:
@@ -447,7 +447,7 @@ private static class EngineTestHarness {
         Map<Key, WeakReference<EngineResource<?>>> activeResources =
                 new HashMap<Key, WeakReference<EngineResource<?>>>();
         Key signature = mock(Key.class);
-        RequestContext<Object, Object> requestContext = mock(RequestContext.class);
+        RequestContext<Object> requestContext = mock(RequestContext.class);
 
         int width = 100;
         int height = 100;

File: library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java
Patch:
@@ -70,7 +70,7 @@ private static class RequestHarness {
         DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.RESULT;
         GlideContext glideContext = mock(GlideContext.class);
         RequestOptions requestOptions = new RequestOptions();
-        RequestContext<?, List> requestContext = mock(RequestContext.class);
+        RequestContext<List> requestContext = mock(RequestContext.class);
 
         public RequestHarness() {
             when(requestCoordinator.canSetImage(any(Request.class))).thenReturn(true);

File: library/src/androidTest/java/com/bumptech/glide/tests/KeyAssertions.java
Patch:
@@ -31,12 +31,12 @@ public static void assertDifferent(Key first, Key second)
         assertDifferent(second, first, true);
     }
 
-    public static void assertDifferent(Key first, Key second, boolean diskCacheDiffers)
+    public static void assertDifferent(Key first, Key second, boolean checkDiskCacheKey)
             throws NoSuchAlgorithmException, UnsupportedEncodingException {
         assertNotEquals(first, second);
         assertNotEquals(first.hashCode(), second.hashCode());
 
-        if (diskCacheDiffers) {
+        if (checkDiskCacheKey) {
             MessageDigest firstDigest = MessageDigest.getInstance("SHA-1");
             first.updateDiskCacheKey(firstDigest);
             MessageDigest secondDigest = MessageDigest.getInstance("SHA-1");

File: library/src/main/java/com/bumptech/glide/load/engine/Engine.java
Patch:
@@ -120,7 +120,7 @@ public Engine(MemoryCache memoryCache, DiskCache.Factory diskCacheFactory, Execu
      * @param cb The callback that will be called when the load completes.
      *
      */
-    public <Z, R> LoadStatus load(RequestContext<Z, R> requestContext, int width, int height, ResourceCallback cb) {
+    public <Z, R> LoadStatus load(RequestContext<R> requestContext, int width, int height, ResourceCallback cb) {
         Util.assertMainThread();
         long startTime = LogTime.getLogTime();
 
@@ -156,7 +156,7 @@ public <Z, R> LoadStatus load(RequestContext<Z, R> requestContext, int width, in
         }
 
         EngineJob engineJob = engineJobFactory.build(key, requestContext.isMemoryCacheable());
-        DecodeJob<Z, R> decodeJob = new DecodeJob<Z, R>(requestContext, key, width, height,  diskCacheProvider);
+        DecodeJob<R> decodeJob = new DecodeJob<R>(requestContext, key, width, height,  diskCacheProvider);
         EngineRunnable runnable = new EngineRunnable(engineJob, decodeJob, requestContext.getPriority());
         jobs.put(key, engineJob);
         engineJob.addCallback(cb);

File: library/src/main/java/com/bumptech/glide/load/engine/EngineKeyFactory.java
Patch:
@@ -3,7 +3,7 @@
 class EngineKeyFactory {
 
     @SuppressWarnings("rawtypes")
-    public EngineKey buildKey(RequestContext<?, ?> requestContext, int width, int height) {
+    public EngineKey buildKey(RequestContext<?> requestContext, int width, int height) {
         return new EngineKey(requestContext.getId(), requestContext.getSignature(), width, height,
                 requestContext.getResourceClass(), requestContext.getTranscodeClass());
     }

File: library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
Patch:
@@ -74,7 +74,7 @@ <Model, Data> List<ModelLoaderFactory<Model, Data>> remove(Class<Model> modelCla
     List<Class<?>> getDataClasses(Class<?> modelClass) {
         List<Class<?>> result = new ArrayList<Class<?>>();
         for (Entry<?, ?> entry : entries) {
-            if (entry.handles(modelClass)) {
+            if (!result.contains(entry.dataClass) && entry.handles(modelClass)) {
                 result.add(entry.dataClass);
             }
         }

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
Patch:
@@ -34,7 +34,7 @@ class GifFrameLoader {
 
     private boolean isRunning = false;
     private boolean isLoadPending = false;
-    private RequestBuilder<Bitmap, Bitmap> requestBuilder;
+    private RequestBuilder<Bitmap> requestBuilder;
     private DelayTarget current;
     private boolean isCleared;
 
@@ -47,7 +47,7 @@ public GifFrameLoader(Context context, FrameCallback callback, GifDecoder gifDec
     }
 
     GifFrameLoader(Context context, FrameCallback callback, GifDecoder gifDecoder, Handler handler,
-            RequestBuilder<Bitmap, Bitmap> requestBuilder) {
+            RequestBuilder<Bitmap> requestBuilder) {
         if (handler == null) {
             handler = new Handler(Looper.getMainLooper(), new FrameLoaderCallback());
         }
@@ -169,7 +169,7 @@ public void onResourceReady(Bitmap resource, GlideAnimation<? super Bitmap> glid
         }
     }
 
-    private static RequestBuilder<Bitmap, Bitmap> getRequestBuilder(Context context, int width, int height) {
+    private static RequestBuilder<Bitmap> getRequestBuilder(Context context, int width, int height) {
         return Glide.with(context)
                 .asBitmap()
                 .apply(diskCacheStrategyOf(DiskCacheStrategy.NONE)

File: library/src/main/java/com/bumptech/glide/request/SingleRequest.java
Patch:
@@ -48,7 +48,7 @@ private enum Status {
 
     private final String tag = String.valueOf(hashCode());
 
-    private RequestContext<?, R> requestContext;
+    private RequestContext<R> requestContext;
     private Object model;
     private RequestOptions requestOptions;
     private RequestCoordinator requestCoordinator;
@@ -66,7 +66,7 @@ private enum Status {
     private Status status;
 
     public static <R> SingleRequest<R> obtain(
-            RequestContext<?, R> requestContext,
+            RequestContext<R> requestContext,
             Object model,
             Class<R> transcodeClass,
             RequestOptions requestOptions,
@@ -97,7 +97,7 @@ private SingleRequest() {
     }
 
     private void init(
-            RequestContext<?, R> requestContext,
+            RequestContext<R> requestContext,
             Object model,
             Class<R> transcodeClass,
             RequestOptions requestOptions,

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -44,9 +44,9 @@ public class FlickrPhotoGrid extends Fragment implements PhotoViewer {
     private int photoSize;
     private GridView grid;
     private boolean thumbnail;
-    private RequestBuilder<Drawable, Drawable> fullRequest;
-    private RequestBuilder<Drawable, Drawable> thumbnailRequest;
-    private RequestBuilder<Drawable, Drawable> preloadRequest;
+    private RequestBuilder<Drawable> fullRequest;
+    private RequestBuilder<Drawable> thumbnailRequest;
+    private RequestBuilder<Drawable> preloadRequest;
 
     public static FlickrPhotoGrid newInstance(int size, int preloadCount, boolean thumbnail) {
         FlickrPhotoGrid photoGrid = new FlickrPhotoGrid();

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
Patch:
@@ -40,8 +40,8 @@ public class FlickrPhotoList extends Fragment implements PhotoViewer {
     private FlickrPhotoListAdapter adapter;
     private List<Photo> currentPhotos;
     private ListView list;
-    private RequestBuilder<Drawable, Drawable> fullRequest;
-    private RequestBuilder<Drawable, Drawable> thumbRequest;
+    private RequestBuilder<Drawable> fullRequest;
+    private RequestBuilder<Drawable> thumbRequest;
     private ViewPreloadSizeProvider<Photo> preloadSizeProvider;
 
     public static FlickrPhotoList newInstance() {

File: samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
Patch:
@@ -46,7 +46,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         ListView gifList = (ListView) findViewById(R.id.gif_list);
 
-        RequestBuilder<Drawable, Drawable> gifItemRequest = Glide.with(this)
+        RequestBuilder<Drawable> gifItemRequest = Glide.with(this)
                 .asDrawable()
                 .apply(diskCacheStrategyOf(DiskCacheStrategy.SOURCE));
 
@@ -81,12 +81,12 @@ private static class GifAdapter extends BaseAdapter implements ListPreloader.Pre
         private static final Api.GifResult[] EMPTY_RESULTS = new Api.GifResult[0];
 
         private final Activity activity;
-        private RequestBuilder<Drawable, Drawable> requestBuilder;
+        private RequestBuilder<Drawable> requestBuilder;
         private ViewPreloadSizeProvider<Api.GifResult> preloadSizeProvider;
 
         private Api.GifResult[] results = EMPTY_RESULTS;
 
-        public GifAdapter(Activity activity, RequestBuilder<Drawable, Drawable> requestBuilder,
+        public GifAdapter(Activity activity, RequestBuilder<Drawable> requestBuilder,
                 ViewPreloadSizeProvider<Api.GifResult> preloadSizeProvider) {
             this.activity = activity;
             this.requestBuilder = requestBuilder;

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FullscreenActivity.java
Patch:
@@ -1,6 +1,6 @@
 package com.bumptech.glide.samples.flickr;
 
-import static com.bumptech.glide.load.resource.drawable.DrawableTransformationOptions.withFitCenter;
+import static com.bumptech.glide.load.engine.DecodeOptions.fitCenter;
 
 import android.content.Context;
 import android.content.Intent;
@@ -31,7 +31,7 @@ protected void onCreate(Bundle savedInstanceState) {
         Photo photo = getIntent().getParcelableExtra(ARG_PHOTO);
         Glide.with(this)
                 .asDrawable()
-                .transform(withFitCenter(this))
+                .decode(fitCenter(this))
                 .load(photo)
                 .into(fullscreenView);
     }

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -33,6 +33,7 @@
 import com.bumptech.glide.load.model.ResourceLoader;
 import com.bumptech.glide.load.model.StreamEncoder;
 import com.bumptech.glide.load.model.StringLoader;
+import com.bumptech.glide.load.model.UnitModelLoader;
 import com.bumptech.glide.load.model.UriLoader;
 import com.bumptech.glide.load.model.stream.ByteArrayLoader;
 import com.bumptech.glide.load.model.stream.HttpGlideUrlLoader;
@@ -47,7 +48,6 @@
 import com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder;
 import com.bumptech.glide.load.resource.file.FileDecoder;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
-import com.bumptech.glide.load.resource.gif.GifFrameModelLoader;
 import com.bumptech.glide.load.resource.gif.GifFrameResourceDecoder;
 import com.bumptech.glide.load.resource.gif.GifResourceDecoder;
 import com.bumptech.glide.load.resource.gif.GifResourceEncoder;
@@ -228,7 +228,7 @@ static void tearDown() {
         resourceEncoderRegistry.add(GifDrawable.class, new GifResourceEncoder(bitmapPool));
 
         /* Gif Frames */
-        modelLoaderRegistry.append(GifDecoder.class, GifDecoder.class, new GifFrameModelLoader.Factory());
+        modelLoaderRegistry.append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<GifDecoder>());
         decoderRegistry.append(new GifFrameResourceDecoder(bitmapPool), GifDecoder.class, Bitmap.class);
 
         /* Files */
@@ -237,6 +237,7 @@ static void tearDown() {
         DataRewinderRegistry dataRewinderRegistry = new DataRewinderRegistry();
         dataRewinderRegistry.register(new InputStreamRewinder.Factory());
 
+        modelLoaderRegistry.append(File.class, File.class, new UnitModelLoader.Factory<File>());
         modelLoaderRegistry.append(File.class, InputStream.class, new FileLoader.StreamFactory());
         modelLoaderRegistry.append(File.class, ParcelFileDescriptor.class, new FileLoader.FileDescriptorFactory());
         modelLoaderRegistry.append(int.class, InputStream.class, new ResourceLoader.StreamFactory());

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -266,7 +266,7 @@ public void onSearchCompleted(String searchString, List<Photo> photos) {
             }
 
             backgroundThumbnailFetcher = new BackgroundThumbnailFetcher(FlickrSearchActivity.this, photos);
-//            backgroundHandler.post(backgroundThumbnailFetcher);
+            backgroundHandler.post(backgroundThumbnailFetcher);
 
             currentPhotos = photos;
         }

File: library/src/main/java/com/bumptech/glide/load/engine/RequestContext.java
Patch:
@@ -28,7 +28,7 @@ public class RequestContext<ResourceClass, TranscodeClass> extends ContextWrappe
     private final ResourceTranscoder<ResourceClass, ? extends TranscodeClass> transcoder;
     private final RequestOptions requestOptions;
 
-    private DataFetcherSet fetchers;
+    private DataFetcherSet<?> fetchers;
 
     public RequestContext(GlideContext glideContext, Object model, Class<ResourceClass> resourceClass,
             Class<TranscodeClass> transcodeClass, Transformation<ResourceClass> transformation,
@@ -51,7 +51,7 @@ void buildDataFetchers(int width, int height) {
         fetchers = glideContext.getDataFetchers(model, width, height);
     }
 
-    DataFetcherSet getDataFetchers() {
+    DataFetcherSet<?> getDataFetchers() {
         if (fetchers == null) {
             throw new IllegalStateException("Must call buildDataFetchers first");
         }
@@ -115,7 +115,7 @@ <X> Encoder<X> getSourceEncoder(X data) throws GlideContext.NoSourceEncoderAvail
         return glideContext.getSourceEncoder(data);
     }
 
-    DataFetcherSet getDataFetchers(File file, int width, int height) throws GlideContext.NoModelLoaderAvailableException {
+    DataFetcherSet<?> getDataFetchers(File file, int width, int height) throws GlideContext.NoModelLoaderAvailableException {
         return glideContext.getDataFetchers(file, width, height);
     }
 }

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
Patch:
@@ -47,4 +47,6 @@ public interface ModelLoader<T, Y> {
      * cached, or null if no valid {@link com.bumptech.glide.load.data.DataFetcher} could be constructed.
      */
     DataFetcher<Y> getDataFetcher(T model, int width, int height);
+
+    boolean handles(T model);
 }

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java
Patch:
@@ -18,11 +18,11 @@ public interface ModelLoaderFactory<T, Y> {
      * Build a concrete ModelLoader for this model type.
      *
      * @param context A context that cannot be retained by the factory but can be retained by the {@link ModelLoader}
-     * @param factories A map of classes to factories that can be used to construct additional {@link ModelLoader}s that
-     *                  this factory's {@link ModelLoader} may depend on
+     * @param multiFactory A map of classes to factories that can be used to construct additional {@link ModelLoader}s
+     *                     that this factory's {@link ModelLoader} may depend on
      * @return A new {@link ModelLoader}
      */
-    ModelLoader<T, Y> build(Context context, GenericLoaderFactory factories);
+    ModelLoader<T, Y> build(Context context, MultiModelLoaderFactory multiFactory);
 
     /**
      * A lifecycle method that will be called when this factory is about to replaced.

File: library/src/main/java/com/bumptech/glide/request/GlideContext.java
Patch:
@@ -111,8 +111,8 @@ private static <X, Z> void maybeLogFoundDecoder(List<ResourceDecoder<X, Z>> deco
         }
     }
 
-    public DataFetcherSet getDataFetchers(Object model, int width, int height) {
-        DataFetcherSet result = modelLoaderRegistry.getDataFetchers(model, width, height);
+    public DataFetcherSet<?> getDataFetchers(Object model, int width, int height) {
+        DataFetcherSet<?> result = modelLoaderRegistry.getDataFetchers(model, width, height);
         if (result.isEmpty()) {
             throw new NoModelLoaderAvailableException(model);
         }

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -94,8 +94,7 @@ public void onCreate(Bundle savedInstanceState) {
         backgroundHandler = new Handler(backgroundThread.getLooper());
 
         setContentView(R.layout.flickr_search_activity);
-        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
-                .detectAll()
+        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll()
                 .penaltyLog()
                 .build());
         searching = findViewById(R.id.searching);

File: library/src/androidTest/java/com/bumptech/glide/request/RequestFutureTargetTest.java
Patch:
@@ -34,7 +34,7 @@
 public class RequestFutureTargetTest {
     private int width;
     private int height;
-    private RequestFutureTarget<Object, Object> future;
+    private RequestFutureTarget<Object> future;
     private Request request;
     private Handler handler;
     private RequestFutureTarget.Waiter waiter;
@@ -45,7 +45,7 @@ public void setUp() {
         height = 100;
         handler = mock(Handler.class);
         waiter = mock(RequestFutureTarget.Waiter.class);
-        future = new RequestFutureTarget<Object, Object>(handler, width, height, false, waiter);
+        future = new RequestFutureTarget<Object>(handler, width, height, false, waiter);
         request = mock(Request.class);
         future.setRequest(request);
     }
@@ -200,7 +200,7 @@ public void testThrowsTimeoutExceptionOnGetIfFailedToReceiveResourceInTime()
 
     @Test(expected = IllegalArgumentException.class)
     public void testThrowsExceptionIfGetCalledOnMainThread() throws ExecutionException, InterruptedException {
-        future = new RequestFutureTarget<Object, Object>(handler, width, height, true, waiter);
+        future = new RequestFutureTarget<Object>(handler, width, height, true, waiter);
         future.get();
     }
 

File: library/src/androidTest/java/com/bumptech/glide/request/animation/DrawableCrossFadeFactoryTest.java
Patch:
@@ -16,13 +16,13 @@
 @Config(manifest = Config.NONE, emulateSdk = 18)
 public class DrawableCrossFadeFactoryTest {
 
-    private DrawableCrossFadeFactory<Drawable> factory;
+    private DrawableCrossFadeFactory factory;
 
     @SuppressWarnings("unchecked")
     @Before
     public void setUp() {
         ViewAnimationFactory<Drawable> viewAnimationFactory = mock(ViewAnimationFactory.class);
-        factory = new DrawableCrossFadeFactory<Drawable>(viewAnimationFactory, 100 /*duration*/);
+        factory = new DrawableCrossFadeFactory(viewAnimationFactory, 100 /*duration*/);
     }
 
     @Test

File: library/src/androidTest/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimationTest.java
Patch:
@@ -72,8 +72,7 @@ private static class CrossFadeHarness {
         ImageView view = mock(ImageView.class);
         GlideAnimation<Drawable> defaultAnimation = mock(GlideAnimation.class);
         int duration = 200;
-        DrawableCrossFadeViewAnimation<Drawable> animation = new DrawableCrossFadeViewAnimation<Drawable>(
-                defaultAnimation, duration);
+        DrawableCrossFadeViewAnimation animation = new DrawableCrossFadeViewAnimation(defaultAnimation, duration);
     }
 }
 

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -55,6 +55,7 @@
 import com.bumptech.glide.load.resource.gif.GifResourceEncoder;
 import com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder;
 import com.bumptech.glide.load.resource.transcode.BitmapDrawableTranscoder;
+import com.bumptech.glide.load.resource.transcode.GifDrawableBytesTranscoder;
 import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
 import com.bumptech.glide.load.resource.transcode.TranscoderRegistry;
 import com.bumptech.glide.manager.RequestManagerRetriever;
@@ -267,8 +268,8 @@ static void tearDown() {
 
         transcoderRegistry.register(Bitmap.class, BitmapDrawable.class,
                 new BitmapDrawableTranscoder(context.getResources(), bitmapPool));
-        transcoderRegistry.register(Bitmap.class, byte[].class,
-                new BitmapBytesTranscoder());
+        transcoderRegistry.register(Bitmap.class, byte[].class, new BitmapBytesTranscoder());
+        transcoderRegistry.register(GifDrawable.class, byte[].class, new GifDrawableBytesTranscoder());
     }
 
     /**

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
Patch:
@@ -10,6 +10,7 @@
 import android.os.Message;
 import android.os.SystemClock;
 
+import com.bumptech.glide.GenericTransformationOptions;
 import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.gifdecoder.GifDecoder;
@@ -60,8 +61,7 @@ public void setFrameTransformation(Transformation<Bitmap> transformation) {
         if (transformation == null) {
             throw new NullPointerException("Transformation must not be null");
         }
-        // TODO: fixme.
-//        requestBuilder = requestBuilder.transform(transformation);
+        requestBuilder = requestBuilder.transform(new GenericTransformationOptions<Bitmap>().transform(transformation));
     }
 
     public void start() {

File: library/src/androidTest/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -697,9 +697,10 @@ public void testClone() throws IOException {
 //        when(secondTranscoder.transcode(any(Resource.class))).thenReturn(secondResource);
 //        when(secondTranscoder.getId()).thenReturn("transcoder2");
 
-        DrawableRequestBuilder<String> firstRequest = requestManager.from(String.class).transcoder(firstTranscoder)
+        RequestBuilder<Drawable, Drawable> firstRequest = requestManager.from(String.class).transcoder
+                (firstTranscoder)
                 .override(100, 100);
-        DrawableRequestBuilder<String> secondRequest = firstRequest.clone().transcoder(secondTranscoder);
+        RequestBuilder<Drawable, Drawable> secondRequest = firstRequest.clone().transcoder(secondTranscoder);
 
         Target firstTarget = mock(Target.class);
         Target secondTarget = mock(Target.class);

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
Patch:
@@ -19,7 +19,7 @@
 import android.os.Handler;
 import android.os.Message;
 
-import com.bumptech.glide.GenericRequestBuilder;
+import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.gifdecoder.GifDecoder;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Transformation;
@@ -42,7 +42,7 @@ public class GifFrameLoaderTest {
     private GifFrameLoader.FrameCallback callback;
     private GifDecoder gifDecoder;
     private Handler handler;
-    private GenericRequestBuilder<GifDecoder, GifDecoder, Bitmap, Bitmap> requestBuilder;
+    private RequestBuilder<GifDecoder, GifDecoder, Bitmap, Bitmap> requestBuilder;
     private GifFrameLoader loader;
 
     @SuppressWarnings("unchecked")
@@ -53,7 +53,7 @@ public void setUp() {
         handler = mock(Handler.class);
         when(handler.obtainMessage(anyInt(), anyObject())).thenReturn(mock(Message.class));
 
-        requestBuilder = mock(GenericRequestBuilder.class);
+        requestBuilder = mock(RequestBuilder.class);
 
         loader = new GifFrameLoader(callback, gifDecoder, handler, requestBuilder);
         when(requestBuilder.signature(any(Key.class))).thenReturn(requestBuilder);

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamByteArrayLoader.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 
+import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.load.data.ByteArrayFetcher;
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.model.GenericLoaderFactory;
@@ -22,7 +23,7 @@ public StreamByteArrayLoader() {
     }
 
     /**
-     * @deprecated Use {@link com.bumptech.glide.GenericRequestBuilder#signature(com.bumptech.glide.load.Key)}
+     * @deprecated Use {@link RequestBuilder#signature(com.bumptech.glide.load.Key)}
      * and the empty constructor instead. Scheduled to be removed in Glide 4.0.
      */
     @Deprecated

File: library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableResource.java
Patch:
@@ -16,6 +16,7 @@
 public abstract class DrawableResource<T extends Drawable> implements Resource<T> {
     protected final T drawable;
 
+
     public DrawableResource(T drawable) {
         if (drawable == null) {
             throw new NullPointerException("Drawable must not be null!");

File: library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
Patch:
@@ -32,10 +32,9 @@
  *     The {@link com.bumptech.glide.Glide#clear(FutureTarget)} call will make sure any resources used are recycled.
  * </p>
  *
- * @param <T> The type of the data to load.
  * @param <R> The type of the resource that will be loaded.
  */
-public class RequestFutureTarget<T, R> implements FutureTarget<R>, Runnable {
+public class RequestFutureTarget<R> implements FutureTarget<R>, Runnable {
     private static final Waiter DEFAULT_WAITER = new Waiter();
 
     private final Handler mainHandler;

File: library/src/main/java/com/bumptech/glide/request/animation/DrawableCrossFadeFactory.java
Patch:
@@ -31,8 +31,8 @@ public DrawableCrossFadeFactory(int duration) {
         this(new ViewAnimationFactory<Drawable>(new DefaultAnimationFactory()), duration);
     }
 
-    public DrawableCrossFadeFactory(Context context, int defaultAnimationId, int duration) {
-        this(new ViewAnimationFactory<Drawable>(context, defaultAnimationId), duration);
+    public DrawableCrossFadeFactory(int defaultAnimationId, int duration) {
+        this(new ViewAnimationFactory<Drawable>(defaultAnimationId), duration);
     }
 
     public DrawableCrossFadeFactory(Animation defaultAnimation, int duration) {
@@ -61,7 +61,7 @@ public GlideAnimation<Drawable> build(boolean isFromMemoryCache, boolean isFirst
     private static class DefaultAnimationFactory implements ViewAnimation.AnimationFactory {
 
         @Override
-        public Animation build() {
+        public Animation build(Context context) {
             AlphaAnimation animation = new AlphaAnimation(0f, 1f);
             animation.setDuration(DEFAULT_DURATION_MS / 2);
             return animation;

File: library/src/main/java/com/bumptech/glide/request/animation/ViewAnimation.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.animation;
 
+import android.content.Context;
 import android.view.View;
 import android.view.animation.Animation;
 
@@ -36,14 +37,14 @@ public boolean animate(R current, ViewAdapter adapter) {
         View view = adapter.getView();
         if (view != null) {
             view.clearAnimation();
-            Animation animation = animationFactory.build();
+            Animation animation = animationFactory.build(view.getContext());
             view.startAnimation(animation);
         }
 
         return false;
     }
 
     interface AnimationFactory {
-        Animation build();
+        Animation build(Context context);
     }
 }

File: library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
Patch:
@@ -10,7 +10,7 @@
  * <code>
  * Glide.load("http://somefakeurl.com/fakeImage.jpeg")
  *      .asBitmap()
- *      .fitCenter()
+ *      .withFitCenter()
  *      .into(new SimpleTarget<Bitmap>(250, 250) {
  *
  *          {@literal @Override}

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -364,7 +364,9 @@ public void run() {
                     return;
                 }
 
+                // TODO: Calling asDrawable (or Bitmap/Gif) and then downloadOnly is weird.
                 FutureTarget<File> futureTarget = Glide.with(context)
+                        .asDrawable()
                         .load(photo)
                         .downloadOnly(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE);
 

File: samples/svg/src/main/java/com/bumptech/svgsample/app/MainActivity.java
Patch:
@@ -10,7 +10,7 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import com.bumptech.glide.GenericRequestBuilder;
+import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.model.StreamEncoder;
@@ -27,7 +27,7 @@ public class MainActivity extends Activity {
 
     private ImageView imageViewRes;
     private ImageView imageViewNet;
-    private GenericRequestBuilder<Uri, InputStream, SVG, PictureDrawable> requestBuilder;
+    private RequestBuilder<Uri, InputStream, SVG, PictureDrawable> requestBuilder;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {

File: library/src/main/java/com/bumptech/glide/module/ManifestParser.java
Patch:
@@ -26,7 +26,7 @@ public List<GlideModule> parse() {
                     context.getPackageName(), PackageManager.GET_META_DATA);
             if (appInfo.metaData != null) {
                 for (String key : appInfo.metaData.keySet()) {
-                    if (GLIDE_MODULE_VALUE.equals(appInfo.metaData.getString(key))) {
+                    if (GLIDE_MODULE_VALUE.equals(appInfo.metaData.get(key))) {
                         modules.add(parseModule(key));
                     }
                 }

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -33,7 +33,6 @@
 import com.bumptech.glide.samples.flickr.api.Photo;
 
 import java.io.File;
-import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -90,7 +89,6 @@ public void onAttachFragment(Fragment fragment) {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        Glide.get(this).register(Photo.class, InputStream.class, new FlickrModelLoader.Factory());
         backgroundThread = new HandlerThread("BackgroundThumbnailHandlerThread");
         backgroundThread.start();
         backgroundHandler = new Handler(backgroundThread.getLooper());

File: library/src/androidTest/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutorTest.java
Patch:
@@ -37,7 +37,8 @@ public void onRun(int priority) {
             }));
         }
 
-        executor.awaitTermination(200, TimeUnit.MILLISECONDS);
+        executor.shutdown();
+        executor.awaitTermination(500, TimeUnit.MILLISECONDS);
 
         assertThat(resultPriorities).hasSize(numPrioritiesToTest);
 

File: library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java
Patch:
@@ -589,6 +589,7 @@ private static class Harness {
         Transformation<Object> transformation = mock(Transformation.class);
         ResourceTranscoder<Object, Object> transcoder = mock(ResourceTranscoder.class);
         DiskCache diskCache = mock(DiskCache.class);
+        DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);
         Priority priority = Priority.IMMEDIATE;
 
         ResourceDecoder<File, Object> cacheDecoder = mock(ResourceDecoder.class);
@@ -614,11 +615,12 @@ public Harness(DiskCacheStrategy diskCacheStrategy) throws FileNotFoundException
             when(loadProvider.getEncoder()).thenReturn(resultEncoder);
             when(loadProvider.getSourceDecoder()).thenReturn(sourceDecoder);
             when(loadProvider.getSourceEncoder()).thenReturn(sourceEncoder);
+            when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);
         }
 
         public DecodeJob<Object, Object, Object> getJob() {
             return new DecodeJob<Object, Object, Object>(key, width, height, dataFetcher, loadProvider, transformation,
-                    transcoder, diskCache, diskCacheStrategy, priority, fileOpener);
+                    transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);
         }
     }
 

File: library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java
Patch:
@@ -487,7 +487,7 @@ public EngineTestHarness() {
 
             job = mock(EngineJob.class);
 
-            engine = new Engine(cache, mock(DiskCache.class), mock(ExecutorService.class),
+            engine = new Engine(cache, mock(DiskCache.Factory.class), mock(ExecutorService.class),
                     mock(ExecutorService.class), jobs, keyFactory, activeResources, engineJobFactory, resourceRecycler);
 
         }

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine;
 
 import android.os.Handler;
+import android.os.Looper;
 import android.os.Message;
 
 import com.bumptech.glide.load.Key;
@@ -20,7 +21,7 @@
  */
 class EngineJob implements EngineRunnable.EngineRunnableManager {
     private static final EngineResourceFactory DEFAULT_FACTORY = new EngineResourceFactory();
-    private static final Handler MAIN_THREAD_HANDLER = new Handler(new MainThreadCallback());
+    private static final Handler MAIN_THREAD_HANDLER = new Handler(Looper.getMainLooper(), new MainThreadCallback());
 
     private static final int MSG_COMPLETE = 1;
     private static final int MSG_EXCEPTION = 2;

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine;
 
 import android.os.Handler;
+import android.os.Looper;
 import android.os.Message;
 
 import com.bumptech.glide.util.Util;
@@ -10,7 +11,7 @@
  */
 class ResourceRecycler {
     private boolean isRecycling;
-    private final Handler handler = new Handler(new ResourceRecyclerCallback());
+    private final Handler handler = new Handler(Looper.getMainLooper(), new ResourceRecyclerCallback());
 
     public void recycle(Resource<?> resource) {
         Util.assertMainThread();

File: library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
Patch:
@@ -23,9 +23,9 @@
  * {@link android.view.ViewTreeObserver.OnDrawListener}.
  *
  * <p>
- *     To detect {@link View} reuse in {@link android.widget.ListView} or any {@link ViewGroup} that reuses views, this
- *     class uses the {@link View#setTag(Object)} method to store some metadata so that if a view is reused, any
- *     previous loads or resources from previous loads can be cancelled or reused.
+ *     To detect {@link View} reuse in {@link android.widget.ListView} or any {@link android.view.ViewGroup} that reuses
+ *     views, this class uses the {@link View#setTag(Object)} method to store some metadata so that if a view is reused,
+ *     any previous loads or resources from previous loads can be cancelled or reused.
  * </p>
  *
  * <p>

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
Patch:
@@ -125,7 +125,7 @@ public int getOrientation() throws IOException {
         } else {
             byte[] exifData = getExifSegment();
             boolean hasJpegExifPreamble = exifData != null
-                    && exifData.length >= JPEG_EXIF_SEGMENT_PREAMBLE_BYTES.length;
+                    && exifData.length > JPEG_EXIF_SEGMENT_PREAMBLE_BYTES.length;
 
             if (hasJpegExifPreamble) {
                 for (int i = 0; i < JPEG_EXIF_SEGMENT_PREAMBLE_BYTES.length; i++) {

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -185,7 +185,7 @@ private int getRoundedSampleSize(int degreesToRotate, int inWidth, int inHeight,
         // or equal to the sample size we provide. Because we need to estimate the final image width and height to
         // re-use Bitmaps, we mirror BitmapFactory's calculation here. For bug, see issue #224. For algorithm see
         // http://stackoverflow.com/a/17379704/800716.
-        final int powerOfTwoSampleSize = exactSampleSize == 0 ? 0 : Integer.highestOneBit(exactSampleSize - 1);
+        final int powerOfTwoSampleSize = exactSampleSize == 0 ? 0 : Integer.highestOneBit(exactSampleSize);
 
         // Although functionally equivalent to 0 for BitmapFactory, 1 is a safer default for our code than 0.
         return Math.max(1, powerOfTwoSampleSize);

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -185,7 +185,7 @@ private int getRoundedSampleSize(int degreesToRotate, int inWidth, int inHeight,
         // or equal to the sample size we provide. Because we need to estimate the final image width and height to
         // re-use Bitmaps, we mirror BitmapFactory's calculation here. For bug, see issue #224. For algorithm see
         // http://stackoverflow.com/a/17379704/800716.
-        final int powerOfTwoSampleSize = exactSampleSize == 0 ? 0 : Integer.highestOneBit(exactSampleSize - 1);
+        final int powerOfTwoSampleSize = exactSampleSize == 0 ? 0 : Integer.highestOneBit(exactSampleSize);
 
         // Although functionally equivalent to 0 for BitmapFactory, 1 is a safer default for our code than 0.
         return Math.max(1, powerOfTwoSampleSize);

File: integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
Patch:
@@ -55,8 +55,6 @@ public String getId() {
 
     @Override
     public void cancel() {
-        if (request != null) {
-            client.cancel(request);
-        }
+        // TODO: call cancel on the client when this method is called on a background thread. See #257
     }
 }

File: library/src/androidTest/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
Patch:
@@ -282,11 +282,11 @@ public void testNotifiesParentOnFullRequestComplete_withNonNullParent() {
     }
 
     @Test
-    public void testDoesNotClearThumbRequestOnFullRequestComplete_withNonNullParent() {
+    public void testClearsThumbRequestOnFullRequestComplete_withNonNullParent() {
         coordinator = new ThumbnailRequestCoordinator(parent);
         coordinator.setRequests(full, thumb);
         coordinator.onRequestSuccess(full);
-        verify(thumb, never()).clear();
+        verify(thumb).clear();
     }
 
     @Test

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceEncoderTest.java
Patch:
@@ -63,6 +63,7 @@ public void setUp() {
 
         gifDrawable = mock(GifDrawable.class);
         when(gifDrawable.getFrameTransformation()).thenReturn(frameTransformation);
+        when(gifDrawable.getData()).thenReturn(new byte[0]);
 
         when(resource.get()).thenReturn(gifDrawable);
 

File: library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
 public class BitmapTypeRequestTest {
     private RequestManager.OptionsApplier optionsApplier;
     private BitmapTypeRequest request;

File: library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java
Patch:
@@ -20,10 +20,9 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
 public class DrawableTypeRequestTest {
     private DrawableTypeRequest<String> request;
-    private String model;
     private RequestManager.OptionsApplier optionsApplier;
 
     @SuppressWarnings("unchecked")

File: library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java
Patch:
@@ -16,6 +16,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
 import static org.mockito.Matchers.any;
@@ -26,6 +27,7 @@
 
 @SuppressWarnings("unchecked")
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GenericRequestBuilderTest {
     private RequestTracker requestTracker;
 

File: library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
 public class GenericTranscodeRequestTest {
     private RequestManager.OptionsApplier optionsApplier;
     private GenericTranscodeRequest<String, Object, Object> request;

File: library/src/androidTest/java/com/bumptech/glide/GifTypeRequestTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
 public class GifTypeRequestTest {
     private RequestManager.OptionsApplier optionsApplier;
     private GifTypeRequest<String> request;

File: library/src/androidTest/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -80,8 +80,8 @@
  * Tests for the {@link Glide} interface and singleton.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = { GlideTest.ShadowFileDescriptorContentResolver.class, GlideTest.ShadowMediaMetadataRetriever.class,
-        GlideShadowLooper.class, GlideTest.MutableShadowBitmap.class })
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = { GlideTest.ShadowFileDescriptorContentResolver.class,
+        GlideTest.ShadowMediaMetadataRetriever.class, GlideShadowLooper.class, GlideTest.MutableShadowBitmap.class })
 public class GlideTest {
     private Target target = null;
     private ImageView imageView;

File: library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -18,6 +19,7 @@
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ListPreloaderTest {
 
     @Test

File: library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.net.Uri;
-
 import com.bumptech.glide.load.model.GenericLoaderFactory;
 import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.load.model.ModelLoaderFactory;
@@ -17,7 +16,6 @@
 import com.bumptech.glide.manager.RequestTracker;
 import com.bumptech.glide.tests.BackgroundUtil;
 import com.bumptech.glide.tests.GlideShadowLooper;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -42,7 +40,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
 public class RequestManagerTest {
     private RequestManager manager;
     private ConnectivityMonitor connectivityMonitor;

File: library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -31,6 +32,7 @@
  * handling should go here.
  */
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class HttpUrlFetcherServerTest {
     private static final String DEFAULT_PATH = "/fakepath";
 

File: library/src/androidTest/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.Closeable;
 import java.io.FileNotFoundException;
@@ -20,6 +21,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class LocalUriFetcherTest {
     private TestLocalUriFetcher fetcher;
 

File: library/src/androidTest/java/com/bumptech/glide/load/data/MediaStoreThumbFetcherTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
@@ -23,6 +24,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class MediaStoreThumbFetcherTest {
     private Harness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/data/ThumbnailStreamOpenerFactoryTest.java
Patch:
@@ -6,11 +6,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ThumbnailStreamOpenerFactoryTest {
     private MediaStoreThumbFetcher.ThumbnailStreamOpenerFactory factory;
     private Uri uri;

File: library/src/androidTest/java/com/bumptech/glide/load/data/ThumbnailStreamOpenerTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 import org.robolectric.tester.android.database.SimpleTestCursor;
 import org.robolectric.tester.android.database.TestCursor;
 
@@ -25,6 +26,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ThumbnailStreamOpenerTest {
     private Harness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
Patch:
@@ -19,7 +19,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = { ContentResolverShadow.class })
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = { ContentResolverShadow.class })
 public class FileDescriptorLocalUriFetcherTest {
 
     @Test

File: library/src/androidTest/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
Patch:
@@ -9,12 +9,14 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.InputStream;
 
 import static org.junit.Assert.assertNotNull;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class StreamLocalUriFetcherTest {
 
     @Test

File: library/src/androidTest/java/com/bumptech/glide/load/engine/CacheLoaderTest.java
Patch:
@@ -3,11 +3,11 @@
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.cache.DiskCache;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.File;
 import java.io.IOException;
@@ -22,6 +22,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class CacheLoaderTest {
     private DiskCache diskCache;
     private CacheLoader cacheLoader;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java
Patch:
@@ -16,6 +16,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.File;
 import java.io.IOException;
@@ -37,6 +38,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class DecodeJobTest {
 
     private Harness harness;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLooper;
 
 import java.util.ArrayList;
@@ -33,6 +34,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class EngineJobTest {
     private EngineJobHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -16,6 +17,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class EngineResourceTest {
     private EngineResource<Object> engineResource;
     private EngineResource.ResourceListener listener;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/EngineRunnableTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
@@ -19,6 +20,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class EngineRunnableTest {
 
     private EngineRunnable.EngineRunnableManager manager;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java
Patch:
@@ -49,7 +49,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = { GlideShadowLooper.class })
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = { GlideShadowLooper.class })
 public class EngineTest {
     private static final String ID = "asdf";
     private EngineTestHarness harness;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
Patch:
@@ -8,13 +8,15 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ResourceRecyclerTest {
 
     private ResourceRecycler recycler;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
Patch:
@@ -5,12 +5,14 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowBitmap;
 
-import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class AttributeStrategyTest {
 
     private AttributeStrategy strategy;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowBitmap;
 
 import java.util.ArrayList;
@@ -26,6 +27,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class LruBitmapPoolTest {
     private static final int MAX_SIZE = 10;
     private MockStrategy strategy;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
Patch:
@@ -2,12 +2,12 @@
 
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.tests.Util;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.File;
 import java.io.IOException;
@@ -19,6 +19,7 @@
 import static org.junit.Assert.fail;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class DiskLruCacheWrapperTest {
     private DiskLruCacheWrapper cache;
     private byte[] data;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java
Patch:
@@ -5,9 +5,9 @@
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.assertFalse;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyObject;
 import static org.mockito.Matchers.eq;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.hamcrest.Matchers.lessThan;
 import static org.hamcrest.Matchers.lessThanOrEqualTo;
@@ -19,6 +20,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class MemorySizeCalculatorTest {
     private MemorySizeHarness harness;
     private int initialSdkVersion;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutorTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -15,6 +16,7 @@
 import static org.junit.Assert.assertThat;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class FifoPriorityThreadPoolExecutorTest {
 
     @Test

File: library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -38,6 +39,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class BitmapPreFillRunnerTest {
     private BitmapPreFillRunner.Clock clock;
     private BitmapPool pool;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerAllocationTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -24,6 +25,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class BitmapPreFillerAllocationTest {
     private static final int DEFAULT_BITMAP_WIDTH = 100;
     private static final int DEFAULT_BITMAP_HEIGHT = 50;

File: library/src/androidTest/java/com/bumptech/glide/load/model/GlideUrlTest.java
Patch:
@@ -3,13 +3,15 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.net.MalformedURLException;
 import java.net.URL;
 
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GlideUrlTest {
 
     @Test(expected = IllegalArgumentException.class)

File: library/src/androidTest/java/com/bumptech/glide/load/model/ImageVideoModelLoaderTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -23,6 +24,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ImageVideoModelLoaderTest {
     private ImageVideoLoaderHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/model/ImageVideoWrapperEncoderTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -23,6 +24,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ImageVideoWrapperEncoderTest {
     private Encoder<InputStream> streamEncoder;
     private Encoder<ParcelFileDescriptor> fileDescriptorEncoder;

File: library/src/androidTest/java/com/bumptech/glide/load/model/NullResourceEncoderTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.NullResourceEncoder;
-
 import org.junit.Before;
 import org.junit.Test;
 

File: library/src/androidTest/java/com/bumptech/glide/load/model/StreamEncoderTest.java
Patch:
@@ -4,13 +4,15 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class StreamEncoderTest {
     private StreamEncoder encoder;
 

File: library/src/androidTest/java/com/bumptech/glide/load/model/stream/MediaStoreStreamLoaderTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.InputStream;
 
@@ -14,6 +15,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class MediaStoreStreamLoaderTest {
 
     @Test

File: library/src/androidTest/java/com/bumptech/glide/load/model/stream/ResourceLoaderTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.InputStream;
 
@@ -21,6 +22,7 @@
  * Tests for the {@link StreamResourceLoader} class.
  */
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ResourceLoaderTest {
 
     @Test

File: library/src/androidTest/java/com/bumptech/glide/load/model/stream/StringLoaderTest.java
Patch:
@@ -3,12 +3,12 @@
 import android.net.Uri;
 import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.tests.Util;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.File;
 import java.io.IOException;
@@ -23,6 +23,7 @@
  * Tests for the {@link StreamStringLoader} class.
  */
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class StringLoaderTest {
     // Not a magic number, just an arbitrary non zero value.
     private static final int IMAGE_SIDE = 100;

File: library/src/androidTest/java/com/bumptech/glide/load/model/stream/UriLoaderTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.File;
 import java.io.IOException;
@@ -26,6 +27,7 @@
  * Tests for the {@link StreamUriLoader} class.
  */
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class UriLoaderTest {
     // Not a magic number, just arbitrary non zero.
     private static final int IMAGE_SIDE = 120;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.bumptech.glide.load.resource;
 
 import com.bumptech.glide.load.engine.Resource;
-
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
@@ -16,6 +17,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class BitmapDrawableResourceTest {
     private BitmapDrawableResourceHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = { BitmapEncoderTest.AlphaShadowBitmap.class })
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = { BitmapEncoderTest.AlphaShadowBitmap.class })
 public class BitmapEncoderTest {
     private EncoderHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -20,6 +21,7 @@
 
 //TODO: add a test for bitmap size using getAllocationByteSize when robolectric supports kitkat.
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class BitmapResourceTest {
     private int currentBuildVersion;
     private BitmapResourceHarness harness;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
Patch:
@@ -1,14 +1,13 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import android.graphics.Bitmap;
-
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
@@ -17,6 +16,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class BitmapTransformationTest {
 
     private BitmapPool bitmapPool;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
@@ -21,6 +22,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class CenterCropTest {
     private CenterCropHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.BufferedOutputStream;
 import java.io.File;
@@ -23,6 +24,7 @@
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class DownsamplerTest {
     private File tempFile;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
@@ -18,6 +19,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class FitCenterTest {
     private FitCenterHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/GlideBitmapDrawableResourceTest.java
Patch:
@@ -1,14 +1,13 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import android.graphics.Bitmap;
-
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
@@ -17,6 +16,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GlideBitmapDrawableResourceTest {
     private GlideBitmapDrawableResourceHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/GlideBitmapDrawableTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.instanceOf;
@@ -31,6 +32,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GlideBitmapDrawableTest {
 
     private Bitmap bitmap;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/ImageVideoBitmapDecoderTest.java
Patch:
@@ -2,14 +2,15 @@
 
 import android.graphics.Bitmap;
 import android.os.ParcelFileDescriptor;
-import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.ResourceDecoder;
+import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.model.ImageVideoWrapper;
 import com.bumptech.glide.tests.Util;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -24,6 +25,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ImageVideoBitmapDecoderTest {
     private ImageVideoDecoderHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoderTest.java
Patch:
@@ -1,14 +1,15 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import android.graphics.Bitmap;
-import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.tests.Util;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
@@ -22,6 +23,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class StreamBitmapDecoderTest {
     private DecoderHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.FileDescriptor;
 import java.io.IOException;
@@ -21,6 +22,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class VideoBitmapDecoderTest {
     private BitmapPool bitmapPool;
     private DecodeFormat decodeFormat;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
Patch:
@@ -3,20 +3,20 @@
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
 import android.graphics.drawable.Drawable;
-
 import com.bumptech.glide.load.resource.gif.GifDrawable;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class DrawableResourceTest {
     private TestDrawable drawable;
     private DrawableResource<TestDrawable> resource;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.bumptech.glide.load.resource.file;
 
 import com.bumptech.glide.load.engine.Resource;
-
 import org.junit.Before;
 import org.junit.Test;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/file/FileToStreamDecoderTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.Resource;
-
 import org.junit.Before;
 import org.junit.Test;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
Patch:
@@ -8,13 +8,15 @@
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GifDrawableResourceTest {
     private GifDrawable drawable;
     private GifDrawableResource resource;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -36,7 +36,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
 public class GifDrawableTest {
     private GifDecoder gifDecoder;
     private GifDrawable drawable;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
Patch:
@@ -1,16 +1,15 @@
 package com.bumptech.glide.load.resource.gif;
 
 import android.graphics.Bitmap;
-
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.resource.UnitTransformation;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
@@ -21,6 +20,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GifDrawableTransformationTest {
     Transformation<Bitmap> wrapped;
     GifDrawableTransformation transformation;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.IOException;
 
@@ -17,6 +18,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GifFrameResourceDecoderTest {
     private GifDecoder gifDecoder;
     private GifFrameResourceDecoder resourceDecoder;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java
Patch:
@@ -6,7 +6,6 @@
 import com.bumptech.glide.gifdecoder.GifHeaderParser;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.tests.GlideShadowLooper;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -31,7 +30,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
 public class GifResourceDecoderTest {
     private GifResourceDecoder decoder;
     private GifHeaderParser parser;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceEncoderTest.java
Patch:
@@ -14,6 +14,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.IOException;
 import java.io.OutputStream;
@@ -31,6 +32,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GifResourceEncoderTest {
     private Resource<GifDrawable> resource;
     private GifResourceEncoder encoder;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapResourceEncoderTest.java
Patch:
@@ -1,13 +1,14 @@
 package com.bumptech.glide.load.resource.gifbitmap;
 
 import android.graphics.Bitmap;
-import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.ResourceEncoder;
+import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStream;
@@ -23,6 +24,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GifBitmapResourceEncoderTest {
     private ResourceEncoder<Bitmap> bitmapEncoder;
     private ResourceEncoder<GifDrawable> gifEncoder;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapStreamResourceDecoderTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.resource.gifbitmap;
 
-import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.ResourceDecoder;
+import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.model.ImageVideoWrapper;
 import org.junit.Before;
 import org.junit.Test;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoderTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -34,6 +35,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GifBitmapWrapperResourceDecoderTest {
     private ResourceDecoder<ImageVideoWrapper, Bitmap> bitmapDecoder;
     private ResourceDecoder<InputStream, GifDrawable> gifDecoder;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperTransformationTest.java
Patch:
@@ -1,14 +1,15 @@
 package com.bumptech.glide.load.resource.gifbitmap;
 
 import android.graphics.Bitmap;
-import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
@@ -18,6 +19,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GifBitmapWrapperTransformationTest {
     private Transformation<Bitmap> bitmapTransformation;
     private Transformation<GifDrawable> gifTransformation;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.startsWith;
@@ -17,6 +18,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class BitmapBytesTranscoderTest {
     private BitmapBytesTranscoderHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/GifBitmapWrapperDrawableTranscoderTest.java
Patch:
@@ -1,24 +1,24 @@
 package com.bumptech.glide.load.resource.transcode;
 
 import android.graphics.Bitmap;
-
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper;
 import com.bumptech.glide.tests.Util;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GifBitmapWrapperDrawableTranscoderTest {
     private GifBitmapWrapperDrawableTranscoder transcoder;
     private ResourceTranscoder<Bitmap, GlideBitmapDrawable> bitmapTranscoder;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/GlideBitmapDrawableTranscoderTest.java
Patch:
@@ -1,23 +1,23 @@
 package com.bumptech.glide.load.resource.transcode;
 
 import android.graphics.Bitmap;
-
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable;
 import com.bumptech.glide.tests.Util;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GlideBitmapDrawableTranscoderTest {
     private GlideBitmapDrawableTranscoder transcoder;
 

File: library/src/androidTest/java/com/bumptech/glide/manager/ConnectivityMonitorFactoryTest.java
Patch:
@@ -5,12 +5,14 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.hamcrest.Matchers.instanceOf;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ConnectivityMonitorFactoryTest {
     private ConnectivityMonitorFactory factory;
 

File: library/src/androidTest/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowConnectivityManager;
 import org.robolectric.shadows.ShadowNetworkInfo;
 
@@ -25,6 +26,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class DefaultConnectivityMonitorTest {
     private ConnectivityMonitor.ConnectivityListener listener;
     private DefaultConnectivityMonitor monitor;

File: library/src/androidTest/java/com/bumptech/glide/manager/LifecycleTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -13,6 +14,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class LifecycleTest {
 
     private ActivityFragmentLifecycle lifecycle;

File: library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
Patch:
@@ -2,9 +2,7 @@
 
 import android.app.Activity;
 import android.support.v4.app.FragmentActivity;
-
 import com.bumptech.glide.RequestManager;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -21,7 +19,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class RequestManagerFragmentTest {
     private static final String TAG = "tag";
     private Harness[] harnesses;

File: library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
Patch:
@@ -32,7 +32,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
 public class RequestManagerRetrieverTest {
     private static final String PARENT_TAG = "parent";
     private RetrieverHarness[] harnesses;
@@ -41,12 +41,12 @@ public class RequestManagerRetrieverTest {
 
     @Before
     public void setUp() {
-        // Clear out static state.
         retriever = new RequestManagerRetriever();
 
         harnesses = new RetrieverHarness[] { new DefaultRetrieverHarness(), new SupportRetrieverHarness() };
 
         initialSdkVersion = Build.VERSION.SDK_INT;
+        Util.setSdkVersionInt(18);
     }
 
     @After

File: library/src/androidTest/java/com/bumptech/glide/provider/ChildLoadProviderTest.java
Patch:
@@ -5,7 +5,6 @@
 import com.bumptech.glide.load.ResourceEncoder;
 import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
-
 import org.junit.Before;
 import org.junit.Test;
 

File: library/src/androidTest/java/com/bumptech/glide/request/GenericRequestTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.File;
 import java.io.IOException;
@@ -53,6 +54,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GenericRequestTest {
     private RequestHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/request/RequestFutureTargetTest.java
Patch:
@@ -1,15 +1,14 @@
 package com.bumptech.glide.request;
 
 import android.os.Handler;
-
 import com.bumptech.glide.request.target.SizeReadyCallback;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
@@ -29,6 +28,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class RequestFutureTargetTest {
     private int width;
     private int height;

File: library/src/androidTest/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimationTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static com.bumptech.glide.request.animation.GlideAnimation.ViewAdapter;
 import static org.junit.Assert.assertFalse;
@@ -20,6 +21,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class DrawableCrossFadeViewAnimationTest {
     private CrossFadeHarness harness;
 

File: library/src/androidTest/java/com/bumptech/glide/request/animation/ViewAnimationTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static com.bumptech.glide.request.animation.GlideAnimation.ViewAdapter;
 import static org.junit.Assert.assertFalse;
@@ -15,6 +16,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ViewAnimationTest {
     private ViewAnimation<Object> viewAnimation;
     private ViewAdapter adapter;

File: library/src/androidTest/java/com/bumptech/glide/request/animation/ViewPropertyAnimationTest.java
Patch:
@@ -2,12 +2,12 @@
 
 import android.view.View;
 import android.widget.ImageView;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static com.bumptech.glide.request.animation.GlideAnimation.ViewAdapter;
 import static org.junit.Assert.assertFalse;
@@ -19,6 +19,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ViewPropertyAnimationTest {
     private ViewPropertyAnimation.Animator animator;
     private ViewPropertyAnimation animation;

File: library/src/androidTest/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
Patch:
@@ -3,16 +3,17 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 import android.widget.ImageView;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class BitmapImageViewTargetTest {
 
     private ImageView view;

File: library/src/androidTest/java/com/bumptech/glide/request/target/GlideDrawableImageViewTargetTest.java
Patch:
@@ -5,15 +5,14 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.widget.ImageView;
-
 import com.bumptech.glide.load.resource.drawable.GlideDrawable;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.not;
@@ -28,6 +27,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class GlideDrawableImageViewTargetTest {
 
     @Test

File: library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
Patch:
@@ -14,12 +14,14 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.hamcrest.Matchers.instanceOf;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ImageViewTargetFactoryTest {
     private ImageViewTargetFactory factory;
     private ImageView view;

File: library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
Patch:
@@ -4,14 +4,13 @@
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.widget.ImageView;
-
 import com.bumptech.glide.request.animation.GlideAnimation;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
@@ -22,6 +21,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ImageViewTargetTest {
 
     private ImageView view;

File: library/src/androidTest/java/com/bumptech/glide/request/target/PreloadTargetTest.java
Patch:
@@ -4,12 +4,14 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class PreloadTargetTest {
 
     @Test

File: library/src/androidTest/java/com/bumptech/glide/request/target/ViewTargetTest.java
Patch:
@@ -5,10 +5,8 @@
 import android.view.View;
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
-
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.animation.GlideAnimation;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -40,7 +38,8 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = { ViewTargetTest.SizedShadowView.class, ViewTargetTest.PreDrawShadowViewTreeObserver.class })
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = { ViewTargetTest.SizedShadowView.class,
+        ViewTargetTest.PreDrawShadowViewTreeObserver.class })
 public class ViewTargetTest {
     private View view;
     private ViewTarget target;

File: library/src/androidTest/java/com/bumptech/glide/resize/load/ExifTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -12,6 +13,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ExifTest {
 
     private InputStream open(String imageName) throws IOException {

File: library/src/androidTest/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
Patch:
@@ -7,13 +7,15 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import java.io.UnsupportedEncodingException;
 import java.security.NoSuchAlgorithmException;
 
 import static org.junit.Assert.assertNotNull;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ApplicationVersionSignatureTest {
 
     @After

File: library/src/androidTest/java/com/bumptech/glide/util/ByteArrayPoolTest.java
Patch:
@@ -4,13 +4,15 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class ByteArrayPoolTest {
 
     @Before

File: library/src/androidTest/java/com/bumptech/glide/util/TransformationUtilsTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = { TransformationUtilsTest.AlphaShadowBitmap.class })
+@Config(manifest = Config.NONE, emulateSdk = 18, shadows = { TransformationUtilsTest.AlphaShadowBitmap.class })
 public class TransformationUtilsTest {
 
     @Test

File: library/src/androidTest/java/com/bumptech/glide/util/UtilTest.java
Patch:
@@ -4,10 +4,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, emulateSdk = 18)
 public class UtilTest {
 
     @Test

File: library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillIdleHandler.java
Patch:
@@ -30,8 +30,8 @@ final class BitmapPreFillIdleHandler implements MessageQueue.IdleHandler {
     private final MemoryCache memoryCache;
     private final PreFillQueue toPrefill;
     private final Clock clock;
-    private final Set<PreFillBitmapAttribute> seenAttributes =
-        new HashSet<PreFillBitmapAttribute>();
+    private final Set<PreFillType> seenAttributes =
+        new HashSet<PreFillType>();
 
     private boolean isCancelled;
 
@@ -57,7 +57,7 @@ public void cancel() {
     public boolean queueIdle() {
         long start = clock.now();
         while (!toPrefill.isEmpty() && (clock.now() - start) < MAX_DURATION_MILLIS) {
-            PreFillBitmapAttribute toAllocate = toPrefill.remove();
+            PreFillType toAllocate = toPrefill.remove();
             Bitmap bitmap = Bitmap.createBitmap(toAllocate.getWidth(), toAllocate.getHeight(),
                     toAllocate.getConfig());
 

File: library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java
Patch:
@@ -25,8 +25,8 @@ public boolean encode(InputStream data, OutputStream os) {
             }
             return true;
         } catch (IOException e) {
-            if (Log.isLoggable(TAG, Log.WARN)) {
-                Log.w(TAG, "Failed to encode data onto the OutputStream", e);
+            if (Log.isLoggable(TAG, Log.DEBUG)) {
+                Log.d(TAG, "Failed to encode data onto the OutputStream", e);
             }
             return false;
         } finally {

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -207,7 +207,7 @@ static void tearDown() {
         dataLoadProviderRegistry.register(ImageVideoWrapper.class, Bitmap.class, imageVideoDataLoadProvider);
 
         GifDrawableLoadProvider gifDrawableLoadProvider =
-                new GifDrawableLoadProvider(context, bitmapPool, decodeFormat);
+                new GifDrawableLoadProvider(context, bitmapPool);
         dataLoadProviderRegistry.register(InputStream.class, GifDrawable.class, gifDrawableLoadProvider);
 
         dataLoadProviderRegistry.register(ImageVideoWrapper.class, GifBitmapWrapper.class,

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableLoadProvider.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 
-import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.provider.DataLoadProvider;
 import com.bumptech.glide.load.Encoder;
 import com.bumptech.glide.load.ResourceDecoder;
@@ -24,8 +23,8 @@ public class GifDrawableLoadProvider implements DataLoadProvider<InputStream, Gi
     private final StreamEncoder sourceEncoder;
     private final FileToStreamDecoder<GifDrawable> cacheDecoder;
 
-    public GifDrawableLoadProvider(Context context, BitmapPool bitmapPool, DecodeFormat decodeFormat) {
-        decoder = new GifResourceDecoder(context, bitmapPool, decodeFormat);
+    public GifDrawableLoadProvider(Context context, BitmapPool bitmapPool) {
+        decoder = new GifResourceDecoder(context, bitmapPool);
         cacheDecoder = new FileToStreamDecoder<GifDrawable>(decoder);
         encoder = new GifResourceEncoder(bitmapPool);
         sourceEncoder = new StreamEncoder();

File: library/src/main/java/com/bumptech/glide/DownloadOptions.java
Patch:
@@ -21,8 +21,8 @@ interface DownloadOptions {
      * Loads the original unmodified data into the cache and returns a {@link java.util.concurrent.Future} that can be
      * used to retrieve the cache File containing the data.
      *
-     * @param width The width to use to fetch the data.
-     * @param height The height to use to fetch the data.
+     * @param width The width in pixels to use to fetch the data.
+     * @param height The height in pixels to use to fetch the data.
      * @return A {@link java.util.concurrent.Future} that can be used to retrieve the cache File containing the data.
      */
     FutureTarget<File> downloadOnly(int width, int height);

File: library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java
Patch:
@@ -26,8 +26,8 @@ public interface ResourceDecoder<T, Z> {
      * </p>
      *
      * @param source The data the resource should be decoded from.
-     * @param width The ideal width of the decoded resource.
-     * @param height The ideal height of the decoded resource.
+     * @param width The ideal width in pixels of the decoded resource.
+     * @param height The ideal height in pixels of the decoded resource.
      * @throws IOException
      */
     Resource<Z> decode(T source, int width, int height) throws IOException;

File: library/src/main/java/com/bumptech/glide/load/engine/Engine.java
Patch:
@@ -120,8 +120,8 @@ public Engine(MemoryCache memoryCache, DiskCache diskCache, ExecutorService disk
      *
      * @param signature A non-null unique key to be mixed into the cache key that identifies the version of the data to
      *                  be loaded.
-     * @param width The target width of the retrieved resource.
-     * @param height The target height of the retrieved resource.
+     * @param width The target width in pixels of the desired resource.
+     * @param height The target height in pixels of the desired resource.
      * @param fetcher The fetcher to use to retrieve data not in the disk cache.
      * @param loadProvider The load provider containing various encoders and decoders use to decode and encode data.
      * @param transformation The transformation to use to transform the decoded resource.

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
Patch:
@@ -37,8 +37,8 @@ public interface ModelLoader<T, Y> {
      * </p>
      *
      * @param model The model representing the resource.
-     * @param width The width of the view or target the resource will be loaded into
-     * @param height The height of the view or target the resource will be loaded into
+     * @param width The width in pixels of the view or target the resource will be loaded into
+     * @param height The height in pixels of the view or target the resource will be loaded into
      * @return A {@link DataFetcher} that can obtain the data the resource can be decoded from if the resource is not
      * cached, or null if no valid {@link com.bumptech.glide.load.data.DataFetcher} could be constructed.
      */

File: library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
Patch:
@@ -14,8 +14,8 @@ public final class PreloadTarget<Z> extends SimpleTarget<Z> {
     /**
      * Returns a PreloadTarget.
      *
-     * @param width The width of the desired resourece.
-     * @param height The height of the desired resource.
+     * @param width The width in pixels of the desired resource.
+     * @param height The height in pixels of the desired resource.
      * @param <Z> The type of the desired resource.
      */
     public static <Z> PreloadTarget<Z> obtain(int width, int height) {

File: library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
Patch:
@@ -44,8 +44,8 @@ public SimpleTarget() {
     /**
      * Constructor for the target that takes the desired dimensions of the decoded and/or transformed resource.
      *
-     * @param width The desired width of the resource.
-     * @param height The desired height of the resource.
+     * @param width The width in pixels of the desired resource.
+     * @param height The height in pixels of the desired resource.
      */
     public SimpleTarget(int width, int height) {
         this.width = width;

File: library/src/main/java/com/bumptech/glide/request/target/SizeReadyCallback.java
Patch:
@@ -8,8 +8,8 @@ public interface SizeReadyCallback {
     /**
      * A callback called on the main thread.
      *
-     * @param width The width of the target.
-     * @param height The height of the target.
+     * @param width The width in pixels of the target.
+     * @param height The height in pixels of the target.
      */
     void onSizeReady(int width, int height);
 }

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
Patch:
@@ -135,8 +135,8 @@ public interface BitmapProvider {
          * Returns an {@link Bitmap} with exactly the given dimensions and config, or null if no such {@link Bitmap}
          * could be obtained.
          *
-         * @param width The width of the desired {@link android.graphics.Bitmap}.
-         * @param height The height of the desired {@link android.graphics.Bitmap}.
+         * @param width The width in pixels of the desired {@link android.graphics.Bitmap}.
+         * @param height The height in pixels of the desired {@link android.graphics.Bitmap}.
          * @param config The {@link android.graphics.Bitmap.Config} of the desired {@link android.graphics.Bitmap}.
          */
         public Bitmap obtain(int width, int height, Bitmap.Config config);

File: library/src/main/java/com/bumptech/glide/DrawableOptions.java
Patch:
@@ -41,6 +41,7 @@ interface DrawableOptions {
      * asked to start an animation using a single {@link android.view.animation.Animation} object which results in
      * views animating repeatedly. Use {@link #crossFade(int, int)}} instead, or be sure to call this method once
      * per call to {@link com.bumptech.glide.GenericRequestBuilder#load(Object)} to avoid re-using animation objects.
+     * Scheduled to be removed in Glide 4.0.
      * @param animation The Animation to use if no placeholder is set.
      * @param duration The duration of the cross fade animation.
      * @return This request builder.

File: library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java
Patch:
@@ -380,7 +380,8 @@ public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> a
      * @deprecated If this builder is used for multiple loads, using this method will result in multiple view's being
      * asked to start an animation using a single {@link android.view.animation.Animation} object which results in
      * views animating repeatedly. Use {@link #animate(int)} or
-     * {@link #animate(com.bumptech.glide.request.animation.ViewPropertyAnimation.Animator)}.
+     * {@link #animate(com.bumptech.glide.request.animation.ViewPropertyAnimation.Animator)}. Scheduled to be removed in
+     * Glide 4.0.
      * @param animation The animation to run
      * @return This request builder.
      */

File: library/src/main/java/com/bumptech/glide/load/model/GenericLoaderFactory.java
Patch:
@@ -98,7 +98,7 @@ public synchronized <T, Y> ModelLoaderFactory<T, Y> register(Class<T> modelClass
      * {@link ModelLoader} or building a new a new {@link ModelLoader} using registered {@link ModelLoaderFactory}s.
      * Returns null if no {@link ModelLoaderFactory} is registered for the given classes.
      *
-     * @deprecated Use {@link #buildModelLoader(Class, Class)} instead.
+     * @deprecated Use {@link #buildModelLoader(Class, Class)} instead. Scheduled to be removed in Glide 4.0.
      * @param modelClass The model class.
      * @param resourceClass The resource class.
      * @param context Unused

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamByteArrayLoader.java
Patch:
@@ -22,7 +22,7 @@ public StreamByteArrayLoader() {
 
     /**
      * @deprecated Use {@link com.bumptech.glide.GenericRequestBuilder#signature(com.bumptech.glide.load.Key)}
-     * and the empty constructor instead.
+     * and the empty constructor instead. Scheduled to be removed in Glide 4.0.
      */
     @Deprecated
     public StreamByteArrayLoader(String id) {

File: library/src/main/java/com/bumptech/glide/util/Util.java
Patch:
@@ -53,7 +53,8 @@ private static String bytesToHex(byte[] bytes, char[] hexChars) {
      *
      * @see #getBitmapByteSize(android.graphics.Bitmap)
      *
-     * @deprecated
+     * @deprecated Use {@link #getBitmapByteSize(android.graphics.Bitmap)} instead. Scheduled to be removed in Glide
+     * 4.0.
      */
     @Deprecated
     public static int getSize(Bitmap bitmap) {

File: library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java
Patch:
@@ -391,7 +391,7 @@ public BitmapRequestBuilder<ModelType, TranscodeType> error(Drawable drawable) {
      */
     @Override
     public BitmapRequestBuilder<ModelType, TranscodeType> listener(
-            RequestListener<ModelType, TranscodeType> requestListener) {
+            RequestListener<? super ModelType, TranscodeType> requestListener) {
         super.listener(requestListener);
         return this;
     }

File: library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java
Patch:
@@ -350,7 +350,8 @@ public DrawableRequestBuilder<ModelType> error(Drawable drawable) {
      * {@inheritDoc}
      */
     @Override
-    public DrawableRequestBuilder<ModelType> listener(RequestListener<ModelType, GlideDrawable> requestListener) {
+    public DrawableRequestBuilder<ModelType> listener(
+            RequestListener<? super ModelType, GlideDrawable> requestListener) {
         super.listener(requestListener);
         return this;
     }

File: library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java
Patch:
@@ -60,7 +60,7 @@ public class GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeT
     private boolean isModelSet;
     private int placeholderId;
     private int errorId;
-    private RequestListener<ModelType, TranscodeType> requestListener;
+    private RequestListener<? super ModelType, TranscodeType> requestListener;
     private Float thumbSizeMultiplier;
     private GenericRequestBuilder<?, ?, ?, TranscodeType> thumbnailRequestBuilder;
     private Float sizeMultiplier = 1f;
@@ -474,7 +474,7 @@ public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> e
      * @return This request builder.
      */
     public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> listener(
-            RequestListener<ModelType, TranscodeType> requestListener) {
+            RequestListener<? super ModelType, TranscodeType> requestListener) {
         this.requestListener = requestListener;
 
         return this;

File: library/src/main/java/com/bumptech/glide/GifRequestBuilder.java
Patch:
@@ -341,7 +341,7 @@ public GifRequestBuilder<ModelType> error(Drawable drawable) {
      */
     @Override
     public GifRequestBuilder<ModelType> listener(
-            RequestListener<ModelType, GifDrawable> requestListener) {
+            RequestListener<? super ModelType, GifDrawable> requestListener) {
         super.listener(requestListener);
         return this;
     }

File: library/src/main/java/com/bumptech/glide/request/GenericRequest.java
Patch:
@@ -67,7 +67,7 @@ private enum Status {
     private boolean isMemoryCacheable;
     private Priority priority;
     private Target<R> target;
-    private RequestListener<A, R> requestListener;
+    private RequestListener<? super A, R> requestListener;
     private float sizeMultiplier;
     private Engine engine;
     private GlideAnimationFactory<R> animationFactory;
@@ -96,7 +96,7 @@ public static <A, T, Z, R> GenericRequest<A, T, Z, R> obtain(
             int placeholderResourceId,
             Drawable errorDrawable,
             int errorResourceId,
-            RequestListener<A, R> requestListener,
+            RequestListener<? super A, R> requestListener,
             RequestCoordinator requestCoordinator,
             Engine engine,
             Transformation<Z> transformation,
@@ -168,7 +168,7 @@ private void init(
             int placeholderResourceId,
             Drawable errorDrawable,
             int errorResourceId,
-            RequestListener<A, R> requestListener,
+            RequestListener<? super A, R> requestListener,
             RequestCoordinator requestCoordinator,
             Engine engine,
             Transformation<Z> transformation,

File: samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java
Patch:
@@ -66,15 +66,15 @@ public void onClick(View view) {
                         .transcode(new BitmapToGlideDrawableTranscoder(this), GlideDrawable.class)
                         .diskCacheStrategy(DiskCacheStrategy.SOURCE)
                 )
-                .listener(new RequestListener<String, GlideDrawable>() {
+                .listener(new RequestListener<Object, GlideDrawable>() {
                     @Override
-                    public boolean onException(Exception e, String model, Target<GlideDrawable> target,
+                    public boolean onException(Exception e, Object model, Target<GlideDrawable> target,
                             boolean isFirstResource) {
                         return false;
                     }
 
                     @Override
-                    public boolean onResourceReady(GlideDrawable resource, String model, Target<GlideDrawable> target,
+                    public boolean onResourceReady(GlideDrawable resource, Object model, Target<GlideDrawable> target,
                             boolean isFromMemoryCache, boolean isFirstResource) {
                         if (resource instanceof GifDrawable) {
                             gifDrawable = (GifDrawable) resource;

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -82,7 +82,7 @@ public class Glide {
     private static final String TAG = "Glide";
     private static volatile Glide glide;
 
-    private final GenericLoaderFactory loaderFactory = new GenericLoaderFactory();
+    private final GenericLoaderFactory loaderFactory;
     private final Engine engine;
     private final BitmapPool bitmapPool;
     private final MemoryCache memoryCache;
@@ -188,6 +188,7 @@ static void tearDown() {
         this.bitmapPool = bitmapPool;
         this.memoryCache = memoryCache;
         this.decodeFormat = decodeFormat;
+        loaderFactory = new GenericLoaderFactory(context);
         mainHandler = new Handler(Looper.getMainLooper());
         bitmapPreFiller = new BitmapPreFiller(memoryCache, bitmapPool);
 
@@ -492,7 +493,7 @@ public static <T, Y> ModelLoader<T, Y> buildModelLoader(Class<T> modelClass, Cla
             }
             return null;
         }
-        return Glide.get(context).getLoaderFactory().buildModelLoader(modelClass, resourceClass, context);
+        return Glide.get(context).getLoaderFactory().buildModelLoader(modelClass, resourceClass);
     }
 
     /**

File: library/src/main/java/com/bumptech/glide/RequestManager.java
Patch:
@@ -52,7 +52,7 @@ public RequestManager(Context context, Lifecycle lifecycle) {
 
     RequestManager(Context context, final Lifecycle lifecycle, RequestTracker requestTracker,
             ConnectivityMonitorFactory factory) {
-        this.context = context;
+        this.context = context.getApplicationContext();
         this.lifecycle = lifecycle;
         this.requestTracker = requestTracker;
         this.glide = Glide.get(context);

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorFileLoader.java
Patch:
@@ -24,8 +24,7 @@ public class FileDescriptorFileLoader extends FileLoader<ParcelFileDescriptor>
     public static class Factory implements ModelLoaderFactory<File, ParcelFileDescriptor> {
         @Override
         public ModelLoader<File, ParcelFileDescriptor> build(Context context, GenericLoaderFactory factories) {
-            return new FileDescriptorFileLoader(factories.buildModelLoader(Uri.class, ParcelFileDescriptor.class,
-                    context));
+            return new FileDescriptorFileLoader(factories.buildModelLoader(Uri.class, ParcelFileDescriptor.class));
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorResourceLoader.java
Patch:
@@ -23,7 +23,7 @@ public static class Factory implements ModelLoaderFactory<Integer, ParcelFileDes
         @Override
         public ModelLoader<Integer, ParcelFileDescriptor> build(Context context, GenericLoaderFactory factories) {
             return new FileDescriptorResourceLoader(context, factories.buildModelLoader(Uri.class,
-                    ParcelFileDescriptor.class, context));
+                    ParcelFileDescriptor.class));
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorStringLoader.java
Patch:
@@ -22,8 +22,7 @@ public class FileDescriptorStringLoader extends StringLoader<ParcelFileDescripto
     public static class Factory implements ModelLoaderFactory<String, ParcelFileDescriptor> {
         @Override
         public ModelLoader<String, ParcelFileDescriptor> build(Context context, GenericLoaderFactory factories) {
-            return new FileDescriptorStringLoader(factories.buildModelLoader(Uri.class, ParcelFileDescriptor.class,
-                    context));
+            return new FileDescriptorStringLoader(factories.buildModelLoader(Uri.class, ParcelFileDescriptor.class));
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorUriLoader.java
Patch:
@@ -25,7 +25,7 @@ public static class Factory implements ModelLoaderFactory<Uri, ParcelFileDescrip
         @Override
         public ModelLoader<Uri, ParcelFileDescriptor> build(Context context, GenericLoaderFactory factories) {
             return new FileDescriptorUriLoader(context, factories.buildModelLoader(GlideUrl.class,
-                    ParcelFileDescriptor.class, context));
+                    ParcelFileDescriptor.class));
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamFileLoader.java
Patch:
@@ -22,7 +22,7 @@ public class StreamFileLoader extends FileLoader<InputStream> implements StreamM
     public static class Factory implements ModelLoaderFactory<File, InputStream> {
         @Override
         public ModelLoader<File, InputStream> build(Context context, GenericLoaderFactory factories) {
-            return new StreamFileLoader(factories.buildModelLoader(Uri.class, InputStream.class, context));
+            return new StreamFileLoader(factories.buildModelLoader(Uri.class, InputStream.class));
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamResourceLoader.java
Patch:
@@ -22,7 +22,7 @@ public static class Factory implements ModelLoaderFactory<Integer, InputStream>
 
         @Override
         public ModelLoader<Integer, InputStream> build(Context context, GenericLoaderFactory factories) {
-            return new StreamResourceLoader(context, factories.buildModelLoader(Uri.class, InputStream.class, context));
+            return new StreamResourceLoader(context, factories.buildModelLoader(Uri.class, InputStream.class));
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamStringLoader.java
Patch:
@@ -22,7 +22,7 @@ public class StreamStringLoader extends StringLoader<InputStream> implements Str
     public static class Factory implements ModelLoaderFactory<String, InputStream> {
         @Override
         public ModelLoader<String, InputStream> build(Context context, GenericLoaderFactory factories) {
-            return new StreamStringLoader(factories.buildModelLoader(Uri.class, InputStream.class, context));
+            return new StreamStringLoader(factories.buildModelLoader(Uri.class, InputStream.class));
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamUriLoader.java
Patch:
@@ -28,7 +28,7 @@ public static class Factory implements ModelLoaderFactory<Uri, InputStream> {
 
         @Override
         public ModelLoader<Uri, InputStream> build(Context context, GenericLoaderFactory factories) {
-            return new StreamUriLoader(context, factories.buildModelLoader(GlideUrl.class, InputStream.class, context));
+            return new StreamUriLoader(context, factories.buildModelLoader(GlideUrl.class, InputStream.class));
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamUrlLoader.java
Patch:
@@ -23,7 +23,7 @@ public class StreamUrlLoader extends UrlLoader<InputStream> {
     public static class Factory implements ModelLoaderFactory<URL, InputStream> {
         @Override
         public ModelLoader<URL, InputStream> build(Context context, GenericLoaderFactory factories) {
-            return new StreamUrlLoader(factories.buildModelLoader(GlideUrl.class, InputStream.class, context));
+            return new StreamUrlLoader(factories.buildModelLoader(GlideUrl.class, InputStream.class));
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/request/GenericRequest.java
Patch:
@@ -181,7 +181,7 @@ private void init(
         this.loadProvider = loadProvider;
         this.model = model;
         this.signature = signature;
-        this.context = context;
+        this.context = context.getApplicationContext();
         this.priority = priority;
         this.target = target;
         this.sizeMultiplier = sizeMultiplier;

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.UUID;
 
 class GifFrameManager {
-    /** 60fps is {@value #MIN_FRAME_DELAY}ms per frame. */
-    private static final long MIN_FRAME_DELAY = 1000 / 60;
     private final GifFrameModelLoader frameLoader;
     private final GifFrameResourceDecoder frameResourceDecoder;
     private final GifDecoder decoder;
@@ -73,7 +71,7 @@ Transformation<Bitmap> getTransformation() {
     public void getNextFrame(FrameCallback cb) {
         decoder.advance();
 
-        long targetTime = SystemClock.uptimeMillis() + Math.max(MIN_FRAME_DELAY, decoder.getNextDelay());
+        long targetTime = SystemClock.uptimeMillis() + decoder.getNextDelay();
         next = new DelayTarget(cb, targetTime);
         next.setFrameIndex(decoder.getCurrentFrameIndex());
 

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
Patch:
@@ -202,7 +202,7 @@ public int getDelay(int n) {
     }
 
     /**
-     * Gets display duration for the upcoming frame.
+     * Gets display duration for the upcoming frame in ms.
      */
     public int getNextDelay() {
         if (header.frameCount <= 0 || framePointer < 0) {

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -307,8 +307,8 @@ public void testReturnsNewDrawableFromConstantState() {
         Transformation<Bitmap> transformation = mock(Transformation.class);
         GifDecoder.BitmapProvider provider = mock(GifDecoder.BitmapProvider.class);
         Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
-        drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100, "fakeId",
-                gifHeader, new byte[0], firstFrame);
+        drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100,  gifHeader,
+                new byte[0], firstFrame);
 
         assertNotNull(drawable.getConstantState().newDrawable());
         assertNotNull(drawable.getConstantState().newDrawable(Robolectric.application.getResources()));

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java
Patch:
@@ -14,6 +14,6 @@ public class GifFrameManagerTest {
 
     @Test(expected = NullPointerException.class)
     public void testThrowsIfTransformationIsNull() {
-        new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100, 75, 75);
+        new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100);
     }
 }
\ No newline at end of file

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameModelLoaderTest.java
Patch:
@@ -22,15 +22,13 @@ public void setUp() {
     }
 
     @Test
-    public void testFetcherIdIncludesGifDecoderIdAndFrameIndex() {
+    public void testFetcherIdIncludesFrameIndex() {
         String id = "asdfasd";
         int frameIndex = 124;
-        when(decoder.getId()).thenReturn(id);
         when(decoder.getCurrentFrameIndex()).thenReturn(frameIndex);
 
         String fetcherId = loader.getResourceFetcher(decoder, 1, 2).getId();
 
-        assertThat(fetcherId, containsString(id));
         assertThat(fetcherId, containsString(String.valueOf(frameIndex)));
     }
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java
Patch:
@@ -127,7 +127,7 @@ public void testDecodesFirstFrameAndReturnsGifDecoderToPool() {
 
         InOrder order = inOrder(decoderPool, gifDecoder);
         order.verify(decoderPool).obtain(any(GifDecoder.BitmapProvider.class));
-        order.verify(gifDecoder).setData(any(String.class), eq(gifHeader), eq(data));
+        order.verify(gifDecoder).setData(eq(gifHeader), eq(data));
         order.verify(gifDecoder).advance();
         order.verify(gifDecoder).getNextFrame();
         order.verify(decoderPool).release(eq(gifDecoder));

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameModelLoader.java
Patch:
@@ -31,7 +31,7 @@ public void cleanup() {
 
         @Override
         public String getId() {
-            return decoder.getId() + decoder.getCurrentFrameIndex();
+            return String.valueOf(decoder.getCurrentFrameIndex());
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java
Patch:
@@ -25,7 +25,8 @@ public CenterCrop(BitmapPool bitmapPool) {
     @SuppressWarnings("PMD.CompareObjectsWithEquals")
     @Override
     protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
-        final Bitmap toReuse = pool.get(outWidth, outHeight, toTransform.getConfig());
+        final Bitmap toReuse = pool.get(outWidth, outHeight, toTransform.getConfig() != null
+                ? toTransform.getConfig() : Bitmap.Config.ARGB_8888);
         Bitmap transformed = TransformationUtils.centerCrop(toReuse, toTransform, outWidth, outHeight);
         if (toReuse != null && toReuse != transformed && !pool.put(toReuse)) {
             toReuse.recycle();

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java
Patch:
@@ -45,6 +45,9 @@ private void reset() {
     }
 
     public GifHeader parseHeader() {
+        if (rawData == null) {
+            throw new IllegalStateException("You must call setData() before parseHeader()");
+        }
         if (err()) {
             return header;
         }

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java
Patch:
@@ -14,6 +14,6 @@ public GifBitmapProvider(BitmapPool bitmapPool) {
 
     @Override
     public Bitmap obtain(int width, int height, Bitmap.Config config) {
-        return bitmapPool.get(width, height, config);
+        return bitmapPool.getDirty(width, height, config);
     }
 }

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java
Patch:
@@ -197,7 +197,8 @@ public void setColorFilter(ColorFilter colorFilter) {
 
     @Override
     public int getOpacity() {
-        return decoder.isTransparent() ? PixelFormat.TRANSPARENT : PixelFormat.OPAQUE;
+        // We can't tell, so default to transparent to be safe.
+        return PixelFormat.TRANSPARENT;
     }
 
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeader.java
Patch:
@@ -34,7 +34,6 @@ public class GifHeader {
     int pixelAspect;
     //TODO: this is set both during reading the header and while decoding frames...
     int bgColor;
-    boolean isTransparent;
     int loopCount;
 
     public int getHeight() {

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java
Patch:
@@ -143,7 +143,6 @@ private void readGraphicControlExt() {
             header.currentFrame.dispose = 1;
         }
         header.currentFrame.transparency = (packed & 1) != 0;
-        header.isTransparent |= header.currentFrame.transparency;
         // Delay in milliseconds.
         header.currentFrame.delay = readShort() * 10;
         // Transparent color index

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDataLoadProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.graphics.Bitmap;
 
+import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.provider.DataLoadProvider;
 import com.bumptech.glide.load.Encoder;
 import com.bumptech.glide.load.ResourceDecoder;
@@ -23,9 +24,9 @@ public class StreamBitmapDataLoadProvider implements DataLoadProvider<InputStrea
     private final StreamEncoder sourceEncoder;
     private final FileToStreamDecoder<Bitmap> cacheDecoder;
 
-    public StreamBitmapDataLoadProvider(BitmapPool bitmapPool) {
+    public StreamBitmapDataLoadProvider(BitmapPool bitmapPool, DecodeFormat decodeFormat) {
         sourceEncoder = new StreamEncoder();
-        decoder = new StreamBitmapDecoder(bitmapPool);
+        decoder = new StreamBitmapDecoder(bitmapPool, decodeFormat);
         encoder = new BitmapEncoder();
         cacheDecoder = new FileToStreamDecoder<Bitmap>(decoder);
     }

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableLoadProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 
+import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.provider.DataLoadProvider;
 import com.bumptech.glide.load.Encoder;
 import com.bumptech.glide.load.ResourceDecoder;
@@ -23,8 +24,8 @@ public class GifDrawableLoadProvider implements DataLoadProvider<InputStream, Gi
     private final StreamEncoder sourceEncoder;
     private final FileToStreamDecoder<GifDrawable> cacheDecoder;
 
-    public GifDrawableLoadProvider(Context context, BitmapPool bitmapPool) {
-        decoder = new GifResourceDecoder(context, bitmapPool);
+    public GifDrawableLoadProvider(Context context, BitmapPool bitmapPool, DecodeFormat decodeFormat) {
+        decoder = new GifResourceDecoder(context, bitmapPool, decodeFormat);
         cacheDecoder = new FileToStreamDecoder<GifDrawable>(decoder);
         encoder = new GifResourceEncoder(bitmapPool);
         sourceEncoder = new StreamEncoder();

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -202,7 +202,7 @@ static void tearDown() {
         dataLoadProviderRegistry.register(InputStream.class, GifDrawable.class, gifDrawableLoadProvider);
 
         dataLoadProviderRegistry.register(ImageVideoWrapper.class, GifBitmapWrapper.class,
-                new ImageVideoGifDrawableLoadProvider(imageVideoDataLoadProvider, gifDrawableLoadProvider));
+                new ImageVideoGifDrawableLoadProvider(imageVideoDataLoadProvider, gifDrawableLoadProvider, bitmapPool));
 
         dataLoadProviderRegistry.register(InputStream.class, File.class, new StreamFileDataLoadProvider());
 

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
Patch:
@@ -17,7 +17,7 @@
  * public class FillSpace extends BaseBitmapTransformation {
  *     {@literal @Override}
  *     public Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
- *         if (toTransform.getWidth() == outWidth && toTransform.getHeight == outHeight) {
+ *         if (toTransform.getWidth() == outWidth && toTransform.getHeight() == outHeight) {
  *             return toTransform;
  *         }
  *

File: library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java
Patch:
@@ -82,6 +82,8 @@ public class GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeT
         this(other.context, other.model, loadProvider, transcodeClass, other.glide, other.requestTracker,
                 other.lifecycle);
         this.signature = other.signature;
+        this.diskCacheStrategy = other.diskCacheStrategy;
+        this.isCacheable = other.isCacheable;
     }
 
     GenericRequestBuilder(Context context, ModelType model,

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -30,6 +30,7 @@
 import com.bumptech.glide.load.model.file_descriptor.FileDescriptorStringLoader;
 import com.bumptech.glide.load.model.file_descriptor.FileDescriptorUriLoader;
 import com.bumptech.glide.load.model.stream.HttpUrlGlideUrlLoader;
+import com.bumptech.glide.load.model.stream.StreamByteArrayLoader;
 import com.bumptech.glide.load.model.stream.StreamFileLoader;
 import com.bumptech.glide.load.model.stream.StreamResourceLoader;
 import com.bumptech.glide.load.model.stream.StreamStringLoader;
@@ -217,6 +218,7 @@ static void tearDown() {
         register(Uri.class, InputStream.class, new StreamUriLoader.Factory());
         register(URL.class, InputStream.class, new StreamUrlLoader.Factory());
         register(GlideUrl.class, InputStream.class, new HttpUrlGlideUrlLoader.Factory());
+        register(byte[].class, InputStream.class, new StreamByteArrayLoader.Factory());
 
         transcoderRegistry.register(Bitmap.class, GlideBitmapDrawable.class,
                 new GlideBitmapDrawableTranscoder(context.getResources(), bitmapPool));

File: library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java
Patch:
@@ -47,7 +47,6 @@ private static Key obtainVersionSignature(Context context) {
             // Should never happen.
             e.printStackTrace();
         }
-
         final String versionCode;
         if (pInfo != null) {
             versionCode = String.valueOf(pInfo.versionCode);

File: library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java
Patch:
@@ -5,7 +5,6 @@
 import com.bumptech.glide.manager.Lifecycle;
 import com.bumptech.glide.manager.RequestTracker;
 import com.bumptech.glide.tests.GlideShadowLooper;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -36,8 +35,8 @@ public void setUp() {
         when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));
         model = "testModel";
         request = new GenericTranscodeRequest<String, Object, Object>(Robolectric.application,
-                Glide.get(Robolectric.application), model, mock(ModelLoader.class), Object.class, Object.class,
-                mock(RequestTracker.class), mock(Lifecycle.class), optionsApplier);
+                Glide.get(Robolectric.application), model, mock(ModelLoader.class), Object.class,
+                Object.class, mock(RequestTracker.class), mock(Lifecycle.class), optionsApplier);
     }
 
     @After

File: library/src/androidTest/java/com/bumptech/glide/load/model/stream/MediaStoreStreamLoaderTest.java
Patch:
@@ -23,7 +23,7 @@ public void testRetrievesFetcherFromWrappedUriLoader() {
         int height = 456;
         String mimeType = "video/";
         ModelLoader<Uri, InputStream> wrapped = mock(ModelLoader.class);
-        MediaStoreStreamLoader loader = new MediaStoreStreamLoader(Robolectric.application, wrapped, mimeType, 1234, 4);
+        MediaStoreStreamLoader loader = new MediaStoreStreamLoader(Robolectric.application, wrapped);
 
         loader.getResourceFetcher(uri, width, height);
         verify(wrapped).getResourceFetcher(eq(uri), eq(width), eq(height));

File: third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java
Patch:
@@ -227,9 +227,7 @@ public void setFrameRate(float fps) {
      * default, and produces good color mapping at reasonable speeds. Values
      * greater than 20 do not yield significant improvements in speed.
      *
-     * @param quality
-     *          int greater than 0.
-     * @return
+     * @param quality int greater than 0.
      */
     public void setQuality(int quality) {
         if (quality < 1)

File: library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java
Patch:
@@ -148,7 +148,7 @@ public BitmapRequestBuilder<ModelType, TranscodeType> thumbnail(float sizeMultip
      * @param thumbnailRequest The request to use to load the thumbnail.
      * @return This request builder.
      */
-    public BitmapRequestBuilder<ModelType, TranscodeType> thumbnail(BitmapRequestBuilder<ModelType, TranscodeType>
+    public BitmapRequestBuilder<ModelType, TranscodeType> thumbnail(BitmapRequestBuilder<?, TranscodeType>
             thumbnailRequest) {
         super.thumbnail(thumbnailRequest);
         return this;
@@ -427,7 +427,7 @@ public BitmapRequestBuilder<ModelType, TranscodeType> override(int width, int he
      */
     @Override
     public BitmapRequestBuilder<ModelType, TranscodeType> thumbnail(
-            GenericRequestBuilder<ModelType, ImageVideoWrapper, Bitmap, TranscodeType> thumbnailRequest) {
+            GenericRequestBuilder<?, ?, ?, TranscodeType> thumbnailRequest) {
         super.thumbnail(thumbnailRequest);
         return this;
     }

File: library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java
Patch:
@@ -78,7 +78,7 @@ public class DrawableRequestBuilder<ModelType>
      * @return This builder object.
      */
     public DrawableRequestBuilder<ModelType> thumbnail(
-            DrawableRequestBuilder<ModelType> thumbnailRequest) {
+            DrawableRequestBuilder<?> thumbnailRequest) {
         super.thumbnail(thumbnailRequest);
         return this;
     }
@@ -88,7 +88,7 @@ public DrawableRequestBuilder<ModelType> thumbnail(
      */
     @Override
     public DrawableRequestBuilder<ModelType> thumbnail(
-            GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable> thumbnailRequest) {
+            GenericRequestBuilder<?, ?, ?, GlideDrawable> thumbnailRequest) {
         super.thumbnail(thumbnailRequest);
         return this;
     }

File: library/src/main/java/com/bumptech/glide/GifRequestBuilder.java
Patch:
@@ -52,8 +52,7 @@ public class GifRequestBuilder<ModelType>
      * {@inheritDoc}
      */
     @Override
-    public GifRequestBuilder<ModelType> thumbnail(
-            GenericRequestBuilder<ModelType, InputStream, GifDrawable, GifDrawable> thumbnailRequest) {
+    public GifRequestBuilder<ModelType> thumbnail(GenericRequestBuilder<?, ?, ?, GifDrawable> thumbnailRequest) {
         super.thumbnail(thumbnailRequest);
         return this;
     }
@@ -81,7 +80,7 @@ public GifRequestBuilder<ModelType> thumbnail(
      * @param thumbnailRequest The request to use to load the thumbnail.
      * @return This builder object.
      */
-    public GifRequestBuilder<ModelType> thumbnail(GifRequestBuilder<ModelType> thumbnailRequest) {
+    public GifRequestBuilder<ModelType> thumbnail(GifRequestBuilder<?> thumbnailRequest) {
         super.thumbnail(thumbnailRequest);
         return this;
     }

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceRunnerFactory.java
Patch:
@@ -42,7 +42,7 @@ public <T, Z, R> ResourceRunner<Z, R> build(EngineKey key, int width, int height
                 cacheDecoder, fetcher, sourceEncoder, decoder, transformation, encoder, transcoder, diskCache,
                 priority, diskCacheStrategy, engineJob);
 
-        return new ResourceRunner<Z, R>(key, width, height, cacheLoader, cacheDecoder, transformation,
-                transcoder, sourceRunner, diskCacheService, diskCacheStrategy, service, engineJob, priority);
+        return new ResourceRunner<Z, R>(key, width, height, cacheLoader, cacheDecoder, transcoder, sourceRunner,
+                diskCacheService, diskCacheStrategy, service, engineJob, priority);
     }
 }

File: library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerFactoryTest.java
Patch:
@@ -23,7 +23,7 @@
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)
-public class DefaultResourceRunnerFactoryTest {
+public class ResourceRunnerFactoryTest {
     private DefaultFactoryHarness harness;
 
     @Before
@@ -47,7 +47,7 @@ private class DefaultFactoryHarness {
         int width = 100;
         int height = 100;
 
-        DefaultResourceRunnerFactory factory = new DefaultResourceRunnerFactory(diskCache,
+        ResourceRunnerFactory factory = new ResourceRunnerFactory(diskCache,
                 mainHandler, diskCacheService, resizeService);
 
         ResourceDecoder<File, Object> cacheDecoder = mock(ResourceDecoder.class);

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -349,7 +349,7 @@ public void testLoopsForeverIfLoopCountIsSetToLoopForever() {
 
         runLoops(loopCount, frameCount);
 
-        verify(frameManager, times((loopCount * frameCount) + 1)).getNextFrame(eq(drawable));
+        verify(frameManager, times(loopCount * frameCount + 1)).getNextFrame(eq(drawable));
     }
 
     @Test

File: library/src/main/java/com/bumptech/glide/BitmapOptions.java
Patch:
@@ -2,8 +2,8 @@
 
 interface BitmapOptions {
 
-    public GenericRequestBuilder<?, ?, ?, ?> fitCenter();
+    GenericRequestBuilder<?, ?, ?, ?> fitCenter();
 
-    public GenericRequestBuilder<?, ?, ?, ?> centerCrop();
+    GenericRequestBuilder<?, ?, ?, ?> centerCrop();
 
 }

File: library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java
Patch:
@@ -47,11 +47,11 @@
 public class BitmapRequestBuilder<ModelType, TranscodeType>
         extends GenericRequestBuilder<ModelType, ImageVideoWrapper, Bitmap, TranscodeType> implements BitmapOptions {
     private final BitmapPool bitmapPool;
+    private final Glide glide;
     private Downsampler downsampler = Downsampler.AT_LEAST;
     private DecodeFormat decodeFormat = DecodeFormat.PREFER_RGB_565;
     private ResourceDecoder<InputStream, Bitmap> imageDecoder;
     private ResourceDecoder<ParcelFileDescriptor, Bitmap> videoDecoder;
-    private Glide glide;
 
     BitmapRequestBuilder(Context context, ModelType model,
             LoadProvider<ModelType, ImageVideoWrapper, Bitmap, TranscodeType> streamLoadProvider,

File: library/src/main/java/com/bumptech/glide/DownloadOptions.java
Patch:
@@ -14,7 +14,7 @@ interface DownloadOptions {
      * @param <Y> The type of Target.
      * @return The given Target.
      */
-    public <Y extends Target<File>> Y downloadOnly(Y target);
+    <Y extends Target<File>> Y downloadOnly(Y target);
 
 
     /**
@@ -25,5 +25,5 @@ interface DownloadOptions {
      * @param height The height to use to fetch the data.
      * @return A {@link java.util.concurrent.Future} that can be used to retrieve the cache File containing the data.
      */
-    public FutureTarget<File> downloadOnly(int width, int height);
+    FutureTarget<File> downloadOnly(int width, int height);
 }

File: library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java
Patch:
@@ -244,7 +244,7 @@ public DrawableRequestBuilder<ModelType> transcoder(
     /**
      * {@inheritDoc}
      */
-    public DrawableRequestBuilder<ModelType> crossFade() {
+    public final DrawableRequestBuilder<ModelType> crossFade() {
         super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>());
         return this;
     }

File: library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java
Patch:
@@ -32,9 +32,9 @@ public class DrawableTypeRequest<ModelType> extends DrawableRequestBuilder<Model
     private final ModelLoader<ModelType, ParcelFileDescriptor> fileDescriptorModelLoader;
     private final Context context;
     private final Glide glide;
-    private RequestTracker requestTracker;
-    private RequestManager.OptionsApplier optionsApplier;
-    private Lifecycle lifecycle;
+    private final RequestTracker requestTracker;
+    private final RequestManager.OptionsApplier optionsApplier;
+    private final Lifecycle lifecycle;
     private final ModelType model;
 
     private static <A, Z, R> FixedLoadProvider<A, ImageVideoWrapper, Z, R> buildProvider(Glide glide,

File: library/src/main/java/com/bumptech/glide/GenericTranscodeRequest.java
Patch:
@@ -39,7 +39,7 @@ public class GenericTranscodeRequest<ModelType, DataType, ResourceType>
     private final Class<ResourceType> resourceClass;
     private final RequestTracker requestTracker;
     private final RequestManager.OptionsApplier optionsApplier;
-    private Lifecycle lifecycle;
+    private final Lifecycle lifecycle;
 
     private static <A, T, Z, R> LoadProvider<A, T, Z, R> build(Glide glide, ModelLoader<A, T> modelLoader,
             Class<T> dataClass, Class<Z> resourceClass, ResourceTranscoder<Z, R> transcoder) {

File: library/src/main/java/com/bumptech/glide/GifTypeRequest.java
Patch:
@@ -27,8 +27,8 @@ public class GifTypeRequest<ModelType> extends GifRequestBuilder<ModelType> {
     private final ModelLoader<ModelType, InputStream> streamModelLoader;
     private final Glide glide;
     private final RequestTracker requestTracker;
-    private RequestManager.OptionsApplier optionsApplier;
-    private Lifecycle lifecycle;
+    private final RequestManager.OptionsApplier optionsApplier;
+    private final Lifecycle lifecycle;
 
     private static <A, R> FixedLoadProvider<A, InputStream, GifDrawable, R> buildProvider(Glide glide,
             ModelLoader<A, InputStream> streamModelLoader, Class<R> transcodeClass,

File: library/src/main/java/com/bumptech/glide/GlideBuilder.java
Patch:
@@ -21,7 +21,8 @@
  * A builder class for setting default structural classes for Glide to use.
  */
 public class GlideBuilder {
-    private Context context;
+    private final Context context;
+
     private Engine engine;
     private BitmapPool bitmapPool;
     private MemoryCache memoryCache;

File: library/src/main/java/com/bumptech/glide/ListPreloader.java
Patch:
@@ -146,7 +146,7 @@ private void cancelAll() {
     private static final class PreloadTargetQueue {
         private final Queue<PreloadTarget> queue;
 
-        private PreloadTargetQueue(int size) {
+        public PreloadTargetQueue(int size) {
             queue = Util.createQueue(size);
 
             for (int i = 0; i < size; i++) {

File: library/src/main/java/com/bumptech/glide/load/Encoder.java
Patch:
@@ -16,7 +16,7 @@ public interface Encoder<T> {
      * @param data The data to write.
      * @param os The OutputStream to write the data to.
      */
-    public boolean encode(T data, OutputStream os);
+    boolean encode(T data, OutputStream os);
 
     /**
      * Returns an ID identifying any transformation this encoder may apply to the given data that will be mixed in to
@@ -27,5 +27,5 @@ public interface Encoder<T> {
      *     no unusual compression or downsampling) an empty string is an appropriate id.
      * </p>
      */
-    public String getId();
+    String getId();
 }

File: library/src/main/java/com/bumptech/glide/load/MultiTransformation.java
Patch:
@@ -11,7 +11,7 @@
  * @param <T> The type of {@link com.bumptech.glide.load.engine.Resource} that will be transformed.
  */
 public class MultiTransformation<T> implements Transformation<T> {
-    private Collection<? extends Transformation<T>> transformations;
+    private final Collection<? extends Transformation<T>> transformations;
     private String id;
 
     @SafeVarargs
@@ -35,7 +35,7 @@ public Resource<T> transform(Resource<T> resource, int outWidth, int outHeight)
 
         for (Transformation<T> transformation : transformations) {
             Resource<T> transformed = transformation.transform(previous, outWidth, outHeight);
-            if (transformed != previous && previous != resource && previous != null) {
+            if (previous != null && !previous.equals(resource) && !previous.equals(transformed)) {
                 previous.recycle();
             }
             previous = transformed;

File: library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java
Patch:
@@ -30,7 +30,7 @@ public interface ResourceDecoder<T, Z> {
      * @param height The ideal height of the decoded resource.
      * @throws IOException
      */
-    public Resource<Z> decode(T source, int width, int height) throws IOException;
+    Resource<Z> decode(T source, int width, int height) throws IOException;
 
     /**
      * Returns an ID identifying any transformation this decoder may apply to the given data that will be mixed in to
@@ -41,5 +41,5 @@ public interface ResourceDecoder<T, Z> {
      *     result (ie performs no downsampling) an empty string is an appropriate id.
      * </p>
      */
-    public String getId();
+    String getId();
 }

File: library/src/main/java/com/bumptech/glide/load/Transformation.java
Patch:
@@ -30,7 +30,7 @@ public interface Transformation<T> {
      * @param outHeight The height of the view or target the resource will be displayed in.
      * @return The transformed resource.
      */
-    public abstract Resource<T> transform(Resource<T> resource, int outWidth, int outHeight);
+    Resource<T> transform(Resource<T> resource, int outWidth, int outHeight);
 
     /**
      * A method to get a unique identifier for this particular transformation that can be used as part of a cache key.
@@ -44,5 +44,5 @@ public interface Transformation<T> {
      *
      * @return A string that uniquely identifies this transformation.
      */
-    public String getId();
+    String getId();
 }

File: library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
Patch:
@@ -110,7 +110,7 @@ public void cancel() {
     }
 
     interface HttpUrlConnectionFactory {
-        public HttpURLConnection build(URL url) throws IOException;
+        HttpURLConnection build(URL url) throws IOException;
     }
 
     private static class DefaultHttpUrlConnectionFactory implements HttpUrlConnectionFactory {

File: library/src/main/java/com/bumptech/glide/load/data/MediaStoreThumbFetcher.java
Patch:
@@ -84,7 +84,7 @@ public void cleanup() {
 
     @Override
     public String getId() {
-        return mediaStoreUri + mimeType + String.valueOf(dateModified) + String.valueOf(orientation);
+        return mediaStoreUri + mimeType + dateModified + orientation;
     }
 
     @Override
@@ -117,7 +117,7 @@ public File get(String path) {
     }
 
     interface ThumbnailQuery {
-        public Cursor query(Context context, Uri uri);
+        Cursor query(Context context, Uri uri);
     }
 
     static class ThumbnailStreamOpener {

File: library/src/main/java/com/bumptech/glide/load/engine/Engine.java
Patch:
@@ -83,7 +83,7 @@ public Engine(MemoryCache memoryCache, DiskCache diskCache, ExecutorService resi
         this.runners = runners;
 
         if (factory == null) {
-            factory = new DefaultResourceRunnerFactory(diskCache, new Handler(Looper.getMainLooper()),
+            factory = new ResourceRunnerFactory(diskCache, new Handler(Looper.getMainLooper()),
                     diskCacheService, resizeService);
         }
         this.factory = factory;
@@ -287,8 +287,8 @@ public ResourceWeakReference(Key key, EngineResource<?> r, ReferenceQueue<? supe
 
     // Responsible for cleaning up the active resource map by remove weak references that have been cleared.
     private static class RefQueueIdleHandler implements MessageQueue.IdleHandler {
-        private Map<Key, WeakReference<EngineResource<?>>> activeResources;
-        private ReferenceQueue<EngineResource<?>> queue;
+        private final Map<Key, WeakReference<EngineResource<?>>> activeResources;
+        private final ReferenceQueue<EngineResource<?>> queue;
 
         public RefQueueIdleHandler(Map<Key, WeakReference<EngineResource<?>>> activeResources,
                 ReferenceQueue<EngineResource<?>> queue) {

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
Patch:
@@ -134,7 +134,7 @@ public void run() {
     }
 
     interface EngineResourceFactory {
-        public <R> EngineResource<R> build(Resource<R> resource);
+        <R> EngineResource<R> build(Resource<R> resource);
     }
 
     private static final class DefaultEngineResourceFactory implements EngineResourceFactory {

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJobListener.java
Patch:
@@ -4,7 +4,7 @@
 
 interface EngineJobListener {
 
-    public void onEngineJobComplete(Key key, EngineResource<?> resource);
+    void onEngineJobComplete(Key key, EngineResource<?> resource);
 
-    public void onEngineJobCancelled(EngineJob engineJob, Key key);
+    void onEngineJobCancelled(EngineJob engineJob, Key key);
 }

File: library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java
Patch:
@@ -5,6 +5,7 @@
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.ResourceEncoder;
 import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.cache.StringKey;
 import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
 
 import java.io.UnsupportedEncodingException;
@@ -26,7 +27,7 @@ class EngineKey implements Key {
     private final Encoder sourceEncoder;
     private String stringKey;
     private int hashCode;
-    private OriginalEngineKey originalKey;
+    private StringKey originalKey;
 
     public EngineKey(String id, int width, int height, ResourceDecoder cacheDecoder, ResourceDecoder decoder,
             Transformation transformation, ResourceEncoder encoder, ResourceTranscoder transcoder,
@@ -44,7 +45,7 @@ public EngineKey(String id, int width, int height, ResourceDecoder cacheDecoder,
 
     public Key getOriginalKey() {
         if (originalKey == null) {
-            originalKey = new OriginalEngineKey(id);
+            originalKey = new StringKey(id);
         }
         return originalKey;
     }

File: library/src/main/java/com/bumptech/glide/load/engine/EngineResource.java
Patch:
@@ -19,7 +19,7 @@ class EngineResource<Z> implements Resource<Z> {
     private volatile boolean isRecycled;
 
     interface ResourceListener {
-        public void onResourceReleased(Key key, EngineResource<?> resource);
+        void onResourceReleased(Key key, EngineResource<?> resource);
     }
 
     EngineResource(Resource<Z> toWrap) {

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java
Patch:
@@ -111,7 +111,7 @@ private Resource<R> runWrapped() throws Exception {
         Resource<R> transcoded = null;
         if (fromCache != null) {
             Resource<Z> transformed = transformation.transform(fromCache, width, height);
-            if (transformed != fromCache) {
+            if (!fromCache.equals(transformed)) {
                 fromCache.recycle();
             }
             transcoded = transcoder.transcode(transformed);

File: library/src/main/java/com/bumptech/glide/load/engine/SourceResourceRunner.java
Patch:
@@ -152,7 +152,7 @@ private Resource<R> runWrapped() throws Exception {
         Resource<Z> transformed = null;
         if (decoded != null) {
             transformed = transformation.transform(decoded, width, height);
-            if (decoded != transformed) {
+            if (!decoded.equals(transformed)) {
                 decoded.recycle();
             }
             if (Log.isLoggable(TAG, Log.VERBOSE)) {
@@ -210,7 +210,7 @@ public <T> SourceWriter<T> build(Encoder<T> encoder, T data) {
     }
 
     interface WriterFactory {
-        public <T> SourceWriter<T> build(Encoder<T> encoder, T data);
+        <T> SourceWriter<T> build(Encoder<T> encoder, T data);
     }
 
     static class SourceWriter<T> implements DiskCache.Writer {

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java
Patch:
@@ -49,7 +49,7 @@ public V get(K key) {
     public V removeLast() {
         LinkedEntry<K, V> last = head.prev;
 
-        while (last != head) {
+        while (!last.equals(head)) {
             V removed = last.removeLast();
             if (removed != null) {
                 return removed;
@@ -74,9 +74,9 @@ public String toString() {
         StringBuilder sb = new StringBuilder("GroupedLinkedMap( ");
         LinkedEntry<K, V> current = head.next;
         boolean hadAtLeastOneItem = false;
-        while (current != head) {
+        while (!current.equals(head)) {
             hadAtLeastOneItem = true;
-            sb.append("{").append(current.key).append(":").append(current.size()).append("}, ");
+            sb.append('{').append(current.key).append(':').append(current.size()).append("}, ");
             current = current.next;
         }
         if (hadAtLeastOneItem) {

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/Poolable.java
Patch:
@@ -1,5 +1,5 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
 interface Poolable {
-    public void offer();
+    void offer();
 }

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
Patch:
@@ -98,7 +98,7 @@ public String toString() {
             StringBuilder sb = new StringBuilder();
             sb.append("( ");
             for (Entry<K, V> entry : entrySet()) {
-                sb.append("{").append(entry.getKey()).append(":").append(entry.getValue()).append("}, ");
+                sb.append('{').append(entry.getKey()).append(':').append(entry.getValue()).append("}, ");
             }
             final String result;
             if (!isEmpty()) {
@@ -137,7 +137,7 @@ private static final class Key implements Poolable {
         private final KeyPool pool;
         private int size;
 
-        private Key(KeyPool pool) {
+        Key(KeyPool pool) {
             this.pool = pool;
         }
 

File: library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
Patch:
@@ -24,8 +24,8 @@ public class MemorySizeCalculator {
     private final int memoryCacheSize;
 
     interface ScreenDimensions {
-        public int getWidthPixels();
-        public int getHeightPixels();
+        int getWidthPixels();
+        int getHeightPixels();
     }
 
     public MemorySizeCalculator(Context context) {
@@ -92,7 +92,7 @@ private static boolean isLowMemoryDevice(ActivityManager activityManager) {
     }
 
     private static class DisplayMetricsScreenDimensions implements ScreenDimensions {
-        private DisplayMetrics displayMetrics;
+        private final DisplayMetrics displayMetrics;
 
         public DisplayMetricsScreenDimensions(DisplayMetrics displayMetrics) {
             this.displayMetrics = displayMetrics;

File: library/src/main/java/com/bumptech/glide/load/engine/cache/StringKey.java
Patch:
@@ -9,7 +9,7 @@
  * A {@link com.bumptech.glide.load.Key} that wraps a single {@link java.lang.String}.
  */
 public class StringKey implements Key {
-    private String key;
+    private final String key;
 
     public StringKey(String key) {
         this.key = key;

File: library/src/main/java/com/bumptech/glide/load/engine/executor/Prioritized.java
Patch:
@@ -8,5 +8,5 @@ public interface Prioritized {
     /**
      * Returns the priority of this task.
      */
-    public int getPriority();
+    int getPriority();
 }

File: library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
Patch:
@@ -35,7 +35,7 @@ public void preFill(PreFillBitmapAttribute... bitmapAttributes) {
 
     // Visible for testing.
     PreFillQueue generateAllocationOrder(PreFillBitmapAttribute[] preFillSizes) {
-        final int maxSize = (memoryCache.getMaxSize() - memoryCache.getCurrentSize()) + bitmapPool.getMaxSize();
+        final int maxSize = memoryCache.getMaxSize() - memoryCache.getCurrentSize() + bitmapPool.getMaxSize();
 
         int totalWeight = 0;
         for (PreFillBitmapAttribute size : preFillSizes) {

File: library/src/main/java/com/bumptech/glide/load/model/GenericLoaderFactory.java
Patch:
@@ -13,9 +13,9 @@
 @SuppressWarnings({ "rawtypes", "unchecked" })
 // this is a general class capable of handling any generic combination
 public class GenericLoaderFactory {
-    private Map<Class/*T*/, Map<Class/*Y*/, ModelLoaderFactory/*T, Y*/>> modelClassToResourceFactories =
+    private final Map<Class/*T*/, Map<Class/*Y*/, ModelLoaderFactory/*T, Y*/>> modelClassToResourceFactories =
             new HashMap<Class, Map<Class, ModelLoaderFactory>>();
-    private Map<Class/*T*/, Map<Class/*Y*/, ModelLoader/*T, Y*/>> cachedModelLoaders =
+    private final Map<Class/*T*/, Map<Class/*Y*/, ModelLoader/*T, Y*/>> cachedModelLoaders =
             new HashMap<Class, Map<Class, ModelLoader>>();
 
     private static final ModelLoader NULL_MODEL_LOADER = new ModelLoader() {

File: library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java
Patch:
@@ -20,10 +20,11 @@
  * </p>
  */
 public class GlideUrl {
-    private String stringUrl;
     private static final String ALLOWED_URI_CHARS = "@#&=*+-_.,:!?()/~'%";
 
-    private URL url;
+    private final URL url;
+    private String stringUrl;
+
     private URL safeUrl;
 
     public GlideUrl(URL url) {

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
Patch:
@@ -42,5 +42,5 @@ public interface ModelLoader<T, Y> {
      * @return A {@link DataFetcher} that can obtain the data the resource can be decoded from if the resource is not
      * cached, or null if no valid {@link com.bumptech.glide.load.data.DataFetcher} could be constructed.
      */
-    public DataFetcher<Y> getResourceFetcher(T model, int width, int height);
+    DataFetcher<Y> getResourceFetcher(T model, int width, int height);
 }

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java
Patch:
@@ -22,10 +22,10 @@ public interface ModelLoaderFactory<T, Y> {
      *                  this factory's {@link ModelLoader} may depend on
      * @return A new {@link ModelLoader}
      */
-    public ModelLoader<T, Y> build(Context context, GenericLoaderFactory factories);
+    ModelLoader<T, Y> build(Context context, GenericLoaderFactory factories);
 
     /**
      * A lifecycle method that will be called when this factory is about to replaced.
      */
-    public void teardown();
+    void teardown();
 }

File: library/src/main/java/com/bumptech/glide/load/model/stream/HttpUrlGlideUrlLoader.java
Patch:
@@ -17,13 +17,13 @@
  */
 public class HttpUrlGlideUrlLoader implements ModelLoader<GlideUrl, InputStream> {
 
-    private ModelCache<GlideUrl, GlideUrl> modelCache;
+    private final ModelCache<GlideUrl, GlideUrl> modelCache;
 
     /**
      * The default factory for {@link com.bumptech.glide.load.model.stream.HttpUrlGlideUrlLoader}s.
      */
     public static class Factory implements ModelLoaderFactory<GlideUrl, InputStream> {
-        private ModelCache<GlideUrl, GlideUrl> modelCache = new ModelCache<GlideUrl, GlideUrl>(500);
+        private final ModelCache<GlideUrl, GlideUrl> modelCache = new ModelCache<GlideUrl, GlideUrl>(500);
 
         @Override
         public ModelLoader<GlideUrl, InputStream> build(Context context, GenericLoaderFactory factories) {
@@ -37,7 +37,7 @@ public void teardown() {
     }
 
     public HttpUrlGlideUrlLoader() {
-        // Empty.
+        this(null);
     }
 
     public HttpUrlGlideUrlLoader(ModelCache<GlideUrl, GlideUrl> modelCache) {

File: library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreStreamLoader.java
Patch:
@@ -19,7 +19,7 @@
 public class MediaStoreStreamLoader implements ModelLoader<Uri, InputStream> {
     private final Context context;
     private final ModelLoader<Uri, InputStream> uriLoader;
-    private String mimeType;
+    private final String mimeType;
     private final long dateModified;
     private final int orientation;
 

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDecoder.java
Patch:
@@ -21,7 +21,7 @@ public interface BitmapDecoder<T> {
      * @param outHeight The target height for the returned bitmap (need not match exactly).
      * @param decodeFormat The desired configuration for the returned bitmap.
      */
-    public Bitmap decode(T resource, BitmapPool bitmapPool, int outWidth, int outHeight, DecodeFormat decodeFormat)
+    Bitmap decode(T resource, BitmapPool bitmapPool, int outWidth, int outHeight, DecodeFormat decodeFormat)
             throws Exception;
 
     /**
@@ -34,5 +34,5 @@ public Bitmap decode(T resource, BitmapPool bitmapPool, int outWidth, int outHei
      *     {@link android.graphics.Bitmap.Config#ARGB_8888} as their config.
      * </p>
      */
-    public String getId();
+    String getId();
 }

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapResource.java
Patch:
@@ -9,8 +9,8 @@
  * A resource wrapping a {@link android.graphics.Bitmap} object.
  */
 public class BitmapResource implements Resource<Bitmap> {
-    private Bitmap bitmap;
-    private BitmapPool bitmapPool;
+    private final Bitmap bitmap;
+    private final BitmapPool bitmapPool;
 
     public BitmapResource(Bitmap bitmap, BitmapPool bitmapPool) {
         this.bitmap = bitmap;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
Patch:
@@ -42,14 +42,14 @@ public BitmapTransformation(BitmapPool bitmapPool) {
     @Override
     public final Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int outHeight) {
         if (outWidth <= 0 || outHeight <= 0) {
-            throw new IllegalArgumentException("Cannot appy transformation on width: " + outWidth + " or height: "
+            throw new IllegalArgumentException("Cannot apply transformation on width: " + outWidth + " or height: "
                     + outHeight + " less than or equal to zero");
         }
         Bitmap toTransform = resource.get();
         Bitmap transformed = transform(bitmapPool, toTransform, outWidth, outHeight);
 
         final Resource<Bitmap> result;
-        if (transformed == toTransform) {
+        if (toTransform.equals(transformed)) {
             result = resource;
         } else {
             result = new BitmapResource(transformed, bitmapPool);

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java
Patch:
@@ -21,6 +21,8 @@ public CenterCrop(BitmapPool bitmapPool) {
         super(bitmapPool);
     }
 
+    // Bitmap doesn't implement equals, so == and .equals are equivalent here.
+    @SuppressWarnings("PMD.CompareObjectsWithEquals")
     @Override
     protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
         final Bitmap toReuse = pool.get(outWidth, outHeight, toTransform.getConfig());

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/GlideBitmapDrawableResource.java
Patch:
@@ -8,7 +8,7 @@
  * A resource wrapper for {@link com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable}.
  */
 public class GlideBitmapDrawableResource extends DrawableResource<GlideBitmapDrawable> {
-    private BitmapPool bitmapPool;
+    private final BitmapPool bitmapPool;
 
     public GlideBitmapDrawableResource(GlideBitmapDrawable drawable, BitmapPool bitmapPool) {
         super(drawable);

File: library/src/main/java/com/bumptech/glide/load/resource/bytes/BytesResource.java
Patch:
@@ -6,7 +6,7 @@
  * An {@link com.bumptech.glide.load.engine.Resource} wrapping a byte array.
  */
 public class BytesResource implements Resource<byte[]> {
-    private byte[] bytes;
+    private final byte[] bytes;
 
     public BytesResource(byte[] bytes) {
         this.bytes = bytes;

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java
Patch:
@@ -72,7 +72,7 @@ public GifDrawable(Context context, GifDecoder.BitmapProvider bitmapProvider, Bi
                 bitmapProvider, bitmapPool, firstFrame));
     }
 
-    private GifDrawable(GifState state) {
+    GifDrawable(GifState state) {
         this.state = state;
         this.decoder = new GifDecoder(state.bitmapProvider);
         decoder.setData(state.id, state.gifHeader, state.data);

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java
Patch:
@@ -11,8 +11,8 @@
  * and can apply it to every frame of any {@link com.bumptech.glide.load.resource.gif.GifDrawable}.
  */
 public class GifDrawableTransformation implements Transformation<GifDrawable> {
-    private Transformation<Bitmap> wrapped;
-    private BitmapPool bitmapPool;
+    private final Transformation<Bitmap> wrapped;
+    private final BitmapPool bitmapPool;
 
     public GifDrawableTransformation(Transformation<Bitmap> wrapped, BitmapPool bitmapPool) {
         this.wrapped = wrapped;
@@ -30,7 +30,7 @@ public Resource<GifDrawable> transform(Resource<GifDrawable> resource, int outWi
         Bitmap firstFrame = resource.get().getFirstFrame();
         Resource<Bitmap> bitmapResource = new BitmapResource(firstFrame, bitmapPool);
         Resource<Bitmap> transformed = wrapped.transform(bitmapResource, outWidth, outHeight);
-        if (bitmapResource != transformed) {
+        if (!bitmapResource.equals(transformed)) {
             bitmapResource.recycle();
         }
         Bitmap transformedFrame = transformed.get();

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameModelLoader.java
Patch:
@@ -13,7 +13,7 @@ public DataFetcher<GifDecoder> getResourceFetcher(GifDecoder model, int width, i
     }
 
     private static class GifFrameDataFetcher implements DataFetcher<GifDecoder> {
-        private GifDecoder decoder;
+        private final GifDecoder decoder;
 
         public GifFrameDataFetcher(GifDecoder decoder) {
             this.decoder = decoder;

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoder.java
Patch:
@@ -8,7 +8,7 @@
 import com.bumptech.glide.load.resource.bitmap.BitmapResource;
 
 class GifFrameResourceDecoder implements ResourceDecoder<GifDecoder, Bitmap> {
-    private BitmapPool bitmapPool;
+    private final BitmapPool bitmapPool;
 
     public GifFrameResourceDecoder(BitmapPool bitmapPool) {
         this.bitmapPool = bitmapPool;

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java
Patch:
@@ -32,7 +32,7 @@ public class GifResourceDecoder implements ResourceDecoder<InputStream, GifDrawa
 
     private final Context context;
     private final GifHeaderParserPool parserPool;
-    private BitmapPool bitmapPool;
+    private final BitmapPool bitmapPool;
     private final GifDecoderPool decoderPool;
     private final GifBitmapProvider provider;
 
@@ -162,7 +162,7 @@ public synchronized void release(GifHeaderParser parser) {
     }
 
     private static class GifBitmapProvider implements GifDecoder.BitmapProvider {
-        private BitmapPool bitmapPool;
+        private final BitmapPool bitmapPool;
 
         public GifBitmapProvider(BitmapPool bitmapPool) {
             this.bitmapPool = bitmapPool;

File: library/src/main/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResource.java
Patch:
@@ -8,7 +8,7 @@
  * A resource that wraps an {@link com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper}.
  */
 public class GifBitmapWrapperResource implements Resource<GifBitmapWrapper> {
-    private GifBitmapWrapper data;
+    private final GifBitmapWrapper data;
 
     public GifBitmapWrapperResource(GifBitmapWrapper data) {
         this.data = data;

File: library/src/main/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperStreamResourceDecoder.java
Patch:
@@ -12,7 +12,7 @@
  * {@link com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper} from {@link java.io.InputStream} data.
  */
 public class GifBitmapWrapperStreamResourceDecoder implements ResourceDecoder<InputStream, GifBitmapWrapper> {
-    private ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> gifBitmapDecoder;
+    private final ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> gifBitmapDecoder;
 
     public GifBitmapWrapperStreamResourceDecoder(
             ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> gifBitmapDecoder) {

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/GlideBitmapDrawableTranscoder.java
Patch:
@@ -12,8 +12,8 @@
  * {@link android.graphics.Bitmap}s into {@link android.graphics.drawable.BitmapDrawable}s.
  */
 public class GlideBitmapDrawableTranscoder implements ResourceTranscoder<Bitmap, GlideBitmapDrawable> {
-    private Resources resources;
-    private BitmapPool bitmapPool;
+    private final Resources resources;
+    private final BitmapPool bitmapPool;
 
     public GlideBitmapDrawableTranscoder(Resources resources, BitmapPool bitmapPool) {
         this.resources = resources;

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
Patch:
@@ -15,7 +15,7 @@ public interface ResourceTranscoder<Z, R> {
      *
      * @param toTranscode The resource to transcode.
      */
-    public Resource<R> transcode(Resource<Z> toTranscode);
+    Resource<R> transcode(Resource<Z> toTranscode);
 
-    public String getId();
+    String getId();
 }

File: library/src/main/java/com/bumptech/glide/manager/ConnectivityMonitor.java
Patch:
@@ -8,12 +8,12 @@ public interface ConnectivityMonitor extends LifecycleListener {
     /**
      * An interface for listening to network connectivity events picked up by the monitor.
      */
-    public interface ConnectivityListener {
+    interface ConnectivityListener {
         /**
          * Called when the connectivity state changes.
          *
          * @param isConnected True if we're currently connected to a network, false otherwise.
          */
-        public void onConnectivityChanged(boolean isConnected);
+        void onConnectivityChanged(boolean isConnected);
     }
 }

File: library/src/main/java/com/bumptech/glide/manager/LifecycleListener.java
Patch:
@@ -8,16 +8,16 @@ public interface LifecycleListener {
     /**
      * Callback for when {@link android.app.Fragment#onStart()}} or {@link android.app.Activity#onStart()} is called.
      */
-    public void onStart();
+    void onStart();
 
     /**
      * Callback for when {@link android.app.Fragment#onStop()}} or {@link android.app.Activity#onStop()}} is called.
      */
-    public void onStop();
+    void onStop();
 
     /**
      * Callback for when {@link android.app.Fragment#onDestroy()}} or {@link android.app.Activity#onDestroy()} is
      * called.
      */
-    public void onDestroy();
+    void onDestroy();
 }

File: library/src/main/java/com/bumptech/glide/provider/ChildLoadProvider.java
Patch:
@@ -18,7 +18,8 @@
  * @param <R> The type of the resource that will be transcoded from the decoded resource.
  */
 public class ChildLoadProvider<A, T, Z, R> implements LoadProvider<A, T, Z, R> {
-    private LoadProvider<A, T, Z, R> parent;
+    private final LoadProvider<A, T, Z, R> parent;
+
     private ResourceDecoder<File, Z> cacheDecoder;
     private ResourceDecoder<T, Z> sourceDecoder;
     private ResourceEncoder<Z> encoder;

File: library/src/main/java/com/bumptech/glide/provider/LoadProvider.java
Patch:
@@ -18,11 +18,11 @@ public interface LoadProvider<A, T, Z, R> extends DataLoadProvider<T, Z> {
     /**
      * Returns the {@link com.bumptech.glide.load.model.ModelLoader} to convert from the given model to a data type.
      */
-    public ModelLoader<A, T> getModelLoader();
+    ModelLoader<A, T> getModelLoader();
 
     /**
      * Returns the {@link com.bumptech.glide.load.resource.transcode.ResourceTranscoder} to convert from the decoded
      * and transformed resource into the transcoded resource.
      */
-    public ResourceTranscoder<Z, R> getTranscoder();
+    ResourceTranscoder<Z, R> getTranscoder();
 }

File: library/src/main/java/com/bumptech/glide/request/FutureTarget.java
Patch:
@@ -31,5 +31,5 @@ public interface FutureTarget<R> extends Future<R>, Target<R>  {
     /**
      * Safely clears the target from a background thread to release its resources.
      */
-    public void clear();
+    void clear();
 }

File: library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java
Patch:
@@ -10,19 +10,19 @@ public interface RequestCoordinator {
      *
      * @param request The {@link Request} requesting permission to display a bitmap.
      */
-    public boolean canSetImage(Request request);
+    boolean canSetImage(Request request);
 
     /**
      * Returns true if the {@link Request} can display a placeholder.
      *
      * @param request The {@link Request} requesting permission to display a placeholder.
      */
-    public boolean canNotifyStatusChanged(Request request);
+    boolean canNotifyStatusChanged(Request request);
 
     /**
      * Returns true if any coordinated {@link Request} has successfully completed.
      *
      * @see Request#isComplete()
      */
-    public boolean isAnyResourceSet();
+    boolean isAnyResourceSet();
 }

File: library/src/main/java/com/bumptech/glide/request/RequestListener.java
Patch:
@@ -40,7 +40,7 @@ public interface RequestListener<T, R> {
      * @return True if the listener has handled updating the target for the given exception, false to allow
      *         Glide's request to update the target.
      */
-    public abstract boolean onException(Exception e, T model, Target<R> target, boolean isFirstResource);
+    boolean onException(Exception e, T model, Target<R> target, boolean isFirstResource);
 
     /**
      * Called when a load completes successfully, immediately after
@@ -57,6 +57,5 @@ public interface RequestListener<T, R> {
      * @return True if the listener has handled setting the resource on the target (including any animations), false to
      *         allow Glide's request to update the target (again including animations).
      */
-    public abstract boolean onResourceReady(R resource, T model, Target<R> target, boolean isFromMemoryCache,
-            boolean isFirstResource);
+    boolean onResourceReady(R resource, T model, Target<R> target, boolean isFromMemoryCache, boolean isFirstResource);
 }

File: library/src/main/java/com/bumptech/glide/request/ResourceCallback.java
Patch:
@@ -12,13 +12,13 @@ public interface ResourceCallback {
      *
      * @param resource The loaded resource.
      */
-    public void onResourceReady(Resource<?> resource);
+    void onResourceReady(Resource<?> resource);
 
     /**
      * Called when a resource fails to load successfully.
      *
      * @param e The exception that caused the failure, or null it the load failed for some reason other than an
      *          exception.
      */
-    public void onException(Exception e);
+    void onException(Exception e);
 }

File: library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
Patch:
@@ -31,7 +31,7 @@ public void setRequests(Request full, Request thumb) {
      */
     @Override
     public boolean canSetImage(Request request) {
-        return parentCanSetImage() && (request == full || !full.isResourceSet());
+        return parentCanSetImage() && (request.equals(full) || !full.isResourceSet());
     }
 
     private boolean parentCanSetImage() {
@@ -46,7 +46,7 @@ private boolean parentCanSetImage() {
      */
     @Override
     public boolean canNotifyStatusChanged(Request request) {
-        return parentCanNotifyStatusChanged() && (request == full && !isAnyResourceSet());
+        return parentCanNotifyStatusChanged() && request.equals(full) && !isAnyResourceSet();
     }
 
     private boolean parentCanNotifyStatusChanged() {

File: library/src/main/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimation.java
Patch:
@@ -19,8 +19,8 @@
 public class DrawableCrossFadeViewAnimation<T extends Drawable> implements GlideAnimation<T> {
     // 150 ms.
     public static final int DEFAULT_DURATION = 300;
-    private Animation defaultAnimation;
-    private int duration;
+    private final Animation defaultAnimation;
+    private final int duration;
 
     private static Animation getDefaultAnimation() {
         AlphaAnimation animation = new AlphaAnimation(0f, 1f);

File: library/src/main/java/com/bumptech/glide/request/animation/GlideAnimationFactory.java
Patch:
@@ -13,6 +13,5 @@ public interface GlideAnimationFactory<R> {
      * @param isFromMemoryCache True if this will be an animation for a resource that was loaded from the memory cache.
      * @param isFirstResource True if this is the first resource to be loaded into the target.
      */
-    public GlideAnimation<R> build(boolean isFromMemoryCache, boolean isFirstResource);
-
+    GlideAnimation<R> build(boolean isFromMemoryCache, boolean isFirstResource);
 }

File: library/src/main/java/com/bumptech/glide/request/target/SizeReadyCallback.java
Patch:
@@ -11,5 +11,5 @@ public interface SizeReadyCallback {
      * @param width The width of the target.
      * @param height The height of the target.
      */
-    public void onSizeReady(int width, int height);
+    void onSizeReady(int width, int height);
 }

File: library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
Patch:
@@ -111,7 +111,7 @@ public String toString() {
 
     private static class SizeDeterminer {
         private final View view;
-        private List<SizeReadyCallback> cbs = new ArrayList<SizeReadyCallback>();
+        private final List<SizeReadyCallback> cbs = new ArrayList<SizeReadyCallback>();
         private SizeDeterminerLayoutListener layoutListener;
 
         public SizeDeterminer(View view) {
@@ -194,7 +194,7 @@ private boolean isUsingWrapContent() {
 
         private boolean isLayoutParamsSizeValid() {
             final ViewGroup.LayoutParams layoutParams = view.getLayoutParams();
-            return layoutParams != null && (layoutParams.width > 0 && layoutParams.height > 0);
+            return layoutParams != null && layoutParams.width > 0 && layoutParams.height > 0;
         }
 
         private static class SizeDeterminerLayoutListener implements ViewTreeObserver.OnPreDrawListener {

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
Patch:
@@ -54,7 +54,7 @@ public int getMaxSize() {
     }
 
     @Override
-    public void setSizeMultiplier(float sizeMultiplier) {
+    public synchronized void setSizeMultiplier(float sizeMultiplier) {
         maxSize = Math.round(initialMaxSize * sizeMultiplier);
         evict();
     }
@@ -138,7 +138,7 @@ public void trimMemory(int level) {
         }
     }
 
-    private void trimToSize(int size) {
+    private synchronized void trimToSize(int size) {
         while (currentSize > size) {
             final Bitmap removed = strategy.removeLast();
             tracker.remove(removed);

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
Patch:
@@ -132,7 +132,7 @@ private int fillbuf(InputStream localIn, byte[] localBuf)
             if (result > 0) {
                 markpos = -1;
                 pos = 0;
-                count = result == -1 ? 0 : result;
+                count = result;
             }
             return result;
         }

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableResource.java
Patch:
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.resource.gif;
 
 import com.bumptech.glide.load.resource.drawable.DrawableResource;
+import com.bumptech.glide.util.Util;
 
 /**
  * A resource wrapping an {@link com.bumptech.glide.load.resource.gif.GifDrawable}.
@@ -12,7 +13,7 @@ public GifDrawableResource(GifDrawable drawable) {
 
     @Override
     public int getSize() {
-        return drawable.getData().length;
+        return drawable.getData().length + Util.getBitmapByteSize(drawable.getFirstFrame());
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java
Patch:
@@ -24,5 +24,5 @@ public interface RequestCoordinator {
      *
      * @see Request#isComplete()
      */
-    public boolean isAnyRequestComplete();
+    public boolean isAnyResourceSet();
 }

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -166,7 +166,7 @@ public View getView(int position, View view, ViewGroup container) {
             DrawableRequestBuilder<Photo> request = Glide.with(FlickrPhotoGrid.this)
                     .load(current)
                     .centerCrop()
-                    .animate(R.anim.fade_in);
+                    .crossFade(R.anim.fade_in, 150);
 
             if (thumbnail) {
                 request.thumbnail(Glide.with(FlickrPhotoGrid.this)

File: library/src/main/java/com/bumptech/glide/request/FutureTarget.java
Patch:
@@ -6,13 +6,13 @@
 
 /**
  * An interface for an object that is both a {@link com.bumptech.glide.request.target.Target} and a
- * {@link java.util.concurrent.Future}. Use as follows:
+ * {@link java.util.concurrent.Future}. For example:
  * <pre>
  * {@code
  * FutureTarget<Bitmap> futureTarget = Glide.with(fragment)
  *                                       .load("http://goo.gl/1asf12")
  *                                       .asBitmap()
- *                                       .intoFuture(250, 250);
+ *                                       .into(250, 250);
  * Bitmap myBitmap = futureTarget.get();
  * ... // do things with bitmap and then release when finished:
  * Glide.clear(futureTarget);

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java
Patch:
@@ -60,7 +60,7 @@ public GifDrawableResource decode(InputStream source, int width, int height) {
 
     private GifDrawableResource decode(byte[] data, int width, int height, GifHeaderParser parser) {
         final GifHeader header = parser.parseHeader();
-        if (header.getNumFrames() <= 0) {
+        if (header.getNumFrames() <= 0 || header.getStatus() != GifDecoder.STATUS_OK) {
             // If we couldn't decode the GIF, we will end up with a frame count of 0.
             return null;
         }

File: integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java
Patch:
@@ -8,6 +8,7 @@
 import com.android.volley.toolbox.Volley;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.data.DataFetcher;
+import com.bumptech.glide.load.model.GlideUrl;
 import com.squareup.okhttp.mockwebserver.MockResponse;
 import com.squareup.okhttp.mockwebserver.MockWebServer;
 import org.junit.After;
@@ -196,7 +197,7 @@ public InputStream get() throws InterruptedException, ExecutionException {
                 return super.get();
             }
         };
-        return new VolleyStreamFetcher(requestQueue, url.toString(), requestFuture);
+        return new VolleyStreamFetcher(requestQueue, new GlideUrl(url.toString()), requestFuture);
     }
 
     private static String isToString(InputStream is) throws IOException {

File: integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java
Patch:
@@ -67,6 +67,6 @@ public VolleyUrlLoader(RequestQueue requestQueue) {
 
     @Override
     public DataFetcher<InputStream> getResourceFetcher(GlideUrl url, int width, int height) {
-        return new VolleyStreamFetcher(requestQueue, url.toString(), new VolleyRequestFuture<InputStream>());
+        return new VolleyStreamFetcher(requestQueue, url, new VolleyRequestFuture<InputStream>());
     }
 }

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -251,7 +251,8 @@ private static boolean shouldUsePool(InputStream is) {
     }
 
     private static Bitmap.Config getConfig(InputStream is, DecodeFormat format) {
-        if (format == DecodeFormat.ALWAYS_ARGB_8888) {
+        // Changing configs can cause skewing on 4.1, see issue #128.
+        if (format == DecodeFormat.ALWAYS_ARGB_8888 || Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN) {
             return Bitmap.Config.ARGB_8888;
         }
 

File: integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java
Patch:
@@ -19,7 +19,7 @@ public class OkHttpUrlLoader implements ModelLoader<GlideUrl, InputStream> {
      * The default factory for {@link OkHttpUrlLoader}s.
      */
     public static class Factory implements ModelLoaderFactory<GlideUrl, InputStream> {
-        private static OkHttpClient internalClient;
+        private static volatile OkHttpClient internalClient;
         private OkHttpClient client;
 
         private static OkHttpClient getInternalClient() {

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -77,7 +77,7 @@ public class Glide {
 
     private static final String DEFAULT_DISK_CACHE_DIR = "image_manager_disk_cache";
     private static final String TAG = "Glide";
-    private static Glide glide;
+    private static volatile Glide glide;
 
     private final GenericLoaderFactory loaderFactory = new GenericLoaderFactory();
     private final Engine engine;

File: library/src/androidTest/java/com/bumptech/glide/manager/Issue117Activity.java
Patch:
@@ -16,13 +16,12 @@
 /**
  * A test activity to reproduce Issue #117: https://github.com/bumptech/glide/issues/117.
  */
-public class Issue117Activity extends FragmentActivity {
+class Issue117Activity extends FragmentActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         ViewPager viewPager = new ViewPager(this);
-        int id = View.generateViewId();
-        viewPager.setId(id);
+        viewPager.setId(View.generateViewId());
         setContentView(viewPager,
                 new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
         viewPager.setAdapter(new Issue117Adapter(getSupportFragmentManager()));

File: library/src/main/java/com/bumptech/glide/RequestManager.java
Patch:
@@ -344,8 +344,8 @@ public DrawableTypeRequest<URL> load(URL url) {
     public DrawableTypeRequest<byte[]> load(byte[] model, final String id) {
         final StreamByteArrayLoader loader = new StreamByteArrayLoader(id);
         return optionsApplier.apply(model,
-                new DrawableTypeRequest<byte[]>(model, loader, null, context, glide, requestTracker,
-                        lifecycle, optionsApplier));
+                new DrawableTypeRequest<byte[]>(model, loader, null, context, glide, requestTracker, lifecycle,
+                        optionsApplier));
     }
 
     /**

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -598,7 +598,7 @@ public void onLoadFailed(Exception e, Drawable errorDrawable) {
         }
 
         @Override
-        public void onResourceReady(Object resource, GlideAnimation<Object> glideAnimation) {
+        public void onResourceReady(Object resource, GlideAnimation<? super Object> glideAnimation) {
             // Do nothing.
         }
 

File: library/src/androidTest/java/com/bumptech/glide/GlideTest.java
Patch:
@@ -63,7 +63,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Future;
 
-import static junit.framework.Assert.assertNotNull;
+import static org.junit.Assert.assertNotNull;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.anyObject;

File: library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java
Patch:
@@ -11,8 +11,8 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static junit.framework.Assert.assertTrue;
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
Patch:
@@ -32,8 +32,8 @@
 import java.net.URL;
 
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;

File: library/src/androidTest/java/com/bumptech/glide/load/MultiTransformationTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.util.ArrayList;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;

File: library/src/androidTest/java/com/bumptech/glide/load/data/MediaStoreThumbFetcherTest.java
Patch:
@@ -12,8 +12,8 @@
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;

File: library/src/androidTest/java/com/bumptech/glide/load/data/resource/ByteArrayFetcherTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.io.InputStream;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class ByteArrayFetcherTest {
 

File: library/src/androidTest/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: library/src/androidTest/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.io.InputStream;
 
-import static junit.framework.TestCase.assertNotNull;
+import static org.junit.Assert.assertNotNull;
 
 @RunWith(RobolectricTestRunner.class)
 public class StreamLocalUriFetcherTest {

File: library/src/androidTest/java/com/bumptech/glide/load/engine/CacheLoaderTest.java
Patch:
@@ -12,8 +12,8 @@
 import java.io.File;
 import java.io.IOException;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNull;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/DefaultResourceRunnerFactoryTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.io.File;
 import java.util.concurrent.ExecutorService;
 
-import static junit.framework.Assert.assertNotNull;
+import static org.junit.Assert.assertNotNull;
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.engine;
 
 import com.bumptech.glide.load.Key;
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/OriginalEngineKeyTest.java
Patch:
@@ -7,8 +7,8 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.Arrays;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class OriginalEngineKeyTest {
 

File: library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.shadows.ShadowBitmap;
 
-import static junit.framework.Assert.assertNull;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
Patch:
@@ -15,9 +15,9 @@
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;
-import static junit.framework.Assert.assertNotNull;
-import static junit.framework.Assert.assertTrue;
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 
 @RunWith(RobolectricTestRunner.class)
 public class LruBitmapPoolTest {

File: library/src/androidTest/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
Patch:
@@ -15,8 +15,8 @@
 import java.security.MessageDigest;
 import java.util.Arrays;
 
-import static junit.framework.Assert.assertNull;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/androidTest/java/com/bumptech/glide/load/engine/cache/KeyGeneratorTest.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertTrue;
 
 public class KeyGeneratorTest {
     private SafeKeyGenerator keyGenerator;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java
Patch:
@@ -4,9 +4,9 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNull;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertFalse;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyObject;

File: library/src/androidTest/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutorTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
 public class FifoPriorityThreadPoolExecutorTest {

File: library/src/androidTest/java/com/bumptech/glide/load/model/GlideUrlTest.java
Patch:
@@ -7,7 +7,7 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
 public class GlideUrlTest {

File: library/src/androidTest/java/com/bumptech/glide/load/model/ImageVideoWrapperEncoderTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: library/src/androidTest/java/com/bumptech/glide/load/model/NullResourceEncoderTest.java
Patch:
@@ -8,8 +8,8 @@
 
 import java.io.ByteArrayOutputStream;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.TestCase.assertFalse;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.mockito.Mockito.mock;
 
 public class NullResourceEncoderTest {

File: library/src/androidTest/java/com/bumptech/glide/load/model/StreamEncoderTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
 public class StreamEncoderTest {

File: library/src/androidTest/java/com/bumptech/glide/load/model/stream/HttpUrlGlideUrlLoaderTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.io.InputStream;
 
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 
 public class HttpUrlGlideUrlLoaderTest {

File: library/src/androidTest/java/com/bumptech/glide/load/model/stream/StreamByteArrayLoaderTest.java
Patch:
@@ -5,8 +5,8 @@
 
 import java.io.InputStream;
 
-import static junit.framework.Assert.assertNotNull;
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 public class StreamByteArrayLoaderTest {
 

File: library/src/androidTest/java/com/bumptech/glide/load/model/stream/UriLoaderTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.io.InputStream;
 import java.net.MalformedURLException;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/NullDecoderTest.java
Patch:
@@ -6,8 +6,8 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNull;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 
 public class NullDecoderTest {
     private NullDecoder decoder;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/NullResourceEncoderTest.java
Patch:
@@ -5,8 +5,8 @@
 
 import java.io.ByteArrayOutputStream;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertFalse;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.mockito.Mockito.mock;
 
 public class NullResourceEncoderTest {

File: library/src/androidTest/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 
 public class UnitTransformationTest {

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.Assert.assertNotSame;
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotSame;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/ImageVideoBitmapDecoderTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.mock;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoderTest.java
Patch:
@@ -13,8 +13,8 @@
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 
-import static junit.framework.Assert.assertNotNull;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertNull;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.io.FileDescriptor;
 import java.io.IOException;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.io.File;
 import java.io.IOException;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class FileDecoderTest {
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/file/FileResourceTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.io.File;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class FileResourceTest {
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.InOrder;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameModelLoaderTest.java
Patch:
@@ -5,8 +5,8 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.io.IOException;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceEncoderTest.java
Patch:
@@ -12,9 +12,9 @@
 import java.io.OutputStream;
 import java.util.Arrays;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
-import static junit.framework.TestCase.assertFalse;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapResourceDecoderTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.mock;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapResourceEncoderTest.java
Patch:
@@ -12,8 +12,8 @@
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStream;
 
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapStreamResourceDecoderTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoderTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.io.InputStream;
 
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceEncoderTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperStreamResourceDecoderTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperTest.java
Patch:
@@ -5,7 +5,7 @@
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperTransformationTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNotSame;
-import static junit.framework.Assert.assertSame;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotSame;
+import static org.junit.Assert.assertSame;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/GifBitmapWrapperDrawableTranscoderTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.util.Arrays;
 
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.io.File;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 
 public class TranscoderRegistryTest {

File: library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.bumptech.glide.load.engine.Resource;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 
 public class UnitTranscoderTest {

File: library/src/androidTest/java/com/bumptech/glide/manager/ConnectivityMonitorFactoryTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/androidTest/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.robolectric.shadows.ShadowConnectivityManager;
 import org.robolectric.shadows.ShadowNetworkInfo;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;

File: library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.util.ActivityController;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java
Patch:
@@ -4,8 +4,8 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: library/src/androidTest/java/com/bumptech/glide/provider/DataLoadProviderRegistryTest.java
Patch:
@@ -3,9 +3,9 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNotNull;
-import static junit.framework.Assert.assertNull;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 import static org.mockito.Mockito.mock;
 
 public class DataLoadProviderRegistryTest {

File: library/src/androidTest/java/com/bumptech/glide/request/RequestFutureTargetTest.java
Patch:
@@ -16,9 +16,9 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyLong;
 import static org.mockito.Matchers.eq;

File: library/src/androidTest/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
Patch:
@@ -4,8 +4,8 @@
 import org.junit.Test;
 import org.mockito.InOrder;
 
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: library/src/androidTest/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimationTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.robolectric.RobolectricTestRunner;
 
 import static com.bumptech.glide.request.animation.GlideAnimation.ViewAdapter;
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: library/src/androidTest/java/com/bumptech/glide/request/animation/ViewAnimationTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.robolectric.RobolectricTestRunner;
 
 import static com.bumptech.glide.request.animation.GlideAnimation.ViewAdapter;
-import static junit.framework.Assert.assertFalse;
+import static org.junit.Assert.assertFalse;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: library/src/androidTest/java/com/bumptech/glide/request/animation/ViewPropertyAnimationTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.RobolectricTestRunner;
 
 import static com.bumptech.glide.request.animation.GlideAnimation.ViewAdapter;
-import static junit.framework.Assert.assertFalse;
+import static org.junit.Assert.assertFalse;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;

File: library/src/androidTest/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
 public class BitmapImageViewTargetTest {

File: library/src/androidTest/java/com/bumptech/glide/request/target/GlideDrawableImageViewTargetTest.java
Patch:
@@ -15,9 +15,9 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;

File: library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;

File: library/src/androidTest/java/com/bumptech/glide/resize/load/ExifTest.java
Patch:
@@ -8,8 +8,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertNull;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricTestRunner.class)
 public class ExifTest {

File: library/src/androidTest/java/com/bumptech/glide/tests/Util.java
Patch:
@@ -10,7 +10,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class Util {
 

File: library/src/androidTest/java/com/bumptech/glide/util/TransformationUtilsTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java
Patch:
@@ -100,7 +100,7 @@ public void run() {
 
     private Resource<R> runWrapped() throws Exception {
         Resource<Z> fromCache = null;
-        if (diskCacheStrategy.cacheSource()) {
+        if (diskCacheStrategy.cacheResult()) {
             long start = SystemClock.currentThreadTimeMillis();
             fromCache = cacheLoader.load(key, cacheDecoder, width, height);
             if (Log.isLoggable(TAG, Log.VERBOSE)) {

File: library/src/main/java/com/bumptech/glide/load/Key.java
Patch:
@@ -18,10 +18,12 @@ public interface Key {
     /**
      * {@inheritDoc}
      */
+    @Override
     boolean equals(Object o);
 
     /**
      * {@inheritDoc}
      */
+    @Override
     int hashCode();
 }

File: library/src/main/java/com/bumptech/glide/load/engine/Engine.java
Patch:
@@ -30,7 +30,6 @@
 /**
  * Responsible for starting loads and managing active and cached resources.
  */
-@SuppressWarnings("rawtypes")
 public class Engine implements EngineJobListener, MemoryCache.ResourceRemovedListener, Resource.ResourceListener {
     private static final String TAG = "Engine";
     private final Map<Key, ResourceRunner> runners;

File: library/src/main/java/com/bumptech/glide/load/resource/NullDecoder.java
Patch:
@@ -10,8 +10,7 @@
  * @param <Z> The type of the decoded resource that will always be null.
  */
 public class NullDecoder<T, Z> implements ResourceDecoder<T, Z> {
-    @SuppressWarnings("rawtypes")
-    private static final NullDecoder<?, ?> NULL_DECODER = new NullDecoder();
+    private static final NullDecoder<?, ?> NULL_DECODER = new NullDecoder<Object, Object>();
 
     /**
      * Returns an instance of the NullDecoder for the given types.

File: library/src/main/java/com/bumptech/glide/load/resource/NullEncoder.java
Patch:
@@ -10,8 +10,7 @@
  * @param <T> type discarded by this Encoder
  */
 public class NullEncoder<T> implements Encoder<T> {
-    @SuppressWarnings("rawtypes")
-    private static final NullEncoder<?> NULL_ENCODER = new NullEncoder();
+    private static final NullEncoder<?> NULL_ENCODER = new NullEncoder<Object>();
 
     /**
      * Returns an Encoder for the given data type.

File: library/src/main/java/com/bumptech/glide/load/resource/NullResourceEncoder.java
Patch:
@@ -11,8 +11,7 @@
  * @param <T> The type of the resource that will always fail to be encoded.
  */
 public class NullResourceEncoder<T> implements ResourceEncoder<T> {
-    @SuppressWarnings("rawtypes")
-    private static final NullResourceEncoder<?> NULL_ENCODER = new NullResourceEncoder();
+    private static final NullResourceEncoder<?> NULL_ENCODER = new NullResourceEncoder<Object>();
 
     /**
      * Returns a NullResourceEncoder for the given type.

File: library/src/main/java/com/bumptech/glide/load/resource/UnitTransformation.java
Patch:
@@ -9,8 +9,7 @@
  * @param <T> The type of the resource that will always be returned unmodified.
  */
 public class UnitTransformation<T> implements Transformation<T> {
-    @SuppressWarnings("rawtypes")
-    private static final Transformation<?> TRANSFORMATION = new UnitTransformation();
+    private static final Transformation<?> TRANSFORMATION = new UnitTransformation<Object>();
 
     /**
      * Returns a UnitTransformation for the given type.

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/UnitTranscoder.java
Patch:
@@ -8,8 +8,7 @@
  * @param <Z> The type of the resource that will be transcoded from and to.
  */
 public class UnitTranscoder<Z> implements ResourceTranscoder<Z, Z> {
-    @SuppressWarnings("rawtypes")
-    private static final UnitTranscoder<?> UNIT_TRANSCODER = new UnitTranscoder();
+    private static final UnitTranscoder<?> UNIT_TRANSCODER = new UnitTranscoder<Object>();
 
     @SuppressWarnings("unchecked")
     public static <Z> ResourceTranscoder<Z, Z> get() {

File: library/src/main/java/com/bumptech/glide/request/animation/NoAnimation.java
Patch:
@@ -6,8 +6,7 @@
  * @param <R> animated resource type
  */
 public class NoAnimation<R> implements GlideAnimation<R> {
-    @SuppressWarnings("rawtypes")
-    private static final NoAnimation<?> NO_ANIMATION = new NoAnimation();
+    private static final NoAnimation<?> NO_ANIMATION = new NoAnimation<Object>();
     @SuppressWarnings("rawtypes")
     private static final GlideAnimationFactory<?> NO_ANIMATION_FACTORY = new NoAnimationFactory();
 

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -118,7 +118,8 @@ public static File getPhotoCacheDir(Context context, String cacheName) {
         if (cacheDir != null) {
             File result = new File(cacheDir, cacheName);
             if (!result.mkdirs() && (!result.exists() || !result.isDirectory())) {
-                throw new IllegalStateException("Cannot create cache directory structure for " + result);
+                // File wasn't able to create a directory, or the result exists but not a directory
+                return null;
             }
             return result;
         }

File: library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java
Patch:
@@ -36,6 +36,7 @@ public class DiskLruCacheWrapper implements DiskCache {
      * @return The new disk cache with the given arguments, or the current cache if one already exists
      */
     public static synchronized DiskCache get(File directory, int maxSize) {
+        // TODO calling twice with different arguments makes it return the cache for the same directory, it's public!
         if (wrapper == null) {
             wrapper = new DiskLruCacheWrapper(directory, maxSize);
         }

File: library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java
Patch:
@@ -25,8 +25,8 @@ public boolean encode(InputStream data, OutputStream os) {
             }
             return true;
         } catch (IOException e) {
-            if (Log.isLoggable(TAG, Log.ERROR)) {
-                Log.v(TAG, "Failed to encode data onto the OutputStream", e);
+            if (Log.isLoggable(TAG, Log.WARN)) {
+                Log.w(TAG, "Failed to encode data onto the OutputStream", e);
             }
             return false;
         } finally {

File: library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
Patch:
@@ -10,11 +10,8 @@
  * @see GlideDrawableImageViewTarget
  */
 public class BitmapImageViewTarget extends ImageViewTarget<Bitmap> {
-    private final ImageView view;
-
     public BitmapImageViewTarget(ImageView view) {
         super(view);
-        this.view = view;
     }
 
     /**

File: library/src/main/java/com/bumptech/glide/request/target/GlideDrawableImageViewTarget.java
Patch:
@@ -11,7 +11,6 @@
  */
 public class GlideDrawableImageViewTarget extends ImageViewTarget<GlideDrawable> {
     private static final float SQUARE_RATIO_MARGIN = 0.05f;
-    private final ImageView view;
     private int maxLoopCount;
     private GlideDrawable resource;
 
@@ -36,7 +35,6 @@ public GlideDrawableImageViewTarget(ImageView view) {
      */
     public GlideDrawableImageViewTarget(ImageView view, int maxLoopCount) {
         super(view);
-        this.view = view;
         this.maxLoopCount = maxLoopCount;
     }
 

File: library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java
Patch:
@@ -430,7 +430,7 @@ private static class EngineTestHarness {
         ResourceTranscoder<Object, Object> transcoder = mock(ResourceTranscoder.class);
         Priority priority = Priority.NORMAL;
         ResourceCallback cb = mock(ResourceCallback.class);
-        Resource<Object> resource = mock(Resource.class);
+        Resource resource = mock(Resource.class);
         Map<Key, ResourceRunner> runners = new HashMap<Key, ResourceRunner>();
         Transformation transformation = mock(Transformation.class);
         ResourceRunnerFactory factory = mock(ResourceRunnerFactory.class);

File: library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java
Patch:
@@ -173,6 +173,7 @@ public DrawableRequestBuilder<ModelType> transform(BitmapTransformation... trans
      *
      * @return This request builder.
      */
+    @SuppressWarnings("unchecked")
     public DrawableRequestBuilder<ModelType> centerCrop() {
         return transform(glide.getDrawableCenterCrop());
     }
@@ -187,6 +188,7 @@ public DrawableRequestBuilder<ModelType> centerCrop() {
      *
      * @return This request builder.
      */
+    @SuppressWarnings("unchecked")
     public DrawableRequestBuilder<ModelType> fitCenter() {
         return transform(glide.getDrawableFitCenter());
     }

File: library/src/main/java/com/bumptech/glide/GenericTranscodeRequest.java
Patch:
@@ -39,7 +39,7 @@ public class GenericTranscodeRequest<ModelType, DataType, ResourceType>
     private static <A, T, Z, R> LoadProvider<A, T, Z, R> build(Glide glide, ModelLoader<A, T> modelLoader,
             Class<T> dataClass, Class<Z> resourceClass, ResourceTranscoder<Z, R> transcoder) {
         if (transcoder == null) {
-            transcoder = UnitTranscoder.get();
+            transcoder = (ResourceTranscoder<Z, R>) UnitTranscoder.get();
         }
         DataLoadProvider<T, Z> dataLoadProvider = glide.buildDataProvider(dataClass, resourceClass);
         return new FixedLoadProvider<A, T, Z, R>(modelLoader, transcoder, dataLoadProvider);

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -335,7 +335,7 @@ public void setMemoryCategory(MemoryCategory memoryCategory) {
      *
      * @param target The Target to cancel loads for.
      */
-    public static void clear(Target target) {
+    public static void clear(Target<?> target) {
         Util.assertMainThread();
         Request request = target.getRequest();
         if (request != null) {
@@ -349,7 +349,7 @@ public static void clear(Target target) {
      *
      * @param target The target to cancel loads for.
      */
-    public static void clear(FutureTarget target) {
+    public static void clear(FutureTarget<?> target) {
         target.clear();
     }
 
@@ -367,7 +367,7 @@ public static void clear(FutureTarget target) {
      * @throws IllegalArgumentException if an object other than Glide's metadata is set as the view's tag.
      */
     public static void clear(View view) {
-        Target viewTarget = new ClearTarget(view);
+        Target<?> viewTarget = new ClearTarget(view);
         clear(viewTarget);
     }
 

File: library/src/main/java/com/bumptech/glide/load/engine/Engine.java
Patch:
@@ -30,6 +30,7 @@
 /**
  * Responsible for starting loads and managing active and cached resources.
  */
+@SuppressWarnings("rawtypes")
 public class Engine implements EngineJobListener, MemoryCache.ResourceRemovedListener, Resource.ResourceListener {
     private static final String TAG = "Engine";
     private final Map<Key, ResourceRunner> runners;
@@ -197,8 +198,9 @@ public <T, Z, R> LoadStatus load(int width, int height, ResourceDecoder<File, Z>
         return new LoadStatus(cb, runner.getJob());
     }
 
+    @SuppressWarnings("unchecked")
     @Override
-    public void onEngineJobComplete(Key key, Resource resource) {
+    public void onEngineJobComplete(Key key, Resource<?> resource) {
         // A null resource indicates that the load failed, usually due to an exception.
         if (resource != null) {
             resource.setResourceListener(key, this);

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
Patch:
@@ -62,7 +62,7 @@ boolean isCancelled() {
     }
 
     @Override
-    public void onResourceReady(final Resource resource) {
+    public void onResourceReady(final Resource<?> resource) {
         final long start = LogTime.getLogTime();
         mainHandler.post(new Runnable() {
             @Override

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJobListener.java
Patch:
@@ -3,8 +3,7 @@
 import com.bumptech.glide.load.Key;
 
 interface EngineJobListener {
-
-    public void onEngineJobComplete(Key key, Resource resource);
+    public void onEngineJobComplete(Key key, Resource<?> resource);
 
     public void onEngineJobCancelled(EngineJob engineJob, Key key);
 }

File: library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java
Patch:
@@ -11,6 +11,7 @@
 import java.nio.ByteBuffer;
 import java.security.MessageDigest;
 
+@SuppressWarnings("rawtypes")
 class EngineKey implements Key {
     private static final String FORMAT = "UTF-8";
 

File: library/src/main/java/com/bumptech/glide/load/engine/EngineKeyFactory.java
Patch:
@@ -8,6 +8,7 @@
 
 class EngineKeyFactory {
 
+    @SuppressWarnings("rawtypes")
     public EngineKey buildKey(String id, int width, int height, ResourceDecoder cacheDecoder,
             ResourceDecoder sourceDecoder, Transformation transformation, ResourceEncoder encoder,
             ResourceTranscoder transcoder, Encoder sourceEncoder) {

File: library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java
Patch:
@@ -27,7 +27,7 @@ class ResourceRunner<Z, R> implements Runnable, Prioritized {
     private final EngineKey key;
     private final Transformation<Z> transformation;
     private final ResourceTranscoder<Z, R> transcoder;
-    private final SourceResourceRunner sourceRunner;
+    private final SourceResourceRunner<?, Z, R> sourceRunner;
     private final EngineJob job;
     private final Priority priority;
     private final ResourceDecoder<File, Z> cacheDecoder;
@@ -41,8 +41,8 @@ class ResourceRunner<Z, R> implements Runnable, Prioritized {
 
     public ResourceRunner(EngineKey key, int width, int height, CacheLoader cacheLoader,
             ResourceDecoder<File, Z> cacheDecoder, Transformation<Z> transformation,
-            ResourceTranscoder<Z, R> transcoder, SourceResourceRunner sourceRunner, ExecutorService diskCacheService,
-            ExecutorService resizeService, EngineJob job, Priority priority) {
+            ResourceTranscoder<Z, R> transcoder, SourceResourceRunner<?, Z, R> sourceRunner,
+            ExecutorService diskCacheService, ExecutorService resizeService, EngineJob job, Priority priority) {
         this.key = key;
         this.width = width;
         this.height = height;

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java
Patch:
@@ -101,11 +101,13 @@ private void makeTail(LinkedEntry<K, V> entry) {
         updateEntry(entry);
     }
 
+    @SuppressWarnings({ "rawtypes", "unchecked" })
     private static void updateEntry(LinkedEntry entry) {
         entry.next.prev = entry;
         entry.prev.next = entry;
     }
 
+    @SuppressWarnings({ "rawtypes", "unchecked" })
     private static void removeEntry(LinkedEntry entry) {
         entry.prev.next = entry.next;
         entry.next.prev = entry.prev;

File: library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * An LRU in memory cache for {@link com.bumptech.glide.load.engine.Resource}s.
  */
-public class LruResourceCache extends LruCache<Key, Resource> implements MemoryCache {
+public class LruResourceCache extends LruCache<Key, Resource<?>> implements MemoryCache {
     private ResourceRemovedListener listener;
 
     /**
@@ -27,14 +27,14 @@ public void setResourceRemovedListener(ResourceRemovedListener listener) {
     }
 
     @Override
-    protected void onItemEvicted(Key key, Resource item) {
+	protected void onItemEvicted(Key key, Resource<?> item) {
         if (listener != null) {
             listener.onResourceRemoved(item);
         }
     }
 
     @Override
-    protected int getSize(Resource item) {
+    protected int getSize(Resource<?> item) {
         return item.getSize();
     }
 

File: library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java
Patch:
@@ -11,7 +11,7 @@ public interface MemoryCache {
      * An interface that will be called whenever a bitmap is removed from the cache.
      */
     public interface ResourceRemovedListener {
-        public void onResourceRemoved(Resource removed);
+        public void onResourceRemoved(Resource<?> removed);
     }
 
     /**
@@ -31,7 +31,7 @@ public interface ResourceRemovedListener {
      *
      * @param key The key.
      */
-    public Resource remove(Key key);
+    public Resource<?> remove(Key key);
 
     /**
      * Add bitmap to the cache with the given key.
@@ -40,7 +40,7 @@ public interface ResourceRemovedListener {
      * @param resource The {@link Resource} to store.
      * @return The old value of key (null if key is not in map).
      */
-    public Resource put(Key key, Resource resource);
+    public Resource<?> put(Key key, Resource<?> resource);
 
     /**
      * Set the listener to be called when a bitmap is removed from the cache.

File: library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCacheAdapter.java
Patch:
@@ -16,12 +16,12 @@ public void setSizeMultiplier(float multiplier) {
     }
 
     @Override
-    public Resource remove(Key key) {
+    public Resource<?> remove(Key key) {
         return null;
     }
 
     @Override
-    public Resource put(Key key, Resource resource) {
+    public Resource<?> put(Key key, Resource<?> resource) {
         listener.onResourceRemoved(resource);
         return null;
     }

File: library/src/main/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor.java
Patch:
@@ -57,7 +57,7 @@ public void run() {
         }
     }
 
-    private static class FifoPriorityLoadTask<T> extends FutureTask<T> implements Comparable<FifoPriorityLoadTask> {
+    private static class FifoPriorityLoadTask<T> extends FutureTask<T> implements Comparable<FifoPriorityLoadTask<?>> {
         private final int priority;
         private final int order;
 
@@ -72,7 +72,7 @@ public FifoPriorityLoadTask(Runnable runnable, T result, int order) {
         }
 
         @Override
-        public int compareTo(FifoPriorityLoadTask loadTask) {
+        public int compareTo(FifoPriorityLoadTask<?> loadTask) {
             int result = priority - loadTask.priority;
             if (result == 0 && loadTask != this) {
                 result = order - loadTask.order;

File: library/src/main/java/com/bumptech/glide/load/resource/NullDecoder.java
Patch:
@@ -10,7 +10,8 @@
  * @param <Z> The type of the decoded resource that will always be null.
  */
 public class NullDecoder<T, Z> implements ResourceDecoder<T, Z> {
-    private static final NullDecoder NULL_DECODER = new NullDecoder();
+    @SuppressWarnings("rawtypes")
+    private static final NullDecoder<?, ?> NULL_DECODER = new NullDecoder();
 
     /**
      * Returns an instance of the NullDecoder for the given types.
@@ -20,7 +21,7 @@ public class NullDecoder<T, Z> implements ResourceDecoder<T, Z> {
      */
     @SuppressWarnings("unchecked")
     public static <T, Z> NullDecoder<T, Z> get() {
-        return NULL_DECODER;
+        return (NullDecoder<T, Z>) NULL_DECODER;
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/load/resource/NullResourceEncoder.java
Patch:
@@ -11,7 +11,8 @@
  * @param <T> The type of the resource that will always fail to be encoded.
  */
 public class NullResourceEncoder<T> implements ResourceEncoder<T> {
-    private static final NullResourceEncoder NULL_ENCODER = new NullResourceEncoder();
+    @SuppressWarnings("rawtypes")
+    private static final NullResourceEncoder<?> NULL_ENCODER = new NullResourceEncoder();
 
     /**
      * Returns a NullResourceEncoder for the given type.
@@ -20,7 +21,7 @@ public class NullResourceEncoder<T> implements ResourceEncoder<T> {
      */
     @SuppressWarnings("unchecked")
     public static <T> NullResourceEncoder<T> get() {
-        return NULL_ENCODER;
+        return (NullResourceEncoder<T>) NULL_ENCODER;
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/load/resource/UnitTransformation.java
Patch:
@@ -9,7 +9,8 @@
  * @param <T> The type of the resource that will always be returned unmodified.
  */
 public class UnitTransformation<T> implements Transformation<T> {
-    private static final UnitTransformation TRANSFORMATION = new UnitTransformation();
+    @SuppressWarnings("rawtypes")
+    private static final Transformation<?> TRANSFORMATION = new UnitTransformation();
 
     /**
      * Returns a UnitTransformation for the given type.
@@ -18,7 +19,7 @@ public class UnitTransformation<T> implements Transformation<T> {
      */
     @SuppressWarnings("unchecked")
     public static <T> UnitTransformation<T> get() {
-        return TRANSFORMATION;
+        return (UnitTransformation<T>) TRANSFORMATION;
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java
Patch:
@@ -24,6 +24,7 @@ public GifDrawableTransformation(Transformation<Bitmap> wrapped, BitmapPool bitm
     @Override
     public Resource<GifDrawable> transform(Resource<GifDrawable> resource, int outWidth, int outHeight) {
         GifDrawable drawable = resource.get();
+        @SuppressWarnings("unchecked")
         Transformation<Bitmap> newTransformation =
                 new MultiTransformation<Bitmap>(drawable.getFrameTransformation(), wrapped);
 

File: library/src/main/java/com/bumptech/glide/provider/EmptyDataLoadProvider.java
Patch:
@@ -7,12 +7,13 @@
 /**
  * A {@link com.bumptech.glide.provider.DataLoadProvider} that returns {@code null} for every class.
  */
+@SuppressWarnings("rawtypes")
 public class EmptyDataLoadProvider implements DataLoadProvider {
-    private static final EmptyDataLoadProvider EMPTY_DATA_LOAD_PROVIDER = new EmptyDataLoadProvider();
+    private static final DataLoadProvider<?, ?> EMPTY_DATA_LOAD_PROVIDER = new EmptyDataLoadProvider();
 
     @SuppressWarnings("unchecked")
     public static <T, Z> DataLoadProvider<T, Z> get() {
-        return EMPTY_DATA_LOAD_PROVIDER;
+        return (DataLoadProvider<T, Z>) EMPTY_DATA_LOAD_PROVIDER;
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/request/RequestListener.java
Patch:
@@ -40,7 +40,7 @@ public interface RequestListener<T, R> {
      * @return True if the listener has handled updating the target for the given exception, false to allow
      *         Glide's request to update the target.
      */
-    public abstract boolean onException(Exception e, T model, Target target, boolean isFirstResource);
+    public abstract boolean onException(Exception e, T model, Target<R> target, boolean isFirstResource);
 
     /**
      * Called when a load completes successfully, immediately after
@@ -57,6 +57,6 @@ public interface RequestListener<T, R> {
      * @return True if the listener has handled setting the resource on the target (including any animations), false to
      *         allow Glide's request to update the target (again including animations).
      */
-    public abstract boolean onResourceReady(R resource, T model, Target target, boolean isFromMemoryCache,
+    public abstract boolean onResourceReady(R resource, T model, Target<R> target, boolean isFromMemoryCache,
             boolean isFirstResource);
 }

File: library/src/main/java/com/bumptech/glide/request/ResourceCallback.java
Patch:
@@ -12,7 +12,7 @@ public interface ResourceCallback {
      *
      * @param resource The loaded resource.
      */
-    public void onResourceReady(Resource resource);
+    public void onResourceReady(Resource<?> resource);
 
     /**
      * Called when a resource fails to load successfully.

File: library/src/androidTest/java/com/bumptech/glide/manager/LifecycleTest.java
Patch:
@@ -15,12 +15,12 @@
 @RunWith(RobolectricTestRunner.class)
 public class LifecycleTest {
 
-    private Lifecycle lifecycle;
+    private ActivityFragmentLifecycle lifecycle;
     private LifecycleListener listener;
 
     @Before
     public void setUp() {
-        lifecycle = new Lifecycle();
+        lifecycle = new ActivityFragmentLifecycle();
         listener = mock(LifecycleListener.class);
     }
 

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Api.java
Patch:
@@ -33,16 +33,15 @@ public class Api {
     //incomplete size independent url for photos that can be cached per photo
     private static final String CACHEABLE_PHOTO_URL = "http://farm%s.staticflickr.com/%s/%s_%s_";
 
-
-    private static final SparseArray<String> EDGE_TO_SIZE_KEY = new SparseArray<String>() {{
+    private static final SparseArray<String> EDGE_TO_SIZE_KEY = new SparseArray<String>() { {
         put(75, "s");
         put(100, "t");
         put(150, "q");
         put(240, "m");
         put(320, "n");
         put(640, "z");
         put(1024, "b");
-    }};
+    } };
     private static final List<Integer> SORTED_SIZE_KEYS = new ArrayList<Integer>(EDGE_TO_SIZE_KEY.size());
     static {
         for (int i = 0; i < EDGE_TO_SIZE_KEY.size(); i++) {

File: library/src/main/java/com/bumptech/glide/load/Encoder.java
Patch:
@@ -3,7 +3,7 @@
 import java.io.OutputStream;
 
 /**
- * An interface for writing data to some persistent data store (ie a local File cache).
+ * An interface for writing data to some persistent data store (i.e. a local File cache).
  *
  * @param <T> The type of the data that will be written.
  */
@@ -18,7 +18,7 @@ public interface Encoder<T> {
      */
     public boolean encode(T data, OutputStream os);
 
-    /*
+    /**
      * Returns an ID identifying any transformation this encoder may apply to the given data that will be mixed in to
      * the cache key.
      *

File: library/src/main/java/com/bumptech/glide/load/ResourceEncoder.java
Patch:
@@ -3,10 +3,10 @@
 import com.bumptech.glide.load.engine.Resource;
 
 /**
- * An interface for writing data from a resource to some persistent data store (ie a local File cache).
+ * An interface for writing data from a resource to some persistent data store (i.e. a local File cache).
  *
  * @param <T> The type of the data contained by the resource.
  */
 public interface ResourceEncoder<T> extends Encoder<Resource<T>> {
-    // Empty interface for type.
+    // specializing the generic arguments
 }

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java
Patch:
@@ -53,7 +53,7 @@ public interface BitmapPool {
     public Bitmap get(int width, int height, Bitmap.Config config);
 
     /**
-     * Removes all {@link android.graphics.Bitmap}s from the poo.
+     * Removes all {@link android.graphics.Bitmap}s from the pool.
      */
     public void clearMemory();
 

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
Patch:
@@ -179,15 +179,14 @@ public void remove(Bitmap bitmap) {
     }
 
     private static class NullBitmapTracker implements BitmapTracker {
-
         @Override
         public void add(Bitmap bitmap) {
-
+            // Do nothing.
         }
 
         @Override
         public void remove(Bitmap bitmap) {
-
+            // Do nothing.
         }
     }
 }

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
Patch:
@@ -118,9 +118,9 @@ private static int getBytesPerPixel(Bitmap.Config config) {
             case ALPHA_8:
                 return 1;
             default:
-                // We only use this to calculate sizes to get, so choosing 4 bytes per pixel is conservative and
-                // probably forces us to get a larger bitmap than we really need. Since we can't tell for sure, probably
-                // better safe than sorry.
+                // We only use this to calculate sizes to get, so choosing 4 bytes per pixel is conservative
+                // and probably forces us to get a larger bitmap than we really need.
+                // Since we can't tell for sure, probably better safe than sorry.
                 return 4;
         }
     }

File: library/src/main/java/com/bumptech/glide/load/model/ModelCache.java
Patch:
@@ -10,7 +10,7 @@
  * model, width and height. For a loader that takes a model and returns a url, the cache could be used to safely memoize
  * url creation based on the width and height of the view.
  *
- * @param <A> Some Model type that implements equals and hashcode.
+ * @param <A> Some Model type that implements {@link #equals} and {@link #hashCode}.
  * @param <B> Some useful type that may be expensive to create (URL, file path, etc).
  */
 public class ModelCache<A, B> {

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorFileLoader.java
Patch:
@@ -30,6 +30,7 @@ public ModelLoader<File, ParcelFileDescriptor> build(Context context, GenericLoa
 
         @Override
         public void teardown() {
+            // Do nothing.
         }
     }
 

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorModelLoader.java
Patch:
@@ -10,4 +10,5 @@
  * @param <T> The type of the model that will be translated into an {@link java.io.File}.
  */
 public interface FileDescriptorModelLoader<T> extends ModelLoader<T, ParcelFileDescriptor> {
+    // specializing the generic arguments
 }

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorResourceLoader.java
Patch:
@@ -27,7 +27,9 @@ public ModelLoader<Integer, ParcelFileDescriptor> build(Context context, Generic
         }
 
         @Override
-        public void teardown() { }
+        public void teardown() {
+            // Do nothing.
+        }
     }
 
     public FileDescriptorResourceLoader(Context context) {

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorStringLoader.java
Patch:
@@ -27,7 +27,9 @@ public ModelLoader<String, ParcelFileDescriptor> build(Context context, GenericL
         }
 
         @Override
-        public void teardown() { }
+        public void teardown() {
+            // Do nothing.
+        }
     }
 
     public FileDescriptorStringLoader(Context context) {

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorUriLoader.java
Patch:
@@ -28,7 +28,9 @@ public ModelLoader<Uri, ParcelFileDescriptor> build(Context context, GenericLoad
         }
 
         @Override
-        public void teardown() { }
+        public void teardown() {
+            // Do nothing.
+        }
     }
 
     public FileDescriptorUriLoader(Context context) {

File: library/src/main/java/com/bumptech/glide/load/model/stream/HttpUrlGlideUrlLoader.java
Patch:
@@ -27,7 +27,7 @@ public ModelLoader<GlideUrl, InputStream> build(Context context, GenericLoaderFa
 
         @Override
         public void teardown() {
-
+            // Do nothing.
         }
     }
 

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamFileLoader.java
Patch:
@@ -26,7 +26,9 @@ public ModelLoader<File, InputStream> build(Context context, GenericLoaderFactor
         }
 
         @Override
-        public void teardown() { }
+        public void teardown() {
+            // Do nothing.
+        }
     }
 
     public StreamFileLoader(Context context) {

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamModelLoader.java
Patch:
@@ -9,4 +9,6 @@
  *
  * @param <T> The type of the model that will be translated into an {@link InputStream}.
  */
-public interface StreamModelLoader<T> extends ModelLoader<T, InputStream> { }
+public interface StreamModelLoader<T> extends ModelLoader<T, InputStream> {
+    // specializing the generic arguments
+}

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamResourceLoader.java
Patch:
@@ -26,7 +26,9 @@ public ModelLoader<Integer, InputStream> build(Context context, GenericLoaderFac
         }
 
         @Override
-        public void teardown() { }
+        public void teardown() {
+            // Do nothing.
+        }
     }
 
     public StreamResourceLoader(Context context) {

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamStringLoader.java
Patch:
@@ -26,7 +26,9 @@ public ModelLoader<String, InputStream> build(Context context, GenericLoaderFact
         }
 
         @Override
-        public void teardown() { }
+        public void teardown() {
+            // Do nothing.
+        }
     }
 
     public StreamStringLoader(Context context) {

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamUriLoader.java
Patch:
@@ -31,7 +31,9 @@ public ModelLoader<Uri, InputStream> build(Context context, GenericLoaderFactory
         }
 
         @Override
-        public void teardown() { }
+        public void teardown() {
+            // Do nothing.
+        }
     }
 
     public StreamUriLoader(Context context) {

File: library/src/main/java/com/bumptech/glide/load/model/stream/StreamUrlLoader.java
Patch:
@@ -27,7 +27,9 @@ public ModelLoader<URL, InputStream> build(Context context, GenericLoaderFactory
         }
 
         @Override
-        public void teardown() { }
+        public void teardown() {
+            // Do nothing.
+        }
     }
 
     public StreamUrlLoader(ModelLoader<GlideUrl, InputStream> glideUrlLoader) {

File: library/src/main/java/com/bumptech/glide/load/resource/bytes/BytesResource.java
Patch:
@@ -23,5 +23,7 @@ public int getSize() {
     }
 
     @Override
-    protected void recycleInternal() {  }
+    protected void recycleInternal() {
+        // Do nothing.
+    }
 }

File: library/src/main/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoder.java
Patch:
@@ -14,9 +14,8 @@
 import java.io.InputStream;
 
 /**
- * An {@link com.bumptech.glide.load.ResourceDecoder} that can decode either an {@link android.graphics.Bitmap} or an
- * {@link com.bumptech.glide.load.resource.gif.GifDrawable} from an {@link java.io.InputStream} or an
- * {@link android.os.ParcelFileDescriptor}.
+ * An {@link ResourceDecoder} that can decode either an {@link Bitmap} or an {@link GifDrawable}
+ * from an {@link InputStream} or a {@link android.os.ParcelFileDescriptor ParcelFileDescriptor}.
  */
 public class GifBitmapWrapperResourceDecoder implements ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> {
     private final ResourceDecoder<ImageVideoWrapper, Bitmap> bitmapDecoder;

File: library/src/main/java/com/bumptech/glide/manager/NullConnectivityMonitor.java
Patch:
@@ -7,16 +7,16 @@ class NullConnectivityMonitor implements ConnectivityMonitor {
 
     @Override
     public void onStart() {
-
+        // Do nothing.
     }
 
     @Override
     public void onStop() {
-
+        // Do nothing.
     }
 
     @Override
     public void onDestroy() {
-
+        // Do nothing.
     }
 }

File: library/src/main/java/com/bumptech/glide/request/GenericRequest.java
Patch:
@@ -127,7 +127,7 @@ public static <A, T, Z, R> GenericRequest<A, T, Z, R> obtain(
     }
 
     private GenericRequest() {
-        // Empty.
+        // just create, instances are reused with recycle/init
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/request/ResourceCallback.java
Patch:
@@ -3,7 +3,7 @@
 import com.bumptech.glide.load.engine.Resource;
 
 /**
- * A callback that listens for when a resource load completes sucessfully or fails due to an exception.
+ * A callback that listens for when a resource load completes successfully or fails due to an exception.
  */
 public interface ResourceCallback {
 

File: library/src/main/java/com/bumptech/glide/util/LruCache.java
Patch:
@@ -57,7 +57,9 @@ protected int getSize(Y item) {
      * @param key The key of the evicted item.
      * @param item The evicted item.
      */
-    protected void onItemEvicted(T key, Y item) {  }
+    protected void onItemEvicted(T key, Y item) {
+        // optional override
+    }
 
     /**
      * Returns the sum of the sizes of all items in the cache.

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -59,6 +59,7 @@
 import com.bumptech.glide.request.target.ImageViewTargetFactory;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.target.ViewTarget;
+import com.bumptech.glide.util.Util;
 
 import java.io.File;
 import java.io.InputStream;
@@ -332,6 +333,7 @@ public void setMemoryCategory(MemoryCategory memoryCategory) {
      * @param target The Target to cancel loads for.
      */
     public static void clear(Target target) {
+        Util.assertMainThread();
         Request request = target.getRequest();
         if (request != null) {
             request.clear();

File: library/src/main/java/com/bumptech/glide/request/GenericRequest.java
Patch:
@@ -21,6 +21,7 @@
 import com.bumptech.glide.request.target.SizeReadyCallback;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.util.LogTime;
+import com.bumptech.glide.util.Util;
 
 import java.io.File;
 import java.util.ArrayDeque;
@@ -276,6 +277,7 @@ void cancel() {
      */
     @Override
     public void clear() {
+        Util.assertMainThread();
         cancel();
         // Resource must be released before canNotifyStatusChanged is called.
         if (resource != null) {

File: library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java
Patch:
@@ -108,7 +108,7 @@ public void testDoesNotThrowWithNullModelWhenRequestIsBuilt() {
     @Test
     public void testAddsNewRequestToRequestTracker() {
         getNullModelRequest().into(mock(Target.class));
-        verify(requestTracker).addRequest(any(Request.class));
+        verify(requestTracker).runRequest(any(Request.class));
     }
 
     @Test

File: library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java
Patch:
@@ -533,9 +533,8 @@ public <Y extends Target<TranscodeType>> Y into(Y target) {
 
         Request request = buildRequest(target);
         target.setRequest(request);
-        requestTracker.addRequest(request);
-        request.begin();
         lifecycle.addListener(target);
+        requestTracker.runRequest(request);
 
         return target;
     }

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java
Patch:
@@ -19,11 +19,12 @@
  * @see android.graphics.Bitmap#compress(android.graphics.Bitmap.CompressFormat, int, java.io.OutputStream)
  */
 public class BitmapEncoder implements ResourceEncoder<Bitmap> {
+    private static final int DEFAULT_COMPRESSION_QUALITY = 90;
     private Bitmap.CompressFormat compressFormat;
     private int quality;
 
     public BitmapEncoder() {
-        this(null, 75);
+        this(null, DEFAULT_COMPRESSION_QUALITY);
     }
 
     public BitmapEncoder(Bitmap.CompressFormat compressFormat, int quality) {

File: library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
Patch:
@@ -7,7 +7,7 @@
  * A {@link com.bumptech.glide.request.target.Target} that can display an {@link android.graphics.Bitmap} in an
  * {@link android.widget.ImageView}.
  *
- * @see com.bumptech.glide.request.target.DrawableImageViewTarget
+ * @see GlideDrawableImageViewTarget
  */
 public class BitmapImageViewTarget extends ImageViewTarget<Bitmap> {
     private final ImageView view;

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
Patch:
@@ -13,7 +13,7 @@
  * A class that manages a load by adding and removing callbacks for for the load and notifying callbacks when the
  * load completes.
  */
-public class EngineJob implements ResourceCallback {
+class EngineJob implements ResourceCallback {
     private static final String TAG = "EngineJob";
     private boolean isCacheable;
     private final EngineJobListener listener;
@@ -61,7 +61,7 @@ void cancel() {
             return;
         }
         isCancelled = true;
-        listener.onEngineJobCancelled(key);
+        listener.onEngineJobCancelled(this, key);
     }
 
     // Exposed for testing.

File: library/src/main/java/com/bumptech/glide/load/engine/EngineJobListener.java
Patch:
@@ -6,5 +6,5 @@ interface EngineJobListener {
 
     public void onEngineJobComplete(Key key, Resource resource);
 
-    public void onEngineJobCancelled(Key key);
+    public void onEngineJobCancelled(EngineJob engineJob, Key key);
 }

File: library/src/com/bumptech/glide/resize/ImageManager.java
Patch:
@@ -485,7 +485,9 @@ public void cancel(LoadedCallback cb) {
                 // receive results from old runners if the old runner was cancelled, but completed successfully anyway
                 // because it received the cancellation too late.
                 runner.cancel();
-                jobs.remove(key);
+                if (jobs.get(key) == this) {
+                    jobs.remove(key);
+                }
             }
         }
 

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -23,7 +23,6 @@
 import android.widget.Button;
 import android.widget.EditText;
 import android.widget.TextView;
-
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.samples.flickr.api.Api;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
Patch:
@@ -47,7 +47,7 @@ public static Bitmap centerCrop(Bitmap recycled, Bitmap toCrop, int width, int h
         }
 
         m.setScale(scale, scale);
-        m.postTranslate((int) dx + 0.5f, (int) dy + 0.5f);
+        m.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
         final Bitmap result;
         if (recycled != null) {
             result = recycled;

File: library/src/com/bumptech/glide/resize/load/ImageResizer.java
Patch:
@@ -219,7 +219,7 @@ public static Bitmap centerCrop(Bitmap recycled, Bitmap toCrop, int width, int h
         }
 
         m.setScale(scale, scale);
-        m.postTranslate((int) dx + 0.5f, (int) dy + 0.5f);
+        m.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
         final Bitmap result;
         if (recycled != null) {
             result = recycled;

File: samples/flickr/src/com/bumptech/glide/samples/flickr/api/Api.java
Patch:
@@ -21,7 +21,7 @@ public class Api {
     private static Api API;
     private static final String TAG = "FlickrApi";
     private static final String API_KEY = "f0e6fbb5fdf1f3842294a1d21f84e8a6";
-    private static final String SIGNED_API_URL = "http://api.flickr.com/services/rest/?method=%s&format=json&api_key="
+    private static final String SIGNED_API_URL = "https://api.flickr.com/services/rest/?method=%s&format=json&api_key="
             + API_KEY;
     //incomplete size independent url for photos that can be cached per photo
     private static final String CACHEABLE_PHOTO_URL = "http://farm%s.staticflickr.com/%s/%s_%s_";

File: library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
Patch:
@@ -62,8 +62,8 @@ public void begin() {
      */
     @Override
     public void clear() {
-        full.clear();
         thumb.clear();
+        full.clear();
     }
 
     /**

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -55,8 +55,8 @@
 import com.bumptech.glide.provider.DataLoadProvider;
 import com.bumptech.glide.provider.DataLoadProviderRegistry;
 import com.bumptech.glide.request.FutureTarget;
-import com.bumptech.glide.request.animation.GlideAnimation;
 import com.bumptech.glide.request.Request;
+import com.bumptech.glide.request.animation.GlideAnimation;
 import com.bumptech.glide.request.target.ImageViewTargetFactory;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.target.ViewTarget;

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -161,7 +161,6 @@ public View getView(int position, View view, ViewGroup container) {
                             .override(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE)
                     )
                     .animate(R.anim.fade_in)
-                    .centerCrop()
                     .into(imageView);
 
             return imageView;

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
Patch:
@@ -123,8 +123,7 @@ protected GenericRequestBuilder getRequestBuilder(Photo item) {
                         .load(item)
                         .diskCacheStrategy(DiskCacheStrategy.SOURCE)
                         .override(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE)
-                    )
-                    .centerCrop();
+                    );
         }
     }
 
@@ -185,7 +184,6 @@ public void run() {
                         .load(current)
                         .diskCacheStrategy(DiskCacheStrategy.SOURCE)
                         .override(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE))
-                    .centerCrop()
                     .crossFade(R.anim.fade_in, 150)
                     .into(viewHolder.imageView);
 

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
Patch:
@@ -199,7 +199,7 @@ public void testReturnsNonNullConstantState() {
 
     @Test
     public void testReturnsNewDrawableFromConstantState() {
-        GifHeader gifHeader = mock(GifHeader.class);
+        GifHeader gifHeader = new GifHeader();
         Transformation<Bitmap> transformation = mock(Transformation.class);
         GifDecoder.BitmapProvider provider = mock(GifDecoder.BitmapProvider.class);
         drawable = new GifDrawable(Robolectric.application, provider, transformation, 100, 100, "fakeId", gifHeader,

File: third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
Patch:
@@ -109,6 +109,7 @@ public class GifDecoder {
     private GifHeader header;
     private String id;
     private BitmapProvider bitmapProvider;
+    private GifHeaderParser parser = new GifHeaderParser();
 
     public interface BitmapProvider {
         public Bitmap obtain(int width, int height, Bitmap.Config config);
@@ -308,7 +309,7 @@ public void setData(String id, GifHeader header, byte[] data) {
      */
     public int read(byte[] data) {
         this.data = data;
-        this.header = new GifHeaderParser(data).parseHeader();
+        this.header = parser.setData(data).parseHeader();
         if (data != null) {
             // Initialize the raw data buffer.
             rawData = ByteBuffer.wrap(data);

File: library/src/main/java/com/bumptech/glide/GifTypeRequest.java
Patch:
@@ -57,6 +57,9 @@ private static <A, R> FixedLoadProvider<A, InputStream, GifData, R> buildProvide
         this.glide = glide;
         this.requestTracker = requestTracker;
         this.optionsApplier = optionsApplier;
+
+        // Default to animating.
+        crossFade();
     }
 
     /**

File: integration/volley/src/main/java/com/bumptech/glide/volley/VolleyUrlLoader.java
Patch:
@@ -11,7 +11,7 @@
 import java.io.InputStream;
 
 /**
- *  A simple model loader for fetching images for a given url
+ *  A simple model loader for fetching images for a given url.
  */
 public class VolleyUrlLoader implements ModelLoader<GlideUrl, InputStream> {
 

File: library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java
Patch:
@@ -55,7 +55,7 @@ private static <A, R> FixedLoadProvider<A, ImageVideoWrapper, Bitmap, R> buildPr
         this.streamModelLoader = streamModelLoader;
         this.fileDescriptorModelLoader = fileDescriptorModelLoader;
         this.glide = glide;
-        this.requestTracker= requestTracker;
+        this.requestTracker = requestTracker;
         this.optionsApplier = optionsApplier;
     }
 

File: library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java
Patch:
@@ -72,7 +72,8 @@ public GifTypeRequest<A> asGif() {
     }
 
     /**
-     * Loads the original unmodified data into the cache and calls the given Target with the cache File
+     * Loads the original unmodified data into the cache and calls the given Target with the cache File.
+     *
      * @param target The Target that will receive the cache File when the load completes
      * @param <Y> The type of Target.
      * @return The given Target.
@@ -84,6 +85,7 @@ public <Y extends Target<File>> Y downloadOnly(Y target) {
     /**
      * Loads the original unmodified data into the cache and returns a {@link java.util.concurrent.Future} that can be
      * used to retrieve the cache File containing the data.
+     *
      * @param width The width to use to fetch the data.
      * @param height The height to use to fetch the data.
      * @return A {@link java.util.concurrent.Future} that can be used to retrieve the cache File containing the data.

File: library/src/main/java/com/bumptech/glide/GifTypeRequest.java
Patch:
@@ -37,7 +37,7 @@ private static <A, R> FixedLoadProvider<A, InputStream, GifData, R> buildProvide
     }
 
     GifTypeRequest(Context context, A model, ModelLoader<A, InputStream> streamModelLoader, Glide glide,
-            RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier){
+            RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier) {
         super(context, model, buildProvider(glide, streamModelLoader, GifDrawable.class, null), GifDrawable.class,
                 glide, requestTracker);
         this.context = context;

File: library/src/main/java/com/bumptech/glide/ListPreloader.java
Patch:
@@ -140,7 +140,7 @@ private void cancelAll() {
         }
     }
 
-    private static class PreloadTargetQueue {
+    private static final class PreloadTargetQueue {
         private final Queue<PreloadTarget> queue;
 
         @TargetApi(9)

File: library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java
Patch:
@@ -5,9 +5,10 @@
 import java.io.IOException;
 
 /**
- * An interface for decoding resources
+ * An interface for decoding resources.
+ *
  * @param <T> The type the resource will be decoded from (File, InputStream etc).
- * @param <Z> The type of the decoded resource (Bitmap, Drawable etc:w
+ * @param <Z> The type of the decoded resource (Bitmap, Drawable etc).
  */
 public interface ResourceDecoder<T, Z> {
 

File: library/src/main/java/com/bumptech/glide/load/ResourceEncoder.java
Patch:
@@ -2,6 +2,6 @@
 
 import com.bumptech.glide.load.engine.Resource;
 
-public interface ResourceEncoder<T> extends Encoder<Resource<T>>{
-
+public interface ResourceEncoder<T> extends Encoder<Resource<T>> {
+    // Empty interface for type.
 }

File: library/src/main/java/com/bumptech/glide/load/Transformation.java
Patch:
@@ -3,7 +3,8 @@
 import com.bumptech.glide.load.engine.Resource;
 
 /**
- * A class for performing an arbitrary transformation on a bitmap
+ * A class for performing an arbitrary transformation on a bitmap.
+ *
  * @param <T> The type of the resource being transformed.
  */
 public interface Transformation<T> {
@@ -24,7 +25,7 @@ public interface Transformation<T> {
      * The fully qualified class name for this class is appropriate if written out, but getClass().getName() is not
      * because the name may be changed by proguard.
      *
-     * @return A string that uniquely identifies this transformation from other transformations
+     * @return A string that uniquely identifies this transformation from other transformations.
      */
     public String getId();
 }

File: library/src/main/java/com/bumptech/glide/load/engine/Engine.java
Patch:
@@ -189,8 +189,8 @@ public void onResourceReleased(Key cacheKey, Resource resource) {
     }
 
     private static class ResourceWeakReference extends WeakReference<Resource> {
-        public final Object resource;
-        public final Key key;
+        private final Object resource;
+        private final Key key;
 
         public ResourceWeakReference(Key key, Resource r, ReferenceQueue<? super Resource> q) {
             super(r, q);

File: library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java
Patch:
@@ -75,10 +75,8 @@ public boolean equals(Object o) {
             return false;
         } else if (!transcoder.getId().equals(engineKey.transcoder.getId())) {
             return false;
-        } else if (!sourceEncoder.getId().equals(engineKey.sourceEncoder.getId())) {
-            return false;
         } else {
-            return true;
+            return sourceEncoder.getId().equals(engineKey.sourceEncoder.getId());
         }
     }
 

File: library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
Patch:
@@ -116,8 +116,8 @@ private void trimToSize(int size) {
 
     private void dump() {
         if (Log.isLoggable(TAG, Log.VERBOSE)) {
-            Log.v(TAG, "Hits=" + hits + " misses=" + misses + " puts=" + puts + " evictions=" + evictions + " currentSize="
-                    + currentSize + " maxSize=" + maxSize + "\nStrategy=" + strategy);
+            Log.v(TAG, "Hits=" + hits + " misses=" + misses + " puts=" + puts + " evictions=" + evictions
+                    + " currentSize=" + currentSize + " maxSize=" + maxSize + "\nStrategy=" + strategy);
         }
     }
 }

File: library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
Patch:
@@ -66,8 +66,8 @@ public int getBitmapPoolSize() {
     private static int getMaxSize(ActivityManager activityManager) {
         final int memoryClassBytes = activityManager.getMemoryClass() * 1024 * 1024;
         final boolean isLowMemoryDevice = isLowMemoryDevice(activityManager);
-        return Math.round(memoryClassBytes *
-                (isLowMemoryDevice ? LOW_MEMORY_MAX_SIZE_MULTIPLIER : MAX_SIZE_MULTIPLIER));
+        return Math.round(memoryClassBytes
+                * (isLowMemoryDevice ? LOW_MEMORY_MAX_SIZE_MULTIPLIER : MAX_SIZE_MULTIPLIER));
     }
 
     private static int toMb(int bytes) {

File: library/src/main/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor.java
Patch:
@@ -58,8 +58,8 @@ private static class FifoPriorityLoadTask<T> extends FutureTask<T> implements Co
         public FifoPriorityLoadTask(Runnable runnable, T result, int order) {
             super(runnable, result);
             if (!(runnable instanceof Prioritized)) {
-                throw new IllegalArgumentException("FifoPriorityThreadPoolExecutor must be given Runnables that " +
-                        "implement Prioritized");
+                throw new IllegalArgumentException("FifoPriorityThreadPoolExecutor must be given Runnables that "
+                        + "implement Prioritized");
             }
             priority = ((Prioritized) runnable).getPriority();
             this.order = order;

File: library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
Patch:
@@ -6,7 +6,7 @@
 import java.io.File;
 
 /**
- * A simple model loader for {@link File}
+ * A simple model loader for {@link File}.
  */
 public class FileLoader<T> implements ModelLoader<File, T> {
 

File: library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java
Patch:
@@ -21,7 +21,7 @@ public interface ModelLoaderFactory<T, Y> {
     public ModelLoader<T, Y> build(Context context, GenericLoaderFactory factories);
 
     /**
-     * A lifecycle method that will be called when this factory is about to replaced
+     * A lifecycle method that will be called when this factory is about to replaced.
      */
     public void teardown();
 }

File: library/src/main/java/com/bumptech/glide/load/model/UriLoader.java
Patch:
@@ -5,7 +5,7 @@
 import android.net.Uri;
 import com.bumptech.glide.load.data.DataFetcher;
 
-public abstract class UriLoader<T> implements ModelLoader<Uri, T>{
+public abstract class UriLoader<T> implements ModelLoader<Uri, T> {
     private final Context context;
     private final ModelLoader<GlideUrl, T> urlLoader;
 

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorFileLoader.java
Patch:
@@ -14,7 +14,8 @@
 /**
  * A {@link ModelLoader} For translating {@link File} models into {@link ParcelFileDescriptor} resources.
  */
-public class FileDescriptorFileLoader extends FileLoader<ParcelFileDescriptor> implements FileDescriptorModelLoader<File> {
+public class FileDescriptorFileLoader extends FileLoader<ParcelFileDescriptor>
+        implements FileDescriptorModelLoader<File> {
 
     public static class Factory implements ModelLoaderFactory<File, ParcelFileDescriptor> {
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorResourceLoader.java
Patch:
@@ -19,8 +19,8 @@ public static class Factory implements ModelLoaderFactory<Integer, ParcelFileDes
 
         @Override
         public ModelLoader<Integer, ParcelFileDescriptor> build(Context context, GenericLoaderFactory factories) {
-            return new FileDescriptorResourceLoader(context, factories.buildModelLoader(Uri.class, ParcelFileDescriptor.class,
-                    context));
+            return new FileDescriptorResourceLoader(context, factories.buildModelLoader(Uri.class,
+                    ParcelFileDescriptor.class, context));
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorStringLoader.java
Patch:
@@ -14,7 +14,7 @@
  * resources.
  */
 public class FileDescriptorStringLoader extends StringLoader<ParcelFileDescriptor>
-        implements FileDescriptorModelLoader<String>{
+        implements FileDescriptorModelLoader<String> {
 
     public static class Factory implements ModelLoaderFactory<String, ParcelFileDescriptor> {
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorUriLoader.java
Patch:
@@ -20,8 +20,8 @@ public class FileDescriptorUriLoader extends UriLoader<ParcelFileDescriptor> imp
     public static class Factory implements ModelLoaderFactory<Uri, ParcelFileDescriptor> {
         @Override
         public ModelLoader<Uri, ParcelFileDescriptor> build(Context context, GenericLoaderFactory factories) {
-            return new FileDescriptorUriLoader(context, factories.buildModelLoader(GlideUrl.class, ParcelFileDescriptor.class,
-                    context));
+            return new FileDescriptorUriLoader(context, factories.buildModelLoader(GlideUrl.class,
+                    ParcelFileDescriptor.class, context));
         }
 
         @Override

File: library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java
Patch:
@@ -57,7 +57,7 @@ public DataFetcher<InputStream> getResourceFetcher(T model, int width, int heigh
     }
 
     /**
-     * Get a valid url http:// or https:// for the given model and dimensions as a string
+     * Get a valid url http:// or https:// for the given model and dimensions as a string.
      *
      * @param model The model
      * @param width The width of the view/target the image will be loaded into

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java
Patch:
@@ -7,7 +7,7 @@
 
 /**
  * Scale the image uniformly (maintaining the image's aspect ratio) so that one of the dimensions of the image
- * will be equal to the given dimension and the other will be less than the given dimension
+ * will be equal to the given dimension and the other will be less than the given dimension.
  */
 public class FitCenter implements Transformation<Bitmap> {
     private BitmapPool pool;

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoder.java
Patch:
@@ -19,7 +19,7 @@ public GifFrameResourceDecoder(BitmapPool bitmapPool) {
     @Override
     public Resource<Bitmap> decode(GifDecoder source, int width, int height) throws IOException {
         Bitmap bitmap = source.getNextFrame();
-        return new BitmapResource(bitmap ,bitmapPool);
+        return new BitmapResource(bitmap, bitmapPool);
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperStreamResourceDecoder.java
Patch:
@@ -7,10 +7,11 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-public class GifBitmapWrapperStreamResourceDecoder implements ResourceDecoder<InputStream, GifBitmapWrapper>{
+public class GifBitmapWrapperStreamResourceDecoder implements ResourceDecoder<InputStream, GifBitmapWrapper> {
     private ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> gifBitmapDecoder;
 
-    public GifBitmapWrapperStreamResourceDecoder(ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> gifBitmapDecoder) {
+    public GifBitmapWrapperStreamResourceDecoder(
+            ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> gifBitmapDecoder) {
         this.gifBitmapDecoder = gifBitmapDecoder;
     }
 

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/GifBitmapWrapperDrawableTranscoder.java
Patch:
@@ -10,7 +10,8 @@ public class GifBitmapWrapperDrawableTranscoder implements ResourceTranscoder<Gi
     private final ResourceTranscoder<Bitmap, ? extends Drawable> bitmapDrawableResourceTranscoder;
     private final ResourceTranscoder<GifData, ? extends Drawable> gifDrawableResourceTranscoder;
 
-    public GifBitmapWrapperDrawableTranscoder(ResourceTranscoder<Bitmap, ? extends Drawable> bitmapDrawableResourceTranscoder,
+    public GifBitmapWrapperDrawableTranscoder(
+            ResourceTranscoder<Bitmap, ? extends Drawable> bitmapDrawableResourceTranscoder,
             ResourceTranscoder<GifData, ? extends Drawable> gifDrawableResourceTranscoder) {
         this.bitmapDrawableResourceTranscoder = bitmapDrawableResourceTranscoder;
         this.gifDrawableResourceTranscoder = gifDrawableResourceTranscoder;

File: library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
Patch:
@@ -52,7 +52,8 @@ public void unregister() {
     }
 
     private boolean isConnected(Context context) {
-        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+        ConnectivityManager connectivityManager =
+                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
         NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
         return networkInfo != null && networkInfo.isConnected();
     }

File: library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java
Patch:
@@ -1,9 +1,7 @@
 package com.bumptech.glide.request;
 
-import com.bumptech.glide.request.target.Target;
-
 /**
- * An interface for coordinating multiple requests with the same {@link Target}.
+ * An interface for coordinating multiple requests with the same {@link com.bumptech.glide.request.target.Target}.
  */
 public interface RequestCoordinator {
 

File: library/src/main/java/com/bumptech/glide/request/target/SquaringDrawable.java
Patch:
@@ -111,19 +111,19 @@ public boolean getPadding(Rect padding) {
 
     @Override
     public void invalidateSelf() {
-        super.invalidateSelf();    //To change body of overridden methods use File | Settings | File Templates.
+        super.invalidateSelf();
         wrapped.invalidateSelf();
     }
 
     @Override
     public void unscheduleSelf(Runnable what) {
-        super.unscheduleSelf(what);    //To change body of overridden methods use File | Settings | File Templates.
+        super.unscheduleSelf(what);
         wrapped.unscheduleSelf(what);
     }
 
     @Override
     public void scheduleSelf(Runnable what, long when) {
-        super.scheduleSelf(what, when);    //To change body of overridden methods use File | Settings | File Templates.
+        super.scheduleSelf(what, when);
         wrapped.scheduleSelf(what, when);
     }
 

File: library/src/main/java/com/bumptech/glide/util/ByteArrayPool.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.ArrayDeque;
 import java.util.Queue;
 
-public class ByteArrayPool {
+public final class ByteArrayPool {
     private static final String TAG = "ByteArrayPool";
     // 64 KB.
     private static final int TEMP_BYTES_SIZE = 64 * 1024;

File: library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
Patch:
@@ -53,7 +53,7 @@ public void testHandlesExceptionOnClose() throws Exception {
     }
 
     private static class TestLocalUriFetcher extends LocalUriFetcher<Closeable> {
-        public Closeable closeable = mock(Closeable.class);
+        final Closeable closeable = mock(Closeable.class);
         public TestLocalUriFetcher(Context context, Uri uri) {
             super(context, uri);
         }

File: library/src/test/java/com/bumptech/glide/load/data/MediaStoreThumbFetcherTest.java
Patch:
@@ -41,8 +41,7 @@ public void testReturnsInputStreamFromThumbnailOpener() throws Exception {
     }
 
     @Test
-    public void testReturnsInputStreamFromDefaultFetcherIfStreamFromThumbnailOpenerIsNull()
-            throws Exception {
+    public void testReturnsInputStreamFromDefaultFetcherIfStreamFromThumbnailOpenerIsNull() throws Exception {
         InputStream expected = new ByteArrayInputStream(new byte[0]);
 
         when(harness.thumbnailFetcher.open(eq(Robolectric.application), eq(harness.uri))).thenReturn(null);

File: library/src/test/java/com/bumptech/glide/load/data/ThumbnailStreamOpenerTest.java
Patch:
@@ -50,7 +50,7 @@ public void testReturnsNullIfCursorIsEmpty() throws FileNotFoundException {
 
     @Test
     public void testReturnsNullIfCursorHasEmptyPath() throws FileNotFoundException {
-        MatrixCursor cursor= new MatrixCursor(new String[1]);
+        MatrixCursor cursor = new MatrixCursor(new String[1]);
         cursor.addRow(new Object[]{ "" });
         when(harness.query.query(eq(Robolectric.application), eq(harness.uri))).thenReturn(cursor);
         assertNull(harness.get()
@@ -67,7 +67,7 @@ public void testReturnsNullIfFileDoesNotExist() throws FileNotFoundException {
     @Test
     public void testReturnNullIfFileLengthIsZero() throws FileNotFoundException {
         when(harness.service.get(anyString())).thenReturn(harness.file);
-        when(harness.service.length(eq(harness.file))).thenReturn(0l);
+        when(harness.service.length(eq(harness.file))).thenReturn(0L);
         assertNull(harness.get().open(Robolectric.application, harness.uri));
     }
 
@@ -114,7 +114,7 @@ public Harness() {
             when(query.query(eq(Robolectric.application), eq(uri))).thenReturn(cursor);
             when(service.get(eq(file.getAbsolutePath()))).thenReturn(file);
             when(service.exists(eq(file))).thenReturn(true);
-            when(service.length(eq(file))).thenReturn(1l);
+            when(service.length(eq(file))).thenReturn(1L);
         }
 
         public MediaStoreThumbFetcher.ThumbnailStreamOpener get() {

File: library/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
Patch:
@@ -19,7 +19,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(shadows = { ContentResolverShadow.class } )
+@Config(shadows = { ContentResolverShadow.class })
 public class FileDescriptorLocalUriFetcherTest {
 
     @Test

File: library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
Patch:
@@ -86,8 +86,8 @@ public void testCumulativePoolAndMemoryCacheSizeAreLimitedByMemoryClass() {
         int memoryCacheSize = harness.getCalculator().getMemoryCacheSize();
         int bitmapPoolSize = harness.getCalculator().getBitmapPoolSize();
 
-        assertTrue("Expected " + (memoryCacheSize + bitmapPoolSize) + " to be less than " +
-                Math.round(memoryClassBytes * harness.sizeMultiplier) + ", memoryCacheSize: " + memoryCacheSize
+        assertTrue("Expected " + (memoryCacheSize + bitmapPoolSize) + " to be less than "
+                + Math.round(memoryClassBytes * harness.sizeMultiplier) + ", memoryCacheSize: " + memoryCacheSize
                 + " bitmapPoolSize: " + bitmapPoolSize + " memoryClass: " + memoryCacheSize
                 + " sizeMultiplier: " + harness.sizeMultiplier,
                 memoryCacheSize + bitmapPoolSize <= Math.round(memoryClassBytes * harness.sizeMultiplier));

File: library/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.bumptech.glide.load.resource;
 
 import com.bumptech.glide.load.engine.Resource;
-import com.bumptech.glide.load.resource.UnitTransformation;
 
 import org.junit.Test;
 

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
Patch:
@@ -69,7 +69,9 @@ private void compressBitmap(Bitmap bitmap, Bitmap.CompressFormat compressFormat)
             if (os != null) {
                 try {
                     os.close();
-                } catch (IOException e) { }
+                } catch (IOException e) {
+                    // Do nothing.
+                }
             }
         }
 

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifDataTest.java
Patch:
@@ -42,7 +42,7 @@ public void testReturnsDecoderByteSize() {
 
     @SuppressWarnings("unchecked")
     @Test
-    public void testReturnsSetTransformation(){
+    public void testReturnsSetTransformation() {
         Transformation<Bitmap> transformation = mock(Transformation.class);
 
         data.setFrameTransformation(transformation);

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifResourceEncoderTest.java
Patch:
@@ -54,7 +54,7 @@ public void testReturnsFalseIfWriteFails() {
         OutputStream os = new ByteArrayOutputStream() {
             @Override
             public void write(byte[] buffer) throws IOException {
-                super.write(buffer);    //To change body of overridden methods use File | Settings | File Templates.
+                super.write(buffer);
                 throw new IOException("Test");
             }
         };

File: library/src/test/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapStreamResourceDecoderTest.java
Patch:
@@ -43,7 +43,8 @@ public void testReturnsWrappedDecoderResult() throws IOException {
     @Test
     public void testPassesGivenInputStreamWrappedAsImageVideoWrapper() throws IOException {
         final InputStream expected = new ByteArrayInputStream(new byte[0]);
-        when(gifBitmapDecoder.decode(any(ImageVideoWrapper.class), anyInt(), anyInt())).thenAnswer(new Answer<Object>() {
+        when(gifBitmapDecoder.decode(any(ImageVideoWrapper.class), anyInt(), anyInt()))
+                .thenAnswer(new Answer<Object>() {
             @Override
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 ImageVideoWrapper wrapper = (ImageVideoWrapper) invocation.getArguments()[0];

File: library/src/test/java/com/bumptech/glide/request/GenericRequestTest.java
Patch:
@@ -245,7 +245,7 @@ public void testEngineLoadCancelledOnCancel() {
         when(harness.engine.load(anyInt(), anyInt(), any(ResourceDecoder.class),
                 any(DataFetcher.class), any(Encoder.class), any(ResourceDecoder.class), any(Transformation.class),
                 any(ResourceEncoder.class), any(ResourceTranscoder.class), any(Priority.class), anyBoolean(),
-                any(DiskCacheStrategy.class), any(ResourceCallback.class))).thenReturn (loadStatus);
+                any(DiskCacheStrategy.class), any(ResourceCallback.class))).thenReturn(loadStatus);
 
         GenericRequest request = harness.getRequest();
 

File: library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
Patch:
@@ -70,7 +70,7 @@ public void testDoesNotStartThumbOnRunIfRunning() {
         when(thumb.isRunning()).thenReturn(true);
         coordinator.begin();
 
-        verify(thumb,never()).begin();
+        verify(thumb, never()).begin();
     }
 
     @Test

File: library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
Patch:
@@ -30,7 +30,9 @@ private void assertOrientation(String filePrefix, int expectedOrientation) {
             if (is != null) {
                 try {
                     is.close();
-                } catch (IOException e) { }
+                } catch (IOException e) {
+                    // Do nothing.
+                }
             }
         }
     }

File: library/src/test/java/com/bumptech/glide/util/TransformationUtilsTest.java
Patch:
@@ -91,8 +91,8 @@ private static void assertHasOriginalAspectRatio(Bitmap original, Bitmap transfo
         float originalAspectRatio = original.getWidth() / (float) original.getHeight();
         float transformedAspectRatio = transformed.getWidth() / (float) transformed.getHeight();
 
-        assertTrue("Expected nearly identical aspect ratios, but got original of " + originalAspectRatio +
-                " and transformed of " + transformedAspectRatio,
+        assertTrue("Expected nearly identical aspect ratios, but got original of " + originalAspectRatio
+                        + " and transformed of " + transformedAspectRatio,
                 transformedAspectRatio + wiggle >= originalAspectRatio
                         && transformedAspectRatio - wiggle <= originalAspectRatio);
     }

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -75,8 +75,9 @@ public void onSaveInstanceState(Bundle outState) {
     @Override
     public void onPhotosUpdated(List<Photo> photos) {
         currentPhotos = photos;
-        if (adapter != null)
+        if (adapter != null) {
             adapter.setPhotos(currentPhotos);
+        }
     }
 
     private class FlickrPreloader extends ListPreloader<Photo> {

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
Patch:
@@ -185,7 +185,7 @@ public void run() {
                     .crossFade(R.anim.fade_in, 150)
                     .into(viewHolder.imageView);
 
-            viewHolder.titleText.setText(current.title);
+            viewHolder.titleText.setText(current.getTitle());
             return view;
         }
     }

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -61,11 +61,11 @@ private enum Page {
         LIST
     }
 
-    private static final Map<Page, Integer> PAGE_TO_TITLE = new HashMap<Page, Integer>() {{
+    private static final Map<Page, Integer> PAGE_TO_TITLE = new HashMap<Page, Integer>() { {
         put(Page.SMALL, R.string.small);
         put(Page.MEDIUM, R.string.medium);
         put(Page.LIST, R.string.list);
-    }};
+    } };
 
     @Override
     public void onAttachFragment(Fragment fragment) {

File: library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
Patch:
@@ -134,7 +134,9 @@ private synchronized R doGet(Long timeoutMillis) throws ExecutionException, Inte
             wait(timeoutMillis);
         }
 
-        if (exception != null) {
+        if (Thread.interrupted()) {
+            throw new InterruptedException();
+        } else if (exception != null) {
             throw new ExecutionException(exception);
         } else if (isCancelled) {
             throw new CancellationException();

File: library/src/main/java/com/bumptech/glide/util/ByteArrayPool.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.util.Log;
 
-import java.util.LinkedList;
+import java.util.ArrayDeque;
 import java.util.Queue;
 
 public class ByteArrayPool {
@@ -13,7 +13,7 @@ public class ByteArrayPool {
     private static final int MAX_SIZE = 2 * 1048 * 1024;
     private static final int MAX_BYTE_ARRAY_COUNT = MAX_SIZE / TEMP_BYTES_SIZE;
 
-    private final Queue<byte[]> tempQueue = new LinkedList<byte[]>();
+    private final Queue<byte[]> tempQueue = new ArrayDeque<byte[]>();
     private static final ByteArrayPool BYTE_ARRAY_POOL = new ByteArrayPool();
 
     public static ByteArrayPool get() {

File: library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
Patch:
@@ -40,7 +40,7 @@ public void pauseRequests() {
     public void resumeRequests() {
         for (Request request : requests) {
             if (!request.isComplete() && !request.isRunning()) {
-                request.run();
+                request.begin();
             }
         }
     }
@@ -60,10 +60,10 @@ public void clearRequests() {
     public void restartRequests() {
         for (Request request : requests) {
             if (request.isFailed()) {
-                request.run();
+                request.begin();
             } else if (!request.isComplete()) {
                 request.clear();
-                request.run();
+                request.begin();
             }
         }
     }

File: library/src/main/java/com/bumptech/glide/request/Request.java
Patch:
@@ -10,7 +10,7 @@ public interface Request {
     /**
      * Starts an asynchronous load.
      */
-    public void run();
+    public void begin();
 
     /**
      * Prevents any bitmaps being loaded from previous requests, releases any resources held by this request and

File: library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
Patch:
@@ -29,12 +29,12 @@ public boolean isAnyRequestComplete() {
     }
 
     @Override
-    public void run() {
+    public void begin() {
         if (!thumb.isRunning()) {
-            thumb.run();
+            thumb.begin();
         }
         if (!full.isRunning()) {
-            full.run();
+            full.begin();
         }
     }
 

File: samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Api.java
Patch:
@@ -26,10 +26,10 @@ public class Api {
     private static Api API;
     private static final String TAG = "FlickrApi";
     private static final String API_KEY = "f0e6fbb5fdf1f3842294a1d21f84e8a6";
-    private static final String SIGNED_API_URL = "http://api.flickr.com/services/rest/?method=%s&format=json&api_key="
+    private static final String SIGNED_API_URL = "https://api.flickr.com/services/rest/?method=%s&format=json&api_key="
             + API_KEY;
     //incomplete size independent url for photos that can be cached per photo
-    private static final String CACHEABLE_PHOTO_URL = "http://farm%s.staticflickr.com/%s/%s_%s_";
+    private static final String CACHEABLE_PHOTO_URL = "https://farm%s.staticflickr.com/%s/%s_%s_";
 
 
     private static final Map<Integer, String> EDGE_TO_SIZE_KEY = new HashMap<Integer, String>() {{

File: library/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
Patch:
@@ -6,6 +6,7 @@
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.tests.GlideShadowLooper;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -21,6 +22,7 @@
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)
+@Config(shadows = GlideShadowLooper.class)
 public class RequestManagerRetrieverTest {
     private static final String PARENT_TAG = "parent";
     private RetrieverHarness[] harnesses;

File: library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
Patch:
@@ -40,6 +40,9 @@ public abstract class ViewTarget<T extends View, Z> implements Target<Z> {
     private final SizeDeterminer sizeDeterminer;
 
     public ViewTarget(T view) {
+        if (view == null) {
+            throw new NullPointerException("View must not be null!");
+        }
         this.view = view;
         sizeDeterminer = new SizeDeterminer(view);
     }

File: library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java
Patch:
@@ -130,7 +130,7 @@ public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> t
      *
      * <p>
      *     Note - The thumbnail image will be smaller than the size requested so the target (or {@link ImageView})
-     *     must be able to scale the thumbnail appropriately. See {@link ImageView.ScaleType}.
+     *     must be able to scale the thumbnail appropriately. See {@link android.widget.ImageView.ScaleType}.
      * </p>
      *
      * <p>
@@ -348,7 +348,7 @@ public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> a
      * Sets an animator to run a {@link ViewPropertyAnimator} on a view that the target may be wrapping when a resource
      * load finishes. Will only be run if the load was loaded asynchronously (ie was not in the memory cache).
      *
-     * @param animator The {@link ViewPropertyAnimation.Animator} to run.
+     * @param animator The {@link com.bumptech.glide.request.ViewPropertyAnimation.Animator} to run.
      * @return This RequestBuilder.
      */
     // This is safe because the view property animation doesn't care about the resource type it receives.

File: library/src/main/java/com/bumptech/glide/load/Key.java
Patch:
@@ -4,9 +4,9 @@
 import java.security.MessageDigest;
 
 /**
- * A very generic interface that must implement {@link #equals(Object)} and {@link #hashCode()} to include a set of
- * uniquely identifying information for the object(s) represented by this key. Keys are used as cache keys so they must
- * be unique within a given dataset.
+ * A very generic interface that must implement {@link Object#equals(Object)} and {@link Object#hashCode()} to include a
+ * set of uniquely identifying information for the object(s) represented by this key. Keys are used as cache keys so
+ * they must be unique within a given dataset.
  *
  */
 public interface Key {

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
Patch:
@@ -244,7 +244,7 @@ private Bitmap.Config getConfig(RecyclableBufferedInputStream bis, DecodeFormat
      * Determine the amount of downsampling to use for a load given the dimensions of the image to be downsampled and
      * the dimensions of the view/target the image will be displayed in.
      *
-     * @see BitmapFactory.Options#inSampleSize
+     * @see android.graphics.BitmapFactory.Options#inSampleSize
      *
      * @param inWidth The width of the image to be downsampled
      * @param inHeight The height of the image to be downsampled

File: library/src/main/java/com/bumptech/glide/request/RequestListener.java
Patch:
@@ -42,7 +42,8 @@ public interface RequestListener<T, R> {
     public abstract boolean onException(Exception e, T model, Target target, boolean isFirstImage);
 
     /**
-     * Called when a load completes successfully, immediately after {@link Target#onResourceReady(Object)}.
+     * Called when a load completes successfully, immediately after
+     * {@link Target#onResourceReady(Object, GlideAnimation)}
      *
      * @param resource The resource that was loaded for the target.
      * @param model The specific model that was used to load the image.

File: library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
Patch:
@@ -17,7 +17,8 @@
 
 /**
  * A base {@link Target} for loading {@link Bitmap}s into {@link View}s that provides default implementations for most
- * most methods and can determine the size of views using a {@link ViewTreeObserver.OnGlobalLayoutListener}.
+ * most methods and can determine the size of views using a
+ * {@link android.view.ViewTreeObserver.OnDrawListener}.
  *
  * <p>
  *     To detect {@link View} reuse in {@link ListView} or any {@link ViewGroup} that reuses views, this class uses the

File: library/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
 public class RequestManagerRetrieverTest {
     private static final String PARENT_TAG = "parent";
     private RetrieverHarness[] harnesses;

File: library/src/main/java/com/bumptech/glide/Glide.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.ComponentCallbacks2;
 import android.content.Context;
@@ -458,6 +459,7 @@ public static ModelRequest with(FragmentActivity activity) {
         return new ModelRequest(activity, Glide.get(activity), requestManager);
     }
 
+    @TargetApi(11)
     public static ModelRequest with(android.app.Fragment fragment) {
         RequestManager requestManager = RequestManagerRetriever.get(fragment);
         Context context = fragment.getActivity();

File: library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
Patch:
@@ -1,8 +1,10 @@
 package com.bumptech.glide.manager;
 
+import android.annotation.TargetApi;
 import android.app.Fragment;
 
-class RequestManagerFragment extends Fragment {
+@TargetApi(11)
+public class RequestManagerFragment extends Fragment {
     private LifecycleRequestManager requestManager;
 
     public void setRequestManager(LifecycleRequestManager requestManager) {

File: library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.support.v4.app.Fragment;
 
-class SupportRequestManagerFragment extends Fragment {
+public class SupportRequestManagerFragment extends Fragment {
     private LifecycleRequestManager requestManager;
 
     public void setRequestManager(LifecycleRequestManager requestManager) {

File: library/src/main/java/com/bumptech/glide/util/Util.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.util;
 
+import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.os.Build;
 
@@ -26,6 +27,7 @@ private static String bytesToHex(byte[] bytes, char[] hexChars) {
     /**
      * Returns the in memory size of the given {@link Bitmap}.
      */
+    @TargetApi(19)
     public static int getSize(Bitmap bitmap) {
         if (Build.VERSION.SDK_INT >= 19) {
             return bitmap.getAllocationByteCount();

File: library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java
Patch:
@@ -92,7 +92,7 @@ public DrawableRequestBuilder<ModelType> fitCenter() {
     }
 
     public DrawableRequestBuilder<ModelType> bitmapTransform(Transformation<Bitmap> bitmapTransformation) {
-        return transform(new GifBitmapWrapperTransformation(context, bitmapTransformation));
+        return transform(new GifBitmapWrapperTransformation(bitmapTransformation));
     }
 
     @Override

File: library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java
Patch:
@@ -35,7 +35,7 @@ public GifDataResource decode(InputStream source, int width, int height) throws
         byte[] data = inputStreamToBytes(source);
         GifHeader header = new GifHeaderParser(data).parseHeader();
         String id = getGifId(data);
-        return new GifDataResource(new GifData(context, bitmapPool, id, header, data));
+        return new GifDataResource(new GifData(context, bitmapPool, id, header, data, width, height));
     }
 
     @Override

File: library/src/test/java/com/bumptech/glide/load/resource/gif/GifDataTest.java
Patch:
@@ -29,7 +29,7 @@ public void setUp() {
         BitmapPool bitmapPool = mock(BitmapPool.class);
         GifHeader header = mock(GifHeader.class);
         bytes = new byte[] { 'G', 'I', 'F' };
-        data = new GifData(Robolectric.application, bitmapPool, "gifId", header, bytes);
+        data = new GifData(Robolectric.application, bitmapPool, "gifId", header, bytes, 123, 456);
     }
 
     @Test

File: library/src/test/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapResourceDecoderTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.bumptech.glide.load.resource.drawable;
+package com.bumptech.glide.load.resource.gifbitmap;
 
 import android.graphics.Bitmap;
 import android.os.ParcelFileDescriptor;
@@ -7,8 +7,6 @@
 import com.bumptech.glide.load.model.ImageVideoWrapper;
 import com.bumptech.glide.load.resource.gif.GifData;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
-import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper;
-import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperResourceDecoder;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: library/src/test/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapResourceEncoderTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.bumptech.glide.load.resource.drawable;
+package com.bumptech.glide.load.resource.gifbitmap;
 
 import android.graphics.Bitmap;
 import com.bumptech.glide.Resource;

File: library/src/test/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapStreamResourceDecoderTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.bumptech.glide.load.resource.drawable;
+package com.bumptech.glide.load.resource.gifbitmap;
 
 import com.bumptech.glide.Resource;
 import com.bumptech.glide.load.ResourceDecoder;

File: library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResource.java
Patch:
@@ -1,4 +1,4 @@
-package com.bumptech.glide.load.resource.drawable;
+package com.bumptech.glide.load.resource.bitmap;
 
 import android.graphics.drawable.BitmapDrawable;
 import com.bumptech.glide.Resource;

File: library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java
Patch:
@@ -4,7 +4,7 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 import com.bumptech.glide.Resource;
-import com.bumptech.glide.load.resource.drawable.BitmapDrawableResource;
+import com.bumptech.glide.load.resource.bitmap.BitmapDrawableResource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 
 public class BitmapDrawableTranscoder implements ResourceTranscoder<Bitmap, BitmapDrawable> {

File: library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.bumptech.glide.load.resource.drawable;
+package com.bumptech.glide.load.resource.bitmap;
 
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;

File: library/src/main/java/com/bumptech/glide/request/target/BaseTarget.java
Patch:
@@ -19,7 +19,7 @@
  *     For loading {@link Bitmap}s into {@link View}s, {@link ViewTarget} is preferable to this class.
  * </p>
  */
-public abstract class BaseTarget implements Target {
+public abstract class BaseTarget<Z> implements Target<Z> {
 
     private Request request;
 

File: library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
Patch:
@@ -5,7 +5,7 @@
  * caller to specify an exact width/height.
  */
 @SuppressWarnings("unused")
-public abstract class SimpleTarget extends BaseTarget {
+public abstract class SimpleTarget<Z> extends BaseTarget<Z> {
     private final int width;
     private final int height;
 

File: library/src/com/bumptech/glide/util/ByteArrayPool.java
Patch:
@@ -7,8 +7,8 @@
 
 public class ByteArrayPool {
     private static final String TAG = "ByteArrayPool";
-    // 16 KB.
-    private static final int TEMP_BYTES_SIZE = 16 * 1024;
+    // 64 KB.
+    private static final int TEMP_BYTES_SIZE = 64 * 1024;
     // 512 KB.
     private static final int MAX_SIZE = 512 * 1024;
     private static final int MAX_BYTE_ARRAY_COUNT = MAX_SIZE / TEMP_BYTES_SIZE;

File: library/src/com/bumptech/glide/resize/request/BitmapRequest.java
Patch:
@@ -67,9 +67,7 @@ public BitmapRequest(BitmapRequestBuilder<T> builder) {
 
     @Override
     public void run() {
-        loadedFromMemoryCache = true;
         target.getSize(this);
-        loadedFromMemoryCache = bitmap != null;
 
         if (bitmap == null && !isError) {
             setPlaceHolder();
@@ -121,7 +119,6 @@ public void onLoadCompleted(Bitmap loaded) {
             imageManager.releaseBitmap(loaded);
             return;
         }
-
         target.onImageReady(loaded);
         if (!loadedFromMemoryCache && !isAnyImageSet()) {
             if (animation == null && animationId > 0) {
@@ -174,7 +171,9 @@ public void onSizeReady(int width, int height) {
 
         loadTask.setMetadata(new Metadata(priority, decodeFormat));
 
+        loadedFromMemoryCache = true;
         token = imageManager.getImage(loadTask, this);
+        loadedFromMemoryCache = bitmap != null;
     }
 
     private boolean canSetImage() {

File: library/src/com/bumptech/glide/resize/request/BitmapRequest.java
Patch:
@@ -168,7 +168,7 @@ public void onSizeReady(int width, int height) {
             if (model != null && Log.isLoggable(TAG, Log.INFO)) {
                 Log.i(TAG, "Got null load task for model=" + model);
             }
-            setErrorPlaceholder();
+            onLoadFailed(null);
             return;
         }
 

File: samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
Patch:
@@ -92,7 +92,7 @@ protected List<Photo> getItems(int start, int end) {
         protected RequestBuilder getRequestBuilder(Photo item) {
             return Glide.with(context)
                     .loadFromImage(item)
-                    .thumbnail(0.25f)
+                    .thumbnail(0.1f)
                     .centerCrop();
         }
     }
@@ -149,7 +149,7 @@ public void run() {
 
             Glide.with(getActivity())
                     .loadFromImage(current)
-                    .thumbnail(0.25f)
+                    .thumbnail(0.1f)
                     .centerCrop()
                     .animate(R.anim.fade_in)
                     .into(viewHolder.imageView);

File: library/src/com/bumptech/glide/ListPreloader.java
Patch:
@@ -111,13 +111,13 @@ private void preload(int from, int to) {
 
         if (from < to) {
             // Increasing
-            for (int i = items.size() - 1; i >= 0; i--) {
+            final int numItems = items.size();
+            for (int i = 0; i < numItems; i++) {
                 preloadItem(items, i);
             }
         } else {
             // Decreasing
-            final int numItems = items.size();
-            for (int i = 0; i < numItems; i++) {
+            for (int i = items.size() - 1; i >= 0; i--) {
                 preloadItem(items, i);
             }
         }

File: library/src/com/bumptech/glide/volley/VolleyStreamFetcher.java
Patch:
@@ -51,7 +51,6 @@ public void cancel() {
         VolleyRequestFuture<InputStream> localFuture = requestFuture;
         if (localFuture != null) {
             localFuture.cancel(true);
-            requestFuture = null;
         }
     }
 

File: samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -13,7 +13,7 @@
 import com.actionbarsherlock.app.SherlockFragment;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.ListPreloader;
-import com.bumptech.glide.loader.bitmap.BaseBitmapLoadFactory;
+import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;
 import com.bumptech.glide.loader.bitmap.model.Cache;
 import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;
 import com.bumptech.glide.loader.image.ImageManagerLoader;
@@ -142,7 +142,7 @@ public View getView(int position, View view, ViewGroup container) {
                 // reason why ImagePresenter is used here and not in FlickrPhotoList.
                 final Animation fadeIn = AnimationUtils.loadAnimation(context, R.anim.fade_in);
                 imagePresenter = new ImagePresenter.Builder<Photo, ImageViewTarget>()
-                        .setBitmapLoadFactory(new BaseBitmapLoadFactory<Photo, InputStream, Void>(
+                        .setBitmapLoadFactory(new ImageVideoBitmapLoadFactory<Photo, InputStream, Void>(
                                 new FlickrModelLoader(context, urlCache), Downsampler.AT_LEAST,
                                 new CenterCrop<Photo>()))
                         .setTarget(new ImageViewTarget(imageView), context)

File: library/src/com/bumptech/glide/resize/ImageManager.java
Patch:
@@ -679,6 +679,9 @@ public void run() {
         }
 
         private void handleException(final Exception e) {
+            if (Log.isLoggable(TAG, Log.DEBUG)) {
+                Log.d(TAG, "Exception loading image", e);
+            }
             mainHandler.post(new Runnable() {
                 @Override
                 public void run() {

File: library/src/com/bumptech/glide/resize/ImageManager.java
Patch:
@@ -289,7 +289,7 @@ public Builder disableDiskCache() {
 
         private void setDefaults() {
             if (resizeService == null) {
-                final int numThreads = Math.max(1, Runtime.getRuntime().availableProcessors());
+                final int numThreads = Math.max(1, Runtime.getRuntime().availableProcessors() - 1);
                 resizeService = Executors.newFixedThreadPool(numThreads, new ThreadFactory() {
                     @Override
                     public Thread newThread(Runnable runnable) {

File: library/src/com/bumptech/glide/resize/SafeKeyGenerator.java
Patch:
@@ -1,5 +1,6 @@
 package com.bumptech.glide.resize;
 
+import android.annotation.TargetApi;
 import android.os.Build;
 import com.bumptech.glide.resize.load.Downsampler;
 import com.bumptech.glide.resize.load.Transformation;
@@ -49,6 +50,7 @@ private class LoadIdPool {
         private static final int MAX_SIZE = 20;
         private Queue<LoadId> loadIdQueue;
 
+        @TargetApi(9)
         public LoadIdPool() {
             if (Build.VERSION.SDK_INT >= 9) {
                 loadIdQueue = new ArrayDeque<LoadId>(MAX_SIZE);

File: library/src/com/bumptech/glide/resize/load/Downsampler.java
Patch:
@@ -119,7 +119,7 @@ protected Bitmap downsampleWithSize(RecyclableBufferedInputStream bis, BitmapFac
         } else {
             // cannot reuse bitmaps when decoding images that are not PNG or JPG.
             // look at : https://groups.google.com/forum/#!msg/android-developers/Mp0MFVFi1Fo/e8ZQ9FGdWdEJ
-            if (!shouldUsePool(bis)) {
+            if (shouldUsePool(bis)) {
                 setInBitmap(options, pool.get(inWidth, inHeight, getConfig(bis)));
             }
         }

File: library/src/com/bumptech/glide/loader/transformation/MultiTransformation.java
Patch:
@@ -24,8 +24,8 @@ public Bitmap transform(Bitmap bitmap, BitmapPool pool, int outWidth, int outHei
         Bitmap transformed;
         for (Transformation transformation : transformations) {
             transformed = transformation.transform(bitmap, pool, outWidth, outHeight);
-            if (current != null && current != transformed) {
-                pool.put(current);
+            if (current != null && current != transformed && !pool.put(current)) {
+                current.recycle();
             }
 
             current = transformed;

File: library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java
Patch:
@@ -34,7 +34,9 @@ public synchronized boolean put(Bitmap bitmap) {
 
     private void evict() {
         while (currentSize > maxSize) {
-            currentSize -= getSize(pool.removeLast());
+            final Bitmap removed = pool.removeLast();
+            currentSize -= getSize(removed);
+            removed.recycle();
         }
     }
 

File: library/src/com/bumptech/glide/resize/bitmap_recycle/SerialBitmapReferenceCounter.java
Patch:
@@ -69,7 +69,9 @@ public void releaseBitmap(Bitmap bitmap) {
     }
 
     private void recycle(InnerTracker tracker, Bitmap bitmap) {
-        target.put(bitmap);
+        if (!target.put(bitmap)) {
+            bitmap.recycle();
+        }
         counter.remove(bitmap);
         pool.release(tracker);
     }

File: library/src/com/bumptech/glide/resize/load/Downsampler.java
Patch:
@@ -98,8 +98,8 @@ public Bitmap downsample(RecyclableBufferedInputStream bis, BitmapFactory.Option
         final Bitmap downsampled = downsampleWithSize(bis, options, pool, inWidth, inHeight, sampleSize);
         final Bitmap rotated = ImageResizer.rotateImageExif(downsampled, pool, orientation);
 
-        if (downsampled != rotated) {
-            pool.put(downsampled);
+        if (downsampled != rotated && !pool.put(downsampled)) {
+            downsampled.recycle();
         }
 
         return rotated;

File: library/src/com/bumptech/glide/resize/load/ImageResizer.java
Patch:
@@ -113,8 +113,8 @@ public Bitmap load(InputStream is, int outWidth, int outHeight, Downsampler down
         final Bitmap initial = downsampler.downsample(bis, options, bitmapPool, outWidth, outHeight);
         final Bitmap result = transformation.transform(initial, bitmapPool, outWidth, outHeight);
 
-        if (initial != result) {
-            bitmapPool.put(initial);
+        if (initial != result && !bitmapPool.put(initial)) {
+            initial.recycle();
         }
 
         releaseTempBytes(tempBytesForBis);

File: library/src/com/bumptech/glide/resize/cache/DiskLruCacheWrapper.java
Patch:
@@ -18,12 +18,14 @@
  */
 public class DiskLruCacheWrapper implements DiskCache {
 
+    private static final int APP_VERSION = 1;
+    private static final int VALUE_COUNT = 1;
     private static DiskLruCache CACHE = null;
     private static DiskLruCacheWrapper WRAPPER = null;
 
     private synchronized static DiskLruCache getDiskLruCache(File directory, int maxSize) throws IOException {
         if (CACHE == null) {
-            CACHE = DiskLruCache.open(directory, 0, 1, maxSize);
+            CACHE = DiskLruCache.open(directory, APP_VERSION, VALUE_COUNT, maxSize);
         }
         return CACHE;
     }

File: library/src/com/bumptech/glide/presenter/ImagePresenter.java
Patch:
@@ -56,10 +56,9 @@ public static class Builder<T> {
         private ExceptionHandler<T> exceptionHandler = new ExceptionHandler<T>() {
             @Override
             public void onException(Exception e, T model, boolean isCurrent) {
+                Log.e("IP: onImageLoadException model= " + model);
                 if (e != null) {
                     e.printStackTrace();
-                } else {
-                    Log.e("IP: onImageLoadException model= " + model);
                 }
             }
         };

File: library/src/com/bumptech/glide/resize/ImageManager.java
Patch:
@@ -599,7 +599,7 @@ private void putInDiskCache(String key, final Bitmap bitmap) {
         diskCache.put(key, new DiskCache.Writer() {
             @Override
             public void write(OutputStream os) {
-                bitmap.compress(bitmapCompressFormat, bitmapCompressQuality, os);
+                bitmap.compress(bitmap.getConfig() == Bitmap.Config.ARGB_8888 ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG, bitmapCompressQuality, os);
             }
         });
 

File: library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java
Patch:
@@ -4,5 +4,5 @@
 
 public interface BitmapPool {
     public boolean put(Bitmap bitmap);
-    public Bitmap get(int width, int height);
+    public Bitmap get(int width, int height, Bitmap.Config config);
 }

File: library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java
Patch:
@@ -3,13 +3,15 @@
 import android.graphics.Bitmap;
 
 public class BitmapPoolAdapter implements BitmapPool {
+
     @Override
     public boolean put(Bitmap bitmap) {
         return false;
     }
 
     @Override
-    public Bitmap get(int width, int height) {
+    public Bitmap get(int width, int height, Bitmap.Config config) {
         return null;
     }
+
 }

File: library/src/com/bumptech/glide/resize/load/ImageResizer.java
Patch:
@@ -437,7 +437,7 @@ public static Bitmap rotateImageExif(Bitmap toOrient, BitmapPool pool, int exifO
         final int newWidth = Math.round(newRect.width());
         final int newHeight = Math.round(newRect.height());
 
-        Bitmap result = pool.get(newWidth, newHeight);
+        Bitmap result = pool.get(newWidth, newHeight, toOrient.getConfig());
         if (result == null) {
             result = Bitmap.createBitmap(newWidth, newHeight, toOrient.getConfig());
         }

File: library/src/com/bumptech/glide/resize/load/Transformation.java
Patch:
@@ -20,7 +20,7 @@ public Bitmap transform(Bitmap bitmap, BitmapPool pool, int outWidth, int outHei
                 throw new IllegalArgumentException("Cannot center crop image to width=" + outWidth + " and height="
                         + outHeight);
             }
-            return ImageResizer.centerCrop(pool.get(outWidth, outHeight), bitmap, outWidth, outHeight);
+            return ImageResizer.centerCrop(pool.get(outWidth, outHeight, bitmap.getConfig()), bitmap, outWidth, outHeight);
         }
     };
 

File: library/src/com/bumptech/glide/loader/image/ImageManagerLoader.java
Patch:
@@ -63,10 +63,9 @@ public void onLoadFailed(Exception e) {
     protected void onImageReady(Bitmap image, boolean isUsed) {
         if (isUsed) {
             releaseAcquired();
-            imageManager.acquireBitmap(image);
             acquired = image;
         } else {
-            imageManager.rejectBitmap(image);
+            imageManager.releaseBitmap(image);
         }
     }
 

File: library/src/com/bumptech/glide/Glide.java
Patch:
@@ -106,7 +106,6 @@ public void teardown() {
         }
     }
 
-
     /**
      * Return the current {@link ImageManager} or create and return a new one if one is not currently set.
      *

File: library/src/com/bumptech/glide/loader/image/ImageManagerLoader.java
Patch:
@@ -88,6 +88,6 @@ private void releaseAcquired() {
 
     protected boolean isHandled(int width, int height) {
         return width >= 0 && height >= 0 ||
-                (downsampler == Downsampler.NONE && width == WRAP_CONTENT && height == WRAP_CONTENT);
+                (downsampler == Downsampler.NONE && (width == WRAP_CONTENT || height == WRAP_CONTENT));
     }
 }

File: library/src/com/bumptech/glide/presenter/ImagePresenter.java
Patch:
@@ -209,7 +209,7 @@ public Builder<T> setErrorResource(int resourceId) {
          * @return This Builder object
          */
         public Builder<T> setErrorDrawable(Drawable drawable) {
-            if (errorResourceId != -1 && drawable != null) {
+            if (errorResourceId != 0 && drawable != null) {
                 throw new IllegalArgumentException("Can't set both an error drawable and an error resource");
             }
 

File: library/src/com/bumptech/glide/resize/ImageManager.java
Patch:
@@ -327,7 +327,9 @@ public Thread newThread(Runnable runnable) {
                     }
                 }
 
-                diskCache = new DiskCacheAdapter();
+                if (diskCache == null) {
+                    diskCache = new DiskCacheAdapter();
+                }
             }
 
             if (!recycleBitmaps) {

File: samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -11,6 +11,7 @@
 import android.widget.GridView;
 import android.widget.ImageView;
 import com.actionbarsherlock.app.SherlockFragment;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.samples.flickr.api.Photo;
 import com.bumptech.glide.loader.image.ImageManagerLoader;
 import com.bumptech.glide.loader.transformation.CenterCrop;
@@ -111,8 +112,8 @@ public View getView(int position, View view, ViewGroup container) {
                 //why ImagePresenter is used here and not in FlickrPhotoList otherwise.
                 final Animation fadeIn = AnimationUtils.loadAnimation(context, R.anim.fade_in);
                 imagePresenter = new ImagePresenter.Builder<Photo>()
+                        .setModelLoader(Glide.get().buildModelLoader(Photo.class, context))
                         .setImageView(imageView)
-                        .setModelLoader(new FlickrModelLoader(context))
                         .setImageLoader(new ImageManagerLoader(context))
                         .setTransformationLoader(new CenterCrop<Photo>())
                         .setImageReadyCallback(new ImageReadyCallback() {

File: samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
Patch:
@@ -100,8 +100,7 @@ public View getView(int position, View view, ViewGroup container) {
                 viewHolder = (ViewHolder) view.getTag();
             }
 
-            Glide.using(new FlickrModelLoader(getActivity()))
-                    .load(current)
+            Glide.load(current)
                     .centerCrop()
                     .animate(R.anim.fade_in)
                     .into(viewHolder.imageView);

File: library/tests/src/com/bumptech/glide/GlideTest.java
Patch:
@@ -106,7 +106,7 @@ public void testCanHandleWrapContent() {
         assertNotNull(getImagePresenterFromView());
     }
 
-    public void testDifferentModlsReplacesPresenters() {
+    public void testDifferentModelsReplacesPresenters() {
         Glide.load("fake").into(imageView);
 
         ImagePresenter first = getImagePresenterFromView();
@@ -122,7 +122,7 @@ public void testDifferentModelLoadersReplacesPresenter() {
             public StreamLoader getStreamLoader(Object model, int width, int height) {
                 return new StreamLoader() {
                     @Override
-                    public void loadStream(Object t, StreamReadyCallback cb) {
+                    public void loadStream(StreamReadyCallback cb) {
                     }
 
                     @Override
@@ -145,7 +145,7 @@ public String getId(Object model) {
             public StreamLoader getStreamLoader(Object model, int width, int height) {
                 return new StreamLoader() {
                     @Override
-                    public void loadStream(Object object, StreamReadyCallback cb) {
+                    public void loadStream(StreamReadyCallback cb) {
                     }
 
                     @Override

File: library/tests/src/com/bumptech/glide/loader/UriLoaderTest.java
Patch:
@@ -29,7 +29,7 @@ protected void setUp() throws Exception {
         urlLoader = new StreamLoader() {
 
             @Override
-            public void loadStream(Object t, StreamReadyCallback cb) {
+            public void loadStream(StreamReadyCallback cb) {
             }
 
             @Override

File: samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrModelLoader.java
Patch:
@@ -1,8 +1,8 @@
-package com.bumptech.flickr;
+package com.bumptech.glide.samples.flickr;
 
 import android.content.Context;
-import com.bumptech.flickr.api.Api;
-import com.bumptech.flickr.api.Photo;
+import com.bumptech.glide.samples.flickr.api.Api;
+import com.bumptech.glide.samples.flickr.api.Photo;
 import com.bumptech.glide.loader.model.VolleyModelLoader;
 
 /**

File: samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
Patch:
@@ -1,4 +1,4 @@
-package com.bumptech.flickr;
+package com.bumptech.glide.samples.flickr;
 
 import android.content.Context;
 import android.os.Bundle;
@@ -11,7 +11,7 @@
 import android.widget.GridView;
 import android.widget.ImageView;
 import com.actionbarsherlock.app.SherlockFragment;
-import com.bumptech.flickr.api.Photo;
+import com.bumptech.glide.samples.flickr.api.Photo;
 import com.bumptech.glide.loader.image.ImageManagerLoader;
 import com.bumptech.glide.loader.transformation.CenterCrop;
 import com.bumptech.glide.presenter.ImagePresenter;

File: samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
Patch:
@@ -1,4 +1,4 @@
-package com.bumptech.flickr;
+package com.bumptech.glide.samples.flickr;
 
 import android.os.Bundle;
 import android.view.LayoutInflater;
@@ -9,8 +9,8 @@
 import android.widget.ListView;
 import android.widget.TextView;
 import com.actionbarsherlock.app.SherlockFragment;
-import com.bumptech.flickr.api.Photo;
 import com.bumptech.glide.Glide;
+import com.bumptech.glide.samples.flickr.api.Photo;
 
 import java.util.ArrayList;
 import java.util.List;

File: samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
Patch:
@@ -1,4 +1,4 @@
-package com.bumptech.flickr;
+package com.bumptech.glide.samples.flickr;
 
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
@@ -14,13 +14,13 @@
 import android.widget.TextView;
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockFragmentActivity;
-import com.bumptech.flickr.api.Api;
-import com.bumptech.flickr.api.Photo;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.resize.ImageManager;
 import com.bumptech.glide.resize.cache.DiskCache;
 import com.bumptech.glide.resize.cache.DiskCacheAdapter;
 import com.bumptech.glide.resize.cache.DiskLruCacheWrapper;
+import com.bumptech.glide.samples.flickr.api.Api;
+import com.bumptech.glide.samples.flickr.api.Photo;
 import com.bumptech.glide.util.Log;
 
 import java.io.File;

File: samples/flickr/src/com/bumptech/glide/samples/flickr/PhotoViewer.java
Patch:
@@ -1,6 +1,6 @@
-package com.bumptech.flickr;
+package com.bumptech.glide.samples.flickr;
 
-import com.bumptech.flickr.api.Photo;
+import com.bumptech.glide.samples.flickr.api.Photo;
 
 import java.util.List;
 

File: samples/flickr/src/com/bumptech/glide/samples/flickr/api/Api.java
Patch:
@@ -1,4 +1,4 @@
-package com.bumptech.flickr.api;
+package com.bumptech.glide.samples.flickr.api;
 
 import android.content.Context;
 import com.android.volley.DefaultRetryPolicy;

File: samples/flickr/src/com/bumptech/glide/samples/flickr/api/Photo.java
Patch:
@@ -1,4 +1,4 @@
-package com.bumptech.flickr.api;
+package com.bumptech.glide.samples.flickr.api;
 
 import org.json.JSONException;
 import org.json.JSONObject;

File: library/src/com/bumptech/glide/presenter/target/SimpleTarget.java
Patch:
@@ -27,8 +27,8 @@ public ImagePresenter getImagePresenter() {
     }
 
     /**
-     * A default implementation that calls {@link SizeReadyCallback#onSizeReady(int, int)} synchronously with
-     * {@link #getSize(com.bumptech.glide.presenter.target.Target.SizeReadyCallback)}.
+     * A default implementation that calls {@link com.bumptech.glide.presenter.target.Target.SizeReadyCallback}
+     * synchronously with {@link #getSize()}
      *
      * @param cb The callback that must be called when the size of the target has been determined
      */

File: library/src/com/bumptech/glide/presenter/ImagePresenter.java
Patch:
@@ -441,7 +441,7 @@ public void onException(Exception e) {
                 if (exceptionHandler != null) {
                     exceptionHandler.onException(e, model, relevant);
                 }
-                if (relevant && canSetPlaceholder()) {
+                if (relevant && canSetPlaceholder() && errorDrawable != null) {
                     target.setPlaceholder(errorDrawable);
                 }
             }

File: library/src/com/bumptech/glide/resize/bitmap_recycle/SerialBitmapReferenceCounter.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.Map;
+import java.util.WeakHashMap;
 
 public class SerialBitmapReferenceCounter implements BitmapReferenceCounter {
 
@@ -50,7 +51,7 @@ public void markPending() {
         }
     }
 
-    private final Map<Bitmap, InnerTracker> counter = new HashMap<Bitmap, InnerTracker>();
+    private final Map<Bitmap, InnerTracker> counter = new WeakHashMap<Bitmap, InnerTracker>();
     private final BitmapPool target;
     private final InnerTrackerPool pool = new InnerTrackerPool();
 

File: library/src/com/bumptech/glide/Glide.java
Patch:
@@ -360,8 +360,8 @@ private enum ResizeOption {
         private int animationId = -1;
         private int placeholderId = -1;
         private int errorId = -1;
-        private Transformation transformation = null;
-        private Downsampler downsampler = null;
+        private Transformation transformation = Transformation.NONE;
+        private Downsampler downsampler = Downsampler.AT_LEAST;
         private TransformationLoader<T> transformationLoader = null;
 
         private Request(T model) {

File: library/src/com/bumptech/glide/presenter/ImageReadyCallback.java
Patch:
@@ -4,7 +4,7 @@
 
 package com.bumptech.glide.presenter;
 
-import android.widget.ImageView;
+import com.bumptech.glide.presenter.target.Target;
 
 /**
  * A callback interface used to perform some action when an {@link ImagePresenter} sets a new bitmap in an
@@ -15,8 +15,8 @@ public interface ImageReadyCallback {
     /**
      * The method called when a bitmap is set
      *
-     * @param view The view that will display the bitmap
+     * @param target The target that will display the bitmap
      * @param fromCache True iff the load completed without a placeholder being shown.
      */
-    public void onImageReady(ImageView view, boolean fromCache);
+    public void onImageReady(Target target, boolean fromCache);
 }

File: library/src/com/bumptech/glide/loader/stream/VolleyStreamLoader.java
Patch:
@@ -19,6 +19,7 @@ public class VolleyStreamLoader implements StreamLoader {
     private final RetryPolicy retryPolicy;
     private Request current = null;
 
+    @SuppressWarnings("unused")
     public VolleyStreamLoader(RequestQueue requestQueue, String url) {
         this(requestQueue, url, new DefaultRetryPolicy());
     }

File: library/src/com/bumptech/glide/util/Log.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.Date;
 
 public class Log {
-    private static final String TAG = "BUMP_PHOTOS";
+    private static final String TAG = "GLIDE";
 
     @SuppressLint("SimpleDateFormat")
     private static final DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");

File: samples/flickr/src/com/bumptech/flickr/FlickrPhotoList.java
Patch:
@@ -102,7 +102,7 @@ public View getView(int position, View view, ViewGroup container) {
 
             Glide.load(current)
                     .into(viewHolder.imageView)
-                    .with(new FlickrModelLoader(Glide.get().getRequestQueue(getActivity())))
+                    .with(new FlickrModelLoader(getActivity()))
                     .centerCrop()
                     .animate(R.anim.fade_in)
                     .begin();

File: library/src/com/bumptech/glide/loader/image/BaseImageLoader.java
Patch:
@@ -57,6 +57,7 @@ protected void onImageReady(String id, Bitmap image, boolean isUsed) { }
      * @param id The unique id of the image
      * @return True iff this image loader has handled the exception and the cb should not be notified.
      */
+    @SuppressWarnings("unused")
     protected boolean onImageLoadFailed(Exception e, String id) {
         return false;
     }

File: library/src/com/bumptech/glide/resize/loader/CenterCrop.java
Patch:
@@ -10,10 +10,11 @@
 import com.bumptech.glide.resize.LoadedCallback;
 
 /**
- * An ImageLoader implementation that loads and crops in image down to the given width and height.
+ * Load image to exactly match the view in one dimension and then crop the image to fit the other dimension.
  *
  * @see ImageManager#centerCrop(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.resize.LoadedCallback)
  */
+@SuppressWarnings("unused")
 public class CenterCrop extends ImageManagerLoader {
 
     public CenterCrop(ImageManager imageManager) {

File: library/src/com/bumptech/glide/resize/loader/FitCenter.java
Patch:
@@ -10,11 +10,12 @@
 import com.bumptech.glide.resize.LoadedCallback;
 
 /**
- * An ImageLoader implementation that loads an image into within the given dimensions maintaining the original
- * proportions
+ * Load the image so that one dimension of the image exactly matches one of the given dimensions and the other dimension
+ * of the image is smaller than or equal to the other given dimension.
  *
  * @see ImageManager#fitCenter(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.resize.LoadedCallback)
  */
+@SuppressWarnings("Unused")
 public class FitCenter extends ImageManagerLoader {
 
     public FitCenter(ImageManager imageManager) {

File: library/src/com/bumptech/glide/Glide.java
Patch:
@@ -8,6 +8,7 @@
 import com.android.volley.RequestQueue;
 import com.android.volley.toolbox.Volley;
 import com.bumptech.glide.loader.image.ImageLoader;
+import com.bumptech.glide.loader.model.DrawableLoader;
 import com.bumptech.glide.loader.model.FileLoader;
 import com.bumptech.glide.loader.model.ModelLoader;
 import com.bumptech.glide.loader.model.StringLoader;
@@ -181,6 +182,8 @@ private static <T> ModelLoader<T> getModelFor(T model, Context context) {
             return (ModelLoader<T>) new UriLoader(context, new UrlLoader(GLIDE.getRequestQueue(context)));
         } else if (model instanceof String) {
             return (ModelLoader<T>) new StringLoader(new UriLoader(context, new UrlLoader(GLIDE.getRequestQueue(context))));
+        } else if (model instanceof Integer) {
+            return (ModelLoader<T>) new DrawableLoader(context);
         } else {
             throw new IllegalArgumentException("No default ModelLoader for class=" + model.getClass() +
                     ", you need to provide one by calling with()");

File: library/src/com/bumptech/glide/presenter/ImagePresenter.java
Patch:
@@ -453,7 +453,7 @@ public void getSize(SizeReadyCallback cb) {
             handler.removeCallbacksAndMessages(PENDING_SIZE_CHANGE_TOKEN);
             this.cb = null;
             ViewGroup.LayoutParams layoutParams = view.getLayoutParams();
-            if (layoutParams.width > 0 && layoutParams.height > 0) {
+            if (layoutParams != null && layoutParams.width > 0 && layoutParams.height > 0) {
                 cb.onSizeReady(layoutParams.width, layoutParams.height);
             } else if (valid) {
                 cb.onSizeReady(width, height);

File: library/src/com/bumptech/glide/Glide.java
Patch:
@@ -10,6 +10,7 @@
 import com.bumptech.glide.loader.image.ImageLoader;
 import com.bumptech.glide.loader.model.FileLoader;
 import com.bumptech.glide.loader.model.ModelLoader;
+import com.bumptech.glide.loader.model.StringLoader;
 import com.bumptech.glide.loader.model.UriLoader;
 import com.bumptech.glide.loader.model.UrlLoader;
 import com.bumptech.glide.loader.model.VolleyModelLoader;
@@ -189,6 +190,8 @@ public String getId(URL model) {
             return (ModelLoader<T>) new FileLoader();
         } else if (model instanceof Uri) {
             return (ModelLoader<T>) new UriLoader(context, GLIDE.getRequestQueue(context));
+        } else if (model instanceof String) {
+            return (ModelLoader<T>) new StringLoader(context, GLIDE.getRequestQueue(context));
         } else {
             throw new IllegalArgumentException("No default ModelLoader for class=" + model.getClass() +
                     ", you need to provide one by calling with()");

File: library/src/com/bumptech/glide/Glide.java
Patch:
@@ -256,7 +256,6 @@ public Request(T model, ImageView imageView) {
          */
         public Request<T> with(ModelLoader<T> modelLoader) {
             this.modelLoader = modelLoader;
-            builder.setModelLoader(modelLoader);
 
             return this;
         }
@@ -364,7 +363,7 @@ private void build() {
                 if (modelLoader == null) {
                     modelLoader = getModelFor(model, context);
                 }
-                presenter = builder.build();
+                presenter = builder.setModelLoader(modelLoader).build();
                 imageView.setTag(R.id.image_presenter_id, presenter);
             }
         }

File: library/src/com/bumptech/glide/Glide.java
Patch:
@@ -171,7 +171,7 @@ public static <T> HalfRequest<T> load(T model) {
 
     @SuppressWarnings("unchecked")
     private static <T> ModelLoader<T> getModelFor(T model, Context context) {
-        if (model == URL.class) {
+        if (model instanceof URL) {
             return (ModelLoader<T>) new VolleyModelLoader<URL>(GLIDE.getRequestQueue(context)) {
                 @Override
                 protected String getUrl(URL model, int width, int height) {
@@ -183,7 +183,7 @@ public String getId(URL model) {
                     return model.toString();
                 }
             };
-        } else if (model == File.class) {
+        } else if (model instanceof File) {
             return (ModelLoader<T>) new FileLoader();
         } else {
             throw new IllegalArgumentException("No default ModelLoader for class=" + model.getClass() +

File: library/src/com/bumptech/glide/loader/model/BaseModelLoader.java
Patch:
@@ -5,6 +5,8 @@
 /**
  * A base class that handles canceling any existing {@link StreamLoader} when
  * cleared
+ *
+ * @param <T> The type of model for this loader
  */
 public abstract class BaseModelLoader<T> implements ModelLoader<T> {
     private StreamLoader current;

File: library/src/com/bumptech/glide/loader/stream/StreamLoader.java
Patch:
@@ -21,7 +21,6 @@ public interface StreamReadyCallback {
          * The method that should be called when a load completes successfully
          *
          * @param is The {@link InputStream} that will be used to load the image
-         * @return True iff the loaded streamOpener and id was used by the class that requested
          */
         public void onStreamReady(InputStream is);
 

File: library/src/com/bumptech/glide/resize/bitmap_recycle/ConcurrentBitmapReferenceCounter.java
Patch:
@@ -64,9 +64,9 @@ public void markPending() {
     private final BitmapPool target;
     private final InnerTrackerPool pool = new InnerTrackerPool();
 
-    public ConcurrentBitmapReferenceCounter(BitmapPool target, int bitmapsPerSize) {
+    public ConcurrentBitmapReferenceCounter(BitmapPool target) {
         this.target = target;
-        counter = new ConcurrentHashMap<Integer, InnerTracker>(bitmapsPerSize * 12);
+        counter = new ConcurrentHashMap<Integer, InnerTracker>();
     }
 
     @Override

File: samples/flickr/src/com/bumptech/flickr/FlickrSearchActivity.java
Patch:
@@ -49,7 +49,6 @@ public void onCreate(Bundle savedInstanceState) {
 
         imageManager = new ImageManager.Builder(this)
                 .setDiskCache(DiskLruCacheWrapper.get(ImageManager.getPhotoCacheDir(this), 50 * 1024 * 1024))
-                .setMaxBitmapsPerSize(40)
                 .build();
 
         final Resources res = getResources();

File: library/src/com/bumptech/glide/resize/ImageResizer.java
Patch:
@@ -239,6 +239,7 @@ private Bitmap decodeStream(RecyclableBufferedInputStream bis, BitmapFactory.Opt
         try {
             if (decodeBitmapOptions.inJustDecodeBounds) {
                 bis.reset();
+                bis.clearMark();
             } else {
                 bis.close();
             }

File: library/src/com/bumptech/glide/resize/ImageResizer.java
Patch:
@@ -23,8 +23,8 @@
  * A class for synchronously resizing bitmaps with or without Bitmaps to recycle
  */
 public class ImageResizer {
-    private static final int TEMP_BYTES_SIZE = 16 * 1024; //16kb
-    private static final int MARK_POSITION = 1024 * 1024; //1mb
+    private static final int TEMP_BYTES_SIZE = 32 * 1024; //32kb
+    private static final int MARK_POSITION = TEMP_BYTES_SIZE;//1024 * 1024; //1mb
     private static final boolean CAN_RECYCLE = Build.VERSION.SDK_INT >= 11;
     private final Queue<byte[]> tempQueue = new LinkedList<byte[]>();
     private final BitmapPool bitmapPool;

File: library/src/com/bumptech/glide/resize/ImageResizer.java
Patch:
@@ -389,10 +389,10 @@ private Bitmap decodeStream(RecyclableBufferedInputStream bis, BitmapFactory.Opt
             }
         } catch (IOException e) {
             e.printStackTrace();
+        } finally {
+            releaseTempBytes(decodeBitmapOptions.inTempStorage);
         }
 
-        releaseTempBytes(decodeBitmapOptions.inTempStorage);
-
         return result;
     }
 

File: library/src/com/bumptech/photos/resize/cache/disk/Journal.java
Patch:
@@ -25,7 +25,7 @@
  * To change this template use File | Settings | File Templates.
  */
 public class Journal {
-    private static int MAX_LINES = 10000;
+    private static final int MAX_LINES = 10000;
     private MemoryJournal memoryJournal = null;
     private final File journalFile;
     private BufferedWriter journalWriter;
@@ -117,7 +117,7 @@ private void rebuildFromDisk() {
         final File[] files = directory.listFiles(new FileFilter() {
             @Override
             public boolean accept(File file) {
-                return file.getName() != journalFile.getName();
+                return !file.getName().equals(journalFile.getName());
             }
         });
         List<File> fileList = Arrays.asList(files);
@@ -128,7 +128,7 @@ public int compare(File file, File file2) {
                 final long arg2 = file2.lastModified();
                 if (arg1 == arg2) {
                     return 0;
-                } else if (arg1 > arg1) {
+                } else if (arg1 > arg2) {
                     return -1;
                 } else {
                     return 1;

File: library/src/com/bumptech/photos/resize/cache/disk/DiskCache.java
Patch:
@@ -79,7 +79,7 @@ public void put(String key, final Bitmap bitmap, Bitmap.CompressFormat format) {
             try {
                 if (!outFile.exists()) outFile.createNewFile();
 
-                out = new BufferedOutputStream(new FileOutputStream(outFile));
+                out = new BufferedOutputStream(new FileOutputStream(outFile), 8192);
                 bitmap.compress(format, 100, out);
             } catch (FileNotFoundException e) {
                 e.printStackTrace();

File: library/src/com/bumptech/photos/resize/ImageResizer.java
Patch:
@@ -297,7 +297,7 @@ private Bitmap decodeStream(String path, BitmapFactory.Options decodeBitmapOptio
 
     private Bitmap decodeStream(InputStream is, BitmapFactory.Options decodeBitmapOptions) {
         final byte[][] tempBytes = getTempBytes();
-        ReycleableBufferedInputStream bis = new ReycleableBufferedInputStream(is, tempBytes[0]);
+        RecyclableBufferedInputStream bis = new RecyclableBufferedInputStream(is, tempBytes[0]);
         decodeBitmapOptions.inTempStorage = tempBytes[1];
         Bitmap result = null;
         try {

File: library/src/com/bumptech/photos/resize/cache/disk/DiskCache.java
Patch:
@@ -36,7 +36,7 @@ public class DiskCache {
     private boolean isOpen = false;
     private Map<String, ReentrantLock> lockMap = new HashMap<String, ReentrantLock>();
 
-    public static DiskCache get(File diskCacheDir, int maxCacheSize) {
+    public static synchronized DiskCache get(File diskCacheDir, int maxCacheSize) {
         if (CACHE == null) {
             CACHE = new DiskCache(diskCacheDir, maxCacheSize);
         }

File: samples/flickr/src/com/bumptech/flickr/api/Downloader.java
Patch:
@@ -90,7 +90,6 @@ public void run() {
             try {
                 final URL targetUrl = new URL(url);
                 urlConnection = (HttpURLConnection) targetUrl.openConnection();
-                urlConnection = (HttpURLConnection) targetUrl.openConnection();
                 urlConnection.setDoInput(true);
                 urlConnection.setDoOutput(false);
                 urlConnection.setUseCaches(false);

File: library/src/com/bumptech/photos/resize/ImageManager.java
Patch:
@@ -253,7 +253,7 @@ public void onPhotoRemoved(Integer key, Bitmap bitmap) {
      * @return A token tracking this request
      */
     public Object getImage(final String path, final LoadedCallback cb){
-        final int key = getKey(path, 0, 0, ResizeType.AS_IS);
+        final int key = getKey(path, -1, -1, ResizeType.AS_IS);
         return runJob(key, cb, new ImageManagerJob(key, cb, false) {
             @Override
             protected Bitmap resizeIfNotFound() {

File: library/src/com/bumptech/photos/presenter/ImagePresenter.java
Patch:
@@ -181,8 +181,8 @@ public void run() {
 
             width = imageView.getWidth();
             height = imageView.getHeight();
-            if (pendingLoad != null)
-                Log.d("IP: getDimens width=" + width + " height=" + height);
+//            if (pendingLoad != null)
+//                Log.d("IP: getDimens width=" + width + " height=" + height);
             if (width != 0 && height != 0) {
                 postPendingLoad();
             }

File: library/src/com/bumptech/photos/resize/cache/LruPhotoCache.java
Patch:
@@ -15,7 +15,7 @@
  * @see android.support.v4.util.LruCache
  */
 public class LruPhotoCache{
-    private static final float SIZE_RATIO = 1f/8f;
+    private static final float SIZE_RATIO = 1f/10f;
     private final PhotoCache photoCache;
     private PhotoRemovedListener photoRemovedListener;
 

File: library/src/com/bumptech/photos/resize/ImageResizer.java
Patch:
@@ -347,7 +347,8 @@ private static void copyOptions(BitmapFactory.Options from, BitmapFactory.Option
         to.inInputShareable = from.inInputShareable;
         if (CAN_RECYCLE)
             to.inMutable = from.inMutable;
-        to.inPreferQualityOverSpeed = from.inPreferQualityOverSpeed;
+        if (Build.VERSION.SDK_INT >= 10)
+            to.inPreferQualityOverSpeed = from.inPreferQualityOverSpeed;
         to.inPreferredConfig = from.inPreferredConfig;
         to.inPurgeable = from.inPurgeable;
         to.inSampleSize = from.inSampleSize;

File: library/src/com/bumptech/photos/resize/ImageManager.java
Patch:
@@ -248,7 +248,8 @@ public void onPhotoRemoved(String key, Bitmap bitmap) {
             }
             bitmapCache = new SizedBitmapCache(options.maxPerSize);
         } else {
-            options.bitmapDecodeOptions.inMutable = false;
+            if (CAN_RECYCLE)
+                options.bitmapDecodeOptions.inMutable = false;
             bitmapCache = null;
         }
 

File: src/com/bumptech/photos/cache/LruPhotoCache.java
Patch:
@@ -49,7 +49,7 @@ protected int sizeOf(String key, Bitmap value) {
         @Override
         protected void entryRemoved(boolean evicted, String key, Bitmap oldValue, Bitmap newValue) {
             super.entryRemoved(evicted, key, oldValue, newValue);    //To change body of overridden methods use File | Settings | File Templates.
-            if (evicted && photoRemovedListener != null) {
+            if (photoRemovedListener != null) {
                 photoRemovedListener.onPhotoRemoved(key, oldValue);
             }
         }

File: src/com/bumptech/photos/cache/SizedBitmapCache.java
Patch:
@@ -19,7 +19,7 @@
  * To change this template use File | Settings | File Templates.
  */
 public class SizedBitmapCache {
-    private static final int MAX_PER_SIZE = 5;
+    private static final int MAX_PER_SIZE = 8;
     private Map<String, Queue<Bitmap>> availableBitmaps = new HashMap<String, Queue<Bitmap>>();
 
     public void put(Bitmap bitmap) {

