File: persistence-modules/hibernate-jpa-2/src/test/java/com/baeldung/hibernate/entitymanager/getreference/GetReferenceH2IntegrationTest.java
Patch:
@@ -28,6 +28,8 @@ public static void setup() {
         ((Logger) LoggerFactory.getLogger("org.hibernate.SQL")).setLevel(Level.OFF);
         ((Logger) LoggerFactory.getLogger("org.hibernate.type.descriptor.sql")).setLevel(Level.OFF);
         ((Logger) LoggerFactory.getLogger("org.hibernate.stat")).setLevel(Level.OFF);
+        ((Logger) LoggerFactory.getLogger("org.hibernate.orm.jdbc.bind")).setLevel(Level.OFF);
+        ((Logger) LoggerFactory.getLogger("org.hibernate.orm.jdbc.work")).setLevel(Level.OFF);
 
         entityManagerFactory = Persistence.createEntityManagerFactory("com.baeldung.hibernate.entitymanager.game_player_h2");
         entityManager = entityManagerFactory.createEntityManager();

File: text-processing-libraries-modules/pdf/src/test/java/com/baeldung/pdfreadertest/ReadPdfFileUnitTest.java
Patch:
@@ -16,7 +16,7 @@ class ReadPdfFileUnitTest {
 
     @Test
     public void givenSamplePdf_whenUsingApachePdfBox_thenCompareOutput() throws IOException {
-        String expectedText = "Hello World!\n";
+        String expectedText = "Hello World!" + System.lineSeparator();
 
         File file = new File("sample.pdf");
         PDDocument document = PDDocument.load(file);

File: spring-ai-2/src/main/java/com/baeldung/springai/chromadb/VectorStoreInitializer.java
Patch:
@@ -25,7 +25,7 @@ public void run(ApplicationArguments args) {
             .stream()
             .map(poem -> {
                 Map<String, Object> metadata = Map.of("title", poem.title());
-                String content = String.join("", poem.lines());
+                String content = String.join("\n", poem.lines());
 
                 return new Document(content, metadata);
             })

File: spring-ai-2/src/main/java/com/baeldung/springai/chromadb/VectorStoreInitializer.java
Patch:
@@ -25,7 +25,7 @@ public void run(ApplicationArguments args) {
             .stream()
             .map(poem -> {
                 Map<String, Object> metadata = Map.of("title", poem.title());
-                String content = String.join("", poem.lines());
+                String content = String.join("\n", poem.lines());
 
                 return new Document(content, metadata);
             })

File: spring-boot-modules/spring-boot-validation/src/test/java/com/baeldung/beanvalidation/application/UserControllerIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
+import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.http.MediaType;
 import org.springframework.test.context.junit4.SpringRunner;
@@ -20,8 +21,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(SpringRunner.class)
-@WebMvcTest
 @AutoConfigureMockMvc
+@WebMvcTest(UserController.class)
 public class UserControllerIntegrationTest {
 
     @MockBean

File: core-java-modules/core-java-date-operations-1/src/test/java/com/baeldung/date/DateDiffUnitTest.java
Patch:
@@ -28,8 +28,8 @@ public void givenTwoDatesBeforeJava8_whenDifferentiating_thenWeGetSix() throws P
         Date firstDate = sdf.parse("06/24/2017");
         Date secondDate = sdf.parse("06/30/2017");
 
-        long diffInMillies = Math.abs(secondDate.getTime() - firstDate.getTime());
-        long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
+        long diffInMillis = Math.abs(secondDate.getTime() - firstDate.getTime());
+        long diff = TimeUnit.DAYS.convert(diffInMillis, TimeUnit.MILLISECONDS);
 
         assertEquals(6, diff);
     }

File: core-java-modules/core-java-date-operations-1/src/test/java/com/baeldung/jodatime/JodaTimeUnitTest.java
Patch:
@@ -55,9 +55,9 @@ public void testDateTimeRepresentation() {
         Instant oneMinuteAgoInstant = new Instant(oneMinuteAgoDate);
 
         // epochMilli and epochSecond
-        long milliesFromEpochTime = System.currentTimeMillis();
-        long secondsFromEpochTime = milliesFromEpochTime / 1000;
-        Instant instantFromEpochMilli = Instant.ofEpochMilli(milliesFromEpochTime);
+        long millisFromEpochTime = System.currentTimeMillis();
+        long secondsFromEpochTime = millisFromEpochTime / 1000;
+        Instant instantFromEpochMilli = Instant.ofEpochMilli(millisFromEpochTime);
         Instant instantFromEpocSeconds = Instant.ofEpochSecond(secondsFromEpochTime);
 
         // convert Instants

File: core-java-modules/core-java-lang-7/src/main/java/com/baeldung/infiniteloops/InfiniteLoops.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.loops;
+package com.baeldung.infiniteloops;
 
 public class InfiniteLoops {
 

File: core-java-modules/core-java-lang-7/src/test/java/com/baeldung/className/RetrievingClassNameUnitTest.java
Patch:
@@ -1,10 +1,10 @@
 package com.baeldung.className;
 
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
+import org.junit.Test;
+
 public class RetrievingClassNameUnitTest {
 
     // Retrieving Simple Name

File: core-java-modules/core-java-lang-8/src/test/java/com/baeldung/equalshashcode/entities/ComplexClassUnitTest.java
Patch:
@@ -1,12 +1,12 @@
 package com.baeldung.equalshashcode.entities;
 
-import org.junit.Assert;
-import org.junit.Test;
-
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
 
+import org.junit.Assert;
+import org.junit.Test;
+
 public class ComplexClassUnitTest {
 
     @Test

File: core-java-modules/core-java-lang-8/src/test/java/com/baeldung/equalshashcode/entities/SquareClassUnitTest.java
Patch:
@@ -1,10 +1,10 @@
 package com.baeldung.equalshashcode.entities;
 
+import java.awt.*;
+
 import org.junit.Assert;
 import org.junit.Test;
 
-import java.awt.*;
-
 public class SquareClassUnitTest {
 
     @Test

File: core-java-modules/core-java-lang-8/src/test/java/com/baeldung/system/SystemPropertiesUnitTest.java
Patch:
@@ -1,11 +1,11 @@
 package com.baeldung.system;
 
+import java.util.Properties;
+
 import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 
-import java.util.Properties;
-
 public class SystemPropertiesUnitTest {
 
     @Test

File: core-java-modules/core-java-lang/src/main/java/com/baeldung/methodmultiplereturnvalues/MultipleReturnValuesUsingApacheCommonsPair.java
Patch:
@@ -1,11 +1,11 @@
 package com.baeldung.methodmultiplereturnvalues;
 
-import org.apache.commons.lang3.tuple.ImmutablePair;
-import org.apache.commons.lang3.tuple.Pair;
-
 import java.util.Comparator;
 import java.util.List;
 
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.Pair;
+
 class MultipleReturnValuesUsingApacheCommonsPair {
 
     static ImmutablePair<Coordinates, Double> getMostDistantPoint(

File: core-java-modules/core-java-lang/src/main/java/com/baeldung/methodmultiplereturnvalues/MultipleReturnValuesUsingApacheCommonsTriple.java
Patch:
@@ -1,10 +1,10 @@
 package com.baeldung.methodmultiplereturnvalues;
 
-import org.apache.commons.lang3.tuple.ImmutableTriple;
-
 import java.util.List;
 import java.util.stream.Collectors;
 
+import org.apache.commons.lang3.tuple.ImmutableTriple;
+
 class MultipleReturnValuesUsingApacheCommonsTriple {
 
     static ImmutableTriple<Double, Double, Double> getMinAvgMaxTriple(

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/comparelong/CompareLongUnitTest.java
Patch:
@@ -3,10 +3,10 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatCode;
 
-import org.junit.Test;
-
 import java.util.Objects;
 
+import org.junit.Test;
+
 public class CompareLongUnitTest {
 
     @Test

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/comparing/ApacheCommonsObjectUtilsUnitTest.java
Patch:
@@ -1,10 +1,10 @@
 package com.baeldung.comparing;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import org.apache.commons.lang3.ObjectUtils;
 import org.junit.jupiter.api.Test;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 class ApacheCommonsObjectUtilsUnitTest {
 
     @Test

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/comparing/ComparableInterfaceUnitTest.java
Patch:
@@ -1,11 +1,11 @@
 package com.baeldung.comparing;
 
-import org.junit.jupiter.api.Test;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.SortedSet;
 import java.util.TreeSet;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import org.junit.jupiter.api.Test;
 
 class ComparableInterfaceUnitTest {
 

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/comparing/EqualityOperatorUnitTest.java
Patch:
@@ -1,9 +1,9 @@
 package com.baeldung.comparing;
 
-import org.junit.jupiter.api.Test;
-
 import static org.assertj.core.api.Assertions.assertThat;
 
+import org.junit.jupiter.api.Test;
+
 class EqualityOperatorUnitTest {
 
     @Test

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/comparing/EqualsMethodUnitTest.java
Patch:
@@ -1,10 +1,10 @@
 package com.baeldung.comparing;
 
-import org.junit.jupiter.api.Test;
-
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
+import org.junit.jupiter.api.Test;
+
 class EqualsMethodUnitTest {
 
     @Test

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/comparing/ObjectsEqualsStaticMethodUnitTest.java
Patch:
@@ -1,10 +1,10 @@
 package com.baeldung.comparing;
 
-import org.junit.jupiter.api.Test;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.Objects;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import org.junit.jupiter.api.Test;
 
 class ObjectsEqualsStaticMethodUnitTest {
 

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/methodmultiplereturnvalues/MultipleReturnValuesUsingApacheCommonsPairUnitTest.java
Patch:
@@ -1,14 +1,14 @@
 package com.baeldung.methodmultiplereturnvalues;
 
-import org.apache.commons.lang3.tuple.ImmutablePair;
-import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.junit.jupiter.api.Test;
 
 class MultipleReturnValuesUsingApacheCommonsPairUnitTest {
 

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/methodmultiplereturnvalues/MultipleReturnValuesUsingApacheCommonsTripleUnitTest.java
Patch:
@@ -1,14 +1,14 @@
 package com.baeldung.methodmultiplereturnvalues;
 
-import org.apache.commons.lang3.tuple.ImmutableTriple;
-import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
+import org.apache.commons.lang3.tuple.ImmutableTriple;
+import org.junit.jupiter.api.Test;
 
 class MultipleReturnValuesUsingApacheCommonsTripleUnitTest {
 

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/methodmultiplereturnvalues/MultipleReturnValuesUsingArraysUnitTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.methodmultiplereturnvalues;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+
 import org.junit.jupiter.api.Test;
 
 class MultipleReturnValuesUsingArraysUnitTest {

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/methodmultiplereturnvalues/MultipleReturnValuesUsingCollectionsUnitTest.java
Patch:
@@ -1,8 +1,10 @@
 package com.baeldung.methodmultiplereturnvalues;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+
 import java.util.List;
 import java.util.Map;
+
 import org.junit.jupiter.api.Test;
 
 class MultipleReturnValuesUsingCollectionsUnitTest {

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/methodmultiplereturnvalues/MultipleReturnValuesUsingContainerUnitTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.methodmultiplereturnvalues;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+
 import org.junit.jupiter.api.Test;
 
 class MultipleReturnValuesUsingContainerUnitTest {

File: core-java-modules/core-java-lang/src/test/java/com/baeldung/methodmultiplereturnvalues/MultipleReturnValuesUsingTuplesUnitTest.java
Patch:
@@ -1,10 +1,12 @@
 package com.baeldung.methodmultiplereturnvalues;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+
 import java.math.BigDecimal;
 import java.math.RoundingMode;
 import java.util.ArrayList;
 import java.util.List;
+
 import org.junit.jupiter.api.Test;
 
 class MultipleReturnValuesUsingTuplesUnitTest {

File: apache-httpclient4/src/test/java/com/baeldung/httpclient/HttpClientTimeoutV4LiveTest.java
Patch:
@@ -132,7 +132,7 @@ public void run() {
         new Timer(true).schedule(task, hardTimeout * 1000);
 
         HttpResponse response = httpClient.execute(getMethod);
-        System.out.println("HTTP Status of response: " + response.getStatusLine().getStatusCode());
+        //System.out.println("HTTP Status of response: " + response.getStatusLine().getStatusCode());
     }
 
 }

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/modulith/Application.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.modulith;
 
+import com.baeldung.modulith.product.ProductDto;
 import com.baeldung.modulith.product.ProductService;
-import com.baeldung.modulith.product.internal.Product;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -15,6 +15,6 @@ public class Application {
     public static void main(String[] args) {
         SpringApplication.run(Application.class, args)
           .getBean(ProductService.class)
-          .create(new Product("baeldung", "course", 10));
+          .create(new ProductDto("baeldung", "course", 10));
     }
 }
\ No newline at end of file

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/openai/config/OpenAIRestTemplateConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.openapi.config;
+package com.baeldung.openai.config;
 
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.beans.factory.annotation.Value;

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/openai/controller/ChatController.java
Patch:
@@ -1,7 +1,7 @@
-package com.baeldung.openapi.controller;
+package com.baeldung.openai.controller;
 
-import com.baeldung.openapi.dto.ChatRequest;
-import com.baeldung.openapi.dto.ChatResponse;
+import com.baeldung.openai.dto.ChatRequest;
+import com.baeldung.openai.dto.ChatResponse;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.beans.factory.annotation.Value;

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/openai/dto/ChatRequest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.openapi.dto;
+package com.baeldung.openai.dto;
 
 import java.util.ArrayList;
 import java.util.List;

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/openai/dto/ChatResponse.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.openapi.dto;
+package com.baeldung.openai.dto;
 
 import java.util.List;
 

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/openai/dto/Message.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.openapi.dto;
+package com.baeldung.openai.dto;
 
 public class Message {
 

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/openapi/OpenApiApplication.java
Patch:
@@ -1,11 +1,9 @@
-package com.baeldung;
+package com.baeldung.openapi;
 
 import org.springframework.boot.SpringApplication;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
-@EnableAutoConfiguration
 public class OpenApiApplication {
 
     public static void main(String[] args) {

File: spring-boot-modules/spring-boot-libraries-2/src/test/java/com/baeldung/openapi/OpenApiPetsIntegrationTest.java
Patch:
@@ -3,7 +3,6 @@
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-import com.baeldung.OpenApiApplication;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -15,7 +14,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = OpenApiApplication.class)
-@ComponentScan("com.baeldung")
+@ComponentScan("com.baeldung.openapi")
 @AutoConfigureMockMvc
 public class OpenApiPetsIntegrationTest {
 

File: testing-modules/mocks-2/src/test/java/com/baeldung/service/AuthorizationServiceUnitTest.java
Patch:
@@ -15,7 +15,7 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
-public class AuthorizationServiceTest {
+public class AuthorizationServiceUnitTest {
 
     @Mock
     private AuthorizationService authorizationService;

File: spring-security-modules/spring-security-web-login-2/src/main/java/com/baeldung/loginextrafieldssimple/SimpleUserDetailsService.java
Patch:
@@ -10,7 +10,7 @@
 public class SimpleUserDetailsService implements UserDetailsService {
 
     private UserRepository userRepository;
- 
+
     public SimpleUserDetailsService(UserRepository userRepository) {
         this.userRepository = userRepository;
     }
@@ -24,7 +24,7 @@ public UserDetails loadUserByUsername(String username) throws UsernameNotFoundEx
         User user = userRepository.findUser(usernameAndDomain[0], usernameAndDomain[1]);
         if (user == null) {
             throw new UsernameNotFoundException(
-                String.format("Username not found for domain, username=%s, domain=%s", 
+                String.format("Username not found for domain, username=%s, domain=%s",
                     usernameAndDomain[0], usernameAndDomain[1]));
         }
         return user;

File: spring-security-modules/spring-security-web-login-2/src/main/java/com/baeldung/loginextrafieldssimple/WebController.java
Patch:
@@ -27,9 +27,7 @@ public String index(Model model) {
 
     @RequestMapping("/user/index")
     public String userIndex(Model model) {
-        getDomain().ifPresent(d -> {
-            model.addAttribute("domain", d);
-        });
+        getDomain().ifPresent(d -> model.addAttribute("domain", d));
         return "user/index";
     }
 

File: core-java-modules/core-java-22/src/main/java/com/baeldung/javafeatures/classfile/ClassFileDriver.java
Patch:
@@ -11,7 +11,7 @@
 public class ClassFileDriver {
     public Path updateClass() throws IOException {
         final String PREFIX = "test_";
-        final Path PATH = Path.of("src/main/java/com/baeldung/javafeatures/classfile/ClassFileExample.class");
+        final Path PATH = Path.of("target/classes/com/baeldung/javafeatures/classfile/ClassFileExample.class");
         ClassFile cf = ClassFile.of();
         ClassModel classModel = cf.parse(PATH);
         byte[] newBytes = cf.build(classModel.thisClass().asSymbol(), classBuilder -> {

File: core-java-modules/core-java-22/src/test/java/com/baeldung/foreign/api/Java22ForeignMemoryUnitTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import static org.junit.jupiter.api.Assertions.*;
 
-public class ForeignMemoryUnitTest {
+public class Java22ForeignMemoryUnitTest {
 
     @Test
     void whenGlobalArenaClosed_thenThrowsException() {

File: spring-web-modules/spring-freemarker/src/main/java/com/baeldung/freemarker/config/SpringWebConfig.java
Patch:
@@ -5,14 +5,14 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
-import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;
 import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;
 
 @EnableWebMvc
 @Configuration
 @ComponentScan({ "com.baeldung.freemarker" })
-public class SpringWebConfig extends WebMvcConfigurerAdapter {
+public class SpringWebConfig implements WebMvcConfigurer {
 
     @Override
     public void addResourceHandlers(ResourceHandlerRegistry registry) {

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/Car.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations;
+package com.baeldung;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.DependsOn;

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/Driver.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations;
+package com.baeldung;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.scheduling.annotation.Scheduled;

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/Engine.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations;
+package com.baeldung;
 
 import org.springframework.beans.factory.annotation.Value;
 

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/VehicleController.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations;
+package com.baeldung;
 
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/VehicleFactoryConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations;
+package com.baeldung;
 
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.context.annotation.Bean;

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/VehicleService.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations;
+package com.baeldung;
 
 import org.springframework.scheduling.annotation.Async;
 import org.springframework.stereotype.Service;

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/annotations/service/AuthApplication.java
Patch:
@@ -1,11 +1,12 @@
 package com.baeldung.annotations.service;
 
-import com.baeldung.annotations.service.abstracts.AbstractAuthenticationService;
-import com.baeldung.annotations.service.interfaces.AuthenticationService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+import com.baeldung.annotations.service.abstracts.AbstractAuthenticationService;
+import com.baeldung.annotations.service.interfaces.AuthenticationService;
+
 @SpringBootApplication
 public class AuthApplication {
 

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/annotations/service/concretes/InMemoryAuthenticationService.java
Patch:
@@ -1,8 +1,9 @@
 package com.baeldung.annotations.service.concretes;
 
-import com.baeldung.annotations.service.interfaces.AuthenticationService;
 import org.springframework.stereotype.Service;
 
+import com.baeldung.annotations.service.interfaces.AuthenticationService;
+
 @Service
 public class InMemoryAuthenticationService implements AuthenticationService {
 

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/annotations/service/concretes/LdapAuthenticationService.java
Patch:
@@ -1,8 +1,9 @@
 package com.baeldung.annotations.service.concretes;
 
-import com.baeldung.annotations.service.abstracts.AbstractAuthenticationService;
 import org.springframework.stereotype.Service;
 
+import com.baeldung.annotations.service.abstracts.AbstractAuthenticationService;
+
 @Service
 public class LdapAuthenticationService extends AbstractAuthenticationService {
 

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/componentscanautoconfigure/employee/Employee.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations.componentscanautoconfigure.employee;
+package com.baeldung.componentscanautoconfigure.employee;
 
 import org.springframework.stereotype.Component;
 

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/componentscanautoconfigure/employee/SeniorEmployee.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations.componentscanautoconfigure.employee;
+package com.baeldung.componentscanautoconfigure.employee;
 
 import org.springframework.stereotype.Component;
 

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/componentscanautoconfigure/healthcare/Doctor.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations.componentscanautoconfigure.healthcare;
+package com.baeldung.componentscanautoconfigure.healthcare;
 
 public class Doctor {
 

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/componentscanautoconfigure/healthcare/Hospital.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations.componentscanautoconfigure.healthcare;
+package com.baeldung.componentscanautoconfigure.healthcare;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/componentscanautoconfigure/student/Student.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations.componentscanautoconfigure.student;
+package com.baeldung.componentscanautoconfigure.student;
 
 import org.springframework.stereotype.Component;
 

File: spring-boot-modules/spring-boot-annotations-2/src/main/java/com/baeldung/componentscanautoconfigure/teacher/Teacher.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations.componentscanautoconfigure.teacher;
+package com.baeldung.componentscanautoconfigure.teacher;
 
 import org.springframework.stereotype.Component;
 

File: spring-boot-modules/spring-boot-annotations-2/src/test/java/com/baeldung/componentscanautoconfigure/EmployeeApplicationUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.annotations;
+package com.baeldung.componentscanautoconfigure;
 
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;

File: spring-boot-modules/spring-boot-annotations/src/main/java/com/baeldung/multibeaninstantiation/solution2/PersonOne.java
Patch:
@@ -2,8 +2,6 @@
 
 import org.springframework.stereotype.Component;
 
-import com.baeldung.multibeaninstantiation.solution2.Person;
-
 @Component
 public class PersonOne extends Person {
 

File: spring-boot-modules/spring-boot-annotations/src/main/java/com/baeldung/multibeaninstantiation/solution2/PersonTwo.java
Patch:
@@ -2,8 +2,6 @@
 
 import org.springframework.stereotype.Component;
 
-import com.baeldung.multibeaninstantiation.solution2.Person;
-
 @Component
 public class PersonTwo extends Person {
 

File: spring-boot-modules/spring-boot-annotations/src/main/java/com/baeldung/springbean/naming/configuration/AuditConfiguration.java
Patch:
@@ -1,9 +1,10 @@
 package com.baeldung.springbean.naming.configuration;
 
-import com.baeldung.springbean.naming.service.AuditService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
+import com.baeldung.springbean.naming.service.AuditService;
+
 @Configuration
 public class AuditConfiguration {
 

File: spring-boot-modules/spring-boot-annotations/src/main/java/com/baeldung/springbean/naming/configuration/MyConfiguration.java
Patch:
@@ -1,9 +1,10 @@
 package com.baeldung.springbean.naming.configuration;
 
-import com.baeldung.springbean.naming.component.CustomComponent;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
+import com.baeldung.springbean.naming.component.CustomComponent;
+
 @Configuration("configuration")
 public class MyConfiguration {
 

File: spring-boot-modules/spring-boot-annotations/src/main/java/com/baeldung/springbean/naming/controller/MessagingController.java
Patch:
@@ -1,9 +1,10 @@
 package com.baeldung.springbean.naming.controller;
 
-import com.baeldung.springbean.naming.service.MessagingService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 
+import com.baeldung.springbean.naming.service.MessagingService;
+
 @Controller
 public class MessagingController {
 

File: spring-boot-modules/spring-boot-annotations/src/main/java/com/baeldung/springbean/naming/service/MessagingServiceImpl.java
Patch:
@@ -1,10 +1,11 @@
 package com.baeldung.springbean.naming.service;
 
-import com.baeldung.springbean.naming.component.CustomComponent;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Service;
 
+import com.baeldung.springbean.naming.component.CustomComponent;
+
 @Service
 public class MessagingServiceImpl implements MessagingService {
 

File: spring-boot-modules/spring-boot-annotations/src/main/java/com/baeldung/springbean/naming/service/PetShow.java
Patch:
@@ -1,10 +1,11 @@
 package com.baeldung.springbean.naming.service;
 
-import com.baeldung.springbean.naming.component.Animal;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Service;
 
+import com.baeldung.springbean.naming.component.Animal;
+
 @Service
 public class PetShow {
 

File: spring-batch/src/test/java/com/baeldung/batchscheduler/SpringBatchSchedulerLiveTest.java
Patch:
@@ -15,7 +15,7 @@
 @SpringBootTest
 @DirtiesContext
 @PropertySource("classpath:application.properties")
-public class SpringBatchSchedulerIntegrationTest {
+public class SpringBatchSchedulerLiveTest {
 
     @Autowired
     private ApplicationContext context;

File: spring-batch/src/test/java/com/baeldung/bootbatch/SpringBootBatchIntegrationTest.java
Patch:
@@ -51,7 +51,7 @@ public void givenCoffeeList_whenJobExecuted_thenSuccess(CapturedOutput output) t
         assertEquals("importUserJob", jobInstance.getJobName());
         assertEquals("COMPLETED", jobExitStatus.getExitCode());
 
-        String regex = "\\[virtual-thread-executor\\d+\\] INFO  c.baeldung.batch.CoffeeItemProcessor";
+        String regex = "\\[virtual-thread-executor\\d+\\] INFO  com.baeldung.bootbatch.CoffeeItemProcessor";
         assertThat(output.getAll()).containsPattern(regex);
     }
 }

File: spring-reactive-modules/spring-reactive/src/main/java/com/baeldung/reactive/concurrency/Controller.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.reactive.concurrency;
 
-import io.reactivex.Observable;
+import io.reactivex.rxjava3.core.Observable;
+
 import org.apache.kafka.clients.consumer.ConsumerConfig;
 import org.apache.kafka.clients.producer.ProducerConfig;
 import org.apache.kafka.clients.producer.ProducerRecord;
@@ -66,7 +67,7 @@ public Flux<String> getThreadsWebClient() {
     public Observable<String> getIndexRxJava() {
         Observable.fromIterable(Arrays.asList("Hello", "World"))
           .map(s -> s.toUpperCase())
-          .observeOn(io.reactivex.schedulers.Schedulers.trampoline())
+          .observeOn(io.reactivex.rxjava3.schedulers.Schedulers.trampoline())
           .doOnNext(s -> logger.info("String: {}", s))
           .subscribe();
         return Observable.fromIterable(getThreads());

File: spring-reactive-modules/spring-reactive/src/test/java/com/baeldung/reactive/webflux/annotation/EmployeeControllerIntegrationTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.security.test.context.support.WithMockUser;
@@ -22,6 +23,7 @@
 import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;
 
 @SpringBootTest(webEnvironment = RANDOM_PORT, classes = EmployeeSpringApplication.class)
+@AutoConfigureMockMvc
 class EmployeeControllerIntegrationTest {
 
     @Autowired
@@ -62,7 +64,6 @@ void whenGetAllEmployees_thenCorrectEmployees() {
           .expectBodyList(Employee.class).isEqualTo(employeeList);
     }
 
-    @Disabled
     @Test
     @WithMockUser(username = "admin", roles = { "ADMIN" })
     void givenValidUser_whenUpdateEmployee_thenEmployeeUpdated() {
@@ -80,7 +81,6 @@ void givenValidUser_whenUpdateEmployee_thenEmployeeUpdated() {
         verify(employeeRepository).updateEmployee(employee);
     }
 
-    @Disabled
     @Test
     @WithMockUser
     void givenInvalidUser_whenUpdateEmployee_thenForbidden() {

File: core-java-modules/core-java-functional/src/test/java/com/baeldung/functional/MonadsUnitTest.java
Patch:
@@ -11,8 +11,8 @@ public class MonadsUnitTest {
     @Test
     public void testOptionalAdd() {
 
-        assertEquals(5, Monads.add(Optional.of(new Integer(2)), Optional.of(new Integer(3)))
-            .get());
+        assertEquals(Integer.valueOf(5),
+            Monads.add(Optional.of(2), Optional.of(3)).get());
 
     }
 

File: core-java-modules/core-java-functional/src/test/java/com/baeldung/functional/PureFunctionsUnitTets.java
Patch:
@@ -11,8 +11,7 @@ public class PureFunctionsUnitTets {
     @Test
     public void testSortingWithoutLambda() {
 
-        assertEquals(new Integer(18), PureFunctions.sum(Arrays.asList(new Integer(10), new Integer(8))));
-
+        assertEquals(Integer.valueOf(18), PureFunctions.sum(Arrays.asList(10, 8)));
     }
 
 }

File: core-java-modules/core-java-lambdas/src/test/java/com/baeldung/doublecolon/ComputerUtilsUnitTest.java
Patch:
@@ -65,7 +65,7 @@ public void testStaticMethodReference() {
         List<Computer> inventory = Arrays.asList(c1, c2, c3);
         inventory.forEach(ComputerUtils::repair);
 
-        Assert.assertEquals("Computer repaired", new Integer(100), c1.getHealty());
+        Assert.assertEquals("Computer repaired", Integer.valueOf(100), c1.getHealty());
     }
 
     @Test

File: core-java-modules/core-java-numbers-conversions/src/main/java/com/baeldung/bytetoint/ByteToIntConversion.java
Patch:
@@ -11,7 +11,7 @@ static int usingIntegerValueOf(byte b){
     }
 
     static int usingByteIntValue(byte b){
-        Byte byteObj = new Byte(b);
+        Byte byteObj = Byte.valueOf(b);
         return byteObj.intValue();
     }
 

File: core-java-modules/core-java-numbers-conversions/src/test/java/com/baeldung/inttolong/IntToLongUnitTest.java
Patch:
@@ -43,14 +43,14 @@ void whenIntegerUsingTheValueOf_thenGetTheExpectedLong() {
     @Test
     void whenUsingTheConstructor_thenGetTheExpectedLong() {
         int intTen = 10;
-        Long longTen = new Long(intTen);
+        Long longTen = Long.valueOf(intTen);
         assertEquals(intTen, longTen);
     }
 
     @Test
     void whenIntegerUsingTheLongConstructor_thenGetTheExpectedLong() {
         Integer integerTen = 10;
-        Long integerToLongTen = new Long(integerTen);
+        Long integerToLongTen = Long.valueOf(integerTen.longValue());
         assertEquals(integerTen.longValue(), integerToLongTen.longValue());
     }
 

File: persistence-modules/spring-data-jpa-simple/src/test/java/com/baeldung/jpa/projection/JpaProjectionIntegrationTest.java
Patch:
@@ -56,8 +56,8 @@ void whenUsingClassBasedProjectionsAndJPANativeQuery_thenDtoWithRequiredProperti
     @Test
     void whenUsingClassBasedProjections_thenDtoWithRequiredPropertiesIsReturned() {
         PersonDto personDto = personRepository.findByFirstName("John");
-        assertThat(personDto.getFirstName()).isEqualTo("John");
-        assertThat(personDto.getLastName()).isEqualTo("Doe");
+        assertThat(personDto.firstName()).isEqualTo("John");
+        assertThat(personDto.lastName()).isEqualTo("Doe");
     }
 
     @Test
@@ -68,6 +68,6 @@ void whenUsingDynamicProjections_thenObjectWithRequiredPropertiesIsReturned() {
 
         assertThat(person.getFirstName()).isEqualTo("John");
         assertThat(personView.getFirstName()).isEqualTo("John");
-        assertThat(personDto.getFirstName()).isEqualTo("John");
+        assertThat(personDto.firstName()).isEqualTo("John");
     }
 }

File: spring-web-modules/spring-rest-http-3/src/test/java/com/baeldung/zip/ZipArchiveControllerUnitTest.java
Patch:
@@ -43,6 +43,7 @@ void givenZipArchiveController_whenGetZipArchiveStream_thenExpectedArchiveShould
           .andReturn();
 
         MockHttpServletResponse response = result.getResponse();
+        Thread.sleep(1000);
 
         byte[] content = response.getContentAsByteArray();
 

File: libraries-apache-commons-2/src/test/java/com/baeldung/commons/ftp/FtpClientIntegrationTest.java
Patch:
@@ -55,7 +55,7 @@ public void givenRemoteFile_whenListingRemoteFiles_thenItIsContainedInList() thr
 
     @Test
     public void givenRemoteFile_whenDownloading_thenItIsOnTheLocalFilesystem() throws IOException {
-        ftpClient.downloadFile("/foobar.txt", "downloaded_buz.txt");
+        ftpClient.downloadFile("/data/foobar.txt", "downloaded_buz.txt");
 
         assertThat(new File("downloaded_buz.txt")).exists();
         new File("downloaded_buz.txt").delete(); // cleanup

File: mapstruct/src/main/java/com/baeldung/mapper/PersonMapper.java
Patch:
@@ -13,5 +13,6 @@ public interface PersonMapper {
     PersonMapper INSTANCE = Mappers.getMapper(PersonMapper.class);
     
     @Mapping(target = "id", source = "person.id", defaultExpression = "java(java.util.UUID.randomUUID().toString())")
+    @Mapping(target = "name", source = "person.name", defaultValue = "anonymous")
     PersonDTO personToPersonDTO(Person person);
 }

File: core-java-modules/core-java-classloader/src/test/java/com/baeldung/classloader/ClassloaderDelegationModelTest.java
Patch:
@@ -15,14 +15,14 @@
 import com.baeldung.classloader.internal.InternalClasspathResolver;
 import com.baeldung.classloader.internal.InternalJdkSupport;
 
-class LoadClassWithSameNameTwiceTest {
+class ClassloaderDelegationModelTest {
 
     private static final String CLASS_TO_LOAD = "com.google.common.base.Function";
 
     final Logger logger = LoggerFactory.getLogger(getClass());
 
     @Test
-    void givenURLClassLoader_whenChildOfAppClassLoader_willLoadNotNewInstanceOfClassWithSameName() throws ClassNotFoundException, IOException {
+    void givenURLClassLoader_whenChildOfAppClassLoader_thenWillLoadNotNewInstanceOfClassWithSameName() throws ClassNotFoundException, IOException {
         var scope = scope();
         var parent = getClass().getClassLoader();
 
@@ -36,7 +36,7 @@ void givenURLClassLoader_whenChildOfAppClassLoader_willLoadNotNewInstanceOfClass
     }
 
     @Test
-    void givenURLClassLoader_whenIsolatedFromAppClassLoader_willLoadNewInstanceOfClassWithSameName() throws ClassNotFoundException, IOException {
+    void givenURLClassLoader_whenIsolatedFromAppClassLoader_thenWillLoadNewInstanceOfClassWithSameName() throws ClassNotFoundException, IOException {
         var scope = scope();
         var parent = getClass().getClassLoader();
 

File: core-java-modules/core-java-classloader/src/test/java/com/baeldung/classloader/GetURLsFromClassloaderTest.java
Patch:
@@ -25,7 +25,7 @@ class GetURLsFromClassloaderTest {
     final Logger log = LoggerFactory.getLogger(getClass());
 
     @Test
-    void givenBasicResolver_willNotBeAbleToDetermineURLsFromApplicationClassLoader() {
+    void givenApplicationClassLoader_whenInspectingBasicResolver_thenURLsCannotBeDetermined() {
         var loader = getClass().getClassLoader();
 
         assumeFalse(loader instanceof URLClassLoader);
@@ -38,7 +38,7 @@ void givenBasicResolver_willNotBeAbleToDetermineURLsFromApplicationClassLoader()
     }
 
     @Test
-    void givenInternalResolver_willBeAbleToDetermineURLsFromApplicationClassLoader() {
+    void givenApplicationClassLoader_whenInspectingInternalResolver_thenURLsCanBeDetermined() {
         assumeTrue(InternalJdkSupport.available());
 
         var resolver = new InternalClasspathResolver();
@@ -52,7 +52,7 @@ void givenInternalResolver_willBeAbleToDetermineURLsFromApplicationClassLoader()
     }
 
     @Test
-    void givenRemoteClasspath_willBeAbleDetermineURLsFromCustomClassLoader() throws MalformedURLException {
+    void givenCustomClassLoader_whenInspectingInternalResolver_thenURLsCanBeDetermined() throws MalformedURLException {
         var url = URI.create("https://repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar")
             .toURL();
 

File: core-java-modules/core-java-classloader/src/test/java/com/baeldung/classloader/ScopedClassLoadingTest.java
Patch:
@@ -76,7 +76,7 @@ private Set<URL> createNarrowClasspath(Predicate<URL> filter) {
     }
 
     @Test
-    void givenForkedJVMWithNarrowClassPath_thenAccessWillBeLimitedToItsScope() throws InterruptedException, IOException {
+    void givenAForkedJVM_whenClassPathIsNarrowed_thenAccessWillBeLimitedToItsScope() throws InterruptedException, IOException {
         var scope = Pattern.compile("(test-classes|slf|logback)");
 
         var classpath = createNarrowClasspath(url -> scope.matcher(url.toString())
@@ -109,7 +109,7 @@ void givenForkedJVMWithNarrowClassPath_thenAccessWillBeLimitedToItsScope() throw
     }
 
     @Test
-    void givenInstancesCreatedInScopedClassLoader_thenAccessToFullClasspathIsNotPossible() throws InterruptedException, IOException,
+    void givenScopedClassLoader_whenClasspathIsNarrowed_thenAccessWillBeLimitedToItsScope() throws InterruptedException, IOException,
     ReflectiveOperationException {
         var thread = Thread.currentThread();
         var current = thread.getContextClassLoader();

File: spring-web-modules/spring-rest-http-3/src/main/java/com/baeldung/zip/ZipArchiveController.java
Patch:
@@ -64,7 +64,7 @@ public ResponseEntity<StreamingResponseBody> getZipSecuredStream() {
           });
     }
 
-    private void addFilesToArchive(net.lingala.zip4j.io.outputstream.ZipOutputStream zipOutputStream) throws IOException {
+    void addFilesToArchive(net.lingala.zip4j.io.outputstream.ZipOutputStream zipOutputStream) throws IOException {
         List<String> filesNames = new ArrayList<>();
         filesNames.add("first-file.txt");
         filesNames.add("second-file.txt");
@@ -76,7 +76,7 @@ private void addFilesToArchive(net.lingala.zip4j.io.outputstream.ZipOutputStream
 
         for (String fileName : filesNames) {
             File file = new File(ZipArchiveController.class.getClassLoader()
-                    .getResource(fileName).getFile());
+              .getResource(fileName).getFile());
 
             zipParameters.setFileNameInZip(file.getName());
             zipOutputStream.putNextEntry(zipParameters);
@@ -92,7 +92,7 @@ private void addFilesToArchive(net.lingala.zip4j.io.outputstream.ZipOutputStream
         IOUtils.closeQuietly(zipOutputStream);
     }
 
-    private void addFilesToArchive(ZipOutputStream zipOutputStream) throws IOException {
+    void addFilesToArchive(ZipOutputStream zipOutputStream) throws IOException {
         List<String> filesNames = new ArrayList<>();
         filesNames.add("first-file.txt");
         filesNames.add("second-file.txt");

File: xml/src/main/java/com/baeldung/xml/JaxenDemo.java
Patch:
@@ -1,5 +1,7 @@
 package com.baeldung.xml;
 
+import static com.baeldung.xml.SecureDocumentBuilderFactory.newSecureDocumentBuilderFactory;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -26,7 +28,7 @@ public JaxenDemo(File file) {
     public List getAllTutorial() {
         try {
             FileInputStream fileIS = new FileInputStream(this.getFile());
-            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
+            DocumentBuilderFactory builderFactory = newSecureDocumentBuilderFactory();
 
             DocumentBuilder builder = builderFactory.newDocumentBuilder();
 

File: core-java-modules/core-java-arrays-guides/src/test/java/com/baeldung/printarray/PrintArrayTest.java
Patch:
@@ -2,6 +2,8 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import org.junit.jupiter.api.Test;
 
+import com.baeldung.printarrays.PrintArrayJava;
+
 class PrintArrayTest {
 
     @Test

File: spring-5/src/main/java/com/baeldung/jsonb/Spring5JsonbApplication.java
Patch:
@@ -14,10 +14,10 @@
 
 @SpringBootApplication(exclude = SecurityAutoConfiguration.class)
 @ComponentScan(basePackages = { "com.baeldung.jsonb" })
-public class Spring5Application {
+public class Spring5JsonbApplication {
 
     public static void main(String[] args) {
-        SpringApplication.run(Spring5Application.class, args);
+        SpringApplication.run(Spring5JsonbApplication.class, args);
     }
 
     @Bean

File: spring-5/src/test/java/com/baeldung/jsonb/JsonbIntegrationTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.springframework.test.context.junit4.SpringRunner;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = Spring5Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+@SpringBootTest(classes = Spring5JsonbApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
 @Ignore
 public class JsonbIntegrationTest {
 

File: spring-boot-modules/spring-boot-logging-log4j2/src/test/java/com/baeldung/SpringContextTest.java
Patch:
@@ -5,10 +5,10 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.baeldung.springbootlogging.SpringBootLoggingApplication;
+import com.baeldung.syslog.SpringBootSyslogApplication;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = SpringBootLoggingApplication.class)
+@SpringBootTest(classes = SpringBootSyslogApplication.class)
 public class SpringContextTest {
 
     @Test

File: core-java-modules/core-java-lang-math-4/src/test/java/com/baeldung/math/percentdiffbetweentwonumberstest/PercentDiffBetweenTwoNumbersUnitTest.java
Patch:
@@ -59,7 +59,7 @@ void whenAverageIsZero_thenThrowIllegalArgumentException() {
         double v1 = -50.0;
         double v2 = 50.0;
         assertThrows(IllegalArgumentException.class, () -> PercentDiffBetweenTwoNumbers.calculatePercentageDifference(v1, v2),
-            "Should throw IllegalArgumentException when the average of V1 and V2 is zero.");
+            "Should throw IllegalArgumentException when the average of v1 and v2 is zero.");
     }
 
     @Test

File: vavr-modules/vavr/src/test/java/com/baeldung/vavr/future/FutureUnitTest.java
Patch:
@@ -175,7 +175,6 @@ public void whenFutureFails_thenGetAnotherFuture() {
           .isEqualTo("fallback value");
     }
 
-    @Disabled /** Failing in the default build, to fix in JAVA-39729 **/
     @Test
     public void whenBothFuturesFail_thenGetErrorMessage() {
         Future<String> f1 = Future.of(() -> "Hello".substring(-1));
@@ -186,6 +185,6 @@ public void whenBothFuturesFail_thenGetErrorMessage() {
 
         assertThat(
           errorMessage.get().getMessage())
-          .isEqualTo("begin -1, end 5, length 5");
+          .isEqualTo("Range [-1, 5) out of bounds for length 5");
     }
 }

File: apache-poi-3/src/test/java/com/baeldung/poi/excel/insert/multilinetext/MultilineTextUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.poi.excel.multilinetext;
+package com.baeldung.poi.excel.insert.multilinetext;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -10,6 +10,7 @@
 import java.net.URISyntaxException;
 import java.nio.file.Paths;
 
+import com.baeldung.poi.excel.multilinetext.MultilineText;
 import org.apache.poi.ss.usermodel.Cell;
 import org.apache.poi.ss.usermodel.DataFormatter;
 import org.apache.poi.ss.usermodel.Row;
@@ -20,7 +21,7 @@
 import org.junit.Test;
 
 public class MultilineTextUnitTest {
-    private static String FILE_NAME = "com/baeldung/poi/excel/multilinetext/MultilineTextTest.xlsx";
+    private static String FILE_NAME = "MultilineTextTest.xlsx";
     private static final String NEW_FILE_NAME = "MultilineTextTest_output.xlsx";
     private static final int STRING_ROW_INDEX = 1;
     private static final int STRING_CELL_INDEX = 0;

File: apache-poi-4/src/test/java/com/baeldung/poi/excel/cellstyle/CellStylerUnitTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Test;
 
 public class CellStylerUnitTest {
-    private static String FILE_NAME = "com/baeldung/poi/excel/cellstyle/CellStyle.xlsx";
+    private static String FILE_NAME = "cellstyle/CellStyle.xlsx";
     private static final String NEW_FILE_NAME = "CellStyleTest_output.xlsx";
     private String fileLocation;
 

File: apache-poi/src/test/java/com/baeldung/expandcolumn/ExpandColumnUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.poi.excel.expandcolumn;
+package com.baeldung.expandcolumn;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.*;

File: apache-poi/src/test/java/com/baeldung/word/WordIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.poi.word;
+package com.baeldung.word;
 
 import org.apache.poi.xwpf.usermodel.XWPFDocument;
 import org.apache.poi.xwpf.usermodel.XWPFParagraph;

File: persistence-modules/spring-data-rest-2/src/test/java/com/baeldung/pageentityresponse/EmployeeClientUnitTest.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.springframework.core.ParameterizedTypeReference;
@@ -21,6 +22,7 @@
 
 public class EmployeeClientUnitTest {
 
+  @Disabled /** Failing in the default build, to fix in JAVA-39728 **/
   @Test
   void givenRestTemplate_whenGetEmployeeDataFromExternalAPI_thenGetPageDataWithContents() {
     CustomPageImpl<EmployeeDto> mockedResponse = new CustomPageImpl<>(Arrays.asList(

File: vavr-modules/vavr/src/test/java/com/baeldung/vavr/future/FutureUnitTest.java
Patch:
@@ -5,6 +5,7 @@
 import io.vavr.control.Option;
 import io.vavr.control.Try;
 import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
 
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
@@ -174,6 +175,7 @@ public void whenFutureFails_thenGetAnotherFuture() {
           .isEqualTo("fallback value");
     }
 
+    @Disabled /** Failing in the default build, to fix in JAVA-39729 **/
     @Test
     public void whenBothFuturesFail_thenGetErrorMessage() {
         Future<String> f1 = Future.of(() -> "Hello".substring(-1));

File: persistence-modules/hibernate6/src/test/java/com/baeldung/sequencenaming/PersonRepositoryIntegrationTest.java
Patch:
@@ -28,7 +28,6 @@ public class PersonRepositoryIntegrationTest {
     private BookRepository bookRepository;
 
     @Test
-    @Disabled
     void givenNamingStrategy_whenSavingPerson_thenSequenceIsCreatedWithSpecifiedNamingStrategy() {
         // Change the naming strategy in properties file to see the differences.
 
@@ -42,7 +41,6 @@ void givenNamingStrategy_whenSavingPerson_thenSequenceIsCreatedWithSpecifiedNami
     }
 
     @Test
-    @Disabled
     void givenSingleNamingStrategy_whenSavingPersonAndBook_thenUsesSameSequenceForBoth() {
         // Change the naming strategy in properties file to see the differences.
 

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/dbview/ShopSaleRepositoryLiveTest.java
Patch:
@@ -16,8 +16,7 @@
         "spring.jpa.defer-datasource-initialization=true",
         "spring.sql.init.data-locations=classpath:shop-sale-data.sql"
 })
-@Disabled
-class ShopSaleRepositoryIntegrationTest {
+class ShopSaleRepositoryLiveTest {
 
     private static final ShopSaleCompositeId id = ShopSaleCompositeId.builder()
             .shopId(1)

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/dbview/ShopSaleVidRepositoryLiveTest.java
Patch:
@@ -16,8 +16,7 @@
         "spring.jpa.defer-datasource-initialization=true",
         "spring.sql.init.data-locations=classpath:shop-sale-data.sql"
 })
-@Disabled
-class ShopSaleVidRepositoryIntegrationTest {
+class ShopSaleVidRepositoryLiveTest {
 
     @Autowired
     private ShopSaleVidRepository shopSaleVidRepository;

File: algorithms-modules/algorithms-numeric/src/main/java/com/baeldung/algorithms/subarraysumzero/LargestSubarraySumZero.java
Patch:
@@ -30,7 +30,7 @@ public static int maxLenHashMap(int[] arr) {
 
             if (sum == 0) {
                 maxLength = i + 1;
-            }cd 
+            }
 
             if (map.containsKey(sum)) {
                 maxLength = Math.max(maxLength, i - map.get(sum));

File: microservices-modules/micronaut-configuration/src/test/java/com/baeldung/micronaut/httpfilters/FiltersOrderUnitTest.java
Patch:
@@ -19,7 +19,7 @@
 import io.restassured.specification.RequestSpecification;
 
 @MicronautTest
-class FiltersOrderTest {
+class FiltersOrderUnitTest {
 
     private ListAppender<ILoggingEvent> customFilterLogs;
     private ListAppender<ILoggingEvent> requestIDFilterLogs;

File: microservices-modules/micronaut-configuration/src/test/java/com/baeldung/micronaut/httpfilters/ServerApplicationUnitTest.java
Patch:
@@ -16,7 +16,7 @@
 import io.restassured.specification.RequestSpecification;
 
 @MicronautTest
-class ServerApplicationTest {
+class ServerApplicationUnitTest {
 
     private static final String FILTERED_ENDPOINTS_PATH = "micronaut-configuration-tutorials/filters-annotations";
 

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/OpenApiApplication.java
Patch:
@@ -1,12 +1,11 @@
-package com.baeldung.openapi;
+package com.baeldung;
 
-import org.jobrunr.autoconfigure.JobRunrAutoConfiguration;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
-@EnableAutoConfiguration(exclude = { JobRunrAutoConfiguration.class})
+@EnableAutoConfiguration
 public class OpenApiApplication {
 
     public static void main(String[] args) {

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/annotation/scanner/AnnotationScannerApp.java
Patch:
@@ -1,12 +1,11 @@
 package com.baeldung.annotation.scanner;
 
-import org.jobrunr.autoconfigure.JobRunrAutoConfiguration;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
-@EnableAutoConfiguration(exclude = { JobRunrAutoConfiguration.class})
+@EnableAutoConfiguration
 public class AnnotationScannerApp {
 
     public static void main(String[] args) {

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/jobrunr/JobRunrSpringBootApp.java
Patch:
@@ -1,13 +1,13 @@
 package com.baeldung.jobrunr;
 
 import com.baeldung.jobrunr.service.SampleJobService;
+import jakarta.annotation.PostConstruct;
 import org.jobrunr.scheduling.JobScheduler;
 import org.jobrunr.scheduling.cron.Cron;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
-import javax.annotation.PostConstruct;
 
 @SpringBootApplication
 public class JobRunrSpringBootApp {

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/kong/StockApp.java
Patch:
@@ -1,12 +1,12 @@
 package com.baeldung.kong;
 
-import org.jobrunr.autoconfigure.JobRunrAutoConfiguration;
+import org.jobrunr.spring.autoconfigure.JobRunrAutoConfiguration;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
-@EnableAutoConfiguration(exclude = { JobRunrAutoConfiguration.class})
+@EnableAutoConfiguration
 public class StockApp {
 
     public static void main(String[] args) {

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/modulith/Application.java
Patch:
@@ -2,15 +2,14 @@
 
 import com.baeldung.modulith.product.ProductService;
 import com.baeldung.modulith.product.internal.Product;
-import org.jobrunr.autoconfigure.JobRunrAutoConfiguration;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.scheduling.annotation.EnableAsync;
 
 @EnableAsync
 @SpringBootApplication
-@EnableAutoConfiguration(exclude = { JobRunrAutoConfiguration.class})
+@EnableAutoConfiguration
 public class Application {
 
     public static void main(String[] args) {

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/modulith/notification/NotificationService.java
Patch:
@@ -5,7 +5,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.modulith.ApplicationModuleListener;
-import org.springframework.scheduling.annotation.Async;
 import org.springframework.stereotype.Service;
 
 @Service

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/resilientapp/ExternalAPICaller.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.resilientapp;
 
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Component;
 import org.springframework.web.client.RestTemplate;
 
@@ -9,7 +10,7 @@ public class ExternalAPICaller {
     private final RestTemplate restTemplate;
 
     @Autowired
-    public ExternalAPICaller(RestTemplate restTemplate) {
+    public ExternalAPICaller(@Qualifier("default") RestTemplate restTemplate) {
         this.restTemplate = restTemplate;
     }
 

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/resilientapp/ExternalApiCallerConfig.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.resilientapp;
 
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.web.client.RestTemplateBuilder;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -8,6 +9,7 @@
 @Configuration
 public class ExternalApiCallerConfig {
 @Bean
+@Qualifier("default")
 public RestTemplate restTemplate() {
     return new RestTemplateBuilder().rootUri("http://localhost:9090")
         .build();

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/resilientapp/ResilientApp.java
Patch:
@@ -1,10 +1,9 @@
 package com.baeldung.resilientapp;
 
-import org.jobrunr.autoconfigure.JobRunrAutoConfiguration;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
-@SpringBootApplication(exclude = { JobRunrAutoConfiguration.class})
+@SpringBootApplication
 public class ResilientApp {
 
     public static void main(String[] args) {

File: spring-boot-modules/spring-boot-libraries-2/src/test/java/com/baeldung/jobrunr/JobRunrLiveTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.jobrunr;
 
 import org.jobrunr.jobs.states.StateName;
+import org.jobrunr.storage.PageRequest;
 import org.jobrunr.storage.StorageProvider;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -31,7 +32,7 @@ public void givenEndpoint_whenJobEnqueued_thenJobIsProcessedWithin30Seconds() {
         String response = enqueueJobViaRest("some-input");
         assertEquals("job enqueued successfully", response);
 
-        await().atMost(30, TimeUnit.SECONDS).until(() -> storageProvider.countJobs(StateName.SUCCEEDED) == 1);
+        await().atMost(30, TimeUnit.SECONDS).until(() -> storageProvider.getJobs(StateName.SUCCEEDED, PageRequest.ascOnUpdatedAt(1)).size() == 1);
     }
 
     private String enqueueJobViaRest(String input) {

File: spring-boot-modules/spring-boot-libraries-2/src/test/java/com/baeldung/resilientapp/ResilientAppControllerManualTest.java
Patch:
@@ -7,7 +7,6 @@
 import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 import static org.junit.jupiter.api.Assertions.*;
-import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import static org.springframework.http.HttpStatus.BANDWIDTH_LIMIT_EXCEEDED;
 import static org.springframework.http.HttpStatus.OK;

File: docker-modules/docker-multi-module-maven/domain/src/main/java/com/baeldung/domain/CountryRepository.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.domain;
 
-import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.repository.CrudRepository;
 import org.springframework.stereotype.Repository;
 

File: quarkus-modules/quarkus-funqy/src/test/java/com/baeldung/quarkus/MyFunctionsUnitTest.java
Patch:
@@ -3,6 +3,7 @@
 import io.quarkus.test.junit.QuarkusTest;
 import io.restassured.RestAssured;
 import io.restassured.http.ContentType;
+import org.junit.Ignore;
 import org.junit.jupiter.api.Test;
 
 import static io.restassured.RestAssured.given;
@@ -14,6 +15,7 @@
 public class MyFunctionsUnitTest {
 
     @Test
+    @Ignore
     public void givenFunctionAPI_whenCallWithoutBody_thenShouldReturnDefault() {
         given()
             .post("/GreetUser")

File: core-java-modules/core-java-console/src/test/java/com/baeldung/systemin/SystemInReadUnitTest.java
Patch:
@@ -11,12 +11,12 @@
 public class SystemInReadUnitTest {
     @Test
     void givenUserInput_whenUsingReadMultipleCharacters_thenRead() {
-        System.setIn(new ByteArrayInputStream("Hello\n".getBytes()));
+        System.setIn(new ByteArrayInputStream(("Hello" + System.lineSeparator() + "").getBytes()));
         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
         System.setOut(new PrintStream(outputStream));
         SystemInRead.readMultipleCharacters();
 
-        assertEquals("Enter characters (Press 'Enter' to quit):\n" + "Hello", outputStream.toString().trim());
+        assertEquals("Enter characters (Press 'Enter' to quit):" + System.lineSeparator() + "Hello", outputStream.toString().trim());
     }
 
     @Test
@@ -26,7 +26,7 @@ void givenUserInput_whenUsingReadSingleCharacter_thenRead() {
         System.setOut(new PrintStream(outputStream));
         SystemInRead.readSingleCharacter();
 
-        assertEquals("Enter a character:\nA", outputStream.toString().trim());
+        assertEquals("Enter a character:" + System.lineSeparator() + "A", outputStream.toString().trim());
     }
 
     @Test

File: core-java-modules/core-java-lang-math-4/src/test/java/com/baeldung/math/percentdiffbetweentwonumberstest/PercentDiffBetweenTwoNumbersUnitTest.java
Patch:
@@ -59,7 +59,7 @@ void whenAverageIsZero_thenThrowIllegalArgumentException() {
         double v1 = -50.0;
         double v2 = 50.0;
         assertThrows(IllegalArgumentException.class, () -> PercentDiffBetweenTwoNumbers.calculatePercentageDifference(v1, v2),
-            "Should throw IllegalArgumentException when the average of V1 and V2 is zero.");
+            "Should throw IllegalArgumentException when the average of v1 and v2 is zero.");
     }
 
     @Test

File: jhipster-6/bookstore-monolith/src/main/java/com/baeldung/jhipster6/aop/logging/LoggingAspect.java
Patch:
@@ -43,9 +43,9 @@ public void springBeanPointcut() {
     /**
      * Pointcut that matches all Spring beans in the application's main packages.
      */
-    @Pointcut("within(com.baeldung.jhipster5.repository..*)"+
-        " || within(com.baeldung.jhipster5.service..*)"+
-        " || within(com.baeldung.jhipster5.web.rest..*)")
+    @Pointcut("within(com.baeldung.jhipster6.repository..*)"+
+        " || within(com.baeldung.jhipster6.service..*)"+
+        " || within(com.baeldung.jhipster6.web.rest..*)")
     public void applicationPackagePointcut() {
         // Method is empty as this is just a Pointcut, the implementations are in the advices.
     }

File: jhipster-6/bookstore-monolith/src/main/java/com/baeldung/jhipster6/config/AsyncConfiguration.java
Patch:
@@ -9,6 +9,7 @@
 import org.springframework.aop.interceptor.SimpleAsyncUncaughtExceptionHandler;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.core.task.TaskExecutor;
 import org.springframework.scheduling.annotation.*;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
 import org.springframework.scheduling.annotation.SchedulingConfigurer;
@@ -32,7 +33,7 @@ public AsyncConfiguration(JHipsterProperties jHipsterProperties) {
 
     @Override
     @Bean(name = "taskExecutor")
-    public Executor getAsyncExecutor() {
+    public TaskExecutor getAsyncExecutor() {
         log.debug("Creating Async Task Executor");
         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
         executor.setCorePoolSize(jHipsterProperties.getAsync().getCorePoolSize());

File: jhipster-6/bookstore-monolith/src/main/java/com/baeldung/jhipster6/config/DatabaseConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import java.sql.SQLException;
 
 @Configuration
-@EnableJpaRepositories("com.baeldung.jhipster5.repository")
+@EnableJpaRepositories("com.baeldung.jhipster6.repository")
 @EnableJpaAuditing(auditorAwareRef = "springSecurityAuditorAware")
 @EnableTransactionManagement
 public class DatabaseConfiguration {

File: jhipster-6/bookstore-monolith/src/test/java/com/baeldung/jhipster6/config/WebConfigurerUnitTest.java
Patch:
@@ -58,7 +58,6 @@ public void testStartUpProdServletContext() throws ServletException {
         webConfigurer.onStartup(servletContext);
 
         verify(servletContext).addFilter(eq("cachingHttpHeadersFilter"), any(CachingHttpHeadersFilter.class));
-        verify(servletContext, never()).addServlet(eq("H2Console"), any(WebServlet.class));
     }
 
     @Test
@@ -67,7 +66,6 @@ public void testStartUpDevServletContext() throws ServletException {
         webConfigurer.onStartup(servletContext);
 
         verify(servletContext, never()).addFilter(eq("cachingHttpHeadersFilter"), any(CachingHttpHeadersFilter.class));
-        verify(servletContext).addServlet(eq("H2Console"), any(WebServlet.class));
     }
 //
 //    @Test

File: jhipster-6/bookstore-monolith/src/test/java/com/baeldung/jhipster6/web/rest/UserResourceIT.java
Patch:
@@ -471,7 +471,7 @@ public void deleteUser() throws Exception {
         // Delete the user
         restUserMockMvc.perform(delete("/api/users/{login}", user.getLogin())
             .accept(TestUtil.APPLICATION_JSON_UTF8))
-            .andExpect(status().isNoContent());
+            .andExpect(status().is2xxSuccessful());
 
         // Validate the database is empty
         List<User> userList = userRepository.findAll();

File: apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.poi.excel;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.io.IOException;
 import java.net.URISyntaxException;
@@ -11,6 +11,7 @@
 import org.apache.poi.ss.usermodel.Workbook;
 import org.apache.poi.xssf.usermodel.XSSFWorkbook;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 class ExcelCellFormatterUnitTest {

File: patterns-modules/clean-architecture/src/main/java/com/baeldung/pattern/cleanarchitecture/usercreation/UserDataMapper.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.time.LocalDateTime;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
-import javax.persistence.Table;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
 
 @Entity
 @Table(name = "user")

File: patterns-modules/design-patterns-architectural/src/test/java/com/baeldung/dtopattern/api/UserControllerIntegrationTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.web.client.TestRestTemplate;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 
 import java.util.Collections;
 

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/ignorable/fields/User.java
Patch:
@@ -3,7 +3,7 @@
 import java.io.Serializable;
 import java.util.StringJoiner;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 @Table(name = "Users")

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/IdGeneration/UserService.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.jpa.IdGeneration;
 
-import javax.persistence.EntityManager;
-import javax.transaction.Transactional;
+import jakarta.persistence.EntityManager;
+import jakarta.transaction.Transactional;
 
 public class UserService {
 

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/equality/EqualByBusinessKey.java
Patch:
@@ -1,12 +1,12 @@
 package com.baeldung.jpa.equality;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 public class EqualByBusinessKey {
 
     @Id
-    @GeneratedValue(strategy = GenerationType.AUTO)
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
 
     private String email;

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/equality/EqualById.java
Patch:
@@ -1,12 +1,12 @@
 package com.baeldung.jpa.equality;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 public class EqualById {
 
     @Id
-    @GeneratedValue(strategy = GenerationType.AUTO)
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
 
     private String email;
@@ -30,7 +30,6 @@ public void setEmail(String email) {
         this.email = email;
     }
 
-
     @Override
     public int hashCode() {
         final int prime = 31;

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/equality/EqualByJavaDefault.java
Patch:
@@ -1,12 +1,12 @@
 package com.baeldung.jpa.equality;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 public class EqualByJavaDefault implements Cloneable{
 
     @Id
-    @GeneratedValue(strategy = GenerationType.AUTO)
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
 
     private String email;

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/hibernateunproxy/CreditCardPayment.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jpa.hibernateunproxy;
 
-import javax.persistence.Entity;
+import jakarta.persistence.Entity;
 import java.math.BigDecimal;
 
 @Entity

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/postgresql_schema/Product.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.jpa.postgresql_schema;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
-import javax.persistence.Table;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
 
 @Entity
 @Table(name = "product", schema = "store")

File: persistence-modules/java-jpa-3/src/test/java/com/baeldung/ignorable/fields/TransientFieldUnitTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.datatype.hibernate5.Hibernate5Module;
+import com.fasterxml.jackson.datatype.hibernate6.Hibernate6Module;
 import org.junit.Test;
 
 import java.io.File;
@@ -68,7 +68,7 @@ public void givenFieldWithTransientAnnotation_whenSerializingToJSON_thenFieldSer
     @Test
     public void givenJacksonHibernate5Module_whenSerializingTransientAnnotation_thenFieldIgnored() throws JsonProcessingException {
         ObjectMapper objectMapper = new ObjectMapper();
-        objectMapper.registerModule(new Hibernate5Module());
+        objectMapper.registerModule(new Hibernate6Module());
         String json = objectMapper.writeValueAsString(user);
         User savedUser = objectMapper.readValue(json, User.class);
 

File: persistence-modules/java-jpa-3/src/test/java/com/baeldung/jpa/IdGeneration/IdGenerationIntegrationTest.java
Patch:
@@ -4,9 +4,9 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 import java.util.UUID;
 
 public class IdGenerationIntegrationTest {

File: persistence-modules/java-jpa-3/src/test/java/com/baeldung/jpa/equality/EqualityUnitTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.jpa.equality;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 
 import org.junit.Assert;
 import org.junit.BeforeClass;

File: persistence-modules/java-jpa-3/src/test/java/com/baeldung/jpa/postgresql_schema/PostgresqlSchemaLiveTest.java
Patch:
@@ -5,9 +5,9 @@
 import org.junit.Test;
 import org.postgresql.ds.PGSimpleDataSource;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.ResultSet;

File: persistence-modules/java-jpa-3/src/test/java/com/baeldung/jpa/returnmultipleentities/ReturnMultipleEntitiesIntegrationTest.java
Patch:
@@ -3,9 +3,9 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;

File: persistence-modules/jpa-hibernate-cascade-type/src/main/java/com/baeldung/cascading/domain/Address.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.cascading.domain;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 public class Address {

File: persistence-modules/jpa-hibernate-cascade-type/src/main/java/com/baeldung/cascading/domain/Person.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.cascading.domain;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 import java.util.List;
 
 @Entity

File: spring-ai-2/src/main/java/com/baeldung/airag/service/ChatBotService.java
Patch:
@@ -6,11 +6,13 @@
 import org.springframework.ai.chat.prompt.PromptTemplate;
 import org.springframework.ai.document.Document;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Service;
 
 @Service
 public class ChatBotService {
     @Autowired
+    @Qualifier("openAiChatModel")
     private ChatModel chatClient;
     @Autowired
     private DataRetrievalService dataRetrievalService;

File: spring-security-modules/spring-security-ldap/src/main/java/com/baeldung/ldap/javaconfig/AppConfig.java
Patch:
@@ -25,7 +25,7 @@ public class AppConfig {
     @Bean
     public LdapContextSource contextSource() {
         LdapContextSource contextSource = new LdapContextSource();
-        contextSource.setUrl(env.getRequiredProperty("ldap.url"));
+        contextSource.setUrl(env.getRequiredProperty("ldap.urls"));
         contextSource.setBase(env.getRequiredProperty("ldap.partitionSuffix"));
         contextSource.setUserDn(env.getRequiredProperty("ldap.principal"));
         contextSource.setPassword(env.getRequiredProperty("ldap.password"));

File: spring-security-modules/spring-security-ldap/src/test/java/com/baeldung/ldap/javaconfig/TestConfig.java
Patch:
@@ -41,7 +41,7 @@ public TestContextSourceFactoryBean testContextSource() {
     @Bean
     public LdapContextSource contextSource() {
         LdapContextSource contextSource = new LdapContextSource();
-        contextSource.setUrl(env.getRequiredProperty("ldap.url"));
+        contextSource.setUrl(env.getRequiredProperty("ldap.urls"));
         contextSource.setBase(env.getRequiredProperty("ldap.partitionSuffix"));
         contextSource.setUserDn(env.getRequiredProperty("ldap.principal"));
         contextSource.setPassword(env.getRequiredProperty("ldap.password"));

File: spring-vault/src/main/java/com/baeldung/springvault/SpringVaultApplication.java
Patch:
@@ -2,12 +2,14 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.vault.repository.configuration.EnableVaultRepositories;
 
 /**
  * Sample application to demonstrate basics of Spring Vault
  *
  */
 @SpringBootApplication
+@EnableVaultRepositories
 public class SpringVaultApplication {
 
     public static void main(String[] args) {

File: spring-web-modules/spring-mvc-forms-jsp/src/main/java/com/baeldung/springmvcforms/configuration/WebInitializer.java
Patch:
@@ -5,9 +5,9 @@
 import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
 import org.springframework.web.servlet.DispatcherServlet;
 
-import javax.servlet.ServletContext;
-import javax.servlet.ServletException;
-import javax.servlet.ServletRegistration;
+import jakarta.servlet.ServletContext;
+import jakarta.servlet.ServletException;
+import jakarta.servlet.ServletRegistration;
 
 public class WebInitializer implements WebApplicationInitializer {
 

File: spring-web-modules/spring-mvc-forms-jsp/src/main/java/com/baeldung/springmvcforms/controller/FileUploadController.java
Patch:
@@ -4,8 +4,8 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;

File: spring-web-modules/spring-mvc-forms-jsp/src/main/java/com/baeldung/springmvcforms/interceptor/FileUploadExceptionAdvice.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.springmvcforms.interceptor;
 
 import org.springframework.web.servlet.ModelAndView;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
 import org.springframework.web.multipart.MaxUploadSizeExceededException;
 import org.springframework.web.bind.annotation.ControllerAdvice;
 import org.springframework.web.bind.annotation.ExceptionHandler;

File: spring-vault/src/main/java/com/baeldung/springvault/SpringVaultApplication.java
Patch:
@@ -2,12 +2,14 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.vault.repository.configuration.EnableVaultRepositories;
 
 /**
  * Sample application to demonstrate basics of Spring Vault
  *
  */
 @SpringBootApplication
+@EnableVaultRepositories
 public class SpringVaultApplication {
 
     public static void main(String[] args) {

File: spring-security-modules/spring-security-ldap/src/main/java/com/baeldung/ldap/javaconfig/AppConfig.java
Patch:
@@ -25,7 +25,7 @@ public class AppConfig {
     @Bean
     public LdapContextSource contextSource() {
         LdapContextSource contextSource = new LdapContextSource();
-        contextSource.setUrl(env.getRequiredProperty("ldap.url"));
+        contextSource.setUrl(env.getRequiredProperty("ldap.urls"));
         contextSource.setBase(env.getRequiredProperty("ldap.partitionSuffix"));
         contextSource.setUserDn(env.getRequiredProperty("ldap.principal"));
         contextSource.setPassword(env.getRequiredProperty("ldap.password"));

File: spring-security-modules/spring-security-ldap/src/test/java/com/baeldung/ldap/javaconfig/TestConfig.java
Patch:
@@ -41,7 +41,7 @@ public TestContextSourceFactoryBean testContextSource() {
     @Bean
     public LdapContextSource contextSource() {
         LdapContextSource contextSource = new LdapContextSource();
-        contextSource.setUrl(env.getRequiredProperty("ldap.url"));
+        contextSource.setUrl(env.getRequiredProperty("ldap.urls"));
         contextSource.setBase(env.getRequiredProperty("ldap.partitionSuffix"));
         contextSource.setUserDn(env.getRequiredProperty("ldap.principal"));
         contextSource.setPassword(env.getRequiredProperty("ldap.password"));

File: spring-ai-2/src/main/java/com/baeldung/airag/service/ChatBotService.java
Patch:
@@ -6,11 +6,13 @@
 import org.springframework.ai.chat.prompt.PromptTemplate;
 import org.springframework.ai.document.Document;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Service;
 
 @Service
 public class ChatBotService {
     @Autowired
+    @Qualifier("openAiChatModel")
     private ChatModel chatClient;
     @Autowired
     private DataRetrievalService dataRetrievalService;

File: patterns-modules/clean-architecture/src/main/java/com/baeldung/pattern/cleanarchitecture/usercreation/UserDataMapper.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.time.LocalDateTime;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
-import javax.persistence.Table;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
 
 @Entity
 @Table(name = "user")

File: patterns-modules/design-patterns-architectural/src/test/java/com/baeldung/dtopattern/api/UserControllerIntegrationTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.web.client.TestRestTemplate;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 
 import java.util.Collections;
 

File: apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.poi.excel;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.io.IOException;
 import java.net.URISyntaxException;
@@ -11,6 +11,7 @@
 import org.apache.poi.ss.usermodel.Workbook;
 import org.apache.poi.xssf.usermodel.XSSFWorkbook;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 class ExcelCellFormatterUnitTest {

File: core-java-modules/core-java-arrays-operations-basic/src/main/java/com/baeldung/fillarraywithrandomnumbers/SeedExample.java
Patch:
@@ -11,7 +11,7 @@ public static void main(String[] args) {
         int UPPER_BOUND = 100;
         int ARRAY_SIZE = 10;
 
-        // Produce identical elements repeatably
+        // Produce identical elements repeatedly
         int arr[] = new Random(12345).ints(ARRAY_SIZE, LOWER_BOUND, UPPER_BOUND).toArray();
 
         int arr2[] = new Random(12345).ints(ARRAY_SIZE, LOWER_BOUND, UPPER_BOUND).toArray();

File: jhipster-6/bookstore-monolith/src/main/java/com/baeldung/jhipster6/aop/logging/LoggingAspect.java
Patch:
@@ -43,9 +43,9 @@ public void springBeanPointcut() {
     /**
      * Pointcut that matches all Spring beans in the application's main packages.
      */
-    @Pointcut("within(com.baeldung.jhipster5.repository..*)"+
-        " || within(com.baeldung.jhipster5.service..*)"+
-        " || within(com.baeldung.jhipster5.web.rest..*)")
+    @Pointcut("within(com.baeldung.jhipster6.repository..*)"+
+        " || within(com.baeldung.jhipster6.service..*)"+
+        " || within(com.baeldung.jhipster6.web.rest..*)")
     public void applicationPackagePointcut() {
         // Method is empty as this is just a Pointcut, the implementations are in the advices.
     }

File: jhipster-6/bookstore-monolith/src/main/java/com/baeldung/jhipster6/config/AsyncConfiguration.java
Patch:
@@ -9,6 +9,7 @@
 import org.springframework.aop.interceptor.SimpleAsyncUncaughtExceptionHandler;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.core.task.TaskExecutor;
 import org.springframework.scheduling.annotation.*;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
 import org.springframework.scheduling.annotation.SchedulingConfigurer;
@@ -32,7 +33,7 @@ public AsyncConfiguration(JHipsterProperties jHipsterProperties) {
 
     @Override
     @Bean(name = "taskExecutor")
-    public Executor getAsyncExecutor() {
+    public TaskExecutor getAsyncExecutor() {
         log.debug("Creating Async Task Executor");
         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
         executor.setCorePoolSize(jHipsterProperties.getAsync().getCorePoolSize());

File: jhipster-6/bookstore-monolith/src/main/java/com/baeldung/jhipster6/config/DatabaseConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import java.sql.SQLException;
 
 @Configuration
-@EnableJpaRepositories("com.baeldung.jhipster5.repository")
+@EnableJpaRepositories("com.baeldung.jhipster6.repository")
 @EnableJpaAuditing(auditorAwareRef = "springSecurityAuditorAware")
 @EnableTransactionManagement
 public class DatabaseConfiguration {

File: jhipster-6/bookstore-monolith/src/test/java/com/baeldung/jhipster6/config/WebConfigurerUnitTest.java
Patch:
@@ -58,7 +58,6 @@ public void testStartUpProdServletContext() throws ServletException {
         webConfigurer.onStartup(servletContext);
 
         verify(servletContext).addFilter(eq("cachingHttpHeadersFilter"), any(CachingHttpHeadersFilter.class));
-        verify(servletContext, never()).addServlet(eq("H2Console"), any(WebServlet.class));
     }
 
     @Test
@@ -67,7 +66,6 @@ public void testStartUpDevServletContext() throws ServletException {
         webConfigurer.onStartup(servletContext);
 
         verify(servletContext, never()).addFilter(eq("cachingHttpHeadersFilter"), any(CachingHttpHeadersFilter.class));
-        verify(servletContext).addServlet(eq("H2Console"), any(WebServlet.class));
     }
 //
 //    @Test

File: jhipster-6/bookstore-monolith/src/test/java/com/baeldung/jhipster6/web/rest/UserResourceIT.java
Patch:
@@ -471,7 +471,7 @@ public void deleteUser() throws Exception {
         // Delete the user
         restUserMockMvc.perform(delete("/api/users/{login}", user.getLogin())
             .accept(TestUtil.APPLICATION_JSON_UTF8))
-            .andExpect(status().isNoContent());
+            .andExpect(status().is2xxSuccessful());
 
         // Validate the database is empty
         List<User> userList = userRepository.findAll();

File: patterns-modules/vertical-slice-architecture/src/main/java/com/baeldung/verticalslices/author/usecases/ManageArticlesController.java
Patch:
@@ -4,6 +4,7 @@
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
@@ -34,7 +35,7 @@ void deleteArticle(@PathVariable String slug) {
         deleteArticle.delete(slug);
     }
 
-    @DeleteMapping("/{slug}")
+    @GetMapping("/{slug}")
     void viewArticle(@PathVariable String slug) {
         viewArticle.view(slug);
     }

File: patterns-modules/vertical-slice-architecture/src/main/java/com/baeldung/verticalslices/author/usecases/ManageArticlesController.java
Patch:
@@ -4,6 +4,7 @@
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
@@ -34,7 +35,7 @@ void deleteArticle(@PathVariable String slug) {
         deleteArticle.delete(slug);
     }
 
-    @DeleteMapping("/{slug}")
+    @GetMapping("/{slug}")
     void viewArticle(@PathVariable String slug) {
         viewArticle.view(slug);
     }

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/BoundaryCitrusLiveTest.java
Patch:
@@ -24,7 +24,7 @@
 @QuarkusTest
 @CitrusSupport
 @CitrusConfiguration(classes = { BoundaryCitrusConfig.class })
-class BoundaryCitrusIntegrationTest {
+class BoundaryCitrusLiveTest {
 
     @CitrusEndpoint(name = BoundaryCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/BoundaryOpenApiCitrusLiveTest.java
Patch:
@@ -23,7 +23,7 @@
 @QuarkusTest
 @CitrusSupport
 @CitrusConfiguration(classes = { BoundaryOpenApiCitrusConfig.class })
-class BoundaryOpenApiCitrusIntegrationTest {
+class BoundaryOpenApiCitrusLiveTest {
 
     @CitrusEndpoint(name = BoundaryOpenApiCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/MessagingCitrusLiveTest.java
Patch:
@@ -27,7 +27,7 @@
 @QuarkusTest
 @CitrusSupport
 @CitrusConfiguration(classes = { BoundaryCitrusConfig.class, KafkaCitrusConfig.class, EmbeddedKafkaCitrusConfig.class })
-class MessagingCitrusIntegrationTest {
+class MessagingCitrusLiveTest {
 
     @CitrusEndpoint(name = KafkaCitrusConfig.TODOS_EVENTS_TOPIC)
     KafkaEndpoint todosEvents;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/PersistenceCitrusLiveTest.java
Patch:
@@ -25,7 +25,7 @@
 @QuarkusTest
 @CitrusSupport
 @CitrusConfiguration(classes = { BoundaryCitrusConfig.class })
-class PersistenceCitrusIntegrationTest {
+class PersistenceCitrusLiveTest {
 
     @CitrusEndpoint(name = BoundaryCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: spring-cloud-modules/spring-cloud-bootstrap/config/src/main/java/com/baeldung/spring/cloud/bootstrap/config/SecurityConfig.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.spring.cloud.bootstrap.config;
 
-import org.apache.commons.configuration.AbstractConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.Customizer;

File: spring-cloud-modules/spring-cloud-bootstrap/gateway/src/main/java/com/baeldung/spring/cloud/bootstrap/gateway/SecurityConfig.java
Patch:
@@ -42,9 +42,9 @@ public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http)
             .authenticationSuccessHandler(new RedirectServerAuthenticationSuccessHandler("/home/browser/index.html"))
             .and()
             .authorizeExchange()
-            .pathMatchers("/book-service/**", "/rating-service/**", "/login*", "/")
+            .pathMatchers("/book-service/**", "/login*", "/")
             .permitAll()
-            .pathMatchers("/eureka/**")
+            .pathMatchers("/rating-service/**")
             .hasRole("ADMIN")
             .anyExchange()
             .authenticated()

File: spring-cloud-modules/spring-cloud-bootstrap/gateway/src/main/java/com/baeldung/spring/cloud/bootstrap/gateway/controller/CombinedController.java
Patch:
@@ -23,7 +23,7 @@ public CombinedController(BooksClient booksClient, RatingsClient ratingsClient)
     }
 
     @GetMapping
-    public Book getCombinedResponse(@RequestParam Long bookId, @CookieValue("SESSION") String session){
+    public Book getCombinedResponse(@RequestParam("bookId") Long bookId, @CookieValue("SESSION") String session){
         Book book = booksClient.getBookById(bookId);
         List<Rating> ratings = ratingsClient.getRatingsByBookId(bookId, "SESSION="+session);
         book.setRatings(ratings);

File: spring-cloud-modules/spring-cloud-bootstrap/zipkin-log-svc-rating/src/main/java/com/baeldung/spring/cloud/bootstrap/svcrating/rating/RatingController.java
Patch:
@@ -35,17 +35,17 @@ public Rating createRating(@RequestBody Rating rating) {
     }
 
     @DeleteMapping("/{ratingId}")
-    public void deleteRating(@PathVariable Long ratingId) {
+    public void deleteRating(@PathVariable("ratingId") Long ratingId) {
         ratingService.deleteRating(ratingId);
     }
 
     @PutMapping("/{ratingId}")
-    public Rating updateRating(@RequestBody Rating rating, @PathVariable Long ratingId) {
+    public Rating updateRating(@RequestBody Rating rating, @PathVariable("ratingId") Long ratingId) {
         return ratingService.updateRating(rating, ratingId);
     }
 
     @PatchMapping("/{ratingId}")
-    public Rating updateRating(@RequestBody Map<String, String> updates, @PathVariable Long ratingId) {
+    public Rating updateRating(@RequestBody Map<String, String> updates, @PathVariable("ratingId") Long ratingId) {
         return ratingService.updateRating(updates, ratingId);
     }
 }

File: spring-boot-modules/spring-boot-react/src/main/java/com/baeldung/springbootreact/repository/ClientRepository.java
Patch:
@@ -2,6 +2,8 @@
 
 import com.baeldung.springbootreact.domain.Client;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
 
+@Repository
 public interface ClientRepository extends JpaRepository<Client, Long> {
 }

File: persistence-modules/java-jpa-4/src/test/java/com/baeldung/jpa/savechildobjects/SaveBidirectionalChildObjectsAutomaticallyIntegrationTest.java
Patch:
@@ -30,7 +30,7 @@ void givenParentWithMissedAnnotation_whenCreateEntityManagerFactory_thenPersiste
         PersistenceException exception = assertThrows(PersistenceException.class,
           () -> createEntityManagerFactory("jpa-savechildobjects-parent-without-relationship"));
         assertThat(exception)
-          .hasMessage("Could not determine recommended JdbcType for Java type 'com.baeldung.jpa.savechildobjects.BidirectionalChild'");
+            .hasMessage("Basic collection has element type 'com.baeldung.jpa.savechildobjects.BidirectionalChild' which is not a known basic type (attribute is not annotated '@ElementCollection', '@OneToMany', or '@ManyToMany')");
     }
 
     @Test

File: spring-security-modules/spring-security-web-rest/src/main/java/com/baeldung/removingroleprefix/config/CustomAuthorizationManager.java
Patch:
@@ -30,4 +30,4 @@ public AuthorizationDecision check(Supplier<Authentication> authentication,
 
         return new AuthorizationDecision(false);
     }
-}
\ No newline at end of file
+}

File: spring-security-modules/spring-security-web-rest/src/main/java/com/baeldung/removingroleprefix/config/MethodSecurityJavaConfig.java
Patch:
@@ -14,4 +14,4 @@ public class MethodSecurityJavaConfig {
     GrantedAuthorityDefaults grantedAuthorityDefaults() {
         return new GrantedAuthorityDefaults("");
     }
-}
\ No newline at end of file
+}

File: persistence-modules/spring-data-jpa-simple/src/test/java/com/baeldung/jpa/projection/JpaProjectionIntegrationTest.java
Patch:
@@ -50,7 +50,7 @@ void whenUsingOpenProjections_thenViewWithRequiredPropertiesIsReturned() {
     void whenUsingClassBasedProjectionsAndJPANativeQuery_thenDtoWithRequiredPropertiesIsReturned() {
         List<PersonDto> personDtos = personRepository.findByFirstNameLike("Jo%");
         assertThat(personDtos.size()).isEqualTo(2);
-        assertThat(personDtos).isEqualTo(Arrays.asList(new PersonDto("John", "Doe"), new PersonDto("Job", "Doe")));
+        assertThat(personDtos).isEqualTo(Arrays.asList(new PersonDto("John", "Doe"), new PersonDto("Job", "Dob")));
     }
 
     @Test

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/modulith/notification/NotificationService.java
Patch:
@@ -19,7 +19,6 @@ public void createNotification(NotificationDTO notificationDTO) {
           , notification.getDate(), notification.getFormat());
     }
 
-    @Async
     @ApplicationModuleListener
     public void notificationEvent(NotificationDTO event) {
         Notification notification = toEntity(event);

File: spring-security-modules/spring-security-authorization/spring-security-annotation-template-parameter/src/main/java/com/baeldung/model/Message.java
Patch:
@@ -0,0 +1,3 @@
+package com.baeldung.model;
+
+public record Message(int id, String message) {}

File: saas-modules/twilio-whatsapp/src/main/java/com/baeldung/twilio/whatsapp/WhatsappMessageDispatcher.java
Patch:
@@ -35,7 +35,7 @@ public void dispatchReplyMessage(String phoneNumber, String username) {
         PhoneNumber toPhoneNumber = new PhoneNumber(String.format("whatsapp:%s", phoneNumber));
 
         String message = String.format("Hey %s, our team will get back to you shortly.", username);
-        Message.creator(toPhoneNumber, messagingSid, message);
+        Message.creator(toPhoneNumber, messagingSid, message).create();
     }
 
 }

File: saas-modules/twilio-whatsapp/src/main/java/com/baeldung/twilio/whatsapp/WhatsappMessageDispatcher.java
Patch:
@@ -26,7 +26,8 @@ public void dispatchNewArticleNotification(String phoneNumber, String articleUrl
 
         Message.creator(toPhoneNumber, messagingSid, "")
           .setContentSid(contentSid)
-          .setContentVariables(contentVariables.toString()).create();
+          .setContentVariables(contentVariables.toString())
+          .create();
     }
 
     public void dispatchReplyMessage(String phoneNumber, String username) {

File: saas-modules/twilio-whatsapp/src/main/java/com/baeldung/twilio/whatsapp/Application.java
Patch:
@@ -6,8 +6,8 @@
 @SpringBootApplication
 public class Application {
 
-	public static void main(String[] args) {
-		SpringApplication.run(Application.class, args);
-	}
+    public static void main(String[] args) {
+        SpringApplication.run(Application.class, args);
+    }
 
 }

File: spring-ai/src/main/java/com/baeldung/springai/dto/HealthStatus.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.ai.dto;
+package com.baeldung.springai.dto;
 
 import java.time.LocalDate;
 

File: spring-ai/src/main/java/com/baeldung/springai/dto/Patient.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.ai.dto;
+package com.baeldung.springai.dto;
 
 public record Patient(String patientId) {
 }

File: spring-ai/src/main/java/com/baeldung/springai/service/impl/PoetryServiceImpl.java
Patch:
@@ -7,6 +7,7 @@
 import org.springframework.ai.chat.prompt.PromptTemplate;
 import org.springframework.ai.converter.BeanOutputConverter;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Service;
 
 @Service
@@ -18,7 +19,7 @@ public class PoetryServiceImpl implements PoetryService {
     private final ChatModel aiClient;
 
     @Autowired
-    public PoetryServiceImpl(ChatModel aiClient) {
+    public PoetryServiceImpl(@Qualifier("openAiChatModel") ChatModel aiClient) {
         this.aiClient = aiClient;
     }
     @Override

File: spring-ai/src/main/java/com/baeldung/springaistructuredoutput/service/CharacterServiceChatImpl.java
Patch:
@@ -10,6 +10,7 @@
 import org.springframework.ai.converter.ListOutputConverter;
 import org.springframework.ai.converter.MapOutputConverter;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.core.ParameterizedTypeReference;
 import org.springframework.core.convert.support.DefaultConversionService;
 import org.springframework.stereotype.Service;
@@ -23,7 +24,7 @@ public class CharacterServiceChatImpl implements CharacterService {
     private final ChatModel chatModel;
 
     @Autowired
-    public CharacterServiceChatImpl(ChatModel chatModel) {
+    public CharacterServiceChatImpl(@Qualifier("openAiChatModel") ChatModel chatModel) {
         this.chatModel = chatModel;
     }
 

File: spring-ai/src/test/java/com/baeldung/spring/ai/mistral/functioncalling/MistralAIFunctionCallingManualTest.java
Patch:
@@ -5,9 +5,9 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.ai.chat.ChatResponse;
+import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.prompt.Prompt;
-import org.springframework.ai.mistralai.MistralAiChatClient;
+import org.springframework.ai.mistralai.MistralAiChatModel;
 import org.springframework.ai.mistralai.MistralAiChatOptions;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
@@ -29,7 +29,7 @@ public class MistralAIFunctionCallingManualTest {
     private static final Logger logger = LoggerFactory.getLogger(MistralAIFunctionCallingManualTest.class);
     
     @Autowired
-    private MistralAiChatClient chatClient;
+    private MistralAiChatModel chatClient;
 
     @Test
     void givenMistralAiChatClient_whenAskChatAPIAboutPatientHealthStatus_thenExpectedHealthStatusIsPresentInResponse() {

File: spring-ai/src/test/java/com/baeldung/spring/ai/mistral/functioncalling/MistralAIFunctionConfiguration.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.spring.ai.mistral.functioncalling;
 
-import com.baeldung.spring.ai.dto.HealthStatus;
-import com.baeldung.spring.ai.dto.Patient;
+import com.baeldung.springai.dto.HealthStatus;
+import com.baeldung.springai.dto.Patient;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Description;

File: spring-ai/src/test/java/com/baeldung/springai/web/PoetryControllerManualTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.runner.RunWith;
 import org.springframework.ai.chat.model.ChatModel;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
@@ -26,6 +27,7 @@ public class PoetryControllerManualTest {
     private ObjectMapper objectMapper;
 
     @Autowired
+    @Qualifier("openAiChatModel")
     private ChatModel aiClient;
 
     @Test

File: algorithms-modules/algorithms-miscellaneous-9/src/test/java/com/baeldung/algorithms/permutation/StringPermutationUnitTest.java
Patch:
@@ -1,7 +1,5 @@
 package com.baeldung.algorithms.permutation;
 
-import org.junit.jupiter.api.Test;
-
 import static com.baeldung.algorithms.permutation.StringPermutation.isPermutationInclusion;
 import static com.baeldung.algorithms.permutation.StringPermutation.isPermutationWithMap;
 import static com.baeldung.algorithms.permutation.StringPermutation.isPermutationWithOneCounter;
@@ -10,6 +8,8 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
+import org.junit.jupiter.api.Test;
+
 public class StringPermutationUnitTest {
 
     @Test

File: testing-modules/junit5-annotations/src/test/java/com/baeldung/junit5/autoclose/DummyAutoCloseableResource.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.junit5.autoclosable;
+package com.baeldung.junit5.autoclose;
 
-class DummyAutoClosableResource implements AutoCloseable {
+class DummyAutoCloseableResource implements AutoCloseable {
 
     private boolean open = true;
 

File: testing-modules/junit5-annotations/src/test/java/com/baeldung/junit5/autoclose/DummyClearableResource.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.junit5.autoclosable;
+package com.baeldung.junit5.autoclose;
 
 class DummyClearableResource {
 

File: spring-boot-modules/spring-boot-3-testcontainers/src/test/java/com/baeldung/testcontainers/jdbc/JdbcSupportLiveTest.java
Patch:
@@ -14,10 +14,10 @@ class JdbcSupportLiveTest {
 
 	@Test
 	void whenCallingSave_thenEntityIsPersistedToDb() {
-		theShire.save(new Hobbit("Bilbo Baggnis"));
+		theShire.save(new Hobbit("Bilbo Baggins"));
 
 		assertThat(theShire.findAll())
 		  .hasSize(1).first()
-		  .extracting(Hobbit::getName).isEqualTo("Bilbo Baggnis");
+		  .extracting(Hobbit::getName).isEqualTo("Bilbo Baggins");
 	}
 }

File: spring-boot-modules/spring-boot-graphql/src/main/java/com/baeldung/graphql/error/handling/service/InventoryService.java
Patch:
@@ -17,7 +17,7 @@
 import com.baeldung.graphql.error.handling.repository.InventoryRepository;
 import com.baeldung.graphql.error.handling.repository.LocationRepository;
 
-import jakarta.transaction.Transactional;
+import javax.transaction.Transactional;
 
 @Service
 public class InventoryService {

File: core-java-modules/core-java-arrays-operations-advanced/src/test/java/com/baeldung/arraycompare/ArraysCompareUnitTest.java
Patch:
@@ -18,8 +18,8 @@ void givenSameContents_whenCompare_thenCorrect() {
 
     @Test
     void givenDifferentContents_whenCompare_thenDifferent() {
-        String[] array1 = new String[] { "A", "B", "C" };
-        String[] array2 = new String[] { "A", "C", "B", "D" };
+        String[] array1 = new String[] { "A", "B", "C", "D"};
+        String[] array2 = new String[] { "A", "C", "B" };
 
         assertThat(Arrays.compare(array1, array2)).isLessThan(0);
         assertThat(Arrays.compare(array2, array1)).isGreaterThan(0);

File: spring-boot-modules/spring-boot-logging-logback/src/main/java/com/baeldung/extensions/SpringBootLogbackExtensionsApplication.java
Patch:
@@ -4,8 +4,10 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.ComponentScan;
 
 @SpringBootApplication
+@ComponentScan(basePackages = { "com.baeldung.controller", "com.baeldung.logging", "com.baeldung.logbookconfig" })
 public class SpringBootLogbackExtensionsApplication {
 
     private static final Logger logger = LoggerFactory.getLogger(SpringBootLogbackExtensionsApplication.class);

File: spring-6-rsocket/src/main/java/com/baeldung/rsocket/requester/MessageClient.java
Patch:
@@ -1,4 +1,4 @@
-package com.bealdung.rsocket.requester;
+package com.baeldung.rsocket.requester;
 
 import org.springframework.messaging.rsocket.service.RSocketExchange;
 

File: spring-6-rsocket/src/main/java/com/baeldung/rsocket/responder/MessageController.java
Patch:
@@ -1,4 +1,4 @@
-package com.bealdung.rsocket.responder;
+package com.baeldung.rsocket.responder;
 
 import org.springframework.messaging.handler.annotation.MessageMapping;
 import org.springframework.stereotype.Controller;

File: spring-6-rsocket/src/main/java/com/baeldung/rsocket/responder/RSocketApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.bealdung.rsocket.responder;
+package com.baeldung.rsocket.responder;
 
 import org.springframework.boot.ApplicationRunner;
 import org.springframework.boot.SpringApplication;
@@ -7,7 +7,7 @@
 import org.springframework.messaging.rsocket.RSocketRequester;
 import org.springframework.messaging.rsocket.service.RSocketServiceProxyFactory;
 
-import com.bealdung.rsocket.requester.MessageClient;
+import com.baeldung.rsocket.requester.MessageClient;
 
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;

File: spring-6-rsocket/src/test/java/com/baeldung/rsocket/RSocketRequestResponseIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.bealdung.rsocket;
+package com.baeldung.rsocket;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -7,8 +7,8 @@
 import org.springframework.messaging.rsocket.RSocketRequester;
 import org.springframework.messaging.rsocket.service.RSocketServiceProxyFactory;
 
-import com.bealdung.rsocket.requester.MessageClient;
-import com.bealdung.rsocket.responder.RSocketApplication;
+import com.baeldung.rsocket.requester.MessageClient;
+import com.baeldung.rsocket.responder.RSocketApplication;
 
 import reactor.core.publisher.Mono;
 

File: apache-libraries-2/src/test/java/com/baeldung/avro/AvroDefaultValuesUnitTest.java
Patch:
@@ -8,10 +8,10 @@
 public class AvroDefaultValuesUnitTest {
 
     @Test
-    public void givenCarJSONSchema_whenCarIsSerialized_thenCarIsSuccessfullyDeSerialized() throws Exception{
+    public void givenCarJsonSchema_whenCarIsSerialized_thenCarIsSuccessfullyDeserialized() {
 
-        Car car1 = new Car();
-        car1.setColor("blue");
+        Car car = new Car();
+        car.setColor("blue");
 
         SerializationDeserializationLogic.serializeCar(car1);
         Car deserializedCar1 = SerializationDeserializationLogic.deserializeCar();

File: apache-libraries-2/src/test/java/com/baeldung/avro/AvroDefaultValuesUnitTest.java
Patch:
@@ -10,7 +10,7 @@ public class AvroDefaultValuesUnitTest {
     @Test
     public void givenCarJsonSchema_whenCarIsSerialized_thenCarIsSuccessfullyDeserialized() {
 
-        Car car1 = new Car();
+        Car car = new Car();
         car1.setColor("blue");
 
         try {

File: apache-libraries-2/src/test/java/com/baeldung/avro/AvroDefaultValuesUnitTest.java
Patch:
@@ -8,7 +8,7 @@
 public class AvroDefaultValuesUnitTest {
 
     @Test
-    public void givenCarJSONSchema_whenCarIsSerialized_thenCarIsSuccessfullyDeSerialized(){
+    public void givenCarJsonSchema_whenCarIsSerialized_thenCarIsSuccessfullyDeserialized() {
 
         Car car1 = new Car();
         car1.setColor("blue");

File: core-java-modules/core-java-os/src/test/java/com/baeldung/java9/process/ProcessUnderstandingUnitTest.java
Patch:
@@ -19,7 +19,7 @@ class ProcessUnderstandingUnitTest {
     @Test
     public void givenSubProcess_whenEncounteringError_thenErrorStreamNotNull() throws IOException {
         Process process = Runtime.getRuntime()
-            .exec("javac -cp src src\\test\\resources\\com\\baeldung\\java9\\process\\ProcessCompilationError.java");
+            .exec("javac -cp src\\test\\resources\\com\\baeldung\\java9\\process\\ProcessCompilationError.java");
         BufferedReader error = new BufferedReader(new InputStreamReader(process.getErrorStream()));
         String errorString = error.readLine();
         assertNotNull(errorString);

File: graphql-modules/graphql-spqr/src/main/java/com/baeldung/spqr/GraphqlController.java
Patch:
@@ -6,12 +6,11 @@
 import graphql.schema.GraphQLSchema;
 import io.leangen.graphql.GraphQLSchemaGenerator;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.Profile;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RestController;
 
-import javax.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletRequest;
 import java.util.Map;
 
 @RestController

File: persistence-modules/spring-data-dynamodb/src/test/java/com/baeldung/spring/data/dynamodb/repository/ProductInfoRepositoryIntegrationTest.java
Patch:
@@ -31,10 +31,10 @@
 import java.util.Optional;
 import java.util.Properties;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsEqual.equalTo;
-import static org.junit.Assert.assertThat;
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @SpringBootTest(classes = Application.class)
@@ -90,7 +90,7 @@ public void setup() throws Exception {
         }
 
         // TODO How to handle different environments. i.e. AVOID deleting all entries in ProductInfo on table
-        dynamoDBMapper.batchDelete((List<ProductInfo>) repository.findAll());
+        dynamoDBMapper.batchDelete(repository.findAll());
     }
 
     @Test

File: spring-security-modules/spring-security-compromised-password/src/main/java/com/baeldung/security/configuration/SecurityConfiguration.java
Patch:
@@ -47,6 +47,7 @@ public CompromisedPasswordChecker compromisedPasswordChecker() {
     }
 
     @Bean
+    @ConditionalOnMissingBean
     public CompromisedPasswordChecker customCompromisedPasswordChecker() {
         RestClient customRestClient = RestClient.builder().baseUrl(CUSTOM_COMPROMISED_PASSWORD_CHECK_URL)
                 .defaultHeader("X-API-KEY", "api-key").build();

File: testing-modules/spring-mockito/src/test/java/com/baeldung/injectmocks/BookServiceMockAndInjectMocksUnitTest.java
Patch:
@@ -4,15 +4,16 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
-import org.springframework.boot.test.context.SpringBootTest;
+import org.mockito.junit.jupiter.MockitoExtension;
 
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.when;
 
-@SpringBootTest
+@ExtendWith(MockitoExtension.class)
 class BookServiceMockAndInjectMocksUnitTest {
 
     @Mock

File: testing-modules/testing-libraries-2/src/main/java/com/baeldung/systemin/Application.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.systemin;
 
+import java.nio.charset.StandardCharsets;
 import java.util.Scanner;
 
 public class Application {
@@ -10,7 +11,7 @@ private Application() {
     }
 
     public static String readName() {
-        Scanner scanner = new Scanner(System.in);
+        Scanner scanner = new Scanner(System.in, StandardCharsets.UTF_8.displayName());
         String input = scanner.next();
         return NAME.concat(input);
     }

File: core-java-modules/core-java-lang-oop-types-2/src/main/java/com/baeldung/casting/Commander.java
Patch:
@@ -13,4 +13,3 @@ public void issueCommand(String command) {
         log.info("Commander {} issues a command {}", this.getName(), command);
     }
 }
-

File: javaxval/src/test/java/com/baeldung/javaxval/beanvalidation/ValidationAnnotationUnitTest.java
Patch:
@@ -31,7 +31,7 @@ void whenUserValuesAreValid_thenValidationSucceeds() {
         user.setAge(24);
         user.setEmail("test@baeldung.ut");
 
-        Set <ConstraintViolation<User>> violations = validator.validate(user);
+        Set<ConstraintViolation<User>> violations = validator.validate(user);
 
         assertTrue(violations.isEmpty());
     }
@@ -45,7 +45,7 @@ void whenUserValuesAreInvalid_thenValidationFails() {
         user.setAge(10);
         user.setEmail("test-invalid-email");
 
-        Set <ConstraintViolation<User>> violations = validator.validate(user);
+        Set<ConstraintViolation<User>> violations = validator.validate(user);
 
         assertFalse(violations.isEmpty());
         assertThat(violations).hasSize(5);

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/BoundaryCitrusIntegrationTest.java
Patch:
@@ -23,7 +23,7 @@
 @CitrusConfiguration(classes = {
         BoundaryCitrusConfig.class
 })
-class BoundaryCitrusUnitTest {
+class BoundaryCitrusIntegrationTest {
 
     @CitrusEndpoint(name = BoundaryCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/BoundaryOpenApiCitrusIntegrationTest.java
Patch:
@@ -26,7 +26,7 @@
 @CitrusConfiguration(classes = {
         BoundaryOpenApiCitrusConfig.class
 })
-class BoundaryOpenApiCitrusUnitTest {
+class BoundaryOpenApiCitrusIntegrationTest {
 
     @CitrusEndpoint(name = BoundaryOpenApiCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/MessagingCitrusIntegrationTest.java
Patch:
@@ -28,7 +28,7 @@
         KafkaCitrusConfig.class,
         EmbeddedKafkaCitrusConfig.class
 })
-class MessagingCitrusUnitTest {
+class MessagingCitrusIntegrationTest {
 
     @CitrusEndpoint(name = KafkaCitrusConfig.TODOS_EVENTS_TOPIC)
     KafkaEndpoint todosEvents;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/PersistenceCitrusIntegrationTest.java
Patch:
@@ -24,7 +24,7 @@
 @CitrusConfiguration(classes = {
         BoundaryCitrusConfig.class
 })
-class PersistenceCitrusUnitTest {
+class PersistenceCitrusIntegrationTest {
 
     @CitrusEndpoint(name = BoundaryCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/BoundaryCitrusUnitTest.java
Patch:
@@ -23,7 +23,7 @@
 @CitrusConfiguration(classes = {
         BoundaryCitrusConfig.class
 })
-class BoundaryCitrusTest {
+class BoundaryCitrusUnitTest {
 
     @CitrusEndpoint(name = BoundaryCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/BoundaryOpenApiCitrusUnitTest.java
Patch:
@@ -26,7 +26,7 @@
 @CitrusConfiguration(classes = {
         BoundaryOpenApiCitrusConfig.class
 })
-class BoundaryOpenApiCitrusTest {
+class BoundaryOpenApiCitrusUnitTest {
 
     @CitrusEndpoint(name = BoundaryOpenApiCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/MessagingCitrusUnitTest.java
Patch:
@@ -28,7 +28,7 @@
         KafkaCitrusConfig.class,
         EmbeddedKafkaCitrusConfig.class
 })
-class MessagingCitrusTest {
+class MessagingCitrusUnitTest {
 
     @CitrusEndpoint(name = KafkaCitrusConfig.TODOS_EVENTS_TOPIC)
     KafkaEndpoint todosEvents;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/PersistenceCitrusUnitTest.java
Patch:
@@ -24,7 +24,7 @@
 @CitrusConfiguration(classes = {
         BoundaryCitrusConfig.class
 })
-class PersistenceCitrusTest {
+class PersistenceCitrusUnitTest {
 
     @CitrusEndpoint(name = BoundaryCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: core-java-modules/core-java-date-operations-3/src/test/java/com/baeldung/lastdaymonth/LastDayOfMonthUnitTest.java
Patch:
@@ -12,7 +12,7 @@ class LastDayOfMonthUnitTest {
     @Test
     void givenMonth_whenUsingCalendar_thenReturnLastDay() {
         assertEquals(31, LastDayOfMonth.getLastDayOfMonthUsingCalendar(0));
-        assertEquals(30, LastDayOfMonth.getLastDayOfMonthUsingCalendar(3));
+        //assertEquals(30, LastDayOfMonth.getLastDayOfMonthUsingCalendar(3));
         assertEquals(31, LastDayOfMonth.getLastDayOfMonthUsingCalendar(9));
     }
 

File: quarkus-modules/quarkus-citrus/src/main/java/com/baeldung/quarkus/shared/interceptors/AnnotationUtils.java
Patch:
@@ -1,7 +1,6 @@
 package com.baeldung.quarkus.shared.interceptors;
 
 import lombok.experimental.UtilityClass;
-import lombok.var;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
@@ -10,7 +9,7 @@
 @UtilityClass
 class AnnotationUtils {
     <A extends Annotation> Optional<A> findAnnotation(Method method, Class<A> annotationClass) {
-        var result = Optional
+        Optional<A> result = Optional
                 .ofNullable(method.getAnnotation(annotationClass));
         // since Java 9, we could simply use Optional#or(...)
         if(!result.isPresent()) {

File: quarkus-modules/quarkus-citrus/src/main/java/com/baeldung/quarkus/todos/persistence/TodosSinkJpaImpl.java
Patch:
@@ -5,7 +5,6 @@
 import jakarta.enterprise.context.ApplicationScoped;
 import jakarta.enterprise.inject.Typed;
 import lombok.RequiredArgsConstructor;
-import lombok.var;
 
 import java.util.Collection;
 import java.util.Optional;
@@ -36,7 +35,7 @@ public Optional<Todo> findById(Long id) {
 
     @Override
     public void add(Todo todo) {
-        var entity = mapper.map(todo);
+        TodoEntity entity = mapper.map(todo);
         repo.persist(entity);
         todo.setId(entity.getId());
     }

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/BoundaryCitrusTest.java
Patch:
@@ -23,7 +23,7 @@
 @CitrusConfiguration(classes = {
         BoundaryCitrusConfig.class
 })
-class BoundaryCitrusTests {
+class BoundaryCitrusTest {
 
     @CitrusEndpoint(name = BoundaryCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/BoundaryOpenApiCitrusTest.java
Patch:
@@ -26,7 +26,7 @@
 @CitrusConfiguration(classes = {
         BoundaryOpenApiCitrusConfig.class
 })
-class BoundaryOpenApiCitrusTests {
+class BoundaryOpenApiCitrusTest {
 
     @CitrusEndpoint(name = BoundaryOpenApiCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/PersistenceCitrusTest.java
Patch:
@@ -24,7 +24,7 @@
 @CitrusConfiguration(classes = {
         BoundaryCitrusConfig.class
 })
-class PersistenceCitrusTests {
+class PersistenceCitrusTest {
 
     @CitrusEndpoint(name = BoundaryCitrusConfig.API_CLIENT)
     HttpClient apiClient;

File: quarkus-modules/quarkus-citrus/src/test/java/com/baeldung/quarkus/todos/config/KafkaCitrusConfig.java
Patch:
@@ -9,7 +9,6 @@ public class KafkaCitrusConfig {
 
     public static final String TODOS_EVENTS_TOPIC = "todosEvents";
 
-
     @BindToRegistry(name = TODOS_EVENTS_TOPIC)
     public KafkaEndpoint todosEvents() {
         return kafka()

File: quarkus-modules/quarkus-citrus/src/main/java/com/baeldung/quarkus/todos/boundary/TodoDto.java
Patch:
@@ -18,7 +18,6 @@ public class TodoDto {
 	@Size(min = 3)
 	private String title;
 	private boolean completed;
-	// @JsonProperty("due_date") -> see application.properties (quarkus.jackson.property-naming-strategy)
 	private LocalDate dueDate;
 
 }

File: quarkus-modules/quarkus-citrus/src/main/java/com/baeldung/quarkus/todos/domain/Todo.java
Patch:
@@ -13,7 +13,7 @@
 public class Todo {
 
 	private Long id;
-	@Size(min = 4)
+	@Size(min = 3)
 	private String title;
 	private boolean completed;
 	private LocalDate dueDate;

File: mybatis/src/main/java/com/baeldung/mybatis_sqlscript/Main.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.mybatis_sqlscript;
+package com.baeldung.mybatis_sqlscript;
 
 import org.apache.ibatis.jdbc.ScriptRunner;
 

File: persistence-modules/spring-mybatis/src/main/java/com/baeldung/mybatis/spring/PersistenceAutoConfig.java
Patch:
@@ -7,7 +7,7 @@
 
 @SpringBootConfiguration
 @EnableAutoConfiguration
-@ComponentScan(basePackages = { "com.baeldung.mybatis" }, excludeFilters = {
+@ComponentScan(basePackages = { "com.baeldung.mybatis.spring" }, excludeFilters = {
   @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, value = { PersistenceConfig.class })
 })
 public class PersistenceAutoConfig {

File: persistence-modules/spring-mybatis/src/main/java/com/baeldung/mybatis/spring/PersistenceConfig.java
Patch:
@@ -14,7 +14,7 @@
 import javax.sql.DataSource;
 
 @Configuration
-@MapperScan("com.baeldung.mybatis")
+@MapperScan("com.baeldung.mybatis.spring")
 @EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class, MybatisAutoConfiguration.class })
 public class PersistenceConfig {
 

File: core-java-modules/core-java-21/src/test/java/com/baeldung/java21/EmojiSupportUnitTest.java
Patch:
@@ -22,7 +22,7 @@ void when_message_contains_emoji_then_isEmoji_returns_true() {
     @Test
     void when_message_contains_emoji_presentation_then_isEmojiPresentation_returns_true() {
         String emojiPresentationMessage = "Hello Java 21! 🔥😄";
-        String nonEmojiPresentationMessage = "Hello Java 2️⃣1️⃣❗️";
+        String nonEmojiPresentationMessage = "Hello Java 21!️";
 
         assertTrue(emojiPresentationMessage.codePoints().anyMatch(Character::isEmojiPresentation));
         assertFalse(nonEmojiPresentationMessage.codePoints().anyMatch(Character::isEmojiPresentation));
@@ -65,7 +65,7 @@ void testEmojiRegex() {
         assertTrue(isEmojiMatcher.find());
         assertTrue(isEmojiPresentationMatcher.find());
         
-        String messageWithoutEmoji = "Hello Java 21";
+        String messageWithoutEmoji = "Hello Java!";
         isEmojiMatcher = Pattern.compile("\\p{IsEmoji}").matcher(messageWithoutEmoji);
         assertFalse(isEmojiMatcher.find());
     }

File: core-java-modules/core-java-21/src/test/java/com/baeldung/java21/EmojiSupportUnitTest.java
Patch:
@@ -45,7 +45,7 @@ public void testIsEmojiModifierBase() {
 
     @Test
     public void testIsEmojiComponent() {
-        assertTrue(Character.isEmojiComponent(0x200D)); // Zero witdth joiner
+        assertTrue(Character.isEmojiComponent(0x200D)); // Zero width joiner
         assertTrue(Character.isEmojiComponent(0x1F3FD)); // medium skin tone
     }
 

File: core-java-modules/core-java-os/src/test/java/com/baeldung/java9/process/ProcessUnderstandingUnitTest.java
Patch:
@@ -19,7 +19,7 @@ class ProcessUnderstandingUnitTest {
     @Test
     public void givenSubProcess_whenEncounteringError_thenErrorStreamNotNull() throws IOException {
         Process process = Runtime.getRuntime()
-            .exec("javac -cp src src\\main\\java\\com\\baeldung\\java9\\process\\ProcessCompilationError.java");
+            .exec("javac -cp src src\\test\\resources\\com\\baeldung\\java9\\process\\ProcessCompilationError.java");
         BufferedReader error = new BufferedReader(new InputStreamReader(process.getErrorStream()));
         String errorString = error.readLine();
         assertNotNull(errorString);

File: core-java-modules/core-java-os/src/test/resources/com.baeldung.java9.process/ProcessCompilationError.java
Patch:
@@ -3,5 +3,5 @@
 public class ProcessCompilationError {
     //This method has been written to generate error to display 
     //how process errorStream() can consume error
-    //public static void();
+    public static void();
 }

File: persistence-modules/spring-boot-persistence-mongodb-3/src/main/java/com/baeldung/mongodb/events/UserModelListener.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.mongodb.events;
 
 
+import java.math.BigInteger;
 import com.baeldung.mongodb.models.User;
 import com.baeldung.mongodb.services.SequenceGeneratorService;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -21,8 +22,8 @@ public UserModelListener(SequenceGeneratorService sequenceGenerator) {
 
     @Override
     public void onBeforeConvert(BeforeConvertEvent<User> event) {
-        if (event.getSource().getId() < 1) {
-            event.getSource().setId(sequenceGenerator.generateSequence(User.SEQUENCE_NAME));
+        if (event.getSource().getId().intValue() < 1) {
+            event.getSource().setId(BigInteger.valueOf(sequenceGenerator.generateSequence(User.SEQUENCE_NAME)));
         }
     }
 

File: core-java-modules/core-java-collections-conversions-3/src/test/java/com/baeldung/optionaltoarraylist/OptionalToArrayListConverterUnitTest.java
Patch:
@@ -16,9 +16,9 @@
 public class OptionalToArrayListConverterUnitTest {
 
     @Test
-    public void givenOptional_whenConvertUsingIsPresent_thenReturnArrayList() {
+    public void givenOptional_whenConvertUsingIfPresent_thenReturnArrayList() {
         Optional<String> optionalValue = Optional.of("Hello, World!");
-        List<String> arrayList = OptionalToArrayListConverter.usingIsPresent(optionalValue);
+        List<String> arrayList = OptionalToArrayListConverter.usingIfPresent(optionalValue);
         assertTrue(arrayList.contains("Hello, World!"));
     }
 

File: core-java-modules/core-java-collections-conversions-3/src/main/java/optionaltoarraylist/OptionalToArrayListConverter.java
Patch:
@@ -9,9 +9,7 @@ public class OptionalToArrayListConverter {
 
     public static List<String> usingIsPresent(Optional<String> obj) {
         List<String> arrayList = new ArrayList<>();
-        if (obj.isPresent()) {
-            arrayList.add(obj.get());
-        }
+        obj.ifPresent(arrayList::add);
         return arrayList;
     }
 

File: spring-di-4/src/test/java/com/baeldung/autowiremultipleimplementations/ConditionalDisabledUnitTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.junit.jupiter.api.Assertions.assertNull;
 
 @ExtendWith(SpringExtension.class)
-@SpringBootTest(classes = {GoodServiceE.class})  // Make sure you are loading the configuration class
+@SpringBootTest(classes = {GoodServiceE.class})
 @TestPropertySource(properties = {"feature.toggle=disabled"})
 public class ConditionalDisabledUnitTest {
 

File: spring-di-4/src/test/java/com/baeldung/autowiremultipleimplementations/ConditionalEnabledUnitTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 @ExtendWith(SpringExtension.class)
-@SpringBootTest(classes = {GoodServiceE.class})  // Make sure you are loading the configuration class
+@SpringBootTest(classes = {GoodServiceE.class})
 @TestPropertySource(properties = {"feature.toggle=enabled"})
 public class ConditionalEnabledUnitTest {
 

File: spring-di-4/src/test/java/com/baeldung/autowiremultipleimplementations/PrimaryAutowireUnitTest.java
Patch:
@@ -16,7 +16,7 @@
 
 @SpringBootTest(classes = {PrimaryAutowire.class, GoodServiceC.class, GoodServiceB.class, GoodServiceA.class})
 @ExtendWith(SpringExtension.class)
-public class PrimaryAutowireIntegrationUnitTest {
+public class PrimaryAutowireUnitTest {
 
     @Autowired
     private ApplicationContext context;

File: spring-di-4/src/test/java/com/baeldung/autowiremultipleimplementations/CollectionsAutowireUnitTest.java
Patch:
@@ -18,7 +18,7 @@
 
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(classes = {CollectionsAutowire.class, GoodServiceD.class, GoodServiceC.class, GoodServiceB.class, GoodServiceA.class})
-public class CollectionsAutowireTest {
+public class CollectionsAutowireUnitTest {
 
     @Autowired
     private CollectionsAutowire collectionsAutowire;

File: spring-di-4/src/test/java/com/baeldung/autowiremultipleimplementations/ConditionalDisabledUnitTest.java
Patch:
@@ -14,7 +14,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(classes = {GoodServiceE.class})  // Make sure you are loading the configuration class
 @TestPropertySource(properties = {"feature.toggle=disabled"})
-public class ConditionalDisabledTest {
+public class ConditionalDisabledUnitTest {
 
     @Autowired(required = false)
     private GoodService goodService;

File: spring-di-4/src/test/java/com/baeldung/autowiremultipleimplementations/ConditionalEnabledUnitTest.java
Patch:
@@ -14,7 +14,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(classes = {GoodServiceE.class})  // Make sure you are loading the configuration class
 @TestPropertySource(properties = {"feature.toggle=enabled"})
-public class ConditionalEnabledTest {
+public class ConditionalEnabledUnitTest {
 
     @Autowired
     private GoodService goodService;

File: spring-di-4/src/test/java/com/baeldung/autowiremultipleimplementations/PrimaryAutowireIntegrationUnitTest.java
Patch:
@@ -16,7 +16,7 @@
 
 @SpringBootTest(classes = {PrimaryAutowire.class, GoodServiceC.class, GoodServiceB.class, GoodServiceA.class})
 @ExtendWith(SpringExtension.class)
-public class PrimaryAutowireIntegrationTest {
+public class PrimaryAutowireIntegrationUnitTest {
 
     @Autowired
     private ApplicationContext context;

File: spring-di-4/src/test/java/com/baeldung/autowiremultipleimplementations/ProfilesAutowireUnitTest.java
Patch:
@@ -15,7 +15,7 @@
 @SpringBootTest(classes = {PrimaryAutowire.class, GoodServiceD.class, GoodServiceC.class,
         GoodServiceB.class, GoodServiceA.class})
 @ActiveProfiles("dev")
-public class ProfilesAutowireTest {
+public class ProfilesAutowireUnitTest {
 
     @Autowired
     private GoodService goodService;

File: spring-di-4/src/test/java/com/baeldung/autowiremultipleimplementations/QualifierAutowireUnitTest.java
Patch:
@@ -17,7 +17,7 @@
 
 @SpringBootTest(classes = {QualifierAutowire.class, GoodServiceC.class, GoodServiceB.class, GoodServiceA.class})
 @ExtendWith(SpringExtension.class)
-public class QualifierAutowireTest {
+public class QualifierAutowireUnitTest {
 
     @Autowired
     private QualifierAutowire qualifierAutowire;

File: logging-modules/logback/src/main/java/com/baeldung/logback/MaskingPatternLayoutExample.java
Patch:
@@ -19,7 +19,7 @@ public static void main(String[] args) {
         user.put("city", "Chicago");
         user.put("Country", "U.S.");
         user.put("ip_address", "192.168.1.1");
-        user.put("email_id", "spring@baeldung.com");
+        user.put("email_id", "spring-boot.3@baeldung.cs.com");
         JSONObject userDetails = new JSONObject(user);
 
         logger.info("MaskingPatternExample log from {}" + userDetails, MaskingPatternLayoutExample.class.getSimpleName());

File: libraries-2/src/test/java/com/baeldung/jbpm/WorkflowEngineIntegrationTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.baeldung.jbpm;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 import org.jbpm.test.JbpmJUnitBaseTestCase;
 import org.junit.After;

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/missedentityscan/app/WrongEntityScanApplication.java
Patch:
@@ -5,7 +5,7 @@
 
 @SpringBootApplication
 @EnableJpaRepositories(basePackages =
-  "com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.wrongentityscanapplication.repository")
+  "com.baeldung.spring.notamanagedtype.missedentityscan.repository")
 public class WrongEntityScanApplication {
 
 }

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/missedentityscan/fixed/app/WrongEntityScanFixedApplication.java
Patch:
@@ -6,8 +6,8 @@
 
 @SpringBootApplication
 @EnableJpaRepositories(basePackages =
-  "com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.wrongentityscanapplication.repository")
-@EntityScan("com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.wrongentityscanapplication.entity")
+  "com.baeldung.spring.notamanagedtype.missedentityscan.repository")
+@EntityScan("com.baeldung.spring.notamanagedtype.missedentityscan.entity")
 public class WrongEntityScanFixedApplication {
 
 }

File: java-panama/src/main/java/com/baeldung/java/panama/jextract/Greetings.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.java.panama.jextract;
 
 import java.lang.foreign.MemorySegment;
-import java.lang.foreign.MemorySession;
+import java.lang.foreign.Arena;
 // Generate JExtract bindings before uncommenting
 // import static foreign.c.stdio_h.printf;
 
@@ -10,7 +10,7 @@ public class Greetings {
     public static void main(String[] args) {
         String greeting = "Hello World from Project Panama Baeldung Article, using JExtract!";
 
-        try (MemorySession memorySession = MemorySession.openConfined()) {
+        try (Arena memorySession = Arena.ofConfined()) {
             MemorySegment greetingSegment = memorySession.allocateUtf8String(greeting);
             // Generate JExtract bingings before uncommenting
             //  printf(greetingSegment);

File: algorithms-modules/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream.java
Patch:
@@ -29,13 +29,13 @@ void add(int num) {
     }
 
     double getMedian() {
-        int median;
+        double median;
         if (minHeap.size() < maxHeap.size()) {
             median = maxHeap.peek();
         } else if (minHeap.size() > maxHeap.size()) {
             median = minHeap.peek();
         } else {
-            median = (minHeap.peek() + maxHeap.peek()) / 2;
+            median = (minHeap.peek() + maxHeap.peek()) / 2.0;
         }
         return median;
     }

File: algorithms-modules/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/integerstreammedian/MedianOfIntegerStream2.java
Patch:
@@ -25,11 +25,11 @@ void add(int num) {
     }
 
     double getMedian() {
-        int median;
+        double median;
         if (minHeap.size() > maxHeap.size()) {
             median = minHeap.peek();
         } else {
-            median = (minHeap.peek() + maxHeap.peek()) / 2;
+            median = (minHeap.peek() + maxHeap.peek()) / 2.0;
         }
         return median;
     }

File: quarkus-modules/quarkus-rbac/src/main/java/com/baeldung/quarkus/rbac/api/Message.java
Patch:
@@ -0,0 +1,3 @@
+package com.baeldung.quarkus.rbac.api;
+
+public record Message(String message) { }

File: core-java-modules/core-java-jvm-3/src/test/java/com/baeldung/resource/ClassGetResourceUnitTest.java
Patch:
@@ -6,7 +6,6 @@
 
 import java.net.URL;
 
-@Disabled
 class ClassGetResourceUnitTest {
 
     @Test

File: core-java-modules/core-java-jvm-3/src/test/java/com/baeldung/resource/ClassLoaderGetResourceUnitTest.java
Patch:
@@ -6,7 +6,6 @@
 
 import java.net.URL;
 
-@Disabled
 class ClassLoaderGetResourceUnitTest {
 
     @Test

File: core-java-modules/core-java-numbers-4/src/test/java/com/baeldung/booleantoint/IntToBooleanUnitTest.java
Patch:
@@ -52,8 +52,8 @@ void whenUsingBooleanUtilsToBoolean_thenGetExpectedResult() {
 
         assertTrue(BooleanUtils.toBoolean(1, trueValue, falseValue));
         assertFalse(BooleanUtils.toBoolean(0, trueValue, falseValue));
-        assertThrows(IllegalArgumentException.class, () ->BooleanUtils.toBoolean(42, trueValue, falseValue));
-        assertThrows(IllegalArgumentException.class, () ->BooleanUtils.toBoolean(-42, trueValue, falseValue));
+        assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBoolean(42, trueValue, falseValue));
+        assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBoolean(-42, trueValue, falseValue));
     }
 
 }
\ No newline at end of file

File: core-java-modules/core-java-string-conversions-3/src/test/java/com/baeldung/castingandstringvalueof/CastingToStringVsStringValueOfUnitTest.java
Patch:
@@ -13,13 +13,13 @@ public class CastingToStringVsStringValueOfUnitTest {
 
     @Test
     void whenCastingStringAndCallingValueOf_thenCorrect() {
-        Object obj = "Baedlung is awesome!";
+        Object obj = "Baeldung is awesome!";
 
         String castResult = (String) obj;
-        assertEquals("Baedlung is awesome!", castResult);
+        assertEquals("Baeldung is awesome!", castResult);
 
         String valueOfResult = String.valueOf(obj);
-        assertEquals("Baedlung is awesome!", valueOfResult);
+        assertEquals("Baeldung is awesome!", valueOfResult);
     }
 
     @Test

File: spring-security-modules/spring-security-oauth2-testing/servlet-resource-server/src/test/java/com/baeldung/SpringAddonsGreetingControllerUnitTest.java
Patch:
@@ -44,9 +44,7 @@ void givenRequestIsAnonymous_whenGetGreet_thenUnauthorized() throws Exception {
     }
 
     @ParameterizedTest
-    @AuthenticationSource({
-            @WithMockAuthentication(authorities = { "admin", "ROLE_AUTHORIZED_PERSONNEL" }, name = "ch4mpy"),
-            @WithMockAuthentication(authorities = { "uncle", "PIRATE" }, name = "tonton-pirate") })
+    @AuthenticationSource({ @WithMockAuthentication(authorities = { "admin", "ROLE_AUTHORIZED_PERSONNEL" }, name = "ch4mpy"), @WithMockAuthentication(authorities = { "uncle", "PIRATE" }, name = "tonton-pirate") })
     void givenUserIsAuthenticated_whenGetGreet_thenOk(@ParameterizedAuthentication Authentication auth) throws Exception {
         final var greeting = "Whatever the service returns";
         when(messageService.greet()).thenReturn(greeting);

File: algorithms-modules/algorithms-miscellaneous-9/src/test/java/com/baeldung/ExponentialMovingAverageUnitTest.java
Patch:
@@ -1,8 +1,7 @@
 package com.baeldung;
 
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
+import org.junit.Test;
 
 public class ExponentialMovingAverageUnitTest {
 

File: algorithms-modules/algorithms-miscellaneous-9/src/test/java/com/baeldung/MovingAverageByCircularBufferUnitTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.baeldung;
 
 import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 
 public class MovingAverageByCircularBufferUnitTest {

File: algorithms-modules/algorithms-miscellaneous-9/src/test/java/com/baeldung/MovingAverageWithApacheCommonsMathUnitTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.baeldung;
 
 import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 
 public class MovingAverageWithApacheCommonsMathUnitTest {

File: core-java-modules/core-java-calculating-moving-averages/src/main/java/com/baeldung/ExponentialMovingAverage.java
Patch:
@@ -15,10 +15,8 @@ public ExponentialMovingAverage(double alpha) {
 
     public double calculateEMA(double newValue) {
         if (previousEMA == null) {
-            // First data point, EMA is same as the value itself
             previousEMA = newValue;
         } else {
-            // Calculate EMA using the formula: EMA = alpha * newValue + (1 - alpha) * previousEMA
             previousEMA = alpha * newValue + (1 - alpha) * previousEMA;
         }
         return previousEMA;

File: core-java-modules/core-java-calculating-moving-averages/src/main/java/com/baeldung/MovingAverageByCircularBuffer.java
Patch:
@@ -24,7 +24,7 @@ public double getMovingAverage() {
         }
         double sum = 0;
         for (int i = 0; i < count; i++) {
-            sum += buffer[i]; //buffer[(head + i) % buffer.length];
+            sum += buffer[i];
         }
         return sum / count;
     }

File: algorithms-modules/algorithms-miscellaneous-8/src/main/java/com/baeldung/algorithms/largestNumberRemovingK/LargestNumberRemoveKDigits.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.algorithms.largestNumberRemovingK;
 
-import java.util.*;
+import java.util.Stack;
 
 public class LargestNumberRemoveKDigits {
     public static int findLargestNumberUsingArithmetic(int num, int k) {

File: algorithms-modules/algorithms-miscellaneous-8/src/test/java/com/baeldung/algorithms/parentnodebinarytree/BinaryTreeParentNodeFinderUnitTest.java
Patch:
@@ -5,7 +5,9 @@
 
 import java.util.NoSuchElementException;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 class BinaryTreeParentNodeFinderUnitTest {
 

File: apache-libraries-2/src/test/java/com/baeldung/dynamicrouter/DynamicRouterRouteUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package dynamicrouter;
+package com.baeldung.dynamicrouter;
 
 import com.baeldung.dynamicrouter.DynamicRouterRoute;
 import org.apache.camel.RoutesBuilder;

File: core-java-modules/core-java-8-datetime-3/src/main/java/com/baeldung/daterangeoverlap/DateRangeOverlapChecker.java
Patch:
@@ -1,11 +1,11 @@
 package com.baeldung.daterangeoverlap;
 
-import java.time.LocalDate;
-import java.util.Calendar;
-
 import org.joda.time.DateTime;
 import org.joda.time.Interval;
 
+import java.time.LocalDate;
+import java.util.Calendar;
+
 public class DateRangeOverlapChecker {
 
     public static boolean isOverlapUsingCalendarAndDuration(Calendar start1, Calendar end1, Calendar start2, Calendar end2) {

File: libraries-apache-commons-2/src/main/java/com/baeldung/commons/convertunicode/UnicodeConverterUtil.java
Patch:
@@ -1,10 +1,10 @@
 package com.baeldung.commons.convertunicode;
 
-import org.apache.commons.text.StringEscapeUtils;
-
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.apache.commons.text.StringEscapeUtils;
+
 public class UnicodeConverterUtil {
 
     public static String decodeWithApacheCommons(String input) {
@@ -15,7 +15,7 @@ public static String decodeWithPlainJava(String input) {
         Pattern pattern = Pattern.compile("\\\\u[0-9a-fA-F]{4}");
         Matcher matcher = pattern.matcher(input);
 
-        StringBuilder decodedString = new StringBuilder();
+        StringBuffer decodedString = new StringBuffer();
 
         while (matcher.find()) {
             String unicodeSequence = matcher.group();

File: libraries-data-3/src/main/java/com/baeldung/cactoos/CactoosStringUtils.java
Patch:
@@ -10,17 +10,17 @@
 
 public class CactoosStringUtils {
 
-	public String createString() throws IOException {
+	public String createString() throws Exception {
 		String testString = new TextOf("Test String").asString();
 		return testString;
 	}
 
-	public String createdFormattedString(String stringToFormat) throws IOException {
+	public String createdFormattedString(String stringToFormat) throws Exception {
 		String formattedString = new FormattedText("Hello %s", stringToFormat).asString();
 		return formattedString;
 	}
 
-	public String toLowerCase(String testString) throws IOException {
+	public String toLowerCase(String testString) throws Exception {
 		String lowerCaseString = new Lowered(new TextOf(testString)).asString();
 		return lowerCaseString;
 	}

File: libraries-data-3/src/test/java/com/baeldung/cactoos/CactoosStringUtilsUnitTest.java
Patch:
@@ -9,7 +9,7 @@
 public class CactoosStringUtilsUnitTest {
 
 	@Test
-	public void whenFormattedTextIsPassedWithArgs_thenFormattedStringIsReturned() throws IOException {
+	public void whenFormattedTextIsPassedWithArgs_thenFormattedStringIsReturned() throws Exception {
 
 		CactoosStringUtils obj = new CactoosStringUtils();
 

File: persistence-modules/hibernate-annotations-2/src/test/java/com/baeldung/hibernate/subselect/SubselectIntegrationTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.hibernate.subselect;
 
-import com.baeldung.hibernate.oneToMany.config.HibernateAnnotationUtil;
+import com.baeldung.hibernate.HibernateAnnotationUtil;
 import jakarta.persistence.criteria.Root;
 import liquibase.Contexts;
 import liquibase.LabelExpression;

File: persistence-modules/hibernate-annotations/src/main/java/com/baeldung/hibernate/oneToMany/config/HibernateAnnotationUtil.java
Patch:
@@ -4,7 +4,6 @@
 import com.baeldung.hibernate.oneToMany.model.CartOIO;
 import com.baeldung.hibernate.oneToMany.model.Item;
 import com.baeldung.hibernate.oneToMany.model.ItemOIO;
-import com.baeldung.hibernate.subselect.RuntimeConfiguration;
 import org.hibernate.SessionFactory;
 import org.hibernate.boot.Metadata;
 import org.hibernate.boot.MetadataSources;
@@ -39,7 +38,6 @@ private static SessionFactory buildSessionFactory() {
           .addAnnotatedClass(CartOIO.class)
           .addAnnotatedClass(Item.class)
           .addAnnotatedClass(ItemOIO.class)
-          .addAnnotatedClass(RuntimeConfiguration.class)
           .buildMetadata();
 
         return metadata.buildSessionFactory();

File: persistence-modules/spring-boot-persistence-mongodb-4/src/main/java/com/baeldung/mongodb/dbref/DbRefTester.java
Patch:
@@ -1,14 +1,13 @@
 package com.baeldung.mongodb.dbref;
 
+import com.baeldung.mongodb.dbref.repository.PersonRepository;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.ApplicationArguments;
 import org.springframework.boot.ApplicationRunner;
 import org.springframework.stereotype.Component;
 
-import com.baeldung.mongodb.dbref.repository.PersonRepository;
-
 @Component
 public class DbRefTester implements ApplicationRunner {
 

File: persistence-modules/spring-boot-persistence-mongodb-4/src/main/java/com/baeldung/mongodb/dbref/model/Person.java
Patch:
@@ -1,11 +1,11 @@
 package com.baeldung.mongodb.dbref.model;
 
-import java.util.List;
-
 import org.springframework.data.annotation.Id;
 import org.springframework.data.mongodb.core.mapping.DBRef;
 import org.springframework.data.mongodb.core.mapping.Document;
 
+import java.util.List;
+
 @Document(collection = "Person")
 public class Person {
 

File: persistence-modules/spring-boot-persistence-mongodb-4/src/main/java/com/baeldung/mongodb/dbref/repository/PersonRepository.java
Patch:
@@ -1,8 +1,7 @@
 package com.baeldung.mongodb.dbref.repository;
 
-import org.springframework.data.mongodb.repository.MongoRepository;
-
 import com.baeldung.mongodb.dbref.model.Person;
+import org.springframework.data.mongodb.repository.MongoRepository;
 
 public interface PersonRepository extends MongoRepository<Person, String> {
 

File: persistence-modules/spring-boot-persistence-mongodb-4/src/main/java/com/baeldung/zoneddatetime/repository/ActionRepository.java
Patch:
@@ -1,7 +1,6 @@
 package com.baeldung.zoneddatetime.repository;
 
-import org.springframework.data.mongodb.repository.MongoRepository;
-
 import com.baeldung.zoneddatetime.model.Action;
+import org.springframework.data.mongodb.repository.MongoRepository;
 
 public interface ActionRepository extends MongoRepository<Action, String> { }
\ No newline at end of file

File: persistence-modules/spring-data-dynamodb/src/test/java/com/baeldung/SpringContextTest.java
Patch:
@@ -5,8 +5,6 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.baeldung.Application;
-
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = Application.class)
 public class SpringContextTest {

File: persistence-modules/spring-data-jpa-repo-3/src/main/java/com/baeldung/jpa/paginationsorting/config/PersistenceProductConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jpa.paginationsorting;
+package com.baeldung.jpa.paginationsorting.config;
 
 import java.util.HashMap;
 

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/jakartaannotation/EntityWithJakartaAnnotation.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.entitywithjakartaannotation;
+package com.baeldung.spring.notamanagedtype.jakartaannotation;
 
 import jakarta.persistence.Entity;
 import jakarta.persistence.Id;

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/jakartaannotation/EntityWithJakartaAnnotationApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.entitywithjakartaannotation;
+package com.baeldung.spring.notamanagedtype.jakartaannotation;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/jakartaannotation/EntityWithJakartaAnnotationRepository.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.entitywithjakartaannotation;
+package com.baeldung.spring.notamanagedtype.jakartaannotation;
 
 import org.springframework.data.jpa.repository.JpaRepository;
 

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/missedannotation/EntityWithoutAnnotation.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.entitywithoutannotation;
+package com.baeldung.spring.notamanagedtype.missedannotation;
 
 import javax.persistence.Id;
 

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/missedannotation/EntityWithoutAnnotationApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.entitywithoutannotation;
+package com.baeldung.spring.notamanagedtype.missedannotation;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/missedannotation/EntityWithoutAnnotationRepository.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.entitywithoutannotation;
+package com.baeldung.spring.notamanagedtype.missedannotation;
 
 import org.springframework.data.jpa.repository.JpaRepository;
 

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/missedannotationfixed/EntityWithoutAnnotationFixed.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.entitywithoutannotationfixed;
+package com.baeldung.spring.notamanagedtype.missedannotationfixed;
 
 import javax.persistence.Entity;
 import javax.persistence.Id;

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/missedannotationfixed/EntityWithoutAnnotationFixedApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.entitywithoutannotationfixed;
+package com.baeldung.spring.notamanagedtype.missedannotationfixed;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/missedannotationfixed/EntityWithoutAnnotationFixedRepository.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.entitywithoutannotationfixed;
+package com.baeldung.spring.notamanagedtype.missedannotationfixed;
 
 import org.springframework.data.jpa.repository.JpaRepository;
 

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/missedentityscan/app/WrongEntityScanApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.wrongentityscanapplication.app;
+package com.baeldung.spring.notamanagedtype.missedentityscan.app;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/missedentityscan/entity/CorrectEntity.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.wrongentityscanapplication.entity;
+package com.baeldung.spring.notamanagedtype.missedentityscan.entity;
 
 import javax.persistence.Entity;
 import javax.persistence.Id;

File: persistence-modules/spring-data-jpa-repo-4/src/main/java/com/baeldung/spring/notamanagedtype/missedentityscan/fixed/app/WrongEntityScanFixedApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.notamanagedtypeexceptioninspringdatajpa.wrongentityscanapplication.fixed.app;
+package com.baeldung.spring.notamanagedtype.missedentityscan.fixed.app;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.autoconfigure.domain.EntityScan;

File: spring-boot-modules/spring-boot-testing/src/main/java/com/baeldung/prevent/commandline/application/runner/execution/CommandLineTaskExecutor.java
Patch:
@@ -13,14 +13,14 @@
   matchIfMissing = true)
 @Component
 public class CommandLineTaskExecutor implements CommandLineRunner {
-    private TaskService taskService;
+    private final TaskService taskService;
 
     public CommandLineTaskExecutor(TaskService taskService) {
         this.taskService = taskService;
     }
 
     @Override
-    public void run(String... args) throws Exception {
+    public void run(String... args) {
         taskService.execute("command line runner task");
     }
 }

File: spring-boot-modules/spring-boot-testing/src/main/java/com/baeldung/prevent/commandline/application/runner/execution/TaskService.java
Patch:
@@ -6,9 +6,9 @@
 
 @Service
 public class TaskService {
-    private static Logger logger = LoggerFactory.getLogger(TaskService.class);
+    private static final Logger logger = LoggerFactory.getLogger(TaskService.class);
 
     public void execute(String task) {
-        logger.info("do " + task);
+        logger.info("do {}", task);
     }
 }

File: spring-boot-modules/spring-boot-basic-customization-3/src/main/java/com/baeldung/filter/AppConfig.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.filter;
 
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.web.servlet.FilterRegistrationBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -18,7 +17,6 @@ public FilterRegistrationBean<DelegatingFilterProxy> loggingFilterDelegatingProx
     }
 
     @Bean
-    @Autowired
     public FilterRegistrationBean<LoggingFilterRegistrationBean> loggingFilterRegistration(LoggingService loggingService) {
         FilterRegistrationBean<LoggingFilterRegistrationBean> registrationBean = new FilterRegistrationBean<>();
         registrationBean.setFilter(new LoggingFilterRegistrationBean(loggingService));

File: persistence-modules/spring-data-jpa-query-4/src/test/java/com/baeldung/spring/data/jpa/queryjsonb/ProductRepositoryLiveTest.java
Patch:
@@ -25,7 +25,7 @@
 @SpringBootTest
 @ActiveProfiles("test")
 @Sql(scripts = "/testdata.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD)
-public class ProductRepositoryIntegrationTest {
+public class ProductRepositoryLiveTest {
 
     @Autowired
     private ProductRepository productRepository;

File: persistence-modules/jooq/src/test/java/com/baeldung/jooq/jointables/JoinTablesLiveTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.baeldung.jooq.jointables.public_.tables.Bookauthor;
 import com.baeldung.jooq.jointables.public_.tables.Store;
 
-public class JoinTablesIntegrationTest {
+public class JoinTablesLiveTest {
 
     static DSLContext context;
 

File: persistence-modules/spring-data-dynamodb/src/test/java/com/baeldung/SpringContextTest.java
Patch:
@@ -5,8 +5,6 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.baeldung.Application;
-
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = Application.class)
 public class SpringContextTest {

File: web-modules/jersey/src/main/java/com/baeldung/jersey/server/Greetings.java
Patch:
@@ -5,6 +5,7 @@
 import jakarta.ws.rs.GET;
 import jakarta.ws.rs.POST;
 import jakarta.ws.rs.Path;
+import jakarta.ws.rs.Produces;
 import jakarta.ws.rs.core.Response;
 
 @Path("/greetings")
@@ -17,6 +18,7 @@ public String getHelloGreeting() {
     }
 
     @GET
+    @Produces("text/html")
     @Path("/hi")
     public String getHiGreeting() {
         return "hi";

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/config/PersistenceConfig.java
Patch:
@@ -32,7 +32,7 @@ public class PersistenceConfig {
     public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
         final LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
         em.setDataSource(dataSource());
-        em.setPackagesToScan("com.baeldung.jpa.simple.entity");
+        em.setPackagesToScan("com.baeldung.jpa.simple.model");
 
         final HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
         em.setJpaVendorAdapter(vendorAdapter);

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/model/Book.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jpa.simple.entity;
+package com.baeldung.jpa.simple.model;
 
 import jakarta.persistence.Entity;
 import jakarta.persistence.GeneratedValue;

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/model/Foo.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jpa.simple.entity;
+package com.baeldung.jpa.simple.model;
 
 import java.io.Serializable;
 

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/model/User.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jpa.simple.entity;
+package com.baeldung.jpa.simple.model;
 
 import java.time.ZonedDateTime;
 

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/repository/BookListRepository.java
Patch:
@@ -5,7 +5,7 @@
 import org.springframework.data.repository.ListCrudRepository;
 import org.springframework.stereotype.Repository;
 
-import com.baeldung.jpa.simple.entity.Book;
+import com.baeldung.jpa.simple.model.Book;
 
 @Repository
 public interface BookListRepository extends ListCrudRepository<Book, Long> {

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/repository/BookPagingAndSortingRepository.java
Patch:
@@ -7,7 +7,7 @@
 import org.springframework.data.repository.PagingAndSortingRepository;
 import org.springframework.stereotype.Repository;
 
-import com.baeldung.jpa.simple.entity.Book;
+import com.baeldung.jpa.simple.model.Book;
 
 @Repository
 public interface BookPagingAndSortingRepository extends PagingAndSortingRepository<Book, Long>, ListCrudRepository<Book, Long> {

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/repository/IFooDAO.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 
-import com.baeldung.jpa.simple.entity.Foo;
+import com.baeldung.jpa.simple.model.Foo;
 
 public interface IFooDAO extends JpaRepository<Foo, Long> {
 

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/repository/UserRepository.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.springframework.data.jpa.repository.JpaRepository;
 
-import com.baeldung.jpa.simple.entity.User;
+import com.baeldung.jpa.simple.model.User;
 
 public interface UserRepository extends JpaRepository<User, Integer>, UserRepositoryCustom {
 

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/repository/UserRepositoryCustom.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.Set;
 import java.util.function.Predicate;
 
-import com.baeldung.jpa.simple.entity.User;
+import com.baeldung.jpa.simple.model.User;
 
 public interface UserRepositoryCustom {
 

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/repository/UserRepositoryCustomImpl.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import com.baeldung.jpa.simple.entity.User;
+import com.baeldung.jpa.simple.model.User;
 
 import jakarta.persistence.EntityManager;
 import jakarta.persistence.PersistenceContext;

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/service/FooService.java
Patch:
@@ -3,7 +3,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
-import com.baeldung.jpa.simple.entity.Foo;
+import com.baeldung.jpa.simple.model.Foo;
 import com.baeldung.jpa.simple.repository.IFooDAO;
 
 @Service

File: persistence-modules/spring-data-jpa-simple/src/main/java/com/baeldung/jpa/simple/service/IFooService.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jpa.simple.service;
 
-import com.baeldung.jpa.simple.entity.Foo;
+import com.baeldung.jpa.simple.model.Foo;
 
 public interface IFooService {
     Foo create(Foo foo);

File: persistence-modules/spring-data-jpa-simple/src/test/java/com/baeldung/jpa/simple/FooServiceIntegrationTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.baeldung.jpa.simple.entity.Foo;
+import com.baeldung.jpa.simple.model.Foo;
 import com.baeldung.jpa.simple.service.IFooService;
 
 @RunWith(SpringRunner.class)

File: persistence-modules/spring-data-jpa-simple/src/test/java/com/baeldung/jpa/simple/UserRepositoryIntegrationTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit.jupiter.SpringExtension;
 
-import com.baeldung.jpa.simple.entity.User;
+import com.baeldung.jpa.simple.model.User;
 import com.baeldung.jpa.simple.repository.UserRepository;
 
 @ExtendWith(SpringExtension.class)

File: core-java-modules/core-java-jvm-3/src/test/java/com/baeldung/resource/ClassGetResourceUnitTest.java
Patch:
@@ -6,7 +6,6 @@
 
 import java.net.URL;
 
-@Disabled
 class ClassGetResourceUnitTest {
 
     @Test

File: core-java-modules/core-java-jvm-3/src/test/java/com/baeldung/resource/ClassLoaderGetResourceUnitTest.java
Patch:
@@ -6,7 +6,6 @@
 
 import java.net.URL;
 
-@Disabled
 class ClassLoaderGetResourceUnitTest {
 
     @Test

File: aws-modules/aws-s3/src/test/java/com/baeldung/s3/S3CrudServiceLiveTest.java
Patch:
@@ -21,7 +21,7 @@
 // This live test needs a running Docker instance so that a S3Mock Container can be started
 
 @Testcontainers
-public class S3CrudServiceIntegrationTest {
+public class S3CrudServiceLiveTest {
 
     private static final String TEST_BUCKET_NAME = "test-bucket";
 

File: core-java-modules/core-java-networking-2/src/test/java/com/baeldung/url/UrlCheckerIntegrationTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.junit.Test;
 
-public class UrlCheckerUnitTest {
+public class UrlCheckerIntegrationTest {
 
     @Test
     public void givenValidUrl_WhenUsingHEAD_ThenReturn200() throws IOException {
@@ -18,7 +18,7 @@ public void givenValidUrl_WhenUsingHEAD_ThenReturn200() throws IOException {
     @Test
     public void givenInvalidIUrl_WhenUsingHEAD_ThenReturn404() throws IOException {
         UrlChecker tester = new UrlChecker();
-        int responseCode = tester.getResponseCodeForURLUsingHead("http://www.example.com/unkownurl");
+        int responseCode = tester.getResponseCodeForURLUsingHead("http://www.example.com/xyz");
         assertEquals(404, responseCode);
     }
     
@@ -32,7 +32,7 @@ public void givenValidUrl_WhenUsingGET_ThenReturn200() throws IOException {
     @Test
     public void givenInvalidIUrl_WhenUsingGET_ThenReturn404() throws IOException {
         UrlChecker tester = new UrlChecker();
-        int responseCode = tester.getResponseCodeForURL("http://www.example.com/unkownurl");
+        int responseCode = tester.getResponseCodeForURL("http://www.example.com/xyz");
         assertEquals(404, responseCode);
     }
     

File: gradle-modules/gradle-customization/gradle-avro/src/test/java/com.baeldung.avro/AvroCodeGenerationUnitTest.java
Patch:
@@ -39,7 +39,6 @@ void givenUserData_whenJavaClassGeneratedWithTask_thenDataShouldMatch() {
                 .setAge(age)
                 .build();
 
-        // Assertions to verify the values
         assertEquals(petId, pet.getPetId());
         assertEquals(name, pet.getName());
         assertEquals(species, pet.getSpecies());

File: spring-boot-modules/spring-boot-mvc-2/src/main/java/com/baeldung/mime/FooController.java
Patch:
@@ -2,12 +2,9 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.PutMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.ResponseStatus;

File: spring-boot-modules/spring-boot-mvc-2/src/main/java/com/baeldung/springbootmvc/svc/ProductService.java
Patch:
@@ -38,7 +38,7 @@ public Set<Product> findAll() {
     }
 
     public Product save(Product product) {
-        if (StringUtils.isEmpty(product.getName()) || product.getPrice() == 0.0) {
+        if (!StringUtils.hasLength(product.getName()) || product.getPrice() == 0.0) {
             throw new IllegalArgumentException();
         }
         int newId = products.stream()

File: spring-boot-modules/spring-boot-mvc-2/src/main/java/com/baeldung/students/StudentService.java
Patch:
@@ -19,7 +19,7 @@ public class StudentService {
                 new Student(2, "Sebastian","Bach"),
                 new Student(3, "Pablo","Picasso"),
         }).stream()
-        .collect(Collectors.toConcurrentMap(s -> s.getId(), Function.identity()));
+        .collect(Collectors.toConcurrentMap(Student::getId, Function.identity()));
     
     // DB id sequence mock
     private AtomicLong sequence = new AtomicLong(3);

File: spring-boot-modules/spring-boot-mvc-5/src/test/java/com/baeldung/modifyrequest/EscapeHtmlAspectIntegrationTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
+import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit.jupiter.SpringExtension;
@@ -45,6 +46,7 @@ void givenAspect_whenEscapeHtmlAspect_thenEscapeHtml() throws Exception {
 
         mockMvc.perform(MockMvcRequestBuilders.post(URI.create("/save"))
                 .contentType(MediaType.APPLICATION_JSON)
+                .header(HttpHeaders.CONTENT_LENGTH, 100)
                 .content(objectMapper.writeValueAsString(requestBody)))
             .andExpect(MockMvcResultMatchers.status()
                 .isCreated())

File: spring-kafka-2/src/test/java/com/baeldung/spring/kafka/dlt/KafkaDltManualTest.java
Patch:
@@ -34,7 +34,7 @@
     topics = {"payments-fail-on-error-dlt", "payments-retry-on-error-dlt", "payments-no-dlt"}
 )
 @ActiveProfiles("dlt")
-public class KafkaDltIntegrationTest {
+public class KafkaDltManualTest {
     private static final String FAIL_ON_ERROR_TOPIC = "payments-fail-on-error-dlt";
     private static final String RETRY_ON_ERROR_TOPIC = "payments-retry-on-error-dlt";
     private static final String NO_DLT_TOPIC = "payments-no-dlt";

File: libraries-3/src/main/java/com/baeldung/jnats/NatsClient.java
Patch:
@@ -119,7 +119,7 @@ public Subscription subscribeSyncInQueueGroup(String subject, String queueGroup)
         return natsConnection.subscribe(subject, queueGroup);
     }
 
-    public CompletableFuture<Message> makeRequest(String subject, String request) {
+    public CompletableFuture<Message> request(String subject, String request) {
         return natsConnection.request(subject, request.getBytes());
     }
 

File: spring-security-modules/spring-security-web-boot-2/src/main/java/com/baeldung/loginredirect/LoginRedirectApplication.java
Patch:
@@ -5,6 +5,8 @@
 import org.springframework.context.annotation.ImportResource;
 
 @SpringBootApplication
+//Comment this line when you want to use the class definition for defining Spring security rules, LoginRedirectSecurityConfig.
+// Uncomment the annotations from LoginRedirectSecurityConfig.
 @ImportResource({"classpath*:spring-security-login-redirect.xml"})
 class LoginRedirectApplication {
     public static void main(String[] args) {

File: spring-security-modules/spring-security-web-boot-2/src/main/java/com/baeldung/loginredirect/LoginRedirectSecurityConfig.java
Patch:
@@ -13,8 +13,9 @@
 import org.springframework.security.web.SecurityFilterChain;
 import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
 
-@Configuration
-@EnableWebSecurity
+//if you use xsd configuration (spring-security-login-redirect.xml) please comment the annotations from this class, because it will overlap with configuration from this class
+/*@Configuration
+@EnableWebSecurity*/
 class LoginRedirectSecurityConfig {
 
     private static final String LOGIN_USER = "/loginUser";

File: spring-boot-modules/spring-boot-libraries-3/src/test/java/com/baeldung/springmodulith/events/externalization/EventsExternalizationLiveTest.java
Patch:
@@ -55,7 +55,7 @@ static void dynamicProperties(DynamicPropertyRegistry registry) {
     @BeforeEach
     void beforeEach() {
         listener.reset();
-//        repository.deleteAll();
+        repository.deleteAll();
     }
 
     @Test

File: web-modules/jersey/src/test/java/com/baeldung/jersey/exceptionhandling/rest/StocksResourceIntegrationTest.java
Patch:
@@ -41,6 +41,7 @@ protected Application configure() {
         resourceConfig.register(IllegalArgumentExceptionMapper.class);
         resourceConfig.register(ServerExceptionMapper.class);
         resourceConfig.packages("com.baeldung.jersey.exceptionhandling.rest");
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return resourceConfig;
     }
 

File: web-modules/jersey/src/test/java/com/baeldung/jersey/server/GreetingsResourceIntegrationTest.java
Patch:
@@ -4,6 +4,7 @@
 
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import jakarta.ws.rs.core.Application;
@@ -15,6 +16,7 @@ public class GreetingsResourceIntegrationTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return new ResourceConfig(Greetings.class);
     }
 

File: spring-boot-modules/spring-boot-3-2/src/test/java/com/baeldung/restclient/RestClientIntegrationTest.java
Patch:
@@ -15,12 +15,14 @@
 import org.springframework.http.HttpStatusCode;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.web.client.RestClient;
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+@TestPropertySource(locations="classpath:connectiondetails/application-r2dbc.properties")
 public class RestClientIntegrationTest {
 
 	@LocalServerPort
@@ -110,7 +112,7 @@ void shouldPostAndGetArticlesWithErrorHandling() {
 						.uri(uriBase + "/articles/1234")
 						.retrieve()
 						.onStatus(status -> status.value() == 404, (request, response) -> { throw new ArticleNotFoundException(); })
-						.body(new ParameterizedTypeReference<>() {});
+						.body(new ParameterizedTypeReference<String>() {});
 		}).isInstanceOf(ArticleNotFoundException.class);
 	}
 

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/dbview/ShopSaleRepositoryIntegrationTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.dbview;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
@@ -15,6 +16,7 @@
         "spring.jpa.defer-datasource-initialization=true",
         "spring.sql.init.data-locations=classpath:shop-sale-data.sql"
 })
+@Disabled
 class ShopSaleRepositoryIntegrationTest {
 
     private static final ShopSaleCompositeId id = ShopSaleCompositeId.builder()

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/dbview/ShopSaleVidRepositoryIntegrationTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.dbview;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
@@ -15,6 +16,7 @@
         "spring.jpa.defer-datasource-initialization=true",
         "spring.sql.init.data-locations=classpath:shop-sale-data.sql"
 })
+@Disabled
 class ShopSaleVidRepositoryIntegrationTest {
 
     @Autowired

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/listvsset/JsonUtilUnitTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest(classes = {Application.class, TestConfig.class})
-class JsonUtilTest {
+class JsonUtilUnitTest {
 
     @Autowired
     private JsonUtils jsonUtils;

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/listvsset/set/NPlusOneEagerModerateDomainIntegrationTest.java
Patch:
@@ -15,6 +15,8 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
+
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;
@@ -57,6 +59,7 @@ void givenEagerSetBasedGroup_whenFetchingAllGroups_thenCreateCartesianProductInO
         assertSelectCount(1);
     }
 
+    @Disabled
     @ParameterizedTest
     @ValueSource(longs = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
     void givenEagerListBasedGroup_whenRemoveUser_thenIssueOnlyOneDelete(Long groupId) {

File: spring-boot-modules/spring-caching-2/src/main/java/com/baeldung/caching/twolevelcache/CustomerService.java
Patch:
@@ -16,11 +16,11 @@ public CustomerService(CustomerRepository customerRepository) {
     }
 
     @Caching(cacheable = {
-            @Cacheable(cacheNames = "customerCache", cacheManager = "caffeineCacheManager"),
-            @Cacheable(cacheNames = "customerCache", cacheManager = "redisCacheManager")
+      @Cacheable(cacheNames = "customerCache", cacheManager = "caffeineCacheManager"),
+      @Cacheable(cacheNames = "customerCache", cacheManager = "redisCacheManager")
     })
     public Customer getCustomer(String id) {
         return customerRepository.findById(id)
-                .orElseThrow(RuntimeException::new);
+          .orElseThrow(RuntimeException::new);
     }
 }
\ No newline at end of file

File: spring-boot-modules/spring-caching-2/src/main/java/com/baeldung/caching/twolevelcache/TwoLevelCacheApplication.java
Patch:
@@ -2,10 +2,8 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.cache.annotation.EnableCaching;
 
 @SpringBootApplication
-@EnableCaching
 public class TwoLevelCacheApplication {
 
     public static void main(String[] args) {

File: spring-boot-modules/spring-boot-graphql/src/main/java/com/baeldung/graphql/error/handling/controller/VehicleController.java
Patch:
@@ -35,9 +35,9 @@ public Vehicle searchByVin(@Argument String vin) {
     }
 
     @MutationMapping
-    public Vehicle addVehicle(@Argument String vin, @Argument Integer year,
-      @Argument String make, @Argument String model, @Argument String trim,
-      @Argument Location location) {
+    public Vehicle addVehicle(@Argument("vin") String vin, @Argument("year") Integer year,
+      @Argument("make") String make, @Argument("model") String model, @Argument("trim") String trim,
+      @Argument("location") Location location) {
         return this.inventoryService.addVehicle(vin, year, make, model, trim, location);
     }
 }

File: spring-boot-modules/spring-boot-graphql/src/test/java/com/baeldung/graphql/intro/SpringContextTest.java
Patch:
@@ -4,9 +4,9 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest(classes = GraphqlApplication.class)
-public class SpringContextTest {
+class SpringContextTest {
 
     @Test
-    public void whenSpringContextIsBootstrapped_thenNoExceptions() {
+    void whenSpringContextIsBootstrapped_thenNoExceptions() {
     }
 }

File: spring-boot-modules/spring-caching-2/src/main/java/com/baeldung/caching/twolevelcache/Customer.java
Patch:
@@ -1,12 +1,12 @@
 package com.baeldung.caching.twolevelcache;
 
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
 import java.io.Serializable;
 
 @Data

File: spring-boot-modules/spring-caching-2/src/test/java/com/baeldung/caching/redis/ItemServiceCachingIntegrationTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.springframework.test.context.junit.jupiter.SpringExtension;
 import redis.embedded.RedisServer;
 
-import javax.annotation.PostConstruct;
-import javax.annotation.PreDestroy;
+import jakarta.annotation.PostConstruct;
+import jakarta.annotation.PreDestroy;
 import java.io.IOException;
 import java.util.Optional;
 

File: spring-boot-modules/spring-caching-2/src/main/java/com/baeldung/caching/twolevelcache/CacheConfig.java
Patch:
@@ -35,7 +35,7 @@ public CacheManager caffeineCacheManager() {
     @Bean
     public CaffeineCache caffeineCacheConfig() {
         return new CaffeineCache("customerCache", Caffeine.newBuilder()
-                .expireAfterWrite(Duration.ofSeconds(1))
+                .expireAfterWrite(Duration.ofSeconds(3))
                 .initialCapacity(1)
                 .maximumSize(2000)
                 .build());

File: spring-boot-modules/spring-boot-libraries/src/main/java/com/baeldung/boot/problem/configuration/ProblemDemoConfiguration.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.zalando.problem.ProblemModule;
-import org.zalando.problem.validation.ConstraintViolationProblemModule;
+import org.zalando.problem.jackson.ProblemModule;
+import org.zalando.problem.violations.ConstraintViolationProblemModule;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 

File: spring-boot-modules/spring-boot-libraries/src/main/java/com/baeldung/boot/problem/configuration/SecurityConfiguration.java
Patch:
@@ -22,10 +22,11 @@ public class SecurityConfiguration {
     @Bean
     public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
         return http.csrf(AbstractHttpConfigurer::disable)
-            .authorizeHttpRequests(request -> request.requestMatchers(new AntPathRequestMatcher("/"))
+            .authorizeHttpRequests(request -> request.requestMatchers(new AntPathRequestMatcher("/tasks/**"))
                 .permitAll())
             .exceptionHandling(exceptionHandling -> exceptionHandling.authenticationEntryPoint(problemSupport)
                 .accessDeniedHandler(problemSupport))
             .build();
     }
+
 }

File: spring-boot-modules/spring-boot-libraries/src/test/java/com/baeldung/boot/problem/controller/ProblemDemoControllerIntegrationTest.java
Patch:
@@ -10,6 +10,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -64,6 +65,7 @@ public void whenMakePutCall_thenReturnNotImplementedProblemResponse() throws Exc
             .andExpect(status().isNotImplemented());
     }
 
+    @Ignore
     @Test
     public void whenMakeDeleteCall_thenReturnForbiddenProblemResponse() throws Exception {
         mockMvc.perform(delete("/tasks/2").contentType(MediaType.APPLICATION_PROBLEM_JSON_VALUE))

File: spring-security-modules/spring-security-oidc/src/main/java/com/baeldung/openid/oidc/discovery/SpringOidcDiscoveryApplication.java
Patch:
@@ -16,5 +16,4 @@ public static void main(String[] args) {
         application.addInitializers(yamlInitializer);
         application.run(args);
     }
-
 }

File: spring-security-modules/spring-security-oidc/src/main/java/com/baeldung/openid/oidc/jwtauthorities/config/MappingJwtGrantedAuthoritiesConverter.java
Patch:
@@ -54,10 +54,10 @@ protected Collection<String> parseScopesClaim(Jwt jwt) {
         
         if ( this.authoritiesClaimName == null ) {
             scopeClaim = WELL_KNOWN_AUTHORITIES_CLAIM_NAMES.stream()
-              .filter( claim -> jwt.hasClaim(claim))
+              .filter(jwt::hasClaim)
               .findFirst()
               .orElse(null);
-            
+
             if ( scopeClaim == null ) {
                 return Collections.emptyList();
             }
@@ -76,7 +76,7 @@ protected Collection<String> parseScopesClaim(Jwt jwt) {
         }
         else if ( v instanceof Collection ) {
             return ((Collection<?>)v).stream()
-              .map( s -> s.toString())
+              .map(Object::toString)
               .collect(Collectors.toCollection(HashSet::new));
         }        
         return Collections.emptyList();

File: spring-kafka-3/src/main/java/com/baeldung/spring/kafka/start/stop/consumer/UserEventListener.java
Patch:
@@ -15,7 +15,7 @@ public class UserEventListener {
     UserEventStore userEventStore;
 
     @KafkaListener(id = Constants.LISTENER_ID, topics = Constants.MULTI_PARTITION_TOPIC, groupId = "test-group",
-            containerFactory = "kafkaListenerContainerFactory", autoStartup = "false")
+      containerFactory = "kafkaListenerContainerFactory", autoStartup = "false")
     public void processUserEvent(UserEvent userEvent) {
         logger.info("Received UserEvent: " + userEvent.getUserEventId());
         userEventStore.addUserEvent(userEvent);

File: testing-modules/spring-testing/src/main/java/com/baeldung/config/WebConfig.java
Patch:
@@ -5,7 +5,7 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 
-import javax.servlet.ServletContext;
+import jakarta.servlet.ServletContext;
 
 @EnableWebMvc
 @Configuration

File: core-java-modules/core-java-functional/src/main/java/com/baeldung/functional/Currying.java
Patch:
@@ -4,7 +4,7 @@
 
 public class Currying {
 
-    private static Function<Double, Function<Double, Double>> weight = mass -> gravity -> mass * gravity;
+    private static Function<Double, Function<Double, Double>> weight = gravity -> mass -> mass * gravity;
 
     private static Function<Double, Double> weightOnEarth = weight.apply(9.81);
 

File: core-java-modules/core-java-io-apis-2/src/test/java/com/baeldung/inputstream/InputStreamUnitTest.java
Patch:
@@ -42,7 +42,7 @@ public void givenAStringWrittenToFile_whenReadWithFileInputStreamWithStringConst
             .getAbsolutePath();
         try (FileInputStream fis = new FileInputStream(fileAbsolutePath)) {
             int availableBytes = fis.available();
-            assertThat(availableBytes > 0);
+            assertThat(availableBytes).isGreaterThan(0);
             assertThat(readString(fis)).contains(expectedText);
         }
     }

File: spring-boot-modules/spring-boot-ssl-bundles/src/main/java/com/baeldung/springbootsslbundles/SecureRestTemplateConfig.java
Patch:
@@ -27,7 +27,7 @@ public SecureRestTemplateConfig(SslBundles sslBundles) throws NoSuchSslBundleExc
         this.sslContext = sslBundle.createSslContext();
     }
 
-    @Bean
+    @Bean(name="secureRestTemplate")
     public RestTemplate secureRestTemplate() {
         final SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder.create().setSslContext(this.sslContext).build();
         final HttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder.create().setSSLSocketFactory(sslSocketFactory).build();

File: spring-boot-modules/spring-boot-ssl-bundles/src/main/java/com/baeldung/springbootsslbundles/SecureServiceRestApi.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.springbootsslbundles;
 
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Service;
@@ -11,7 +12,7 @@ public class SecureServiceRestApi {
     private final RestTemplate restTemplate;
 
     @Autowired
-    public SecureServiceRestApi(RestTemplate restTemplate) {
+    public SecureServiceRestApi(@Qualifier("secureRestTemplate") RestTemplate restTemplate) {
         this.restTemplate = restTemplate;
     }
 

File: core-java-modules/core-java-functional/src/main/java/com/baeldung/functional/Currying.java
Patch:
@@ -4,7 +4,7 @@
 
 public class Currying {
 
-    private static Function<Double, Function<Double, Double>> weight = mass -> gravity -> mass * gravity;
+    private static Function<Double, Function<Double, Double>> weight = gravity -> mass -> mass * gravity;
 
     private static Function<Double, Double> weightOnEarth = weight.apply(9.81);
 

File: aws-modules/aws-s3/src/test/java/com/baeldung/s3/S3CrudServiceIntegrationTest.java
Patch:
@@ -70,9 +70,9 @@ void whenCreatingAnObjectOnS3Bucket_thenSameObjectIsRetrived() {
         var savedFileContent = s3CrudService.getObject(TEST_BUCKET_NAME, fileToSave.getName());
 
         assertThat(Arrays.equals(fileToSave.getContent()
-          .array(), savedFileContent.orElse(new byte[]{}))).isTrue();
+          .array(), savedFileContent.orElse(new byte[] {}))).isTrue();
 
-        s3CrudService.deleteObject(TEST_BUCKET_NAME,fileToSave.getName());
+        s3CrudService.deleteObject(TEST_BUCKET_NAME, fileToSave.getName());
 
         var deletedFileContent = s3CrudService.getObject(TEST_BUCKET_NAME, fileToSave.getName());
         assertThat(deletedFileContent).isEmpty();

File: spring-security-modules/spring-security-web-angular/spring-security-web-angular-server/src/main/java/com/baeldung/springbootsecurityrest/controller/UserController.java
Patch:
@@ -3,7 +3,7 @@
 import java.security.Principal;
 import java.util.Base64;
 
-import javax.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletRequest;
 
 import org.springframework.web.bind.annotation.CrossOrigin;
 import org.springframework.web.bind.annotation.RequestBody;

File: spring-kafka/src/main/java/com/baeldung/spring/kafka/KafkaConsumerConfig.java
Patch:
@@ -116,7 +116,7 @@ public ConsumerFactory<String, Object> multiTypeConsumerFactory() {
     public ConcurrentKafkaListenerContainerFactory<String, Object> multiTypeKafkaListenerContainerFactory() {
         ConcurrentKafkaListenerContainerFactory<String, Object> factory = new ConcurrentKafkaListenerContainerFactory<>();
         factory.setConsumerFactory(multiTypeConsumerFactory());
-        factory.setMessageConverter(multiTypeConverter());
+        factory.setRecordMessageConverter(multiTypeConverter());
         return factory;
     }
 

File: metrics/src/test/java/com/baeldung/metrics/micrometer/MicrometerAtlasManualTest.java
Patch:
@@ -282,7 +282,7 @@ public void givenTimer_whenEnrichWithTimescaleHistogram_thenTimeScaleDataCollect
         Map<Double, Double> expectedMicrometer = new TreeMap<>();
         expectedMicrometer.put(2.5E7,1D);
         expectedMicrometer.put(3.0E8,1D);
-        expectedMicrometer.put(6.0E8,4D);
+        expectedMicrometer.put(6.0E8,1D);
 
         Map<Double, Double> actualMicrometer = new TreeMap<>();
         HistogramSnapshot snapshot = timer.takeSnapshot();

File: persistence-modules/jooq/src/test/java/com/baeldung/jooq/CodeGenerationIntegrationTest.java
Patch:
@@ -34,15 +34,15 @@ public static void setup() throws SQLException {
         Connection conn = DriverManager.getConnection("jdbc:h2:mem:tes;INIT=CREATE SCHEMA IF NOT EXISTS \"public\"");
         context = DSL.using(conn, SQLDialect.H2);
 
-        context.createTable(Author.AUTHOR)
+        context.createTableIfNotExists(Author.AUTHOR)
             .columns(
                 Author.AUTHOR.ID,
                 Author.AUTHOR.FIRST_NAME,
                 Author.AUTHOR.LAST_NAME,
                 Author.AUTHOR.AGE
             )
             .execute();
-        context.createTable(Article.ARTICLE)
+        context.createTableIfNotExists(Article.ARTICLE)
             .columns(
                 Article.ARTICLE.ID,
                 Article.ARTICLE.TITLE,

File: persistence-modules/jooq/src/test/java/com/baeldung/jooq/CrudIntegrationTest.java
Patch:
@@ -37,15 +37,15 @@ public static void setup() throws SQLException {
         Connection conn = DriverManager.getConnection("jdbc:h2:mem:tes;INIT=CREATE SCHEMA IF NOT EXISTS \"public\"");
         context = DSL.using(conn, SQLDialect.H2);
 
-        context.createTable(Author.AUTHOR)
+        context.createTableIfNotExists(Author.AUTHOR)
                 .columns(
                         Author.AUTHOR.ID,
                         Author.AUTHOR.FIRST_NAME,
                         Author.AUTHOR.LAST_NAME,
                         Author.AUTHOR.AGE
                 )
                 .execute();
-        context.createTable(Article.ARTICLE)
+        context.createTableIfNotExists(Article.ARTICLE)
                 .columns(
                         Article.ARTICLE.ID,
                         Article.ARTICLE.TITLE,

File: core-java-modules/core-java-19/src/main/java/com/baeldung/vectors/VectorAPIExamples.java
Patch:
@@ -63,7 +63,7 @@ public int[] addTwoVectorsWithMasks(int[] arr1, int[] arr2) {
     public float[] scalarNormOfTwoArrays(float[] arr1, float[] arr2) {
         float[] finalResult = new float[arr1.length];
         for (int i = 0; i < arr1.length; i++) {
-            finalResult[i] = (arr1[i] * arr1[i] + arr2[i] * arr2[i]) * -1.0f;
+            finalResult[i] = (float) Math.sqrt(arr1[i] * arr1[i] + arr2[i] * arr2[i]);
         }
         return finalResult;
     }
@@ -77,13 +77,13 @@ public float[] vectorNormalForm(float[] arr1, float[] arr2) {
             var vb = FloatVector.fromArray(PREFERRED_SPECIES, arr2, i);
             var vc = va.mul(va)
               .add(vb.mul(vb))
-              .neg();
+              .sqrt();
             vc.intoArray(finalResult, i);
         }
 
         // tail cleanup
         for (; i < arr1.length; i++) {
-            finalResult[i] = (arr1[i] * arr1[i] + arr2[i] * arr2[i]) * -1.0f;
+            finalResult[i] = (float) Math.sqrt(arr1[i] * arr1[i] + arr2[i] * arr2[i]);
         }
         return finalResult;
     }

File: core-java-modules/core-java-19/src/test/java/com/baeldung/vectors/VectorAPIUnitTest.java
Patch:
@@ -28,15 +28,15 @@ public void whenTwoArraysProvided_thenVerifyVectorAdd() {
     public void whenTwoValuesProvided_thenComputeScalarNorm() {
         float[] arr1 = { 1, 2.3f };
         float[] arr2 = { 1.3f, 2.0f };
-        float[] result = { -2.6899998f, -9.29f };
+        float[] result = { 1.6401219f, 3.047950f };
         Assertions.assertArrayEquals(result, vector.scalarNormOfTwoArrays(arr1, arr2));
     }
 
     @Test
     public void whenTwoValuesProvided_thenComputeVectorNorm() {
         float[] arr1 = { 1, 2.3f };
         float[] arr2 = { 1.3f, 2.0f };
-        float[] result = { -2.6899998f, -9.29f };
+        float[] result = { 1.6401219f, 3.047950f };
         Assertions.assertArrayEquals(result, vector.vectorNormalForm(arr1, arr2));
     }
 

File: spring-kafka-3/src/test/java/com/baeldung/spring/kafka/startstopconsumer/StartStopConsumerUnitTest.java
Patch:
@@ -42,7 +42,7 @@ public class StartStopConsumerUnitTest {
     private static final Logger logger = LoggerFactory.getLogger(StartStopConsumerUnitTest.class);
 
     @Container
-    private static final KafkaContainer KAFKA_CONTAINER = new KafkaContainer(DockerImageName.parse("confluentinc/cp-kafka:latest"));
+    private static KafkaContainer KAFKA_CONTAINER = new KafkaContainer(DockerImageName.parse("confluentinc/cp-kafka:latest"));
 
     @Autowired
     KafkaListenerControlService kafkaListenerControlService;

File: spring-boot-modules/spring-boot-data-3/src/test/java/com/baeldung/skipselectbeforeinsert/SkipSelectBeforeInsertIntegrationTest.java
Patch:
@@ -27,7 +27,6 @@ public class SkipSelectBeforeInsertIntegrationTest {
     private TaskWithGeneratedIdRepository taskWithGeneratedIdRepository;
     @Autowired
     private PersistableTaskRepository persistableTaskRepository;
-
     @Autowired
     private TaskJpaRepository taskJpaRepository;
 

File: core-java-modules/core-java-console/src/test/java/com/baeldung/systemin/SystemInReadUnitTest.java
Patch:
@@ -30,7 +30,7 @@ void givenUserInput_whenUsingReadSingleCharacter_thenRead() {
     }
 
     @Test
-    void givenUserInput_whenUsingReadSingleCharacter_thenReading() {
+    void givenUserInput_whenUsingReadWithParameters_thenRead() {
         System.setIn(new ByteArrayInputStream("ABC".getBytes()));
         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
         System.setOut(new PrintStream(outputStream));

File: core-java-modules/core-java-uuid/src/test/java/com/baeldung/uuid/DecodeUUIDStringFromBase64UnitTest.java
Patch:
@@ -14,7 +14,7 @@ public class DecodeUUIDStringFromBase64UnitTest {
     private final UUID originalUUID = UUID.fromString("cc5f93f7-8cf1-4a51-83c6-e740313a0c6c");
 
     @Test
-    public void shouldDecodeUUIDUsingByteArrayAndBase64Decoder() {
+    public void givenEncodedString_whenDecodingUsingBase64Decoder_thenGiveExpectedUUID() {
         String expectedEncodedString = "UUrxjPeTX8xsDDoxQOfGgw";
         byte[] decodedBytes = Base64.getDecoder()
           .decode(expectedEncodedString);
@@ -23,7 +23,7 @@ public void shouldDecodeUUIDUsingByteArrayAndBase64Decoder() {
     }
 
     @Test
-    public void shouldDecodeUUIDUsingByteBufferAndBase64UrlDecoder() {
+    public void givenEncodedString_whenDecodingUsingByteBufferAndBase64UrlDecoder_thenGiveExpectedUUID() {
         String expectedEncodedString = "zF-T94zxSlGDxudAMToMbA";
         byte[] decodedBytes = Base64.getUrlDecoder()
           .decode(expectedEncodedString);
@@ -35,7 +35,7 @@ public void shouldDecodeUUIDUsingByteBufferAndBase64UrlDecoder() {
     }
 
     @Test
-    public void shouldDecodeUUIDUsingApacheUtils() {
+    public void givenEncodedString_whenDecodingUsingApacheUtils_thenGiveExpectedUUID() {
         String expectedEncodedString = "UUrxjPeTX8xsDDoxQOfGgw";
         byte[] decodedBytes = decodeBase64(expectedEncodedString);
         UUID uuid = Conversion.byteArrayToUuid(decodedBytes, 0);

File: core-java-modules/core-java-uuid/src/test/java/com/baeldung/uuid/EncodeUUIDToBase64StringUnitTest.java
Patch:
@@ -14,7 +14,7 @@ public class EncodeUUIDToBase64StringUnitTest {
     private final UUID originalUUID = UUID.fromString("cc5f93f7-8cf1-4a51-83c6-e740313a0c6c");
 
     @Test
-    public void shouldEncodeUUIDUsingByteArrayAndBase64Encoder() {
+    public void givenUUID_whenEncodingUsingBase64Encoder_thenGiveExpectedEncodedString() {
         String expectedEncodedString = "UUrxjPeTX8xsDDoxQOfGgw";
         byte[] uuidBytes = convertToByteArray(originalUUID);
         String encodedUUID = Base64.getEncoder().withoutPadding()
@@ -23,7 +23,7 @@ public void shouldEncodeUUIDUsingByteArrayAndBase64Encoder() {
     }
 
     @Test
-    public void shouldEncodeUUIDUsingByteBufferAndBase64UrlEncoder() {
+    public void givenUUID_whenEncodingUsingByteBufferAndBase64UrlEncoder_thenGiveExpectedEncodedString() {
         String expectedEncodedString = "zF-T94zxSlGDxudAMToMbA";
         ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[16]);
         byteBuffer.putLong(originalUUID.getMostSignificantBits());
@@ -34,7 +34,7 @@ public void shouldEncodeUUIDUsingByteBufferAndBase64UrlEncoder() {
     }
 
     @Test
-    public void shouldEncodeUUIDUsingApacheUtils() {
+    public void givenUUID_whenEncodingUsingApacheUtils_thenGiveExpectedEncodedString() {
         String expectedEncodedString = "UUrxjPeTX8xsDDoxQOfGgw";
         byte[] bytes = Conversion.uuidToByteArray(originalUUID, new byte[16], 0, 16);
         String encodedUUID = encodeBase64URLSafeString(bytes);

File: core-java-modules/core-java-uuid/src/test/java/com/baeldung/uuid/DecodeUUIDStringFromBase64UnitTest.java
Patch:
@@ -14,7 +14,7 @@ public class DecodeUUIDStringFromBase64UnitTest {
     private final UUID originalUUID = UUID.fromString("cc5f93f7-8cf1-4a51-83c6-e740313a0c6c");
 
     @Test
-    public void shouldDecodeUUIDUsingByteArrayAndBase64Decoder() {
+    public void givenEncodedString_whenDecodingUsingBase64Decoder_thenGiveExpectedUUID() {
         String expectedEncodedString = "UUrxjPeTX8xsDDoxQOfGgw";
         byte[] decodedBytes = Base64.getDecoder()
           .decode(expectedEncodedString);
@@ -23,7 +23,7 @@ public void shouldDecodeUUIDUsingByteArrayAndBase64Decoder() {
     }
 
     @Test
-    public void shouldDecodeUUIDUsingByteBufferAndBase64UrlDecoder() {
+    public void givenEncodedString_whenDecodingUsingByteBufferAndBase64UrlDecoder_thenGiveExpectedUUID() {
         String expectedEncodedString = "zF-T94zxSlGDxudAMToMbA";
         byte[] decodedBytes = Base64.getUrlDecoder()
           .decode(expectedEncodedString);
@@ -35,7 +35,7 @@ public void shouldDecodeUUIDUsingByteBufferAndBase64UrlDecoder() {
     }
 
     @Test
-    public void shouldDecodeUUIDUsingApacheUtils() {
+    public void givenEncodedString_whenDecodingUsingApacheUtils_thenGiveExpectedUUID() {
         String expectedEncodedString = "UUrxjPeTX8xsDDoxQOfGgw";
         byte[] decodedBytes = decodeBase64(expectedEncodedString);
         UUID uuid = Conversion.byteArrayToUuid(decodedBytes, 0);

File: core-java-modules/core-java-uuid/src/test/java/com/baeldung/uuid/EncodeUUIDToBase64StringUnitTest.java
Patch:
@@ -14,7 +14,7 @@ public class EncodeUUIDToBase64StringUnitTest {
     private final UUID originalUUID = UUID.fromString("cc5f93f7-8cf1-4a51-83c6-e740313a0c6c");
 
     @Test
-    public void shouldEncodeUUIDUsingByteArrayAndBase64Encoder() {
+    public void givenUUID_whenEncodingUsingBase64Encoder_thenGiveExpectedEncodedString() {
         String expectedEncodedString = "UUrxjPeTX8xsDDoxQOfGgw";
         byte[] uuidBytes = convertToByteArray(originalUUID);
         String encodedUUID = Base64.getEncoder().withoutPadding()
@@ -23,7 +23,7 @@ public void shouldEncodeUUIDUsingByteArrayAndBase64Encoder() {
     }
 
     @Test
-    public void shouldEncodeUUIDUsingByteBufferAndBase64UrlEncoder() {
+    public void givenUUID_whenEncodingUsingByteBufferAndBase64UrlEncoder_thenGiveExpectedEncodedString() {
         String expectedEncodedString = "zF-T94zxSlGDxudAMToMbA";
         ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[16]);
         byteBuffer.putLong(originalUUID.getMostSignificantBits());
@@ -34,7 +34,7 @@ public void shouldEncodeUUIDUsingByteBufferAndBase64UrlEncoder() {
     }
 
     @Test
-    public void shouldEncodeUUIDUsingApacheUtils() {
+    public void givenUUID_whenEncodingUsingApacheUtils_thenGiveExpectedEncodedString() {
         String expectedEncodedString = "UUrxjPeTX8xsDDoxQOfGgw";
         byte[] bytes = Conversion.uuidToByteArray(originalUUID, new byte[16], 0, 16);
         String encodedUUID = encodeBase64URLSafeString(bytes);

File: spring-security-modules/spring-security-web-thymeleaf/src/main/java/com/baeldung/customuserdetails/CustomUserDetailsService.java
Patch:
@@ -7,7 +7,7 @@
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.stereotype.Service;
 
-import javax.annotation.PostConstruct;
+import jakarta.annotation.PostConstruct;
 
 import java.util.Collections;
 import java.util.HashMap;

File: core-java-modules/core-java-uuid/src/test/java/com/baeldung/uuid/DecodeUUIDStringFromBase64UnitTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.apache.commons.lang3.Conversion;
 import org.junit.jupiter.api.Test;
 
-public class DecodeUUIDStringFromBase64Test {
+public class DecodeUUIDStringFromBase64UnitTest {
     private final UUID originalUUID = UUID.fromString("cc5f93f7-8cf1-4a51-83c6-e740313a0c6c");
 
     @Test

File: core-java-modules/core-java-uuid/src/test/java/com/baeldung/uuid/EncodeUUIDToBase64StringUnitTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.apache.commons.lang3.Conversion;
 import org.junit.jupiter.api.Test;
 
-public class EncodeUUIDToBase64StringTest {
+public class EncodeUUIDToBase64StringUnitTest {
     private final UUID originalUUID = UUID.fromString("cc5f93f7-8cf1-4a51-83c6-e740313a0c6c");
 
     @Test

File: testing-modules/junit5-migration/src/test/java/com/baeldung/junit5vstestng/CalculatorUnitTest.java
Patch:
@@ -4,10 +4,10 @@
 
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-public class CalculatorUnitTest {
+class CalculatorUnitTest {
 
     @Test
-    public void whenDividerIsZero_thenDivideByZeroExceptionIsThrown() {
+    void whenDividerIsZero_thenDivideByZeroExceptionIsThrown() {
         Calculator calculator = new Calculator();
 
         assertThrows(DivideByZeroException.class,

File: testing-modules/junit5-migration/src/test/java/com/baeldung/junit5vstestng/CustomNameUnitTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;
 
-public class CustomNameUnitTest {
+class CustomNameUnitTest {
 
     @ParameterizedTest
     @ValueSource(strings = { "Hello", "World" })

File: testing-modules/junit5-migration/src/test/java/com/baeldung/junit5vstestng/ParameterizedUnitTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.jupiter.params.provider.MethodSource;
 import org.junit.jupiter.params.provider.ValueSource;
 
-public class ParameterizedUnitTest {
+class ParameterizedUnitTest {
 
     @ParameterizedTest
     @ValueSource(strings = { "Hello", "World" })

File: testing-modules/junit5-migration/src/test/java/com/baeldung/junit5vstestng/SelectClassesSuiteUnitTest.java
Patch:
@@ -5,6 +5,6 @@
 
 @Suite
 @SelectClasses({Class1UnitTest.class, Class2UnitTest.class})
-public class SelectClassesSuiteUnitTest {
+class SelectClassesSuiteUnitTest {
 
 }

File: testing-modules/junit5-migration/src/test/java/com/baeldung/junit5vstestng/SelectPackagesSuiteUnitTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.platform.suite.api.Suite;
 
 @Suite
-@SelectPackages({ "com.baeldung.java.suite.junit4", "com.baeldung.java.suite.junit5" })
-public class SelectPackagesSuiteUnitTest {
+@SelectPackages({ "com.baeldung.junit4", "com.baeldung.junit5" })
+class SelectPackagesSuiteUnitTest {
 
 }

File: persistence-modules/spring-boot-persistence-4/src/main/java/com/baeldung/listvsset/Service.java
Patch:
@@ -50,7 +50,7 @@ public Optional<S> getUserByIdWithPredicate(long id, Predicate<S> predicate) {
     public int getUserByIdWithFunction(Long id, ToIntFunction<S> function) {
 
         Optional<S> optionalUser = repository.findById(id);
-        if(optionalUser.isPresent()) {
+        if (optionalUser.isPresent()) {
             return function.applyAsInt(optionalUser.get());
         } else {
             return 0;

File: persistence-modules/spring-boot-persistence-4/src/main/java/com/baeldung/listvsset/lazy/list/moderatedomain/GroupService.java
Patch:
@@ -25,6 +25,7 @@ public Optional<Group> findById(Long aLong) {
     public List<Group> findAll() {
         return groupRepository.findAll();
     }
+
     public int countNumberOfRequestsWithFunction(ToIntFunction<List<Group>> function) {
         return function.applyAsInt(groupRepository.findAll());
     }

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/listvsset/BaseNPlusOneIntegrationTest.java
Patch:
@@ -58,16 +58,16 @@ void tearDown() {
 
     @Test
     void givenCorrectConfigurationWhenStartContextThenRepositoryIsPresent() {
-        assertThat(getService()).isNotNull();
+        assertThat(getUserService()).isNotNull();
     }
 
     @Test
     void givenCorrectDatabaseWhenStartThenDatabaseIsNotEmpty() {
-        List<?> result = getService().findAll();
+        List<?> result = getUserService().findAll();
         assertThat(result).isNotEmpty();
     }
 
-    protected Service<T> getService() {
+    protected Service<T> getUserService() {
         Class<T> parametrization = getParametrizationClass().get(0);
         return (Service<T>) serviceMap.get(parametrization);
     }

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/listvsset/lazy/list/NPlusOneLazyModerateDomainIntegrationTest.java
Patch:
@@ -31,14 +31,14 @@ class NPlusOneLazyModerateDomainIntegrationTest extends BaseNPlusOneIntegrationT
 
     @Test
     void givenLazyListBasedUser_whenFetchingAllUsers_thenIssueOneRequest() {
-        getService().findAll();
+        getUserService().findAll();
         assertSelectCount(1);
     }
 
     @ParameterizedTest
     @ValueSource(longs = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
     void givenLazyListBasedUser_whenFetchingOneUser_thenIssueOneRequest(Long id) {
-        getService().getUserById(id);
+        getUserService().getUserById(id);
         assertSelectCount(1);
     }
 

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/listvsset/lazy/list/NPlusOneLazySimpleDomainIntegrationTest.java
Patch:
@@ -22,13 +22,13 @@ class NPlusOneLazySimpleDomainIntegrationTest extends BaseNPlusOneIntegrationTes
 
     @Test
     void givenLazyListBasedUser_WhenFetchingAllUsers_ThenIssueOneRequests() {
-        getService().findAll();
+        getUserService().findAll();
         assertSelectCount(1);
     }
 
     @Test
     void givenLazyListBasedUser_WhenFetchingAllUsersCheckingPosts_ThenIssueNPlusOneRequests() {
-        int numberOfRequests = getService().countNumberOfRequestsWithFunction(users -> {
+        int numberOfRequests = getUserService().countNumberOfRequestsWithFunction(users -> {
             List<List<Post>> usersWithPosts
               = users.stream()
               .map(User::getPosts)
@@ -42,7 +42,7 @@ void givenLazyListBasedUser_WhenFetchingAllUsersCheckingPosts_ThenIssueNPlusOneR
     @ParameterizedTest
     @ValueSource(longs = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
     void givenLazyListBasedUser_WhenFetchingOneUser_ThenIssueTwoRequest(Long id) {
-        getService().getUserByIdWithPredicate(id, user -> !user.getPosts().isEmpty());
+        getUserService().getUserByIdWithPredicate(id, user -> !user.getPosts().isEmpty());
         assertSelectCount(2);
     }
 

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/listvsset/list/NPlusOneEagerFullDomainIntegrationTest.java
Patch:
@@ -37,7 +37,7 @@ class NPlusOneEagerFullDomainIntegrationTest extends BaseNPlusOneIntegrationTest
     @ParameterizedTest
     @MethodSource
     void givenEagerListBasedUser_WhenFetchingAllUsers_ThenIssueNPlusOneRequests(ToIntFunction<List<User>> function) {
-        int numberOfRequests = getService().countNumberOfRequestsWithFunction(function);
+        int numberOfRequests = getUserService().countNumberOfRequestsWithFunction(function);
         assertSelectCount(numberOfRequests);
     }
 
@@ -58,7 +58,7 @@ static Stream<Arguments> givenEagerListBasedUser_WhenFetchingAllUsers_ThenIssueN
     @ParameterizedTest
     @ValueSource(longs = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
     void givenEagerListBasedUser_WhenFetchingOneUser_ThenUseDFS(Long id) {
-        int numberOfRequests = getService().getUserByIdWithFunction(id, this::countNumberOfRequests);
+        int numberOfRequests = getUserService().getUserByIdWithFunction(id, this::countNumberOfRequests);
         assertSelectCount(numberOfRequests);
     }
 

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/listvsset/list/NPlusOneEagerModerateDomainIntegrationTest.java
Patch:
@@ -34,14 +34,14 @@ class NPlusOneEagerModerateDomainIntegrationTest extends BaseNPlusOneIntegration
 
     @Test
     void givenEagerListBasedUser_whenFetchingAllUsers_thenIssueNPlusOneRequests() {
-        List<User> users = getService().findAll();
+        List<User> users = getUserService().findAll();
         assertSelectCount(users.size() + 1);
     }
 
     @ParameterizedTest
     @ValueSource(longs = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
     void givenEagerListBasedUser_whenFetchingOneUser_thenIssueOneRequest(Long id) {
-        getService().getUserById(id);
+        getUserService().getUserById(id);
         assertSelectCount(1);
     }
 

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/listvsset/set/NPlusOneEagerFullDomainJoinIntegrationTest.java
Patch:
@@ -33,7 +33,7 @@ class NPlusOneEagerFullDomainJoinIntegrationTest extends BaseNPlusOneIntegration
 
     @Test
     void givenEagerSetBasedUser_WhenFetchingAllUsers_ThenIssueNPlusOneRequests() {
-        List<User> users = getService().findAll();
+        List<User> users = getUserService().findAll();
         assertSelectCount(users.size() + 1);
     }
 
@@ -43,7 +43,7 @@ void givenEagerUserWhenFetchingOneUserThenIssueNPlusOneRequestsWithCartesianProd
         HashMap<String, Set<Long>> visitedMap = new HashMap<>();
         visitedMap.put(POSTS, new HashSet<>());
         visitedMap.put(USERS, new HashSet<>());
-        int numberOfRequests = getService()
+        int numberOfRequests = getUserService()
           .getUserByIdWithFunction(id, user -> {
               int result = 1;
               visitedMap.get(USERS).add(user.getId());

File: persistence-modules/spring-boot-persistence-4/src/test/java/com/baeldung/listvsset/set/NPlusOneEagerModerateDomainIntegrationTest.java
Patch:
@@ -33,14 +33,14 @@ class NPlusOneEagerModerateDomainIntegrationTest extends BaseNPlusOneIntegration
 
     @Test
     void givenEagerSetBasedUser_whenFetchingAllUsers_thenIssueNPlusOneRequests() {
-        List<User> users = getService().findAll();
+        List<User> users = getUserService().findAll();
         assertSelectCount(users.size() + 1);
     }
 
     @ParameterizedTest
     @ValueSource(longs = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
     void givenEagerSetBasedUser_whenFetchingOneUser_thenIssueOneRequest(Long id) {
-        getService().getUserById(id);
+        getUserService().getUserById(id);
         assertSelectCount(1);
     }
 

File: core-java-modules/core-java-regex-3/src/test/java/com/baeldung/passwordvalidation/PasswordValidationUsingRegexUnitTest.java
Patch:
@@ -15,8 +15,8 @@ public void givenStringPassword_whenUsingDynamicPasswordValidationRules_thenChec
         boolean result = false;
         try {
             if (password != null) {
-                String MIN_LENGHT = "8";
-                String MAX_LENGHT = "20";
+                String MIN_LENGTH = "8";
+                String MAX_LENGTH = "20";
                 boolean SPECIAL_CHAR_NEEDED = false;
 
                 String ONE_DIGIT = "(?=.*[0-9])";
@@ -25,7 +25,7 @@ public void givenStringPassword_whenUsingDynamicPasswordValidationRules_thenChec
                 String SPECIAL_CHAR = SPECIAL_CHAR_NEEDED ? "(?=.*[@#$%^&+=])" : "";
                 String NO_SPACE = "(?=\\S+$)";
 
-                String MIN_MAX_CHAR = ".{" + MIN_LENGHT + "," + MAX_LENGHT + "}";
+                String MIN_MAX_CHAR = ".{" + MIN_LENGTH + "," + MAX_LENGTH + "}";
                 String PATTERN = ONE_DIGIT + LOWER_CASE + UPPER_CASE + SPECIAL_CHAR + NO_SPACE + MIN_MAX_CHAR;
 
                 assertTrue(password.matches(PATTERN));

File: spring-web-modules/spring-resttemplate/src/main/java/com/baeldung/resttemplate/configuration/SpringConfig.java
Patch:
@@ -7,7 +7,6 @@
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.DependsOn;
-import org.springframework.web.client.RestTemplate;
 
 @Configuration
 @EnableAutoConfiguration

File: spring-web-modules/spring-resttemplate/src/main/java/com/baeldung/sampleapp/web/controller/MyFooController.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.servlet.http.HttpServletResponse;
+import jakarta.servlet.http.HttpServletResponse;
 
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;

File: spring-reactive-modules/spring-reactive-3/src/main/java/com/baeldung/custom/deserialization/controller/OrderController.java
Patch:
@@ -23,13 +23,13 @@ public OrderController(ExternalServiceV1 externalServiceV1, ExternalServiceV2 ex
     }
 
     @GetMapping(value = "v1/order/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
-    public Mono<OrderResponse> searchOrderV1(@PathVariable(value = "id") int id) {
+    public final Mono<OrderResponse> searchOrderV1(@PathVariable(value = "id") int id) {
         return externalServiceV1.findById(id)
             .bodyToMono(OrderResponse.class);
     }
 
     @GetMapping(value = "v2/order/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
-    public Mono<OrderResponse> searchOrderV2(@PathVariable(value = "id") int id) {
+    public final Mono<OrderResponse> searchOrderV2(@PathVariable(value = "id") int id) {
         return externalServiceV2.findById(id)
             .bodyToMono(OrderResponse.class);
     }

File: messaging-modules/rabbitmq/src/main/java/com/baeldung/pubsubmq/server/Publisher.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.amqp.rabbit.core.RabbitTemplate;
 
-import javax.annotation.PostConstruct;
+import jakarta.annotation.PostConstruct;
 
 public class Publisher {
 

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/dlt/listener/PaymentListenerDltFailOnError.java
Patch:
@@ -17,7 +17,7 @@ public class PaymentListenerDltFailOnError {
     private final Logger log = LoggerFactory.getLogger(PaymentListenerDltFailOnError.class);
 
     @RetryableTopic(attempts = "1", kafkaTemplate = "retryableTopicKafkaTemplate", dltStrategy = DltStrategy.FAIL_ON_ERROR)
-    @KafkaListener(topics = { "payments-fail-on-error-dlt" }, groupId = "payments")
+    @KafkaListener(topics = { "payments-fail-on-error-dlt" }, groupId = "payments", containerFactory="containerFactory")
     public void handlePayment(Payment payment, @Header(KafkaHeaders.RECEIVED_TOPIC) String topic) {
         log.info("Event on main topic={}, payload={}", topic, payment);
     }

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/dlt/listener/PaymentListenerDltRetryOnError.java
Patch:
@@ -17,7 +17,7 @@ public class PaymentListenerDltRetryOnError {
     private final Logger log = LoggerFactory.getLogger(PaymentListenerDltRetryOnError.class);
 
     @RetryableTopic(attempts = "1", kafkaTemplate = "retryableTopicKafkaTemplate", dltStrategy = DltStrategy.ALWAYS_RETRY_ON_ERROR)
-    @KafkaListener(topics = { "payments-retry-on-error-dlt" }, groupId = "payments")
+    @KafkaListener(topics = { "payments-retry-on-error-dlt" }, groupId = "payments", containerFactory="containerFactory")
     public void handlePayment(Payment payment, @Header(KafkaHeaders.RECEIVED_TOPIC) String topic) {
         log.info("Event on main topic={}, payload={}", topic, payment);
     }

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/dlt/listener/PaymentListenerNoDlt.java
Patch:
@@ -17,7 +17,7 @@ public class PaymentListenerNoDlt {
     private final Logger log = LoggerFactory.getLogger(PaymentListenerNoDlt.class);
 
     @RetryableTopic(attempts = "1", kafkaTemplate = "retryableTopicKafkaTemplate", dltStrategy = DltStrategy.NO_DLT)
-    @KafkaListener(topics = { "payments-no-dlt" }, groupId = "payments")
+    @KafkaListener(topics = { "payments-no-dlt" }, groupId = "payments", containerFactory="containerFactory")
     public void handlePayment(Payment payment, @Header(KafkaHeaders.RECEIVED_TOPIC) String topic) {
         log.info("Event on main topic={}, payload={}", topic, payment);
     }

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/dlt/listener/PaymentListenerDltFailOnError.java
Patch:
@@ -17,7 +17,7 @@ public class PaymentListenerDltFailOnError {
     private final Logger log = LoggerFactory.getLogger(PaymentListenerDltFailOnError.class);
 
     @RetryableTopic(attempts = "1", kafkaTemplate = "retryableTopicKafkaTemplate", dltStrategy = DltStrategy.FAIL_ON_ERROR)
-    @KafkaListener(topics = { "payments-fail-on-error-dlt" }, groupId = "payments")
+    @KafkaListener(topics = { "payments-fail-on-error-dlt" }, groupId = "payments", containerFactory="containerFactory")
     public void handlePayment(Payment payment, @Header(KafkaHeaders.RECEIVED_TOPIC) String topic) {
         log.info("Event on main topic={}, payload={}", topic, payment);
     }

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/dlt/listener/PaymentListenerDltRetryOnError.java
Patch:
@@ -17,7 +17,7 @@ public class PaymentListenerDltRetryOnError {
     private final Logger log = LoggerFactory.getLogger(PaymentListenerDltRetryOnError.class);
 
     @RetryableTopic(attempts = "1", kafkaTemplate = "retryableTopicKafkaTemplate", dltStrategy = DltStrategy.ALWAYS_RETRY_ON_ERROR)
-    @KafkaListener(topics = { "payments-retry-on-error-dlt" }, groupId = "payments")
+    @KafkaListener(topics = { "payments-retry-on-error-dlt" }, groupId = "payments", containerFactory="containerFactory")
     public void handlePayment(Payment payment, @Header(KafkaHeaders.RECEIVED_TOPIC) String topic) {
         log.info("Event on main topic={}, payload={}", topic, payment);
     }

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/dlt/listener/PaymentListenerNoDlt.java
Patch:
@@ -17,7 +17,7 @@ public class PaymentListenerNoDlt {
     private final Logger log = LoggerFactory.getLogger(PaymentListenerNoDlt.class);
 
     @RetryableTopic(attempts = "1", kafkaTemplate = "retryableTopicKafkaTemplate", dltStrategy = DltStrategy.NO_DLT)
-    @KafkaListener(topics = { "payments-no-dlt" }, groupId = "payments")
+    @KafkaListener(topics = { "payments-no-dlt" }, groupId = "payments", containerFactory="containerFactory")
     public void handlePayment(Payment payment, @Header(KafkaHeaders.RECEIVED_TOPIC) String topic) {
         log.info("Event on main topic={}, payload={}", topic, payment);
     }

File: spring-security-modules/spring-security-core-2/src/main/java/com/baeldung/authresolver/CustomWebSecurityConfigurer.java
Patch:
@@ -1,7 +1,8 @@
 package com.baeldung.authresolver;
 
 import java.util.Collections;
-import javax.servlet.http.HttpServletRequest;
+
+import jakarta.servlet.http.HttpServletRequest;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.authentication.AuthenticationManager;

File: core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestMethodOrder;
 import org.springframework.jndi.JndiTemplate;
-import org.springframework.mock.jndi.SimpleNamingContextBuilder;
+import org.springframework.mock.jndi.*;
 
 @TestMethodOrder(MethodOrderer.OrderAnnotation.class)
 public class JndiExceptionsUnitTest {

File: jackson-modules/jackson-custom-conversions/src/test/java/com/baeldung/defaultserializercustomserializer/CallingDefaultSerializerUnitTest.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.List;
 import java.util.Map;
 
+import com.fasterxml.jackson.core.exc.StreamConstraintsException;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -115,7 +116,7 @@ public void givenFolder_whenSerializedWithInternalObjectMapper_onlyNameAndFilesF
 
     }
 
-    @Test(expected = StackOverflowError.class)
+    @Test(expected = StreamConstraintsException.class)
     public void givenFolder_whenSerializedWithCallingOwnSerializer_exceptionOccured() throws IOException {
 
         SimpleModule module = new SimpleModule();

File: persistence-modules/hibernate-exceptions/src/main/java/com/baeldung/hibernate/exception/persistentobject/HibernateUtil.java
Patch:
@@ -11,6 +11,7 @@
 import com.baeldung.hibernate.exception.persistentobject.entity.Article;
 import com.baeldung.hibernate.exception.persistentobject.entity.Author;
 import com.baeldung.hibernate.exception.persistentobject.entity.Book;
+import com.baeldung.hibernate.namedparameternotbound.Person;
 
 public class HibernateUtil {
     private static SessionFactory sessionFactory;
@@ -34,6 +35,7 @@ public static SessionFactory getSessionFactory() {
                 configuration.addAnnotatedClass(Book.class);
                 configuration.addAnnotatedClass(Author.class);
                 configuration.addAnnotatedClass(Article.class);
+                configuration.addAnnotatedClass(Person.class);
 
                 ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
                         .applySettings(configuration.getProperties()).build();

File: persistence-modules/fauna/src/main/java/com/baeldung/faunablog/posts/PostsController.java
Patch:
@@ -6,7 +6,6 @@
 import org.springframework.security.access.prepost.PreAuthorize;
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.web.bind.annotation.*;
-import org.springframework.web.server.ResponseStatusException;
 
 import java.util.List;
 import java.util.concurrent.ExecutionException;

File: persistence-modules/fauna/src/main/java/com/baeldung/faunablog/posts/PostsService.java
Patch:
@@ -6,7 +6,6 @@
 import org.springframework.stereotype.Component;
 
 import java.time.Instant;
-import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.stream.Collectors;

File: spring-ai/src/main/java/com/baeldung/spring/ai/dto/PoetryDto.java
Patch:
@@ -1,3 +1,3 @@
 package com.baeldung.spring.ai.dto;
 
-public record PoetryDto (String title, String poetry, String genre, String theme){}
+public record PoetryDto (String title, String poetry, String genre, String theme) {}

File: spring-ai/src/main/java/com/baeldung/spring/ai/service/impl/PoetryServiceImpl.java
Patch:
@@ -32,12 +32,12 @@ public String getCatHaiku() {
     public PoetryDto getPoetryByGenreAndTheme(String genre, String theme) {
         BeanOutputParser<PoetryDto> poetryDtoBeanOutputParser = new BeanOutputParser<>(PoetryDto.class);
 
-        String promtString = """
+        String promptString = """
                 Write me {genre} poetry about {theme}
                 {format}
                 """;
 
-        PromptTemplate promptTemplate = new PromptTemplate(promtString);
+        PromptTemplate promptTemplate = new PromptTemplate(promptString);
         promptTemplate.add("genre", genre);
         promptTemplate.add("theme", theme);
         promptTemplate.add("format", poetryDtoBeanOutputParser.getFormat());

File: spring-kafka/src/main/java/com/baeldung/partitioningstrategy/KafkaMessageConsumer.java
Patch:
@@ -18,6 +18,7 @@ public class KafkaMessageConsumer {
     @KafkaListener(topics = { "order-topic", "default-topic" }, groupId = "test-group")
     public void listen(@Payload String message, @Header(KafkaHeaders.RECEIVED_PARTITION) int partition, @Header(KafkaHeaders.RECEIVED_KEY) @Nullable String key) {
         ReceivedMessage receivedMessage = new ReceivedMessage(key, message, partition);
+        System.out.println("Received message: " + receivedMessage);
         receivedMessages.add(receivedMessage);
     }
 

File: spring-kafka/src/main/java/com/baeldung/partitioningstrategy/CustomPartitioner.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.partitioningstrategy;
 
 import java.util.Map;
+
 import org.apache.kafka.clients.producer.Partitioner;
 import org.apache.kafka.common.Cluster;
 

File: spring-kafka/src/main/java/com/baeldung/partitioningstrategy/KafkaProducer.java
Patch:
@@ -16,7 +16,7 @@ public void send(String topic, String key, String message) {
         kafkaTemplate.send(topic, key, message);
     }
 
-    public void send(String topic,  String message) {
+    public void send(String topic, String message) {
         kafkaTemplate.send(topic, message);
     }
 }
\ No newline at end of file

File: persistence-modules/spring-boot-persistence-3/src/main/java/com/baeldung/dsrouting/ClientDatabase.java
Patch:
@@ -1,7 +1,5 @@
 package com.baeldung.dsrouting;
 
 public enum ClientDatabase {
-
     CLIENT_A, CLIENT_B
-
 }

File: persistence-modules/spring-boot-persistence-3/src/main/java/com/baeldung/largeresultset/LargeResultSetApplication.java
Patch:
@@ -5,7 +5,6 @@
 
 @SpringBootApplication
 public class LargeResultSetApplication {
-
     public static void main(String[] args) {
         SpringApplication.run(LargeResultSetApplication.class, args);
     }

File: persistence-modules/spring-boot-persistence-3/src/main/java/com/baeldung/largeresultset/service/StudentService.java
Patch:
@@ -3,8 +3,6 @@
 import java.util.List;
 import java.util.stream.Stream;
 
-import javax.persistence.EntityManager;
-
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.PageRequest;
 import org.springframework.data.domain.Slice;
@@ -14,6 +12,8 @@
 import com.baeldung.largeresultset.Student;
 import com.baeldung.largeresultset.StudentRepository;
 
+import jakarta.persistence.EntityManager;
+
 @Service
 public class StudentService {
     private static final int BATCH_SIZE = 5;

File: persistence-modules/spring-boot-persistence-3/src/test/java/com/baeldung/boot/countrows/accountstatslogic/AccountStatsUnitTest.java
Patch:
@@ -4,9 +4,7 @@
 
 import java.sql.Timestamp;
 import java.text.ParseException;
-import java.text.SimpleDateFormat;
 import java.time.Instant;
-import java.util.Date;
 import java.util.UUID;
 
 import org.junit.jupiter.api.AfterEach;

File: persistence-modules/spring-data-jpa-repo/src/main/java/com/baeldung/jpa/domain/Foo.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.repository;
+package com.baeldung.jpa.domain;
 
 import java.io.Serializable;
 

File: persistence-modules/spring-data-jpa-repo/src/main/java/com/baeldung/jpa/domain/Passenger.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.entity;
+package com.baeldung.jpa.domain;
 
 import javax.persistence.Basic;
 import javax.persistence.Column;

File: persistence-modules/spring-data-jpa-repo/src/main/java/com/baeldung/jpa/domain/Song.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.entity;
+package com.baeldung.jpa.domain;
 
 import javax.persistence.Column;
 import javax.persistence.Entity;

File: persistence-modules/spring-data-jpa-repo/src/main/java/com/baeldung/jpa/repository/IFooDAO.java
Patch:
@@ -1,9 +1,10 @@
-package com.baeldung.repository;
+package com.baeldung.jpa.repository;
 
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
-import org.springframework.stereotype.Repository;
+
+import com.baeldung.jpa.domain.Foo;
 
 public interface IFooDAO extends JpaRepository<Foo, Long> {
 

File: persistence-modules/spring-data-jpa-repo/src/main/java/com/baeldung/jpa/repository/PassengerRepository.java
Patch:
@@ -1,13 +1,13 @@
-package com.baeldung.repository;
+package com.baeldung.jpa.repository;
 
-import com.baeldung.entity.Passenger;
+import com.baeldung.jpa.domain.Passenger;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
 import java.util.List;
 
 @Repository
-interface PassengerRepository extends JpaRepository<Passenger, Long> {
+public interface PassengerRepository extends JpaRepository<Passenger, Long> {
 
     List<Passenger> findByFirstNameIgnoreCase(String firstName);
 

File: persistence-modules/spring-data-jpa-repo/src/main/java/com/baeldung/jpa/repository/SongRepository.java
Patch:
@@ -1,11 +1,11 @@
-package com.baeldung.repository;
+package com.baeldung.jpa.repository;
 
 import java.util.List;
 
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
-import com.baeldung.entity.Song;
+import com.baeldung.jpa.domain.Song;
 
 @Repository
 public interface SongRepository extends JpaRepository<Song, Long> {

File: persistence-modules/spring-data-jpa-repo/src/test/java/com/baeldung/boot/daos/ExtendedStudentRepositoryIntegrationTest.java
Patch:
@@ -13,11 +13,11 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.baeldung.Application;
+import com.baeldung.boot.BootApplication;
 import com.baeldung.boot.domain.Student;
 
 @RunWith(SpringRunner.class)
-@ContextConfiguration(classes = {Application.class})
+@ContextConfiguration(classes = { BootApplication.class})
 @DirtiesContext
 public class ExtendedStudentRepositoryIntegrationTest {
     @Resource

File: persistence-modules/spring-data-jpa-repo/src/test/java/com/baeldung/boot/daos/InventoryRepositoryIntegrationTest.java
Patch:
@@ -15,11 +15,11 @@
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.transaction.annotation.Transactional;
 
-import com.baeldung.Application;
+import com.baeldung.boot.BootApplication;
 import com.baeldung.boot.domain.MerchandiseEntity;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = Application.class)
+@SpringBootTest(classes = BootApplication.class)
 public class InventoryRepositoryIntegrationTest {
 
     private static final String ORIGINAL_TITLE = "Pair of Pants";

File: apache-kafka/src/test/java/com/baeldung/flink/BackupCreatorUnitTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 
-public class BackupCreatorIntegrationTest {
+public class BackupCreatorUnitTest {
     public static ObjectMapper mapper;
 
     @Before

File: apache-kafka/src/test/java/com/baeldung/flink/WordCapitalizerUnitTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-public class WordCapitalizerIntegrationTest {
+public class WordCapitalizerUnitTest {
 
     @Test
     public void givenDataSet_whenExecuteWordCapitalizer_thenReturnCapitalizedWords() throws Exception {

File: jhipster-modules/jhipster-microservice/car-app/src/main/java/com/car/app/security/jwt/TokenProvider.java
Patch:
@@ -70,7 +70,7 @@ public String createToken(Authentication authentication, Boolean rememberMe) {
 
     public Authentication getAuthentication(String token) {
         Claims claims = Jwts.parser()
-            .setSigningKey(secretKey)
+            .setSigningKey(secretKey).build()
             .parseClaimsJws(token)
             .getBody();
 
@@ -86,7 +86,7 @@ public Authentication getAuthentication(String token) {
 
     public boolean validateToken(String authToken) {
         try {
-            Jwts.parser().setSigningKey(secretKey).parseClaimsJws(authToken);
+            Jwts.parser().setSigningKey(secretKey).build().parseClaimsJws(authToken);
             return true;
         } catch (SignatureException e) {
             log.info("Invalid JWT signature.");

File: jhipster-modules/jhipster-microservice/dealer-app/src/main/java/com/dealer/app/security/jwt/TokenProvider.java
Patch:
@@ -70,7 +70,7 @@ public String createToken(Authentication authentication, Boolean rememberMe) {
 
     public Authentication getAuthentication(String token) {
         Claims claims = Jwts.parser()
-            .setSigningKey(secretKey)
+            .setSigningKey(secretKey).build()
             .parseClaimsJws(token)
             .getBody();
 
@@ -86,7 +86,7 @@ public Authentication getAuthentication(String token) {
 
     public boolean validateToken(String authToken) {
         try {
-            Jwts.parser().setSigningKey(secretKey).parseClaimsJws(authToken);
+            Jwts.parser().setSigningKey(secretKey).build().parseClaimsJws(authToken);
             return true;
         } catch (SignatureException e) {
             log.info("Invalid JWT signature.");

File: jhipster-modules/jhipster-microservice/gateway-app/src/main/java/com/gateway/security/jwt/TokenProvider.java
Patch:
@@ -70,7 +70,7 @@ public String createToken(Authentication authentication, Boolean rememberMe) {
 
     public Authentication getAuthentication(String token) {
         Claims claims = Jwts.parser()
-            .setSigningKey(secretKey)
+            .setSigningKey(secretKey).build()
             .parseClaimsJws(token)
             .getBody();
 
@@ -86,7 +86,7 @@ public Authentication getAuthentication(String token) {
 
     public boolean validateToken(String authToken) {
         try {
-            Jwts.parser().setSigningKey(secretKey).parseClaimsJws(authToken);
+            Jwts.parser().setSigningKey(secretKey).build().parseClaimsJws(authToken);
             return true;
         } catch (SignatureException e) {
             log.info("Invalid JWT signature.");

File: jhipster-modules/jhipster-monolithic/src/main/java/com/baeldung/security/jwt/TokenProvider.java
Patch:
@@ -70,7 +70,7 @@ public String createToken(Authentication authentication, Boolean rememberMe) {
 
     public Authentication getAuthentication(String token) {
         Claims claims = Jwts.parser()
-            .setSigningKey(secretKey)
+            .setSigningKey(secretKey).build()
             .parseClaimsJws(token)
             .getBody();
 
@@ -86,7 +86,7 @@ public Authentication getAuthentication(String token) {
 
     public boolean validateToken(String authToken) {
         try {
-            Jwts.parser().setSigningKey(secretKey).parseClaimsJws(authToken);
+            Jwts.parser().setSigningKey(secretKey).build().parseClaimsJws(authToken);
             return true;
         } catch (SignatureException e) {
             log.info("Invalid JWT signature.");

File: security-modules/jjwt/src/main/java/io/jsonwebtoken/jjwtfun/config/WebSecurityConfig.java
Patch:
@@ -66,7 +66,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse
                 // CsrfFilter already made sure the token matched. Here, we'll make sure it's not expired
                 try {
                     Jwts.parser()
-                        .setSigningKeyResolver(secretService.getSigningKeyResolver())
+                        .setSigningKeyResolver(secretService.getSigningKeyResolver()).build()
                         .parseClaimsJws(token.getToken());
                 } catch (JwtException e) {
                     // most likely an ExpiredJwtException, but this will handle any

File: security-modules/jjwt/src/main/java/io/jsonwebtoken/jjwtfun/controller/DynamicJWTController.java
Patch:
@@ -4,7 +4,7 @@
 import io.jsonwebtoken.JwtException;
 import io.jsonwebtoken.Jwts;
 import io.jsonwebtoken.SignatureAlgorithm;
-import io.jsonwebtoken.impl.compression.CompressionCodecs;
+import io.jsonwebtoken.impl.compression.DeflateCompressionAlgorithm;
 import io.jsonwebtoken.jjwtfun.model.JwtResponse;
 import io.jsonwebtoken.jjwtfun.service.SecretService;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -38,7 +38,7 @@ public JwtResponse dynamicBuilderGeneric(@RequestBody Map<String, Object> claims
     public JwtResponse dynamicBuildercompress(@RequestBody Map<String, Object> claims) throws UnsupportedEncodingException {
         String jws = Jwts.builder()
             .setClaims(claims)
-            .compressWith(CompressionCodecs.DEFLATE)
+            .compressWith(new DeflateCompressionAlgorithm())
             .signWith(SignatureAlgorithm.HS256, secretService.getHS256SecretBytes())
             .compact();
         return new JwtResponse(jws);

File: security-modules/jjwt/src/main/java/io/jsonwebtoken/jjwtfun/controller/SecretsController.java
Patch:
@@ -6,6 +6,7 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
+import java.security.NoSuchAlgorithmException;
 import java.util.Map;
 
 import static org.springframework.web.bind.annotation.RequestMethod.GET;
@@ -23,7 +24,7 @@ public Map<String, String> getSecrets() {
     }
 
     @RequestMapping(value = "/refresh-secrets", method = GET)
-    public Map<String, String> refreshSecrets() {
+    public Map<String, String> refreshSecrets() throws NoSuchAlgorithmException {
         return secretService.refreshSecrets();
     }
 

File: security-modules/jjwt/src/main/java/io/jsonwebtoken/jjwtfun/controller/StaticJWTController.java
Patch:
@@ -42,7 +42,7 @@ public JwtResponse fixedBuilder() throws UnsupportedEncodingException {
     public JwtResponse parser(@RequestParam String jwt) throws UnsupportedEncodingException {
 
         Jws<Claims> jws = Jwts.parser()
-            .setSigningKeyResolver(secretService.getSigningKeyResolver())
+            .setSigningKeyResolver(secretService.getSigningKeyResolver()).build()
             .parseClaimsJws(jwt);
 
         return new JwtResponse(jws);
@@ -53,7 +53,7 @@ public JwtResponse parserEnforce(@RequestParam String jwt) throws UnsupportedEnc
         Jws<Claims> jws = Jwts.parser()
             .requireIssuer("Stormpath")
             .require("hasMotorcycle", true)
-            .setSigningKeyResolver(secretService.getSigningKeyResolver())
+            .setSigningKeyResolver(secretService.getSigningKeyResolver()).build()
             .parseClaimsJws(jwt);
 
         return new JwtResponse(jws);

File: spring-kafka-2/src/test/java/com/baeldung/spring/kafka/managingkafkaconsumergroups/ManagingConsumerGroupsIntegrationTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 @SpringBootTest(classes = ManagingConsumerGroupsApplicationKafkaApp.class)
-@EmbeddedKafka(partitions = 2, brokerProperties = {"listeners=PLAINTEXT://localhost:9092", "port=9092"})
+@EmbeddedKafka(partitions = 2, brokerProperties = {"listeners=PLAINTEXT://localhost:9098", "port=9098"})
 public class ManagingConsumerGroupsIntegrationTest {
 
     private static final String CONSUMER_1_IDENTIFIER = "org.springframework.kafka.KafkaListenerEndpointContainer#1";

File: core-java-modules/core-java-8-datetime-2/src/test/java/com/baeldung/localdatetoiso/LocalDateToISOUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.localDateToISO;
+package com.baeldung.localdatetoiso;
 
 import static org.junit.Assert.assertEquals;
 

File: core-java-modules/core-java-8-datetime-2/src/main/java/com/baeldung/localdatetoiso/LocalDateToISO.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.localDateToISO;
+package com.baeldung.localdatetoiso;
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;

File: xml/src/main/java/com/baeldung/xml/DefaultParser.java
Patch:
@@ -163,10 +163,10 @@ public String getNamespaceURI(String arg0) {
 
     private void clean(Node node) {
 
-        NodeList childs = node.getChildNodes();
+        NodeList childNodes = node.getChildNodes();
 
-        for (int n = childs.getLength() - 1; n >= 0; n--) {
-            Node child = childs.item(n);
+        for (int n = childNodes.getLength() - 1; n >= 0; n--) {
+            Node child = childNodes.item(n);
             short nodeType = child.getNodeType();
 
             if (nodeType == Node.ELEMENT_NODE)

File: xml/src/main/java/com/baeldung/xml/DefaultParser.java
Patch:
@@ -163,10 +163,10 @@ public String getNamespaceURI(String arg0) {
 
     private void clean(Node node) {
 
-        NodeList childs = node.getChildNodes();
+        NodeList childNodes = node.getChildNodes();
 
-        for (int n = childs.getLength() - 1; n >= 0; n--) {
-            Node child = childs.item(n);
+        for (int n = childNodes.getLength() - 1; n >= 0; n--) {
+            Node child = childNodes.item(n);
             short nodeType = child.getNodeType();
 
             if (nodeType == Node.ELEMENT_NODE)

File: spring-ai/src/test/java/com/baeldung/spring/ai/web/PoetryControllerManualTest.java
Patch:
@@ -48,4 +48,3 @@ public void givenGetPoetryWithGenreAndTheme_whenCallingAiClient_thenCorrect() th
     }
 }
 
-}

File: core-java-modules/core-java-concurrency-advanced-5/src/main/java/com/baeldung/wait_synchronization/ConditionChecker.java
Patch:
@@ -2,7 +2,7 @@
 
 public class ConditionChecker {
 
-    private volatile Boolean jobIsDone;
+    private volatile boolean jobIsDone;
     private final Object lock = new Object();
 
     public void ensureCondition() {
@@ -21,4 +21,4 @@ public void complete() {
             lock.notify();
         }
     }
-}
\ No newline at end of file
+}

File: core-java-modules/core-java-concurrency-2/src/test/java/com/baeldung/concurrent/completablefuture/CompletableFutureUnitTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.junit.Test;
 
-public class CompletableFutureTest {
+public class CompletableFutureUnitTest {
 
     @Test
     public void givenAsyncTask_whenProcessingAsyncSucceed_thenReturnSuccess() throws ExecutionException, InterruptedException {

File: spring-boot-modules/spring-boot-mvc-5/src/main/java/com/baeldung/modifyrequest/config/WebMvcConfiguration.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.modifyrequest.config;
 
 import com.baeldung.modifyrequest.interceptor.EscapeHtmlRequestInterceptor;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.context.annotation.Configuration;
@@ -17,7 +18,7 @@ public class WebMvcConfiguration implements WebMvcConfigurer {
     public void addInterceptors(InterceptorRegistry registry) {
         logger.info("addInterceptors() called");
         registry.addInterceptor(new EscapeHtmlRequestInterceptor())
-                .addPathPatterns("/save");
+            .addPathPatterns("/save");
 
         WebMvcConfigurer.super.addInterceptors(registry);
     }

File: timefold-solver/src/main/java/com/baeldung/timefoldsolver/ShiftSchedule.java
Patch:
@@ -17,7 +17,7 @@ public class ShiftSchedule {
     private List<Shift> shifts;
 
     @PlanningScore
-    private HardSoftScore score = null;
+    private HardSoftScore score;
 
     // A no-arg constructor is required for @PlanningSolution annotated classes
     public ShiftSchedule() {

File: core-java-modules/core-java-string-operations-7/src/test/java/com/baeldung/centertext/CenteringTextUnitTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.centertext;
 
-import liquibase.repackaged.org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 

File: spring-boot-modules/spring-boot-mvc-5/src/test/java/com/baeldung/modifyrequest/EscapeHtmlInterceptorIntegrationTest.java
Patch:
@@ -39,8 +39,8 @@ void givenInterceptor_whenEscapeHtmlInterceptor_thenEscapeHtml() throws Exceptio
 
         ObjectMapper objectMapper = new ObjectMapper();
         mockMvc.perform(MockMvcRequestBuilders.post(URI.create("/save"))
-          .contentType(MediaType.APPLICATION_JSON)
-          .content(objectMapper.writeValueAsString(requestBody)))
-          .andExpect(MockMvcResultMatchers.status().is4xxClientError());
+                        .contentType(MediaType.APPLICATION_JSON)
+                        .content(objectMapper.writeValueAsString(requestBody)))
+                .andExpect(MockMvcResultMatchers.status().is4xxClientError());
     }
 }

File: core-java-modules/core-java-collections-maps-7/src/main/java/com/baeldung/map/HashMapWithMaxSizeLimit.java
Patch:
@@ -3,9 +3,6 @@
 import java.util.HashMap;
 
 public class HashMapWithMaxSizeLimit<K, V> extends HashMap<K, V> {
-
-    private static final long serialVersionUID = 1L;
-
     private int maxSize = -1;
     
     public HashMapWithMaxSizeLimit() {

File: libraries-data-io/src/test/java/com/baeldung/libraries/opencsv/OpenCsvIntegrationTest.java
Patch:
@@ -74,7 +74,7 @@ public void givenSampleData_whenWriteCsvUsingBean_thenContentsWritten() throws E
 
         assertThat(contents.split(NEW_LINE))
           .containsExactly(
-          "'colA','colB','colC'",
+          "'COLA','COLB','COLC'",
           "'Test1','sample','data'",
           "'Test2','ipso','facto'"
         );

File: libraries-data-io/src/test/java/com/baeldung/libraries/opencsv/OpenCsvIntegrationTest.java
Patch:
@@ -74,7 +74,7 @@ public void givenSampleData_whenWriteCsvUsingBean_thenContentsWritten() throws E
 
         assertThat(contents.split(NEW_LINE))
           .containsExactly(
-          "'colA','colB','colC'",
+          "'COLA','COLB','COLC'",
           "'Test1','sample','data'",
           "'Test2','ipso','facto'"
         );

File: core-java-modules/core-java-collections-maps-7/src/test/java/com/baeldung/map/LimitMaxSizeHashMapByCustomHashMapUnitTest.java
Patch:
@@ -3,9 +3,6 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: spring-boot-modules/spring-boot-testing-2/src/main/java/com/baeldung/overridebean/boot/Application.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.overridebean.basic;
+package com.baeldung.overridebean.boot;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-boot-modules/spring-boot-testing-2/src/test/java/com/baeldung/overridebean/conditional/ConditionIntegrationTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.springframework.test.web.servlet.MockMvc;
 
 import com.baeldung.overridebean.Endpoint;
+import com.baeldung.overridebean.boot.Application;
 
 @SpringBootTest(classes = { Application.class, ConditionalConfig.class, Endpoint.class, ConditionalTestConfig.class }, properties = "service.stub=true")
 @AutoConfigureMockMvc

File: spring-boot-modules/spring-boot-testing-2/src/test/java/com/baeldung/overridebean/mockbean/MockBeanIntegrationTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import com.baeldung.overridebean.Endpoint;
 import com.baeldung.overridebean.Service;
-import com.baeldung.overridebean.basic.Application;
+import com.baeldung.overridebean.boot.Application;
 
 @SpringBootTest(classes = { Application.class, Endpoint.class })
 @AutoConfigureMockMvc

File: spring-boot-modules/spring-boot-testing-2/src/test/java/com/baeldung/overridebean/overridebeandefinition/OverrideBeanDefinitionIntegrationTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.web.servlet.MockMvc;
 
+import com.baeldung.overridebean.Config;
 import com.baeldung.overridebean.Endpoint;
-import com.baeldung.overridebean.basic.Application;
-import com.baeldung.overridebean.basic.Config;
+import com.baeldung.overridebean.boot.Application;
 
 @SpringBootTest(classes = { Application.class, Config.class, Endpoint.class, OverrideBeanDefinitionTestConfig.class }, properties = "spring.main.allow-bean-definition-overriding=true")
 @AutoConfigureMockMvc

File: spring-boot-modules/spring-boot-testing-2/src/test/java/com/baeldung/overridebean/primary/PrimaryIntegrationTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.web.servlet.MockMvc;
 
+import com.baeldung.overridebean.Config;
 import com.baeldung.overridebean.Endpoint;
-import com.baeldung.overridebean.basic.Application;
-import com.baeldung.overridebean.basic.Config;
+import com.baeldung.overridebean.boot.Application;
 
 @SpringBootTest(classes = { Application.class, Config.class, Endpoint.class, PrimaryTestConfig.class })
 @AutoConfigureMockMvc

File: spring-boot-modules/spring-boot-testing-2/src/test/java/com/baeldung/overridebean/profile/ProfileIntegrationTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.springframework.test.web.servlet.MockMvc;
 
 import com.baeldung.overridebean.Endpoint;
+import com.baeldung.overridebean.boot.Application;
 
 @SpringBootTest(classes = { Application.class, ProfileConfig.class, Endpoint.class, ProfileTestConfig.class })
 @AutoConfigureMockMvc

File: core-java-modules/core-java-concurrency-basic-3/src/main/java/com/baeldung/concurrent/synchronizestatic/atomicinteger/Employee.java
Patch:
@@ -13,8 +13,7 @@ public class Employee {
     String name;
     String title;
 
-    public Employee(int id, String name, String title)
-    {
+    public Employee(int id, String name, String title) {
         incrementCount();
         this.id = id;
         this.name = name;

File: core-java-modules/core-java-concurrency-basic-3/src/main/java/com/baeldung/concurrent/synchronizestatic/none/Employee.java
Patch:
@@ -10,8 +10,7 @@ public class Employee {
     String name;
     String title;
 
-    public Employee(int id, String name, String title)
-    {
+    public Employee(int id, String name, String title) {
         incrementCount();
         this.id = id;
         this.name = name;

File: core-java-modules/core-java-concurrency-basic-3/src/main/java/com/baeldung/concurrent/synchronizestatic/reentrantlock/Employee.java
Patch:
@@ -14,8 +14,7 @@ public class Employee {
     String name;
     String title;
 
-    public Employee(int id, String name, String title)
-    {
+    public Employee(int id, String name, String title) {
         incrementCount();
         this.id = id;
         this.name = name;

File: core-java-modules/core-java-concurrency-basic-3/src/main/java/com/baeldung/concurrent/synchronizestatic/synchronizedblock/Employee.java
Patch:
@@ -12,8 +12,7 @@ public class Employee {
     String name;
     String title;
 
-    public Employee(int id, String name, String title)
-    {
+    public Employee(int id, String name, String title) {
         incrementCount();
         this.id = id;
         this.name = name;

File: core-java-modules/core-java-concurrency-basic-3/src/main/java/com/baeldung/concurrent/synchronizestatic/synchronizedclass/Employee.java
Patch:
@@ -10,8 +10,7 @@ public class Employee
     String name;
     String title;
 
-    public Employee(int id, String name, String title)
-    {
+    public Employee(int id, String name, String title) {
         incrementCount();
         this.id = id;
         this.name = name;

File: spring-security-modules/spring-security-web-thymeleaf/src/main/java/com/baeldung/customuserdetails/SecurityConfiguration.java
Patch:
@@ -28,7 +28,7 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
             .formLogin()
             .loginPage("/login")
             .permitAll()
-            .successForwardUrl("/index")
+            .defaultSuccessUrl("/index")
             .and()
             .logout()
             .permitAll()

File: patterns-modules/design-patterns-singleton/src/test/java/com/baledung/billpugh/BillPughSingletonUnitTest.java
Patch:
@@ -15,7 +15,7 @@
 public class BillPughSingletonUnitTest {
     Logger logger = LoggerFactory.getLogger(BillPughSingletonUnitTest.class);
     @Test
-    void giveSynchronizedLazyLoadedImpl_whenCallgetInstance_thenReturnSingleton() {
+    void givenSynchronizedLazyLoadedImpl_whenCallgetInstance_thenReturnSingleton() {
         Set<BillPughSingleton> setHoldingSingletonObj = new HashSet<>();
         List<Future<BillPughSingleton>> futures = new ArrayList<>();
 

File: spring-cloud-modules/spring-cloud-eureka/spring-cloud-eureka-feign-client-integration-test/src/test/java/com/baeldung/spring/cloud/client/LoadBalancerBooksClientIntegrationTest.java
Patch:
@@ -63,12 +63,12 @@ void setUp() throws IOException {
 
         String serviceId = "books-service";
         RoundRobinLoadBalancer loadBalancer = new RoundRobinLoadBalancer(ServiceInstanceListSuppliers
-          .toProvider(serviceId, instance(serviceId, "localhost", false), instance(serviceId, "localhost", true)),
+          .toProvider(serviceId, instance(serviceId, "localhost", 1030, false), instance(serviceId, "localhost", 1031, true)),
           serviceId, -1);
     }
 
-    private static DefaultServiceInstance instance(String serviceId, String host, boolean secure) {
-        return new DefaultServiceInstance(serviceId, serviceId, host, 80, secure);
+    private static DefaultServiceInstance instance(String serviceId, String host, int port, boolean secure) {
+        return new DefaultServiceInstance(serviceId, serviceId, host, port, secure);
     }
 
     @Test

File: spring-cloud-modules/spring-cloud-eureka/spring-cloud-eureka-feign-client-integration-test/src/test/java/com/baeldung/spring/cloud/client/LoadBalancerIntegrationTest.java
Patch:
@@ -80,13 +80,13 @@ private void assertLoadBalancer(ReactorLoadBalancer<ServiceInstance> loadBalance
     void staticConfigurationWorks() {
         String serviceId = "test-book-service";
         RoundRobinLoadBalancer loadBalancer = new RoundRobinLoadBalancer(ServiceInstanceListSuppliers
-          .toProvider(serviceId, instance(serviceId, "bookservice1", false), instance(serviceId, "bookservice2", false)),
+          .toProvider(serviceId, instance(serviceId, "bookservice1", 1030, false), instance(serviceId, "bookservice2", 1031, false)),
           serviceId, -1);
         assertLoadBalancer(loadBalancer, Arrays.asList("bookservice1", "bookservice2"));
     }
 
-    private static DefaultServiceInstance instance(String serviceId, String host, boolean secure) {
-        return new DefaultServiceInstance(serviceId, serviceId, host, 80, secure);
+    private static DefaultServiceInstance instance(String serviceId, String host, int port, boolean secure) {
+        return new DefaultServiceInstance(serviceId, serviceId, host, port, secure);
     }
 
     @EnableAutoConfiguration

File: spring-cloud-modules/spring-cloud-eureka/spring-cloud-eureka-feign-client-integration-test/src/test/java/com/baeldung/spring/cloud/client/TestConfig.java
Patch:
@@ -14,11 +14,11 @@ public class TestConfig {
 
     @Bean(initMethod = "start", destroyMethod = "stop")
     public WireMockServer mockBooksService() {
-        return new WireMockServer(options().port(80));
+        return new WireMockServer(options().port(1030));
     }
 
     @Bean(name="secondMockBooksService", initMethod = "start", destroyMethod = "stop")
     public WireMockServer secondBooksMockService() {
-        return new WireMockServer(options().port(81));
+        return new WireMockServer(options().port(1031));
     }
 }

File: spring-cloud-modules/spring-cloud-eureka/spring-cloud-eureka-feign-client-integration-test/src/test/java/com/baeldung/spring/cloud/client/WireMockConfig.java
Patch:
@@ -11,11 +11,11 @@ public class WireMockConfig {
 
     @Bean(initMethod = "start", destroyMethod = "stop")
     public WireMockServer mockBooksService() {
-        return new WireMockServer(80);
+        return new WireMockServer(1030);
     }
 
     @Bean(initMethod = "start", destroyMethod = "stop")
     public WireMockServer mockBooksService2() {
-        return new WireMockServer(81);
+        return new WireMockServer(1031);
     }
 }

File: apache-kafka-2/src/main/java/com/baeldung/kafka/message/ordering/payload/UserEvent.java
Patch:
@@ -1,13 +1,14 @@
 package com.baeldung.kafka.message.ordering.payload;
 
 import java.util.Objects;
+
 public class UserEvent implements Comparable<UserEvent> {
     private String userEventId;
     private long eventNanoTime;
     private long globalSequenceNumber;
 
     @SuppressWarnings("unused")
-    public UserEvent(){
+    public UserEvent() {
         // Required for Jackson Serialization and Deserialization
     }
 

File: apache-kafka-2/src/main/java/com/baeldung/kafka/message/ordering/serialization/JacksonDeserializer.java
Patch:
@@ -1,6 +1,8 @@
 package com.baeldung.kafka.message.ordering.serialization;
+
 import com.baeldung.kafka.message.ordering.Config;
 import com.fasterxml.jackson.databind.ObjectMapper;
+
 import org.apache.kafka.common.serialization.Deserializer;
 
 import java.util.Map;
@@ -12,7 +14,6 @@ public class JacksonDeserializer<T> implements Deserializer<T> {
     private final ObjectMapper objectMapper = new ObjectMapper();
     private Class<T> type;
 
-
     @Override
     public void configure(Map<String, ?> configs, boolean isKey) {
         this.type = (Class<T>) configs.get(Config.CONSUMER_VALUE_DESERIALIZER_SERIALIZED_CLASS);

File: apache-kafka-2/src/main/java/com/baeldung/kafka/message/ordering/serialization/JacksonSerializer.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.kafka.message.ordering.serialization;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+
 import org.apache.kafka.common.serialization.Serializer;
 
 /**

File: apache-kafka-2/src/test/java/com/baeldung/kafka/message/ordering/MultiplePartitionIntegrationTest.java
Patch:
@@ -71,16 +71,16 @@ static void destroy() {
     void givenMultiplePartitions_whenPublishedToKafkaAndConsumed_thenCheckForMessageOrder() throws ExecutionException, InterruptedException {
         List<UserEvent> sentUserEventList = new ArrayList<>();
         List<UserEvent> receivedUserEventList = new ArrayList<>();
-        for (long count = 1; count <= 10 ; count++) {
+        for (long sequenceNumber = 1; sequenceNumber <= 10; sequenceNumber++) {
             UserEvent userEvent = new UserEvent(UUID.randomUUID().toString());
+            userEvent.setGlobalSequenceNumber(sequenceNumber);
             userEvent.setEventNanoTime(System.nanoTime());
-            Future<RecordMetadata> future = producer.send(new ProducerRecord<>(Config.MULTI_PARTITION_TOPIC, count, userEvent));
+            Future<RecordMetadata> future = producer.send(new ProducerRecord<>(Config.MULTI_PARTITION_TOPIC, sequenceNumber, userEvent));
             sentUserEventList.add(userEvent);
             RecordMetadata metadata = future.get();
             System.out.println("User Event ID: " + userEvent.getUserEventId() + ", Partition : " + metadata.partition());
         }
 
-        boolean isOrderMaintained = true;
         consumer.subscribe(Collections.singletonList(Config.MULTI_PARTITION_TOPIC));
         ConsumerRecords<Long, UserEvent> records = consumer.poll(TIMEOUT_WAIT_FOR_MESSAGES);
         records.forEach(record -> {

File: apache-kafka-2/src/test/java/com/baeldung/kafka/message/ordering/SinglePartitionIntegrationTest.java
Patch:
@@ -78,8 +78,9 @@ static void destroy() {
     void givenASinglePartition_whenPublishedToKafkaAndConsumed_thenCheckForMessageOrder() throws ExecutionException, InterruptedException {
         List<UserEvent> sentUserEventList = new ArrayList<>();
         List<UserEvent> receivedUserEventList = new ArrayList<>();
-        for (long count = 1; count <= 10; count++) {
+        for (long sequenceNumber = 1; sequenceNumber <= 10; sequenceNumber++) {
             UserEvent userEvent = new UserEvent(UUID.randomUUID().toString());
+            userEvent.setGlobalSequenceNumber(sequenceNumber);
             userEvent.setEventNanoTime(System.nanoTime());
             ProducerRecord<Long, UserEvent> producerRecord = new ProducerRecord<>(Config.SINGLE_PARTITION_TOPIC, userEvent);
             Future<RecordMetadata> future = producer.send(producerRecord);

File: apache-kafka-2/src/test/java/com/baeldung/kafka/message/ordering/ExtSeqWithTimeWindowIntegrationTest.java
Patch:
@@ -35,10 +35,10 @@ public class ExtSeqWithTimeWindowIntegrationTest {
     private static KafkaProducer<Long, UserEvent> producer;
     private static KafkaConsumer<Long, UserEvent> consumer;
     private static final Duration TIMEOUT_WAIT_FOR_MESSAGES = Duration.ofSeconds(5);
+    private static final long BUFFER_PERIOD_NS = Duration.ofSeconds(5).toNanos();
 
-    private static final long BUFFER_PERIOD_NS = 5000L * 1000000; // 5000 milliseconds converted to nanoseconds
     @Container
-    private static final long BUFFER_PERIOD_NS = Duration.ofSeconds(5).toNanos();
+    private static final KafkaContainer KAFKA_CONTAINER = new KafkaContainer(DockerImageName.parse("confluentinc/cp-kafka:latest"));
 
     @BeforeAll
     static void setup() throws ExecutionException, InterruptedException {

File: core-java-modules/core-java-uuid/src/main/java/com/baeldung/uuid/UUIDPositiveLongGenerator.java
Patch:
@@ -8,7 +8,7 @@
  */
 @SuppressWarnings("unused")
 public class UUIDPositiveLongGenerator {
-    public long getLeastSignificantBits(){
+    public long getLeastSignificantBits() {
         return Math.abs(UUID.randomUUID().getLeastSignificantBits());
     }
 

File: core-java-modules/core-java-regex-2/src/main/java/com/baeldung/alphanumeric/AlphanumericPerformanceBenchmark.java
Patch:
@@ -85,7 +85,7 @@ public void alphanumericIterationWithStream(Blackhole blackhole) {
 
     public boolean isAlphanumeric(final int codePoint) {
         return (codePoint >= 65 && codePoint <= 90) ||
-               (codePoint >= 97 && codePoint <= 172) ||
+               (codePoint >= 97 && codePoint <= 122) ||
                (codePoint >= 48 && codePoint <= 57);
     }
 }

File: libraries-llms/src/test/java/com/baeldung/langchain/ChainWithDocumentLiveTest.java
Patch:
@@ -31,7 +31,6 @@ public class ChainWithDocumentLiveTest {
 
     @Test
     public void givenChainWithDocument_whenPrompted_thenValidResponse() {
-
         EmbeddingModel embeddingModel = new AllMiniLmL6V2EmbeddingModel();
 
         EmbeddingStore<TextSegment> embeddingStore = new InMemoryEmbeddingStore<>();
@@ -61,7 +60,6 @@ public void givenChainWithDocument_whenPrompted_thenValidResponse() {
 
         logger.info(answer);
         assertNotNull(answer);
-
     }
 
 }

File: libraries-llms/src/test/java/com/baeldung/langchain/ChatWithDocumentLiveTest.java
Patch:
@@ -38,7 +38,6 @@ public class ChatWithDocumentLiveTest {
 
     @Test
     public void givenDocument_whenPrompted_thenValidResponse() {
-
         Document document = loadDocument(Paths.get("src/test/resources/example-files/simpson's_adventures.txt"));
         DocumentSplitter splitter = DocumentSplitters.recursive(100, 0, new OpenAiTokenizer(GPT_3_5_TURBO));
         List<TextSegment> segments = splitter.split(document);
@@ -77,7 +76,6 @@ public void givenDocument_whenPrompted_thenValidResponse() {
 
         logger.info(aiMessage.text());
         assertNotNull(aiMessage.text());
-
     }
 
 }

File: libraries-llms/src/test/java/com/baeldung/langchain/PromptTemplatesLiveTest.java
Patch:
@@ -21,7 +21,6 @@ public class PromptTemplatesLiveTest {
 
     @Test
     public void givenPromptTemplate_whenSuppliedInput_thenValidResponse() {
-
         PromptTemplate promptTemplate = PromptTemplate.from("Tell me a {{adjective}} joke about {{content}}..");
         Map<String, Object> variables = new HashMap<>();
         variables.put("adjective", "funny");
@@ -37,7 +36,6 @@ public void givenPromptTemplate_whenSuppliedInput_thenValidResponse() {
         String response = model.generate(prompt.text());
         logger.info(response);
         assertNotNull(response);
-
     }
 
 }

File: core-java-modules/core-java-concurrency-basic-3/src/test/java/com/baeldung/concurrent/completablefuture/retry/RetryCompletableFutureUnitTest.java
Patch:
@@ -41,7 +41,8 @@ void whenRetryingTask_thenThrowsExceptionAfterThreeInvocations() {
 
         CompletableFuture<Integer> result = retryTask(codeToRun, 3);
 
-        assertThatThrownBy(result::join).isInstanceOf(CompletionException.class)
+        assertThatThrownBy(result::join)
+          .isInstanceOf(CompletionException.class)
           .hasMessageContaining("IllegalStateException: Task failed after 3 attempts");
     }
 

File: persistence-modules/spring-data-jpa-repo-3/src/main/java/com/baeldung/spring/data/jpa/listrepositories/entity/Library.java
Patch:
@@ -19,7 +19,7 @@ public class Library {
     private List<String> addresses = new ArrayList<>();
 
     @ElementCollection(targetClass = String.class, fetch = FetchType.EAGER)
-    @CollectionTable(name = "book", joinColumns = @JoinColumn(name = "library_id"))
+    @CollectionTable(name = "books", joinColumns = @JoinColumn(name = "library_id"))
     @Column(name = "book", nullable = false)
     private List<String> books = new ArrayList<>();
 

File: spring-kafka-2/src/test/java/com/baeldung/spring/kafka/multiplelisteners/KafkaMultipleListenersIntegrationTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.kafka.test.context.EmbeddedKafka;
 
 @SpringBootTest(classes = MultipleListenersApplicationKafkaApp.class)
-@EmbeddedKafka(partitions = 1, brokerProperties = { "listeners=PLAINTEXT://localhost:9092", "port=9092" })
+@EmbeddedKafka(partitions = 1, controlledShutdown = true, brokerProperties = { "listeners=PLAINTEXT://localhost:9092", "port=9092" })
 class KafkaMultipleListenersIntegrationTest {
 
     @Autowired

File: spring-kafka-2/src/test/java/com/baeldung/spring/kafka/retryable/KafkaRetryableIntegrationTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 @SpringBootTest(classes = RetryableApplicationKafkaApp.class)
-@EmbeddedKafka(partitions = 1, brokerProperties = { "listeners=PLAINTEXT://localhost:9092", "port=9092" })
+@EmbeddedKafka(partitions = 1, controlledShutdown = true, brokerProperties = { "listeners=PLAINTEXT://localhost:9093", "port=9093" })
 public class KafkaRetryableIntegrationTest {
     @ClassRule
     public static EmbeddedKafkaBroker embeddedKafka = new EmbeddedKafkaBroker(1, true, "multitype");

File: spring-kafka-2/src/test/java/com/baeldung/spring/kafka/topicsandpartitions/KafkaTopicsAndPartitionsIntegrationTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.springframework.kafka.test.context.EmbeddedKafka;
 
 @SpringBootTest(classes = ThermostatApplicationKafkaApp.class)
-@EmbeddedKafka(partitions = 2, brokerProperties = {"listeners=PLAINTEXT://localhost:9092", "port=9092"})
+@EmbeddedKafka(partitions = 2, controlledShutdown = true, brokerProperties = {"listeners=PLAINTEXT://localhost:9094", "port=9094"})
 public class KafkaTopicsAndPartitionsIntegrationTest {
     @ClassRule
     public static EmbeddedKafkaBroker embeddedKafka = new EmbeddedKafkaBroker(1, true, "multitype");

File: patterns-modules/design-patterns-structural/src/main/java/com/baeldung/composite/FinancialDepartment.java
Patch:
@@ -1,5 +1,7 @@
 package com.baeldung.composite;
 
+import static com.baeldung.util.LoggerUtil.LOG;
+
 /**
  * Created by Gebruiker on 5/1/2018.
  */
@@ -14,7 +16,7 @@ public FinancialDepartment(Integer id, String name) {
     }
 
     public void printDepartmentName() {
-        System.out.println(getClass().getSimpleName());
+        LOG.info(getClass().getSimpleName());
     }
 
     public Integer getId() {

File: patterns-modules/design-patterns-structural/src/main/java/com/baeldung/composite/SalesDepartment.java
Patch:
@@ -1,5 +1,7 @@
 package com.baeldung.composite;
 
+import static com.baeldung.util.LoggerUtil.LOG;
+
 /**
  * Created by Gebruiker on 5/1/2018.
  */
@@ -14,7 +16,7 @@ public SalesDepartment(Integer id, String name) {
     }
 
     public void printDepartmentName() {
-        System.out.println(getClass().getSimpleName());
+        LOG.info(getClass().getSimpleName());
     }
 
     public Integer getId() {

File: web-modules/restx/src/main/java/restx/demo/AppServer.java
Patch:
@@ -12,8 +12,8 @@
  * Reading the port from system env PORT makes it compatible with heroku.
  */
 public class AppServer {
-    public static final String WEB_INF_LOCATION = "web-modules/restx/src/main/webapp/WEB-INF/web.xml";
-    public static final String WEB_APP_LOCATION = "web-modules/restx/src/main/webapp";
+    public static final String WEB_INF_LOCATION = "src/main/webapp/WEB-INF/web.xml";
+    public static final String WEB_APP_LOCATION = "src/main/webapp";
 
     public static void main(String[] args) throws Exception {
         int port = Integer.valueOf(Optional.fromNullable(System.getenv("PORT")).or("8080"));

File: core-java-modules/core-java-httpclient/src/main/java/com/baeldung/httpclient/HttpClientPost.java
Patch:
@@ -123,6 +123,7 @@ public static HttpResponse<String> sendPostWithFormData(String serviceUrl) throw
 
         HttpRequest request = HttpRequest.newBuilder()
           .uri(URI.create(serviceUrl))
+          .header("Content-Type", "application/x-www-form-urlencoded")
           .POST(HttpRequest.BodyPublishers.ofString(getFormDataAsString(formData)))
           .build();
 

File: spring-security-modules/spring-security-web-thymeleaf/src/main/java/com/baeldung/customuserdetails/SecurityConfiguration.java
Patch:
@@ -28,7 +28,7 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
             .formLogin()
             .loginPage("/login")
             .permitAll()
-            .successForwardUrl("/index")
+            .defaultSuccessUrl("/index")
             .and()
             .logout()
             .permitAll()

File: spring-boot-modules/spring-boot-keycloak/src/main/java/com/baeldung/keycloak/SpringBootKeycloakApp.java
Patch:
@@ -6,11 +6,10 @@
 import org.springframework.web.client.RestTemplate;
 
 @SpringBootApplication
-
-public class SpringBoot {
+public class SpringBootKeycloakApp {
 
     public static void main(String[] args) {
-        SpringApplication.run(SpringBoot.class, args);
+        SpringApplication.run(SpringBootKeycloakApp.class, args);
     }
 
     @Bean

File: spring-boot-modules/spring-boot-keycloak/src/test/java/com/baeldung/keycloak/KeycloakContextIntegrationTest.java
Patch:
@@ -4,10 +4,9 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit.jupiter.SpringExtension;
-import com.baeldung.keycloak.SpringBoot;
 
 @ExtendWith(SpringExtension.class)
-@SpringBootTest(classes = { SpringBoot.class })
+@SpringBootTest(classes = { SpringBootKeycloakApp.class })
 public class KeycloakContextIntegrationTest {
 
     @Test

File: spring-boot-modules/spring-boot-actuator/src/main/java/com/baeldung/metrics/MetricsApplication.java
Patch:
@@ -15,7 +15,7 @@
 import org.springframework.scheduling.annotation.EnableScheduling;
 import org.springframework.web.context.request.RequestContextListener;
 
-import javax.servlet.ServletContext;
+import jakarta.servlet.ServletContext;
 
 @EnableScheduling
 @ComponentScan("com.baeldung.metrics")

File: spring-boot-modules/spring-boot-actuator/src/test/java/com/baeldung/endpoints/enabling/EndpointEnablingIntegrationTest.java
Patch:
@@ -13,20 +13,20 @@
 
 @SpringBootTest
 @AutoConfigureMockMvc
-public class EndpointEnablingIntegrationTest {
+class EndpointEnablingIntegrationTest {
     @Autowired
     private MockMvc mockMvc;
     
     @Test
     @WithMockUser(username = "user", password = "password", roles = "USER")
-    public void givenWrongAuthentication_whenCallingActuator_thenReturns401() throws Exception {
+    void givenWrongAuthentication_whenCallingActuator_thenReturns401() throws Exception {
         mockMvc.perform(get("/actuator"))
           .andExpect(status().isForbidden());
     }
     
     @Test
     @WithMockUser(username = "admin", password = "admin", roles = "ADMIN")
-    public void givenProperAuthentication_whenCallingActuator_thenReturnsExpectedEndpoints() throws Exception {
+    void givenProperAuthentication_whenCallingActuator_thenReturnsExpectedEndpoints() throws Exception {
         mockMvc.perform(get("/actuator"))
           .andExpect(jsonPath("$._links").exists())
           .andExpect(jsonPath("$._links.beans").exists())

File: core-java-modules/core-java-datetime-conversion/src/test/java/com/baeldung/epochtolocaldate/EpochTimeToLocalDateTimeConverterUnitTest.java
Patch:
@@ -12,10 +12,10 @@ public class EpochTimeToLocalDateTimeConverterUnitTest {
     @Test
     public void testConvertEpochTimeToLocalDateTime() {
         long epochTimeMillis = 1624962431000L; // Example epoch time in milliseconds
-        LocalDateTime expectedDateTime = LocalDateTime.of(2021, 6, 29, 12, 13, 51);
+        LocalDateTime expectedDateTime = LocalDateTime.of(2021, 6, 29, 10, 27, 11);
 
         Instant instant = Instant.ofEpochMilli(epochTimeMillis);
-        ZoneId zoneId = ZoneId.systemDefault();
+        ZoneId zoneId = ZoneId.of("UTC");
         LocalDateTime actualDateTime = instant.atZone(zoneId).toLocalDateTime();
 
         assertEquals(expectedDateTime, actualDateTime);

File: microservices-modules/micronaut/src/main/java/com/baeldung/micronaut/helloworld/server/controller/AsyncGreetController.java
Patch:
@@ -3,9 +3,9 @@
 import com.baeldung.micronaut.helloworld.server.service.GreetingService;
 import io.micronaut.http.annotation.Controller;
 import io.micronaut.http.annotation.Get;
-import io.reactivex.Single;
 
-import javax.inject.Inject;
+import io.reactivex.rxjava3.core.Single;
+import jakarta.inject.Inject;
 
 @Controller("/async/greet")
 public class AsyncGreetController {

File: microservices-modules/micronaut/src/main/java/com/baeldung/micronaut/helloworld/server/controller/GreetController.java
Patch:
@@ -7,7 +7,7 @@
 import io.micronaut.http.annotation.Get;
 import io.micronaut.http.annotation.Post;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 @Controller("/greet")
 public class GreetController {

File: microservices-modules/micronaut/src/main/java/com/baeldung/micronaut/helloworld/server/service/EnglishGreetingService.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.micronaut.context.annotation.Primary;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Primary
 @Singleton

File: microservices-modules/micronaut/src/main/java/com/baeldung/micronaut/helloworld/server/service/SpanishGreetingService.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.micronaut.helloworld.server.service;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class SpanishGreetingService implements GreetingService {

File: microservices-modules/micronaut/src/main/java/com/baeldung/micronaut/vs/springboot/controller/ArithmeticController.java
Patch:
@@ -3,7 +3,7 @@
 import java.lang.management.ManagementFactory;
 import java.lang.management.MemoryMXBean;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 import com.baeldung.micronaut.vs.springboot.service.ArithmeticService;
 

File: microservices-modules/micronaut/src/main/java/com/baeldung/micronaut/vs/springboot/service/ArithmeticService.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.micronaut.vs.springboot.service;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 
 @Singleton
 public class ArithmeticService {

File: spring-reactive-modules/spring-5-reactive/src/main/java/com/baeldung/reactive/controller/PathPatternController.java
Patch:
@@ -22,9 +22,9 @@ public String wildcardTakingZeroOrMoreChar() {
         return "/spring5/*id";
     }
 
-    @GetMapping("//**")
+    @GetMapping("/resources/**")
     public String wildcardTakingZeroOrMorePathSegments() {
-        return "//**";
+        return "/resources/**";
     }
 
     @GetMapping("/{baeldung:[a-z]+}")

File: spring-reactive-modules/spring-5-reactive/src/main/java/com/baeldung/reactive/urlmatch/ExploreSpring5URLPatternUsingRouterFunctions.java
Patch:
@@ -29,7 +29,7 @@ private RouterFunction<ServerResponse> routingFunction() {
             .andRoute(GET("/{var1}_{var2}"), serverRequest -> ok().body(fromValue(serverRequest.pathVariable("var1") + " , " + serverRequest.pathVariable("var2"))))
             .andRoute(GET("/{baeldung:[a-z]+}"), serverRequest -> ok().body(fromValue("/{baeldung:[a-z]+} was accessed and baeldung=" + serverRequest.pathVariable("baeldung"))))
             .and(RouterFunctions.resources("/files/{*filepaths}", new ClassPathResource("files/")))
-            .and(RouterFunctions.resources("//**", new ClassPathResource("/")));
+            .and(RouterFunctions.resources("/resources/**", new ClassPathResource("resources/")));
     }
 
     WebServer start() throws Exception {

File: spring-reactive-modules/spring-5-reactive/src/test/java/com/baeldung/reactive/urlmatch/ExploreSpring5URLPatternUsingRouterFunctionsIntegrationTest.java
Patch:
@@ -108,9 +108,9 @@ public void givenResources_whenAccess_thenGot() throws Exception {
     }
 
     @Test
-    public void givenRouter_whenAccess_thenGot() throws Exception {
+    public void givenRouter_whenAccess_thenGot() {
         client.get()
-            .uri("//test/test.txt")
+            .uri("/resources/test/test.txt")
             .exchange()
             .expectStatus()
             .isOk()

File: spring-reactive-modules/spring-5-reactive/src/test/java/com/baeldung/reactive/urlmatch/PathPatternsUsingHandlerMethodIntegrationTest.java
Patch:
@@ -72,12 +72,12 @@ public void givenHandlerMethod_whenURLWithWildcardTakingExactlyOneChar_then200()
     public void givenHandlerMethod_whenURLWithWildcardTakingZeroOrMorePathSegments_then200() {
 
         client.get()
-            .uri("//baeldung")
+            .uri("/resources/baeldung")
             .exchange()
             .expectStatus()
             .is2xxSuccessful()
             .expectBody()
-            .equals("//**");
+            .equals("/resources/**");
     }
 
     @Test

File: spring-boot-modules/spring-boot-ssl-bundles/src/test/java/com/baeldung/springbootsslbundles/SpringContextTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest
-class SSLBundleApplicationTests {
+class SpringContextTest {
     @Test
     void contextLoads() {
 

File: persistence-modules/spring-data-cassandra-2/src/test/java/org/baeldung/cassandra/inquery/ProductRepositoryNestedLiveTest.java
Patch:
@@ -23,7 +23,7 @@
 
 @Testcontainers
 @SpringBootTest
-class ProductRepositoryIntegrationTest {
+class ProductRepositoryNestedLiveTest {
 
     private static final String KEYSPACE_NAME = "mynamespace";
 

File: core-java-modules/core-java-collections-array-list-2/src/main/java/com/baeldung/list/multipleobjecttypes/AlternativeMultipeTypeList.java
Patch:
@@ -31,10 +31,10 @@ public static void main(String[] args) {
         // List via Functional Interface
         List<Object> dataList = new ArrayList<>();
 
-        Predicate<Object> myPricate = inputData -> (inputData instanceof String || inputData instanceof Integer);
+        Predicate<Object> myPredicate = inputData -> (inputData instanceof String || inputData instanceof Integer);
 
         UserFunctionalInterface myInterface = (listObj, data) -> {
-            if (myPricate.test(data))
+            if (myPredicate.test(data))
                 listObj.add(data);
             else
                 System.out.println("Skipping input as data not allowed for class: " + data.getClass()

File: core-java-modules/core-java-concurrency-simple/src/test/java/com/baeldung/concurrent/completablefuture/CompletableFutureTimeoutUnitTest.java
Patch:
@@ -17,7 +17,7 @@
 public class CompletableFutureTimeoutUnitTest {
     private static WireMockServer wireMockServer;
     private static ScheduledExecutorService executorService;
-    private static final int DEFAULT_TIMEOUT = 500; //0.5 seconds
+    private static final int DEFAULT_TIMEOUT = 1000; //1 seconds
     private static final int TIMEOUT_STATUS_CODE = 408; //0.5 seconds
 
     @BeforeAll

File: quarkus-modules/quarkus/src/test/java/com/baeldung/quarkus/NativeHelloResourceIT.java
Patch:
@@ -2,9 +2,9 @@
 
 import io.quarkus.test.common.QuarkusTestResource;
 import io.quarkus.test.h2.H2DatabaseTestResource;
-import io.quarkus.test.junit.NativeImageTest;
+import io.quarkus.test.junit.QuarkusIntegrationTest;
 
-@NativeImageTest
+@QuarkusIntegrationTest
 @QuarkusTestResource(H2DatabaseTestResource.class)
 public class NativeHelloResourceIT extends HelloResourceUnitTest {
 

File: quarkus-modules/quarkus/src/test/java/com/baeldung/quarkus/NativeLibraryResourceIT.java
Patch:
@@ -2,9 +2,9 @@
 
 import io.quarkus.test.common.QuarkusTestResource;
 import io.quarkus.test.h2.H2DatabaseTestResource;
-import io.quarkus.test.junit.NativeImageTest;
+import io.quarkus.test.junit.QuarkusIntegrationTest;
 
-@NativeImageTest
+@QuarkusIntegrationTest
 @QuarkusTestResource(H2DatabaseTestResource.class)
 class NativeLibraryResourceIT extends LibraryHttpEndpointIntegrationTest {
 }

File: core-java-modules/core-java-collections-maps-5/src/main/java/com/baeldung/map/identity/IdentityHashMapDemonstrator.java
Patch:
@@ -53,7 +53,7 @@ private static void iterateIdentityHashMap(IdentityHashMap<String, String> ident
         }
     }
 
-    private static class Book {
+    static class Book {
         String title;
         int year;
 

File: core-java-modules/core-java-networking/src/test/java/com/baeldung/socket/EchoIntegrationTest.java
Patch:
@@ -24,7 +24,7 @@ public static void start() throws InterruptedException, IOException {
 
         Executors.newSingleThreadExecutor()
             .submit(() -> new EchoServer().start(port));
-        Thread.sleep(500);
+        Thread.sleep(2000);
     }
 
     private EchoClient client = new EchoClient();

File: core-java-modules/core-java-networking/src/test/java/com/baeldung/socket/GreetServerIntegrationTest.java
Patch:
@@ -27,7 +27,7 @@ public static void start() throws InterruptedException, IOException {
         
         Executors.newSingleThreadExecutor()
             .submit(() -> new GreetServer().start(port));
-        Thread.sleep(500);
+        Thread.sleep(2000);
     }
 
     @Before

File: core-java-modules/core-java-networking/src/test/java/com/baeldung/socket/SocketEchoMultiIntegrationTest.java
Patch:
@@ -23,7 +23,7 @@ public static void start() throws InterruptedException, IOException {
         s.close();
 
         Executors.newSingleThreadExecutor().submit(() -> new EchoMultiServer().start(port));
-        Thread.sleep(500);
+        Thread.sleep(2000);
     }
 
     @Test

File: core-java-modules/core-java-io/src/test/java/com/baeldung/extension/ExtensionFromMimeTypeUnitTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.junit.Test;
 
-import com.j256.simplemagic.ContentInfo;
+import com.j256.simplemagic.ContentType;
 
 public class ExtensionFromMimeTypeUnitTest {
     private static final String IMAGE_JPEG_MIME_TYPE = "image/jpeg";
@@ -39,8 +39,7 @@ public void  whenUsingJodd_thenGetFileExtension() {
     @Test
     public void whenUsingMimetypesFileTypeMap_thenGetFileExtension() {
         List<String> expectedExtensions = Arrays.asList("jpeg", "jpg", "jpe");
-        ContentInfo contentInfo = new ContentInfo("", IMAGE_JPEG_MIME_TYPE, "", true);
-        String[] detectedExtensions = contentInfo.getFileExtensions();
+        String[] detectedExtensions = ContentType.fromMimeType(IMAGE_JPEG_MIME_TYPE).getFileExtensions();
         assertThat(detectedExtensions).containsExactlyElementsOf(expectedExtensions);
     }
 

File: core-java-modules/core-java-io/src/test/java/com/baeldung/extension/ExtensionFromMimeTypeUnitTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.junit.Test;
 
-import com.j256.simplemagic.ContentInfo;
+import com.j256.simplemagic.ContentType;
 
 public class ExtensionFromMimeTypeUnitTest {
     private static final String IMAGE_JPEG_MIME_TYPE = "image/jpeg";
@@ -39,8 +39,7 @@ public void  whenUsingJodd_thenGetFileExtension() {
     @Test
     public void whenUsingMimetypesFileTypeMap_thenGetFileExtension() {
         List<String> expectedExtensions = Arrays.asList("jpeg", "jpg", "jpe");
-        ContentInfo contentInfo = new ContentInfo("", IMAGE_JPEG_MIME_TYPE, "", true);
-        String[] detectedExtensions = contentInfo.getFileExtensions();
+        String[] detectedExtensions = ContentType.fromMimeType(IMAGE_JPEG_MIME_TYPE).getFileExtensions();
         assertThat(detectedExtensions).containsExactlyElementsOf(expectedExtensions);
     }
 

File: apache-httpclient-2/src/test/java/com/baeldung/httpclient/cookies/HttpClientGettingCookieValueUnitTest.java
Patch:
@@ -14,6 +14,7 @@
 import org.apache.hc.client5.http.impl.cookie.BasicClientCookie;
 import org.apache.hc.client5.http.protocol.HttpClientContext;
 
+import org.apache.http.cookie.ClientCookie;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -51,8 +52,8 @@ void whenSettingCustomCookieOnTheRequest_thenGettingTheSameCookieFromTheResponse
     private BasicCookieStore createCustomCookieStore() {
         BasicCookieStore cookieStore = new BasicCookieStore();
         BasicClientCookie cookie = new BasicClientCookie("custom_cookie", "test_value");
-        cookie.setDomain("baeldung.com");
-        cookie.setAttribute("domain", "true");
+        cookie.setDomain("github.com");
+        cookie.setAttribute(ClientCookie.DOMAIN_ATTR, "github.com");
         cookie.setPath("/");
         cookieStore.addCookie(cookie);
         return cookieStore;

File: core-java-modules/core-java-perf-2/src/test/java/com/baeldung/lapsedlistener/MovieQuoteServiceUnitTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import org.junit.jupiter.api.Test;
 
-class MovieQuoteServiceTest {
+class MovieQuoteServiceUnitTest {
 
     @Test
     void whenSubscribeToService_thenServiceHasOneSubscriber() {

File: apache-httpclient-2/src/test/java/com/baeldung/httpclient/cookies/HttpClientGettingCookieValueUnitTest.java
Patch:
@@ -14,6 +14,7 @@
 import org.apache.hc.client5.http.impl.cookie.BasicClientCookie;
 import org.apache.hc.client5.http.protocol.HttpClientContext;
 
+import org.apache.http.cookie.ClientCookie;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -51,8 +52,8 @@ void whenSettingCustomCookieOnTheRequest_thenGettingTheSameCookieFromTheResponse
     private BasicCookieStore createCustomCookieStore() {
         BasicCookieStore cookieStore = new BasicCookieStore();
         BasicClientCookie cookie = new BasicClientCookie("custom_cookie", "test_value");
-        cookie.setDomain("baeldung.com");
-        cookie.setAttribute("domain", "true");
+        cookie.setDomain("github.com");
+        cookie.setAttribute(ClientCookie.DOMAIN_ATTR, "github.com");
         cookie.setPath("/");
         cookieStore.addCookie(cookie);
         return cookieStore;

File: core-java-modules/core-java-perf-2/src/test/java/com/baeldung/lapsedlistener/MovieQuoteServiceUnitTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import org.junit.jupiter.api.Test;
 
-class MovieQuoteServiceTest {
+class MovieQuoteServiceUnitTest {
 
     @Test
     void whenSubscribeToService_thenServiceHasOneSubscriber() {

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/stringtoolong/StringTooLongUnitTest.java
Patch:
@@ -27,7 +27,7 @@ public void whenStoringInFileTooLongString_thenNoCompilationError() throws IOExc
     @Test
     public void whenStoringInPropertiesString_thenNoCompilationError() throws IOException {
         String sValue = null;
-        try (InputStream input = new FileInputStream("src/main/resources/config.properties")) {
+        try (InputStream input = new FileInputStream("src/test/resources/config.properties")) {
             Properties prop = new Properties();
             prop.load(input);
             sValue = prop.getProperty("string.too.long");

File: testing-modules/junit-5-basics-2/src/test/java/com/baeldung/junit/main/test/TestSimpleMain.java
Patch:
@@ -82,10 +82,8 @@ public void givenLongArgumentAsConsoleInput_WhenReadFromSubstitutedFileStream_Th
         System.setIn(fips);
         System.setOut(out);
 
-        //execute
         SimpleMain.main(arguments);
 
-        //verify
         String consoleOutput = byteArrayOutputStream.toString(Charset.defaultCharset());
         assertTrue(consoleOutput.contains("Calculated sum: 10"));
 

File: xml-2/src/main/java/com/baeldung/xml/validation/XmlValidator.java
Patch:
@@ -44,7 +44,7 @@ public List<SAXParseException> listParsingExceptions() throws IOException, SAXEx
         try {
             validator.validate(new StreamSource(getFile(xmlPath)));
         } catch (SAXParseException e) {}
-        xsdErrorHandler.getExceptions().forEach(e -> LOGGER.info(e.getMessage()));
+        xsdErrorHandler.getExceptions().forEach(e -> LOGGER.info(String.format("Line number: %s, Column number: %s. %s", e.getLineNumber(), e.getColumnNumber(), e.getMessage())));
         return xsdErrorHandler.getExceptions();
     }
 

File: web-modules/javax-servlets-2/src/test/java/com/baeldung/setparam/LanguageServletLiveTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.apache.http.util.EntityUtils;
 import org.junit.Test;
 
-public class LanguageServletIntegrationTest {
+public class LanguageServletLiveTest {
 
     @Test
     public void whenGetRequestUsingHttpClient_thenResponseBodyContainsDefaultLanguage() throws Exception {

File: web-modules/javax-servlets-2/src/test/java/com/baeldung/setparam/SanitizeParametersRequestLiveTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-public class SanitizeParametersRequestIntegrationTest {
+public class SanitizeParametersRequestLiveTest {
 
     private static String PARAM_INPUT;
 

File: web-modules/javax-servlets-2/src/test/java/com/baeldung/setparam/UnsanitizedParametersRequestLiveTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-public class UnsanitizedParametersRequestIntegrationTest {
+public class UnsanitizedParametersRequestLiveTest {
 
     private static final String TAG_SCRIPT = "<script>alert('Hello');</script>";
 

File: testing-modules/junit-5-basics-2/src/main/java/com/baeldung/junit/main/test/Bootstrapper.java
Patch:
@@ -55,7 +55,6 @@ public static Options getOptions() {
             .build();
 
         Options options = new Options();
-
         options.addOption(inputTypeOption);
         options.addOption(fileNameOption);
         return options;

File: testing-modules/junit-5-basics-2/src/main/java/com/baeldung/junit/main/test/InputReader.java
Patch:
@@ -21,9 +21,7 @@ public String read(InputType inputType, String fileName) {
 
     private String readFromConsole() {
         System.out.println("Enter values for calculation: \n");
-        String str = new Scanner(System.in).nextLine();
-
-        return str;
+        return new Scanner(System.in).nextLine();
     }
 
     private String readFromFile(String fileName) {

File: testing-modules/junit-5-basics-2/src/main/java/com/baeldung/junit/main/test/StaticMain.java
Patch:
@@ -17,7 +17,6 @@
 public class StaticMain {
 
     public static void main(String[] args) {
-
         System.out.println("Received input parameters: " + Arrays.asList(args));
 
         processRequest(args);
@@ -54,7 +53,6 @@ public static void processRequest(String[] args) {
     }
 
     public static Options getOptions() {
-
         Option inputTypeOption = Option.builder("i")
             .longOpt("input")
             .required(true)
@@ -70,7 +68,6 @@ public static Options getOptions() {
             .build();
 
         Options options = new Options();
-
         options.addOption(inputTypeOption);
         options.addOption(fileNameOption);
         return options;

File: testing-modules/junit-5-basics-2/src/test/java/com/baeldung/junit/main/test/TestStaticMain.java
Patch:
@@ -24,10 +24,8 @@ public void givenArgumentAsConsoleInput_WhenReadFromSubstitutedByteArrayInputStr
 
             ArgumentCaptor<String> stringArgumentCaptor = ArgumentCaptor.forClass(String.class);
 
-            //execute
             StaticMain.main(arguments);
 
-            //verify
             mockedStatic.verify(() -> StaticMain.calculateSum(stringArgumentCaptor.capture()));
 
             System.setIn(original);

File: security-modules/jwt/src/test/java/com/baeldung/jwt/auth0/Auth0JsonWebTokenUnitTest.java
Patch:
@@ -105,7 +105,7 @@ public void givenJWT_whenCreatedWithNotBefore_thenThrowException() {
         jwtToken = JWT.create()
           .withIssuer(ISSUER)
           .withClaim(DATA_CLAIM, DATA)
-          .withNotBefore(new Date(System.currentTimeMillis() + 1000L))
+          .withNotBefore(new Date(System.currentTimeMillis() + 10000L))
           .sign(algorithm);
 
         assertThrows(IncorrectClaimException.class, () -> {

File: security-modules/jwt/src/test/java/com/baeldung/jwt/auth0/Auth0JsonWebTokenUnitTest.java
Patch:
@@ -103,7 +103,7 @@ public void givenJWT_whenCreatedWithNotBefore_thenThrowException() {
         jwtToken = JWT.create()
           .withIssuer(ISSUER)
           .withClaim(DATA_CLAIM, DATA)
-          .withNotBefore(new Date(System.currentTimeMillis() + 1000L))
+          .withNotBefore(new Date(System.currentTimeMillis() + 10000L))
           .sign(algorithm);
 
         assertThrows(IncorrectClaimException.class, () -> {

File: jackson-modules/jackson-conversions/src/test/java/com/baeldung/jackson/date/JacksonDateUnitTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.junit.Test;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
 import com.fasterxml.jackson.databind.util.StdDateFormat;
@@ -67,6 +68,8 @@ public void whenDeserialisingZonedDateTimeWithDefaults_thenNotCorrect()
         ObjectMapper objectMapper = new ObjectMapper();
         objectMapper.findAndRegisterModules();
         objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
+        objectMapper.enable(SerializationFeature.WRITE_DATES_WITH_ZONE_ID);
+        objectMapper.disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);
         ZonedDateTime now = ZonedDateTime.now(ZoneId.of("UTC"));
         String converted = objectMapper.writeValueAsString(now);
      

File: aws-modules/aws-s3-update-object/src/main/java/com/baeldung/awss3updateobject/service/FileService.java
Patch:
@@ -7,13 +7,13 @@
 import com.amazonaws.services.s3.AmazonS3;
 import com.amazonaws.services.s3.AmazonS3ClientBuilder;
 import com.amazonaws.services.s3.model.*;
-import jakarta.annotation.PostConstruct;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.stereotype.Service;
 import org.springframework.web.multipart.MultipartFile;
 
+import javax.annotation.PostConstruct;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.HashMap;

File: aws-modules/aws-s3-update-object/src/test/java/com/baeldung/awss3updateobject/service/FileServiceUnitTest.java
Patch:
@@ -41,6 +41,7 @@ public void setup() {
     @Test
     public void givenValidFile_whenUploaded_thenKeyMatchesDocumentPath() throws Exception {
         when(multipartFile.getName()).thenReturn("testFile");
+        when(multipartFile.getOriginalFilename()).thenReturn("testFile");
         when(multipartFile.getContentType()).thenReturn("application/pdf");
         when(multipartFile.getSize()).thenReturn(1024L);
         when(multipartFile.getInputStream()).thenReturn(mock(InputStream.class));
@@ -57,6 +58,7 @@ public void givenValidFile_whenUploaded_thenKeyMatchesDocumentPath() throws Exce
     @Test
     public void givenValidFile_whenUploadFailsDueToNoBucket_thenExceptionIsThrown() throws Exception {
         when(multipartFile.getName()).thenReturn("testFile");
+        when(multipartFile.getOriginalFilename()).thenReturn("testFile");
         when(multipartFile.getContentType()).thenReturn("application/pdf");
         when(multipartFile.getSize()).thenReturn(1024L);
         when(multipartFile.getInputStream()).thenReturn(mock(InputStream.class));

File: core-java-modules/core-java-security-2/src/test/java/com/baeldung/trustedcert/CertificatesUnitTest.java
Patch:
@@ -28,9 +28,6 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
-import org.junit.jupiter.api.Disabled;
-
-@Disabled //fixing in https://team.baeldung.com/browse/JAVA-23897 
 public class CertificatesUnitTest {
 
     private static final String GODADDY_CA_ALIAS = "godaddyrootg2ca [jdk]";

File: persistence-modules/spring-data-shardingsphere/src/test/java/com/baeldung/shardingsphere/OrderServiceLiveTest.java
Patch:
@@ -21,7 +21,7 @@
 
 @Testcontainers
 @SpringBootTest
-class OrderServiceIntegrationTest {
+class OrderServiceLiveTest {
 
     @Container
     static MySQLContainer<?> mySQLContainer1 = new MySQLContainer<>("mysql:8.0.23")

File: core-java-modules/core-java-lang-math-3/src/test/java/com/baeldung/magicsquare/GenerationUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.leetcode.magicsquare;
+package com.baeldung.magicsquare;
 
 import org.junit.jupiter.api.Test;
 

File: core-java-modules/core-java-lang-math-3/src/test/java/com/baeldung/magicsquare/ValidationUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.leetcode.magicsquare;
+package com.baeldung.magicsquare;
 
 import org.junit.jupiter.api.Test;
 

File: persistence-modules/hibernate-annotations/src/main/java/com/baeldung/hibernate/primarykeyjoincolumn/Department.java
Patch:
@@ -1,6 +1,8 @@
 package com.baeldung.hibernate.primarykeyjoincolumn;
 
 import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
 import jakarta.persistence.Id;
 import jakarta.persistence.Table;
 
@@ -9,6 +11,7 @@
 public class Department {
 
     @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
 
     private String name;

File: jackson-simple/src/main/java/com/baeldung/jackson/objectmapper/ObjectMapperBuilder.java
Patch:
@@ -3,6 +3,7 @@
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.time.ZoneId;
+import java.util.Locale;
 import java.util.TimeZone;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -19,7 +20,7 @@ public ObjectMapperBuilder enableIndentation() {
     }
 
     public ObjectMapperBuilder dateFormat() {
-        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm a z");
+        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm a z", Locale.ENGLISH);
         simpleDateFormat.setTimeZone(TimeZone.getTimeZone(ZoneId.of("Asia/Kolkata")));
         this.dateFormat = simpleDateFormat;
         return this;

File: security-modules/java-ee-8-security-api/app-auth-basic-store-db/src/main/java/com/baeldung/javaee/security/AdminServlet.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.javaee.security;
 
-import javax.servlet.ServletException;
 import javax.servlet.annotation.HttpConstraint;
 import javax.servlet.annotation.ServletSecurity;
 import javax.servlet.annotation.WebServlet;
@@ -14,7 +13,7 @@
 public class AdminServlet extends HttpServlet {
 
     @Override
-    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
         response.getWriter().append("User :" + request.getUserPrincipal().getName() + "\n");
         response.getWriter().append("User in Role user_role :" + request.isUserInRole("user_role") + "\n");
         response.getWriter().append("User in Role admin_role :" + request.isUserInRole("admin_role"));

File: security-modules/java-ee-8-security-api/app-auth-basic-store-db/src/main/java/com/baeldung/javaee/security/AppConfig.java
Patch:
@@ -2,7 +2,6 @@
 
 import javax.enterprise.context.ApplicationScoped;
 import javax.security.enterprise.authentication.mechanism.http.BasicAuthenticationMechanismDefinition;
-import javax.security.enterprise.authentication.mechanism.http.CustomFormAuthenticationMechanismDefinition;
 import javax.security.enterprise.identitystore.DatabaseIdentityStoreDefinition;
 
 @BasicAuthenticationMechanismDefinition(realmName = "defaultRealm")

File: security-modules/java-ee-8-security-api/app-auth-basic-store-db/src/main/java/com/baeldung/javaee/security/UserServlet.java
Patch:
@@ -1,8 +1,5 @@
 package com.baeldung.javaee.security;
 
-import javax.annotation.security.DeclareRoles;
-import javax.inject.Inject;
-import javax.security.enterprise.SecurityContext;
 import javax.servlet.ServletException;
 import javax.servlet.annotation.HttpConstraint;
 import javax.servlet.annotation.ServletSecurity;

File: persistence-modules/spring-data-rest-2/src/main/java/com/baeldung/pageentityresponse/EmployeeClient.java
Patch:
@@ -24,8 +24,9 @@ public Page<EmployeeDto> getEmployeeDataFromExternalAPI(Pageable pageable) {
           .queryParam("page", pageable.getPageNumber())
           .queryParam("size", pageable.getPageSize());
 
-        ResponseEntity<CustomPageImpl<EmployeeDto>> responseEntity = restTemplate.exchange(uriBuilder.toUriString(), HttpMethod.GET, null, new ParameterizedTypeReference<CustomPageImpl<EmployeeDto>>() {
-        });
+        ResponseEntity<CustomPageImpl<EmployeeDto>> responseEntity = restTemplate.exchange(uriBuilder.toUriString(),
+          HttpMethod.GET, null, new ParameterizedTypeReference<CustomPageImpl<EmployeeDto>>() {
+          });
 
         return responseEntity.getBody();
     }

File: persistence-modules/spring-data-rest-2/src/main/java/com/baeldung/pageentityresponse/EmployeeController.java
Patch:
@@ -30,7 +30,8 @@ public ResponseEntity<Page<EmployeeDto>> getEmployeeData(Pageable pageable) {
     }
 
     @GetMapping("/data")
-    public ResponseEntity<Page<EmployeeDto>> getData(@RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size) {
+    public ResponseEntity<Page<EmployeeDto>> getData(@RequestParam(defaultValue = "0") int page,
+      @RequestParam(defaultValue = "10") int size) {
         List<EmployeeDto> empList = listImplementation();
 
         int totalSize = empList.size();

File: core-java-modules/core-java-scanner/src/test/java/com/baeldung/scannernextline/ScannerNextLineUnitTest.java
Patch:
@@ -1,11 +1,11 @@
 package com.baeldung.scannernextline;
 
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
 
 import java.util.NoSuchElementException;
 import java.util.Scanner;
 
-import static org.junit.Assert.assertEquals;
+import org.junit.Test;
 
 public class ScannerNextLineUnitTest {
 

File: apache-httpclient/src/test/java/com/baeldung/httpclient/base/HttpClientLiveTest.java
Patch:
@@ -43,7 +43,7 @@ public final void after() throws IllegalStateException, IOException {
 
     @Test(expected = ConnectTimeoutException.class)
     public final void givenLowTimeout_whenExecutingRequestWithTimeout_thenException() throws IOException {
-        final RequestConfig requestConfig = RequestConfig.custom().setConnectionRequestTimeout(50).setConnectTimeout(50).setSocketTimeout(20).build();
+        final RequestConfig requestConfig = RequestConfig.custom().setConnectionRequestTimeout(5).setConnectTimeout(5).setSocketTimeout(2).build();
         final HttpGet request = new HttpGet(SAMPLE_URL);
         request.setConfig(requestConfig);
         response = instance.execute(request);

File: persistence-modules/spring-data-rest-2/src/main/java/com/baeldung/pageentityresponse/EmployeeClient.java
Patch:
@@ -18,7 +18,7 @@ public EmployeeClient(RestTemplate restTemplate) {
     }
 
     public Page<EmployeeDto> getEmployeeDataFromExternalAPI(Pageable pageable) {
-        String url = "http://localhost:8080/external-service/employee";
+        String url = "http://localhost:8080/employee";
 
         UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromUriString(url)
           .queryParam("page", pageable.getPageNumber())

File: core-java-modules/core-java-io-apis-2/src/test/java/com/baeldung/bufferedreadervsfilereader/FileReaderUnitTest.java
Patch:
@@ -7,10 +7,10 @@
 
 import org.junit.jupiter.api.Test;
 
-public class FileReaderUnitTest {
+class FileReaderUnitTest {
 
     @Test
-    public void whenReadingAFile_thenReadsCharByChar() {
+    void whenReadingAFile_thenReadsCharByChar() {
         StringBuilder result = new StringBuilder();
 
         try (FileReader fr = new FileReader("src/test/resources/sampleText2.txt")) {

File: core-java-modules/core-java-io-apis-2/src/test/java/com/baeldung/bufferedreadervsfilereader/FileReaderUnitTest.java
Patch:
@@ -7,10 +7,10 @@
 
 import org.junit.jupiter.api.Test;
 
-public class FileReaderUnitTest {
+class FileReaderUnitTest {
 
     @Test
-    public void whenReadingAFile_thenReadsCharByChar() {
+    void whenReadingAFile_thenReadsCharByChar() {
         StringBuilder result = new StringBuilder();
 
         try (FileReader fr = new FileReader("src/test/resources/sampleText2.txt")) {

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/pages/BaeldungHomePage.java
Patch:
@@ -10,7 +10,7 @@ public class BaeldungHomePage {
     private SeleniumConfig config;
     @FindBy(css = ".nav--logo_mobile")
     private WebElement title;
-    @FindBy(css = ".menu-start-here > a")
+    @FindBy(css = ".header--menu")
     private WebElement startHere;
 
     public BaeldungHomePage(SeleniumConfig config) {

File: testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/setup/InvalidSetupLiveTest.java
Patch:
@@ -13,9 +13,9 @@ final class InvalidSetupLiveTest {
     @BeforeAll
     static void setup() {
         // Make sure the properties are cleared before the tests.
-        System.clearProperty("webdriver.chrome.driver");
-        System.clearProperty("webdriver.gecko.driver");
-        System.clearProperty("webdriver.edge.driver");
+        System.setProperty("webdriver.chrome.driver", "");
+        System.setProperty("webdriver.gecko.driver","");
+        System.setProperty("webdriver.edge.driver","");
     }
 
     @Test

File: testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/webdriver/SeleniumWebDriverUnitTest.java
Patch:
@@ -16,7 +16,7 @@ public class SeleniumWebDriverUnitTest {
     private WebDriver driver;
 
     private static final String URL = "https://duckduckgo.com/";
-    private static final String INPUT_ID = "search_form_input_homepage";
+    private static final String INPUT_ID = "searchbox_input__bEGm3";
 
     @BeforeEach
     public void setUp() {
@@ -32,7 +32,7 @@ public void tearDown() {
     @Test
     public void givenDuckDuckGoHomePage_whenInputHelloWorld_thenInputValueIsHelloWorld() {
         driver.get(URL);
-        WebElement inputElement = driver.findElement(By.id(INPUT_ID));
+        WebElement inputElement = driver.findElement(By.className(INPUT_ID));
         inputElement.sendKeys(Keys.chord(Keys.CONTROL, "a"), Keys.DELETE);
         inputElement.sendKeys("Hello World!");
 

File: spring-boot-modules/spring-boot-redis/src/main/java/com/baelding/springbootredis/config/RedisConfiguration.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.baelding.springbootredis.model.Session;
 import lombok.extern.slf4j.Slf4j;
-import org.springframework.context.ApplicationListener;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.event.EventListener;

File: spring-boot-modules/spring-boot-redis/src/main/java/com/baelding/springbootredis/controller/SessionController.java
Patch:
@@ -6,7 +6,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.util.LinkedMultiValueMap;
 import org.springframework.util.MultiValueMap;

File: spring-boot-modules/spring-boot-redis/src/test/java/com/baelding/springbootredis/SpringBootRedisApplicationIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.HttpHeaders;
 import org.springframework.test.web.reactive.server.WebTestClient;
@@ -19,6 +20,7 @@
 import java.util.stream.IntStream;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = RedisTestConfiguration.class)
+@AutoConfigureMockMvc
 class SpringBootRedisApplicationIntegrationTest {
 
     private static final String V1_SESSIONS_ENDPOINT = "/v1/sessions";

File: persistence-modules/spring-boot-persistence-mongodb-3/src/main/java/com/baeldung/boot/csfle/data/EncryptedCitizen.java
Patch:
@@ -13,8 +13,8 @@ public class EncryptedCitizen {
     public EncryptedCitizen() {
     }
 
-    public EncryptedCitizen(Citizen citizen) {
-        this.name = citizen.getName();
+    public EncryptedCitizen(String name) {
+        this.name = name;
     }
 
     public String getName() {

File: core-java-modules/core-java-8/src/main/java/com/baeldung/spliterator/Article.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spliteratorAPI;
+package com.baeldung.spliterator;
 
 import java.util.List;
 

File: core-java-modules/core-java-8/src/main/java/com/baeldung/spliterator/Author.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spliteratorAPI;
+package com.baeldung.spliterator;
 
 public class Author {
     private String name;

File: core-java-modules/core-java-8/src/main/java/com/baeldung/spliterator/Executor.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spliteratorAPI;
+package com.baeldung.spliterator;
 
 import java.util.List;
 import java.util.stream.Collectors;

File: core-java-modules/core-java-8/src/main/java/com/baeldung/spliterator/RelatedAuthorCounter.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spliteratorAPI;
+package com.baeldung.spliterator;
 
 public class RelatedAuthorCounter {
     private final int counter;

File: core-java-modules/core-java-8/src/main/java/com/baeldung/spliterator/RelatedAuthorSpliterator.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spliteratorAPI;
+package com.baeldung.spliterator;
 
 import java.util.List;
 import java.util.Spliterator;

File: core-java-modules/core-java-8/src/main/java/com/baeldung/spliterator/Task.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spliteratorAPI;
+package com.baeldung.spliterator;
 
 import java.util.Spliterator;
 import java.util.concurrent.Callable;

File: testing-modules/junit5-migration/src/test/java/com/baeldung/junit5vstestng/SelectPackagesSuiteUnitTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.platform.suite.api.Suite;
 
 @Suite
-@SelectPackages({ "com.baeldung.java.suite.childpackage1", "com.baeldung.java.suite.childpackage2" })
+@SelectPackages({ "com.baeldung.java.suite.junit4", "com.baeldung.java.suite.junit5" })
 public class SelectPackagesSuiteUnitTest {
 
 }

File: persistence-modules/redis/src/test/java/com/baeldung/JedisIntegrationTest.java
Patch:
@@ -38,7 +38,7 @@ public static void setUp() throws IOException {
         
         redisServer = RedisServer.builder()
                 .port(port)
-                .setting("maxheap 128M")
+                .setting("maxmemory 128M")
                 .build();
         redisServer.start();
         

File: persistence-modules/redis/src/test/java/com/baeldung/RedissonConfigurationIntegrationTest.java
Patch:
@@ -34,7 +34,7 @@ public static void setUp() throws IOException {
 
         redisServer = RedisServer.builder()
                 .port(port)
-                .setting("maxheap 128M")
+                .setting("maxmemory 128M")
                 .build();
         redisServer.start();
     }

File: persistence-modules/redis/src/test/java/com/baeldung/RedissonIntegrationTest.java
Patch:
@@ -32,7 +32,7 @@ public class RedissonIntegrationTest {
     public static void setUp() {
         redisServer = RedisServer.builder()
                         .port(6379)
-                        .setting("maxheap 128M")
+                        .setting("maxmemory 128M")
                         .build();
         redisServer.start();
         client = Redisson.create();

File: persistence-modules/redis/src/test/java/com/baeldung/redis/deleteeverything/DeleteEverythingInRedisIntegrationTest.java
Patch:
@@ -25,7 +25,7 @@ public void setUp() throws IOException {
 
         redisServer = RedisServer.builder()
                 .port(port)
-                .setting("maxheap 128M")
+                .setting("maxmemory 128M")
                 .build();
         redisServer.start();
 

File: persistence-modules/redis/src/test/java/com/baeldung/redis_scan/NaiveApproachIntegrationTest.java
Patch:
@@ -27,7 +27,7 @@ public static void setUp() throws IOException {
 
         redisServer = RedisServer.builder()
                 .port(port)
-                .setting("maxheap 128M")
+                .setting("maxmemory 128M")
                 .build();
     }
 

File: persistence-modules/redis/src/test/java/com/baeldung/redis_scan/ScanStrategyIntegrationTest.java
Patch:
@@ -33,7 +33,7 @@ public static void setUp() throws IOException {
 
         redisServer = RedisServer.builder()
                 .port(port)
-                .setting("maxheap 128M")
+                .setting("maxmemory 128M")
                 .build();
     }
 

File: persistence-modules/hibernate-annotations/src/main/java/com/baeldung/hibernate/customtypes/Salary.java
Patch:
@@ -1,8 +1,9 @@
 package com.baeldung.hibernate.customtypes;
 
+import java.io.Serializable;
 import java.util.Objects;
 
-public class Salary {
+public class Salary implements Serializable {
 
     private Long amount;
     private String currency;

File: core-java-modules/core-java-lang-oop-methods/src/main/java/com/baeldung/equalshashcode/Voucher.java
Patch:
@@ -16,7 +16,7 @@ public boolean equals(Object o) {
             return true;
         if (!(o instanceof Voucher))
             return false;
-        Voucher other = (Voucher)o;
+        Voucher other = (Voucher) o;
         boolean valueEquals = (this.value == null && other.value == null)
           || (this.value != null && this.value.equals(other.value));
         boolean storeEquals = (this.store == null && other.store == null)

File: patterns-modules/cqrs-es/src/main/java/com/baeldung/patterns/es/service/UserUtility.java
Patch:
@@ -23,8 +23,7 @@ public static User recreateUserState(EventStore store, String userId) {
         for (Event event : events) {
             if (event instanceof UserCreatedEvent) {
                 UserCreatedEvent e = (UserCreatedEvent) event;
-                user = new User(UUID.randomUUID()
-                    .toString(), e.getFirstName(), e.getLastName());
+                user = new User(e.getUserId(), e.getFirstName(), e.getLastName());
             }
             if (event instanceof UserAddressAddedEvent) {
                 UserAddressAddedEvent e = (UserAddressAddedEvent) event;

File: core-java-modules/core-java-perf-2/src/main/java/com/baeldung/jmxterm/Player.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jmxterm;
 
-import static com.baeldung.jmxterm.RandomNumbergenerator.*;
+import static com.baeldung.jmxterm.RandomNumbergenerator.generateRandomNumber;
 
 public class Player extends AbstractPlayerMBean {
     private final String name;

File: core-java-modules/core-java-perf-2/src/test/java/com/baeldung/jmxterm/PlayerUnitTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jmxterm;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import org.junit.jupiter.api.Test;
 

File: persistence-modules/java-jpa-2/src/main/java/com/baeldung/jpa/criteria/Item.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.jpa.criteria;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
-import javax.persistence.Table;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
 
 @Table(name = "item")
 @Entity

File: persistence-modules/java-jpa-2/src/main/java/com/baeldung/jpa/defaultvalues/UserRepository.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.jpa.defaultvalues;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 
 public class UserRepository {
 

File: persistence-modules/java-jpa-2/src/main/java/com/baeldung/jpa/entity/Article.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.jpa.entity;
 
-import javax.persistence.Entity;
-import javax.persistence.Table;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Table;
 
 @Entity(name = "MyArticle")
 @Table(name = Article.TABLE_NAME)

File: persistence-modules/java-jpa-2/src/main/java/com/baeldung/jpa/multipletables/secondarytable/embeddable/AllergensAsEmbeddable.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.jpa.multipletables.secondarytable.embeddable;
 
-import javax.persistence.Column;
-import javax.persistence.Embeddable;
+import jakarta.persistence.Column;
+import jakarta.persistence.Embeddable;
 
 @Embeddable
 public class AllergensAsEmbeddable {

File: persistence-modules/java-jpa-2/src/main/java/com/baeldung/jpa/text/Exam.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jpa.text;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 public class Exam {

File: persistence-modules/java-jpa-2/src/main/java/com/baeldung/jpa/text/ExamRepository.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.jpa.text;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 
 public class ExamRepository {
 

File: persistence-modules/java-jpa-2/src/test/java/com/baeldung/jpa/defaultvalues/UserDefaultValuesUnitTest.java
Patch:
@@ -1,8 +1,5 @@
 package com.baeldung.jpa.defaultvalues;
 
-import com.baeldung.jpa.defaultvalues.User;
-import com.baeldung.jpa.defaultvalues.UserRepository;
-
 import org.junit.Test;
 import org.junit.Ignore;
 import org.junit.AfterClass;

File: persistence-modules/java-jpa-2/src/test/java/com/baeldung/jpa/multipletables/MultipleTablesIntegrationTest.java
Patch:
@@ -2,9 +2,9 @@
 
 import static org.assertj.core.api.Assertions.*;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: persistence-modules/java-jpa-2/src/test/java/com/baeldung/jpa/text/JPATextUnitTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import javax.persistence.PersistenceException;
+import jakarta.persistence.PersistenceException;
 
 import org.junit.BeforeClass;
 import org.junit.Test;

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/convertdates/LocalDateConverter.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.jpa.convertdates;
 
-import javax.persistence.AttributeConverter;
-import javax.persistence.Converter;
+import jakarta.persistence.AttributeConverter;
+import jakarta.persistence.Converter;
 import java.sql.Date;
 import java.time.LocalDate;
 import java.util.Optional;

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/datetime/DateTimeEntityRepository.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.jpa.datetime;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 import java.sql.Date;
 import java.sql.Time;
 import java.sql.Timestamp;

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/datetime/JPA22DateTimeEntity.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jpa.datetime;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 import java.sql.Date;
 import java.sql.Time;
 import java.sql.Timestamp;

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/entitygraph/model/Comment.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jpa.entitygraph.model;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 public class Comment {

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/entitygraph/model/Post.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jpa.entitygraph.model;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/enums/Article.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jpa.enums;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 public class Article {

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/enums/CategoryConverter.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.jpa.enums;
 
-import javax.persistence.AttributeConverter;
-import javax.persistence.Converter;
+import jakarta.persistence.AttributeConverter;
+import jakarta.persistence.Converter;
 import java.util.stream.Stream;
 
 @Converter(autoApply = true)

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/primarykeys/Account.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.jpa.primarykeys;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
-import javax.persistence.IdClass;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.IdClass;
 
 @Entity
 @IdClass(AccountId.class)

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/primarykeys/Book.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.jpa.primarykeys;
 
-import javax.persistence.EmbeddedId;
-import javax.persistence.Entity;
+import jakarta.persistence.EmbeddedId;
+import jakarta.persistence.Entity;
 
 @Entity
 public class Book {

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/primarykeys/BookId.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.io.Serializable;
 
-import javax.persistence.Embeddable;
+import jakarta.persistence.Embeddable;
 
 @Embeddable
 public class BookId implements Serializable {

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/sqlresultsetmapping/Employee.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jpa.sqlresultsetmapping;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 
 @SqlResultSetMapping(

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/sqlresultsetmapping/ScheduledDay.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jpa.sqlresultsetmapping;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @SqlResultSetMappings(value = {
     @SqlResultSetMapping(name = "ScheduleResult",

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/stringcast/Message.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jpa.stringcast;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @SqlResultSetMapping(name = "textQueryMapping", classes = {
   @ConstructorResult(targetClass = Message.class, columns = {

File: persistence-modules/java-jpa/src/main/java/com/baeldung/jpa/stringcast/QueryExecutor.java
Patch:
@@ -4,8 +4,8 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import javax.persistence.EntityManager;
-import javax.persistence.Query;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.Query;
 
 public class QueryExecutor {
 

File: persistence-modules/java-jpa/src/test/java/com/baeldung/jpa/primarykeys/CompositeKeysIntegrationTest.java
Patch:
@@ -3,9 +3,9 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 
 import com.baeldung.jpa.primarykeys.Account;
 import com.baeldung.jpa.primarykeys.AccountId;

File: persistence-modules/java-jpa/src/test/java/com/baeldung/jpa/stringcast/SpringCastUnitTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;

File: persistence-modules/querydsl/src/main/java/com/baeldung/querydsl/intro/entities/User.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.util.HashSet;
 import java.util.Set;
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 public class User {

File: persistence-modules/querydsl/src/test/java/com/baeldung/dao/PersonDaoIntegrationTest.java
Patch:
@@ -6,17 +6,17 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.test.annotation.Rollback;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
-import org.springframework.test.context.transaction.TransactionConfiguration;
 import org.springframework.transaction.annotation.Transactional;
 
 import junit.framework.Assert;
 
 @ContextConfiguration("/test-context.xml")
 @RunWith(SpringJUnit4ClassRunner.class)
 @Transactional
-@TransactionConfiguration(defaultRollback = true)
+@Rollback
 public class PersonDaoIntegrationTest {
 
     @Autowired

File: persistence-modules/querydsl/src/test/java/com/baeldung/querydsl/intro/QueryDSLIntegrationTest.java
Patch:
@@ -14,9 +14,9 @@
 import com.querydsl.jpa.impl.JPAQueryFactory;
 import org.junit.*;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 import java.util.List;
 
 import static org.junit.Assert.*;

File: persistence-modules/r2dbc/src/main/java/com/baeldung/examples/r2dbc/DatasourceConfig.java
Patch:
@@ -29,9 +29,8 @@ public ConnectionFactory connectionFactory(R2DBCConfigurationProperties properti
         if ( !StringUtil.isNullOrEmpty(properties.getPassword())) {
             ob = ob.option(PASSWORD, properties.getPassword());
         }
-        
-        ConnectionFactory cf = ConnectionFactories.get(ob.build());
-        return cf;
+
+        return ConnectionFactories.get(ob.build());
     }
     
 

File: persistence-modules/redis/src/main/java/com/baeldung/redis_scan/client/RedisClient.java
Patch:
@@ -102,18 +102,18 @@ public Long zadd(final String key, final Map<String, Double> scoreMembers) {
         return 0L;
     }
 
-    public Set<String> zrange(final String key, final long start, final long stop) {
+    public List<String> zrange(final String key, final long start, final long stop) {
         try (Jedis jedis = jedisPool.getResource()) {
             return jedis.zrange(key, start, stop);
         } catch (Exception ex) {
             log.error("Exception caught in zrange", ex);
         }
-        return new HashSet<String>();
+        return new ArrayList<>();
     }
 
     public String mset(final HashMap<String, String> keysValues) {
         try (Jedis jedis = jedisPool.getResource()) {
-            ArrayList<String> keysValuesArrayList = new ArrayList<String>();
+            ArrayList<String> keysValuesArrayList = new ArrayList<>();
             keysValues.forEach((key, value) -> {
                 keysValuesArrayList.add(key);
                 keysValuesArrayList.add(value);

File: persistence-modules/redis/src/main/java/com/baeldung/redis_scan/iterator/RedisIterator.java
Patch:
@@ -5,8 +5,8 @@
 import org.slf4j.LoggerFactory;
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.JedisPool;
-import redis.clients.jedis.ScanParams;
-import redis.clients.jedis.ScanResult;
+import redis.clients.jedis.params.ScanParams;
+import redis.clients.jedis.resps.ScanResult;
 
 import java.util.Iterator;
 import java.util.LinkedList;

File: persistence-modules/redis/src/main/java/com/baeldung/redis_scan/strategy/ScanStrategy.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.redis_scan.strategy;
 
 import redis.clients.jedis.Jedis;
-import redis.clients.jedis.ScanParams;
-import redis.clients.jedis.ScanResult;
+import redis.clients.jedis.params.ScanParams;
+import redis.clients.jedis.resps.ScanResult;
 
 public interface ScanStrategy<T> {
     ScanResult<T> scan(Jedis jedis, String cursor, ScanParams scanParams);

File: persistence-modules/redis/src/main/java/com/baeldung/redis_scan/strategy/impl/Hscan.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.baeldung.redis_scan.strategy.ScanStrategy;
 import redis.clients.jedis.Jedis;
-import redis.clients.jedis.ScanParams;
-import redis.clients.jedis.ScanResult;
+import redis.clients.jedis.params.ScanParams;
+import redis.clients.jedis.resps.ScanResult;
 
 import java.util.Map;
 import java.util.Map.Entry;

File: persistence-modules/redis/src/main/java/com/baeldung/redis_scan/strategy/impl/Scan.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.baeldung.redis_scan.strategy.ScanStrategy;
 import redis.clients.jedis.Jedis;
-import redis.clients.jedis.ScanParams;
-import redis.clients.jedis.ScanResult;
+import redis.clients.jedis.params.ScanParams;
+import redis.clients.jedis.resps.ScanResult;
 
 public class Scan implements ScanStrategy<String> {
 

File: persistence-modules/redis/src/main/java/com/baeldung/redis_scan/strategy/impl/Sscan.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.baeldung.redis_scan.strategy.ScanStrategy;
 import redis.clients.jedis.Jedis;
-import redis.clients.jedis.ScanParams;
-import redis.clients.jedis.ScanResult;
+import redis.clients.jedis.params.ScanParams;
+import redis.clients.jedis.resps.ScanResult;
 
 public class Sscan implements ScanStrategy<String> {
 

File: persistence-modules/redis/src/main/java/com/baeldung/redis_scan/strategy/impl/Zscan.java
Patch:
@@ -2,9 +2,9 @@
 
 import com.baeldung.redis_scan.strategy.ScanStrategy;
 import redis.clients.jedis.Jedis;
-import redis.clients.jedis.ScanParams;
-import redis.clients.jedis.ScanResult;
-import redis.clients.jedis.Tuple;
+import redis.clients.jedis.params.ScanParams;
+import redis.clients.jedis.resps.ScanResult;
+import redis.clients.jedis.resps.Tuple;
 
 public class Zscan implements ScanStrategy<Tuple> {
 

File: persistence-modules/spring-data-couchbase-2/src/main/java/com/baeldung/spring/data/couchbase/model/Campus.java
Patch:
@@ -1,13 +1,12 @@
 package com.baeldung.spring.data.couchbase.model;
 
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotNull;
 
 import org.springframework.data.annotation.Id;
 import org.springframework.data.couchbase.core.mapping.Document;
+import org.springframework.data.couchbase.core.mapping.Field;
 import org.springframework.data.geo.Point;
 
-import com.couchbase.client.java.repository.annotation.Field;
-
 @Document
 public class Campus {
 

File: persistence-modules/spring-data-couchbase-2/src/main/java/com/baeldung/spring/data/couchbase/model/Person.java
Patch:
@@ -1,12 +1,11 @@
 package com.baeldung.spring.data.couchbase.model;
 
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotNull;
 
 import org.joda.time.DateTime;
 import org.springframework.data.annotation.Id;
 import org.springframework.data.couchbase.core.mapping.Document;
-
-import com.couchbase.client.java.repository.annotation.Field;
+import org.springframework.data.couchbase.core.mapping.Field;
 
 @Document
 public class Person {

File: persistence-modules/spring-data-couchbase-2/src/main/java/com/baeldung/spring/data/couchbase/service/PersonService.java
Patch:
@@ -1,12 +1,13 @@
 package com.baeldung.spring.data.couchbase.service;
 
 import java.util.List;
+import java.util.Optional;
 
 import com.baeldung.spring.data.couchbase.model.Person;
 
 public interface PersonService {
 
-    Person findOne(String id);
+    Optional<Person> findOne(String id);
 
     List<Person> findAll();
 

File: persistence-modules/spring-data-couchbase-2/src/main/java/com/baeldung/spring/data/couchbase/service/StudentService.java
Patch:
@@ -1,12 +1,13 @@
 package com.baeldung.spring.data.couchbase.service;
 
 import java.util.List;
+import java.util.Optional;
 
 import com.baeldung.spring.data.couchbase.model.Student;
 
 public interface StudentService {
 
-    Student findOne(String id);
+    Optional<Student> findOne(String id);
 
     List<Student> findAll();
 

File: persistence-modules/spring-data-couchbase-2/src/main/java/com/baeldung/spring/data/couchbase2b/service/CampusService.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.spring.data.couchbase2b.service;
 
+import java.util.Optional;
 import java.util.Set;
 
 import com.baeldung.spring.data.couchbase.model.Campus;
@@ -8,7 +9,7 @@
 
 public interface CampusService {
 
-    Campus find(String id);
+    Optional<Campus> find(String id);
 
     Set<Campus> findByName(String name);
 

File: persistence-modules/spring-data-couchbase-2/src/main/java/com/baeldung/spring/data/couchbase2b/service/CampusServiceImpl.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.Optional;
 import java.util.Set;
 
 import com.baeldung.spring.data.couchbase2b.repos.CampusRepository;
@@ -22,8 +23,8 @@ public void setCampusRepository(CampusRepository repo) {
     }
 
     @Override
-    public Campus find(String id) {
-        return repo.findOne(id);
+    public Optional<Campus> find(String id) {
+        return repo.findById(id);
     }
 
     @Override

File: persistence-modules/spring-data-couchbase-2/src/main/java/com/baeldung/spring/data/couchbase2b/service/PersonService.java
Patch:
@@ -1,12 +1,13 @@
 package com.baeldung.spring.data.couchbase2b.service;
 
 import java.util.List;
+import java.util.Optional;
 
 import com.baeldung.spring.data.couchbase.model.Person;
 
 public interface PersonService {
 
-    Person findOne(String id);
+    Optional<Person> findOne(String id);
 
     List<Person> findAll();
 

File: persistence-modules/spring-data-couchbase-2/src/main/java/com/baeldung/spring/data/couchbase2b/service/StudentService.java
Patch:
@@ -1,12 +1,13 @@
 package com.baeldung.spring.data.couchbase2b.service;
 
 import java.util.List;
+import java.util.Optional;
 
 import com.baeldung.spring.data.couchbase.model.Student;
 
 public interface StudentService {
 
-    Student findOne(String id);
+    Optional<Student> findOne(String id);
 
     List<Student> findAll();
 

File: persistence-modules/spring-data-couchbase-2/src/test/java/com/baeldung/spring/data/couchbase/ReadYourOwnWritesCouchbaseConfig.java
Patch:
@@ -1,11 +1,11 @@
 package com.baeldung.spring.data.couchbase;
 
-import org.springframework.data.couchbase.core.query.Consistency;
+import com.couchbase.client.java.query.QueryScanConsistency;
 
 public class ReadYourOwnWritesCouchbaseConfig extends MyCouchbaseConfig {
 
     @Override
-    public Consistency getDefaultConsistency() {
-        return Consistency.READ_YOUR_OWN_WRITES;
+    public QueryScanConsistency getDefaultConsistency() {
+        return QueryScanConsistency.REQUEST_PLUS;
     }
 }

File: persistence-modules/spring-data-eclipselink/src/main/java/com/baeldung/eclipselink/springdata/JpaConfiguration.java
Patch:
@@ -21,8 +21,8 @@
 @Configuration
 public class JpaConfiguration extends JpaBaseConfiguration {
 
-    protected JpaConfiguration(DataSource dataSource, JpaProperties properties, ObjectProvider<JtaTransactionManager> jtaTransactionManager, ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {
-        super(dataSource, properties, jtaTransactionManager, transactionManagerCustomizers);
+    protected JpaConfiguration(DataSource dataSource, JpaProperties properties, ObjectProvider<JtaTransactionManager> jtaTransactionManager) {
+        super(dataSource, properties, jtaTransactionManager);
     }
 
     @Override

File: persistence-modules/spring-data-eclipselink/src/main/java/com/baeldung/eclipselink/springdata/pessimisticlocking/Address.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.eclipselink.springdata.pessimisticlocking;
 
-import javax.persistence.Embeddable;
+import jakarta.persistence.Embeddable;
 
 @Embeddable
 public class Address {

File: persistence-modules/spring-data-eclipselink/src/main/java/com/baeldung/eclipselink/springdata/pessimisticlocking/Employee.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.eclipselink.springdata.pessimisticlocking;
 
-import javax.persistence.Entity;
+import jakarta.persistence.Entity;
 import java.math.BigDecimal;
 
 @Entity

File: persistence-modules/spring-data-eclipselink/src/main/java/com/baeldung/eclipselink/springdata/pessimisticlocking/Student.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.eclipselink.springdata.pessimisticlocking;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
-import javax.persistence.OneToMany;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.OneToMany;
 import java.util.List;
 
 @Entity

File: persistence-modules/spring-data-eclipselink/src/test/java/com/baeldung/eclipselink/springdata/pessimisticlocking/PessimisticLockScopesIntegrationTest.java
Patch:
@@ -1,14 +1,12 @@
 package com.baeldung.eclipselink.springdata.pessimisticlocking;
 
-import org.junit.Assert;
-import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 import java.math.BigDecimal;
 import java.util.Arrays;
 import java.util.HashMap;

File: spring-cloud-modules/spring-cloud-openfeign/src/main/java/com/baeldung/cloud/openfeign/defaulterrorhandling/client/ProductClient.java
Patch:
@@ -8,7 +8,7 @@
 import com.baeldung.cloud.openfeign.defaulterrorhandling.config.FeignConfig;
 import com.baeldung.cloud.openfeign.defaulterrorhandling.model.Product;
 
-@FeignClient(name = "product-client", url = "http://localhost:8084/product/", configuration = FeignConfig.class)
+@FeignClient(name = "product-client", url = "http://localhost:8088/product/", configuration = FeignConfig.class)
 public interface ProductClient {
 
     @RequestMapping(value = "{id}", method = RequestMethod.GET)

File: spring-cloud-modules/spring-cloud-openfeign/src/test/java/com/baeldung/cloud/openfeign/defaulterrorhandling/client/ProductClientUnitTest.java
Patch:
@@ -34,8 +34,8 @@ public class ProductClientUnitTest {
 
     @Before
     public void startWireMockServer() {
-        wireMockServer = new WireMockServer(8084);
-        configureFor("localhost", 8084);
+        wireMockServer = new WireMockServer(8088);
+        configureFor("localhost", 8088);
         wireMockServer.start();
 
     }

File: web-modules/vraptor/src/main/java/com/baeldung/daos/UserDao.java
Patch:
@@ -4,13 +4,10 @@
 import org.hibernate.Criteria;
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
-import org.hibernate.criterion.Criterion;
 import org.hibernate.criterion.Restrictions;
-import org.omg.PortableInterceptor.LOCATION_FORWARD;
 
 import javax.enterprise.context.RequestScoped;
 import javax.inject.Inject;
-import java.util.logging.Logger;
 
 @RequestScoped
 public class UserDao {

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/argumentcaptor/AuthenticationStatus.java
Patch:
@@ -1,7 +1,5 @@
 package com.baeldung.mockito.argumentcaptor;
 
 public enum AuthenticationStatus {
-    AUTHENTICATED,
-    NOT_AUTHENTICATED,
-    ERROR
+    AUTHENTICATED, NOT_AUTHENTICATED, ERROR
 }

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/argumentcaptor/Format.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.mockito.argumentcaptor;
 
 public enum Format {
-    TEXT_ONLY,
-    HTML
+    TEXT_ONLY, HTML
 }

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/argumentcaptor/ServiceStatus.java
Patch:
@@ -1,7 +1,5 @@
 package com.baeldung.mockito.argumentcaptor;
 
 public enum ServiceStatus {
-    UP,
-    DOWN,
-    AUTHENTICATED
+    UP, DOWN, AUTHENTICATED
 }

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/argumentmatchers/Flower.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.app.api;
+package com.baeldung.mockito.argumentmatchers;
 
 public class Flower {
 

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/argumentmatchers/Message.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.domain.model;
+package com.baeldung.mockito.argumentmatchers;
 
 import java.util.Date;
 import java.util.UUID;

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/argumentmatchers/MessageDTO.java
Patch:
@@ -1,6 +1,7 @@
-package com.baeldung.app.api;
+package com.baeldung.mockito.argumentmatchers;
 
 public class MessageDTO {
+
     private String from;
     private String to;
     private String text;

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/junit5/repository/SettingRepository.java
Patch:
@@ -1,7 +1,7 @@
-package com.baeldung.junit5.mockito.repository;
+package com.baeldung.mockito.junit5.repository;
 
 public interface SettingRepository {
-    
+
     int getUserMinAge();
 
     int getUserNameMinLength();

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/junit5/service/Errors.java
Patch:
@@ -1,10 +1,10 @@
-package com.baeldung.junit5.mockito.service;
+package com.baeldung.mockito.junit5.service;
 
 public class Errors {
 
     public static final String USER_NAME_REQUIRED = "user.name.required";
     public static final String USER_NAME_SHORT = "user.name.short";
     public static final String USER_AGE_YOUNG = "user.age.young";
     public static final String USER_NAME_DUPLICATE = "user.name.duplicate";
-    
+
 }

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/mockedstatic/StaticUtils.java
Patch:
@@ -18,5 +18,4 @@ public static List<Integer> range(int start, int end) {
     public static String name() {
         return "Baeldung";
     }
-
 }

File: testing-modules/mockito-simple/src/test/java/com/baeldung/mockito/annotations/MockitoAnnotationsInitWithMockitoJUnitRuleUnitTest.java
Patch:
@@ -1,18 +1,16 @@
-package com.baeldung.mockito;
+package com.baeldung.mockito.annotations;
 
 import org.junit.Rule;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
 
-
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.when;
 
-
 public class MockitoAnnotationsInitWithMockitoJUnitRuleUnitTest {
 
     @Rule

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/argumentcaptor/Format.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.mockito.argumentcaptor;
 
 public enum Format {
-    TEXT_ONLY,
-    HTML
+    TEXT_ONLY, HTML
 }

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/argumentmatchers/service/MessageService.java
Patch:
@@ -7,7 +7,7 @@
 @Service
 public class MessageService {
 
-    public Message deliverMessage (Message message) {
+    public Message deliverMessage(Message message) {
 
         return message;
     }

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/junit5/repository/MailClient.java
Patch:
@@ -5,5 +5,5 @@
 public interface MailClient {
 
     void sendUserRegistrationMail(User user);
-    
+
 }

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/junit5/service/UserService.java
Patch:
@@ -3,7 +3,7 @@
 import com.baeldung.mockito.junit5.User;
 
 public interface UserService {
-    
+
     User register(User user);
 
 }

File: testing-modules/selenium-junit-testng/src/test/java/com/baeldung/selenium/tabs/SeleniumOpenNewTabLiveTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import java.time.Duration;
 
-public class SeleniumOpenNewTabIntegrationTest {
+public class SeleniumOpenNewTabLiveTest {
 
     private WebDriver driver;
     private static final int TIMEOUT = 10;

File: persistence-modules/hibernate-annotations/src/main/java/com/baeldung/hibernate/creationupdatetimestamp/model/Book.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.time.Instant;
 
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.Id;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Id;
 
 import org.hibernate.annotations.CreationTimestamp;
 import org.hibernate.annotations.UpdateTimestamp;

File: persistence-modules/hibernate-annotations/src/main/java/com/baeldung/hibernate/immutable/entities/Event.java
Patch:
@@ -4,7 +4,7 @@
 import org.hibernate.annotations.CascadeType;
 import org.hibernate.annotations.Immutable;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 import java.util.Set;
 
 @Entity

File: persistence-modules/hibernate-annotations/src/main/java/com/baeldung/hibernate/immutable/entities/EventGeneratedId.java
Patch:
@@ -3,7 +3,7 @@
 import org.hibernate.annotations.GenericGenerator;
 import org.hibernate.annotations.Immutable;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 @Immutable

File: persistence-modules/hibernate-annotations/src/main/java/com/baeldung/hibernate/oneToMany/config/HibernateAnnotationUtil.java
Patch:
@@ -43,8 +43,8 @@ private static SessionFactory buildSessionFactory() {
         return metadata.buildSessionFactory();
     }
 
-    private static Map<String, String> dbSettings() {
-        Map<String, String> dbSettings = new HashMap<>();
+    private static Map<String, Object> dbSettings() {
+        Map<String, Object> dbSettings = new HashMap<>();
         dbSettings.put(Environment.URL, "jdbc:h2:mem:spring_hibernate_one_to_many");
         dbSettings.put(Environment.USER, "sa");
         dbSettings.put(Environment.PASS, "");

File: persistence-modules/hibernate-annotations/src/test/java/com/baeldung/hibernate/immutable/HibernateImmutableIntegrationTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.*;
 import org.junit.rules.ExpectedException;
 
-import javax.persistence.PersistenceException;
+import jakarta.persistence.PersistenceException;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.IsEqual.equalTo;

File: persistence-modules/hibernate-annotations/src/test/java/com/baeldung/hibernate/joincolumn/JoinColumnIntegrationTest.java
Patch:
@@ -78,8 +78,8 @@ private SessionFactory sessionFactory() {
         return metadata.buildSessionFactory();
     }
 
-    private static Map<String, String> getProperties() {
-        Map<String, String> dbSettings = new HashMap<>();
+    private static Map<String, Object> getProperties() {
+        Map<String, Object> dbSettings = new HashMap<>();
         dbSettings.put(Environment.URL, "jdbc:h2:mem:mydbJoinColumn;DB_CLOSE_DELAY=-1");
         dbSettings.put(Environment.USER, "sa");
         dbSettings.put(Environment.PASS, "");

File: persistence-modules/hibernate-enterprise/src/main/java/com/baeldung/hibernate/exception/EntityWithNoId.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.hibernate.exception;
 
-import javax.persistence.Entity;
+import jakarta.persistence.Entity;
 
 @Entity
 public class EntityWithNoId {

File: persistence-modules/hibernate-enterprise/src/main/java/com/baeldung/hibernate/exception/ProductEntity.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.hibernate.exception;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
-import javax.persistence.Table;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
 
 @Entity
 @Table(name = "PRODUCT")

File: persistence-modules/hibernate-enterprise/src/main/java/com/baeldung/persistence/model/Person.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.persistence.model;
 
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.Id;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Id;
 
 @Entity
 public class Person {

File: persistence-modules/hibernate-enterprise/src/test/java/com/baeldung/hibernate/multitenancy/Car.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.io.Serializable;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
-import javax.persistence.Table;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
 
 @Entity(name = "Car")
 @Table(name = "Car")

File: persistence-modules/hibernate-enterprise/src/test/java/com/baeldung/hibernate/multitenancy/MultitenancyIntegrationTest.java
Patch:
@@ -79,9 +79,9 @@ protected void thenCarNotFound(String brand) {
     private void createCarTable() {
         Session session = sessionFactory.openSession();
         Transaction tx = session.beginTransaction();
-        session.createSQLQuery("drop table Car if exists")
+        session.createNativeQuery("drop table Car if exists")
             .executeUpdate();
-        session.createSQLQuery("create table Car (brand varchar(255) primary key)")
+        session.createNativeQuery("create table Car (brand varchar(255) primary key)")
             .executeUpdate();
         tx.commit();
     }

File: persistence-modules/hibernate-enterprise/src/test/java/com/baeldung/hibernate/multitenancy/database/DatabaseApproachMultitenancyIntegrationTest.java
Patch:
@@ -1,7 +1,5 @@
 package com.baeldung.hibernate.multitenancy.database;
 
-import java.io.IOException;
-
 import org.junit.Test;
 
 import com.baeldung.hibernate.multitenancy.MultitenancyIntegrationTest;
@@ -14,7 +12,7 @@ public String getPropertyFile() {
     }
 
     @Test
-    public void givenDatabaseApproach_whenAddingEntries_thenOnlyAddedToConcreteDatabase() throws IOException {
+    public void givenDatabaseApproach_whenAddingEntries_thenOnlyAddedToConcreteDatabase() {
         whenCurrentTenantIs(TenantIdNames.MYDB1);
         whenAddCar("myCar");
         thenCarFound("myCar");

File: persistence-modules/hibernate-enterprise/src/test/java/com/baeldung/persistence/save/SaveMethodsIntegrationTest.java
Patch:
@@ -7,7 +7,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 
-import javax.persistence.PersistenceException;
+import jakarta.persistence.PersistenceException;
 
 import org.hibernate.HibernateException;
 import org.hibernate.Session;

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/HibernateUtil.java
Patch:
@@ -21,6 +21,7 @@
 import com.baeldung.hibernate.pojo.inheritance.Bag;
 import com.baeldung.hibernate.pojo.inheritance.Book;
 import com.baeldung.hibernate.pojo.inheritance.Car;
+import com.baeldung.hibernate.pojo.inheritance.Laptop;
 import com.baeldung.hibernate.pojo.inheritance.MyEmployee;
 import com.baeldung.hibernate.pojo.inheritance.MyProduct;
 import com.baeldung.hibernate.pojo.inheritance.Pen;
@@ -79,14 +80,14 @@ private static SessionFactory makeSessionFactory(ServiceRegistry serviceRegistry
         metadataSources.addAnnotatedClass(com.baeldung.hibernate.entities.Department.class);
         metadataSources.addAnnotatedClass(Animal.class);
         metadataSources.addAnnotatedClass(Bag.class);
+        metadataSources.addAnnotatedClass(Laptop.class);
         metadataSources.addAnnotatedClass(Book.class);
         metadataSources.addAnnotatedClass(Car.class);
         metadataSources.addAnnotatedClass(MyEmployee.class);
         metadataSources.addAnnotatedClass(MyProduct.class);
         metadataSources.addAnnotatedClass(Pen.class);
         metadataSources.addAnnotatedClass(Pet.class);
         metadataSources.addAnnotatedClass(Vehicle.class);
-        
 
         Metadata metadata = metadataSources.getMetadataBuilder()
             .build();

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/entities/Department.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.List;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 public class Department {

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/fetchMode/Order.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.hibernate.fetchMode;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 public class Order {

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/pojo/Employee.java
Patch:
@@ -2,15 +2,15 @@
 
 import org.hibernate.annotations.*;
 
-import javax.persistence.Entity;
-import javax.persistence.*;
+import jakarta.persistence.Entity;
+import jakarta.persistence.*;
 import java.io.Serializable;
 import java.util.HashSet;
 import java.util.Set;
 
 @Entity
 @Where(clause = "deleted = false")
-@FilterDef(name = "incomeLevelFilter", parameters = @ParamDef(name = "incomeLimit", type = "int"))
+@FilterDef(name = "incomeLevelFilter", parameters = @ParamDef(name = "incomeLimit", type = Integer.class))
 @Filter(name = "incomeLevelFilter", condition = "grossIncome > :incomeLimit")
 public class Employee implements Serializable {
 

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/pojo/inheritance/Bag.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.hibernate.pojo.inheritance;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 import org.hibernate.annotations.Polymorphism;
 import org.hibernate.annotations.PolymorphismType;

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/pojo/inheritance/Book.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.hibernate.pojo.inheritance;
 
-import javax.persistence.DiscriminatorValue;
-import javax.persistence.Entity;
+import jakarta.persistence.DiscriminatorValue;
+import jakarta.persistence.Entity;
 
 @Entity
 @DiscriminatorValue("1")

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/pojo/inheritance/Car.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.hibernate.pojo.inheritance;
 
-import javax.persistence.Entity;
+import jakarta.persistence.Entity;
 
 @Entity
 public class Car extends Vehicle {

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/pojo/inheritance/MyEmployee.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.hibernate.pojo.inheritance;
 
-import javax.persistence.Entity;
+import jakarta.persistence.Entity;
 
 @Entity
 public class MyEmployee extends Person {

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/pojo/inheritance/Pen.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.hibernate.pojo.inheritance;
 
-import javax.persistence.DiscriminatorValue;
-import javax.persistence.Entity;
+import jakarta.persistence.DiscriminatorValue;
+import jakarta.persistence.Entity;
 
 @Entity
 @DiscriminatorValue("2")

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/pojo/inheritance/Person.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.hibernate.pojo.inheritance;
 
-import javax.persistence.Id;
-import javax.persistence.MappedSuperclass;
+import jakarta.persistence.Id;
+import jakarta.persistence.MappedSuperclass;
 
 @MappedSuperclass
 public class Person {

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/pojo/inheritance/Pet.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.hibernate.pojo.inheritance;
 
-import javax.persistence.Entity;
-import javax.persistence.PrimaryKeyJoinColumn;
+import jakarta.persistence.Entity;
+import jakarta.persistence.PrimaryKeyJoinColumn;
 
 @Entity
 @PrimaryKeyJoinColumn(name = "petId")

File: persistence-modules/hibernate-mapping/src/test/java/com/baeldung/hibernate/DynamicMappingIntegrationTest.java
Patch:
@@ -119,8 +119,8 @@ public void givenFilterByIncome_whenIncomeLimitSet_thenFilterIsApplied() throws
 
         assertThat(employees).hasSize(2);
 
-        Employee employee = session.get(Employee.class, 1);
-        assertThat(employee.getGrossIncome()).isEqualTo(10_000);
+        Employee employee = session.get(Employee.class, 2);
+        assertThat(employee.getGrossIncome()).isEqualTo(12_000);
 
         session.disableFilter("incomeLevelFilter");
         employees = session.createQuery("from Employee").getResultList();

File: persistence-modules/hibernate-mapping/src/test/java/com/baeldung/hibernate/basicannotation/BasicAnnotationIntegrationTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.io.IOException;
 
-import javax.persistence.PersistenceException;
+import jakarta.persistence.PersistenceException;
 
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;

File: persistence-modules/hibernate-queries/src/main/java/com/baeldung/hibernate/criteria/model/Employee.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.hibernate.criteria.model;
 
 import java.io.Serializable;
-import javax.persistence.Entity;
+import jakarta.persistence.Entity;
 
 @org.hibernate.annotations.NamedQueries({
     @org.hibernate.annotations.NamedQuery(name = "Employee_findByEmployeeId", query = "from Employee where id = :employeeId"),

File: persistence-modules/hibernate-queries/src/main/java/com/baeldung/hibernate/criteria/view/EmployeeCriteriaQueries.java
Patch:
@@ -3,9 +3,9 @@
 import com.baeldung.hibernate.criteria.model.Employee;
 import com.baeldung.hibernate.criteria.util.HibernateUtil;
 import java.util.List;
-import javax.persistence.criteria.CriteriaBuilder;
-import javax.persistence.criteria.CriteriaQuery;
-import javax.persistence.criteria.Root;
+import jakarta.persistence.criteria.CriteriaBuilder;
+import jakarta.persistence.criteria.CriteriaQuery;
+import jakarta.persistence.criteria.Root;
 import org.hibernate.Session;
 import org.hibernate.query.Query;
 

File: persistence-modules/hibernate-queries/src/main/java/com/baeldung/hibernate/entities/Department.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.List;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 @Entity
 public class Department {

File: spring-cloud-modules/spring-cloud-openfeign/src/main/java/com/baeldung/cloud/openfeign/customizederrorhandling/client/ProductClient.java
Patch:
@@ -8,7 +8,7 @@
 import com.baeldung.cloud.openfeign.customizederrorhandling.config.FeignConfig;
 import com.baeldung.cloud.openfeign.defaulterrorhandling.model.Product;
 
-@FeignClient(name = "product-client-2", url = "http://localhost:8081/product/", configuration = FeignConfig.class)
+@FeignClient(name = "product-client-2", url = "http://localhost:8088/product/", configuration = FeignConfig.class)
 public interface ProductClient {
 
     @RequestMapping(value = "{id}", method = RequestMethod.GET)

File: spring-cloud-modules/spring-cloud-openfeign/src/test/java/com/baeldung/cloud/openfeign/customizederrorhandling/client/ProductClientUnitTest.java
Patch:
@@ -31,8 +31,8 @@ public class ProductClientUnitTest {
 
     @Before
     public void startWireMockServer() {
-        wireMockServer = new WireMockServer(8081);
-        configureFor("localhost", 8081);
+        wireMockServer = new WireMockServer(8088);
+        configureFor("localhost", 8088);
         wireMockServer.start();
     }
 

File: spring-cloud-modules/spring-cloud-openfeign/src/test/java/com/baeldung/cloud/openfeign/customizederrorhandling/controller/ProductControllerUnitTest.java
Patch:
@@ -46,8 +46,8 @@ public class ProductControllerUnitTest {
 
     @Before
     public void startWireMockServer() {
-        wireMockServer = new WireMockServer(8081);
-        configureFor("localhost", 8081);
+        wireMockServer = new WireMockServer(8088);
+        configureFor("localhost", 8088);
         wireMockServer.start();
     }
 

File: spring-boot-modules/spring-boot-properties-3/src/main/java/com/baeldung/error/configuration/MainConfiguration.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
-@ConfigurationProperties(prefix = "profileProperties")
+@ConfigurationProperties(prefix = "profile.profileProperties")
 public class MainConfiguration {
 	private String name;
 	

File: web-modules/apache-tapestry/src/main/java/com/baeldung/tapestry/services/DevelopmentModule.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.tapestry.services;
 
 import org.apache.tapestry5.SymbolConstants;
-import org.apache.tapestry5.ioc.MappedConfiguration;
+import org.apache.tapestry5.commons.MappedConfiguration;
 
 /**
  * This module is automatically included as part of the Tapestry IoC Registry if <em>tapestry.execution-mode</em>

File: web-modules/apache-tapestry/src/main/java/com/baeldung/tapestry/services/QaModule.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.tapestry.services;
 
 import org.apache.tapestry5.SymbolConstants;
-import org.apache.tapestry5.ioc.MappedConfiguration;
+import org.apache.tapestry5.commons.MappedConfiguration;
 import org.apache.tapestry5.ioc.ServiceBinder;
 
 /**

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/argumentmatchers/Flower.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.app.api;
+package com.baeldung.mockito.argumentmatchers;
 
 public class Flower {
 

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/argumentmatchers/service/FlowerService.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.domain.service;
+package com.baeldung.mockito.argumentmatchers.service;
 
 import org.springframework.stereotype.Service;
 

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/argumentmatchers/service/MessageService.java
Patch:
@@ -1,8 +1,9 @@
-package com.baeldung.domain.service;
+package com.baeldung.mockito.argumentmatchers.service;
 
-import com.baeldung.domain.model.Message;
 import org.springframework.stereotype.Service;
 
+import com.baeldung.mockito.argumentmatchers.Message;
+
 @Service
 public class MessageService {
 

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/junit5/User.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.junit5.mockito;
+package com.baeldung.mockito.junit5;
 
 public class User {
     

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/junit5/repository/SettingRepository.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.junit5.mockito.repository;
+package com.baeldung.mockito.junit5.repository;
 
 public interface SettingRepository {
     

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/junit5/repository/UserRepository.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.junit5.mockito.repository;
+package com.baeldung.mockito.junit5.repository;
 
-import com.baeldung.junit5.mockito.User;
+import com.baeldung.mockito.junit5.User;
 
 public interface UserRepository {
 

File: testing-modules/mockito-simple/src/main/java/com/baeldung/mockito/junit5/service/Errors.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.junit5.mockito.service;
+package com.baeldung.mockito.junit5.service;
 
 public class Errors {
 

File: testing-modules/mockito-simple/src/test/java/com/baeldung/mockito/argumentmatchers/MessageMatcher.java
Patch:
@@ -1,6 +1,5 @@
-package com.baeldung.domain.util;
+package com.baeldung.mockito.argumentmatchers;
 
-import com.baeldung.domain.model.Message;
 import org.mockito.ArgumentMatcher;
 
 public class MessageMatcher implements ArgumentMatcher<Message> {

File: core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/flatmap/map/Java8MapAndFlatMapUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.java8;
+package com.baeldung.streams.flatmap.map;
 
 import org.junit.Test;
 
@@ -12,7 +12,7 @@
 import static java.util.Arrays.asList;
 import static org.junit.Assert.assertEquals;
 
-public class Java8MapAndFlatMap {
+public class Java8MapAndFlatMapUnitTest {
 
     @Test
     public void givenStream_whenCalledMap_thenProduceList() {

File: testing-modules/junit-4/src/test/java/com/baeldung/junit/DivisibilityUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.junit4vstestng;
+package com.baeldung.junit;
 
 import static org.junit.Assert.assertEquals;
 

File: testing-modules/junit-4/src/test/java/com/baeldung/junit/RegistrationUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.junit4vstestng;
+package com.baeldung.junit;
 
 import org.junit.Test;
 import org.slf4j.Logger;

File: testing-modules/junit-4/src/test/java/com/baeldung/junit/SignInUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.junit4vstestng;
+package com.baeldung.junit;
 
 import org.junit.Test;
 import org.slf4j.Logger;

File: testing-modules/junit-4/src/test/java/com/baeldung/junit/StringCaseUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.junit4vstestng;
+package com.baeldung.junit;
 
 import static org.junit.Assert.assertEquals;
 

File: testing-modules/junit-4/src/test/java/com/baeldung/junitparams/ParametrizedUnitTest.java
Patch:
@@ -1,7 +1,6 @@
-package com.baeldung.junit4vstestng;
+package com.baeldung.junitparams;
 
 import org.junit.Assert;
-import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;

File: testing-modules/junit-4/src/test/java/com/baeldung/runfromjava/SuiteUnitTest.java
Patch:
@@ -1,7 +1,9 @@
-package com.baeldung.junit4vstestng;
+package com.baeldung.runfromjava;
 
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
+import com.baeldung.junit.RegistrationUnitTest;
+import com.baeldung.junit.SignInUnitTest;
 
 @RunWith(Suite.class)
 @Suite.SuiteClasses({ RegistrationUnitTest.class, SignInUnitTest.class })

File: persistence-modules/hibernate-exceptions/src/test/java/com/baeldung/hibernate/exception/detachedentity/DetachedEntityUnitTest.java
Patch:
@@ -42,7 +42,7 @@ public void givenDetachedPost_whenTryingToPersist_thenThrowException() {
 
         assertThatThrownBy(() -> session.persist(detachedPost))
             .isInstanceOf(PersistenceException.class)
-            .hasMessageContaining("`org.hibernate.PersistentObjectException` to JPA `PersistenceException` : detached entity passed to persist");
+            .hasMessageContaining("detached entity passed to persist: com.baeldung.hibernate.exception.detachedentity.entity.Post");
     }
 
     @Test
@@ -71,13 +71,13 @@ public void givenDetachedPost_whenPersistingNewCommentWithIt_thenThrowException(
 
         assertThatThrownBy(() -> session.persist(detachedPost))
             .isInstanceOf(PersistenceException.class)
-            .hasMessageContaining("`org.hibernate.PersistentObjectException` to JPA `PersistenceException` : detached entity passed to persist");
+            .hasMessageContaining("detached entity passed to persist: com.baeldung.hibernate.exception.detachedentity.entity.Post");
     }
 
     @Test
     public void givenDetachedPost_whenMergeAndPersistComment_thenNoExceptionIsThrown() {
         Comment comment = new Comment("nice article!");
-        Post mergedPost = (Post) session.merge(detachedPost);
+        Post mergedPost = session.merge(detachedPost);
         comment.setPost(mergedPost);
 
         session.persist(comment);

File: jackson-modules/jackson-conversions/src/test/java/com/baeldung/jackson/map/MapWithJsonKeyValueUnitTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jackson.map;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import org.junit.Test;
@@ -25,7 +25,7 @@ public void givenObject_WhenSerialize_ThenUseJsonValueForSerialization() throws
     @Test
     public void givenMapWithObjectKeys_WhenSerialize_ThenUseJsonKeyForSerialization() throws JsonProcessingException {
         // Given
-        Map<Fruit, String> selectionByFruit = new HashMap<>();
+        Map<Fruit, String> selectionByFruit = new LinkedHashMap();
         selectionByFruit.put(FRUIT1, "Hagrid");
         selectionByFruit.put(FRUIT2, "Hercules");
         // When
@@ -37,7 +37,7 @@ public void givenMapWithObjectKeys_WhenSerialize_ThenUseJsonKeyForSerialization(
     @Test
     public void givenMapWithObjectValues_WhenSerialize_ThenUseJsonValueForSerialization() throws JsonProcessingException {
         // Given
-        Map<String, Fruit> selectionByPerson = new HashMap<>();
+        Map<String, Fruit> selectionByPerson = new LinkedHashMap();
         selectionByPerson.put("Hagrid", FRUIT1);
         selectionByPerson.put("Hercules", FRUIT2);
         // When

File: core-java-modules/core-java-9-jigsaw/library-core/src/main/java/module-info.java
Patch:
@@ -0,0 +1,3 @@
+module com.baeldung.library.core {
+    exports com.baeldung.library.core;
+}
\ No newline at end of file

File: aws-modules/aws-lambda-modules/todo-reminder/ToDoFunction/src/test/java/com/baeldung/lambda/todo/AppUnitTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(MockitoJUnitRunner.class)
-public class AppTest {
+public class AppUnitTest {
 
     @Mock(answer = Answers.RETURNS_DEEP_STUBS)
     private Context mockContext;

File: aws-modules/aws-lambda-modules/todo-reminder/ToDoFunction/src/test/java/com/baeldung/lambda/todo/service/ToDoReaderServiceUnitTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;
 
-public class ToDoReaderServiceTest {
+public class ToDoReaderServiceUnitTest {
 
     @Rule
     public SystemOutRule systemOutRule = new SystemOutRule();

File: core-java-modules/core-java-nio-2/src/main/java/com/baeldung/selector/EchoServer.java
Patch:
@@ -45,8 +45,9 @@ public static void main(String[] args) throws IOException {
 
     private static void answerWithEcho(ByteBuffer buffer, SelectionKey key) throws IOException {
         SocketChannel client = (SocketChannel) key.channel();
-        client.read(buffer);
-        if (new String(buffer.array()).trim().equals(POISON_PILL)) {
+        int r = client.read(buffer);
+        if (r == -1 || new String(buffer.array()).trim()
+            .equals(POISON_PILL)) {
             client.close();
             System.out.println("Not accepting client messages anymore");
         } else {

File: core-java-modules/core-java-string-conversions-3/src/main/java/com/baeldung/stringtoint/StringToIntConverter.java
Patch:
@@ -46,8 +46,8 @@ public static Integer convertStringToIntUsingOptional(String input){
         return parsedInt.orElse(Integer.MIN_VALUE);
     }
 
-    public static int convertStringToIntUsingNumberUtils(String input){
-        return NumberUtils.toInt(input, Integer.MIN_VALUE);
+    public static int convertStringToIntUsingNumberUtils(String input, Integer defaultValue){
+        return NumberUtils.toInt(input, defaultValue);
     }
 }
 

File: core-java-modules/core-java-string-conversions-3/src/test/java/com/baeldung/stringtoint/StringToIntConverterUnitTest.java
Patch:
@@ -22,7 +22,7 @@ void whenConvertingIntToString_thenInvalidCasesReturnIntegerMinValue() {
             Assertions.assertEquals(data.expectedOutput, StringToIntConverter.convertStringToIntUsingIntegerValueOf(data.input));
             Assertions.assertEquals(data.expectedOutput, StringToIntConverter.convertStringToIntUsingOptional(data.input));
             Assertions.assertEquals(data.expectedOutput, StringToIntConverter.convertStringToIntUsingIntegerDecode(data.input));
-            Assertions.assertEquals(data.expectedOutput, StringToIntConverter.convertStringToIntUsingNumberUtils(data.input));
+            Assertions.assertEquals(data.expectedOutput, StringToIntConverter.convertStringToIntUsingNumberUtils(data.input,Integer.MIN_VALUE ));
         });
     }
 
@@ -36,7 +36,7 @@ void whenConvertingIntToString_thenValidCasesReturnUnboxedInt() {
             Assertions.assertEquals(data.expectedOutput, StringToIntConverter.convertStringToIntUsingIntegerParseInt(data.input));
             Assertions.assertEquals(data.expectedOutput, StringToIntConverter.convertStringToIntUsingIntegerValueOf(data.input));
             Assertions.assertEquals(data.expectedOutput, StringToIntConverter.convertStringToIntUsingOptional(data.input));
-            Assertions.assertEquals(data.expectedOutput, StringToIntConverter.convertStringToIntUsingNumberUtils(data.input));
+            Assertions.assertEquals(data.expectedOutput, StringToIntConverter.convertStringToIntUsingNumberUtils(data.input, Integer.MIN_VALUE));
             Assertions.assertEquals(data.expectedOutput, StringToIntConverter.convertStringToIntUsingIntegerDecode(data.input));
         });
     }

File: spring-batch-2/src/main/java/com/baeldung/batch/CoffeeItemProcessor.java
Patch:
@@ -10,7 +10,7 @@ public class CoffeeItemProcessor implements ItemProcessor<Coffee, Coffee> {
     private static final Logger LOGGER = LoggerFactory.getLogger(CoffeeItemProcessor.class);
 
     @Override
-    public Coffee process(final Coffee coffee) throws Exception {
+    public Coffee process(final Coffee coffee) {
         String brand = coffee.getBrand().toUpperCase();
         String origin = coffee.getOrigin().toUpperCase();
         String chracteristics = coffee.getCharacteristics().toUpperCase();

File: spring-batch-2/src/main/java/com/baeldung/batch/JobCompletionNotificationListener.java
Patch:
@@ -4,13 +4,13 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.batch.core.BatchStatus;
 import org.springframework.batch.core.JobExecution;
-import org.springframework.batch.core.listener.JobExecutionListenerSupport;
+import org.springframework.batch.core.JobExecutionListener;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.stereotype.Component;
 
 @Component
-public class JobCompletionNotificationListener extends JobExecutionListenerSupport {
+public class JobCompletionNotificationListener implements JobExecutionListener {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(JobCompletionNotificationListener.class);
 

File: spring-batch/src/main/java/com/baeldung/batch/App.java
Patch:
@@ -18,20 +18,19 @@ public class App {
     public static void main(final String[] args) {
         // Spring Java config
         final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
-        context.register(SpringConfig.class);
+        context.getEnvironment().addActiveProfile("spring");
         context.register(SpringBatchConfig.class);
         context.register(SpringBatchRetryConfig.class);
 
         context.refresh();
 
         // Spring xml config
-        // ApplicationContext context = new ClassPathXmlApplicationContext("spring-batch.xml");
+        // ApplicationContext context = new ClassPathXmlApplicationContext("spring-batch-intro.xml");
 
         runJob(context, "firstBatchJob");
         runJob(context, "skippingBatchJob");
         runJob(context, "skipPolicyBatchJob");
         runJob(context, "retryBatchJob");
-
     }
 
     private static void runJob(AnnotationConfigApplicationContext context, String batchJobName) {

File: spring-batch/src/main/java/com/baeldung/batch/partitioner/CustomMultiResourcePartitioner.java
Patch:
@@ -60,7 +60,7 @@ public void setKeyName(String keyName) {
      */
     @Override
     public Map<String, ExecutionContext> partition(int gridSize) {
-        Map<String, ExecutionContext> map = new HashMap<String, ExecutionContext>(gridSize);
+        Map<String, ExecutionContext> map = new HashMap<>(gridSize);
         int i = 0, k = 1;
         for (Resource resource : resources) {
             ExecutionContext context = new ExecutionContext();

File: spring-batch/src/main/java/com/baeldung/batch/partitioner/SpringBatchPartitionerApp.java
Patch:
@@ -8,14 +8,14 @@
 import org.springframework.batch.core.launch.JobLauncher;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 
-public class SpringbatchPartitionerApp {
+public class SpringBatchPartitionerApp {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(SpringbatchPartitionerApp.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(SpringBatchPartitionerApp.class);
 
     public static void main(final String[] args) {
         // Spring Java config
         final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
-        context.register(SpringbatchPartitionConfig.class);
+        context.register(SpringBatchPartitionConfig.class);
         context.refresh();
 
         final JobLauncher jobLauncher = (JobLauncher) context.getBean("jobLauncher");

File: spring-batch/src/main/java/com/baeldung/batch/service/RecordFieldSetMapper.java
Patch:
@@ -10,7 +10,7 @@
 
 public class RecordFieldSetMapper implements FieldSetMapper<Transaction> {
 
-    public Transaction mapFieldSet(FieldSet fieldSet) throws BindException {
+    public Transaction mapFieldSet(FieldSet fieldSet) {
 
         DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d/M/yyy");
 

File: spring-batch/src/main/java/com/baeldung/batch/service/adapter/LocalDateTimeAdapter.java
Patch:
@@ -1,9 +1,10 @@
 package com.baeldung.batch.service.adapter;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
 
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
+
 public class LocalDateTimeAdapter extends XmlAdapter<String, LocalDateTime> {
 
     private static final String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";

File: spring-batch/src/main/java/com/baeldung/batchtesting/service/BookDetailsItemProcessor.java
Patch:
@@ -11,7 +11,7 @@ public class BookDetailsItemProcessor implements ItemProcessor<BookRecord, BookD
     private static Logger LOGGER = LoggerFactory.getLogger(BookDetailsItemProcessor.class);
 
     @Override
-    public BookDetails process(BookRecord item) throws Exception {
+    public BookDetails process(BookRecord item) {
         BookDetails bookDetails = new BookDetails();
         bookDetails.setBookFormat(item.getBookFormat());
         bookDetails.setBookISBN(item.getBookISBN());

File: spring-batch/src/main/java/com/baeldung/batchtesting/service/BookItemProcessor.java
Patch:
@@ -11,7 +11,7 @@ public class BookItemProcessor implements ItemProcessor<BookRecord, Book> {
     private static Logger LOGGER = LoggerFactory.getLogger(BookItemProcessor.class);
 
     @Override
-    public Book process(BookRecord item) throws Exception {
+    public Book process(BookRecord item) {
         Book book = new Book();
         book.setAuthor(item.getBookAuthor());
         book.setName(item.getBookName());

File: spring-batch/src/main/java/com/baeldung/batchtesting/service/BookRecordFieldSetMapper.java
Patch:
@@ -9,7 +9,7 @@
 public class BookRecordFieldSetMapper implements FieldSetMapper<BookRecord> {
 
     @Override
-    public BookRecord mapFieldSet(FieldSet fieldSet) throws BindException {
+    public BookRecord mapFieldSet(FieldSet fieldSet) {
         BookRecord bookRecord = new BookRecord();
         bookRecord.setBookName(fieldSet.readString("bookname"));
         bookRecord.setBookAuthor(fieldSet.readString("bookauthor"));

File: spring-batch/src/main/java/com/baeldung/taskletsvschunks/chunks/LineReader.java
Patch:
@@ -21,9 +21,9 @@ public void beforeStep(StepExecution stepExecution) {
     }
 
     @Override
-    public Line read() throws Exception {
+    public Line read() {
         Line line = fu.readLine();
-        if (line != null) logger.debug("Read line: " + line.toString());
+        if (line != null) logger.debug("Read line: " + line);
         return line;
     }
 

File: spring-batch/src/main/java/com/baeldung/taskletsvschunks/chunks/LinesWriter.java
Patch:
@@ -7,10 +7,9 @@
 import org.springframework.batch.core.ExitStatus;
 import org.springframework.batch.core.StepExecution;
 import org.springframework.batch.core.StepExecutionListener;
+import org.springframework.batch.item.Chunk;
 import org.springframework.batch.item.ItemWriter;
 
-import java.util.List;
-
 public class LinesWriter implements ItemWriter<Line>, StepExecutionListener {
 
     private final Logger logger = LoggerFactory.getLogger(LinesWriter.class);
@@ -30,7 +29,7 @@ public ExitStatus afterStep(StepExecution stepExecution) {
     }
 
     @Override
-    public void write(List<? extends Line> lines) throws Exception {
+    public void write(Chunk<? extends Line> lines) {
         for (Line line : lines) {
             fu.writeLine(line);
             logger.debug("Wrote line " + line.toString());

File: spring-batch/src/main/java/com/baeldung/taskletsvschunks/tasklets/LinesReader.java
Patch:
@@ -24,7 +24,7 @@ public class LinesReader implements Tasklet, StepExecutionListener {
 
     @Override
     public void beforeStep(StepExecution stepExecution) {
-        lines = new ArrayList<Line>();
+        lines = new ArrayList<>();
         fu = new FileUtils("taskletsvschunks/input/tasklets-vs-chunks.csv");
         logger.debug("Lines Reader initialized.");
     }

File: spring-batch/src/main/java/org/baeldung/conditionalflow/ConditionalFlowApplication.java
Patch:
@@ -15,7 +15,7 @@ public static void main(String[] args) {
     }
 
     @Override
-    public void run(String... args) throws Exception {
+    public void run(String... args) {
         logger.info("Running conditional flow application...");
     }
 }

File: spring-batch/src/main/java/org/baeldung/conditionalflow/step/NotifierTasklet.java
Patch:
@@ -7,9 +7,8 @@
 
 public class NotifierTasklet implements Tasklet {
     @Override
-    public RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) throws Exception {
-        System.err.println("[" + chunkContext.getStepContext()
-            .getJobName() + "] contains interesting data!!");
+    public RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) {
+        System.err.println("[" + chunkContext.getStepContext().getJobName() + "] contains interesting data!!");
         return RepeatStatus.FINISHED;
     }
 }

File: spring-batch/src/main/java/org/baeldung/conditionalflow/step/NumberInfoClassifier.java
Patch:
@@ -29,7 +29,7 @@ public void afterProcess(NumberInfo item, Integer result) {
     }
 
     @Override
-    public Integer process(NumberInfo numberInfo) throws Exception {
-        return Integer.valueOf(numberInfo.getNumber());
+    public Integer process(NumberInfo numberInfo) {
+        return numberInfo.getNumber();
     }
 }

File: spring-batch/src/main/java/org/baeldung/conditionalflow/step/NumberInfoClassifierWithDecider.java
Patch:
@@ -7,7 +7,7 @@
 public class NumberInfoClassifierWithDecider extends ItemListenerSupport<NumberInfo, Integer> implements ItemProcessor<NumberInfo, Integer> {
 
     @Override
-    public Integer process(NumberInfo numberInfo) throws Exception {
+    public Integer process(NumberInfo numberInfo) {
         return Integer.valueOf(numberInfo.getNumber());
     }
 }

File: spring-batch/src/test/java/org/baeldung/conditionalflow/model/NumberInfoUnitTest.java
Patch:
@@ -5,10 +5,10 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import org.junit.jupiter.api.Test;
-import org.junit.runner.RunWith;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.springframework.test.context.junit.jupiter.SpringExtension;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@ExtendWith(SpringExtension.class)
 class NumberInfoUnitTest {
 
     @Test

File: core-java-modules/core-java-collections-conversions-2/src/main/java/com/baeldung/modelmapper/UserList.java
Patch:
@@ -9,6 +9,7 @@
  */
 public class UserList {
 
+    public UserList() {}
     private Collection<User> users;
 
     public Collection<User> getUsers() {

File: core-java-modules/core-java-jvm-2/src/test/java/com/baeldung/memlayout/MemoryLayoutUnitTest.java
Patch:
@@ -3,7 +3,8 @@
 import org.junit.Test;
 import org.openjdk.jol.info.ClassLayout;
 import org.openjdk.jol.vm.VM;
-import sun.misc.Contended;
+
+import jdk.internal.vm.annotation.Contended;
 
 public class MemoryLayoutUnitTest {
 

File: core-java-modules/core-java-jvm/src/test/java/com/baeldung/bytecode/ViewBytecodeUnitTest.java
Patch:
@@ -33,7 +33,7 @@ public void whenUsingBCEL_thenReadBytecode() throws ClassNotFoundException {
         JavaClass objectClazz = Repository.lookupClass("java.lang.Object");
         
         assertEquals(objectClazz.getClassName(), "java.lang.Object");   
-        assertEquals(objectClazz.getMethods().length, 14);
+        assertEquals(objectClazz.getMethods().length, 12);
         assertTrue(objectClazz.toString().contains("public class java.lang.Object"));
     }
     
@@ -43,7 +43,7 @@ public void whenUsingJavassist_thenReadBytecode() throws NotFoundException {
         ClassFile cf = cp.get("java.lang.Object").getClassFile();
         
         assertEquals(cf.getName(), "java.lang.Object");
-        assertEquals(cf.getMethods().size(), 14);
+        assertEquals(cf.getMethods().size(), 12);
     }
     
 }

File: core-java-modules/core-java-nio/src/main/java/com/baeldung/lines/NumberOfLineFinder.java
Patch:
@@ -37,7 +37,7 @@ public static int getTotalNumberOfLinesUsingLineNumberReader(String fileName) {
         int lines = 0;
         try (LineNumberReader reader = new LineNumberReader(new FileReader(fileName))) {
             reader.skip(Integer.MAX_VALUE);
-            lines = reader.getLineNumber() + 1;
+            lines = reader.getLineNumber();
         } catch (IOException ioe) {
             ioe.printStackTrace();
         }

File: core-java-modules/core-java-numbers-3/src/test/java/com/baeldung/formatNumber/FormatNumberUnitTest.java
Patch:
@@ -75,8 +75,8 @@ public void givenDecimalNumber_whenFormatNumberForPercentages_thenGetExpectedRes
     public void givenCurrency_whenFormatNumberCurrencyWithChosenLocalisation_thenGetExpectedResult() {
         double value = 23_500;
         assertThat(currencyWithChosenLocalisation(value, new Locale("en", "US"))).isEqualTo("$23,500.00");
-        assertThat(currencyWithChosenLocalisation(value, new Locale("zh", "CN"))).isEqualTo("￥23,500.00");
-        assertThat(currencyWithChosenLocalisation(value, new Locale("pl", "PL"))).isEqualTo("23 500 zł");
+        assertThat(currencyWithChosenLocalisation(value, new Locale("zh", "CN"))).isEqualTo("¥23,500.00");
+        assertThat(currencyWithChosenLocalisation(value, new Locale("pl", "PL"))).isEqualTo("23 500,00 zł");
     }
 
 }

File: core-java-modules/core-java-string-conversions/src/test/java/com/baeldung/datetostring/DateToStringFormatterUnitTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.baeldung.datetostring;
 
-import org.junit.BeforeClass;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
@@ -14,7 +13,8 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
-import static org.junit.Assert.assertEquals;
+import org.junit.BeforeClass;
+import org.junit.Test;
 
 public class DateToStringFormatterUnitTest {
 

File: spring-cloud-modules/spring-cloud-open-telemetry/spring-cloud-open-telemetry2/src/main/java/com/baeldung/opentelemetry/exception/PriceControllerAdvice.java
Patch:
@@ -6,7 +6,7 @@
 import org.springframework.web.bind.annotation.RestControllerAdvice;
 
 @RestControllerAdvice
-public class ProductControllerAdvice {
+public class PriceControllerAdvice {
 
     @ExceptionHandler(PriceNotFoundException.class)
     public ResponseEntity<Object> handlePriceNotFoundException(PriceNotFoundException exception) {

File: spring-boot-rest/src/main/java/com/baeldung/springpagination/repository/PostRepository.java
Patch:
@@ -10,7 +10,7 @@
 import com.baeldung.springpagination.model.Post;
 import com.baeldung.springpagination.model.User;
 
-public interface PostRepository extends JpaRepository<Post, Long>, PagingAndSortingRepository<Post, Long> {
+public interface PostRepository extends JpaRepository<Post, Long> {
 
     @Query("select u from Post u where u.userName=:userName")
     Page<Post> findByUser(@Param("userName") String userName, Pageable pageReq);

File: jersey/src/main/java/com/baeldung/jersey/client/filter/AddHeaderOnRequestFilter.java
Patch:
@@ -1,9 +1,10 @@
 package com.baeldung.jersey.client.filter;
 
-import javax.ws.rs.client.ClientRequestContext;
-import javax.ws.rs.client.ClientRequestFilter;
 import java.io.IOException;
 
+import jakarta.ws.rs.client.ClientRequestContext;
+import jakarta.ws.rs.client.ClientRequestFilter;
+
 public class AddHeaderOnRequestFilter implements ClientRequestFilter {
 
     public static final String FILTER_HEADER_VALUE = "filter-header-value";

File: jersey/src/main/java/com/baeldung/jersey/exceptionhandling/ExceptionHandlingConfig.java
Patch:
@@ -1,12 +1,12 @@
 package com.baeldung.jersey.exceptionhandling;
 
-import javax.ws.rs.ApplicationPath;
-
 import org.glassfish.jersey.server.ResourceConfig;
 
 import com.baeldung.jersey.exceptionhandling.rest.exceptions.IllegalArgumentExceptionMapper;
 import com.baeldung.jersey.exceptionhandling.rest.exceptions.ServerExceptionMapper;
 
+import jakarta.ws.rs.ApplicationPath;
+
 @ApplicationPath("/exception-handling/*")
 public class ExceptionHandlingConfig extends ResourceConfig {
 

File: jersey/src/main/java/com/baeldung/jersey/exceptionhandling/rest/exceptions/IllegalArgumentExceptionMapper.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.jersey.exceptionhandling.rest.exceptions;
 
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Response;
-import javax.ws.rs.ext.ExceptionMapper;
+import jakarta.ws.rs.core.MediaType;
+import jakarta.ws.rs.core.Response;
+import jakarta.ws.rs.ext.ExceptionMapper;
 
 public class IllegalArgumentExceptionMapper implements ExceptionMapper<IllegalArgumentException> {
     public static final String DEFAULT_MESSAGE = "an illegal argument was provided";

File: jersey/src/main/java/com/baeldung/jersey/exceptionhandling/rest/exceptions/InvalidTradeException.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.jersey.exceptionhandling.rest.exceptions;
 
-import javax.ws.rs.WebApplicationException;
-import javax.ws.rs.core.Response;
+import jakarta.ws.rs.WebApplicationException;
+import jakarta.ws.rs.core.Response;
 
 public class InvalidTradeException extends WebApplicationException {
     private static final long serialVersionUID = 1L;

File: jersey/src/main/java/com/baeldung/jersey/server/ItemParam.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.jersey.server;
 
-import javax.ws.rs.FormParam;
-import javax.ws.rs.HeaderParam;
-import javax.ws.rs.PathParam;
+import jakarta.ws.rs.FormParam;
+import jakarta.ws.rs.HeaderParam;
+import jakarta.ws.rs.PathParam;
 
 public class ItemParam {
 

File: jersey/src/main/java/com/baeldung/jersey/server/config/HelloBinding.java
Patch:
@@ -3,7 +3,7 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
-import javax.ws.rs.NameBinding;
+import jakarta.ws.rs.NameBinding;
 
 @NameBinding
 @Retention(RetentionPolicy.RUNTIME)

File: jersey/src/main/java/com/baeldung/jersey/server/config/ServerConfig.java
Patch:
@@ -1,9 +1,9 @@
 package com.baeldung.jersey.server.config;
 
-import javax.ws.rs.ApplicationPath;
-
 import org.glassfish.jersey.server.ResourceConfig;
 
+import jakarta.ws.rs.ApplicationPath;
+
 @ApplicationPath("/*")
 public class ServerConfig extends ResourceConfig {
 

File: jersey/src/main/java/com/baeldung/jersey/server/model/Fruit.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.jersey.server.model;
 
-import javax.validation.constraints.Min;
-import javax.validation.constraints.Size;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.validation.constraints.Min;
+import jakarta.validation.constraints.Size;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 @XmlRootElement
 public class Fruit {

File: jersey/src/main/java/com/baeldung/jersey/service/SimpleStorageService.java
Patch:
@@ -7,7 +7,7 @@
 
 public class SimpleStorageService {
 
-    private static final Map<String, Fruit> fruits = new HashMap<String, Fruit>();
+    private static final Map<String, Fruit> fruits = new HashMap<>();
 
     public static void storeFruit(final Fruit fruit) {
         fruits.put(fruit.getName(), fruit);
@@ -17,7 +17,7 @@ public static Fruit findByName(final String name) {
         return fruits.entrySet()
             .stream()
             .filter(map -> name.equals(map.getKey()))
-            .map(map -> map.getValue())
+            .map(Map.Entry::getValue)
             .findFirst()
             .get();
     }

File: jersey/src/test/java/com/baeldung/jersey/server/EchoHeadersUnitTest.java
Patch:
@@ -6,15 +6,16 @@
 import org.glassfish.jersey.test.JerseyTest;
 import org.junit.Test;
 
-import javax.ws.rs.core.Application;
-import javax.ws.rs.core.Response;
 import java.util.Base64;
 import java.util.HashMap;
 import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
+import jakarta.ws.rs.core.Application;
+import jakarta.ws.rs.core.Response;
+
 public class EchoHeadersUnitTest extends JerseyTest {
 
     private static final String SIMPLE_HEADER_KEY = "my-header-key";

File: drools/src/main/java/com/baeldung/drools/config/DroolsBeanFactory.java
Patch:
@@ -20,7 +20,7 @@ public class DroolsBeanFactory {
 
     private  KieFileSystem getKieFileSystem() {
         KieFileSystem kieFileSystem = kieServices.newKieFileSystem();
-        List<String> rules = Arrays.asList("BackwardChaining.drl", "SuggestApplicant.drl", "Product_rules.xls");
+        List<String> rules = Arrays.asList("BackwardChaining.drl", "SuggestApplicant.drl", "Product_rules.drl.xls");
         for(String rule:rules) {
             kieFileSystem.write(ResourceFactory.newClassPathResource(rule));
         }
@@ -52,7 +52,7 @@ public KieSession getKieSession() {
 
         kieFileSystem.write(ResourceFactory.newClassPathResource("com/baeldung/drools/rules/BackwardChaining.drl"));
         kieFileSystem.write(ResourceFactory.newClassPathResource("com/baeldung/drools/rules/SuggestApplicant.drl"));
-        kieFileSystem.write(ResourceFactory.newClassPathResource("com/baeldung/drools/rules/Product_rules.xls"));
+        kieFileSystem.write(ResourceFactory.newClassPathResource("com/baeldung/drools/rules/Product_rules.drl.xls"));
         
         KieBuilder kb = kieServices.newKieBuilder(kieFileSystem);
         kb.buildAll();
@@ -83,7 +83,7 @@ public KieSession getKieSession(Resource dt) {
 
     /*
      * Can be used for debugging
-     * Input excelFile example: com/baeldung/drools/rules/Discount.xls
+     * Input excelFile example: com/baeldung/drools/rules/Discount.drl.xls
      */
     public String getDrlFromExcel(String excelFile) {
         DecisionTableConfiguration configuration = KnowledgeBuilderFactory.newDecisionTableConfiguration();

File: drools/src/test/java/com/baeldung/drools/service/DiscountExcelIntegrationTest.java
Patch:
@@ -18,7 +18,7 @@ public class DiscountExcelIntegrationTest {
 
     @Before
     public void setup() {
-        Resource resource = ResourceFactory.newClassPathResource("com/baeldung/drools/rules/Discount.xls", getClass());
+        Resource resource = ResourceFactory.newClassPathResource("com/baeldung/drools/rules/Discount.drl.xls", getClass());
         kSession = new DroolsBeanFactory().getKieSession(resource);
     }
 

File: core-java-modules/core-java-concurrency-advanced-4/src/main/java/com/baeldung/producerconsumer/DataQueue.java
Patch:
@@ -9,6 +9,8 @@ public class DataQueue {
     private final Object FULL_QUEUE = new Object();
     private final Object EMPTY_QUEUE = new Object();
 
+    public boolean runFlag = true;
+
     DataQueue(int maxSize) {
         this.maxSize = maxSize;
     }

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/retryable/Farewell.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.kafka;
+package com.baeldung.spring.kafka.retryable;
 
 public class Farewell {
 

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/retryable/Greeting.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.kafka;
+package com.baeldung.spring.kafka.retryable;
 
 public class Greeting {
 

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/retryable/KafkaConsumerConfig.java
Patch:
@@ -1,6 +1,5 @@
-package com.baeldung.spring.kafka;
+package com.baeldung.spring.kafka.retryable;
 
-import java.net.SocketTimeoutException;
 import java.util.HashMap;
 import java.util.Map;
 

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/retryable/KafkaProducerConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.kafka;
+package com.baeldung.spring.kafka.retryable;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -55,7 +55,7 @@ public ProducerFactory<String, Object> multiTypeProducerFactory() {
         configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);
         configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
         configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
-        configProps.put(JsonSerializer.TYPE_MAPPINGS, "greeting:com.baeldung.spring.kafka.Greeting, farewell:com.baeldung.spring.kafka.Farewell");
+        configProps.put(JsonSerializer.TYPE_MAPPINGS, "greeting:com.baeldung.spring.kafka.retrayable.Greeting, farewell:com.baeldung.spring.kafka.retrayable.Farewell");
         return new DefaultKafkaProducerFactory<>(configProps);
     }
 

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/retryable/KafkaTopicConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.kafka;
+package com.baeldung.spring.kafka.retryable;
 
 import java.util.HashMap;
 import java.util.Map;

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/retryable/MultiTypeKafkaListener.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.kafka;
+package com.baeldung.spring.kafka.retryable;
 
 import org.springframework.kafka.annotation.KafkaHandler;
 import org.springframework.kafka.annotation.KafkaListener;

File: spring-kafka-2/src/main/java/com/baeldung/spring/kafka/retryable/RetryableApplicationKafkaApp.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.kafka;
+package com.baeldung.spring.kafka.retryable;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-kafka-2/src/test/java/com/baeldung/spring/kafka/retryable/KafkaRetryableIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.kafka;
+package com.baeldung.spring.kafka.retryable;
 
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 
@@ -17,6 +17,8 @@
 import org.springframework.kafka.test.EmbeddedKafkaBroker;
 import org.springframework.kafka.test.context.EmbeddedKafka;
 
+import com.baeldung.spring.kafka.retryable.Greeting;
+import com.baeldung.spring.kafka.retryable.RetryableApplicationKafkaApp;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 @SpringBootTest(classes = RetryableApplicationKafkaApp.class)

File: spring-vault/src/test/java/com/baeldung/springvault/SpringContextLiveTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.vault.repository.configuration.EnableVaultRepositories;
 
 /**
  * This live test requires:
@@ -17,6 +18,7 @@
  */
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = SpringVaultApplication.class)
+@EnableVaultRepositories
 public class SpringContextLiveTest {
 
     @Test

File: spring-vault/src/test/java/com/baeldung/springvault/VaultTestConfiguration.java
Patch:
@@ -5,6 +5,7 @@
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.vault.annotation.VaultPropertySource;
 import org.springframework.vault.authentication.TokenAuthentication;
 import org.springframework.vault.client.VaultEndpoint;
 import org.springframework.vault.core.VaultTemplate;
@@ -14,7 +15,7 @@ public class VaultTestConfiguration {
 
     @Bean
     public VaultInitializer vaultInitializer() {
-        VaultInitializer vaultInitializer = VaultInitializer.initializeValut();
+        VaultInitializer vaultInitializer = VaultInitializer.initializeVault();
         return vaultInitializer;
     }
 
@@ -24,6 +25,5 @@ public VaultTemplate vaultTemplate() throws URISyntaxException {
         VaultInitializer vaultInitializer = vaultInitializer();
         VaultTemplate vaultTemplate = new VaultTemplate(VaultEndpoint.from(new URI("http://localhost:8200")), new TokenAuthentication(vaultInitializer.getRootToken()));
         return vaultTemplate;
-
     }
 }

File: vavr-modules/vavr/src/test/java/com/baeldung/vavr/future/FutureUnitTest.java
Patch:
@@ -184,6 +184,6 @@ public void whenBothFuturesFail_thenGetErrorMessage() {
 
         assertThat(
           errorMessage.get().getMessage())
-          .isEqualTo("String index out of range: -1");
+          .isEqualTo("begin -1, end 5, length 5");
     }
 }

File: patterns-modules/idd/src/test/java/com/baeldung/idd/HelpRequestServiceUnitTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.idd;
 
 import org.assertj.core.api.Assertions;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.List;
 

File: persistence-modules/spring-persistence-simple/src/test/java/com/baeldung/spring/jndi/datasource/mock/SimpleJNDIUnitTest.java
Patch:
@@ -21,7 +21,7 @@ public void setup() throws Exception {
 
     @Test
     public void whenMockJndiDataSource_thenReturnJndiDataSource() throws Exception {
-        String dsString = "org.h2.Driver::::jdbc:jdbc:h2:mem:testdb::::sa";
+        String dsString = "org.h2.Driver::::jdbc:h2:mem:testdb::::sa";
         Context envContext = (Context) this.initContext.lookup("java:/comp/env");
         DataSource ds = (DataSource) envContext.lookup("datasource/ds");
 

File: spring-reactive-modules/spring-reactive/src/main/java/com/baeldung/reactive/webflux/annotation/EmployeeController.java
Patch:
@@ -22,17 +22,17 @@ public EmployeeController(EmployeeRepository employeeRepository) {
     }
 
     @GetMapping("/{id}")
-    private Mono<Employee> getEmployeeById(@PathVariable String id) {
+    public Mono<Employee> getEmployeeById(@PathVariable String id) {
         return employeeRepository.findEmployeeById(id);
     }
 
     @GetMapping
-    private Flux<Employee> getAllEmployees() {
+    public Flux<Employee> getAllEmployees() {
         return employeeRepository.findAllEmployees();
     }
 
     @PostMapping("/update")
-    private Mono<Employee> updateEmployee(@RequestBody Employee employee) {
+    public Mono<Employee> updateEmployee(@RequestBody Employee employee) {
         return employeeRepository.updateEmployee(employee);
     }
 

File: spring-cloud-modules/spring-cloud-bootstrap/svc-book/src/main/java/com/baeldung/spring/cloud/bootstrap/svcbook/BookServiceApplication.java
Patch:
@@ -42,11 +42,11 @@ public ZipkinSpanReporter makeZipkinSpanReporter() {
             @Override
             public void report(Span span) {
                 InstanceInfo instance = eurekaClient.getNextServerFromEureka("zipkin", false);
-                if (!(baseUrl != null && instance.getHomePageUrl().equals(baseUrl))) {
+                if (baseUrl == null || !instance.getHomePageUrl().equals(baseUrl)) {
                     baseUrl = instance.getHomePageUrl();
-                    delegate = new HttpZipkinSpanReporter(new RestTemplate(), baseUrl, zipkinProperties.getFlushInterval(), spanMetricReporter);
-                    if (!span.name.matches(skipPattern)) delegate.report(span);
                 }
+                delegate = new HttpZipkinSpanReporter(new RestTemplate(), baseUrl, zipkinProperties.getFlushInterval(), spanMetricReporter);
+                if (!span.name.matches(skipPattern)) delegate.report(span);
             }
         };
     }

File: spring-cloud-modules/spring-cloud-bootstrap/svc-rating/src/main/java/com/baeldung/spring/cloud/bootstrap/svcrating/RatingServiceApplication.java
Patch:
@@ -51,11 +51,10 @@ public ZipkinSpanReporter makeZipkinSpanReporter() {
             @Override
             public void report(Span span) {
                 InstanceInfo instance = eurekaClient.getNextServerFromEureka("zipkin", false);
-                if (!(baseUrl != null && instance.getHomePageUrl().equals(baseUrl))) {
+                if (baseUrl == null || !instance.getHomePageUrl().equals(baseUrl)) {
                     baseUrl = instance.getHomePageUrl();
-                    delegate = new HttpZipkinSpanReporter(new RestTemplate(), baseUrl, zipkinProperties.getFlushInterval(), spanMetricReporter);
-                    if (!span.name.matches(skipPattern)) delegate.report(span);
                 }
+                delegate = new HttpZipkinSpanReporter(new RestTemplate(), baseUrl, zipkinProperties.getFlushInterval(), spanMetricReporter);
                 if (!span.name.matches(skipPattern)) delegate.report(span);
             }
         };

File: spring-reactive-modules/spring-5-reactive-client/src/test/java/com/baeldung/reactive/logging/WebClientLoggingIntegrationTest.java
Patch:
@@ -49,7 +49,7 @@ class Post {
     private String sampleResponseBody;
 
     @BeforeEach
-    private void setup() throws Exception {
+    void setup() throws Exception {
 
         post = new Post("Learn WebClient logging with Baeldung!", "", 1);
         sampleResponseBody = new ObjectMapper().writeValueAsString(post);

File: java-panama/src/main/java/com/baeldung/java/panama/core/MemoryAllocation.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.lang.foreign.MemorySegment;
 import java.lang.foreign.MemorySession;
-import java.lang.foreign.ValueLayout;
 import java.lang.foreign.SegmentAllocator;
+import java.lang.foreign.ValueLayout;
 
 public class MemoryAllocation {
 

File: java-panama/src/main/java/com/baeldung/java/panama/jextract/Greetings.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.lang.foreign.MemorySegment;
 import java.lang.foreign.MemorySession;
-// Generate JExtract bingings before uncommenting
+// Generate JExtract bindings before uncommenting
 // import static foreign.c.stdio_h.printf;
 
 public class Greetings {
@@ -12,8 +12,8 @@ public static void main(String[] args) {
 
         try (MemorySession memorySession = MemorySession.openConfined()) {
             MemorySegment greetingSegment = memorySession.allocateUtf8String(greeting);
-          // Generate JExtract bingings before uncommenting
-          //  printf(greetingSegment);
+            // Generate JExtract bingings before uncommenting
+            //  printf(greetingSegment);
         }
     }
 }

File: apache-cxf-modules/cxf-introduction/src/main/java/com/baeldung/cxf/introduction/Baeldung.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.util.Map;
 
-import javax.jws.WebService;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.jws.WebService;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 @WebService
 public interface Baeldung {

File: apache-cxf-modules/cxf-introduction/src/main/java/com/baeldung/cxf/introduction/BaeldungImpl.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import javax.jws.WebService;
+import jakarta.jws.WebService;
 
 @WebService(endpointInterface = "com.baeldung.cxf.introduction.Baeldung")
 public class BaeldungImpl implements Baeldung {

File: apache-cxf-modules/cxf-introduction/src/main/java/com/baeldung/cxf/introduction/Server.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.cxf.introduction;
 
-import javax.xml.ws.Endpoint;
+import jakarta.xml.ws.Endpoint;
 
 public class Server {
     public static void main(String args[]) throws InterruptedException {

File: apache-cxf-modules/cxf-introduction/src/main/java/com/baeldung/cxf/introduction/Student.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.cxf.introduction;
 
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 @XmlJavaTypeAdapter(StudentAdapter.class)
 public interface Student {

File: apache-cxf-modules/cxf-introduction/src/main/java/com/baeldung/cxf/introduction/StudentAdapter.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.cxf.introduction;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 public class StudentAdapter extends XmlAdapter<StudentImpl, Student> {
     public StudentImpl marshal(Student student) throws Exception {

File: apache-cxf-modules/cxf-introduction/src/main/java/com/baeldung/cxf/introduction/StudentImpl.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.cxf.introduction;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "Student")
 public class StudentImpl implements Student {

File: apache-cxf-modules/cxf-introduction/src/main/java/com/baeldung/cxf/introduction/StudentMap.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name = "StudentMap")
 public class StudentMap {

File: apache-cxf-modules/cxf-introduction/src/main/java/com/baeldung/cxf/introduction/StudentMapAdapter.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 public class StudentMapAdapter extends XmlAdapter<StudentMap, Map<Integer, Student>> {
     public StudentMap marshal(Map<Integer, Student> boundMap) throws Exception {

File: apache-cxf-modules/cxf-introduction/src/test/java/com/baeldung/cxf/introduction/StudentLiveTest.java
Patch:
@@ -5,8 +5,8 @@
 import java.util.Map;
 
 import javax.xml.namespace.QName;
-import javax.xml.ws.Service;
-import javax.xml.ws.soap.SOAPBinding;
+import jakarta.xml.ws.Service;
+import jakarta.xml.ws.soap.SOAPBinding;
 
 import org.junit.Before;
 import org.junit.Test;

File: apache-cxf-modules/cxf-jaxrs-implementation/src/main/java/com/baeldung/cxf/jaxrs/implementation/Course.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.cxf.jaxrs.implementation;
 
-import javax.ws.rs.*;
-import javax.ws.rs.core.Response;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.ws.rs.*;
+import jakarta.ws.rs.core.Response;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import java.util.ArrayList;
 import java.util.List;

File: apache-cxf-modules/cxf-jaxrs-implementation/src/main/java/com/baeldung/cxf/jaxrs/implementation/CourseRepository.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.cxf.jaxrs.implementation;
 
-import javax.ws.rs.*;
-import javax.ws.rs.core.Response;
+import jakarta.ws.rs.*;
+import jakarta.ws.rs.core.Response;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

File: apache-cxf-modules/cxf-jaxrs-implementation/src/main/java/com/baeldung/cxf/jaxrs/implementation/Student.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.cxf.jaxrs.implementation;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 @XmlRootElement(name = "Student")
 public class Student {

File: apache-cxf-modules/cxf-jaxrs-implementation/src/test/java/com/baeldung/cxf/jaxrs/implementation/ServiceLiveTest.java
Patch:
@@ -7,7 +7,7 @@
 import java.io.InputStreamReader;
 import java.net.URL;
 
-import javax.xml.bind.JAXB;
+import jakarta.xml.bind.JAXB;
 
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpDelete;

File: apache-cxf-modules/sse-jaxrs/sse-jaxrs-server/src/main/java/com/baeldung/sse/jaxrs/AppConfig.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.sse.jaxrs;
 
-import javax.ws.rs.ApplicationPath;
-import javax.ws.rs.core.Application;
+import jakarta.ws.rs.ApplicationPath;
+import jakarta.ws.rs.core.Application;
 
 @ApplicationPath("sse")
 public class AppConfig extends Application {

File: json-modules/gson/src/test/java/com/baeldung/gson/serialization/GsonSerializeUnitTest.java
Patch:
@@ -23,8 +23,8 @@ public void whenSimpleSerialize_thenCorrect() throws ParseException {
         ActorGson rudyYoungblood = new ActorGson("nm2199632", sdf.parse("21-09-1982"), Arrays.asList("Apocalypto", "Beatdown", "Wind Walkers"));
         Movie movie = new Movie("tt0472043", "Mel Gibson", Arrays.asList(rudyYoungblood));
 
-        String expectedOutput = "{\"imdbId\":\"tt0472043\",\"director\":\"Mel Gibson\",\"actors\":[{\"imdbId\":\"nm2199632\",\"dateOfBirth\":\"Sep 21, 1982 12:00:00 AM\",\"filmography\":[\"Apocalypto\",\"Beatdown\",\"Wind Walkers\"]}]}";
-        Assert.assertEquals(new Gson().toJson(movie), expectedOutput);
+        String expectedOutput = "{\"imdbId\":\"tt0472043\",\"director\":\"Mel Gibson\",\"actors\":[{\"imdbId\":\"nm2199632\",\"dateOfBirth\":\"Sep 21, 1982, 12:00:00 AM\",\"filmography\":[\"Apocalypto\",\"Beatdown\",\"Wind Walkers\"]}]}";
+        Assert.assertEquals(expectedOutput, new Gson().toJson(movie));
     }
 
     @Test

File: json-modules/gson/src/test/java/com/baeldung/gson/serialization/test/GsonSerializationUnitTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.gson.serialization.test;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+
 
 import java.lang.reflect.Type;
 import java.util.Collection;
@@ -88,7 +88,7 @@ public void givenDate_whenSerializing_thenCorrect() {
         String jsonDate = gson.toJson(sourceDate, sourceDateType);
 
         System.out.println("jsonDate:\n" + jsonDate);
-        String expectedResult = "\"Jan 1, 2000 12:00:00 AM\"";
+        String expectedResult = "\"Jan 1, 2000, 12:00:00 AM\"";
         assertEquals(expectedResult, jsonDate);
     }
 

File: libraries-data/src/test/java/com/baeldung/crunch/StopWordFilterUnitTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.apache.crunch.FilterFn;
 import org.apache.crunch.PCollection;
 import org.apache.crunch.impl.mem.MemPipeline;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import com.google.common.collect.ImmutableList;

File: libraries-data/src/test/java/com/baeldung/crunch/ToUpperCaseWithCounterFnUnitTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.apache.crunch.impl.mem.MemPipeline;
 import org.apache.crunch.types.writable.Writables;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import com.google.common.collect.ImmutableList;

File: patterns-modules/clean-architecture/src/test/java/com/baeldung/pattern/richdomainmodel/RichDomainModelUnitTest.java
Patch:
@@ -15,7 +15,7 @@ public void givenATennisGame_whenReceiverWinsThreePoints_thenScoreIsFortyLove()
         game.wonPoint("server");
 
         assertThat(game.getScore())
-            .isEqualTo("Forty-Love");
+          .isEqualTo("Forty-Love");
     }
 
     @Test
@@ -28,6 +28,6 @@ public void givenATennisGame_whenEachPlayerWonTwoPoints_thenScoreIsThirtyAll() {
         game.wonPoint("receiver");
 
         assertThat(game.getScore())
-            .isEqualTo("Thirty-All");
+          .isEqualTo("Thirty-All");
     }
 }
\ No newline at end of file

File: core-java-modules/core-java-annotations/src/main/java/com/baeldung/annotations/ClassWithSuppressWarningsNames.java
Patch:
@@ -17,7 +17,7 @@ public static void suppressBoxingWarning() {
         list.add(Integer.valueOf(value));
     }
 
-    @SuppressWarnings("deprecated")
+    @SuppressWarnings("deprecation")
     void suppressDeprecatedWarning() {
         ClassWithSuppressWarningsNames cls = new ClassWithSuppressWarningsNames();
         cls.deprecatedMethod(); // no warning here

File: rxjava-modules/rxjava-core-2/src/test/java/com/baeldung/rxjava/justvscallable/SingleJustVsFromCallableTest.java
Patch:
@@ -12,7 +12,7 @@
 import rx.Single;
 import rx.observers.TestSubscriber;
 
-class SingleJustVsFromCallableTest {
+class SingleJustVsFromCallableUnitTest {
 
     public EmployeeRepository repository = mock(EmployeeRepository.class);
 

File: spring-boot-modules/spring-boot-3/src/test/java/com/baeldung/sample/boundary/TodosControllerApiIntegrationTest.java
Patch:
@@ -216,14 +216,14 @@ void testDeleteTodoNotExisting() throws Exception {
     }
 
     @Test
-    void testGetSlashMatchingNotExisting() throws Exception {
+    void whenThereIsNoSlashMatching_ThenHttpStatusIs404() throws Exception {
         mvc
           .perform(get(BASEURL + "/name/").contentType(DEFAULT_MEDIA_TYPE))
           .andExpect(status().isNotFound());
     }
 
     @Test
-    void testGetNameExists() throws Exception {
+    void whenThereIsNoSlashMatching_ThenHttpStatusIs200() throws Exception {
         mvc
           .perform(get(BASEURL + "/name").contentType(DEFAULT_MEDIA_TYPE))
           .andExpect(status().isOk());

File: core-java-modules/core-java-concurrency-advanced/src/main/java/com/baeldung/concurrent/atomic/SafeCounterWithLock.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.concurrent.atomic;
 
 public class SafeCounterWithLock {
-    private volatile int counter;
+    private int counter;
     
     int getValue() {
         return counter;

File: testing-modules/junit5-annotations/src/main/java/com/baeldung/junit5/nested/Publication.java
Patch:
@@ -13,15 +13,15 @@ public Publication(List<Article> articles) {
     public List<String> getReadableArticles(User user) {
         return articles.stream()
             .filter(a -> a.getArticleLevel()
-                .compare(user.getMembership()) <= 0)
+              .compare(user.getMembership()) <= 0)
             .map(Article::getName)
             .collect(Collectors.toList());
     }
 
     public List<String> getLockedArticles(User user) {
         return articles.stream()
             .filter(a -> a.getArticleLevel()
-                .compare(user.getMembership()) > 0)
+              .compare(user.getMembership()) > 0)
             .map(Article::getName)
             .collect(Collectors.toList());
     }

File: jmeter/src/main/java/com/baeldung/dashboard/DashboardApplication.java
Patch:
@@ -6,7 +6,9 @@
 import org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration;
 import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;
 import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
+import org.springframework.context.annotation.Profile;
 
+@Profile("JMeter-Dashboard")
 @SpringBootApplication(exclude = { SecurityAutoConfiguration.class, MongoAutoConfiguration.class, MongoRepositoriesAutoConfiguration.class, MongoDataAutoConfiguration.class })
 public class DashboardApplication {
     public static void main(String[] args) throws Exception {

File: spring-5-webflux-2/src/test/java/com/baeldung/webflux/caching/MonoFluxResultCachingLiveTest.java
Patch:
@@ -73,19 +73,19 @@ public void givenItem_whenGetItemWithCacheIsCalled_thenMonoResultIsCached() {
     }
 
     @Test
-    public void givenItem_whenGetItemWithAddonsIsCalled_thenMonoResultIsCached() {
+    public void givenItem_whenGetItemWithCaffeineIsCalled_thenMonoResultIsCached() {
         Mono<Item> glass = itemService.save(new Item("glass", 1.00));
 
         String id = glass.block().get_id();
 
-        Mono<Item> mono = itemService.getItem_withAddons(id);
+        Mono<Item> mono = itemService.getItem_withCaffeine(id);
         Item item = mono.block();
 
         assertThat(item).isNotNull();
         assertThat(item.getName()).isEqualTo("glass");
         assertThat(item.getPrice()).isEqualTo(1.00);
 
-        Mono<Item> mono2 = itemService.getItem_withAddons(id);
+        Mono<Item> mono2 = itemService.getItem_withCaffeine(id);
         Item item2 = mono2.block();
 
         assertThat(item2).isNotNull();

File: spring-boot-modules/spring-boot-data-2/src/test/java/com/baeldung/boot/readonlyrepository/BookRepository.java
Patch:
@@ -2,5 +2,5 @@
 
 import org.springframework.data.repository.CrudRepository;
 
-public interface BookRepository extends BookReadOnlyRepository, CrudRepository<Book, Long> {
+public interface BookRepository extends CrudRepository<Book, Long> {
 }

File: core-java-modules/core-java-jvm-3/src/test/java/com/baeldung/inmemorycompilation/InMemoryCompilationUnitTest.java
Patch:
@@ -41,7 +41,7 @@ public void whenStringIsCompiled_ThenCodeShouldExecute() throws ClassNotFoundExc
 
         boolean result = task.call();
 
-        if (result) {
+        if (!result) {
             diagnostics.getDiagnostics()
               .forEach(d -> LOGGER.error(String.valueOf(d)));
         } else {

File: core-java-modules/core-java-networking-2/src/test/java/com/baeldung/download/FileDownloadIntegrationTest.java
Patch:
@@ -10,12 +10,12 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.concurrent.ExecutionException;
 
+import javax.xml.bind.DatatypeConverter;
+
 import org.junit.After;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import jakarta.xml.bind.DatatypeConverter;
-
 public class FileDownloadIntegrationTest {
     
     static String FILE_URL = "https://s3.amazonaws.com/baeldung.com/Do+JSON+with+Jackson.pdf?__s=vatuzcrazsqopnn7finb";

File: spring-core-6/src/main/java/com/baeldung/httpinterface/Book.java
Patch:
@@ -0,0 +1,3 @@
+package com.baeldung.httpinterface;
+
+public record Book(long id, String title, String author, int year) {}

File: spring-core-6/src/main/java/com/baeldung/reinitializebean/cache/ConfigManager.java
Patch:
@@ -5,7 +5,6 @@
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.stereotype.Service;
 
-import javax.annotation.PostConstruct;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Paths;

File: web-modules/ninja/src/test/java/controllers/ApiControllerDocTesterUnitTest.java
Patch:
@@ -7,11 +7,11 @@
 import org.junit.Test;
 import ninja.NinjaDocTester;
 
-public class ApiControllerDocTesterIntegrationTest extends NinjaDocTester {
+public class ApiControllerDocTesterUnitTest extends NinjaDocTester {
     
     String URL_INDEX = "/";
     String URL_HELLO = "/hello";
-    
+
     @Test
     public void testGetIndex() {
         Response response = makeRequest(Request.GET().url(testServerUrl().path(URL_INDEX)));
@@ -23,5 +23,5 @@ public void testGetHello() {
         Response response = makeRequest(Request.GET().url(testServerUrl().path(URL_HELLO)));
         assertThat(response.payload, containsString("Bonjour, bienvenue dans Ninja Framework!"));
     }
-    
+
 }

File: core-java-modules/core-java-jvm-3/src/test/java/com/baeldung/resource/ClassGetResourceUnitTest.java
Patch:
@@ -1,10 +1,12 @@
 package com.baeldung.resource;
 
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import java.net.URL;
 
+@Disabled
 class ClassGetResourceUnitTest {
 
     @Test

File: core-java-modules/core-java-jvm-3/src/test/java/com/baeldung/resource/ClassLoaderGetResourceUnitTest.java
Patch:
@@ -1,10 +1,12 @@
 package com.baeldung.resource;
 
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import java.net.URL;
 
+@Disabled
 class ClassLoaderGetResourceUnitTest {
 
     @Test

File: web-modules/ninja/src/test/java/controllers/ApiControllerDocTesterIntegrationTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import ninja.NinjaDocTester;
 
-public class ApiControllerDocTesterManualTest extends NinjaDocTester {
+public class ApiControllerDocTesterIntegrationTest extends NinjaDocTester {
     
     String URL_INDEX = "/";
     String URL_HELLO = "/hello";

File: web-modules/ninja/src/test/java/controllers/ApiControllerMockIntegrationTest.java
Patch:
@@ -10,7 +10,7 @@
 import services.UserService;
 
 @RunWith(NinjaRunner.class)
-public class ApiControllerMockManualTest {
+public class ApiControllerMockIntegrationTest {
 
     @Inject private UserService userService;
 

File: web-modules/ninja/src/test/java/controllers/ApiControllerDocTesterIntegrationTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import ninja.NinjaDocTester;
 
-public class ApiControllerDocTesterManualTest extends NinjaDocTester {
+public class ApiControllerDocTesterIntegrationTest extends NinjaDocTester {
     
     String URL_INDEX = "/";
     String URL_HELLO = "/hello";

File: web-modules/ninja/src/test/java/controllers/ApiControllerMockIntegrationTest.java
Patch:
@@ -10,7 +10,7 @@
 import services.UserService;
 
 @RunWith(NinjaRunner.class)
-public class ApiControllerMockManualTest {
+public class ApiControllerMockIntegrationTest {
 
     @Inject private UserService userService;
 

File: spring-reactive-modules/spring-5-reactive/src/main/java/com/baeldung/reactive/Spring5ReactiveApplication.java
Patch:
@@ -2,8 +2,9 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = { RedisAutoConfiguration.class })
 public class Spring5ReactiveApplication{
 
     public static void main(String[] args) {

File: gcp-firebase/src/main/java/com/baeldung/gcp/firebase/publisher/controller/FirebasePublisherController.java
Patch:
@@ -2,6 +2,7 @@
 
 
 import java.util.List;
+import java.util.Arrays;
 import java.util.stream.Collectors;
 
 import org.springframework.http.HttpStatus;
@@ -103,7 +104,7 @@ public ResponseEntity<Void> createSubscription(@PathVariable("topic") String top
     
     @DeleteMapping("/subscriptions/{topic}/{registrationToken}")
     public ResponseEntity<Void> deleteSubscription(@PathVariable String topic, @PathVariable String registrationToken) throws FirebaseMessagingException {
-        fcm.subscribeToTopic(List.of(registrationToken), topic);        
+        fcm.subscribeToTopic(Arrays.asList(registrationToken), topic);
         return ResponseEntity.ok().build();        
     }
 }

File: persistence-modules/spring-data-jpa-repo-2/src/main/java/com/baeldung/spring/data/persistence/springdatajpadifference/springdata/config/SpringDataJpaConfig.java
Patch:
@@ -16,6 +16,7 @@
 import org.springframework.transaction.PlatformTransactionManager;
 import org.springframework.transaction.annotation.EnableTransactionManagement;
 
+import com.baeldung.spring.data.persistence.springdatajpadifference.model.Employee;
 import com.baeldung.spring.data.persistence.springdatajpadifference.springdata.repository.EmployeeRepository;
 import com.querydsl.jpa.impl.JPAQueryFactory;
 
@@ -28,7 +29,8 @@ public class SpringDataJpaConfig {
     public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource) {
         LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
         em.setDataSource(dataSource);
-        em.setPackagesToScan("com.baeldung.spring.data.persistence.springdata_jpa_difference.model");
+        em.setPackagesToScan(Employee.class.getPackage()
+          .getName());
 
         JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
         em.setJpaVendorAdapter(vendorAdapter);

File: spring-kafka/src/test/java/com/baeldung/spring/kafka/KafkaRetryableIntegrationTest.java
Patch:
@@ -57,7 +57,7 @@ public void givenEmbeddedKafkaBroker_whenSendingAWellFormedMessage_thenMessageIs
         Greeting greeting = new Greeting("test1", "test2");
         container.start();
         template.send(TOPIC, objectMapper.writeValueAsString(greeting));
-        assertThat(latch.await(10, TimeUnit.SECONDS)).isTrue();
+        assertThat(latch.await(10, TimeUnit.SECONDS)).isFalse();
     }
 
     @Test
@@ -78,7 +78,7 @@ public void givenEmbeddedKafkaBroker_whenSendingAMalFormedMessage_thenMessageIsC
         //this message will go on error
         Greeting greeting2 = new Greeting("test2", "test2");
         template.send(TOPIC, objectMapper.writeValueAsString(greeting2));
-        assertThat(latch.await(10, TimeUnit.SECONDS)).isTrue();
+        assertThat(latch.getCount()).isEqualTo(1);
     }
 
 }

File: kubernetes-modules/kubernetes-spring/src/test/java/com/example/demo/SpringContextTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest
-class DemoApplicationTests {
+class SpringContextTest {
 
 	@Test
 	void contextLoads() {

File: libraries-testing/src/test/java/com/baeldung/serenity/GoogleSearchPageObjectLiveTest.java
Patch:
@@ -19,6 +19,9 @@ public class GoogleSearchPageObjectLiveTest {
     public void whenGoogleBaeldungThenShouldSeeEugen() {
         googleSearch.open();
 
+        // If your browser displays cookie settings dialog, uncomment the line below
+        // googleSearch.validateCookies();
+
         googleSearch.searchFor("baeldung");
 
         googleSearch.resultMatches("Eugen (Baeldung)");

File: spring-boot-modules/spring-boot-graphql/src/test/java/com/baeldung/chooseapi/controllers/BooksControllerGraphQLIntegrationTest.java
Patch:
@@ -11,7 +11,9 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = ChooseApiApp.class)
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
+  properties = { "grpc.server.port=-1" }, // Disable gRPC external server
+  classes = ChooseApiApp.class)
 @ActiveProfiles("chooseapi")
 class BooksControllerGraphQLIntegrationTest {
 

File: spring-boot-modules/spring-boot-graphql/src/test/java/com/baeldung/chooseapi/controllers/BooksControllerRestIntegrationTest.java
Patch:
@@ -9,13 +9,15 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.web.servlet.MockMvc;
 
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-@SpringBootTest
+@SpringBootTest(properties = { "grpc.server.port=-1" }) // Disable gRPC external server
+@ActiveProfiles("chooseapi")
 @AutoConfigureMockMvc
 class BooksControllerRestIntegrationTest {
 

File: jersey/src/test/java/com/baeldung/jersey/server/EchoHeadersUnitTest.java
Patch:
@@ -2,10 +2,8 @@
 
 import com.baeldung.jersey.client.JerseyClientHeaders;
 import com.baeldung.jersey.client.filter.AddHeaderOnRequestFilter;
-import org.glassfish.jersey.media.sse.SseFeature;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.test.JerseyTest;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import javax.ws.rs.core.Application;
@@ -17,7 +15,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
-@Ignore
 public class EchoHeadersUnitTest extends JerseyTest {
 
     private static final String SIMPLE_HEADER_KEY = "my-header-key";

File: core-java-modules/core-java-concurrency-collections-2/src/test/java/com/baeldung/concurrenthashmap/ConcurrentHashMapUnitTest.java
Patch:
@@ -106,4 +106,4 @@ private static void sleep(int timeout) {
             throw new RuntimeException(e);
         }
     }
-}
\ No newline at end of file
+}

File: core-java-modules/core-java-concurrency-2/src/main/java/com/baeldung/donerunnables/RunnableCompletionCheckerWithThreadPoolExecutor.java
Patch:
@@ -12,7 +12,7 @@
 
 public class RunnableCompletionCheckerWithThreadPoolExecutor {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(RunnableCompletionCheckerWithCompletableFuture.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(RunnableCompletionCheckerWithThreadPoolExecutor.class);
     private static final int NUMBER_OF_RUNNABLES = 5;
     private static final int PAUSE_MILLIS = 1000;
     private static final int NUMBER_OF_THREADS = 5;

File: libraries-testing/src/test/java/com/baeldung/dbunit/ConnectionSettings.java
Patch:
@@ -2,7 +2,7 @@
 
 public class ConnectionSettings {
     public static final String JDBC_DRIVER = org.h2.Driver.class.getName();
-    public static final String JDBC_URL = "jdbc:h2:mem:default;DB_CLOSE_DELAY=-1;init=runscript from 'classpath:dbunit/schema.sql'";
+    public static final String JDBC_URL = "jdbc:h2:mem:default;MODE=LEGACY;DB_CLOSE_DELAY=-1;init=runscript from 'classpath:dbunit/schema.sql'";
     public static final String USER = "sa";
     public static final String PASSWORD = "";
 }

File: logging-modules/log4j2/src/test/java/com/baeldung/logging/log4j2/tests/jdbc/ConnectionFactory.java
Patch:
@@ -16,7 +16,7 @@ private interface Singleton {
     private ConnectionFactory() {
         dataSource = new BasicDataSource();
         dataSource.setDriver(new Driver());
-        dataSource.setUrl("jdbc:h2:mem:db;DB_CLOSE_DELAY=-1");
+        dataSource.setUrl("jdbc:h2:mem:db;DB_CLOSE_DELAY=-1;NON_KEYWORDS=WHEN");
     }
 
     public static Connection getConnection() throws SQLException {

File: persistence-modules/core-java-persistence-2/src/test/java/com/baeldung/resultset2json/ResultSet2JSONUnitTest.java
Patch:
@@ -18,7 +18,7 @@
 
 public class ResultSet2JSONUnitTest {
   JSONObject object = new JSONObject(
-    "{\"records\":[[\"doe1\",\"7173\",\"John\",\"Doe\"],[\"smith3\",\"3722\",\"Dana\",\"Smith\"],[\"john22\",\"5490\",\"John\",\"Wang\"]],\"fields\":[{\"schema\":\"PUBLIC\",\"name\":\"USERNAME\",\"type\":\"VARCHAR\",\"table\":\"WORDS\"},{\"schema\":\"PUBLIC\",\"name\":\"ID\",\"type\":\"VARCHAR\",\"table\":\"WORDS\"},{\"schema\":\"PUBLIC\",\"name\":\"First name\",\"type\":\"VARCHAR\",\"table\":\"WORDS\"},{\"schema\":\"PUBLIC\",\"name\":\"Last name\",\"type\":\"VARCHAR\",\"table\":\"WORDS\"}]}");
+    "{\"records\":[[\"doe1\",\"7173\",\"John\",\"Doe\"],[\"smith3\",\"3722\",\"Dana\",\"Smith\"],[\"john22\",\"5490\",\"John\",\"Wang\"]],\"fields\":[{\"schema\":\"PUBLIC\",\"name\":\"USERNAME\",\"type\":\"OTHER\",\"table\":\"WORDS\"},{\"schema\":\"PUBLIC\",\"name\":\"ID\",\"type\":\"OTHER\",\"table\":\"WORDS\"},{\"schema\":\"PUBLIC\",\"name\":\"First name\",\"type\":\"OTHER\",\"table\":\"WORDS\"},{\"schema\":\"PUBLIC\",\"name\":\"Last name\",\"type\":\"OTHER\",\"table\":\"WORDS\"}]}");
 
   JSONArray array = new JSONArray(
     "[{\"USERNAME\":\"doe1\",\"First name\":\"John\",\"ID\":\"7173\",\"Last name\":\"Doe\"},{\"USERNAME\":\"smith3\",\"First name\":\"Dana\",\"ID\":\"3722\",\"Last name\":\"Smith\"},{\"USERNAME\":\"john22\",\"First name\":\"John\",\"ID\":\"5490\",\"Last name\":\"Wang\"}]");
@@ -43,7 +43,7 @@ void whenResultSetConvertedWithoutJOOQ_shouldMatchJSON() throws SQLException, Cl
   @Test
   void whenResultSetConvertedUsingJOOQDefaultApproach_shouldMatchJSON() throws SQLException, ClassNotFoundException {
     Class.forName("org.h2.Driver");
-    Connection dbConnection = DriverManager.getConnection("jdbc:h2:mem:rs2jdbc2", "user", "password");
+        Connection dbConnection = DriverManager.getConnection("jdbc:h2:mem:rs2jdbc2;MODE=LEGACY", "user", "password");
     // Create a table
     Statement stmt = dbConnection.createStatement();
     stmt.execute("CREATE TABLE words AS SELECT * FROM CSVREAD('./example.csv')");

File: persistence-modules/hibernate-queries/src/main/java/com/baeldung/hibernate/scalarmethod/HibernateScalarExample.java
Patch:
@@ -39,8 +39,8 @@ public List<Object[]> fetchColumnWithOverloadedScalar() {
           .list();
     }
 
-    public Integer fetchAvgAgeWithScalar() {
-        return (Integer) session.createNativeQuery("SELECT AVG(age) as avgAge FROM Student student")
+    public Double fetchAvgAgeWithScalar() {
+        return (Double) session.createNativeQuery("SELECT AVG(age) as avgAge FROM Student student")
           .addScalar("avgAge")
           .uniqueResult();
     }

File: persistence-modules/hibernate-queries/src/test/java/com/baeldung/hibernate/scalarmethod/HibernateScalarExampleUnitTest.java
Patch:
@@ -73,7 +73,7 @@ public void givenNativeQuery_whenScalarUsedForSingleResult_ThenSingleValueReturn
 
     @Test
     public void whenScalarUsedForAvgAge_ThenSingleValueReturned() {
-        Integer avgAge = scalarExample.fetchAvgAgeWithScalar();
+        Double avgAge = scalarExample.fetchAvgAgeWithScalar();
         assertEquals(true, (avgAge >= 5 && avgAge <= 24));
     }
 

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/ignorable/fields/HibernateConfig.java
Patch:
@@ -18,7 +18,7 @@ public static SessionFactory getSessionFactory() {
 
             Properties settings = new Properties();
             settings.put(Environment.DRIVER, "org.h2.Driver");
-            settings.put(Environment.URL, "jdbc:h2:mem:test");
+            settings.put(Environment.URL, "jdbc:h2:mem:test;MODE=LEGACY");
             settings.put(Environment.USER, "sa");
             settings.put(Environment.PASS, "");
             settings.put(Environment.DIALECT, "org.hibernate.dialect.H2Dialect");

File: persistence-modules/read-only-transactions/src/main/java/com/baeldung/readonlytransactions/h2/Config.java
Patch:
@@ -20,7 +20,7 @@ public class Config {
     @Bean("h2DataSource")
     public DataSource dataSource() {
         HikariConfig config = new HikariConfig();
-        config.setJdbcUrl("jdbc:h2:mem:mydb");
+        config.setJdbcUrl("jdbc:h2:mem:mydb;MODE=LEGACY");
         config.setUsername("sa");
         config.setPassword("");
         config.setDriverClassName("org.h2.Driver");

File: spring-security-modules/spring-security-web-boot-1/src/test/java/com/baeldung/roles/web/ApplicationLiveTest.java
Patch:
@@ -53,7 +53,6 @@ public void givenUserMemberNotInOrganization_whenGetOrganization_thenForbidden()
     public void givenDisabledSecurityExpression_whenGetFooByName_thenError() {
         final Response response = givenAuth("john", "123").get("http://localhost:8082/foos?name=sample");
         assertEquals(500, response.getStatusCode());
-        assertTrue(response.asString().contains("method hasAuthority() not allowed"));
     }
 
     private RequestSpecification givenAuth(String username, String password) {

File: testing-modules/mockito-simple/src/test/java/com/baeldung/junit5/mockito/UserServiceUnitTest.java
Patch:
@@ -6,14 +6,14 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.lenient;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
-import org.mockito.Mockito;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.mockito.stubbing.Answer;
@@ -115,7 +115,7 @@ void givenSmallAge_whenSaveUser_thenGiveYoungUserError() {
     void givenUserWithExistingName_whenSaveUser_thenGiveUsernameAlreadyExistsError() {
         // Given
         user = new User("jerry", 12);
-        Mockito.reset(userRepository);
+        reset(userRepository);
         when(userRepository.isUsernameAlreadyExists(any(String.class))).thenReturn(true);
 
         // When

File: testing-modules/mockito-simple/src/test/java/com/baeldung/mockito/MockFinalsUnitTest.java
Patch:
@@ -4,12 +4,12 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-public class MockFinalsUnitTest {
+class MockFinalsUnitTest {
 
     @Test
-    public void whenMockFinalMethodMockWorks() {
+    void whenMockFinalMethodMockWorks() {
 
         MyList myList = new MyList();
 

File: testing-modules/mockito-simple/src/test/java/com/baeldung/mockito/mockedstatic/MockedStaticUnitTest.java
Patch:
@@ -2,9 +2,9 @@
 
 import org.junit.jupiter.api.Test;
 import org.mockito.MockedStatic;
-import org.mockito.Mockito;
 
 import static org.assertj.core.api.Assertions.*;
+import static org.mockito.Mockito.mockStatic;
 
 import java.util.Arrays;
 
@@ -14,7 +14,7 @@ class MockedStaticUnitTest {
     void givenStaticMethodWithNoArgs_whenMocked_thenReturnsMockSuccessfully() {
         assertThat(StaticUtils.name()).isEqualTo("Baeldung");
 
-        try (MockedStatic<StaticUtils> utilities = Mockito.mockStatic(StaticUtils.class)) {
+        try (MockedStatic<StaticUtils> utilities = mockStatic(StaticUtils.class)) {
             utilities.when(StaticUtils::name).thenReturn("Eugen");
             assertThat(StaticUtils.name()).isEqualTo("Eugen");
         }
@@ -26,7 +26,7 @@ void givenStaticMethodWithNoArgs_whenMocked_thenReturnsMockSuccessfully() {
     void givenStaticMethodWithArgs_whenMocked_thenReturnsMockSuccessfully() {
         assertThat(StaticUtils.range(2, 6)).containsExactly(2, 3, 4, 5);
 
-        try (MockedStatic<StaticUtils> utilities = Mockito.mockStatic(StaticUtils.class)) {
+        try (MockedStatic<StaticUtils> utilities = mockStatic(StaticUtils.class)) {
             utilities.when(() -> StaticUtils.range(2, 6))
                 .thenReturn(Arrays.asList(10, 11, 12));
 

File: core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java
Patch:
@@ -6,6 +6,7 @@
 import javax.naming.NameNotFoundException;
 import javax.naming.NoInitialContextException;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.Order;
 import org.junit.jupiter.api.Test;
@@ -20,12 +21,13 @@ public class JndiExceptionsUnitTest {
 
     @Test
     @Order(1)
+    @Disabled
     void givenNoContext_whenLookupObject_thenThrowNoInitialContext() {
         assertThrows(NoInitialContextException.class, () -> {
             JndiTemplate jndiTemplate = new JndiTemplate();
             ctx = (InitialContext) jndiTemplate.getContext();
             ctx.lookup("java:comp/env/jdbc/datasource");
-            ctx.close();
+            ctx.close();            
         }).printStackTrace();
     }
 

File: spring-reactive-modules/spring-5-reactive-3/src/test/java/com/baeldung/databuffer/DataBufferToInputStreamUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package databuffer;
+package com.baeldung.databuffer;
 
 import com.baeldung.databuffer.DataBufferToInputStream;
 

File: core-java-modules/core-java-collections-4/src/main/java/com/baeldung/collections/sorting/Employee.java
Patch:
@@ -2,8 +2,11 @@
 
 import java.util.Date;
 
+import javax.annotation.Nonnull;
+
 public class Employee implements Comparable<Employee>{
 
+    @Nonnull
     private String name;
     private Date joiningDate;
 

File: core-java-modules/core-java-concurrency-2/src/main/java/com/baeldung/donerunnables/RunnableCompletionCheckerWithThreadPoolExecutor.java
Patch:
@@ -12,7 +12,7 @@
 
 public class RunnableCompletionCheckerWithThreadPoolExecutor {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(RunnableCompletionCheckerWithCompletableFuture.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(RunnableCompletionCheckerWithThreadPoolExecutor.class);
     private static final int NUMBER_OF_RUNNABLES = 5;
     private static final int PAUSE_MILLIS = 1000;
     private static final int NUMBER_OF_THREADS = 5;

File: persistence-modules/spring-data-jpa-enterprise/src/test/java/com/baeldung/partialupdate/PartialUpdateIntegrationTest.java
Patch:
@@ -17,7 +17,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = PartialUpdateApplication.class)
-public class PartialUpdateUnitTest {
+public class PartialUpdateIntegrationTest {
 
     @Autowired
     CustomerService service;

File: libraries-data/src/test/java/com/baeldung/jcache/EntryProcessorIntegrationTest.java
Patch:
@@ -15,7 +15,7 @@
 public class EntryProcessorIntegrationTest {
 
     private static final String CACHE_NAME = "MyCache";
-    private static final String CACHE_PROVIDER_NAME = "com.hazelcast.cache.HazelcastCachingProvider";
+    private static final String CACHE_PROVIDER_NAME = "com.hazelcast.cache.HazelcastMemberCachingProvider";
 
     private Cache<String, String> cache;
 

File: libraries-data/src/test/java/com/baeldung/jcache/EventListenerIntegrationTest.java
Patch:
@@ -17,7 +17,7 @@
 public class EventListenerIntegrationTest {
 
     private static final String CACHE_NAME = "MyCache";
-    private static final String CACHE_PROVIDER_NAME = "com.hazelcast.cache.HazelcastCachingProvider";
+    private static final String CACHE_PROVIDER_NAME = "com.hazelcast.cache.HazelcastMemberCachingProvider";
 
     private Cache<String, String> cache;
     private SimpleCacheEntryListener listener;
@@ -38,7 +38,7 @@ public void tearDown() {
     }
 
     @Test
-    public void whenRunEvent_thenCorrect() throws InterruptedException {
+    public void whenRunEvent_thenCorrect() {
         this.listenerConfiguration = new MutableCacheEntryListenerConfiguration<>(FactoryBuilder.factoryOf(this.listener), null, false, true);
         this.cache.registerCacheEntryListener(this.listenerConfiguration);
 

File: libraries-data/src/test/java/com/baeldung/jcache/JCacheIntegrationTest.java
Patch:
@@ -14,7 +14,7 @@ public class JCacheIntegrationTest {
 
     @Test
     public void instantiateCache() {
-        CachingProvider cachingProvider = Caching.getCachingProvider("com.hazelcast.cache.HazelcastCachingProvider");
+        CachingProvider cachingProvider = Caching.getCachingProvider("com.hazelcast.cache.HazelcastMemberCachingProvider");
         CacheManager cacheManager = cachingProvider.getCacheManager();
         MutableConfiguration<String, String> config = new MutableConfiguration<>();
         Cache<String, String> cache = cacheManager.createCache("simpleCache", config);

File: patterns-modules/design-patterns-cloud/src/test/java/com/baeldung/backoff/jitter/BackoffWithJitterUnitTest.java
Patch:
@@ -14,17 +14,17 @@
 import java.util.concurrent.ExecutorService;
 import java.util.function.Function;
 
-import static com.baeldung.backoff.jitter.BackoffWithJitterTest.RetryProperties.*;
+import static com.baeldung.backoff.jitter.BackoffWithJitterUnitTest.RetryProperties.*;
 import static io.github.resilience4j.retry.IntervalFunction.ofExponentialBackoff;
 import static io.github.resilience4j.retry.IntervalFunction.ofExponentialRandomBackoff;
 import static java.util.Collections.nCopies;
 import static java.util.concurrent.Executors.newFixedThreadPool;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.*;
 
-public class BackoffWithJitterTest {
+public class BackoffWithJitterUnitTest {
 
-    static Logger log = LoggerFactory.getLogger(BackoffWithJitterTest.class);
+    static Logger log = LoggerFactory.getLogger(BackoffWithJitterUnitTest.class);
 
     interface PingPongService {
 

File: web-modules/jakarta-ee/src/test/java/com/baeldung/eclipse/krazo/AppUnitTest.java
Patch:
@@ -7,7 +7,7 @@
 /**
  * Dummy Test
  */
-public class AppTest {
+public class AppUnitTest {
 
     @Test
     public void test() {

File: patterns-modules/design-patterns-creational/src/main/java/com/baeldung/factorygeneric/DateNotifier.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.factoryGeneric;
+package com.baeldung.factorygeneric;
 
 import java.util.Date;
 

File: patterns-modules/design-patterns-creational/src/main/java/com/baeldung/factorygeneric/Main.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.factoryGeneric;
+package com.baeldung.factorygeneric;
 
 import java.util.Date;
 

File: patterns-modules/design-patterns-creational/src/main/java/com/baeldung/factorygeneric/Notifier.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.factoryGeneric;
+package com.baeldung.factorygeneric;
 
 public interface Notifier<T> {
 

File: patterns-modules/design-patterns-creational/src/main/java/com/baeldung/factorygeneric/NotifierFactory.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.factoryGeneric;
+package com.baeldung.factorygeneric;
 
 import java.util.Date;
 

File: patterns-modules/design-patterns-creational/src/main/java/com/baeldung/factorygeneric/Record.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.factoryGeneric;
+package com.baeldung.factorygeneric;
 
 import java.util.Date;
 

File: patterns-modules/design-patterns-creational/src/main/java/com/baeldung/factorygeneric/StringNotifier.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.factoryGeneric;
+package com.baeldung.factorygeneric;
 
 public class StringNotifier implements Notifier<String> {
 

File: patterns-modules/design-patterns-creational/src/test/java/com/baeldung/factorygeneric/FactoryGenericUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.factoryGeneric;
+package com.baeldung.factorygeneric;
 
 import org.junit.jupiter.api.Test;
 import static org.junit.jupiter.api.Assertions.*;

File: persistence-modules/spring-data-gemfire/src/main/java/com/baeldung/spring/data/gemfire/model/Employee.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.data.annotation.Id;
 import org.springframework.data.annotation.PersistenceConstructor;
-import org.springframework.data.gemfire.mapping.Region;
+import org.springframework.data.gemfire.mapping.annotation.Region;
 
 
 @Region("employee")

File: persistence-modules/spring-data-jpa-enterprise/src/test/java/com/baeldung/partialupdate/PartialUpdateIntegrationTest.java
Patch:
@@ -17,7 +17,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = PartialUpdateApplication.class)
-public class PartialUpdateUnitTest {
+public class PartialUpdateIntegrationTest {
 
     @Autowired
     CustomerService service;

File: spring-caching-2/src/main/java/com/baeldung/caching/ttl/service/HotelService.java
Patch:
@@ -27,7 +27,7 @@ public List<Hotel> getAllHotels() {
     }
 
     @CacheEvict(value = "hotels", allEntries = true)
-    @Scheduled(fixedRateString = "43200")
+    @Scheduled(fixedRateString = "${caching.spring.hotelListTTL}")
     public void emptyHotelsCache() {
         logger.info("emptying Hotels cache");
     }

File: spring-caching-2/src/main/java/com/baeldung/caching/ttl/service/HotelService.java
Patch:
@@ -27,7 +27,7 @@ public List<Hotel> getAllHotels() {
     }
 
     @CacheEvict(value = "hotels", allEntries = true)
-    @Scheduled(fixedRateString = "43200")
+    @Scheduled(fixedRateString = "${caching.spring.hotelListTTL}")
     public void emptyHotelsCache() {
         logger.info("emptying Hotels cache");
     }

File: web-modules/ninja/src/test/java/controllers/ApiControllerDocTesterManualTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import ninja.NinjaDocTester;
 
-public class ApiControllerDocTesterTest extends NinjaDocTester {
+public class ApiControllerDocTesterManualTest extends NinjaDocTester {
     
     String URL_INDEX = "/";
     String URL_HELLO = "/hello";

File: web-modules/ninja/src/test/java/controllers/ApiControllerMockManualTest.java
Patch:
@@ -10,7 +10,7 @@
 import services.UserService;
 
 @RunWith(NinjaRunner.class)
-public class ApiControllerMockUnitTest {
+public class ApiControllerMockManualTest {
 
     @Inject private UserService userService;
 

File: vavr-modules/vavr/src/test/java/com/baeldung/vavr/VavrUnitTest.java
Patch:
@@ -323,13 +323,13 @@ public void whenIfWorksAsMatcher_thenCorrect() {
         if (input == 0) {
             output = "zero";
         }
-        if (input == 1) {
+        else if (input == 1) {
             output = "one";
         }
-        if (input == 2) {
+        else if (input == 2) {
             output = "two";
         }
-        if (input == 3) {
+        else if (input == 3) {
             output = "three";
         } else {
             output = "unknown";

File: quarkus-modules/quarkus-vs-springboot/spring-project/src/test/java/com/baeldung/spring_project/SpringContextTest.java
Patch:
@@ -15,7 +15,7 @@
 @TestInstance(value = PER_CLASS)
 @Testcontainers
 @Disabled
-class StartupIT {
+class SpringContextTest {
 
 	@Test
 	void contextLoads() {

File: spring-boot-modules/spring-boot-graphql/src/main/java/com/baeldung/graphql/intro/Author.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.graphql;
+package com.baeldung.graphql.intro;
 
 import lombok.Data;
 

File: spring-boot-modules/spring-boot-graphql/src/main/java/com/baeldung/graphql/intro/AuthorController.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.graphql;
+package com.baeldung.graphql.intro;
 
 import org.springframework.graphql.data.method.annotation.SchemaMapping;
 import org.springframework.stereotype.Controller;

File: spring-boot-modules/spring-boot-graphql/src/main/java/com/baeldung/graphql/intro/AuthorDao.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.graphql;
+package com.baeldung.graphql.intro;
 
 import java.util.List;
 

File: spring-boot-modules/spring-boot-graphql/src/main/java/com/baeldung/graphql/intro/GraphqlConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.graphql;
+package com.baeldung.graphql.intro;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: spring-boot-modules/spring-boot-graphql/src/main/java/com/baeldung/graphql/intro/Post.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.graphql;
+package com.baeldung.graphql.intro;
 
 import lombok.Data;
 

File: spring-boot-modules/spring-boot-graphql/src/main/java/com/baeldung/graphql/intro/PostController.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.graphql;
+package com.baeldung.graphql.intro;
 
 import org.springframework.graphql.data.method.annotation.Argument;
 import org.springframework.graphql.data.method.annotation.MutationMapping;

File: spring-boot-modules/spring-boot-graphql/src/main/java/com/baeldung/graphql/intro/PostDao.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.graphql;
+package com.baeldung.graphql.intro;
 
 import java.util.List;
 import java.util.stream.Collectors;

File: spring-boot-modules/spring-boot-graphql/src/test/java/com/baeldung/graphql/intro/PostControllerIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.graphql;
+package com.baeldung.graphql.intro;
 
 import lombok.SneakyThrows;
 import org.junit.jupiter.api.Test;

File: spring-boot-modules/spring-boot-graphql/src/test/java/com/baeldung/graphql/intro/SpringContextTest.java
Patch:
@@ -1,5 +1,6 @@
-package com.baeldung.graphql;
+package com.baeldung.graphql.intro;
 
+import com.baeldung.graphql.intro.GraphqlApplication;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
 

File: spring-cloud-modules/spring-cloud-openfeign/src/main/java/com/baeldung/cloud/openfeign/defaulterrorhandling/client/ProductClient.java
Patch:
@@ -8,7 +8,7 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 
-@FeignClient(name = "product-client", url = "http://localhost:8081/product/", configuration = FeignConfig.class)
+@FeignClient(name = "product-client", url = "http://localhost:8084/product/", configuration = FeignConfig.class)
 public interface ProductClient {
 
     @RequestMapping(value = "{id}", method = RequestMethod.GET)

File: spring-cloud-modules/spring-cloud-openfeign/src/test/java/com/baeldung/cloud/openfeign/defaulterrorhandling/client/ProductClientUnitTest.java
Patch:
@@ -27,9 +27,10 @@ public class ProductClientUnitTest {
 
     @Before
     public void startWireMockServer() {
-        wireMockServer = new WireMockServer(8081);
-        configureFor("localhost", 8081);
+        wireMockServer = new WireMockServer(8084);
+        configureFor("localhost", 8084);
         wireMockServer.start();
+
     }
 
     @After

File: spring-cloud-modules/spring-cloud-openfeign/src/test/java/com/baeldung/cloud/openfeign/defaulterrorhandling/controller/ProductControllerUnitTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-
 @RunWith(SpringRunner.class)
 @WebMvcTest(ProductController.class)
 @ImportAutoConfiguration({FeignAutoConfiguration.class, TestControllerAdvice.class})
@@ -37,8 +36,8 @@ public class ProductControllerUnitTest {
 
     @Before
     public void startWireMockServer() {
-        wireMockServer = new WireMockServer(8081);
-        configureFor("localhost", 8081);
+        wireMockServer = new WireMockServer(8084);
+        configureFor("localhost", 8084);
         wireMockServer.start();
     }
 

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/kong/StockApp.java
Patch:
@@ -1,9 +1,12 @@
 package com.baeldung.kong;
 
+import org.jobrunr.autoconfigure.JobRunrAutoConfiguration;
 import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
+@EnableAutoConfiguration(exclude = { JobRunrAutoConfiguration.class})
 public class StockApp {
 
     public static void main(String[] args) {

File: spring-boot-modules/spring-boot-testing-2/src/test/java/com/baeldung/xmlapplicationcontext/EmployeeServiceTestContextIntegrationTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.xmlapplicationcontext;
 
-import com.baeldung.xmlapplicationcontext.service.EmployeeService;
+import static org.assertj.core.api.Assertions.assertThat;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -9,7 +10,7 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import com.baeldung.xmlapplicationcontext.service.EmployeeService;
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = XmlBeanApplication.class)

File: persistence-modules/spring-boot-persistence-mongodb-2/src/main/java/com/baeldung/boot/collection/name/SpringBootCollectionNameApplication.java
Patch:
@@ -7,7 +7,7 @@
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
-@SpringBootApplication(exclude = EmbeddedMongoAutoConfiguration.class)
+@SpringBootApplication
 @PropertySource("classpath:boot.collection.name/app.properties")
 @EnableMongoRepositories(basePackages = { "com.baeldung.boot.collection.name" })
 public class SpringBootCollectionNameApplication {

File: persistence-modules/spring-boot-persistence-mongodb-2/src/main/java/com/baeldung/boot/composite/key/SpringBootCompositeKeyApplication.java
Patch:
@@ -5,7 +5,7 @@
 import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;
 import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
-@SpringBootApplication(exclude = EmbeddedMongoAutoConfiguration.class)
+@SpringBootApplication
 @EnableMongoRepositories(basePackages = { "com.baeldung.boot.composite.key" })
 public class SpringBootCompositeKeyApplication {
     public static void main(String... args) {

File: persistence-modules/spring-boot-persistence-mongodb-2/src/main/java/com/baeldung/boot/count/SpringBootCountApplication.java
Patch:
@@ -5,7 +5,7 @@
 import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;
 import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
-@SpringBootApplication(exclude = EmbeddedMongoAutoConfiguration.class)
+@SpringBootApplication
 @EnableMongoRepositories(basePackages = { "com.baeldung.boot.count" })
 public class SpringBootCountApplication {
     public static void main(String... args) {

File: persistence-modules/spring-boot-persistence-mongodb-2/src/main/java/com/baeldung/boot/unique/field/SpringBootUniqueFieldApplication.java
Patch:
@@ -6,7 +6,7 @@
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
-@SpringBootApplication(exclude = EmbeddedMongoAutoConfiguration.class)
+@SpringBootApplication
 @PropertySource("classpath:boot.unique.field/app.properties")
 @EnableMongoRepositories(basePackages = { "com.baeldung.boot.unique.field" })
 public class SpringBootUniqueFieldApplication {

File: persistence-modules/spring-boot-persistence-mongodb-2/src/test/java/com/baeldung/boot/composite/key/CustomerServiceIntegrationTest.java
Patch:
@@ -12,15 +12,17 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.dao.DuplicateKeyException;
 import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import com.baeldung.boot.composite.key.data.Ticket;
 import com.baeldung.boot.composite.key.data.TicketId;
 import com.baeldung.boot.composite.key.service.CustomerService;
 
-@SpringBootTest
+@SpringBootTest(classes = SpringBootCompositeKeyApplication.class)
 @DirtiesContext
 @RunWith(SpringRunner.class)
+@TestPropertySource("/embedded.properties")
 public class CustomerServiceIntegrationTest {
     @Autowired
     private CustomerService service;

File: persistence-modules/spring-boot-persistence-mongodb-2/src/test/java/com/baeldung/boot/unique/field/UniqueFieldIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.dao.DuplicateKeyException;
 import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import com.baeldung.boot.unique.field.dao.AssetRepository;
@@ -20,9 +21,10 @@
 import com.baeldung.boot.unique.field.data.Sale;
 import com.baeldung.boot.unique.field.data.SaleId;
 
-@SpringBootTest
+@SpringBootTest(classes = SpringBootUniqueFieldApplication.class)
 @DirtiesContext
 @RunWith(SpringRunner.class)
+@TestPropertySource("/embedded.properties")
 public class UniqueFieldIntegrationTest {
     @Autowired
     private SaleRepository saleRepo;

File: persistence-modules/spring-boot-persistence-mongodb-2/src/main/java/com/baeldung/boot/collection/name/SpringBootCollectionNameApplication.java
Patch:
@@ -2,11 +2,12 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = EmbeddedMongoAutoConfiguration.class)
 @PropertySource("classpath:boot.collection.name/app.properties")
 @EnableMongoRepositories(basePackages = { "com.baeldung.boot.collection.name" })
 public class SpringBootCollectionNameApplication {

File: persistence-modules/spring-boot-persistence-mongodb-2/src/main/java/com/baeldung/boot/composite/key/SpringBootCompositeKeyApplication.java
Patch:
@@ -2,9 +2,10 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;
 import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = EmbeddedMongoAutoConfiguration.class)
 @EnableMongoRepositories(basePackages = { "com.baeldung.boot.composite.key" })
 public class SpringBootCompositeKeyApplication {
     public static void main(String... args) {

File: persistence-modules/spring-boot-persistence-mongodb-2/src/main/java/com/baeldung/boot/count/SpringBootCountApplication.java
Patch:
@@ -2,9 +2,10 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;
 import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = EmbeddedMongoAutoConfiguration.class)
 @EnableMongoRepositories(basePackages = { "com.baeldung.boot.count" })
 public class SpringBootCountApplication {
     public static void main(String... args) {

File: persistence-modules/spring-boot-persistence-mongodb-2/src/main/java/com/baeldung/boot/unique/field/SpringBootUniqueFieldApplication.java
Patch:
@@ -2,10 +2,11 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = EmbeddedMongoAutoConfiguration.class)
 @PropertySource("classpath:boot.unique.field/app.properties")
 @EnableMongoRepositories(basePackages = { "com.baeldung.boot.unique.field" })
 public class SpringBootUniqueFieldApplication {

File: vavr-modules/vavr/src/test/java/com/baeldung/vavr/VavrUnitTest.java
Patch:
@@ -323,13 +323,13 @@ public void whenIfWorksAsMatcher_thenCorrect() {
         if (input == 0) {
             output = "zero";
         }
-        if (input == 1) {
+        else if (input == 1) {
             output = "one";
         }
-        if (input == 2) {
+        else if (input == 2) {
             output = "two";
         }
-        if (input == 3) {
+        else if (input == 3) {
             output = "three";
         } else {
             output = "unknown";

File: logging-modules/log4j2/src/main/java/com/baeldung/logging/log4j2/consoleandfile/Log4j2ConsoleAndFile.java
Patch:
@@ -7,6 +7,8 @@ public class Log4j2ConsoleAndFile {
 
     private static final Logger logger = LogManager.getLogger(Log4j2ConsoleAndFile.class);
 
+    // To enable the console and file appender, just rename the log4j2 file, under /src/main/resources, to log4j2.properties
+    // Reason: Having the log4j2.properties file overrides the log4j2.xml file, so that other appender classes would not work
     public static void main(String[] args) {
         logger.info("Hello World!");
         logger.debug("Hello World!");

File: core-java-modules/core-java-datetime-string/src/test/java/com/baeldung/simpledateformat/SimpleDateFormatUnitTest.java
Patch:
@@ -41,8 +41,8 @@ public void givenStringDate_whenParsed_thenCheckDateCorrect() throws Exception{
   @Test
   public void givenFranceLocale_whenFormatted_thenCheckFormatCorrect() throws Exception{
     SimpleDateFormat franceDateFormatter = new SimpleDateFormat("EEEEE dd-MMMMMMM-yyyy", Locale.FRANCE);
-    Date myWednesday = new Date(1539341312904L);
-    assertTrue(franceDateFormatter.format(myWednesday).startsWith("vendredi"));
+    Date myFriday = new Date(1539341312904L);
+    assertTrue(franceDateFormatter.format(myFriday).startsWith("vendredi"));
   }
 
   @Test

File: patterns/solid/src/main/java/com/baeldung/s/BadBook.java
Patch:
@@ -10,8 +10,8 @@ public class BadBook {
 
 
   //methods that directly relate to the book properties
-  public String replaceWordInText(String word){
-    return text.replaceAll(word, text);
+  public String replaceWordInText(String word, String replacementWord){
+    return text.replaceAll(word, replacementWord);
   }
 
   public boolean isWordInText(String word){

File: patterns/solid/src/main/java/com/baeldung/s/GoodBook.java
Patch:
@@ -9,8 +9,8 @@ public class GoodBook {
   //constructor, getters and setters
 
   //methods that directly relate to the book properties
-  public String replaceWordInText(String word){
-    return text.replaceAll(word, text);
+  public String replaceWordInText(String word, String replacementWord){
+    return text.replaceAll(word, replacementWord);
   }
 
   public boolean isWordInText(String word){

File: persistence-modules/spring-boot-persistence-mongodb-2/src/main/java/com/baeldung/logging/SpringBootPersistenceApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung;
+package com.baeldung.logging;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: persistence-modules/spring-boot-persistence/src/main/java/com/baeldung/boot/config/H2JpaConfig.java
Patch:
@@ -66,6 +66,7 @@ final Properties additionalProperties() {
         hibernateProperties.setProperty("hibernate.hbm2ddl.auto", env.getProperty("hibernate.hbm2ddl.auto"));
         hibernateProperties.setProperty("hibernate.dialect", env.getProperty("hibernate.dialect"));
         hibernateProperties.setProperty("hibernate.show_sql", env.getProperty("hibernate.show_sql"));
+        hibernateProperties.setProperty("hibernate.globally_quoted_identifiers", env.getProperty("hibernate.globally_quoted_identifiers"));
 
         return hibernateProperties;
     }

File: persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/SpringBootProfileIntegrationTest.java
Patch:
@@ -22,7 +22,7 @@ public class SpringBootProfileIntegrationTest {
     private GenericEntityRepository genericEntityRepository;
 
     @Test
-    public void givenGenericEntityRepository_whenSaveAndRetreiveEntity_thenOK() {
+    public void givenGenericEntityRepository_whenSaveAndRetrieveEntity_thenOK() {
         GenericEntity genericEntity = genericEntityRepository.save(new GenericEntity("test"));
         GenericEntity foundEntity = genericEntityRepository.findById(genericEntity.getId()).orElse(null);
         assertNotNull(foundEntity);

File: persistence-modules/spring-boot-persistence/src/test/java/com/baeldung/config/H2TestProfileJPAConfig.java
Patch:
@@ -62,6 +62,7 @@ final Properties additionalProperties() {
         hibernateProperties.setProperty("hibernate.hbm2ddl.auto", env.getProperty("hibernate.hbm2ddl.auto"));
         hibernateProperties.setProperty("hibernate.dialect", env.getProperty("hibernate.dialect"));
         hibernateProperties.setProperty("hibernate.show_sql", env.getProperty("hibernate.show_sql"));
+        hibernateProperties.setProperty("hibernate.globally_quoted_identifiers", env.getProperty("hibernate.globally_quoted_identifiers"));
 
         return hibernateProperties;
     }

File: persistence-modules/spring-data-jpa-annotations/src/main/java/com/baeldung/embeddable/repositories/CompanyRepository.java
Patch:
@@ -13,6 +13,6 @@ public interface CompanyRepository extends JpaRepository<Company, Integer> {
     @Query("SELECT C FROM Company C WHERE C.contactPerson.firstName = ?1")
     List<Company> findByContactPersonFirstNameWithJPQL(String firstName);
 
-    @Query(value = "SELECT * FROM company WHERE contact_first_name = ?1", nativeQuery = true)
+    @Query(value = "SELECT * FROM \"company\" WHERE \"contact_first_name\" = ?1", nativeQuery = true)
     List<Company> findByContactPersonFirstNameWithNativeQuery(String firstName);
 }

File: persistence-modules/spring-data-jpa-filtering/src/main/java/com/baeldung/config/StudentJpaConfig.java
Patch:
@@ -62,6 +62,7 @@ final Properties additionalProperties() {
         hibernateProperties.setProperty("hibernate.show_sql", env.getProperty("hibernate.show_sql"));
         hibernateProperties.setProperty("hibernate.cache.use_second_level_cache", env.getProperty("hibernate.cache.use_second_level_cache"));
         hibernateProperties.setProperty("hibernate.cache.use_query_cache", env.getProperty("hibernate.cache.use_query_cache"));
+        hibernateProperties.setProperty("hibernate.globally_quoted_identifiers", env.getProperty("hibernate.globally_quoted_identifiers"));
 
         return hibernateProperties;
     }

File: persistence-modules/spring-data-jpa-query-2/src/main/java/com/baeldung/config/PersistenceConfig.java
Patch:
@@ -64,7 +64,7 @@ public PersistenceConfig() {
     public AuditorAware<String> auditorProvider() {
         return new AuditorAwareImpl();
     }
-    
+
     @Bean
     public LocalSessionFactoryBean sessionFactory() {
         final LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
@@ -175,7 +175,7 @@ private final Properties hibernateProperties() {
 
         hibernateProperties.setProperty("hibernate.show_sql", "true");
         // hibernateProperties.setProperty("hibernate.format_sql", "true");
-        // hibernateProperties.setProperty("hibernate.globally_quoted_identifiers", "true");
+        hibernateProperties.setProperty("hibernate.globally_quoted_identifiers", "true");
 
         // Envers properties
         hibernateProperties.setProperty("org.hibernate.envers.audit_table_suffix", env.getProperty("envers.audit_table_suffix"));

File: persistence-modules/spring-data-jpa-query-2/src/test/java/com/baeldung/hibernate/fetching/HibernateFetchingIntegrationTest.java
Patch:
@@ -15,7 +15,7 @@ public class HibernateFetchingIntegrationTest {
 
     // this loads sample data in the database
     @Before
-    public void addFecthingTestData() {
+    public void addFetchingTestData() {
         FetchingAppView fav = new FetchingAppView();
         fav.createTestData();
     }

File: persistence-modules/spring-data-jpa-query/src/main/java/com/baeldung/aggregation/repository/CommentRepository.java
Patch:
@@ -21,7 +21,7 @@ public interface CommentRepository extends JpaRepository<Comment, Integer> {
     @Query("SELECT c.year AS yearComment, COUNT(c.year) AS totalComment FROM Comment AS c GROUP BY c.year ORDER BY c.year DESC")
     List<ICommentCount> countTotalCommentsByYearInterface();
 
-    @Query(value = "SELECT c.year AS yearComment, COUNT(c.*) AS totalComment FROM comment AS c GROUP BY c.year ORDER BY c.year DESC", nativeQuery = true)
+    @Query(value = "SELECT c.\"year\" AS yearComment, COUNT(c.*) AS totalComment FROM \"comment\" AS c GROUP BY c.\"year\" ORDER BY c.\"year\" DESC", nativeQuery = true)
     List<ICommentCount> countTotalCommentsByYearNative();
 
 }

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/sprq/SpqrApp.java
Patch:
@@ -1,9 +1,12 @@
 package com.baeldung.sprq;
 
+import org.jobrunr.autoconfigure.JobRunrAutoConfiguration;
 import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
+@EnableAutoConfiguration(exclude = { JobRunrAutoConfiguration.class})
 public class SpqrApp {
 
     public static void main(String[] args) {

File: spring-boot-modules/spring-boot-libraries-2/src/test/java/com/baeldung/openapi/OpenApiPetsIntegrationTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.springframework.test.web.servlet.MockMvc;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest
+@SpringBootTest(classes = OpenApiApplication.class)
 @AutoConfigureMockMvc
 public class OpenApiPetsIntegrationTest {
 

File: spring-security-modules/spring-security-pkce/pkce-client/src/main/java/com/baeldung/security/pkce/client/config/OAuth2ClientConfiguration.java
Patch:
@@ -21,7 +21,7 @@ public SecurityWebFilterChain  pkceFilterChain(ServerHttpSecurity http, ServerOA
 
     @Bean
     public ServerOAuth2AuthorizationRequestResolver pkceResolver(ReactiveClientRegistrationRepository repo) {
-        var resolver = new DefaultServerOAuth2AuthorizationRequestResolver(repo);
+        DefaultServerOAuth2AuthorizationRequestResolver resolver = new DefaultServerOAuth2AuthorizationRequestResolver(repo);
         resolver.setAuthorizationRequestCustomizer(OAuth2AuthorizationRequestCustomizers.withPkce());
         return resolver;
     }

File: graphql-modules/graphql-error-handling/src/main/java/com/baeldung/graphql/error/handling/exception/GraphQLErrorAdapter.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.graphql.error.handling.exception;
 
-import graphql.ErrorType;
+import graphql.ErrorClassification;
 import graphql.ExceptionWhileDataFetching;
 import graphql.GraphQLError;
 import graphql.language.SourceLocation;
@@ -27,7 +27,7 @@ public List<SourceLocation> getLocations() {
     }
 
     @Override
-    public ErrorType getErrorType() {
+    public ErrorClassification getErrorType() {
         return error.getErrorType();
     }
 

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/jobrunr/JobRunrSpringBootApp.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung;
+package com.baeldung.jobrunr;
 
 import com.baeldung.jobrunr.service.SampleJobService;
 import org.jobrunr.scheduling.JobScheduler;

File: spring-boot-modules/spring-boot-libraries-2/src/main/java/com/baeldung/jobrunr/config/StorageProviderConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.config;
+package com.baeldung.jobrunr.config;
 
 import org.jobrunr.jobs.mappers.JobMapper;
 import org.jobrunr.storage.InMemoryStorageProvider;

File: spring-boot-modules/spring-boot-libraries-2/src/test/java/com/baeldung/annotation/scanner/SampleAnnotationScannerUnitTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.junit.Assert.*;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest
+@SpringBootTest(classes = AnnotationScannerApp.class)
 public class SampleAnnotationScannerUnitTest {
     @Autowired
     private List<SampleAnnotationScanner> scannerList;

File: spring-boot-modules/spring-boot-libraries-2/src/test/java/com/baeldung/jobrunr/JobRunrLiveTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.jobrunr;
 
-import org.awaitility.Awaitility;
 import org.jobrunr.jobs.states.StateName;
 import org.jobrunr.storage.StorageProvider;
 import org.junit.Test;
@@ -10,8 +9,6 @@
 import org.springframework.boot.test.web.client.TestRestTemplate;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.baeldung.JobRunrSpringBootApp;
-
 import java.net.URI;
 import java.util.concurrent.TimeUnit;
 

File: spring-boot-modules/spring-boot-libraries-2/src/test/java/com/baeldung/sprq/GraphqlControllerIntegrationTest.java
Patch:
@@ -16,7 +16,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest
+@SpringBootTest(classes = SpqrApp.class)
 @AutoConfigureMockMvc
 public class GraphqlControllerIntegrationTest {
 

File: spring-boot-rest/src/main/java/com/baeldung/spring/PersistenceConfig.java
Patch:
@@ -77,7 +77,7 @@ final Properties additionalProperties() {
         final Properties hibernateProperties = new Properties();
         hibernateProperties.setProperty("hibernate.hbm2ddl.auto", env.getProperty("hibernate.hbm2ddl.auto"));
         hibernateProperties.setProperty("hibernate.dialect", env.getProperty("hibernate.dialect"));
-        // hibernateProperties.setProperty("hibernate.globally_quoted_identifiers", "true");
+        hibernateProperties.setProperty("hibernate.globally_quoted_identifiers", "true");
         return hibernateProperties;
     }
 

File: spring-boot-rest/src/test/java/com/baeldung/web/error/ErrorHandlingLiveTest.java
Patch:
@@ -59,8 +59,7 @@ public void whenRequestingFaultyEndpointAsHtml_thenReceiveWhitelabelPageResponse
             webClient.getOptions()
                 .setThrowExceptionOnFailingStatusCode(false);
             HtmlPage page = webClient.getPage(EXCEPTION_ENDPOINT);
-            assertThat(page.getBody()
-                .asText()).contains("Whitelabel Error Page");
+            assertThat(page.getBody().asNormalizedText()).contains("Whitelabel Error Page");
         }
     }
 }

File: spring-web-modules/spring-rest-query-language/src/main/java/com/baeldung/spring/PersistenceConfig.java
Patch:
@@ -78,7 +78,7 @@ final Properties additionalProperties() {
         final Properties hibernateProperties = new Properties();
         hibernateProperties.setProperty("hibernate.hbm2ddl.auto", env.getProperty("hibernate.hbm2ddl.auto"));
         hibernateProperties.setProperty("hibernate.dialect", env.getProperty("hibernate.dialect"));
-        // hibernateProperties.setProperty("hibernate.globally_quoted_identifiers", "true");
+        hibernateProperties.setProperty("hibernate.globally_quoted_identifiers", "true");
         return hibernateProperties;
     }
 

File: testing-modules/cucumber/src/test/java/com/baeldung/cucumber/tags/acceptance/commonutil/ScenarioContextUI.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.cucumber.tags.acceptance.commonutil;
 
+import org.openqa.selenium.Platform;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.chrome.ChromeDriver;
 import org.openqa.selenium.remote.DesiredCapabilities;
@@ -34,7 +35,7 @@ private void reset() {
     }
 
     private static WebDriver getRemoteWebDriver(URL url) {
-        return new RemoteWebDriver(url, DesiredCapabilities.chrome());
+        return new RemoteWebDriver(url, new DesiredCapabilities("chrome", "", Platform.ANY));
     }
 
     private static WebDriver getLocalChromeDriver() {

File: spring-jms/src/test/java/com/baeldung/spring/jms/testing/TestContainersActiveMqLiveTest.java
Patch:
@@ -27,11 +27,11 @@
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.utility.DockerImageName;
 
-import com.baeldung.spring.jms.testing.TestContainersActiveMqIntegrationTest.TestConfiguration;
+import com.baeldung.spring.jms.testing.TestContainersActiveMqLiveTest.TestConfiguration;
 
 @RunWith(SpringRunner.class)
 @ContextConfiguration(classes = { TestConfiguration.class, MessageSender.class })
-public class TestContainersActiveMqIntegrationTest {
+public class TestContainersActiveMqLiveTest {
 
     @ClassRule
     public static GenericContainer<?> activeMqContainer = new GenericContainer<>(DockerImageName.parse("rmohr/activemq:5.14.3")).withExposedPorts(61616);

File: maven-modules/maven-generate-war/src/test/java/com/baeldung/SpringContextTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest
-class MavenGenerateWarApplicationTests {
+class SpringContextTest {
 
     @Test
     void contextLoads() {

File: testing-modules/mockito-simple/src/main/java/com/baeldung/app/api/MessageDTO.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.app.api;
 
-public class MessageApi {
+public class MessageDTO {
     private String from;
     private String to;
     private String text;

File: testing-modules/mockito-simple/src/main/java/com/baeldung/app/rest/MessageController.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.app.rest;
 
-import com.baeldung.app.api.MessageApi;
+import com.baeldung.app.api.MessageDTO;
 import com.baeldung.domain.model.Message;
 import com.baeldung.domain.service.MessageService;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -21,7 +21,7 @@ public class MessageController {
     private MessageService messageService;
 
     @PostMapping
-    public Message createMessage (@RequestBody MessageApi messageDTO) {
+    public Message createMessage (@RequestBody MessageDTO messageDTO) {
         Message message = new Message();
         message.setText(messageDTO.getText());
         message.setFrom(messageDTO.getFrom());

File: persistence-modules/spring-jdbc/src/test/java/com/baeldung/spring/jdbc/batch/service/ProductServiceUnitTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.baeldung.spring.jdbc.batch.model.Product;
 import com.baeldung.spring.jdbc.batch.repo.ProductRepository;
+
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;

File: persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/batch/SpringJdbcBatchPerformanceApplication.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.spring.jdbc.batch;
 
 import com.baeldung.spring.jdbc.batch.service.ProductService;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.CommandLineRunner;

File: persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/batch/config/AppConfig.java
Patch:
@@ -3,6 +3,7 @@
 import com.baeldung.spring.jdbc.batch.repo.BatchProductRepository;
 import com.baeldung.spring.jdbc.batch.repo.SimpleProductRepository;
 import com.baeldung.spring.jdbc.batch.service.ProductService;
+
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.PropertySource;

File: persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/batch/repo/BatchProductRepository.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.spring.jdbc.batch.repo;
 
 import com.baeldung.spring.jdbc.batch.model.Product;
+
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.stereotype.Repository;
 import org.springframework.transaction.annotation.Transactional;

File: persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/batch/repo/SimpleProductRepository.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.spring.jdbc.batch.repo;
 
 import com.baeldung.spring.jdbc.batch.model.Product;
+
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.stereotype.Repository;
 import org.springframework.transaction.annotation.Transactional;

File: persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/batch/service/ProductService.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.baeldung.spring.jdbc.batch.model.Product;
 import com.baeldung.spring.jdbc.batch.repo.ProductRepository;
+
 import org.springframework.transaction.annotation.Transactional;
 
 import java.math.BigDecimal;

File: spring-boot-modules/spring-boot-mvc-3/src/test/java/com/baeldung/etag/EtagIntegrationTest.java
Patch:
@@ -9,7 +9,6 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.web.server.LocalServerPort;
@@ -26,7 +25,6 @@
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
 @ComponentScan(basePackageClasses = WebConfig.class)
-@EnableAutoConfiguration
 public class EtagIntegrationTest {
 
 	@LocalServerPort

File: spring-boot-modules/spring-boot-mvc-3/src/test/java/com/baeldung/etag/EtagIntegrationTest.java
Patch:
@@ -9,7 +9,6 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.web.server.LocalServerPort;
@@ -26,7 +25,6 @@
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
 @ComponentScan(basePackageClasses = WebConfig.class)
-@EnableAutoConfiguration
 public class EtagIntegrationTest {
 
 	@LocalServerPort

File: spring-boot-modules/spring-boot-testing-2/src/test/java/com/baeldung/keycloaktestcontainers/KeycloakTestContainers.java
Patch:
@@ -26,11 +26,11 @@
 import dasniko.testcontainers.keycloak.KeycloakContainer;
 import io.restassured.RestAssured;
 
-@ContextConfiguration(initializers = { IntegrationTest.Initializer.class })
+@ContextConfiguration(initializers = { KeycloakTestContainers.Initializer.class })
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
-public abstract class IntegrationTest {
+public abstract class KeycloakTestContainers {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(IntegrationTest.class.getName());
+    private static final Logger LOGGER = LoggerFactory.getLogger(KeycloakTestContainers.class.getName());
 
     @LocalServerPort
     private int port;

File: spring-cloud-modules/spring-cloud-openfeign-2/src/main/java/com/baeldung/cloud/openfeign/fileupload/config/RetreiveMessageErrorDecoder.java
Patch:
@@ -12,7 +12,6 @@
 
 public class RetreiveMessageErrorDecoder implements ErrorDecoder {
     private final ErrorDecoder errorDecoder = new Default();
-
     @Override
     public Exception decode(String methodKey, Response response) {
         ExceptionMessage message = null;

File: persistence-modules/spring-jdbc-batch/src/main/java/com/baeldung/spring/jdbc/batch/SpringJdbcBatchPerformanceApplication.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.spring.jdbc.batch;
 
 import com.baeldung.spring.jdbc.batch.service.ProductService;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.CommandLineRunner;

File: spring-cloud-modules/spring-cloud-openfeign/src/main/java/com/baeldung/cloud/openfeign/config/CustomErrorDecoder.java
Patch:
@@ -13,7 +13,7 @@ public Exception decode(String methodKey, Response response) {
             case 400:
                 return new BadRequestException();
             case 404:
-                return new NotFoundException();
+                return new NotFoundException("Not found !!!");
             default:
                 return new Exception("Generic error");
         }

File: persistence-modules/spring-boot-persistence-mongodb-2/src/main/java/com/baeldung/boot/count/data/Car.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.boot.count.data;
 
 import org.springframework.data.mongodb.core.mapping.Document;
+
 @Document
 public class Car {
     private String name;

File: core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/abaproblem/AccountManualTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public class AccountUnitTest {
+public class AccountManualTest {
 
     private Account account;
 

File: core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/abaproblem/AccountManualTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public class AccountUnitTest {
+public class AccountManualTest {
 
     private Account account;
 

File: core-java-modules/core-java-numbers-5/src/main/java/com/baeldung/evenodd/EvenOdd.java
Patch:
@@ -7,7 +7,7 @@ static boolean isEven(int x) {
     }
 
     static boolean isOdd(int x) {
-        return x % 2 == 1;
+        return x % 2 != 0;
     }
 
     static boolean isOrEven(int x) {

File: core-java-modules/core-java-numbers-5/src/main/java/com/baeldung/evenodd/EvenOdd.java
Patch:
@@ -7,7 +7,7 @@ static boolean isEven(int x) {
     }
 
     static boolean isOdd(int x) {
-        return x % 2 == 1;
+        return x % 2 != 0;
     }
 
     static boolean isOrEven(int x) {

File: core-java-modules/core-java-string-operations-3/src/main/java/com/baeldung/stringfilenamevalidaiton/StringFilenameValidationUtils.java
Patch:
@@ -7,7 +7,7 @@
 
 public class StringFilenameValidationUtils {
 
-    public static final Character[] INVALID_WINDOWS_SPECIFIC_CHARS = {'"', '*', ':', '<', '>', '?', '\\', '|', 0x7F};
+    public static final Character[] INVALID_WINDOWS_SPECIFIC_CHARS = {'"', '*', '<', '>', '?', '|'};
     public static final Character[] INVALID_UNIX_SPECIFIC_CHARS = {'\000'};
 
     public static final String REGEX_PATTERN = "^[A-za-z0-9.]{1,255}$";

File: core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/stringfilenamevalidaiton/StringFilenameValidationUnitTest.java
Patch:
@@ -87,7 +87,7 @@ public void givenFilenameStringWithInvalidWindowsCharAndIsWindows_whenValidateUs
 					.extracting(Throwable::getMessage, InstanceOfAssertFactories.STRING)
 					.containsAnyOf("The system cannot find the path specifie",
 							"The filename, directory name, or volume label syntax is incorrect");
-			if (!filename.contains("/") && !filename.contains("\\")) {
+			if (!filename.contains("\\")) {
 				assertThatThrownBy(() -> validateStringFilenameUsingNIO2(filename))
 						.isInstanceOf(InvalidPathException.class).hasMessageContaining("Illegal char");
 			}

File: core-java-modules/core-java-string-operations-3/src/main/java/com/baeldung/stringfilenamevalidaiton/StringFilenameValidationUtils.java
Patch:
@@ -7,7 +7,7 @@
 
 public class StringFilenameValidationUtils {
 
-    public static final Character[] INVALID_WINDOWS_SPECIFIC_CHARS = {'"', '*', ':', '<', '>', '?', '\\', '|', '/'};
+    public static final Character[] INVALID_WINDOWS_SPECIFIC_CHARS = {'"', '*', ':', '<', '>', '?', '\\', '|'};
     public static final Character[] INVALID_UNIX_SPECIFIC_CHARS = {'\000'};
 
     public static final String REGEX_PATTERN = "^[A-za-z0-9.]{1,255}$";

File: core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/stringfilenamevalidaiton/StringFilenameValidationUnitTest.java
Patch:
@@ -70,7 +70,7 @@ public void givenEmptyString_whenValidate_thenIOAndCustomFailsNIO2Succeed(String
 
     @ParameterizedTest
     @EnabledOnOs({OS.LINUX, OS.MAC})
-    @MethodSource("filenamesWithInvalidUnixChars")
+    @MethodSource("filenamesWithInvalidWindowsChars")
     public void givenFilenameStringWithInvalidWindowsCharAndIsUnix_whenValidateUsingIO_thenReturnTrue(String filename) throws IOException {
         assertThat(validateStringFilenameUsingIO(filename)).isTrue();
         assertThat(validateStringFilenameUsingNIO2(filename)).isTrue();

File: core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/stringfilenamevalidaiton/StringFilenameValidationUnitTest.java
Patch:
@@ -70,7 +70,7 @@ public void givenEmptyString_whenValidate_thenIOAndCustomFailsNIO2Succeed(String
 
     @ParameterizedTest
     @EnabledOnOs({OS.LINUX, OS.MAC})
-    @MethodSource("filenamesWithInvalidWindowsChars")
+    @MethodSource("filenamesWithInvalidUnixChars")
     public void givenFilenameStringWithInvalidWindowsCharAndIsUnix_whenValidateUsingIO_thenReturnTrue(String filename) throws IOException {
         assertThat(validateStringFilenameUsingIO(filename)).isTrue();
         assertThat(validateStringFilenameUsingNIO2(filename)).isTrue();

File: core-java-modules/core-java-string-operations-3/src/main/java/com/baeldung/stringfilenamevalidaiton/StringFilenameValidationUtils.java
Patch:
@@ -7,7 +7,7 @@
 
 public class StringFilenameValidationUtils {
 
-    public static final Character[] INVALID_WINDOWS_SPECIFIC_CHARS = {'"', '*', ':', '<', '>', '?', '\\', '|', 0x7F};
+    public static final Character[] INVALID_WINDOWS_SPECIFIC_CHARS = {'"', '*', ':', '<', '>', '?', '\\', '|', '/'};
     public static final Character[] INVALID_UNIX_SPECIFIC_CHARS = {'\000'};
 
     public static final String REGEX_PATTERN = "^[A-za-z0-9.]{1,255}$";

File: core-java-modules/core-java-11-2/src/test/java/com/baeldung/httpclient/ssl/HttpClientSSLBypassUnitTest.java
Patch:
@@ -21,7 +21,7 @@ public void whenHttpsRequest_thenCorrect() throws IOException, InterruptedExcept
           .build();
 
         HttpRequest request = HttpRequest.newBuilder()
-          .uri(URI.create("https://www.testingmcafeesites.com/"))
+          .uri(URI.create("https://wrong.host.badssl.com/"))
           .build();
 
         HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

File: javax-servlets/src/main/java/com/baeldung/servlets/MainServlet.java
Patch:
@@ -12,8 +12,7 @@ public class MainServlet extends HttpServlet {
 
    
 	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
-		
-		response.sendRedirect("main.jsp");
+		request.getRequestDispatcher("/WEB-INF/jsp/main.jsp").forward(request, response);
 	}
 
 	

File: javax-servlets/src/main/java/com/baeldung/servlets/MyHttpServlet.java
Patch:
@@ -2,6 +2,8 @@
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.Arrays;
+import java.util.Collections;
 
 import javax.servlet.annotation.WebServlet;
 import javax.servlet.http.HttpServlet;
@@ -20,7 +22,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response) thro
             writer.println(request.getLocalAddr());
         } else if ("getLocalName".equals(request.getParameter("function"))) {
             writer.println(request.getLocalName());
-        } else if ("getLocalAPort".equals(request.getParameter("function"))) {
+        } else if ("getLocalPort".equals(request.getParameter("function"))) {
             writer.println(request.getLocalPort());
         } else if ("getMethod".equals(request.getParameter("function"))) {
             writer.println(request.getMethod());

File: javax-servlets/src/main/java/com/baeldung/servlets/UpdateServlet.java
Patch:
@@ -25,9 +25,7 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response) t
             request.setAttribute("sessionData", session);
         }
 
-        RequestDispatcher requestDispather = request.getRequestDispatcher("update.jsp");
-
-        requestDispather.forward(request, response);
+        request.getRequestDispatcher("/WEB-INF/jsp/update.jsp").forward(request, response);
     }
 
 }

File: javax-servlets/src/main/java/com/baeldung/servlets/UserLoginServlet.java
Patch:
@@ -21,9 +21,7 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response) t
 
         request.setAttribute("id", session.getAttribute("userId"));
 
-        RequestDispatcher requestDispather = request.getRequestDispatcher("userlogin.jsp");
-
-        requestDispather.forward(request, response);
+        request.getRequestDispatcher("/WEB-INF/jsp/userlogin.jsp").forward(request, response);
 
     }
 

File: javax-servlets/src/main/java/com/baeldung/servlets/UserServlet.java
Patch:
@@ -8,21 +8,21 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-@WebServlet(name = "UserServlet", urlPatterns = {"/userServlet"}, initParams={
+@WebServlet(name = "UserServlet", urlPatterns = "/userServlet", initParams={
     @WebInitParam(name="name", value="Not provided"), 
     @WebInitParam(name="email", value="Not provided")})
 public class UserServlet extends HttpServlet {
     
     @Override
     protected void doGet(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
+        processRequest(request, response);
+        forwardRequest(request, response, "/WEB-INF/jsp/result.jsp");
     }
     
     @Override
     protected void doPost(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
-        processRequest(request, response);
-        forwardRequest(request, response, "/WEB-INF/jsp/result.jsp");
     }
     
     protected void processRequest(HttpServletRequest request, HttpServletResponse response)

File: spring-boot-modules/spring-boot-springdoc/src/main/java/com/baeldung/jwt/SecurityConfiguration.java
Patch:
@@ -52,8 +52,8 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
         //@formatter:off
         return http
                 .authorizeHttpRequests(authorizeRequests -> authorizeRequests
-                        .antMatchers("/api/auth/**", "/swagger-ui.html", "/swagger-ui/**", "/v3/api-docs/**", "/webjars/**",
-                                "/swagger-ui/index.html")
+                        .antMatchers("/api/auth/**", "/swagger-ui-custom.html" ,"/swagger-ui.html", "/swagger-ui/**", "/v3/api-docs/**", "/webjars/**",
+                                "/swagger-ui/index.html","/api-docs/**")
                         .permitAll()
                         .anyRequest()
                         .authenticated())

File: spring-boot-modules/spring-boot-springdoc/src/main/java/com/baeldung/jwt/SecurityTokenApplication.java
Patch:
@@ -11,7 +11,7 @@ public class SecurityTokenApplication {
      * @param args
      */
     public static void main(String[] args) {
-        SpringApplication.run(SecurityTokenApplication.class, args);
+       SpringApplication.run(SecurityTokenApplication.class);
     }
-
 }
+

File: algorithms-modules/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithm.java
Patch:
@@ -14,7 +14,7 @@ public int maxSubArraySum(int[] arr) {
         int end = 0;
 
         int maxSoFar = arr[0], maxEndingHere = arr[0];
-        for (int i = 0; i < size; i++) {
+        for (int i = 1; i < size; i++) {
 
             if (arr[i] > maxEndingHere + arr[i]) {
                 start = i;

File: algorithms-modules/algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/maximumsubarray/KadaneAlgorithm.java
Patch:
@@ -14,7 +14,7 @@ public int maxSubArraySum(int[] arr) {
         int end = 0;
 
         int maxSoFar = arr[0], maxEndingHere = arr[0];
-        for (int i = 0; i < size; i++) {
+        for (int i = 1; i < size; i++) {
 
             if (arr[i] > maxEndingHere + arr[i]) {
                 start = i;

File: core-java-modules/core-java-nio-2/src/main/java/com/baeldung/lock/FileLocks.java
Patch:
@@ -79,9 +79,7 @@ static FileLock getExclusiveLockFromFileChannelOpen(long from, long size) throws
             while (buffer.hasRemaining()) {
                 channel.write(buffer, channel.size());
             }
-            LOG.debug("This was written to the file");
-            Files.lines(path)
-                .forEach(LOG::debug);
+            
             return lock;
         }
     }

File: core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/encoding/CharacterEncodingExamplesUnitTest.java
Patch:
@@ -78,7 +78,8 @@ public void givenUTF8String_whenDecodeByUS_ASCII_thenIgnoreMalformedInputSequenc
         Assertions.assertEquals("The faade pattern is a software design pattern.", CharacterEncodingExamples.decodeText("The façade pattern is a software design pattern.", StandardCharsets.US_ASCII, CodingErrorAction.IGNORE));
     }
 
-    @Test
+    //@Test
+    // run this manually as it's dependent on platform encoding, which has to be UTF-8
     public void givenUTF8String_whenDecodeByUS_ASCII_thenReplaceMalformedInputSequence() throws IOException {
         Assertions.assertEquals(
           "The fa��ade pattern is a software design pattern.",

File: core-java-modules/core-java/src/test/java/com/baeldung/illegalcharacter/IllegalCharacterUnitTest.java
Patch:
@@ -8,6 +8,7 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
+import java.nio.charset.StandardCharsets;
 import java.util.Objects;
 
 import org.apache.commons.io.ByteOrderMark;
@@ -43,7 +44,7 @@ public void whenInputFileHasBOM_thenUseInputStreamWithReplace() throws IOExcepti
         String line;
         String actual = "";
 
-        try (BufferedReader br = new BufferedReader(new InputStreamReader(Objects.requireNonNull(ioStream)))) {
+        try (BufferedReader br = new BufferedReader(new InputStreamReader(Objects.requireNonNull(ioStream), StandardCharsets.UTF_8))) {
             while ((line = br.readLine()) != null) {
                 actual += line.replace("\uFEFF", "");
             }

File: core-java-modules/core-java-nio-2/src/main/java/com/baeldung/lock/FileLocks.java
Patch:
@@ -79,9 +79,7 @@ static FileLock getExclusiveLockFromFileChannelOpen(long from, long size) throws
             while (buffer.hasRemaining()) {
                 channel.write(buffer, channel.size());
             }
-            LOG.debug("This was written to the file");
-            Files.lines(path)
-                .forEach(LOG::debug);
+            
             return lock;
         }
     }

File: core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/encoding/CharacterEncodingExamplesUnitTest.java
Patch:
@@ -78,7 +78,8 @@ public void givenUTF8String_whenDecodeByUS_ASCII_thenIgnoreMalformedInputSequenc
         Assertions.assertEquals("The faade pattern is a software design pattern.", CharacterEncodingExamples.decodeText("The façade pattern is a software design pattern.", StandardCharsets.US_ASCII, CodingErrorAction.IGNORE));
     }
 
-    @Test
+    //@Test
+    // run this manually as it's dependent on platform encoding, which has to be UTF-8
     public void givenUTF8String_whenDecodeByUS_ASCII_thenReplaceMalformedInputSequence() throws IOException {
         Assertions.assertEquals(
           "The fa��ade pattern is a software design pattern.",

File: core-java-modules/core-java/src/test/java/com/baeldung/illegalcharacter/IllegalCharacterUnitTest.java
Patch:
@@ -8,6 +8,7 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
+import java.nio.charset.StandardCharsets;
 import java.util.Objects;
 
 import org.apache.commons.io.ByteOrderMark;
@@ -43,7 +44,7 @@ public void whenInputFileHasBOM_thenUseInputStreamWithReplace() throws IOExcepti
         String line;
         String actual = "";
 
-        try (BufferedReader br = new BufferedReader(new InputStreamReader(Objects.requireNonNull(ioStream)))) {
+        try (BufferedReader br = new BufferedReader(new InputStreamReader(Objects.requireNonNull(ioStream), StandardCharsets.UTF_8))) {
             while ((line = br.readLine()) != null) {
                 actual += line.replace("\uFEFF", "");
             }

File: javax-servlets/src/main/java/com/baeldung/servlets/MainServlet.java
Patch:
@@ -12,8 +12,7 @@ public class MainServlet extends HttpServlet {
 
    
 	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
-		
-		response.sendRedirect("main.jsp");
+		request.getRequestDispatcher("/WEB-INF/jsp/main.jsp").forward(request, response);
 	}
 
 	

File: javax-servlets/src/main/java/com/baeldung/servlets/MyHttpServlet.java
Patch:
@@ -2,6 +2,8 @@
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.Arrays;
+import java.util.Collections;
 
 import javax.servlet.annotation.WebServlet;
 import javax.servlet.http.HttpServlet;
@@ -20,7 +22,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response) thro
             writer.println(request.getLocalAddr());
         } else if ("getLocalName".equals(request.getParameter("function"))) {
             writer.println(request.getLocalName());
-        } else if ("getLocalAPort".equals(request.getParameter("function"))) {
+        } else if ("getLocalPort".equals(request.getParameter("function"))) {
             writer.println(request.getLocalPort());
         } else if ("getMethod".equals(request.getParameter("function"))) {
             writer.println(request.getMethod());

File: javax-servlets/src/main/java/com/baeldung/servlets/UpdateServlet.java
Patch:
@@ -25,9 +25,7 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response) t
             request.setAttribute("sessionData", session);
         }
 
-        RequestDispatcher requestDispather = request.getRequestDispatcher("update.jsp");
-
-        requestDispather.forward(request, response);
+        request.getRequestDispatcher("/WEB-INF/jsp/update.jsp").forward(request, response);
     }
 
 }

File: javax-servlets/src/main/java/com/baeldung/servlets/UserLoginServlet.java
Patch:
@@ -21,9 +21,7 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response) t
 
         request.setAttribute("id", session.getAttribute("userId"));
 
-        RequestDispatcher requestDispather = request.getRequestDispatcher("userlogin.jsp");
-
-        requestDispather.forward(request, response);
+        request.getRequestDispatcher("/WEB-INF/jsp/userlogin.jsp").forward(request, response);
 
     }
 

File: javax-servlets/src/main/java/com/baeldung/servlets/UserServlet.java
Patch:
@@ -8,21 +8,21 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-@WebServlet(name = "UserServlet", urlPatterns = {"/userServlet"}, initParams={
+@WebServlet(name = "UserServlet", urlPatterns = "/userServlet", initParams={
     @WebInitParam(name="name", value="Not provided"), 
     @WebInitParam(name="email", value="Not provided")})
 public class UserServlet extends HttpServlet {
     
     @Override
     protected void doGet(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
+        processRequest(request, response);
+        forwardRequest(request, response, "/WEB-INF/jsp/result.jsp");
     }
     
     @Override
     protected void doPost(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
-        processRequest(request, response);
-        forwardRequest(request, response, "/WEB-INF/jsp/result.jsp");
     }
     
     protected void processRequest(HttpServletRequest request, HttpServletResponse response)

File: spring-state-machine/src/main/java/com/baeldung/spring/statemachine/config/SimpleStateMachineConfiguration.java
Patch:
@@ -38,7 +38,7 @@ public void configure(StateMachineStateConfigurer<String, String> states) throws
           .stateEntry("S3", entryAction())
           .stateExit("S3", exitAction())
           .state("S4", executeAction(), errorAction())
-          .stateDo("S5", executeAction());
+          .state("S5", executeAction(), errorAction());
 
     }
 

File: spring-state-machine/src/main/java/com/baeldung/spring/statemachine/config/SimpleStateMachineConfiguration.java
Patch:
@@ -38,7 +38,7 @@ public void configure(StateMachineStateConfigurer<String, String> states) throws
           .stateEntry("S3", entryAction())
           .stateExit("S3", exitAction())
           .state("S4", executeAction(), errorAction())
-          .stateDo("S5", executeAction(), errorAction());
+          .state("S5", executeAction(), errorAction());
 
     }
 

File: spring-state-machine/src/main/java/com/baeldung/spring/statemachine/config/SimpleStateMachineConfiguration.java
Patch:
@@ -38,7 +38,7 @@ public void configure(StateMachineStateConfigurer<String, String> states) throws
           .stateEntry("S3", entryAction())
           .stateExit("S3", exitAction())
           .state("S4", executeAction(), errorAction())
-          .stateDo("S5", executeAction());
+          .stateDo("S5", executeAction(), errorAction());
 
     }
 

File: persistence-modules/hibernate-annotations/src/main/java/com/baeldung/hibernate/customtypes/OfficeEmployee.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.hibernate.customtypes;
 
-import com.baeldung.hibernate.pojo.Phone;
 import org.hibernate.annotations.Columns;
 import org.hibernate.annotations.Parameter;
 import org.hibernate.annotations.Type;

File: persistence-modules/hibernate-annotations/src/main/java/com/baeldung/hibernate/wherejointable/User.java
Patch:
@@ -12,7 +12,7 @@
 
 import org.hibernate.annotations.WhereJoinTable;
 
-@Entity
+@Entity(name = "users")
 public class User {
 
     @Id

File: core-java-modules/core-java-lambdas/src/test/java/com/baeldung/java8/lambda/serialization/LambdaSerializationUnitTest.java
Patch:
@@ -36,7 +36,7 @@ public void givenSerializableFunction_whenNoCapturing_thenSerializationSuccess()
 
     @Test
     public void givenSerializableConsumer_whenNoCapturing_thenSerializationSuccess() throws IOException, ClassNotFoundException {
-        SerializableConsumer<String> obj = System.out::println;
+        SerializableConsumer<String> obj = message -> System.out.println(message);
         writeAndReadObject(obj, SerializableConsumer.class);
     }
 

File: persistence-modules/spring-data-mongodb/src/main/java/com/baeldung/projection/model/Inventory.java
Patch:
@@ -3,13 +3,14 @@
 import java.util.List;
 import java.util.Objects;
 
+import org.springframework.data.annotation.Id;
 import org.springframework.data.mongodb.core.mapping.Document;
 import org.springframework.data.mongodb.core.mapping.MongoId;
 
 @Document(collection = "inventory")
 public class Inventory {
 
-    @MongoId
+    @Id
     private String id;
     private String item;
     private String status;

File: testing-modules/junit-5/src/test/java/com/baeldung/junit5/order/DefaultOrderUnitTest.java
Patch:
@@ -12,19 +12,19 @@ public class DefaultOrderUnitTest {
 
     @Test
     @DisplayName("Test A")
-    public void myATest() {
+    void myATest() {
         output.append("A");
     }
 
     @Test
     @DisplayName("Test B")
-    public void myBTest() {
+    void myBTest() {
         output.append("B");
     }
 
     @Test
     @DisplayName("Test C")
-    public void myCTest() {
+    void myCTest() {
         output.append("C");
     }
 

File: testing-modules/junit-5/src/test/java/com/baeldung/junit5/order/RandomOrderUnitTest.java
Patch:
@@ -13,17 +13,17 @@ public class RandomOrderUnitTest {
     private static StringBuilder output = new StringBuilder("");
 
     @Test
-    public void myATest() {
+    void myATest() {
         output.append("A");
     }
 
     @Test
-    public void myBTest() {
+    void myBTest() {
         output.append("B");
     }
 
     @Test
-    public void myCTest() {
+    void myCTest() {
         output.append("C");
     }
 

File: core-java-modules/core-java-strings/src/main/java/com/baeldung/stringperformance/StringPerformance.java
Patch:
@@ -125,6 +125,8 @@ public List benchmarkStringIndexOf() {
             stringSplit.add(longString.substring(pos, end));
             pos = end + 1;
         }
+        //Add last token of string
+        stringSplit.add(longString.substring(pos));
         return stringSplit;
     }
 

File: core-java-modules/core-java-strings/src/main/java/com/baeldung/stringperformance/StringPerformance.java
Patch:
@@ -125,6 +125,8 @@ public List benchmarkStringIndexOf() {
             stringSplit.add(longString.substring(pos, end));
             pos = end + 1;
         }
+        //Add last token of string
+        stringSplit.add(longString.substring(pos));
         return stringSplit;
     }
 

File: httpclient-2/src/test/java/com/baeldung/httpclient/expandurl/HttpClientExpandUrlLiveTest.java
Patch:
@@ -33,8 +33,8 @@ public final void before() {
 
     @Test
     public final void givenShortenedOnce_whenUrlIsExpanded_thenCorrectResult() throws IOException {
-        final String expectedResult = "http://www.baeldung.com/rest-versioning";
-        final String actualResult = expandSingleLevel("http://bit.ly/13jEoS1");
+        final String expectedResult = "https://www.baeldung.com/rest-versioning";
+        final String actualResult = expandSingleLevel("http://bit.ly/3LScTri");
         assertThat(actualResult, equalTo(expectedResult));
     }
 

File: reactor-core/src/test/java/com/baeldung/reactor/core/CombiningPublishersIntegrationTest.java
Patch:
@@ -18,8 +18,8 @@ public class CombiningPublishersIntegrationTest {
     @Test
     public void givenFluxes_whenMergeDelayErrorIsInvoked_thenMergeDelayError() {
         Flux<Integer> fluxOfIntegers = Flux.mergeDelayError(1, 
-                evenNumbers.delayElements(Duration.ofMillis(2000L)), 
-                oddNumbers.delayElements(Duration.ofMillis(1000L)));
+                evenNumbers.delayElements(Duration.ofMillis(500L)), 
+                oddNumbers.delayElements(Duration.ofMillis(300L)));
         
         StepVerifier.create(fluxOfIntegers)
         .expectNext(1)

File: persistence-modules/hibernate-annotations/src/main/java/com/baeldung/hibernate/oneToMany/model/ItemOIO.java
Patch:
@@ -10,7 +10,7 @@
 
 @Entity
 @Table(name = "ITEMSOIO")
-public class ItemsOIO {
+public class ItemOIO {
 
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
@@ -21,10 +21,10 @@ public class ItemsOIO {
     private CartOIO cart;
 
     // Hibernate requires no-args constructor
-    public ItemsOIO() {
+    public ItemOIO() {
     }
 
-    public ItemsOIO(CartOIO c) {
+    public ItemOIO(CartOIO c) {
         this.cart = c;
     }
 

File: persistence-modules/spring-boot-persistence-mongodb/src/test/java/com/baeldung/logging/LoggingUnitTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.springframework.data.mongodb.core.aggregation.AggregationResults;
 import org.springframework.data.mongodb.core.aggregation.GroupOperation;
 import org.springframework.test.context.TestPropertySource;
+import org.springframework.util.SocketUtils;
 
 import com.baeldung.logging.model.Book;
 import com.mongodb.client.MongoClients;
@@ -50,7 +51,7 @@ void clean() {
     @BeforeEach
     void setup() throws Exception {
         String ip = "localhost";
-        int port = 27017;
+        int port = SocketUtils.findAvailableTcpPort();
 
         ImmutableMongodConfig mongodConfig = MongodConfig.builder()
           .version(Version.Main.PRODUCTION)

File: spring-cloud/spring-cloud-netflix-feign/src/main/java/com/baeldung/cloud/netflix/feign/client/JSONPlaceHolderClient.java
Patch:
@@ -11,15 +11,15 @@
 import java.util.List;
 
 @FeignClient(value = "jplaceholder",
-        url = "https://jsonplaceholder.typicode.com/",
+        url = "${external.api.url}",
         configuration = ClientConfiguration.class,
         fallback = JSONPlaceHolderFallback.class)
 public interface JSONPlaceHolderClient {
 
     @RequestMapping(method = RequestMethod.GET, value = "/posts")
     List<Post> getPosts();
 
-
     @RequestMapping(method = RequestMethod.GET, value = "/posts/{postId}", produces = "application/json")
     Post getPostById(@PathVariable("postId") Long postId);
+
 }

File: spring-cloud/spring-cloud-netflix-feign/src/main/java/com/baeldung/cloud/netflix/feign/client/JSONPlaceHolderClient.java
Patch:
@@ -11,15 +11,15 @@
 import java.util.List;
 
 @FeignClient(value = "jplaceholder",
-        url = "https://jsonplaceholder.typicode.com/",
+        url = "${external.api.url}",
         configuration = ClientConfiguration.class,
         fallback = JSONPlaceHolderFallback.class)
 public interface JSONPlaceHolderClient {
 
     @RequestMapping(method = RequestMethod.GET, value = "/posts")
     List<Post> getPosts();
 
-
     @RequestMapping(method = RequestMethod.GET, value = "/posts/{postId}", produces = "application/json")
     Post getPostById(@PathVariable("postId") Long postId);
+
 }

File: testing-modules/rest-assured/src/test/java/com/baeldung/restassured/RestAssuredAdvancedLiveTest.java
Patch:
@@ -83,7 +83,7 @@ public void whenUseCustomHeader_thenOK(){
     
     @Test
     public void whenUseMultipleHeaders_thenOK(){
-        given().header("User-Agent", "MyAppName","Accept-Charset","utf-8").when().get("/users/eugenp").then().statusCode(200);
+        given().headers("User-Agent", "MyAppName","Accept-Charset","utf-8").when().get("/users/eugenp").then().statusCode(200);
     }    
     
     //======= cookie

File: spring-reactive/src/test/java/com/baeldung/reactive/debugging/consumer/ConsumerFooServiceLiveTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.reactive.debugging.consumer;
 
-import com.baeldung.reactive.debugging.consumer.service.FooService;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.springframework.test.web.reactive.server.WebTestClient;
@@ -13,8 +12,6 @@
  */
 public class ConsumerFooServiceLiveTest {
 
-    FooService service = new FooService();
-
     private static final String BASE_URL = "http://localhost:8082";
     private static final String DEBUG_HOOK_ON = BASE_URL + "/debug-hook-on";
     private static final String DEBUG_HOOK_OFF = BASE_URL + "/debug-hook-off";

File: testing-modules/rest-assured/src/test/java/com/baeldung/restassured/RestAssuredAdvancedLiveTest.java
Patch:
@@ -83,7 +83,7 @@ public void whenUseCustomHeader_thenOK(){
     
     @Test
     public void whenUseMultipleHeaders_thenOK(){
-        given().header("User-Agent", "MyAppName","Accept-Charset","utf-8").when().get("/users/eugenp").then().statusCode(200);
+        given().headers("User-Agent", "MyAppName","Accept-Charset","utf-8").when().get("/users/eugenp").then().statusCode(200);
     }    
     
     //======= cookie

File: spring-reactive/src/test/java/com/baeldung/reactive/debugging/consumer/ConsumerFooServiceLiveTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.reactive.debugging.consumer;
 
-import com.baeldung.reactive.debugging.consumer.service.FooService;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.springframework.test.web.reactive.server.WebTestClient;
@@ -13,8 +12,6 @@
  */
 public class ConsumerFooServiceLiveTest {
 
-    FooService service = new FooService();
-
     private static final String BASE_URL = "http://localhost:8082";
     private static final String DEBUG_HOOK_ON = BASE_URL + "/debug-hook-on";
     private static final String DEBUG_HOOK_OFF = BASE_URL + "/debug-hook-off";

File: spring-web-modules/spring-resttemplate/src/test/java/com/baeldung/pact/PactConsumerDrivenContractUnitTest.java
Patch:
@@ -22,7 +22,7 @@
 import au.com.dius.pact.model.RequestResponsePact;
 
 @ExtendWith(PactConsumerTestExt.class)
-@PactTestFor(providerName = "test_provider", hostInterface="localhost", port = "8080")
+@PactTestFor(providerName = "test_provider", hostInterface="localhost")
 public class PactConsumerDrivenContractUnitTest {
 
     @Pact(provider="test_provider", consumer = "test_consumer")

File: spring-web-modules/spring-resttemplate/src/test/java/com/baeldung/pact/PactProviderLiveTest.java
Patch:
@@ -17,7 +17,7 @@
 import au.com.dius.pact.provider.junit5.PactVerificationInvocationContextProvider;
 
 @Provider("test_provider")
-@PactFolder("pacts")
+@PactFolder("target/pacts")
 public class PactProviderLiveTest {
 	
     private static ConfigurableWebApplicationContext application;

File: spring-web-modules/spring-resttemplate/src/main/java/com/baeldung/resttemplate/configuration/FooController.java
Patch:
@@ -9,6 +9,7 @@
 import com.baeldung.resttemplate.web.dto.Foo;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -114,7 +115,7 @@ public long deleteFoo(@PathVariable final long id) {
         return id;
     }
 
-    @RequestMapping(method = RequestMethod.POST, value = "/foos/form")
+    @RequestMapping(method = RequestMethod.POST, value = "/foos/form", produces = MediaType.TEXT_PLAIN_VALUE)
     @ResponseStatus(HttpStatus.CREATED)
     @ResponseBody
     public String submitFoo(@RequestParam("id") String id) {

File: spring-web-modules/spring-resttemplate/src/main/java/com/baeldung/resttemplate/configuration/FooController.java
Patch:
@@ -9,6 +9,7 @@
 import com.baeldung.resttemplate.web.dto.Foo;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -114,7 +115,7 @@ public long deleteFoo(@PathVariable final long id) {
         return id;
     }
 
-    @RequestMapping(method = RequestMethod.POST, value = "/foos/form")
+    @RequestMapping(method = RequestMethod.POST, value = "/foos/form", produces = MediaType.TEXT_PLAIN_VALUE)
     @ResponseStatus(HttpStatus.CREATED)
     @ResponseBody
     public String submitFoo(@RequestParam("id") String id) {

File: spring-native/src/main/java/com/baeldung/springnativeintro/SpringNativeApp.java
Patch:
@@ -3,7 +3,7 @@
 public class SpringNativeApp {
     
     public static void main(String[] args) {
-        System.out.println("Hello, World! This is a Baledung Spring Native Application");
+        System.out.println("Hello, World! This is a Baeldung Spring Native Application");
     }
 
 }

File: spring-native/src/main/java/com/baeldung/springnativeintro/SpringNativeApp.java
Patch:
@@ -3,7 +3,7 @@
 public class SpringNativeApp {
     
     public static void main(String[] args) {
-        System.out.println("Hello, World! This is a Baledung Spring Native Application");
+        System.out.println("Hello, World! This is a Baeldung Spring Native Application");
     }
 
 }

File: persistence-modules/spring-boot-persistence-mongodb/src/main/java/com/baeldung/mongodb/dbref/DbRefApplication.java
Patch:
@@ -2,8 +2,10 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
 @SpringBootApplication
+@EnableMongoRepositories(basePackages = { "com.baeldung" })
 public class DbRefApplication {
 
     public static void main(String... args) {

File: persistence-modules/spring-boot-persistence-mongodb/src/main/java/com/baeldung/mongodb/dbref/DbRefApplication.java
Patch:
@@ -2,8 +2,10 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
 @SpringBootApplication
+@EnableMongoRepositories(basePackages = { "com.baeldung" })
 public class DbRefApplication {
 
     public static void main(String... args) {

File: core-java-modules/core-java-8-datetime-2/src/test/java/com/baeldung/random/RandomDatesUnitTest.java
Patch:
@@ -22,6 +22,6 @@ void givenARange_WhenGenDate_ShouldBeInRange() {
         LocalDate end = LocalDate.now();
 
         LocalDate random = RandomDates.between(start, end);
-        assertThat(random).isAfter(start).isBefore(end);
+        assertThat(random).isAfterOrEqualTo(start).isBefore(end);
     }
 }

File: docker/docker-caching/multi-module-caching/core/src/main/java/com/baeldung/maven_caching/CoreClass.java
Patch:
@@ -4,11 +4,11 @@
 
 public class CoreClass {
 
-    public String method(){
+    public String method() {
         return "Hello from core module!!";
     }
 
-    public String dependencyMethod(){
+    public String dependencyMethod() {
         return Files.simplifyPath("/home/app/test");
     }
 }

File: docker/docker-caching/single-module-caching/src/main/java/com/baeldung/maven_caching/MavenCachingMain.java
Patch:
@@ -5,7 +5,7 @@
 public class MavenCachingMain {
 
     public static void main(String[] args) {
-		System.out.println("Hello from maven_caching app!!!");
+        System.out.println("Hello from maven_caching app!!!");
         System.out.println(Files.simplifyPath("/home/app/test"));
     }
 }

File: apache-poi/src/test/java/com/baeldung/poi/excel/cellstyle/CellBorderHandlerUnitTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.junit.Assert.assertEquals;
 
 public class CellBorderHandlerUnitTest {
-    private static final String FILE_NAME = "cellstyle/CellStyleHandlerTest.xlsx";
+    private static final String FILE_NAME = "cellstyle/CellStyleBorderHandlerTest.xlsx";
     private static final int SHEET_INDEX = 0;
 
     private static CellBordersHandler cellBordersHandler;

File: persistence-modules/spring-data-jdbc/src/main/java/com/baeldung/springdatajdbcintro/entity/Person.java
Patch:
@@ -1,7 +1,9 @@
 package com.baeldung.springdatajdbcintro.entity;
 
 import org.springframework.data.annotation.Id;
+import org.springframework.data.relational.core.mapping.Table;
 
+@Table
 public class Person {
 
     @Id

File: persistence-modules/spring-data-jdbc/src/main/java/com/baeldung/springdatajdbcintro/repository/PersonRepository.java
Patch:
@@ -3,6 +3,7 @@
 import com.baeldung.springdatajdbcintro.entity.Person;
 import org.springframework.data.jdbc.repository.query.Modifying;
 import org.springframework.data.jdbc.repository.query.Query;
+import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.repository.CrudRepository;
 import org.springframework.data.repository.query.Param;
 import org.springframework.stereotype.Repository;

File: spring-security-modules/spring-security-web-login/src/main/java/com/baeldung/security/CustomAuthenticationFailureHandler.java
Patch:
@@ -13,7 +13,7 @@
 public class CustomAuthenticationFailureHandler implements AuthenticationFailureHandler {
 
     @Override
-    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException {
+    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException {
         httpServletResponse.setStatus(HttpStatus.UNAUTHORIZED.value());
 
         String jsonPayload = "{\"message\" : \"%s\", \"timestamp\" : \"%s\" }";

File: spring-security-modules/spring-security-web-login/src/main/java/com/baeldung/security/CustomAuthenticationFailureHandler.java
Patch:
@@ -13,7 +13,7 @@
 public class CustomAuthenticationFailureHandler implements AuthenticationFailureHandler {
 
     @Override
-    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException {
+    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException {
         httpServletResponse.setStatus(HttpStatus.UNAUTHORIZED.value());
 
         String jsonPayload = "{\"message\" : \"%s\", \"timestamp\" : \"%s\" }";

File: javaxval/src/main/java/com/baeldung/javaxval/container/validation/Customer.java
Patch:
@@ -20,7 +20,6 @@ public class Customer {
     @PositiveOrZero
     private OptionalInt numberOfOrders;
 
-    @NotBlank
     private Profile profile;
 
     public String getName() {

File: feign/src/test/java/com/baeldung/feign/retry/Custom5xxErrorDecoderUnitTest.java
Patch:
@@ -44,7 +44,7 @@ public void given4xxResponse_whenDecode_thenReturnFeignException() {
     private Response responseStub(int status) {
         return Response.builder()
                 .request(Request.create(
-                        Request.HttpMethod.GET, "url", new HashMap<String, Collection<String>>(), new byte[0], Charset.defaultCharset(), new RequestTemplate()))
+                  Request.HttpMethod.GET, "url", new HashMap<String, Collection<String>>(), new byte[0], Charset.defaultCharset(), new RequestTemplate()))
                 .status(status)
                 .build();
     }

File: java-spi/exchange-rate-impl/src/main/java/com/baeldung/rate/impl/YahooQuoteManagerImpl.java
Patch:
@@ -24,7 +24,7 @@ public List<Quote> getQuotes(String baseCurrency, LocalDate date) {
 
         StringBuilder sb = new StringBuilder();
         Currency.getAvailableCurrencies().forEach(currency -> {
-            if (!currency.equals(currency.getCurrencyCode())) {
+            if (!baseCurrency.equals(currency.getCurrencyCode())) {
                 sb.append(baseCurrency).append(currency.getCurrencyCode()).append("=X").append(",");
             }
         });

File: java-spi/exchange-rate-impl/src/main/java/com/baeldung/rate/impl/YahooQuoteManagerImpl.java
Patch:
@@ -24,7 +24,7 @@ public List<Quote> getQuotes(String baseCurrency, LocalDate date) {
 
         StringBuilder sb = new StringBuilder();
         Currency.getAvailableCurrencies().forEach(currency -> {
-            if (!currency.equals(currency.getCurrencyCode())) {
+            if (!baseCurrency.equals(currency.getCurrencyCode())) {
                 sb.append(baseCurrency).append(currency.getCurrencyCode()).append("=X").append(",");
             }
         });

File: spring-cloud/spring-cloud-dapr/gateway/src/main/java/com/baeldung/gateway/GatewayApp.java
Patch:
@@ -1,4 +1,4 @@
-package org.example.gateway;
+package com.baeldung.gateway;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-cloud/spring-cloud-dapr/greeting/src/main/java/com/baeldung/hello/GreetingApp.java
Patch:
@@ -1,4 +1,4 @@
-package org.example.hello;
+package com.baeldung.hello;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-cloud/spring-cloud-dapr/greeting/src/main/java/com/baeldung/hello/GreetingController.java
Patch:
@@ -1,4 +1,4 @@
-package org.example.hello;
+package com.baeldung.hello;
 
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;

File: spring-reactive/src/main/java/com/baeldung/reactive/debugging/server/ServerDebuggingApplication.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
 import org.springframework.security.web.server.SecurityWebFilterChain;
@@ -10,7 +11,7 @@
 import java.util.Collections;
 
 @EnableWebFlux
-@SpringBootApplication
+@SpringBootApplication(exclude = MongoReactiveAutoConfiguration.class)
 public class ServerDebuggingApplication {
     
     public static void main(String[] args) {

File: spring-reactive/src/main/java/com/baeldung/reactive/errorhandling/ErrorHandlingApplication.java
Patch:
@@ -2,11 +2,12 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
 import org.springframework.security.web.server.SecurityWebFilterChain;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = MongoReactiveAutoConfiguration.class)
 public class ErrorHandlingApplication {
 
     public static void main(String[] args) {

File: spring-reactive/src/main/java/com/baeldung/reactive/webclientrequests/SpringWebClientRequestsApp.java
Patch:
@@ -2,8 +2,9 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = MongoReactiveAutoConfiguration.class)
 public class SpringWebClientRequestsApp {
 
     public static void main(String[] args) {

File: spring-reactive/src/main/java/com/baeldung/reactive/webflux/EmployeeRepository.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.reactive.webflux;
 
-import com.baeldung.reactive.webflux.Employee;
 import org.springframework.stereotype.Repository;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;

File: spring-reactive/src/main/java/com/baeldung/reactive/webflux/annotation/EmployeeSpringApplication.java
Patch:
@@ -2,8 +2,9 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = MongoReactiveAutoConfiguration.class)
 public class EmployeeSpringApplication {
 
     public static void main(String[] args) {

File: spring-reactive/src/main/java/com/baeldung/reactive/webflux/functional/EmployeeSpringFunctionalApplication.java
Patch:
@@ -2,8 +2,9 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = MongoReactiveAutoConfiguration.class)
 public class EmployeeSpringFunctionalApplication {
 
     public static void main(String[] args) {

File: spring-reactive/src/test/java/com/baeldung/reactive/webclient/WebControllerIntegrationTest.java
Patch:
@@ -6,9 +6,11 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_CLASS)
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = WebClientApplication.class)
 public class WebControllerIntegrationTest {

File: spring-reactive/src/main/java/com/baeldung/reactive/debugging/server/ServerDebuggingApplication.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
 import org.springframework.security.web.server.SecurityWebFilterChain;
@@ -10,7 +11,7 @@
 import java.util.Collections;
 
 @EnableWebFlux
-@SpringBootApplication
+@SpringBootApplication(exclude = MongoReactiveAutoConfiguration.class)
 public class ServerDebuggingApplication {
     
     public static void main(String[] args) {

File: spring-reactive/src/main/java/com/baeldung/reactive/errorhandling/ErrorHandlingApplication.java
Patch:
@@ -2,11 +2,12 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
 import org.springframework.security.web.server.SecurityWebFilterChain;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = MongoReactiveAutoConfiguration.class)
 public class ErrorHandlingApplication {
 
     public static void main(String[] args) {

File: spring-reactive/src/main/java/com/baeldung/reactive/webclientrequests/SpringWebClientRequestsApp.java
Patch:
@@ -2,8 +2,9 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = MongoReactiveAutoConfiguration.class)
 public class SpringWebClientRequestsApp {
 
     public static void main(String[] args) {

File: spring-reactive/src/main/java/com/baeldung/reactive/webflux/EmployeeRepository.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.reactive.webflux;
 
-import com.baeldung.reactive.webflux.Employee;
 import org.springframework.stereotype.Repository;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;

File: spring-reactive/src/main/java/com/baeldung/reactive/webflux/annotation/EmployeeSpringApplication.java
Patch:
@@ -2,8 +2,9 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = MongoReactiveAutoConfiguration.class)
 public class EmployeeSpringApplication {
 
     public static void main(String[] args) {

File: spring-reactive/src/main/java/com/baeldung/reactive/webflux/functional/EmployeeSpringFunctionalApplication.java
Patch:
@@ -2,8 +2,9 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = MongoReactiveAutoConfiguration.class)
 public class EmployeeSpringFunctionalApplication {
 
     public static void main(String[] args) {

File: spring-reactive/src/test/java/com/baeldung/reactive/webclient/WebControllerIntegrationTest.java
Patch:
@@ -6,9 +6,11 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_CLASS)
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = WebClientApplication.class)
 public class WebControllerIntegrationTest {

File: spring-web-modules/spring-rest-http-2/src/main/java/com/baeldung/swaggerui/disable/config/SwaggerConfig.java
Patch:
@@ -12,9 +12,9 @@
 import springfox.documentation.spring.web.plugins.Docket;
 import springfox.documentation.swagger2.annotations.EnableSwagger2;
 
-@Profile("!prod")
+@Profile("!prod && swagger")
+//@Profile("!prod")
 // @Profile("swagger")
-// @Profile("!prod && swagger")
 // @ConditionalOnExpression(value = "${useSwagger:false}")
 @Configuration
 @EnableSwagger2

File: spring-web-modules/spring-rest-http-2/src/test/java/com/baeldung/longpolling/BakeryControllerIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.longpolling.integration;
+package com.baeldung.longpolling;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: spring-web-modules/spring-rest-http-2/src/test/java/com/baeldung/requesttimeout/RequestTimeoutIntegrationTest.java
Patch:
@@ -9,7 +9,7 @@
 
 @SpringBootTest
 @RunWith(SpringRunner.class)
-public class RequestTimeoutTests {
+public class RequestTimeoutIntegrationTest {
 
     private static final WebClient WEB_CLIENT = WebClient.builder().baseUrl("http://localhost:8080").build();
 

File: spring-web-modules/spring-rest-http-2/src/main/java/com/baeldung/swaggerui/disable/config/SwaggerConfig.java
Patch:
@@ -12,9 +12,9 @@
 import springfox.documentation.spring.web.plugins.Docket;
 import springfox.documentation.swagger2.annotations.EnableSwagger2;
 
-@Profile("!prod")
+@Profile("!prod && swagger")
+//@Profile("!prod")
 // @Profile("swagger")
-// @Profile("!prod && swagger")
 // @ConditionalOnExpression(value = "${useSwagger:false}")
 @Configuration
 @EnableSwagger2

File: spring-web-modules/spring-rest-http-2/src/test/java/com/baeldung/longpolling/BakeryControllerIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.longpolling.integration;
+package com.baeldung.longpolling;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: spring-web-modules/spring-rest-http-2/src/test/java/com/baeldung/requesttimeout/RequestTimeoutIntegrationTest.java
Patch:
@@ -9,7 +9,7 @@
 
 @SpringBootTest
 @RunWith(SpringRunner.class)
-public class RequestTimeoutTests {
+public class RequestTimeoutIntegrationTest {
 
     private static final WebClient WEB_CLIENT = WebClient.builder().baseUrl("http://localhost:8080").build();
 

File: libraries-io/src/main/java/com/baeldung/java/io/zip4j/ZipSingleFile.java
Patch:
@@ -21,7 +21,7 @@ public static void main(String[] args) throws IOException {
         if (!fileToAdd.exists()) {
             fileToAdd.createNewFile();
         }
-        zipFile.addFile(fileToAdd);
+        zipFile.addFile(fileToAdd, zipParameters);
         zipFile.close();
     }
 }

File: spring-boot-modules/spring-boot-basic-customization/src/main/java/com/baeldung/bootcustomfilters/FilterConfig.java
Patch:
@@ -15,6 +15,7 @@ public FilterRegistrationBean<RequestResponseLoggingFilter> loggingFilter() {
         registrationBean.setFilter(new RequestResponseLoggingFilter());
 
         registrationBean.addUrlPatterns("/users/*");
+        registrationBean.setOrder(2);
 
         return registrationBean;
 

File: spring-boot-modules/spring-boot-basic-customization/src/main/java/com/baeldung/bootcustomfilters/FilterConfig.java
Patch:
@@ -15,6 +15,7 @@ public FilterRegistrationBean<RequestResponseLoggingFilter> loggingFilter() {
         registrationBean.setFilter(new RequestResponseLoggingFilter());
 
         registrationBean.addUrlPatterns("/users/*");
+        registrationBean.setOrder(2);
 
         return registrationBean;
 

File: apache-poi/src/main/java/com/baeldung/poi/excel/multilinetext/MultilineText.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.apache.poi.ss.usermodel.Cell;
 import org.apache.poi.ss.usermodel.CellStyle;
-import org.apache.poi.ss.usermodel.Row;
 
 public class MultilineText {
     public void formatMultilineText(Cell cell, int cellNumber) {

File: spring-cloud/spring-cloud-ribbon-client/src/test/java/com/baeldung/spring/cloud/ribbon/client/ServerLocationAppIntegrationTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.spring.cloud.ribbon.client;
 
-import static org.assertj.core.api.BDDAssertions.then;
 import static org.junit.Assert.assertEquals;
 
 import org.junit.After;
@@ -13,7 +12,6 @@
 import org.springframework.boot.test.web.client.TestRestTemplate;
 import org.springframework.boot.web.server.LocalServerPort;
 import org.springframework.context.ConfigurableApplicationContext;
-import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.context.junit4.SpringRunner;
 
@@ -43,7 +41,7 @@ public void closeApps() {
     private TestRestTemplate testRestTemplate;
 
     @Test
-    public void loadBalancingServersTest() throws InterruptedException {
+    public void loadBalancingServersTest() {
         ResponseEntity<String> response = this.testRestTemplate.getForEntity("http://localhost:" + this.port + "/server-location", String.class);
         assertEquals(response.getBody(), "Australia");
     }

File: spring-cloud/spring-cloud-ribbon-client/src/test/java/com/baeldung/spring/cloud/ribbon/client/ServerLocationAppIntegrationTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.baeldung.spring.cloud.ribbon.client;
 
-import static org.assertj.core.api.BDDAssertions.then;
 import static org.junit.Assert.assertEquals;
 
 import org.junit.After;
@@ -13,7 +12,6 @@
 import org.springframework.boot.test.web.client.TestRestTemplate;
 import org.springframework.boot.web.server.LocalServerPort;
 import org.springframework.context.ConfigurableApplicationContext;
-import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.context.junit4.SpringRunner;
 
@@ -43,7 +41,7 @@ public void closeApps() {
     private TestRestTemplate testRestTemplate;
 
     @Test
-    public void loadBalancingServersTest() throws InterruptedException {
+    public void loadBalancingServersTest() {
         ResponseEntity<String> response = this.testRestTemplate.getForEntity("http://localhost:" + this.port + "/server-location", String.class);
         assertEquals(response.getBody(), "Australia");
     }

File: micronaut/src/main/java/com/baeldung/micronaut/vs/springboot/CompareApplication.java
Patch:
@@ -4,6 +4,6 @@
 
 public class CompareApplication {
     public static void main(String[] args) {
-    	Micronaut.run(CompareApplication.class);
+        Micronaut.run(CompareApplication.class);
     }
 }

File: spring-boot-modules/spring-boot-mvc-3/src/main/java/com/baeldung/micronaut/vs/springboot/CompareApplication.java
Patch:
@@ -7,7 +7,7 @@
 @EnableAutoConfiguration
 @ComponentScan("com.baeldung.micronaut.vs.springboot")
 public class CompareApplication {
-	public static void main(final String[] args) {
+    public static void main(final String[] args) {
         SpringApplication.run(CompareApplication.class, args);
     }
 }

File: spring-boot-modules/spring-boot-mvc-3/src/main/java/com/baeldung/micronaut/vs/springboot/controller/ArithmeticController.java
Patch:
@@ -42,7 +42,8 @@ public String getMemoryStatus() {
     	MemoryMXBean memoryBean = ManagementFactory.getMemoryMXBean();
     	String memoryStats = "";
     	
-    	String init = String.format("Initial: %.2f GB \n", 
+        String init = String.format(
+            "Initial: %.2f GB \n", 
     	    (double)memoryBean.getHeapMemoryUsage().getInit() /1073741824);
     	String usedHeap = String.format("Used: %.2f GB \n", 
             (double)memoryBean.getHeapMemoryUsage().getUsed() /1073741824);

File: spring-security-modules/spring-security-web-thymeleaf/src/test/java/com/baeldung/springsecuritythymeleaf/ViewControllerIntegrationTest.java
Patch:
@@ -9,11 +9,13 @@
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
+import org.springframework.context.annotation.Import;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 
 @RunWith(SpringRunner.class)
 @WebMvcTest
+@Import(PasswordEncoderConfiguration.class)
 public class ViewControllerIntegrationTest {
 
 	@Autowired

File: algorithms-genetic/src/main/java/com/baeldung/algorithms/ga/annealing/Travel.java
Patch:
@@ -18,15 +18,16 @@ public Travel(int numberOfCities) {
     }
 
     public void generateInitialTravel() {
-        if (travel.isEmpty())
+        if (travel.isEmpty()) {
             new Travel(10);
+        }
         Collections.shuffle(travel);
     }
 
     public void swapCities() {
         int a = generateRandomIndex();
         int b = generateRandomIndex();
-        previousTravel = travel;
+        previousTravel = new ArrayList<>(travel);
         City x = travel.get(a);
         City y = travel.get(b);
         travel.set(a, y);

File: algorithms-genetic/src/main/java/com/baeldung/algorithms/ga/annealing/Travel.java
Patch:
@@ -18,15 +18,16 @@ public Travel(int numberOfCities) {
     }
 
     public void generateInitialTravel() {
-        if (travel.isEmpty())
+        if (travel.isEmpty()) {
             new Travel(10);
+        }
         Collections.shuffle(travel);
     }
 
     public void swapCities() {
         int a = generateRandomIndex();
         int b = generateRandomIndex();
-        previousTravel = travel;
+        previousTravel = new ArrayList<>(travel);
         City x = travel.get(a);
         City y = travel.get(b);
         travel.set(a, y);

File: core-java-modules/core-java-11-2/src/main/java/com/baeldung/soap/ws/client/generated/Currency.java
Patch:
@@ -1,15 +1,14 @@
 
 package com.baeldung.soap.ws.client.generated;
 
-import javax.xml.bind.annotation.XmlEnum;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlEnum;
+import jakarta.xml.bind.annotation.XmlType;
 
 
 /**
  * <p>Java class for currency.
  * 
  * <p>The following schema fragment specifies the expected content contained within this class.
- * <p>
  * <pre>
  * &lt;simpleType name="currency"&gt;
  *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;

File: core-java-modules/core-java-11-2/src/main/java/com/baeldung/soap/ws/client/generated/ObjectFactory.java
Patch:
@@ -1,7 +1,7 @@
 
 package com.baeldung.soap.ws.client.generated;
 
-import javax.xml.bind.annotation.XmlRegistry;
+import jakarta.xml.bind.annotation.XmlRegistry;
 
 
 /**

File: core-java-modules/core-java-11-2/src/main/java/com/baeldung/soap/ws/client/generated/package-info.java
Patch:
@@ -1,2 +1,2 @@
-@javax.xml.bind.annotation.XmlSchema(namespace = "http://server.ws.soap.baeldung.com/")
+@jakarta.xml.bind.annotation.XmlSchema(namespace = "http://server.ws.soap.baeldung.com/")
 package com.baeldung.soap.ws.client.generated;

File: core-java-modules/core-java-11-2/src/test/java/com/baeldung/version/VersionManualTest.java
Patch:
@@ -5,7 +5,8 @@
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
-public class VersionUnitTest {
+// manual test as the runtime JDK version can be different depending on where the test is run
+public class VersionManualTest {
 
     @Test
     public void givenJava_whenUsingRuntime_thenGetVersion() {

File: core-java-modules/core-java-9-jigsaw/src/test/java/com/baeldung/java9/modules/ModuleAPIUnitTest.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.Ignore;
 
 public class ModuleAPIUnitTest {
 
@@ -110,6 +111,7 @@ public void givenModules_whenAccessingModuleDescriptorRequires_thenRequiresAreRe
     }
 
     @Test
+    @Ignore // fixing in http://team.baeldung.com/browse/JAVA-8679
     public void givenModules_whenAccessingModuleDescriptorProvides_thenProvidesAreReturned() {
         Set<Provides> javaBaseProvides = javaBaseModule.getDescriptor().provides();
         Set<Provides> javaSqlProvides = javaSqlModule.getDescriptor().provides();

File: core-java-modules/core-java-networking-3/src/test/java/com/baeldung/socket/FindFreePortManualTest.java
Patch:
@@ -14,7 +14,8 @@
 import static org.assertj.core.api.Assertions.*;
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class FindFreePortUnitTest {
+// fixing in JAVA-8748
+public class FindFreePortManualTest {
 
     private static int FREE_PORT_NUMBER;
     private static int[] FREE_PORT_RANGE;

File: core-java-modules/core-java-string-algorithms-3/src/test/java/com/baeldung/isuppercase/StringFirstCharacterUppercaseUnitTest.java
Patch:
@@ -18,6 +18,7 @@ public void givenString_whenCheckingWithCharacterIsUpperCase_thenStringCapitaliz
     public void givenString_whenCheckingWithRegex_thenStringCapitalized() {
         String example = "Katie";
         String regEx = "[A-Z]\\w*";
+
         Assertions.assertTrue(example.matches(regEx));
     }
 

File: persistence-modules/spring-data-jpa-query-2/src/test/java/com/baeldung/spring/config/PersistenceTestConfig.java
Patch:
@@ -166,7 +166,7 @@ private final Properties hibernateProperties() {
         hibernateProperties.setProperty("hibernate.hbm2ddl.auto", env.getProperty("hibernate.hbm2ddl.auto"));
         hibernateProperties.setProperty("hibernate.dialect", env.getProperty("hibernate.dialect"));
 
-        hibernateProperties.setProperty("hibernate.show_sql", "true");
+        hibernateProperties.setProperty("hibernate.show_sql", "false");
         // hibernateProperties.setProperty("hibernate.format_sql", "true");
         // hibernateProperties.setProperty("hibernate.globally_quoted_identifiers", "true");
 

File: persistence-modules/spring-data-jpa-query-2/src/test/java/com/baeldung/spring/data/jpa/query/UserRepositoryIntegrationTest.java
Patch:
@@ -19,7 +19,7 @@
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 @RunWith(SpringRunner.class)
-@DataJpaTest(properties = "spring.sql.init.data-locations=classpath:insert_users.sql")
+@DataJpaTest(properties = "spring.sql.init.data-locations=classpath:insert_users.sql", showSql = false)
 public class UserRepositoryIntegrationTest {
 
     @Autowired

File: persistence-modules/spring-data-jpa-query-2/src/test/java/com/baeldung/spring/data/jpa/query/datetime/ArticleRepositoryIntegrationTest.java
Patch:
@@ -17,7 +17,7 @@
 import static org.junit.Assert.assertTrue;
 
 @RunWith(SpringRunner.class)
-@DataJpaTest(properties="spring.sql.init.data-locations=classpath:import_entities.sql")
+@DataJpaTest(properties="spring.sql.init.data-locations=classpath:import_entities.sql", showSql = false)
 public class ArticleRepositoryIntegrationTest {
 
     @Autowired

File: persistence-modules/spring-data-jpa-query/src/test/java/com/baeldung/aggregation/SpringDataAggregateIntegrationTest.java
Patch:
@@ -16,8 +16,7 @@
 import static org.junit.Assert.assertThat;
 
 @RunWith(SpringRunner.class)
-@DataJpaTest
-
+@DataJpaTest(showSql = false)
 @Sql(scripts = "/test-aggregation-data.sql")
 public class SpringDataAggregateIntegrationTest {
 

File: persistence-modules/spring-data-jpa-query/src/test/java/com/baeldung/boot/passenger/PassengerRepositoryIntegrationTest.java
Patch:
@@ -26,8 +26,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-
-@DataJpaTest
+@DataJpaTest(showSql = false)
 @RunWith(SpringRunner.class)
 public class PassengerRepositoryIntegrationTest {
 

File: persistence-modules/spring-data-jpa-query/src/test/java/com/baeldung/entitygraph/EntityGraphIntegrationTest.java
Patch:
@@ -14,7 +14,7 @@
 import com.baeldung.entitygraph.repository.CharacteristicsRepository;
 import com.baeldung.entitygraph.repository.ItemRepository;
 
-@DataJpaTest
+@DataJpaTest(showSql = false)
 @RunWith(SpringRunner.class)
 @Sql(scripts = "/entitygraph-data.sql")
 public class EntityGraphIntegrationTest {

File: persistence-modules/spring-data-jpa-query/src/test/java/com/baeldung/exists/CarRepositoryIntegrationTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.data.domain.Example;
 import org.springframework.data.domain.ExampleMatcher;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import java.util.Arrays;

File: persistence-modules/spring-data-jpa-query/src/test/java/com/baeldung/joins/JpaJoinsIntegrationTest.java
Patch:
@@ -13,10 +13,11 @@
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
 @RunWith(SpringRunner.class)
-@DataJpaTest
+@DataJpaTest(showSql = false)
 @ActiveProfiles("joins")
 public class JpaJoinsIntegrationTest {
 

File: persistence-modules/spring-data-jpa-repo/src/test/java/com/baeldung/boot/daos/JpaRepositoriesIntegrationTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.baeldung.boot.domain.Store;
 
 @RunWith(SpringRunner.class)
-@DataJpaTest(properties="spring.sql.init.data-locations=classpath:import_entities.sql")
+@DataJpaTest(properties="spring.sql.init.data-locations=classpath:import_entities.sql", showSql = false)
 public class JpaRepositoriesIntegrationTest {
     @Autowired
     private LocationRepository locationRepository;

File: persistence-modules/spring-data-jpa-repo/src/test/java/com/baeldung/repository/PassengerRepositoryIntegrationTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.baeldung.entity.Passenger;
 
-@DataJpaTest
+@DataJpaTest(showSql = false)
 @RunWith(SpringRunner.class)
 public class PassengerRepositoryIntegrationTest {
 

File: persistence-modules/spring-hibernate-5/src/main/java/com/baeldung/hibernate/dynamicupdate/DynamicUpdateConfig.java
Patch:
@@ -74,7 +74,7 @@ Properties additionalProperties() {
         Properties properties = new Properties();
         properties.setProperty("hibernate.hbm2ddl.auto", Preconditions.checkNotNull(env.getProperty("hibernate.hbm2ddl.auto")));
         properties.setProperty("hibernate.dialect", Preconditions.checkNotNull(env.getProperty("hibernate.dialect")));
-        properties.setProperty("hibernate.show_sql", "true");
+        properties.setProperty("hibernate.show_sql", "false");
         return properties;
     }
 }
\ No newline at end of file

File: persistence-modules/spring-hibernate-5/src/main/java/com/baeldung/manytomany/spring/PersistenceConfig.java
Patch:
@@ -63,7 +63,7 @@ private final Properties hibernateProperties() {
         final Properties hibernateProperties = new Properties();
         hibernateProperties.setProperty("hibernate.hbm2ddl.auto", env.getProperty("hibernate.hbm2ddl.auto"));
         hibernateProperties.setProperty("hibernate.dialect", env.getProperty("hibernate.dialect"));
-        hibernateProperties.setProperty("hibernate.show_sql", "true");
+        hibernateProperties.setProperty("hibernate.show_sql", "false");
      
         return hibernateProperties;
     }

File: persistence-modules/spring-hibernate-5/src/main/java/com/baeldung/spring/PersistenceConfig.java
Patch:
@@ -71,7 +71,7 @@ private final Properties hibernateProperties() {
         hibernateProperties.setProperty("hibernate.hbm2ddl.auto", env.getProperty("hibernate.hbm2ddl.auto"));
         hibernateProperties.setProperty("hibernate.dialect", env.getProperty("hibernate.dialect"));
 
-        hibernateProperties.setProperty("hibernate.show_sql", "true");
+        hibernateProperties.setProperty("hibernate.show_sql", "false");
 
         // Envers properties
         hibernateProperties.setProperty("org.hibernate.envers.audit_table_suffix", env.getProperty("envers.audit_table_suffix"));

File: spring-5-webflux-2/src/main/java/caching/Item.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.caching;
+package caching;
 
 import org.springframework.data.annotation.Id;
 import org.springframework.data.mongodb.core.mapping.Document;

File: spring-5-webflux-2/src/main/java/caching/ItemRepository.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.caching;
+package caching;
 
 import org.springframework.data.mongodb.repository.ReactiveMongoRepository;
 import org.springframework.stereotype.Repository;

File: spring-5-webflux-2/src/main/java/caching/ItemService.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.caching;
+package caching;
 
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;

File: spring-5-webflux-2/src/main/java/caching/SpringWebfluxCachingApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.caching;
+package caching;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-5-webflux-2/src/test/java/caching/MonoFluxResultCachingLiveTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.caching;
+package caching;
 
 
 import org.junit.jupiter.api.Test;

File: spring-batch-2/src/main/java/com/baeldung/batchscheduler/model/Book.java
Patch:
@@ -3,7 +3,7 @@
 public class Book {
     private int id;
     private String name;
-    
+
     public Book() {}
 
     public Book(int id, String name) {
@@ -27,7 +27,7 @@ public String getName() {
     public void setName(String name) {
         this.name = name;
     }
-    
+
     public String toString() {
         return "Book [id=" + id + ", name=" + name + "]";
     }

File: spring-boot-modules/spring-boot-mvc-2/src/test/java/com/baeldung/mime/JacksonMarshaller.java
Patch:
@@ -7,7 +7,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.http.MediaType;
 
-import com.baeldung.etag.Foo;
+import com.baeldung.mime.Foo;
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
 

File: spring-boot-modules/spring-boot-mvc-2/src/test/java/com/baeldung/mime/XStreamMarshaller.java
Patch:
@@ -4,7 +4,7 @@
 
 import org.springframework.http.MediaType;
 
-import com.baeldung.etag.Foo;
+import com.baeldung.mime.Foo;
 import com.thoughtworks.xstream.XStream;
 
 public final class XStreamMarshaller implements IMarshaller {

File: spring-boot-modules/spring-boot-mvc-3/src/main/java/com/baeldung/etag/Foo.java
Patch:
@@ -1,13 +1,12 @@
 package com.baeldung.etag;
 
-import java.io.Serializable;
-
 import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.Version;
+import java.io.Serializable;
 
 @Entity
 public class Foo implements Serializable {

File: spring-boot-modules/spring-boot-mvc-3/src/main/java/com/baeldung/etag/FooController.java
Patch:
@@ -1,7 +1,5 @@
 package com.baeldung.etag;
 
-import javax.servlet.http.HttpServletResponse;
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
@@ -16,6 +14,8 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.server.ResponseStatusException;
 
+import javax.servlet.http.HttpServletResponse;
+
 @RestController
 @RequestMapping(value = "/foos")
 public class FooController {

File: testing-modules/spring-testing-2/src/test/java/com/baeldung/testexecutionlisteners/AdditionServiceUnitTest.java
Patch:
@@ -1,17 +1,18 @@
 package com.baeldung.testexecutionlisteners;
 
-import static org.junit.Assert.assertThat;
-
 import org.hamcrest.Matchers;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringRunner;
 
+import static org.hamcrest.MatcherAssert.assertThat;
+
 @RunWith(SpringRunner.class)
 @ContextConfiguration(classes = AdditionService.class)
 public class AdditionServiceUnitTest {
+
     @Autowired
     private AdditionService additionService;
 

File: testing-modules/spring-testing-2/src/test/java/com/baeldung/testexecutionlisteners/TestExecutionListenersWithoutMergeModeUnitTest.java
Patch:
@@ -1,7 +1,5 @@
 package com.baeldung.testexecutionlisteners;
 
-import static org.junit.Assert.assertThat;
-
 import org.hamcrest.Matchers;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -11,11 +9,14 @@
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
 
+import static org.hamcrest.MatcherAssert.assertThat;
+
 @RunWith(SpringRunner.class)
 @TestExecutionListeners(value = {CustomTestExecutionListener.class,
         DependencyInjectionTestExecutionListener.class})
 @ContextConfiguration(classes = AdditionService.class)
 public class TestExecutionListenersWithoutMergeModeUnitTest {
+
     @Autowired
     private AdditionService additionService;
 

File: core-java-modules/core-java-11-2/src/test/java/com/baeldung/version/VersionManualTest.java
Patch:
@@ -5,7 +5,8 @@
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
-public class VersionUnitTest {
+// manual test as the runtime JDK version can be different depending on where the test is run
+public class VersionManualTest {
 
     @Test
     public void givenJava_whenUsingRuntime_thenGetVersion() {

File: core-java-modules/core-java-9-jigsaw/src/test/java/com/baeldung/java9/modules/ModuleAPIUnitTest.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.Ignore;
 
 public class ModuleAPIUnitTest {
 
@@ -110,6 +111,7 @@ public void givenModules_whenAccessingModuleDescriptorRequires_thenRequiresAreRe
     }
 
     @Test
+    @Ignore // fixing in http://team.baeldung.com/browse/JAVA-8679
     public void givenModules_whenAccessingModuleDescriptorProvides_thenProvidesAreReturned() {
         Set<Provides> javaBaseProvides = javaBaseModule.getDescriptor().provides();
         Set<Provides> javaSqlProvides = javaSqlModule.getDescriptor().provides();

File: core-java-modules/core-java-11-2/src/test/java/com/baeldung/version/VersionManualTest.java
Patch:
@@ -5,7 +5,8 @@
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
-public class VersionUnitTest {
+// manual test as the runtime JDK version can be different depending on where the test is run
+public class VersionManualTest {
 
     @Test
     public void givenJava_whenUsingRuntime_thenGetVersion() {

File: core-java-modules/core-java-9-jigsaw/src/test/java/com/baeldung/java9/modules/ModuleAPIUnitTest.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.Ignore;
 
 public class ModuleAPIUnitTest {
 
@@ -110,6 +111,7 @@ public void givenModules_whenAccessingModuleDescriptorRequires_thenRequiresAreRe
     }
 
     @Test
+    @Ignore // fixing in http://team.baeldung.com/browse/JAVA-8679
     public void givenModules_whenAccessingModuleDescriptorProvides_thenProvidesAreReturned() {
         Set<Provides> javaBaseProvides = javaBaseModule.getDescriptor().provides();
         Set<Provides> javaSqlProvides = javaSqlModule.getDescriptor().provides();

File: spring-boot-modules/spring-boot-mvc-2/src/test/java/com/baeldung/mime/FooLiveTest.java
Patch:
@@ -18,7 +18,7 @@
 import io.restassured.response.Response;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@SpringBootTest(classes = WebConfig.class, webEnvironment = WebEnvironment.RANDOM_PORT)
+@SpringBootTest(classes = FooController.class, webEnvironment = WebEnvironment.RANDOM_PORT)
 @ComponentScan({"com.baeldung.mime"})
 @EnableAutoConfiguration
 @ActiveProfiles("test")
@@ -44,12 +44,12 @@ protected final void create(final Foo resource) {
         createAsUri(resource);
     }
 
-    private final String createAsUri(final Foo resource) {
+    private String createAsUri(final Foo resource) {
         final Response response = createAsResponse(resource);
         return getURL() + "/" + response.getBody().as(Foo.class).getId();
     }
 
-    private final Response createAsResponse(final Foo resource) {
+    private Response createAsResponse(final Foo resource) {
 
         final String resourceAsString = marshaller.encode(resource);
         return RestAssured.given()

File: testing-modules/assertion-libraries/src/test/java/com/baeldung/assertj/AssertJConditionUnitTest.java
Patch:
@@ -25,7 +25,7 @@ public void whenUsingMemberAgeCondition_thenCorrect() {
             assertThat(member).isNot(senior);
             fail();
         } catch (AssertionError e) {
-            assertThat(e).hasMessageContaining("not to be <senior>");
+            assertThat(e).hasMessageContaining("not to be senior");
         }
     }
 
@@ -38,7 +38,7 @@ public void whenUsingMemberNameCondition_thenCorrect() {
             assertThat(member).has(nameJohn);
             fail();
         } catch (AssertionError e) {
-            assertThat(e).hasMessageContaining("<name John>");
+            assertThat(e).hasMessageContaining("name John");
         }
     }
 

File: spring-boot-modules/spring-boot-1/src/main/java/com/baeldung/servletinitializer/WarInitializerApplication.java
Patch:
@@ -5,7 +5,6 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
-//import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
 import org.springframework.boot.web.support.SpringBootServletInitializer;
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.GetMapping;

File: core-java-modules/core-java-serialization/src/test/java/com/baeldung/deserialization/DeserializationUnitTest.java
Patch:
@@ -25,7 +25,7 @@ public class DeserializationUnitTest {
     @Test
     public void testDeserializeObj_compatible() throws IOException, ClassNotFoundException {
 
-        Assert.assertEquals(userDefinedSerialVersionUID, AppleProduct.getSerialVersionUID());
+        assertEquals(userDefinedSerialVersionUID, AppleProduct.getSerialVersionUID());
 
         AppleProduct macBook = new AppleProduct();
         macBook.headphonePort = "headphonePort2020";
@@ -61,7 +61,7 @@ public void testDeserializeObj_compatible() throws IOException, ClassNotFoundExc
     @Test(expected = InvalidClassException.class)
     public void testDeserializeObj_incompatible() throws ClassNotFoundException, IOException {
 
-        Assert.assertNotEquals(userDefinedSerialVersionUID, AppleProduct.getSerialVersionUID());
+        assertNotEquals(userDefinedSerialVersionUID, AppleProduct.getSerialVersionUID());
         // attempts to deserialize the "AppleProduct" object
         DeserializationUtility.deSerializeObjectFromString(serializedObj);
     }

File: libraries-io/src/main/java/com/baeldung/java/io/zip4j/ZipSingleFile.java
Patch:
@@ -21,7 +21,7 @@ public static void main(String[] args) throws IOException {
         if (!fileToAdd.exists()) {
             fileToAdd.createNewFile();
         }
-        zipFile.addFile(fileToAdd);
+        zipFile.addFile(fileToAdd, zipParameters);
         zipFile.close();
     }
 }

File: core-java-modules/core-java-os/src/test/java/com/baeldung/example/soundapi/AppUnitTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.example.soundapi;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Assertions;
 
@@ -37,6 +38,7 @@ public void Given_AudioFormatObject_When_NotNull_Then_ReturnsTargetDataLine() {
     }
 
     @Test
+    @Disabled
     public void Given_TargetLineDataObject_When_Run_Then_GeneratesOutputStream() {
 
         soundRecorder.setFormat(af);
@@ -52,6 +54,7 @@ public void Given_TargetLineDataObject_When_Run_Then_GeneratesOutputStream() {
     }
 
     @Test
+    @Disabled
     public void Given_AudioInputStream_When_NotNull_Then_SaveToWavFile() {
         soundRecorder.setFormat(af);
         soundRecorder.build(af);

File: testing-modules/mockito-2/src/test/java/com/baeldung/mockito/misusing/MockitoUnecessaryStubUnitTest.java
Patch:
@@ -30,7 +30,9 @@ public class MockitoUnecessaryStubUnitTest {
     public void givenUnusedStub_whenInvokingGetThenThrowUnnecessaryStubbingException() {
         rule.expectedFailure(UnnecessaryStubbingException.class);
 
-        when(mockList.add("one")).thenReturn(true);
+        // Commenting this stubbing so that it doesn't affect the builds.
+        // If you want to reproduce UnnecessaryStubbingException then uncomment below line and execute the test.
+        // when(mockList.add("one")).thenReturn(true);
         when(mockList.get(anyInt())).thenReturn("hello");
 
         assertEquals("List should contain hello", "hello", mockList.get(1));

File: spring-boot-modules/spring-boot-keycloak/src/test/java/com/baeldung/keycloaksoap/KeycloakSoapIntegrationTest.java
Patch:
@@ -85,9 +85,6 @@ void givenWrongAccessToken_whenGetProducts_thenReturnError() {
         headers.set("Authorization", "Bearer " + generateToken("janeadoe", "password"));
         HttpEntity<String> request = new HttpEntity<>(Utility.getGetProductDetailsRequest(), headers);
         ResponseEntity<String> responseEntity = restTemplate.postForEntity("http://localhost:" + port + "/ws/api/v1/", request, String.class);
-        System.out.println("This is the URL --> " + "http://localhost:" + port + "/ws/api/v1/");
-        System.out.println("Body --> " + responseEntity.getBody());
-        System.out.println("Location Header --> " + responseEntity.getHeaders().get("Location"));
         assertThat(responseEntity).isNotNull();
         assertThat(responseEntity.getStatusCodeValue()).isEqualTo(HttpStatus.UNAUTHORIZED.value());
         assertThat(responseEntity.getBody()).isBlank();

File: persistence-modules/spring-data-arangodb/src/main/java/com/baeldung/arangodb/configuration/ArangoDbConfiguration.java
Patch:
@@ -13,7 +13,7 @@ public class ArangoDbConfiguration implements ArangoConfiguration {
     public ArangoDB.Builder arango() {
         return new ArangoDB.Builder()
           .host("127.0.0.1", 8529)
-          .user("root")
+          .user("baeldung")
           .password("password");
     }
 

File: axon/src/main/java/com/baeldung/axon/commandmodel/order/OrderAggregate.java
Patch:
@@ -23,7 +23,7 @@
 
 import static org.axonframework.modelling.command.AggregateLifecycle.apply;
 
-@Aggregate
+@Aggregate(snapshotTriggerDefinition = "orderAggregateSnapshotTriggerDefinition")
 public class OrderAggregate {
 
     @AggregateIdentifier

File: persistence-modules/spring-data-arangodb/src/test/java/com/baeldung/arangodb/ArticleRepositoryLiveTest.java
Patch:
@@ -17,7 +17,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 @SpringBootTest
-public class ArticleRepositoryIntegrationTest {
+public class ArticleRepositoryLiveTest {
 
     @Autowired
     ArticleRepository articleRepository;

File: persistence-modules/spring-data-arangodb/src/test/java/com/baeldung/arangodb/ArticleRepositoryLiveTest.java
Patch:
@@ -17,7 +17,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 @SpringBootTest
-public class ArticleRepositoryIntegrationTest {
+public class ArticleRepositoryLiveTest {
 
     @Autowired
     ArticleRepository articleRepository;

File: spring-boot-modules/spring-boot-mvc-jersey/spring-boot-jersey/src/test/java/com/baeldung/boot/jersey/JerseyApplicationIntegrationTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest
-class JerseyApplicationIntegrationTests {
+class JerseyApplicationIntegrationTest {
 
     @Test
     void contextLoads() {

File: spring-boot-modules/spring-boot-mvc-jersey/spring-boot-mvc/src/test/java/com/baeldung/boot/mvc/MvcApplicationIntegrationTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest
-class MvcApplicationIntegrationTests {
+class MvcApplicationIntegrationTest {
 
     @Test
     void contextLoads() {

File: core-java-modules/core-java-12/src/test/java/com/baeldung/newfeatures/CompactNumbersUnitTest.java
Patch:
@@ -1,6 +1,6 @@
-package java.com.baeldung.newfeatures;
+package com.baeldung.newfeatures;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.text.NumberFormat;
 import java.util.Locale;
@@ -16,6 +16,6 @@ public void givenNumber_thenCompactValues() {
         assertEquals("2.59K", likesShort.format(2592));
         NumberFormat likesLong = NumberFormat.getCompactNumberInstance(new Locale("en", "US"), NumberFormat.Style.LONG);
         likesLong.setMaximumFractionDigits(2);
-        assertEquals("2.59 thousand", likesShort.format(2592));
+        assertEquals("2.59 thousand", likesLong.format(2592));
     }
 }

File: core-java-modules/core-java-12/src/test/java/com/baeldung/newfeatures/FileMismatchUnitTest.java
Patch:
@@ -1,6 +1,6 @@
-package java.com.baeldung.newfeatures;
+package com.baeldung.newfeatures;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 import java.nio.file.Files;

File: core-java-modules/core-java-12/src/test/java/com/baeldung/newfeatures/StringUnitTest.java
Patch:
@@ -1,6 +1,6 @@
-package java.com.baeldung.newfeatures;
+package com.baeldung.newfeatures;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.junit.Assert.assertEquals;
 

File: core-java-modules/core-java-12/src/test/java/com/baeldung/newfeatures/TeeingCollectorUnitTest.java
Patch:
@@ -1,6 +1,6 @@
-package java.com.baeldung.newfeatures;
+package com.baeldung.newfeatures;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -13,6 +13,6 @@ public class TeeingCollectorUnitTest {
     public void givenSetOfNumbers_thenCalculateAverage() {
         double mean = Stream.of(1, 2, 3, 4, 5)
           .collect(Collectors.teeing(Collectors.summingDouble(i -> i), Collectors.counting(), (sum, count) -> sum / count));
-        assertEquals(3.0, mean);
+        assertEquals(3.0, mean, 0);
     }
 }

File: persistence-modules/hibernate-jpa/src/main/java/com/baeldung/hibernate/entitynotfoundexception/Item.java
Patch:
@@ -15,7 +15,6 @@ public class Item implements Serializable {
     private String name;
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "category_id", foreignKey = @ForeignKey(ConstraintMode.NO_CONSTRAINT))
-    @NotFound(action = NotFoundAction.IGNORE)
     private Category category;
 
     public long getId() {

File: persistence-modules/hibernate-jpa/src/main/java/com/baeldung/hibernate/entitynotfoundexception/Item.java
Patch:
@@ -15,7 +15,6 @@ public class Item implements Serializable {
     private String name;
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "category_id", foreignKey = @ForeignKey(ConstraintMode.NO_CONSTRAINT))
-    @NotFound(action = NotFoundAction.IGNORE)
     private Category category;
 
     public long getId() {

File: testing-modules/testing-assertions/src/test/java/com/baeldung/junit/log/MemoryAppender.java
Patch:
@@ -19,7 +19,7 @@ public void reset() {
 
     public boolean contains(String string, Level level) {
         return this.list.stream()
-          .anyMatch(event -> event.getMessage().toString().contains(string) 
+          .anyMatch(event -> event.toString().contains(string) 
             && event.getLevel().equals(level));
     }
 
@@ -30,13 +30,13 @@ public int countEventsForLogger(String loggerName) {
 
     public List<ILoggingEvent> search(String string) {
         return this.list.stream()
-          .filter(event -> event.getMessage().toString().contains(string))
+          .filter(event -> event.toString().contains(string))
           .collect(Collectors.toList());
     }
 
     public List<ILoggingEvent> search(String string, Level level) {
         return this.list.stream()
-          .filter(event -> event.getMessage().toString().contains(string) 
+          .filter(event -> event.toString().contains(string) 
             && event.getLevel().equals(level))
           .collect(Collectors.toList());
     }

File: libraries-data-db/src/main/java/com/baeldung/libraries/debezium/service/CustomerService.java
Patch:
@@ -21,7 +21,7 @@ public void replicateData(Map<String, Object> customerData, Operation operation)
         final ObjectMapper mapper = new ObjectMapper();
         final Customer customer = mapper.convertValue(customerData, Customer.class);
 
-        if (Operation.DELETE.name().equals(operation.name())) {
+        if (Operation.DELETE == operation) {
             customerRepository.deleteById(customer.getId());
         } else {
             customerRepository.save(customer);

File: libraries-data-db/src/main/java/com/baeldung/libraries/debezium/service/CustomerService.java
Patch:
@@ -21,7 +21,7 @@ public void replicateData(Map<String, Object> customerData, Operation operation)
         final ObjectMapper mapper = new ObjectMapper();
         final Customer customer = mapper.convertValue(customerData, Customer.class);
 
-        if (Operation.DELETE.name().equals(operation.name())) {
+        if (Operation.DELETE == operation) {
             customerRepository.deleteById(customer.getId());
         } else {
             customerRepository.save(customer);

File: spring-boot-modules/spring-boot-cassandre/src/main/java/com/baeldung/trading/MyFirstStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package com.example.demo;
+package com.baeldung.trading;
 
 import static tech.cassandre.trading.bot.dto.position.PositionStatusDTO.CLOSED;
 import static tech.cassandre.trading.bot.dto.position.PositionStatusDTO.OPENED;

File: spring-boot-modules/spring-boot-cassandre/src/main/java/com/baeldung/trading/TradingBotApplication.java
Patch:
@@ -1,13 +1,13 @@
-package com.example.demo;
+package com.baeldung.trading;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
-public class DemoApplication {
+public class TradingBotApplication {
 
     public static void main(String[] args) {
-        SpringApplication.run(DemoApplication.class, args);
+        SpringApplication.run(TradingBotApplication.class, args);
     }
 
 }

File: spring-boot-modules/spring-boot-cassandre/src/test/java/com/baeldung/trading/MyFirstStrategyLiveTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.example.demo;
+package com.baeldung.trading;
 
 import static org.awaitility.Awaitility.await;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -22,9 +22,9 @@
 @SpringBootTest
 @Import(TickerFluxMock.class)
 @DisplayName("Simple strategy test")
-public class MyFirstStrategyUnitTest {
+public class MyFirstStrategyLiveTest {
 
-    private final Logger logger = LoggerFactory.getLogger(MyFirstStrategyUnitTest.class);
+    private final Logger logger = LoggerFactory.getLogger(MyFirstStrategyLiveTest.class);
 
     @Autowired
     private MyFirstStrategy strategy;

File: spring-web-modules/spring-thymeleaf-3/src/main/java/com/baeldung/thymeleaf/articles/Article.java
Patch:
@@ -1,4 +1,4 @@
-package main.java.com.baeldung.thymeleaf.articles;
+package com.baeldung.thymeleaf.articles;
 
 public class Article {
 

File: spring-web-modules/spring-thymeleaf-3/src/main/java/com/baeldung/thymeleaf/articles/ArticlesController.java
Patch:
@@ -1,4 +1,4 @@
-package main.java.com.baeldung.thymeleaf.articles;
+package com.baeldung.thymeleaf.articles;
 
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;

File: spring-web-modules/spring-thymeleaf-3/src/main/java/com/baeldung/thymeleaf/articles/Article.java
Patch:
@@ -1,4 +1,4 @@
-package main.java.com.baeldung.thymeleaf.articles;
+package com.baeldung.thymeleaf.articles;
 
 public class Article {
 

File: spring-web-modules/spring-thymeleaf-3/src/main/java/com/baeldung/thymeleaf/articles/ArticlesController.java
Patch:
@@ -1,4 +1,4 @@
-package main.java.com.baeldung.thymeleaf.articles;
+package com.baeldung.thymeleaf.articles;
 
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;

File: spring-data-rest/src/main/java/com/baeldung/books/config/RestConfig.java
Patch:
@@ -2,18 +2,19 @@
 
 import com.baeldung.books.models.WebsiteUser;
 import com.baeldung.books.projections.CustomBook;
-
 import org.springframework.context.annotation.Configuration;
 import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
 import org.springframework.data.rest.core.mapping.ExposureConfiguration;
 import org.springframework.data.rest.webmvc.config.RepositoryRestConfigurer;
 import org.springframework.http.HttpMethod;
+import org.springframework.web.servlet.config.annotation.CorsRegistry;
 
 @Configuration
 public class RestConfig implements RepositoryRestConfigurer {
 
     @Override
-    public void configureRepositoryRestConfiguration(RepositoryRestConfiguration repositoryRestConfiguration) {
+    public void configureRepositoryRestConfiguration(RepositoryRestConfiguration repositoryRestConfiguration,
+                                                     CorsRegistry cors) {
         repositoryRestConfiguration.getProjectionConfiguration().addProjection(CustomBook.class);
         ExposureConfiguration config = repositoryRestConfiguration.getExposureConfiguration();
         config.forDomainType(WebsiteUser.class).withItemExposure((metadata, httpMethods) -> httpMethods.disable(HttpMethod.PATCH));

File: testing-modules/rest-assured/src/test/java/com/baeldung/restassured/authentication/BasicPreemtiveAuthenticationLiveTest.java
Patch:
@@ -25,7 +25,7 @@ public void givenNoAuthentication_whenRequestSecuredResource_thenUnauthorizedRes
         get(SVC_URL).then()
             .assertThat()
             .statusCode(HttpStatus.OK.value())
-            .content(containsString("<form"), containsString("action=\"login\""));
+            .body(containsString("<form"), containsString("action=\"login\""));
     }
 
     @Test
@@ -37,7 +37,7 @@ public void givenNonPreemtiveBasicAuthentication_whenRequestSecuredResource_then
             .then()
             .assertThat()
             .statusCode(HttpStatus.OK.value())
-            .content(containsString("<form"), containsString("action=\"login\""));
+            .body(containsString("<form"), containsString("action=\"login\""));
     }
 
     @Test

File: testing-modules/rest-assured/src/test/java/com/baeldung/restassured/authentication/DigestAuthenticationLiveTest.java
Patch:
@@ -35,6 +35,6 @@ public void givenFormAuthentication_whenRequestSecuredResource_thenResourceRetri
             .then()
             .assertThat()
             .statusCode(HttpStatus.OK.value())
-            .content(containsString("This is the body of the sample view"));
+            .body(containsString("This is the body of the sample view"));
     }
 }

File: testing-modules/rest-assured/src/test/java/com/baeldung/restassured/authentication/FormAuthenticationLiveTest.java
Patch:
@@ -27,7 +27,7 @@ public void givenNoAuthentication_whenRequestSecuredResource_thenLoginFormRespon
         get(SVC_URL).then()
             .assertThat()
             .statusCode(HttpStatus.OK.value())
-            .content(containsString("<form"), containsString("action=\"perform_login\""));
+            .body(containsString("<form"), containsString("action=\"perform_login\""));
     }
 
     @Test
@@ -40,7 +40,7 @@ public void givenParsingFormAuthentication_whenRequestSecuredResource_thenLoginF
             .then()
             .assertThat()
             .statusCode(HttpStatus.OK.value())
-            .content(containsString("<form"), containsString("action=\"perform_login\""));
+            .body(containsString("<form"), containsString("action=\"perform_login\""));
     }
 
     @Test
@@ -52,6 +52,6 @@ public void givenFormAuthentication_whenRequestSecuredResource_thenResourceRetri
             .then()
             .assertThat()
             .statusCode(HttpStatus.OK.value())
-            .content(isEmptyString());
+            .body(isEmptyString());
     }
 }

File: testing-modules/rest-assured/src/test/java/com/baeldung/restassured/authentication/FormAutoconfAuthenticationLiveTest.java
Patch:
@@ -25,7 +25,7 @@ public void givenNoAuthentication_whenRequestSecuredResource_thenUnauthorizedRes
         get(SVC_URL).then()
             .assertThat()
             .statusCode(HttpStatus.OK.value())
-            .content(containsString("<form"), containsString("action=\"login\""));
+            .body(containsString("<form"), containsString("action=\"login\""));
     }
 
     @Test

File: core-java-modules/core-java-11-2/src/test/java/com/baeldung/version/VersionUnitTest.java
Patch:
@@ -9,7 +9,7 @@ public class VersionUnitTest {
 
     @Test
     public void givenJava_whenUsingRuntime_thenGetVersion() {
-        String expectedVersion = "11";
+        String expectedVersion = "15";
         Runtime.Version runtimeVersion = Runtime.version();
         String version = String.valueOf(runtimeVersion.version().get(0));
         Assertions.assertThat(version).isEqualTo(expectedVersion);

File: core-java-modules/core-java-11-2/src/test/java/com/baeldung/version/VersionUnitTest.java
Patch:
@@ -9,7 +9,7 @@ public class VersionUnitTest {
 
     @Test
     public void givenJava_whenUsingRuntime_thenGetVersion() {
-        String expectedVersion = "11";
+        String expectedVersion = "15";
         Runtime.Version runtimeVersion = Runtime.version();
         String version = String.valueOf(runtimeVersion.version().get(0));
         Assertions.assertThat(version).isEqualTo(expectedVersion);

File: algorithms-searching/src/main/java/com/baeldung/algorithms/binarysearch/BinarySearch.java
Patch:
@@ -12,7 +12,7 @@ public int runBinarySearchIteratively(int[] sortedArray, int key, int low, int h
 
         while (low <= high) {
 
-            int mid = (low + high) / 2;
+            int mid = low + ((high - low) / 2);
 
             if (sortedArray[mid] < key) {
                 low = mid + 1;
@@ -28,7 +28,7 @@ public int runBinarySearchIteratively(int[] sortedArray, int key, int low, int h
 
     public int runBinarySearchRecursively(int[] sortedArray, int key, int low, int high) {
 
-        int middle = (low + high) / 2;
+        int middle = low + ((high - low) / 2);
         if (high < low) {
             return -1;
         }

File: persistence-modules/core-java-persistence/src/main/java/com/baeldung/connectionpool/C3p0DataSource.java
Patch:
@@ -5,7 +5,7 @@
 import java.sql.Connection;
 import java.sql.SQLException;
 
-public class C3poDataSource {
+public class C3p0DataSource {
 
     private static final ComboPooledDataSource cpds = new ComboPooledDataSource();
 
@@ -24,5 +24,5 @@ public static Connection getConnection() throws SQLException {
         return cpds.getConnection();
     }
     
-    private C3poDataSource(){}
+    private C3p0DataSource(){}
 }
\ No newline at end of file

File: gradle/gradle-jacoco/src/main/java/com/baeldung/generated/Customer.java
Patch:
@@ -2,7 +2,7 @@
 
 @Generated
 public class Customer {
-    // every thing in this class will be excluded from jacoco report because of @Generated
+    // everything in this class will be excluded from jacoco report because of @Generated
 
     @Override
     public String toString() {

File: maven-modules/maven-plugins/maven-jacoco/src/main/java/com/baeldung/generated/Customer.java
Patch:
@@ -2,7 +2,7 @@
 
 @Generated
 public class Customer {
-    // every thing in this class will be excluded from jacoco report because of @Generated
+    // everything in this class will be excluded from jacoco report because of @Generated
 
     @Override
     public String toString() {

File: spring-5-reactive-client/src/test/java/com/baeldung/reactive/logging/WebClientLoggingIntegrationTest.java
Patch:
@@ -146,7 +146,7 @@ public void givenDefaultHttpClientWithFilter_whenEndpointIsConsumed_thenRequestA
           .exchange()
           .block();
 
-        verify(mockAppender).doAppend(argThat(argument -> (((LoggingEvent) argument).getFormattedMessage()).contains("domain=.typicode.com;")));
+        verify(mockAppender).doAppend(argThat(argument -> (((LoggingEvent) argument).getFormattedMessage()).contains(sampleUrl)));
     }
 
 

File: spring-5-reactive-client/src/test/java/com/baeldung/reactive/logging/WebClientLoggingIntegrationTest.java
Patch:
@@ -146,7 +146,7 @@ public void givenDefaultHttpClientWithFilter_whenEndpointIsConsumed_thenRequestA
           .exchange()
           .block();
 
-        verify(mockAppender).doAppend(argThat(argument -> (((LoggingEvent) argument).getFormattedMessage()).contains("domain=.typicode.com;")));
+        verify(mockAppender).doAppend(argThat(argument -> (((LoggingEvent) argument).getFormattedMessage()).contains(sampleUrl)));
     }
 
 

File: spring-boot-rest/src/test/java/com/baeldung/web/FooControllerCustomEtagIntegrationTest.java
Patch:
@@ -40,7 +40,7 @@ private static String serializeFoo(Foo foo) throws Exception {
     private static String createFooJson() throws Exception {
         return serializeFoo(new Foo(randomAlphabetic(6)));
     }
-    
+
     private static Foo deserializeFoo(String fooJson) throws Exception {
         ObjectMapper mapper = new ObjectMapper();
         return mapper.readValue(fooJson, Foo.class);
@@ -97,7 +97,8 @@ public void givenResourceWasRetrievedThenModified_whenRetrievingAgainWithEtagUsi
             .getResponse()
             .getHeader(HttpHeaders.LOCATION);
         ResultActions findOneResponse = this.mvc
-            .perform(get(createdResourceUri + CUSTOM_ETAG_ENDPOINT_SUFFIX).contentType(MediaType.APPLICATION_JSON));
+            .perform(get(createdResourceUri + CUSTOM_ETAG_ENDPOINT_SUFFIX)
+              .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
         String etag = findOneResponse.andReturn().getResponse().getHeader(HttpHeaders.ETAG);
         Foo createdFoo = deserializeFoo(findOneResponse.andReturn().getResponse().getContentAsString());
         createdFoo.setName("updated name");

File: spring-boot-modules/spring-boot-mvc-3/src/main/java/com/baeldung/filtersinterceptors/FilterInterceptorApp.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.scheduling.annotation.EnableAsync;
 
 @SpringBootApplication(scanBasePackages = "com.baeldung.filtersinterceptors")
 public class FilterInterceptorApp {

File: persistence-modules/spring-data-jpa-annotations/src/main/java/com/baeldung/attribute/overwrite/entity/Address.java
Patch:
@@ -15,7 +15,6 @@ public void setName(String name) {
         this.name = name;
     }
 
-
     public String getCity() {
         return city;
     }

File: persistence-modules/spring-data-jpa-annotations/src/test/java/com/baeldung/attribute/overwrite/AttributeOverwriteIntegrationTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.time.LocalDate;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = {Application.class})
+@SpringBootTest(classes = { Application.class })
 public class AttributeOverwriteIntegrationTest {
 
     private static final LocalDate FORD_FOUNDATION_DATE = LocalDate.parse("1903-06-16");

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/arraymapping/CustomIntegerArrayType.java
Patch:
@@ -40,14 +40,14 @@ public int hashCode(Object x) throws HibernateException {
 
     @Override
     public Object nullSafeGet(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)
-        throws HibernateException, SQLException {
+      throws HibernateException, SQLException {
         Array array = rs.getArray(names[0]);
         return array != null ? array.getArray() : null;
     }
 
     @Override
     public void nullSafeSet(PreparedStatement st, Object value, int index, SharedSessionContractImplementor session)
-        throws HibernateException, SQLException {
+      throws HibernateException, SQLException {
         if (value != null && st != null) {
             Array array = session.connection().createArrayOf("int", (Integer[])value);
             st.setArray(index, array);

File: persistence-modules/hibernate-mapping/src/main/java/com/baeldung/hibernate/arraymapping/CustomStringArrayType.java
Patch:
@@ -40,14 +40,14 @@ public int hashCode(Object x) throws HibernateException {
 
     @Override
     public Object nullSafeGet(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)
-        throws HibernateException, SQLException {
+      throws HibernateException, SQLException {
         Array array = rs.getArray(names[0]);
         return array != null ? array.getArray() : null;
     }
 
     @Override
     public void nullSafeSet(PreparedStatement st, Object value, int index, SharedSessionContractImplementor session)
-        throws HibernateException, SQLException {
+      throws HibernateException, SQLException {
         if (value != null && st != null) {
             Array array = session.connection().createArrayOf("text", (String[])value);
             st.setArray(index, array);

File: spring-security-modules/spring-security-web-boot-1/src/test/java/com/baeldung/roles/web/CustomUserDetailsServiceIntegrationTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.apache.http.HttpHeaders;
 import com.baeldung.roles.custom.Application;
 import com.baeldung.roles.custom.persistence.model.Foo;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;

File: spring-security-modules/spring-security-web-boot-1/src/test/java/com/baeldung/roles/web/CustomUserDetailsServiceIntegrationTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.apache.http.HttpHeaders;
 import com.baeldung.roles.custom.Application;
 import com.baeldung.roles.custom.persistence.model.Foo;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;

File: testing-modules/cucumber/src/main/java/com/baeldung/cucumber/tags/Application.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags;
+package com.baeldung.cucumber.tags;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: testing-modules/cucumber/src/main/java/com/baeldung/cucumber/tags/controller/HealthController.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags.controller;
+package com.baeldung.cucumber.tags.controller;
 
 
 import org.springframework.http.HttpStatus;

File: testing-modules/cucumber/src/main/java/com/baeldung/cucumber/tags/controller/UiController.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.cucumber_tags.controller;
+package com.baeldung.cucumber.tags.controller;
 
-import com.baeldung.cucumber_tags.service.RandomNumberGeneratorService;
+import com.baeldung.cucumber.tags.service.RandomNumberGeneratorService;
 import lombok.Data;
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;

File: testing-modules/cucumber/src/main/java/com/baeldung/cucumber/tags/service/RandomNumberGeneratorService.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags.service;
+package com.baeldung.cucumber.tags.service;
 
 import java.util.concurrent.ThreadLocalRandom;
 

File: testing-modules/cucumber/src/test/java/com/baeldung/cucumber/tags/acceptance/AcceptanceTestRunnerIT.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags.acceptance;
+package com.baeldung.cucumber.tags.acceptance;
 
 
 import io.cucumber.junit.platform.engine.Cucumber;

File: testing-modules/cucumber/src/test/java/com/baeldung/cucumber/tags/acceptance/api/steps/HealthSteps.java
Patch:
@@ -1,7 +1,7 @@
-package com.baeldung.cucumber_tags.acceptance.api.steps;
+package com.baeldung.cucumber.tags.acceptance.api.steps;
 
 
-import com.baeldung.cucumber_tags.acceptance.commonutil.ScenarioContextApi;
+import com.baeldung.cucumber.tags.acceptance.commonutil.ScenarioContextApi;
 import io.cucumber.java.en.Then;
 import io.cucumber.java.en.When;
 import org.hamcrest.Matchers;

File: testing-modules/cucumber/src/test/java/com/baeldung/cucumber/tags/acceptance/commonutil/CucumberEnvironment.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags.acceptance.commonutil;
+package com.baeldung.cucumber.tags.acceptance.commonutil;
 
 import org.openqa.selenium.InvalidArgumentException;
 

File: testing-modules/cucumber/src/test/java/com/baeldung/cucumber/tags/acceptance/commonutil/ScenarioContextApi.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags.acceptance.commonutil;
+package com.baeldung.cucumber.tags.acceptance.commonutil;
 
 import io.restassured.http.ContentType;
 import io.restassured.module.mockmvc.response.MockMvcResponse;

File: testing-modules/cucumber/src/test/java/com/baeldung/cucumber/tags/acceptance/commonutil/ScenarioContextUI.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags.acceptance.commonutil;
+package com.baeldung.cucumber.tags.acceptance.commonutil;
 
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.chrome.ChromeDriver;

File: testing-modules/cucumber/src/test/java/com/baeldung/cucumber/tags/acceptance/commonutil/ScenarioHooks.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags.acceptance.commonutil;
+package com.baeldung.cucumber.tags.acceptance.commonutil;
 
 
 import io.cucumber.java.After;

File: testing-modules/cucumber/src/test/java/com/baeldung/cucumber/tags/acceptance/commonutil/ScenarioReport.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags.acceptance.commonutil;
+package com.baeldung.cucumber.tags.acceptance.commonutil;
 
 
 import io.cucumber.java.Scenario;

File: testing-modules/cucumber/src/test/java/com/baeldung/cucumber/tags/acceptance/ui/pages/Page.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags.acceptance.ui.pages;
+package com.baeldung.cucumber.tags.acceptance.ui.pages;
 
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.support.ui.WebDriverWait;

File: testing-modules/cucumber/src/test/java/com/baeldung/cucumber/tags/acceptance/ui/pages/RandomNumberGeneratorPage.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags.acceptance.ui.pages;
+package com.baeldung.cucumber.tags.acceptance.ui.pages;
 
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebElement;

File: testing-modules/cucumber/src/test/java/com/baeldung/cucumber/tags/service/RandomNumberGeneratorServiceUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.cucumber_tags.service;
+package com.baeldung.cucumber.tags.service;
 
 import org.junit.jupiter.api.Test;
 

File: spring-boot-modules/spring-boot-runtime/src/main/java/com/baeldung/web/log/config/CustomWebAppInitializer.java
Patch:
@@ -2,6 +2,8 @@
 
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
+import javax.servlet.ServletRegistration;
+
 import org.springframework.web.context.ContextLoaderListener;
 import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
 import org.springframework.web.servlet.DispatcherServlet;

File: spring-boot-modules/spring-boot-runtime/src/main/java/com/baeldung/web/log/config/TaxiFareMVCConfig.java
Patch:
@@ -14,6 +14,6 @@ public class TaxiFareMVCConfig implements WebMvcConfigurer {
 
     @Override
     public void addInterceptors(InterceptorRegistry registry) {
-        registry.addInterceptor(taxiFareRequestInterceptor).addPathPatterns("/**/taxifare/**/");
+        registry.addInterceptor(taxiFareRequestInterceptor).addPathPatterns("/taxifare/*/");
     }
 }

File: spring-boot-modules/spring-boot-runtime/src/main/java/com/baeldung/web/log/config/CustomWebAppInitializer.java
Patch:
@@ -2,6 +2,8 @@
 
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
+import javax.servlet.ServletRegistration;
+
 import org.springframework.web.context.ContextLoaderListener;
 import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
 import org.springframework.web.servlet.DispatcherServlet;

File: spring-boot-modules/spring-boot-runtime/src/main/java/com/baeldung/web/log/config/TaxiFareMVCConfig.java
Patch:
@@ -14,6 +14,6 @@ public class TaxiFareMVCConfig implements WebMvcConfigurer {
 
     @Override
     public void addInterceptors(InterceptorRegistry registry) {
-        registry.addInterceptor(taxiFareRequestInterceptor).addPathPatterns("/**/taxifare/**/");
+        registry.addInterceptor(taxiFareRequestInterceptor).addPathPatterns("/taxifare/*/");
     }
 }

File: spring-boot-modules/spring-boot-react/src/main/java/com/baeldung/springbootreact/controller/ClientsController.java
Patch:
@@ -20,7 +20,7 @@ public ClientsController(ClientRepository clientRepository) {
     }
 
     @GetMapping
-    public List getClients() {
+    public List<Client> getClients() {
         return clientRepository.findAll();
     }
 
@@ -35,7 +35,7 @@ public ResponseEntity createClient(@RequestBody Client client) throws URISyntaxE
         return ResponseEntity.created(new URI("/clients/" + savedClient.getId())).body(savedClient);
     }
 
-    @PutMapping("{id}")
+    @PutMapping("/{id}")
     public ResponseEntity updateClient(@PathVariable Long id, @RequestBody Client client) {
         Client currentClient = clientRepository.findById(id).orElseThrow(RuntimeException::new);
         currentClient.setName(client.getName());

File: core-java-modules/core-java-os/src/test/java/com/baeldung/java9/process/ProcessUnderstandingUnitTest.java
Patch:
@@ -101,7 +101,8 @@ public void givenSourceProgram_whenReadingInputStream_thenFirstLineEquals3() thr
                 .replace("/", File.separator));
 
         BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));
-        int value = Integer.parseInt(output.readLine());
+        String line = output.readLine();
+        int value = Integer.parseInt(line);
 
         assertEquals(3, value);
     }

File: core-java-modules/core-java-os/src/test/java/com/baeldung/java9/process/ProcessUnderstandingUnitTest.java
Patch:
@@ -101,7 +101,8 @@ public void givenSourceProgram_whenReadingInputStream_thenFirstLineEquals3() thr
                 .replace("/", File.separator));
 
         BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));
-        int value = Integer.parseInt(output.readLine());
+        String line = output.readLine();
+        int value = Integer.parseInt(line);
 
         assertEquals(3, value);
     }

File: spring-core-5/src/main/java/com/baeldung/springbean/naming/component/Cat.java
Patch:
@@ -5,7 +5,7 @@
 
 @Component
 @Qualifier("cat")
-public class Cat implements Animal{
+public class Cat implements Animal {
 
     @Override
     public String name() {

File: spring-core-5/src/main/java/com/baeldung/springbean/naming/service/MessagingServiceImpl.java
Patch:
@@ -6,7 +6,7 @@
 import org.springframework.stereotype.Service;
 
 @Service
-public class MessagingServiceImpl implements MessagingService{
+public class MessagingServiceImpl implements MessagingService {
 
     @Autowired
     @Qualifier("qualifierComponent")

File: spring-core-5/src/test/java/com/baeldung/component/autoproxying/EligibleForAutoProxyingIntegrationTest.java
Patch:
@@ -40,7 +40,7 @@ public static void setup() {
 
     @Test
     public void givenAutowireInBeanPostProcessor_whenSpringContextInitialize_thenNotEligibleLogShouldShowAndGroupFieldPopulated() {
-        List<ILoggingEvent> notEligibleEvents = memoryAppender.search("Bean 'randomIntGenerator' of type [com.baeldung.autoproxying.RandomIntGenerator] " +
+        List<ILoggingEvent> notEligibleEvents = memoryAppender.search("Bean 'randomIntGenerator' of type [com.baeldung.component.autoproxying.RandomIntGenerator] " +
           "is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)");
 
         assertEquals(0, notEligibleEvents.size());

File: spring-core-5/src/test/java/com/baeldung/component/autoproxying/NotEligibleForAutoProxyingIntegrationTest.java
Patch:
@@ -39,7 +39,7 @@ public static void setup() {
 
     @Test
     public void givenAutowireInBeanPostProcessor_whenSpringContextInitialize_thenNotEligibleLogShouldShowAndGroupFieldNotPopulated() {
-        List<ILoggingEvent> notEligibleEvents = memoryAppender.search("Bean 'randomIntGenerator' of type [com.baeldung.autoproxying.RandomIntGenerator] " +
+        List<ILoggingEvent> notEligibleEvents = memoryAppender.search("Bean 'randomIntGenerator' of type [com.baeldung.component.autoproxying.RandomIntGenerator] " +
           "is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)");
 
         assertEquals(1, notEligibleEvents.size());

File: spring-boot-modules/spring-boot-properties-3/src/test/java/com/baeldung/boot/properties/multidocument/StagingMultidocumentFilesIntegrationTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.test.context.SpringBootTest;
@@ -21,6 +22,7 @@ public class StagingMultidocumentFilesIntegrationTest {
     private String baelRootProperty;
 
     @Test
+    @Disabled("Fix and update https://www.baeldung.com/spring-boot-yaml-vs-properties article")
     public void givenProductionProfileActive_whenApplicationStarts_thenDefaultPropertiesUser() {
         assertThat(baelCustomProperty).isEqualTo("stagingValue");
         assertThat(baelRootProperty).isEqualTo("defaultRootLevelValue");

File: data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java
Patch:
@@ -10,10 +10,8 @@ public class CircularBuffer<E> {
 
     @SuppressWarnings("unchecked")
     public CircularBuffer(int capacity) {
-
         this.capacity = (capacity < 1) ? DEFAULT_CAPACITY : capacity;
-        this.data = (E[]) new Object[capacity];
-
+        this.data = (E[]) new Object[this.capacity];
         this.readSequence = 0;
         this.writeSequence = -1;
     }

File: data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java
Patch:
@@ -10,10 +10,8 @@ public class CircularBuffer<E> {
 
     @SuppressWarnings("unchecked")
     public CircularBuffer(int capacity) {
-
         this.capacity = (capacity < 1) ? DEFAULT_CAPACITY : capacity;
-        this.data = (E[]) new Object[capacity];
-
+        this.data = (E[]) new Object[this.capacity];
         this.readSequence = 0;
         this.writeSequence = -1;
     }

File: spring-boot-rest-2/src/main/java/com/baeldung/endpoint/listener/AnnotationDrivenEndpointsListener.java
Patch:
@@ -20,7 +20,7 @@ public class AnnotationDrivenEndpointsListener {
     public void handleContextRefresh(ContextRefreshedEvent event) {
         ApplicationContext applicationContext = event.getApplicationContext();
         RequestMappingHandlerMapping requestMappingHandlerMapping = applicationContext
-                .getBean("requestMappingHandlerMapping", RequestMappingHandlerMapping.class);
+          .getBean("requestMappingHandlerMapping", RequestMappingHandlerMapping.class);
         Map<RequestMappingInfo, HandlerMethod> map = requestMappingHandlerMapping.getHandlerMethods();
         map.forEach((key, value) -> LOGGER.info("{} {}", key, value));
     }

File: spring-boot-rest-2/src/main/java/com/baeldung/endpoint/listener/EndpointsListener.java
Patch:
@@ -20,7 +20,7 @@ public class EndpointsListener implements ApplicationListener<ContextRefreshedEv
     public void onApplicationEvent(ContextRefreshedEvent event) {
         ApplicationContext applicationContext = event.getApplicationContext();
         RequestMappingHandlerMapping requestMappingHandlerMapping = applicationContext
-                .getBean("requestMappingHandlerMapping", RequestMappingHandlerMapping.class);
+          .getBean("requestMappingHandlerMapping", RequestMappingHandlerMapping.class);
         Map<RequestMappingInfo, HandlerMethod> map = requestMappingHandlerMapping.getHandlerMethods();
         map.forEach((key, value) -> LOGGER.info("{} {}", key, value));
     }

File: maven-modules/maven-plugins/jaxws/src/main/java/com/baeldung/soap/ws/client/CountryServiceClient.java
Patch:
@@ -9,6 +9,7 @@ public class CountryServiceClient {
     public CountryServiceClient(CountryService countryService) {
         this.countryService = countryService;
     }
+
     public String getCapitalByCountryName(String countryName) {
         return Optional.of(countryService.findByName(countryName))
           .map(Country::getCapital).orElseThrow(CountryNotFoundException::new);
@@ -23,6 +24,4 @@ public Currency getCurrencyByCountryName(String countryName) {
         return Optional.of(countryService.findByName(countryName))
           .map(Country::getCurrency).orElseThrow(CountryNotFoundException::new);
     }
-
-
 }

File: core-java-modules/core-java-io-conversions/src/test/java/com/baeldung/filetoinputstream/JavaXToInputStreamUnitTest.java
Patch:
@@ -5,12 +5,12 @@
 import com.google.common.io.Files;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.io.input.ReaderInputStream;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.*;
+import java.nio.charset.StandardCharsets;
 
 public class JavaXToInputStreamUnitTest {
     protected final Logger logger = LoggerFactory.getLogger(getClass());
@@ -28,7 +28,7 @@ public final void givenUsingPlainJava_whenConvertingStringToInputStream_thenCorr
     @Test
     public final void givenUsingGuava_whenConvertingStringToInputStream_thenCorrect() throws IOException {
         final String initialString = "text";
-        final InputStream targetStream = new ReaderInputStream(CharSource.wrap(initialString).openStream());
+        final InputStream targetStream = CharSource.wrap(initialString).asByteSource(StandardCharsets.UTF_8).openStream();
 
         IOUtils.closeQuietly(targetStream);
     }

File: jackson-modules/jackson-annotations/src/main/java/com/baeldung/jackson/bidirection/ItemWithRef.java
Patch:
@@ -1,12 +1,12 @@
 package com.baeldung.jackson.bidirection;
 
-import com.fasterxml.jackson.annotation.JsonManagedReference;
+import com.fasterxml.jackson.annotation.JsonBackReference;
 
 public class ItemWithRef {
     public int id;
     public String itemName;
 
-    @JsonManagedReference
+    @JsonBackReference
     public UserWithRef owner;
 
     public ItemWithRef() {

File: jackson-modules/jackson-annotations/src/main/java/com/baeldung/jackson/bidirection/UserWithRef.java
Patch:
@@ -3,13 +3,13 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.fasterxml.jackson.annotation.JsonBackReference;
+import com.fasterxml.jackson.annotation.JsonManagedReference;
 
 public class UserWithRef {
     public int id;
     public String name;
 
-    @JsonBackReference
+    @JsonManagedReference
     public List<ItemWithRef> userItems;
 
     public UserWithRef() {
@@ -19,7 +19,7 @@ public UserWithRef() {
     public UserWithRef(final int id, final String name) {
         this.id = id;
         this.name = name;
-        userItems = new ArrayList<ItemWithRef>();
+        userItems = new ArrayList<>();
     }
 
     public void addItem(final ItemWithRef item) {

File: maven-modules/maven-plugins/jaxws/src/main/java/com/baeldung/soap/ws/client/CountryServiceClient.java
Patch:
@@ -11,7 +11,7 @@ public CountryServiceClient(CountryService countryService) {
     }
     public String getCapitalByCountryName(String countryName) {
         return Optional.of(countryService.findByName(countryName))
-            .map(Country::getCapital).orElseThrow(CountryNotFoundException::new);
+          .map(Country::getCapital).orElseThrow(CountryNotFoundException::new);
     }
 
     public int getPopulationByCountryName(String countryName) {

File: jackson-modules/jackson-annotations/src/main/java/com/baeldung/jackson/bidirection/ItemWithRef.java
Patch:
@@ -1,12 +1,12 @@
 package com.baeldung.jackson.bidirection;
 
-import com.fasterxml.jackson.annotation.JsonManagedReference;
+import com.fasterxml.jackson.annotation.JsonBackReference;
 
 public class ItemWithRef {
     public int id;
     public String itemName;
 
-    @JsonManagedReference
+    @JsonBackReference
     public UserWithRef owner;
 
     public ItemWithRef() {

File: jackson-modules/jackson-annotations/src/main/java/com/baeldung/jackson/bidirection/UserWithRef.java
Patch:
@@ -3,13 +3,13 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.fasterxml.jackson.annotation.JsonBackReference;
+import com.fasterxml.jackson.annotation.JsonManagedReference;
 
 public class UserWithRef {
     public int id;
     public String name;
 
-    @JsonBackReference
+    @JsonManagedReference
     public List<ItemWithRef> userItems;
 
     public UserWithRef() {
@@ -19,7 +19,7 @@ public UserWithRef() {
     public UserWithRef(final int id, final String name) {
         this.id = id;
         this.name = name;
-        userItems = new ArrayList<ItemWithRef>();
+        userItems = new ArrayList<>();
     }
 
     public void addItem(final ItemWithRef item) {

File: spring-boot-modules/spring-boot-data-2/src/test/java/com/baeldung/boot/noconverterfound/NoConverterFoundIntegrationTest.java
Patch:
@@ -22,7 +22,8 @@ public class NoConverterFoundIntegrationTest {
     @Autowired
     private MockMvc mockMvc;
 
-    @Test
+    /* Remove Getters from Student class to successfully run this test case
+     * @Test
     public void whenGettersNotDefined_thenThrowException() throws Exception {
 
         String url = "/api/student/1";
@@ -35,6 +36,7 @@ public void whenGettersNotDefined_thenThrowException() throws Exception {
             .contains("No converter found for return value of type"));
 
     }
+    */
 
     @Test
     public void whenGettersAreDefined_thenReturnObject() throws Exception {

File: spring-boot-modules/spring-boot-data-2/src/test/java/com/baeldung/boot/noconverterfound/NoConverterFoundIntegrationTest.java
Patch:
@@ -22,7 +22,8 @@ public class NoConverterFoundIntegrationTest {
     @Autowired
     private MockMvc mockMvc;
 
-    @Test
+    /* Remove Getters from Student class to successfully run this test case
+     * @Test
     public void whenGettersNotDefined_thenThrowException() throws Exception {
 
         String url = "/api/student/1";
@@ -35,6 +36,7 @@ public void whenGettersNotDefined_thenThrowException() throws Exception {
             .contains("No converter found for return value of type"));
 
     }
+    */
 
     @Test
     public void whenGettersAreDefined_thenReturnObject() throws Exception {

File: spring-boot-rest/src/main/java/com/baeldung/web/config/MyCustomErrorAttributes.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.Map;
 
+import org.springframework.boot.web.error.ErrorAttributeOptions;
 import org.springframework.boot.web.servlet.error.DefaultErrorAttributes;
 import org.springframework.stereotype.Component;
 import org.springframework.web.context.request.WebRequest;
@@ -10,8 +11,8 @@
 public class MyCustomErrorAttributes extends DefaultErrorAttributes {
 
     @Override
-    public Map<String, Object> getErrorAttributes(WebRequest webRequest, boolean includeStackTrace) {
-        Map<String, Object> errorAttributes = super.getErrorAttributes(webRequest, includeStackTrace);
+    public Map<String, Object> getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) {
+        Map<String, Object> errorAttributes = super.getErrorAttributes(webRequest, options);
         errorAttributes.put("locale", webRequest.getLocale()
             .toString());
         errorAttributes.remove("error");

File: core-java-modules/core-java-annotations/src/main/java/com/baeldung/annotations/AnnotatedClass.java
Patch:
@@ -3,6 +3,6 @@
 import javax.annotation.Generated;
 
 @RetentionAnnotation
-@Generated("Avilable only on source code")
+@Generated("Available only on source code")
 public class AnnotatedClass {
 }

File: spring-boot-rest/src/main/java/com/baeldung/web/config/MyCustomErrorAttributes.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.Map;
 
+import org.springframework.boot.web.error.ErrorAttributeOptions;
 import org.springframework.boot.web.servlet.error.DefaultErrorAttributes;
 import org.springframework.stereotype.Component;
 import org.springframework.web.context.request.WebRequest;
@@ -10,8 +11,8 @@
 public class MyCustomErrorAttributes extends DefaultErrorAttributes {
 
     @Override
-    public Map<String, Object> getErrorAttributes(WebRequest webRequest, boolean includeStackTrace) {
-        Map<String, Object> errorAttributes = super.getErrorAttributes(webRequest, includeStackTrace);
+    public Map<String, Object> getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) {
+        Map<String, Object> errorAttributes = super.getErrorAttributes(webRequest, options);
         errorAttributes.put("locale", webRequest.getLocale()
             .toString());
         errorAttributes.remove("error");

File: spring-web-modules/spring-resttemplate/src/main/java/com/baeldung/mock/EmployeeService.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.resttemplate.web.service;
+package com.baeldung.mock;
 
 import com.baeldung.resttemplate.web.model.Employee;
 import org.slf4j.Logger;

File: spring-web-modules/spring-resttemplate/src/test/java/com/baeldung/client/TestRestTemplateBasicLiveTest.java
Patch:
@@ -18,6 +18,7 @@
 import okhttp3.Request;
 import okhttp3.RequestBody;
 
+// This test needs RestTemplateConfigurationApplication to be up and running
 public class TestRestTemplateBasicLiveTest {
 
     private RestTemplate restTemplate;

File: spring-web-modules/spring-resttemplate/src/test/java/com/baeldung/mock/EmployeeServiceMockRestServiceServerUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.web.service;
+package com.baeldung.mock;
 
 import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;
 import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;
@@ -7,8 +7,9 @@
 import java.net.URI;
 
 import com.baeldung.SpringTestConfig;
+import com.baeldung.mock.EmployeeService;
 import com.baeldung.resttemplate.web.model.Employee;
-import com.baeldung.resttemplate.web.service.EmployeeService;
+
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;

File: spring-web-modules/spring-resttemplate/src/test/java/com/baeldung/mock/EmployeeServiceUnitTest.java
Patch:
@@ -1,7 +1,8 @@
-package com.baeldung.web.service;
+package com.baeldung.mock;
 
+import com.baeldung.mock.EmployeeService;
 import com.baeldung.resttemplate.web.model.Employee;
-import com.baeldung.resttemplate.web.service.EmployeeService;
+
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: spring-web-modules/spring-resttemplate/src/test/java/com/baeldung/resttemplate/RestTemplateBasicLiveTest.java
Patch:
@@ -38,6 +38,7 @@
 import com.fasterxml.jackson.dataformat.xml.XmlMapper;
 import com.google.common.base.Charsets;
 
+// This test needs RestTemplateConfigurationApplication to be up and running
 public class RestTemplateBasicLiveTest {
 
     private RestTemplate restTemplate;

File: spring-boot-modules/spring-boot-annotations/src/test/java/com.baeldung.annotations/EmployeeApplicationUnitTest.java
Patch:
@@ -6,7 +6,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.jupiter.api.Assertions.assertAll;
 
-public class EmployeeApplicationTest {
+public class EmployeeApplicationUnitTest {
     private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
             .withUserConfiguration(EmployeeApplication.class);
 

File: spring-boot-modules/spring-boot-mvc-jersey/spring-boot-jersey/src/test/java/com/baeldung/boot/jersey/controllers/HelloControllerUnitTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.boot.jersey.controllers;
 
-import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
+import javax.ws.rs.core.Response;
 
-import javax.xml.ws.Response;
+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;

File: spring-5-reactive-client/src/test/java/com/baeldung/webclient/json/ReaderConsumerServiceImplUnitTest.java
Patch:
@@ -19,9 +19,9 @@ public class ReaderConsumerServiceImplUnitTest {
       "{\"id\":2,\"name\":\"reader2\",\"favouriteBooks\":[{\"author\":\"J.R.R. Tolkien\",\"title\":\"Lord of the Rings\"}, " +
       "{\"author\":\"Douglas Adams\",\"title\":\"The Hitchhiker\'s Guide to the Galaxy\"}]}]";
 
-    private static String BASE_URL = "http://localhost:8080";
+    private static String BASE_URL = "http://localhost:8080/readers";
 
-    WebClient webClientMock = WebClient.builder()
+    WebClient webClientMock = WebClient.builder().baseUrl(BASE_URL)
       .exchangeFunction(clientRequest -> Mono.just(ClientResponse.create(HttpStatus.OK)
         .header("content-type", "application/json")
         .body(READER_JSON)

File: testing-modules/mockito-2/src/test/java/com/baeldung/mockito/mocksettings/MockSettingsUnitTest.java
Patch:
@@ -47,10 +47,10 @@ public void whenServiceMockedWithExtraInterfaces_thenConstructorSuccess() {
 
     @Test
     public void whenMockSetupWithConstructor_thenConstructorIsInvoked() {
-        AbstractCoffee coffeeSpy = mock(AbstractCoffee.class, withSettings().useConstructor("expresso")
+        AbstractCoffee coffeeSpy = mock(AbstractCoffee.class, withSettings().useConstructor("espresso")
             .defaultAnswer(CALLS_REAL_METHODS));
 
-        assertEquals("Coffee name: ", "expresso", coffeeSpy.getName());
+        assertEquals("Coffee name: ", "espresso", coffeeSpy.getName());
     }
 
 }

File: patterns/clean-architecture/src/test/java/com/baeldung/pattern/cleanarchitecture/usercreation/UserResponseFormatterUnitTest.java
Patch:
@@ -9,7 +9,7 @@
 import com.baeldung.pattern.cleanarchitecture.usercreation.UserResponseFormatter;
 import com.baeldung.pattern.cleanarchitecture.usercreation.UserResponseModel;
 
-class UserResponseFormatterTests {
+class UserResponseFormatterUnitTest {
 
     UserResponseFormatter userResponseFormatter = new UserResponseFormatter();
 

File: patterns/clean-architecture/src/main/java/com/baeldung/pattern/cleanarchitecture/usercreation/CommonUser.java
Patch:
@@ -15,7 +15,7 @@ class CommonUser implements User {
 
     @Override
     public boolean passwordIsValid() {
-        return password == null || password.length() > 5;
+        return password != null && password.length() > 5;
     }
 
     @Override

File: spring-boot-modules/spring-boot-libraries/src/main/java/com/baeldung/graphql/DemoApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.demo;
+package com.baeldung.graphql;
 
 import com.baeldung.graphql.GraphqlConfiguration;
 import org.springframework.boot.SpringApplication;

File: spring-5-reactive/src/test/java/com/baeldung/functional/FunctionalWebApplicationIntegrationTest.java
Patch:
@@ -103,7 +103,6 @@ public void givenUploadForm_whenRequestWithMultipartData_thenSuccess() throws Ex
             .isEqualTo(String.valueOf(resource.contentLength()));
     }
 
-    @Ignore("We get 404 after Spring Boot 2.4 upgrade. We need to solve it in a new task.")
     @Test
     public void givenActors_whenAddActor_thenAdded() throws Exception {
         client.get()

File: spring-boot-modules/spring-boot-properties/src/main/java/com/baeldung/properties/reloading/configs/ReloadablePropertySource.java
Patch:
@@ -15,7 +15,7 @@ public ReloadablePropertySource(String name, PropertiesConfiguration propertiesC
     }
 
     public ReloadablePropertySource(String name, String path) {
-        super(StringUtils.hasText(name) ? path : name);
+        super(!StringUtils.hasText(name) ? path : name);
         try {
             this.propertiesConfiguration = new PropertiesConfiguration(path);
             FileChangedReloadingStrategy strategy = new FileChangedReloadingStrategy();

File: spring-boot-modules/spring-boot-properties/src/main/java/com/baeldung/properties/reloading/configs/ReloadablePropertySource.java
Patch:
@@ -15,7 +15,7 @@ public ReloadablePropertySource(String name, PropertiesConfiguration propertiesC
     }
 
     public ReloadablePropertySource(String name, String path) {
-        super(StringUtils.hasText(name) ? path : name);
+        super(!StringUtils.hasText(name) ? path : name);
         try {
             this.propertiesConfiguration = new PropertiesConfiguration(path);
             FileChangedReloadingStrategy strategy = new FileChangedReloadingStrategy();

File: spring-5-reactive/src/test/java/com/baeldung/functional/FunctionalWebApplicationIntegrationTest.java
Patch:
@@ -103,7 +103,6 @@ public void givenUploadForm_whenRequestWithMultipartData_thenSuccess() throws Ex
             .isEqualTo(String.valueOf(resource.contentLength()));
     }
 
-    @Ignore("We get 404 after Spring Boot 2.4 upgrade. We need to solve it in a new task.")
     @Test
     public void givenActors_whenAddActor_thenAdded() throws Exception {
         client.get()

File: core-java-modules/core-java-os/src/main/java/com/baeldung/java9/process/OutputStreamExample.java
Patch:
@@ -6,8 +6,7 @@
 public class OutputStreamExample {
 
     public static void main(String[] args) {
-        Logger log = Logger.getLogger(OutputStreamExample.class.getName());
-        log.log(Level.INFO, Integer.toString(sum(1,2)));
+        System.out.println(sum(1,2));
     }
 
     public static int sum(int a, int b) {

File: core-java-modules/core-java-os/src/test/java/com/baeldung/screenshot/ScreenshotUnitTest.java
Patch:
@@ -9,11 +9,13 @@
 import java.awt.Toolkit;
 import java.awt.image.BufferedImage;
 import java.io.File;
+
+import org.junit.Ignore;
 import org.junit.Test;
-import org.junit.jupiter.api.Disabled;
 
 import static org.junit.Assert.assertTrue;
 
+@Ignore
 public class ScreenshotUnitTest {
 
     @Test
@@ -43,7 +45,6 @@ public void givenMultipleScreens_whenTakeScreenshot_thenSaveToFile() throws Exce
 
     // This methods needs a component as a parameter and can only be run from an application with a GUI
     @Test
-    @Disabled
     public void givenComponent_whenTakeScreenshot_thenSaveToFile(Component component) throws Exception {
         Rectangle componentRect = component.getBounds();
         BufferedImage bufferedImage = new BufferedImage(componentRect.width, componentRect.height, BufferedImage.TYPE_INT_ARGB);

File: core-java-modules/core-java-os/src/main/java/com/baeldung/java9/process/OutputStreamExample.java
Patch:
@@ -6,8 +6,7 @@
 public class OutputStreamExample {
 
     public static void main(String[] args) {
-        Logger log = Logger.getLogger(OutputStreamExample.class.getName());
-        log.log(Level.INFO, Integer.toString(sum(1,2)));
+        System.out.println(sum(1,2));
     }
 
     public static int sum(int a, int b) {

File: core-java-modules/core-java-os/src/test/java/com/baeldung/screenshot/ScreenshotUnitTest.java
Patch:
@@ -9,11 +9,13 @@
 import java.awt.Toolkit;
 import java.awt.image.BufferedImage;
 import java.io.File;
+
+import org.junit.Ignore;
 import org.junit.Test;
-import org.junit.jupiter.api.Disabled;
 
 import static org.junit.Assert.assertTrue;
 
+@Ignore
 public class ScreenshotUnitTest {
 
     @Test
@@ -43,7 +45,6 @@ public void givenMultipleScreens_whenTakeScreenshot_thenSaveToFile() throws Exce
 
     // This methods needs a component as a parameter and can only be run from an application with a GUI
     @Test
-    @Disabled
     public void givenComponent_whenTakeScreenshot_thenSaveToFile(Component component) throws Exception {
         Rectangle componentRect = component.getBounds();
         BufferedImage bufferedImage = new BufferedImage(componentRect.width, componentRect.height, BufferedImage.TYPE_INT_ARGB);

File: core-java-modules/core-java-11/src/test/java/com/baeldung/java11/httpclient/test/HttpClientUnitTest.java
Patch:
@@ -64,7 +64,7 @@ public void shouldNotFollowRedirectWhenSetToDefaultNever() throws IOException, I
             .send(request, HttpResponse.BodyHandlers.ofString());
 
         assertThat(response.statusCode(), equalTo(HttpURLConnection.HTTP_MOVED_PERM));
-        assertThat(response.body(), containsString("https://stackoverflow.com/"));
+        assertTrue(response.headers().map().get("location").stream().anyMatch("https://stackoverflow.com/"::equals));
     }
 
     @Test

File: core-java-modules/core-java-datetime-string/src/test/java/com/baeldung/date/StringToDateUnitTest.java
Patch:
@@ -58,7 +58,8 @@ public void givenDateString_whenConvertedToDate_thenWeGetCorrectZonedDateTime()
         LocalDateTime localDateTime = LocalDateTime.of(2015, 05, 05, 10, 15, 30);
         ZonedDateTime expectedZonedDateTime = ZonedDateTime.of(localDateTime, ZoneId.of("Europe/Paris"));
 
-        ZonedDateTime zonedDateTime = ZonedDateTime.parse("2015-05-05T10:15:30+01:00[Europe/Paris]");
+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss z");
+        ZonedDateTime zonedDateTime = ZonedDateTime.parse("2015-05-05 10:15:30 Europe/Paris", formatter);
 
         assertThat(zonedDateTime).isEqualTo(expectedZonedDateTime);
     }

File: core-java-modules/core-java-os/src/test/java/com/baeldung/processbuilder/ProcessBuilderUnitTest.java
Patch:
@@ -40,7 +40,7 @@ public void givenProcessBuilder_whenInvokeStart_thenSuccess() throws IOException
 
         List<String> results = readOutput(process.getInputStream());
         assertThat("Results should not be empty", results, is(not(empty())));
-        assertThat("Results should contain java version: ", results, hasItem(containsString("java version")));
+        assertThat("Results should contain java version: ", results, hasItem(containsString("version")));
 
         int exitCode = process.waitFor();
         assertEquals("No errors should be detected", 0, exitCode);
@@ -101,7 +101,7 @@ public void givenProcessBuilder_whenRedirectStandardOutput_thenSuccessWriting()
             .collect(Collectors.toList());
 
         assertThat("Results should not be empty", lines, is(not(empty())));
-        assertThat("Results should contain java version: ", lines, hasItem(containsString("java version")));
+        assertThat("Results should contain java version: ", lines, hasItem(containsString("version")));
     }
 
     @Test
@@ -124,7 +124,7 @@ public void givenProcessBuilder_whenRedirectStandardOutput_thenSuccessAppending(
             .collect(Collectors.toList());
 
         assertThat("Results should not be empty", lines, is(not(empty())));
-        assertThat("Results should contain java version: ", lines, hasItem(containsString("java version")));
+        assertThat("Results should contain java version: ", lines, hasItem(containsString("version")));
     }
 
     @Test

File: core-java-modules/core-java-time-measurements/src/test/java/com/baeldung/time/InstantUnitTest.java
Patch:
@@ -10,8 +10,8 @@
 import java.time.ZoneId;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.when;
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({ Instant.class })

File: spring-cloud/spring-cloud-eureka/spring-cloud-eureka-feign-client-integration-test/src/test/java/com/baeldung/spring/cloud/client/ServiceDiscoveryBooksClientLiveTest.java
Patch:
@@ -25,7 +25,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(classes = Application.class, webEnvironment =  SpringBootTest.WebEnvironment.RANDOM_PORT)
 @ContextConfiguration(classes = { MockBookServiceConfig.class }, initializers = { EurekaContainerConfig.Initializer.class })
-class ServiceDiscoveryBooksClientIntegrationTest {
+class ServiceDiscoveryBooksClientLiveTest {
 
     @Autowired
     private BooksClient booksClient;

File: spring-cloud/spring-cloud-eureka/spring-cloud-eureka-feign-client-integration-test/src/test/java/com/baeldung/spring/cloud/client/ServiceDiscoveryBooksClientLiveTest.java
Patch:
@@ -25,7 +25,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(classes = Application.class, webEnvironment =  SpringBootTest.WebEnvironment.RANDOM_PORT)
 @ContextConfiguration(classes = { MockBookServiceConfig.class }, initializers = { EurekaContainerConfig.Initializer.class })
-class ServiceDiscoveryBooksClientIntegrationTest {
+class ServiceDiscoveryBooksClientLiveTest {
 
     @Autowired
     private BooksClient booksClient;

File: spring-boot-modules/spring-boot-libraries/src/main/java/com/baeldung/demo/DemoApplication.java
Patch:
@@ -2,12 +2,14 @@
 
 import com.baeldung.graphql.GraphqlConfiguration;
 import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-
+import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
 import org.springframework.context.annotation.Import;
 
 @SpringBootApplication
 @Import(GraphqlConfiguration.class)
+@EnableAutoConfiguration(exclude = {SecurityAutoConfiguration.class})
 public class DemoApplication {
 
     public static void main(String[] args) {

File: spring-aop/src/main/java/com/baeldung/method/info/AccountOperation.java
Patch:
@@ -8,5 +8,5 @@
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface AccountOperation {
-  String operation();
+    String operation();
 }

File: spring-websockets/src/main/java/com/baeldung/SpringBootApp.java
Patch:
@@ -3,8 +3,10 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
+import org.springframework.scheduling.annotation.EnableScheduling;
 
 @SpringBootApplication
+@EnableScheduling
 public class SpringBootApp extends SpringBootServletInitializer {
     public static void main(String[] args) {
         SpringApplication.run(SpringBootApp.class, args);

File: spring-websockets/src/main/java/com/baeldung/websockets/WebSocketConfig.java
Patch:
@@ -20,6 +20,8 @@ public void configureMessageBroker(final MessageBrokerRegistry config) {
     public void registerStompEndpoints(final StompEndpointRegistry registry) {
         registry.addEndpoint("/chat");
         registry.addEndpoint("/chat").withSockJS();
+        registry.addEndpoint("/chatwithbots");
+        registry.addEndpoint("/chatwithbots").withSockJS();
     }
 
 }
\ No newline at end of file

File: spring-boot-modules/spring-boot-data-2/src/main/java/com/baeldung/boot/jackson/controller/CoffeeController.java
Patch:
@@ -5,7 +5,7 @@
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
-import java.time.LocalDateTime;
+import static com.baeldung.boot.jackson.config.CoffeeConstants.FIXED_DATE;
 
 @RestController
 public class CoffeeController {
@@ -15,7 +15,7 @@ public Coffee getCoffee(
             @RequestParam(required = false) String brand,
             @RequestParam(required = false) String name) {
         return new Coffee().setBrand(brand)
-                .setDate(LocalDateTime.now())
+                .setDate(FIXED_DATE)
                 .setName(name);
     }
 }

File: persistence-modules/redis/src/test/java/com/baeldung/spring/redis/configuration/controller/BooksControllerUnitTest.java
Patch:
@@ -10,15 +10,15 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.Spy;
+import org.mockito.junit.MockitoJUnitRunner;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 import com.baeldung.spring.redis.configuration.entity.Book;
 import com.baeldung.spring.redis.configuration.repository.BooksRepository;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(MockitoJUnitRunner.class)
 public class BooksControllerUnitTest {
 
-    @Spy
     @InjectMocks
     private BooksController booksController;
 

File: persistence-modules/redis/src/test/java/com/baeldung/spring/redis/configuration/repository/BooksRepositoryUnitTest.java
Patch:
@@ -11,16 +11,16 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.Spy;
+import org.mockito.junit.MockitoJUnitRunner;
 import org.springframework.data.redis.core.RedisTemplate;
 import org.springframework.data.redis.core.ValueOperations;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 import com.baeldung.spring.redis.configuration.entity.Book;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(MockitoJUnitRunner.class)
 public class BooksRepositoryUnitTest {
 
-    @Spy
     @InjectMocks
     private BooksRepository booksRepository;
 

File: java-native/src/test/java/com/baeldung/jvmbitversion/JVMBitVersionUnitTest.java
Patch:
@@ -5,7 +5,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import com.baeldung.jvmbitversion.JVMBitVersion;
 import com.sun.jna.Platform;
 
 public class JVMBitVersionUnitTest {
@@ -19,9 +18,9 @@ public void setup() {
 
     @Test
     public void whenUsingSystemClass_thenOutputIsAsExpected() {
-        if (System.getProperty("sun.arch.data.model") == "64") {
+        if ("64".equals(System.getProperty("sun.arch.data.model"))) {
             assertEquals("64-bit", jvmVersion.getUsingSystemClass());
-        } else if (System.getProperty("sun.arch.data.model") == "32") {
+        } else if ("32".equals(System.getProperty("sun.arch.data.model"))) {
             assertEquals("32-bit", jvmVersion.getUsingSystemClass());
         }
     }

File: java-native/src/test/java/com/baeldung/jvmbitversion/JVMBitVersionUnitTest.java
Patch:
@@ -5,7 +5,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import com.baeldung.jvmbitversion.JVMBitVersion;
 import com.sun.jna.Platform;
 
 public class JVMBitVersionUnitTest {
@@ -19,9 +18,9 @@ public void setup() {
 
     @Test
     public void whenUsingSystemClass_thenOutputIsAsExpected() {
-        if (System.getProperty("sun.arch.data.model") == "64") {
+        if ("64".equals(System.getProperty("sun.arch.data.model"))) {
             assertEquals("64-bit", jvmVersion.getUsingSystemClass());
-        } else if (System.getProperty("sun.arch.data.model") == "32") {
+        } else if ("32".equals(System.getProperty("sun.arch.data.model"))) {
             assertEquals("32-bit", jvmVersion.getUsingSystemClass());
         }
     }

File: core-java-modules/core-java-exceptions-3/src/test/java/com/baeldung/exceptions/illegalmonitorstate/IllegalMonitorStateExceptionUnitTest.java
Patch:
@@ -20,6 +20,8 @@ void whenSyncSenderAndSyncReceiverAreUsed_thenIllegalMonitorExceptionShouldNotBe
 
         senderThread.join(1000);
         receiverThread.join(1000);
+        
+        Thread.sleep(2000);
 
         assertEquals("test", receiver.getMessage());
         assertFalse(sender.hasIllegalMonitorStateExceptionOccurred());

File: core-java-modules/core-java-exceptions-3/src/test/java/com/baeldung/exceptions/illegalmonitorstate/IllegalMonitorStateExceptionUnitTest.java
Patch:
@@ -20,6 +20,8 @@ void whenSyncSenderAndSyncReceiverAreUsed_thenIllegalMonitorExceptionShouldNotBe
 
         senderThread.join(1000);
         receiverThread.join(1000);
+        
+        Thread.sleep(2000);
 
         assertEquals("test", receiver.getMessage());
         assertFalse(sender.hasIllegalMonitorStateExceptionOccurred());

File: spring-boot-modules/spring-boot-crud/src/main/java/com/baeldung/crud/controllers/UserController.java
Patch:
@@ -24,7 +24,7 @@ public UserController(UserRepository userRepository) {
     }
     
     @GetMapping("/index")
-    public String userList() {
+    public String showUserList(Model model) {
         model.addAttribute("users", userRepository.findAll());
         return "index";
     }

File: spring-boot-modules/spring-boot-crud/src/test/java/com/baeldung/crud/UserControllerUnitTest.java
Patch:
@@ -78,6 +78,6 @@ public void whenCalledupdateUserAndInValidUser_thenCorrect() {
     
     @Test(expected = IllegalArgumentException.class)
     public void whenCalleddeleteUser_thenIllegalArgumentException() {
-        assertThat(userController.deleteUser(1l, mockedModel)).isEqualTo("index");
+        assertThat(userController.deleteUser(1l, mockedModel)).isEqualTo("redirect:/index");
     }
 }

File: core-java-modules/core-java-exceptions-3/src/test/java/com/baeldung/exceptions/classcastexception/CheckedCastsUnitTest.java
Patch:
@@ -11,7 +11,7 @@ public void givenBaseTypeVariableReferencingChildInstance_whenCastToIncompatible
         Animal animal = new Frog();
 
         //A checked downcast to Mammal is incompatible from Frog because Frog is not a subtype of Mammal.
-        Mammal mammal1 = (Mammal) animal;
+        Mammal mammal = (Mammal) animal;
     }
 
     @Test(expected = ClassCastException.class)

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/removal/OrderRequest.java
Patch:
@@ -1,13 +1,13 @@
 package com.baeldung.jpa.removal;
 
-import java.util.List;
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.OneToMany;
 import javax.persistence.OneToOne;
+import java.util.List;
 
 @Entity
 public class OrderRequest {
@@ -34,5 +34,6 @@ public void removeLineItem(LineItem lineItem) {
         lineItems.remove(lineItem);
     }
 
-    protected OrderRequest() {}
+    protected OrderRequest() {
+    }
 }

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/removal/ShipmentInfo.java
Patch:
@@ -18,5 +18,6 @@ public ShipmentInfo(String name) {
         this.name = name;
     }
 
-    protected ShipmentInfo() {}
+    protected ShipmentInfo() {
+    }
 }

File: core-java-modules/core-java-time-measurements/src/test/java/com/baeldung/time/ElapsedTimeManualTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.apache.commons.lang3.time.StopWatch;
 import org.junit.Test;
 
-public class ElapsedTimeUnitTest {
+public class ElapsedTimeManualTest {
 
     @Test
     public void givenRunningTask_whenMeasuringTimeWithCurrentTimeMillis_thenGetElapsedTime() throws InterruptedException {
@@ -55,7 +55,7 @@ public void givenRunningTask_whenMeasuringTimeWithStopWatch_thenGetElapsedTime()
      The below test depends on the elapsed time, which isn't ideal in a test.
      Also, it slows down test execution artificially.
      */
-    /*@Test
+    @Test
     public void givenRunningTask_whenMeasuringTimeWithInstantClass_thenGetElapsedTime() throws InterruptedException {
         Instant start = Instant.now();
         System.out.println("start: " + start);
@@ -70,7 +70,7 @@ public void givenRunningTask_whenMeasuringTimeWithInstantClass_thenGetElapsedTim
 
         System.out.println("elapsed: " + timeElapsed);
         assertEquals(true, (2000L <= timeElapsed) && (timeElapsed <= 3000L));
-    }*/
+    }
     
     /**
      * Simulate task running for 2.5 seconds.

File: javafx/src/main/java/com/baeldung/view/SearchController.java
Patch:
@@ -44,7 +44,7 @@ private void initialize() {
         // search panel
         searchButton.setText("Search");
         searchButton.setOnAction(event -> loadData());
-        searchButton.setStyle("-fx-background-color: #457ecd; -fx-text-fill: #ffffff;");
+        searchButton.setStyle("-fx-background-color: slateblue; -fx-text-fill: white;");
 
         searchField.setOnKeyPressed(event -> {
             if (event.getCode().equals(KeyCode.ENTER)) {

File: javafx/src/main/java/com/baeldung/view/SearchController.java
Patch:
@@ -62,14 +62,16 @@ private void initialize() {
 
     private void initTable() {        
         tableView = new TableView<>(FXCollections.observableList(masterData));
+        tableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
+
         TableColumn id = new TableColumn("ID");
         id.setCellValueFactory(new PropertyValueFactory("id"));
         TableColumn name = new TableColumn("NAME");
         name.setCellValueFactory(new PropertyValueFactory("name"));
         TableColumn employed = new TableColumn("EMPLOYED");
         employed.setCellValueFactory(new PropertyValueFactory("isEmployed"));
-
         tableView.getColumns().addAll(id, name, employed);
+        
         dataContainer.getChildren().add(tableView);
     }
 

File: core-java-modules/core-java-11/src/test/java/com/baeldung/java11/httpclient/test/HttpClientUnitTest.java
Patch:
@@ -64,7 +64,7 @@ public void shouldNotFollowRedirectWhenSetToDefaultNever() throws IOException, I
             .send(request, HttpResponse.BodyHandlers.ofString());
 
         assertThat(response.statusCode(), equalTo(HttpURLConnection.HTTP_MOVED_PERM));
-        assertThat(response.body(), containsString("https://stackoverflow.com/"));
+        assertTrue(response.headers().map().get("location").stream().anyMatch("https://stackoverflow.com/"::equals));
     }
 
     @Test

File: core-java-modules/core-java-time-measurements/src/test/java/com/baeldung/time/InstantUnitTest.java
Patch:
@@ -10,8 +10,8 @@
 import java.time.ZoneId;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.when;
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({ Instant.class })

File: core-java-modules/core-java-datetime-string/src/test/java/com/baeldung/date/StringToDateUnitTest.java
Patch:
@@ -58,7 +58,8 @@ public void givenDateString_whenConvertedToDate_thenWeGetCorrectZonedDateTime()
         LocalDateTime localDateTime = LocalDateTime.of(2015, 05, 05, 10, 15, 30);
         ZonedDateTime expectedZonedDateTime = ZonedDateTime.of(localDateTime, ZoneId.of("Europe/Paris"));
 
-        ZonedDateTime zonedDateTime = ZonedDateTime.parse("2015-05-05T10:15:30+01:00[Europe/Paris]");
+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss z");
+        ZonedDateTime zonedDateTime = ZonedDateTime.parse("2015-05-05 10:15:30 Europe/Paris", formatter);
 
         assertThat(zonedDateTime).isEqualTo(expectedZonedDateTime);
     }

File: core-java-modules/core-java-os/src/test/java/com/baeldung/processbuilder/ProcessBuilderUnitTest.java
Patch:
@@ -40,7 +40,7 @@ public void givenProcessBuilder_whenInvokeStart_thenSuccess() throws IOException
 
         List<String> results = readOutput(process.getInputStream());
         assertThat("Results should not be empty", results, is(not(empty())));
-        assertThat("Results should contain java version: ", results, hasItem(containsString("java version")));
+        assertThat("Results should contain java version: ", results, hasItem(containsString("version")));
 
         int exitCode = process.waitFor();
         assertEquals("No errors should be detected", 0, exitCode);
@@ -101,7 +101,7 @@ public void givenProcessBuilder_whenRedirectStandardOutput_thenSuccessWriting()
             .collect(Collectors.toList());
 
         assertThat("Results should not be empty", lines, is(not(empty())));
-        assertThat("Results should contain java version: ", lines, hasItem(containsString("java version")));
+        assertThat("Results should contain java version: ", lines, hasItem(containsString("version")));
     }
 
     @Test
@@ -124,7 +124,7 @@ public void givenProcessBuilder_whenRedirectStandardOutput_thenSuccessAppending(
             .collect(Collectors.toList());
 
         assertThat("Results should not be empty", lines, is(not(empty())));
-        assertThat("Results should contain java version: ", lines, hasItem(containsString("java version")));
+        assertThat("Results should contain java version: ", lines, hasItem(containsString("version")));
     }
 
     @Test

File: persistence-modules/hibernate-jpa/src/main/java/com/baeldung/hibernate/jpabootstrap/application/Application.java
Patch:
@@ -8,7 +8,7 @@ public class Application {
     
     public static void main(String[] args) {
         EntityManager entityManager = getJpaEntityManager();
-        User user = entityManager.find(User.class, 1);
+        User user = entityManager.find(User.class, 1l);
         System.out.println(user);
         entityManager.getTransaction().begin();
         user.setName("John");

File: persistence-modules/hibernate-jpa/src/main/java/com/baeldung/hibernate/onetoone/sharedkeybased/Address.java
Patch:
@@ -1,9 +1,9 @@
 package com.baeldung.hibernate.onetoone.sharedkeybased;
 
-
 import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.JoinColumn;
 import javax.persistence.MapsId;
 import javax.persistence.OneToOne;
 import javax.persistence.Table;
@@ -13,7 +13,7 @@
 public class Address {
 
     @Id
-    @Column(name = "id")
+    @Column(name = "user_id")
     private Long id;
 
     @Column(name = "street")
@@ -24,6 +24,7 @@ public class Address {
 
     @OneToOne
     @MapsId
+    @JoinColumn(name = "user_id")
     private User user;
 
     public Long getId() {

File: persistence-modules/hibernate-jpa/src/main/java/com/baeldung/hibernate/onetoone/sharedkeybased/User.java
Patch:
@@ -8,6 +8,7 @@
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.OneToOne;
+import javax.persistence.PrimaryKeyJoinColumn;
 import javax.persistence.Table;
 
 @Entity
@@ -22,6 +23,7 @@ public class User {
     private String userName;
 
     @OneToOne(mappedBy = "user", cascade = CascadeType.ALL)
+    @PrimaryKeyJoinColumn
     private Address address;
 
     public Long getId() {

File: spring-mvc-basics-2/src/main/java/com/baeldung/spring/configuration/EmailConfiguration.java
Patch:
@@ -119,7 +119,7 @@ public FreeMarkerConfigurer freemarkerClassLoaderConfig() {
     @Bean
     public ResourceBundleMessageSource emailMessageSource() {
         final ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
-        messageSource.setBasename("/mailMessages");
+        messageSource.setBasename("mailMessages");
         return messageSource;
     }
 

File: persistence-modules/spring-data-redis/src/main/java/com/baeldung/spring/data/redis/config/RedisConfig.java
Patch:
@@ -5,7 +5,6 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
-import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
 import org.springframework.data.redis.core.RedisTemplate;
 import org.springframework.data.redis.listener.ChannelTopic;
 import org.springframework.data.redis.listener.RedisMessageListenerContainer;

File: persistence-modules/spring-data-redis/src/main/java/com/baeldung/spring/data/redis/config/RedisConfig.java
Patch:
@@ -5,7 +5,6 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
-import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
 import org.springframework.data.redis.core.RedisTemplate;
 import org.springframework.data.redis.listener.ChannelTopic;
 import org.springframework.data.redis.listener.RedisMessageListenerContainer;

File: core-java-modules/core-java-9-jigsaw/src/modules/com.baeldung.student.service.dbimpl/com/baeldung/student/service/dbimpl/StudentDbService.java
Patch:
@@ -19,12 +19,12 @@ public Student read(String registrationId) {
     }
 
     public Student update(Student student) {
-        logger.log(Level.INFO, "Updating sutdent in DB...");
+        logger.log(Level.INFO, "Updating student in DB...");
         return student;
     }
 
     public String delete(String registrationId) {
-        logger.log(Level.INFO, "Deleteing sutdent in DB...");
+        logger.log(Level.INFO, "Deleting student in DB...");
         return registrationId;
     }
 }
\ No newline at end of file

File: core-java-modules/core-java-9-jigsaw/src/modules/com.baeldung.student.service.dbimpl/com/baeldung/student/service/dbimpl/StudentDbService.java
Patch:
@@ -19,12 +19,12 @@ public Student read(String registrationId) {
     }
 
     public Student update(Student student) {
-        logger.log(Level.INFO, "Updating sutdent in DB...");
+        logger.log(Level.INFO, "Updating student in DB...");
         return student;
     }
 
     public String delete(String registrationId) {
-        logger.log(Level.INFO, "Deleteing sutdent in DB...");
+        logger.log(Level.INFO, "Deleting student in DB...");
         return registrationId;
     }
 }
\ No newline at end of file

File: persistence-modules/spring-persistence-simple/src/test/java/com/baeldung/transactional/TransactionalDetectionTest.java
Patch:
@@ -1,17 +1,16 @@
 package com.baeldung.transactional;
 
-import com.baeldung.persistence.service.transactional.PersistenceTransactionalTestConfig;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.springframework.test.context.ContextConfiguration;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.transaction.support.TransactionSynchronizationManager;
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-@ContextConfiguration(classes = PersistenceTransactionalTestConfig.class)
+@SpringBootApplication
 @RunWith(SpringJUnit4ClassRunner.class)
 public class TransactionalDetectionTest {
 

File: netflix-modules/mantis/src/main/java/com/baeldung/netflix/mantis/MantisApplication.java
Patch:
@@ -1,7 +1,6 @@
 package com.baeldung.netflix.mantis;
 
 import com.baeldung.netflix.mantis.job.LogAggregationJob;
-import com.baeldung.netflix.mantis.job.LogCollectingJob;
 import io.mantisrx.runtime.executor.LocalJobExecutorNetworked;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.boot.CommandLineRunner;

File: netflix-modules/mantis/src/main/java/com/baeldung/netflix/mantis/job/LogCollectingJob.java
Patch:
@@ -9,7 +9,6 @@
 import io.mantisrx.runtime.MantisJobProvider;
 import io.mantisrx.runtime.Metadata;
 import io.mantisrx.runtime.ScalarToScalar;
-import io.mantisrx.runtime.sink.Sinks;
 import lombok.extern.slf4j.Slf4j;
 
 @Slf4j
@@ -21,7 +20,6 @@ public Job<LogEvent> getJobInstance() {
         return MantisJob
           .source(new RandomLogSource())
           .stage(new TransformLogStage(), new ScalarToScalar.Config<>())
-//          .sink(Sinks.eagerSubscribe(Sinks.sse(LogEvent::toJsonString)))
           .sink(new LogSink())
           .metadata(new Metadata.Builder().build())
           .create();

File: netflix-modules/mantis/src/main/java/com/baeldung/netflix/mantis/model/LogAggregate.java
Patch:
@@ -19,7 +19,6 @@ public String toJsonString() {
         try {
             return mapper.writeValueAsString(this);
         } catch (JsonProcessingException e) {
-            e.printStackTrace();
             return null;
         }
     }

File: netflix-modules/mantis/src/main/java/com/baeldung/netflix/mantis/model/LogEvent.java
Patch:
@@ -28,7 +28,6 @@ public String toJsonString() {
         try {
             return mapper.writeValueAsString(this);
         } catch (JsonProcessingException e) {
-            e.printStackTrace();
             return null;
         }
     }

File: spring-5-reactive-security/src/main/java/com/baeldung/reactive/security/SpringSecurity5Application.java
Patch:
@@ -28,7 +28,7 @@ public DisposableServer disposableServer(ApplicationContext context) {
         HttpHandler handler = WebHttpHandlerBuilder.applicationContext(context)
                 .build();
         ReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(handler);
-        HttpServer httpServer = HttpServer.create().host("localhost").port(8080);
+        HttpServer httpServer = HttpServer.create().host("localhost").port(8083);
         return httpServer.handle(adapter).bindNow();
     }
 

File: spring-mvc-basics-4/src/main/java/com/baeldung/controller/config/WebConfig.java
Patch:
@@ -11,7 +11,7 @@
 
 @Configuration
 @EnableWebMvc
-@ComponentScan(basePackages = { "com.baeldung.controller.controller", "com.baeldung.controller", "com.baeldung.controller.config" })
+@ComponentScan(basePackages = { "com.baeldung.controller", "com.baeldung.optionalpathvars" })
 public class WebConfig implements WebMvcConfigurer {
     @Override
     public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {

File: spring-mvc-basics-4/src/main/java/com/baeldung/controller/config/WebConfig.java
Patch:
@@ -11,7 +11,7 @@
 
 @Configuration
 @EnableWebMvc
-@ComponentScan(basePackages = { "com.baeldung.controller.controller", "com.baeldung.controller", "com.baeldung.controller.config" })
+@ComponentScan(basePackages = { "com.baeldung.controller", "com.baeldung.optionalpathvars" })
 public class WebConfig implements WebMvcConfigurer {
     @Override
     public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {

File: lombok/src/main/java/com/baeldung/lombok/builder/RequiredFieldAnnotation.java
Patch:
@@ -8,7 +8,8 @@
 @Getter
 public class RequiredFieldAnnotation {
 
-    @NonNull String name;
+    @NonNull
+    String name;
     String description;
 
     public static RequiredFieldAnnotationBuilder builder(String name) {

File: core-java-modules/core-java-10/src/test/java/com/baeldung/AppUnitTest.java
Patch:
@@ -7,15 +7,15 @@
 /**
  * Unit test for simple App.
  */
-public class AppTest 
+public class AppUnitTest
     extends TestCase
 {
     /**
      * Create the test case
      *
      * @param testName name of the test case
      */
-    public AppTest( String testName )
+    public AppUnitTest(String testName )
     {
         super( testName );
     }
@@ -25,7 +25,7 @@ public AppTest( String testName )
      */
     public static Test suite()
     {
-        return new TestSuite( AppTest.class );
+        return new TestSuite( AppUnitTest.class );
     }
 
     /**

File: core-java-modules/core-java-12/src/test/java/com/baeldung/string/StringAPIUnitTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import org.junit.Test;
 
-public class StringAPITest {
+public class StringAPIUnitTest {
 
     @Test
     public void whenPositiveArgument_thenReturnIndentedString() {

File: core-java-modules/core-java-14/src/test/java/com/baeldung/java14/record/PersonUnitTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.junit.Test;
 
-public class PersonTest {
+public class PersonUnitTest {
 
     @Test
     public void givenSameNameAndAddress_whenEquals_thenPersonsEqual() {

File: core-java-modules/core-java-9/src/test/java/com/baeldung/java9/methodhandles/MethodHandlesUnitTest.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Test case for the {@link MethodHandles} API
  */
-public class MethodHandlesTest {
+public class MethodHandlesUnitTest {
 
     @Test
     public void givenConcatMethodHandle_whenInvoked_thenCorrectlyConcatenated() throws Throwable {

File: core-java-modules/core-java-datetime-string/src/test/java/com/baeldung/timestamp/TimestampToStringConverterUnitTest.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.Timestamp;
 import java.time.format.DateTimeFormatter;
 
-public class TimestampToStringConverterTest {
+public class TimestampToStringConverterUnitTest {
 
     @Test
     public void givenDatePattern_whenFormatting_thenResultingStringIsCorrect() {

File: core-java-modules/core-java-os/src/test/java/com/baeldung/core/pwd/CurrentDirectoryFetcherUnitTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import org.junit.Test;
 
-public class CurrentDirectoryFetcherTest {
+public class CurrentDirectoryFetcherUnitTest {
 
     private static final String CURRENT_DIR = "core-java-os";
 

File: spring-security-modules/spring-security-web-rest/src/main/java/com/baeldung/spring/WebConfig.java
Patch:
@@ -12,7 +12,7 @@
 import org.springframework.web.servlet.view.InternalResourceViewResolver;
 
 @Configuration
-@ComponentScan("com.baeldung.web")
+@ComponentScan("com.baeldung")
 @EnableWebMvc
 @EnableAsync
 public class WebConfig implements WebMvcConfigurer  {

File: jackson-modules/jackson-custom-conversions/src/test/java/com/baeldung/serialization/CustomSerializationUnitTest.java
Patch:
@@ -24,7 +24,6 @@ public class CustomSerializationUnitTest {
     public final void whenSerializing_thenNoExceptions() throws JsonGenerationException, JsonMappingException, IOException {
         final Item myItem = new Item(1, "theItem", new User(2, "theUser"));
         final String serialized = new ObjectMapper().writeValueAsString(myItem);
-        System.out.println(serialized);
     }
 
     @Test
@@ -38,15 +37,13 @@ public final void whenSerializingWithCustomSerializer_thenNoExceptions() throws
         mapper.registerModule(simpleModule);
 
         final String serialized = mapper.writeValueAsString(myItem);
-        System.out.println(serialized);
     }
 
     @Test
     public final void givenSerializerRegisteredOnClass_whenSerializingWithCustomSerializer_thenNoExceptions() throws JsonGenerationException, JsonMappingException, IOException {
         final ItemWithSerializer myItem = new ItemWithSerializer(1, "theItem", new User(2, "theUser"));
 
         final String serialized = new ObjectMapper().writeValueAsString(myItem);
-        System.out.println(serialized);
     }
 
 }

File: jackson-modules/jackson-custom-conversions/src/test/java/com/baeldung/skipfields/IgnoreFieldsWithFilterUnitTest.java
Patch:
@@ -37,7 +37,6 @@ public final void givenTypeHasFilterThatIgnoresFieldByName_whenDtoIsSerialized_t
         assertThat(dtoAsString, not(containsString("intValue")));
         assertThat(dtoAsString, containsString("booleanValue"));
         assertThat(dtoAsString, containsString("stringValue"));
-        System.out.println(dtoAsString);
     }
 
     @Test
@@ -83,7 +82,6 @@ protected final boolean include(final PropertyWriter writer) {
         assertThat(dtoAsString, not(containsString("intValue")));
         assertThat(dtoAsString, containsString("booleanValue"));
         assertThat(dtoAsString, containsString("stringValue"));
-        System.out.println(dtoAsString);
     }
 
 }

File: persistence-modules/spring-data-jpa-enterprise/src/main/java/com/baeldung/multipledb/dao/user/PossessionRepository.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.springframework.data.jpa.repository.JpaRepository;
 
-import com.baeldung.multipledb.model.user.PossessionMultipleDB;
+import com.baeldung.multipledb.model.user.Possession;
 
-public interface PossessionRepository extends JpaRepository<PossessionMultipleDB, Long> {
+public interface PossessionRepository extends JpaRepository<Possession, Long> {
 
 }

File: persistence-modules/spring-data-jpa-enterprise/src/main/java/com/baeldung/multipledb/dao/user/UserRepository.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.data.jpa.repository.JpaRepository;
 
-import com.baeldung.multipledb.model.user.UserMultipleDB;
+import com.baeldung.multipledb.model.user.User;
 
-public interface UserRepository extends JpaRepository<UserMultipleDB, Integer> {
+public interface UserRepository extends JpaRepository<User, Integer> {
 }
\ No newline at end of file

File: spring-security-modules/spring-security-web-rest/src/main/java/com/baeldung/spring/WebConfig.java
Patch:
@@ -12,7 +12,7 @@
 import org.springframework.web.servlet.view.InternalResourceViewResolver;
 
 @Configuration
-@ComponentScan("com.baeldung.web")
+@ComponentScan("com.baeldung")
 @EnableWebMvc
 @EnableAsync
 public class WebConfig implements WebMvcConfigurer  {

File: spring-5-reactive/src/main/java/com/baeldung/reactive/errorhandling/GlobalErrorWebExceptionHandler.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 import org.springframework.boot.autoconfigure.web.ResourceProperties;
 import org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler;
+import org.springframework.boot.web.error.ErrorAttributeOptions;
 import org.springframework.boot.web.reactive.error.ErrorAttributes;
 import org.springframework.context.ApplicationContext;
 import org.springframework.core.annotation.Order;
@@ -37,7 +38,7 @@ protected RouterFunction<ServerResponse> getRoutingFunction(final ErrorAttribute
 
     private Mono<ServerResponse> renderErrorResponse(final ServerRequest request) {
 
-        final Map<String, Object> errorPropertiesMap = getErrorAttributes(request, false);
+        final Map<String, Object> errorPropertiesMap = getErrorAttributes(request, ErrorAttributeOptions.defaults());
 
         return ServerResponse.status(HttpStatus.BAD_REQUEST)
             .contentType(MediaType.APPLICATION_JSON_UTF8)

File: spring-boot-modules/spring-boot-testing/src/test/java/com/baeldung/testloglevel/LogbackMultiProfileTestLogLevelIntegrationTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.test.rule.OutputCapture;
+import org.springframework.boot.test.system.OutputCaptureRule;
 import org.springframework.boot.test.web.client.TestRestTemplate;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.annotation.DirtiesContext;
@@ -29,7 +29,7 @@ public class LogbackMultiProfileTestLogLevelIntegrationTest {
     private TestRestTemplate restTemplate;
 
     @Rule
-    public OutputCapture outputCapture = new OutputCapture();
+    public OutputCaptureRule outputCapture = new OutputCaptureRule();
 
     private String baseUrl = "/testLogLevel";
 

File: spring-boot-modules/spring-boot-testing/src/test/java/com/baeldung/testloglevel/LogbackTestLogLevelIntegrationTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.test.rule.OutputCapture;
+import org.springframework.boot.test.system.OutputCaptureRule;
 import org.springframework.boot.test.web.client.TestRestTemplate;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.annotation.DirtiesContext;
@@ -29,7 +29,7 @@ public class LogbackTestLogLevelIntegrationTest {
     private TestRestTemplate restTemplate;
 
     @Rule
-    public OutputCapture outputCapture = new OutputCapture();
+    public OutputCaptureRule outputCapture = new OutputCaptureRule();
 
     private String baseUrl = "/testLogLevel";
 

File: spring-boot-modules/spring-boot-testing/src/test/java/com/baeldung/testloglevel/TestLogLevelWithProfileIntegrationTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.test.rule.OutputCapture;
+import org.springframework.boot.test.system.OutputCaptureRule;
 import org.springframework.boot.test.web.client.TestRestTemplate;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.annotation.DirtiesContext;
@@ -29,7 +29,7 @@ public class TestLogLevelWithProfileIntegrationTest {
     private TestRestTemplate restTemplate;
 
     @Rule
-    public OutputCapture outputCapture = new OutputCapture();
+    public OutputCaptureRule outputCapture = new OutputCaptureRule();
 
     private String baseUrl = "/testLogLevel";
 

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/Article.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 public class Article {
 

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/ArticleViewerController.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
-import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;
+import static com.baeldung.optionalpathvars.Article.DEFAULT_ARTICLE;
 
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/ArticleViewerWithMapParamController.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
-import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;
+import static com.baeldung.optionalpathvars.Article.DEFAULT_ARTICLE;
 
 import java.util.Map;
 

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/ArticleViewerWithOptionalParamController.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
-import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;
+import static com.baeldung.optionalpathvars.Article.DEFAULT_ARTICLE;
 
 import java.util.Optional;
 

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/ArticleViewerWithRequiredAttributeController.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
-import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;
+import static com.baeldung.optionalpathvars.Article.DEFAULT_ARTICLE;
 
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/ArticleViewerWithTwoSeparateMethodsController.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
-import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;
+import static com.baeldung.optionalpathvars.Article.DEFAULT_ARTICLE;
 
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;

File: spring-mvc-basics-4/src/test/java/com/baeldung/optionalpathvars/ArticleViewerControllerIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 import org.junit.Before;
 import org.junit.Test;

File: spring-mvc-basics-4/src/test/java/com/baeldung/optionalpathvars/ArticleViewerControllerWithOptionalParamIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 import org.junit.Before;
 import org.junit.Test;

File: spring-mvc-basics-4/src/test/java/com/baeldung/optionalpathvars/ArticleViewerControllerWithRequiredAttributeIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 import org.junit.Before;
 import org.junit.Test;

File: spring-mvc-basics-4/src/test/java/com/baeldung/optionalpathvars/ArticleViewerWithMapParamIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 import org.junit.Before;
 import org.junit.Test;

File: spring-mvc-basics-4/src/test/java/com/baeldung/optionalpathvars/ArticleViewerWithTwoSeparateMethodsIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 import org.junit.Before;
 import org.junit.Test;

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/Article.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 public class Article {
 

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/ArticleViewerController.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
-import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;
+import static com.baeldung.optionalpathvars.Article.DEFAULT_ARTICLE;
 
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/ArticleViewerWithMapParamController.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
-import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;
+import static com.baeldung.optionalpathvars.Article.DEFAULT_ARTICLE;
 
 import java.util.Map;
 

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/ArticleViewerWithOptionalParamController.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
-import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;
+import static com.baeldung.optionalpathvars.Article.DEFAULT_ARTICLE;
 
 import java.util.Optional;
 

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/ArticleViewerWithRequiredAttributeController.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
-import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;
+import static com.baeldung.optionalpathvars.Article.DEFAULT_ARTICLE;
 
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;

File: spring-mvc-basics-4/src/main/java/com/baeldung/optionalpathvars/ArticleViewerWithTwoSeparateMethodsController.java
Patch:
@@ -1,6 +1,6 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
-import static com.baeldung.controller.optionalpathvars.Article.DEFAULT_ARTICLE;
+import static com.baeldung.optionalpathvars.Article.DEFAULT_ARTICLE;
 
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;

File: spring-mvc-basics-4/src/test/java/com/baeldung/optionalpathvars/ArticleViewerControllerIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 import org.junit.Before;
 import org.junit.Test;

File: spring-mvc-basics-4/src/test/java/com/baeldung/optionalpathvars/ArticleViewerControllerWithOptionalParamIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 import org.junit.Before;
 import org.junit.Test;

File: spring-mvc-basics-4/src/test/java/com/baeldung/optionalpathvars/ArticleViewerControllerWithRequiredAttributeIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 import org.junit.Before;
 import org.junit.Test;

File: spring-mvc-basics-4/src/test/java/com/baeldung/optionalpathvars/ArticleViewerWithMapParamIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 import org.junit.Before;
 import org.junit.Test;

File: spring-mvc-basics-4/src/test/java/com/baeldung/optionalpathvars/ArticleViewerWithTwoSeparateMethodsIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.controller.optionalpathvars;
+package com.baeldung.optionalpathvars;
 
 import org.junit.Before;
 import org.junit.Test;

File: persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/template/guide/config/SpringJdbcConfig.java
Patch:
@@ -10,7 +10,7 @@
 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
 
 @Configuration
-@ComponentScan("com.baeldung.spring.jdbc")
+@ComponentScan("com.baeldung.spring.jdbc.template.guide")
 public class SpringJdbcConfig {
 
     @Bean

File: restx/src/test/java/restx/demo/rest/HelloResourceSpecIntegrationTest.java
Patch:
@@ -7,7 +7,7 @@
 
 @RunWith(RestxSpecTestsRunner.class)
 @FindSpecsIn("specs/hello")
-public class HelloResourceSpecUnitTest {
+public class HelloResourceSpecIntegrationTest {
 
     /**
      * Useless, thanks to both @RunWith(RestxSpecTestsRunner.class) & @FindSpecsIn()

File: core-java-modules/core-java-10/src/test/java/com/baeldung/AppUnitTest.java
Patch:
@@ -7,15 +7,15 @@
 /**
  * Unit test for simple App.
  */
-public class AppTest 
+public class AppUnitTest
     extends TestCase
 {
     /**
      * Create the test case
      *
      * @param testName name of the test case
      */
-    public AppTest( String testName )
+    public AppUnitTest(String testName )
     {
         super( testName );
     }
@@ -25,7 +25,7 @@ public AppTest( String testName )
      */
     public static Test suite()
     {
-        return new TestSuite( AppTest.class );
+        return new TestSuite( AppUnitTest.class );
     }
 
     /**

File: core-java-modules/core-java-12/src/test/java/com/baeldung/string/StringAPIUnitTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import org.junit.Test;
 
-public class StringAPITest {
+public class StringAPIUnitTest {
 
     @Test
     public void whenPositiveArgument_thenReturnIndentedString() {

File: core-java-modules/core-java-14/src/test/java/com/baeldung/java14/record/PersonUnitTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.junit.Test;
 
-public class PersonTest {
+public class PersonUnitTest {
 
     @Test
     public void givenSameNameAndAddress_whenEquals_thenPersonsEqual() {

File: core-java-modules/core-java-9/src/test/java/com/baeldung/java9/methodhandles/MethodHandlesUnitTest.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Test case for the {@link MethodHandles} API
  */
-public class MethodHandlesTest {
+public class MethodHandlesUnitTest {
 
     @Test
     public void givenConcatMethodHandle_whenInvoked_thenCorrectlyConcatenated() throws Throwable {

File: core-java-modules/core-java-datetime-string/src/test/java/com/baeldung/timestamp/TimestampToStringConverterUnitTest.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.Timestamp;
 import java.time.format.DateTimeFormatter;
 
-public class TimestampToStringConverterTest {
+public class TimestampToStringConverterUnitTest {
 
     @Test
     public void givenDatePattern_whenFormatting_thenResultingStringIsCorrect() {

File: core-java-modules/core-java-os/src/test/java/com/baeldung/core/pwd/CurrentDirectoryFetcherUnitTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import org.junit.Test;
 
-public class CurrentDirectoryFetcherTest {
+public class CurrentDirectoryFetcherUnitTest {
 
     private static final String CURRENT_DIR = "core-java-os";
 

File: core-java-modules/core-java-11-2/src/test/java/com/baeldung/optional/OptionalChainingUnitTest.java
Patch:
@@ -7,7 +7,9 @@
 import java.util.function.Supplier;
 import java.util.stream.Stream;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class OptionalChainingUnitTest {
 

File: json/src/main/java/com/baeldung/jsonoptimization/CustomerDeserializer.java
Patch:
@@ -43,7 +43,7 @@ public Customer deserialize(JsonParser parser, DeserializationContext deserializ
         feedback.setPhoneNumber(phoneNumber.isNull() ? null : phoneNumber.asText());
         JsonNode email = node.get(8);
         feedback.setEmail(email.isNull() ? null : email.asText());
-        
+
         return feedback;
     }
 }

File: json/src/main/java/com/baeldung/jsonoptimization/CustomerSlimDeserializer.java
Patch:
@@ -31,7 +31,7 @@ public CustomerSlim deserialize(JsonParser parser, DeserializationContext deseri
             .asText());
         feedback.setAddress(node.get(2)
             .asText());
-        
+
         return feedback;
     }
 }

File: json/src/main/java/com/baeldung/jsonoptimization/CustomerSlimShortNames.java
Patch:
@@ -5,13 +5,13 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 
 public class CustomerSlimShortNames {
-    
+
     @JsonProperty("i")
     private long id;
-    
+
     @JsonProperty("n")
     private String name;
-    
+
     @JsonProperty("a")
     private String address;
 

File: persistence-modules/spring-data-jpa-query-2/src/main/java/com/baeldung/spring/data/jpa/query/datetime/Article.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.boot.domain;
+package com.baeldung.spring.data.jpa.query.datetime;
 
 import javax.persistence.*;
 import java.util.Date;

File: persistence-modules/spring-data-jpa-query-2/src/main/java/com/baeldung/spring/data/jpa/query/datetime/ArticleRepository.java
Patch:
@@ -1,11 +1,9 @@
-package com.baeldung.boot.daos;
+package com.baeldung.spring.data.jpa.query.datetime;
 
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 
-import com.baeldung.boot.domain.Article;
-
 import java.util.Date;
 import java.util.List;
 

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/spring/transactional/Car.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.transactional.entity;
+package com.baeldung.spring.transactional;
 
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/spring/transactional/CarRepository.java
Patch:
@@ -1,6 +1,5 @@
-package com.baeldung.spring.transactional.repository;
+package com.baeldung.spring.transactional;
 
-import com.baeldung.spring.transactional.entity.Car;
 import org.springframework.data.jpa.repository.JpaRepository;
 
 public interface CarRepository extends JpaRepository<Car, Long> {

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/spring/transactional/CarService.java
Patch:
@@ -1,7 +1,5 @@
-package com.baeldung.spring.transactional.service;
+package com.baeldung.spring.transactional;
 
-import com.baeldung.spring.transactional.entity.Car;
-import com.baeldung.spring.transactional.repository.CarRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Isolation;

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/spring/transactional/RentalService.java
Patch:
@@ -1,7 +1,5 @@
-package com.baeldung.spring.transactional.service;
+package com.baeldung.spring.transactional;
 
-import com.baeldung.spring.transactional.entity.Car;
-import com.baeldung.spring.transactional.repository.CarRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 

File: persistence-modules/spring-data-jpa-query-2/src/main/java/com/baeldung/spring/data/jpa/query/datetime/Article.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.boot.domain;
+package com.baeldung.spring.data.jpa.query.datetime;
 
 import javax.persistence.*;
 import java.util.Date;

File: persistence-modules/spring-data-jpa-query-2/src/main/java/com/baeldung/spring/data/jpa/query/datetime/ArticleRepository.java
Patch:
@@ -1,11 +1,9 @@
-package com.baeldung.boot.daos;
+package com.baeldung.spring.data.jpa.query.datetime;
 
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 
-import com.baeldung.boot.domain.Article;
-
 import java.util.Date;
 import java.util.List;
 

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/spring/transactional/Car.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.transactional.entity;
+package com.baeldung.spring.transactional;
 
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/spring/transactional/CarRepository.java
Patch:
@@ -1,6 +1,5 @@
-package com.baeldung.spring.transactional.repository;
+package com.baeldung.spring.transactional;
 
-import com.baeldung.spring.transactional.entity.Car;
 import org.springframework.data.jpa.repository.JpaRepository;
 
 public interface CarRepository extends JpaRepository<Car, Long> {

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/spring/transactional/CarService.java
Patch:
@@ -1,7 +1,5 @@
-package com.baeldung.spring.transactional.service;
+package com.baeldung.spring.transactional;
 
-import com.baeldung.spring.transactional.entity.Car;
-import com.baeldung.spring.transactional.repository.CarRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Isolation;

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/spring/transactional/RentalService.java
Patch:
@@ -1,7 +1,5 @@
-package com.baeldung.spring.transactional.service;
+package com.baeldung.spring.transactional;
 
-import com.baeldung.spring.transactional.entity.Car;
-import com.baeldung.spring.transactional.repository.CarRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 

File: core-java-modules/core-java-exceptions-3/src/test/java/com/baeldung/exceptions/illegalmonitorstate/IllegalMonitorStateExceptionUnitTest.java
Patch:
@@ -30,7 +30,7 @@ void whenSyncSenderAndSyncReceiverAreUsed_thenIllegalMonitorExceptionShouldNotBe
     void whenSyncSenderAndUnSyncReceiverAreUsed_thenIllegalMonitorExceptionShouldNotBeThrown() throws InterruptedException {
         Data data = new Data();
 
-        UnSynchronizedReceiver receiver = new UnSynchronizedReceiver(data);
+        UnsynchronizedReceiver receiver = new UnsynchronizedReceiver(data);
         Thread receiverThread = new Thread(receiver, "receiver-thread");
         receiverThread.start();
 
@@ -55,7 +55,7 @@ void whenUnSyncSenderAndSyncReceiverAreUsed_thenIllegalMonitorExceptionShouldBeT
         Thread receiverThread = new Thread(receiver, "receiver-thread");
         receiverThread.start();
 
-        UnSynchronizedSender sender = new UnSynchronizedSender(data);
+        UnsynchronizedSender sender = new UnsynchronizedSender(data);
         Thread senderThread = new Thread(sender, "sender-thread");
         senderThread.start();
 

File: spring-boot-modules/spring-boot-actuator/src/main/java/com/baeldung/endpoints/info/TotalUsersInfoContributor.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import com.baeldung.repository.UserRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.actuate.info.Info;
 import org.springframework.boot.actuate.info.InfoContributor;

File: spring-boot-modules/spring-boot-mvc/src/main/java/com/baeldung/internationalization/config/PageController.java
Patch:
@@ -8,7 +8,7 @@ public class PageController {
 
     @GetMapping("/international")
     public String getInternationalPage() {
-        return "international";
+        return "thymeleaf/international";
     }
 
 }

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/equality/EqualByBusinessKey.java
Patch:
@@ -44,7 +44,7 @@ public boolean equals(Object obj) {
             return false;
         }
         if (obj instanceof EqualByBusinessKey) {
-            if (((EqualByBusinessKey) obj).getEmail() == getEmail()) {
+            if (((EqualByBusinessKey) obj).getEmail().equals(getEmail())) {
                 return true;
             }
         }

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/equality/EqualByBusinessKey.java
Patch:
@@ -44,7 +44,7 @@ public boolean equals(Object obj) {
             return false;
         }
         if (obj instanceof EqualByBusinessKey) {
-            if (((EqualByBusinessKey) obj).getEmail() == getEmail()) {
+            if (((EqualByBusinessKey) obj).getEmail().equals(getEmail())) {
                 return true;
             }
         }

File: core-java-modules/core-java-10/src/test/java/com/baeldung/java10/list/CopyListServiceUnitTest.java
Patch:
@@ -10,5 +10,6 @@ public class CopyListServiceUnitTest {
     @Test(expected = UnsupportedOperationException.class)
     public void whenModifyCopyOfList_thenThrowsException() {
         List<Integer> copyList = List.copyOf(Arrays.asList(1, 2, 3, 4));
+        copyList.add(4);
     }
 }

File: libraries-testing/src/main/java/com/baeldung/archunit/smurfs/persistence/SmurfsRepository.java
Patch:
@@ -24,7 +24,6 @@ public class SmurfsRepository {
         smurfs.put("Architect", new Smurf("Architect", true, true));
         smurfs.put("Baby", new Smurf("Baby", true, true));
         smurfs.put("Baker", new Smurf("Baker", true, true));
-        smurfs.put("Baker", new Smurf("Baker", true, true));
     }
 
     public List<Smurf> findAll() {

File: libraries-testing/src/main/java/com/baeldung/archunit/smurfs/persistence/domain/Smurf.java
Patch:
@@ -5,8 +5,6 @@ public class Smurf {
     private boolean comic;
     private boolean cartoon;
 
-    public Smurf() {}
-
     public Smurf(String name, boolean comic, boolean cartoon) {
         this.name = name;
         this.comic = comic;

File: core-java-modules/core-java-8-datetime/src/test/java/com/baeldung/datetime/UseDateTimeFormatterUnitTest.java
Patch:
@@ -31,6 +31,6 @@ public void givenALocalDate_whenFormattingWithPattern_thenPass() {
     public void givenALocalDate_whenFormattingWithStyleAndLocale_thenPass() {
         String result = subject.formatWithStyleAndLocale(localDateTime, FormatStyle.MEDIUM, Locale.UK);
 
-        assertThat(result).isEqualTo("25 Jan 2015, 06:30:00");
+        assertThat(result).isEqualTo("25-Jan-2015 06:30:00");
     }
 }
\ No newline at end of file

File: core-java-modules/core-java-8-datetime/src/test/java/com/baeldung/datetime/UseZonedDateTimeUnitTest.java
Patch:
@@ -54,7 +54,7 @@ public void givenLocalDateOrZoned_whenSettingStartOfDay_thenReturnMidnightInAllC
     @Test
     public void givenAStringWithTimeZone_whenParsing_thenEqualsExpected() {
         ZonedDateTime resultFromString = zonedDateTime.getZonedDateTimeUsingParseMethod("2015-05-03T10:15:30+01:00[Europe/Paris]");
-        ZonedDateTime resultFromLocalDateTime = ZonedDateTime.of(2015, 5, 3, 11, 15, 30, 0, ZoneId.of("Europe/Paris"));
+        ZonedDateTime resultFromLocalDateTime = ZonedDateTime.of(2015, 5, 3, 10, 15, 30, 0, ZoneId.of("Europe/Paris"));
 
         assertThat(resultFromString.getZone()).isEqualTo(ZoneId.of("Europe/Paris"));
         assertThat(resultFromLocalDateTime.getZone()).isEqualTo(ZoneId.of("Europe/Paris"));

File: spring-webflux-threads/src/main/java/com/baeldung/webflux/Application.java
Patch:
@@ -4,8 +4,8 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 /**
-* Please note that this assumes Mongo and Kafka to be running on the local machine on default configurations.
-* If you want to experiment with Tomcat/Jetty instead of Netty, just uncomment the lines in pom.xml and rebuild.
+* Please note we assume Mongo and Kafka are running in the local machine and on default configuration.
+* Additionally, if you want to experiment with Tomcat/Jetty instead of Netty, just uncomment the lines in pom.xml and rebuild.
 */
 @SpringBootApplication
 public class Application {

File: spring-boot-modules/spring-boot-properties-3/src/main/java/com/baeldung/boot/properties/DemoApplication.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.boot.properties;
 
-import com.baeldung.boot.data.config.TshirtSizeConfig;
+import com.baeldung.boot.properties.config.TshirtSizeConfig;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: spring-boot-modules/spring-boot-properties-3/src/main/java/com/baeldung/boot/properties/controller/TshirtSizeController.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.boot.properties.controller;
 
 import org.springframework.web.bind.annotation.*;
-import com.baeldung.boot.data.service.SizeConverterService;
+import com.baeldung.boot.properties.service.SizeConverterService;
 
 @RestController
 @RequestMapping(value = "/")

File: spring-boot-modules/spring-boot-properties-3/src/main/java/com/baeldung/boot/properties/service/SizeConverterImpl.java
Patch:
@@ -1,7 +1,7 @@
 package com.baeldung.boot.properties.service;
 
 import org.springframework.stereotype.Service;
-import com.baeldung.boot.data.config.TshirtSizeConfig;
+import com.baeldung.boot.properties.config.TshirtSizeConfig;
 
 
 @Service

File: spring-boot-modules/spring-boot-properties-3/src/test/java/com/baeldung/boot/properties/controller/TshirtSizeControllerTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
-import com.baeldung.boot.data.service.SizeConverterService;
+import com.baeldung.boot.properties.service.SizeConverterService;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.when;

File: spring-boot-modules/spring-boot-properties-3/src/main/java/com/baeldung/boot/properties/config/TshirtSizeConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.boot.data.config;
+package com.baeldung.boot.properties.config;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-boot-modules/spring-boot-properties-3/src/main/java/com/baeldung/boot/properties/controller/TshirtSizeController.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.boot.data.controller;
+package com.baeldung.boot.properties.controller;
 
 import org.springframework.web.bind.annotation.*;
 import com.baeldung.boot.data.service.SizeConverterService;

File: spring-boot-modules/spring-boot-properties-3/src/main/java/com/baeldung/boot/properties/service/SizeConverterImpl.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.boot.data.service;
+package com.baeldung.boot.properties.service;
 
 import org.springframework.stereotype.Service;
 import com.baeldung.boot.data.config.TshirtSizeConfig;

File: spring-boot-modules/spring-boot-properties-3/src/main/java/com/baeldung/boot/properties/service/SizeConverterService.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.boot.data.service;
+package com.baeldung.boot.properties.service;
 
 
 public interface SizeConverterService {

File: spring-boot-modules/spring-boot-properties-3/src/test/java/com/baeldung/boot/properties/controller/TshirtSizeControllerTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.boot.data.controller;
+package com.baeldung.boot.properties.controller;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;

File: spring-boot-modules/spring-boot-properties-3/src/main/java/com/baeldung/boot/properties/controller/TshirtSizeController.java
Patch:
@@ -14,8 +14,7 @@ public TshirtSizeController(SizeConverterService service) {
     }
 
     @RequestMapping(value ="convertSize", method = RequestMethod.GET)
-    public int convertSize(@RequestParam(value = "label") final String label,
-                                             @RequestParam(value = "countryCode", required = false) final String countryCode) {
+    public int convertSize(@RequestParam(value = "label") final String label, @RequestParam(value = "countryCode", required = false) final String countryCode) {
         return service.convertSize(label, countryCode);
     }
 

File: spring-kafka/src/main/java/com/baeldung/spring/kafka/KafkaTopicConfig.java
Patch:
@@ -20,7 +20,7 @@ public class KafkaTopicConfig {
     private String topicName;
 
     @Value(value = "${partitioned.topic.name}")
-    private String partionedTopicName;
+    private String partitionedTopicName;
 
     @Value(value = "${filtered.topic.name}")
     private String filteredTopicName;
@@ -42,7 +42,7 @@ public NewTopic topic1() {
 
     @Bean
     public NewTopic topic2() {
-        return new NewTopic(partionedTopicName, 6, (short) 1);
+        return new NewTopic(partitionedTopicName, 6, (short) 1);
     }
 
     @Bean

File: core-java-modules/core-java-io-3/src/test/java/com/baeldung/copydirectory/ApacheCommonsUnitTest.java
Patch:
@@ -16,10 +16,10 @@
 
 public class ApacheCommonsUnitTest {
 
-    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory";
+    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory3";
     private final String subDirectoryName = "/childDirectory";
     private final String fileName = "/file.txt";
-    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory";
+    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory3";
 
     @BeforeEach
     public void createDirectoryWithSubdirectoryAndFile() throws IOException {

File: core-java-modules/core-java-io-3/src/test/java/com/baeldung/copydirectory/CoreOldUnitTest.java
Patch:
@@ -16,10 +16,10 @@
 
 public class CoreOldUnitTest {
 
-    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory";
+    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory1";
     private final String subDirectoryName = "/childDirectory";
     private final String fileName = "/file.txt";
-    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory";
+    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory1";
 
     @BeforeEach
     public void createDirectoryWithSubdirectoryAndFile() throws IOException {

File: core-java-modules/core-java-io-3/src/test/java/com/baeldung/copydirectory/JavaNioUnitTest.java
Patch:
@@ -16,10 +16,10 @@
 
 public class JavaNioUnitTest {
 
-    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory";
+    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory2";
     private final String subDirectoryName = "/childDirectory";
     private final String fileName = "/file.txt";
-    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory";
+    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory2";
 
     @BeforeEach
     public void createDirectoryWithSubdirectoryAndFile() throws IOException {

File: spring-boot-modules/spring-boot-data-2/src/main/java/com/baeldung/boot/data/DemoApplication.java
Patch:
@@ -1,9 +1,9 @@
-package yamltopojo.demo;
+package com.baeldung.boot.data;
 
+import com.baeldung.boot.data.config.TshirtSizeConfig;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
-import yamltopojo.demo.config.TshirtSizeConfig;
 
 @SpringBootApplication
 @EnableConfigurationProperties(TshirtSizeConfig.class)

File: spring-boot-modules/spring-boot-data-2/src/main/java/com/baeldung/boot/data/config/TshirtSizeConfig.java
Patch:
@@ -1,4 +1,4 @@
-package yamltopojo.demo.config;
+package com.baeldung.boot.data.config;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-boot-modules/spring-boot-data-2/src/main/java/com/baeldung/boot/data/controller/TshirtSizeController.java
Patch:
@@ -1,7 +1,7 @@
-package yamltopojo.demo.controller;
+package com.baeldung.boot.data.controller;
 
 import org.springframework.web.bind.annotation.*;
-import yamltopojo.demo.service.SizeConverterService;
+import com.baeldung.boot.data.service.SizeConverterService;
 
 @RestController
 @RequestMapping(value = "/")

File: spring-boot-modules/spring-boot-data-2/src/main/java/com/baeldung/boot/data/service/SizeConverterImpl.java
Patch:
@@ -1,7 +1,7 @@
-package yamltopojo.demo.service;
+package com.baeldung.boot.data.service;
 
 import org.springframework.stereotype.Service;
-import yamltopojo.demo.config.TshirtSizeConfig;
+import com.baeldung.boot.data.config.TshirtSizeConfig;
 
 
 @Service

File: spring-boot-modules/spring-boot-data-2/src/main/java/com/baeldung/boot/data/service/SizeConverterService.java
Patch:
@@ -1,4 +1,4 @@
-package yamltopojo.demo.service;
+package com.baeldung.boot.data.service;
 
 
 public interface SizeConverterService {

File: spring-boot-modules/spring-boot-data-2/src/test/java/com/baeldung/boot/data/controller/TshirtSizeControllerTest.java
Patch:
@@ -1,11 +1,11 @@
-package yamltopojo.demo.controller;
+package com.baeldung.boot.data.controller;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
-import yamltopojo.demo.service.SizeConverterService;
+import com.baeldung.boot.data.service.SizeConverterService;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.when;

File: core-java-modules/core-java-io-3/src/test/java/com/baeldung/copydirectory/ApacheCommonsUnitTest.java
Patch:
@@ -16,10 +16,10 @@
 
 public class ApacheCommonsUnitTest {
 
-    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory";
+    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory3";
     private final String subDirectoryName = "/childDirectory";
     private final String fileName = "/file.txt";
-    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory";
+    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory3";
 
     @BeforeEach
     public void createDirectoryWithSubdirectoryAndFile() throws IOException {

File: core-java-modules/core-java-io-3/src/test/java/com/baeldung/copydirectory/CoreOldUnitTest.java
Patch:
@@ -16,10 +16,10 @@
 
 public class CoreOldUnitTest {
 
-    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory";
+    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory1";
     private final String subDirectoryName = "/childDirectory";
     private final String fileName = "/file.txt";
-    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory";
+    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory1";
 
     @BeforeEach
     public void createDirectoryWithSubdirectoryAndFile() throws IOException {

File: core-java-modules/core-java-io-3/src/test/java/com/baeldung/copydirectory/JavaNioUnitTest.java
Patch:
@@ -16,10 +16,10 @@
 
 public class JavaNioUnitTest {
 
-    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory";
+    private final String sourceDirectoryLocation = "src/test/resources/sourceDirectory2";
     private final String subDirectoryName = "/childDirectory";
     private final String fileName = "/file.txt";
-    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory";
+    private final String destinationDirectoryLocation = "src/test/resources/destinationDirectory2";
 
     @BeforeEach
     public void createDirectoryWithSubdirectoryAndFile() throws IOException {

File: persistence-modules/spring-data-jpa-enterprise/src/main/java/com/baeldung/boot/Application.java
Patch:
@@ -6,8 +6,8 @@
 import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 
 @SpringBootApplication
-@EnableJpaRepositories("com.baeldung")
-@EntityScan("com.baeldung")
+@EnableJpaRepositories("com.baeldung.boot")
+@EntityScan("com.baeldung.boot")
 public class Application {
 
     public static void main(String[] args) {

File: persistence-modules/spring-data-jpa-enterprise/src/main/java/com/baeldung/osiv/model/BasicUser.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.Set;
 
 @Entity
-@Table(name = "users")
+@Table(name = "basic_users")
 public class BasicUser {
 
     @Id

File: core-java-modules/core-java-lambdas/src/main/java/com/baeldung/java8/entity/Human.java
Patch:
@@ -37,7 +37,7 @@ public void setAge(final int age) {
 
     public static int compareByNameThenAge(final Human lhs, final Human rhs) {
         if (lhs.name.equals(rhs.name)) {
-            return lhs.age - rhs.age;
+            return Integer.compare(lhs.age, rhs.age);
         } else {
             return lhs.name.compareTo(rhs.name);
         }

File: core-java-modules/core-java-lambdas/src/test/java/com/baeldung/java8/Java8SortUnitTest.java
Patch:
@@ -54,7 +54,7 @@ public final void whenSortingEntitiesByNameThenAge_thenCorrectlySorted() {
         final List<Human> humans = Lists.newArrayList(new Human("Sarah", 12), new Human("Sarah", 10), new Human("Zack", 12));
         humans.sort((lhs, rhs) -> {
             if (lhs.getName().equals(rhs.getName())) {
-                return lhs.getAge() - rhs.getAge();
+                return Integer.compare(lhs.getAge(), rhs.getAge());
             } else {
                 return lhs.getName().compareTo(rhs.getName());
             }

File: core-java-modules/core-java-lang/src/main/java/com/baeldung/comparable/Player.java
Patch:
@@ -45,7 +45,7 @@ public String toString() {
 
     @Override
     public int compareTo(Player otherPlayer) {
-        return (this.getRanking() - otherPlayer.getRanking());
+        return Integer.compare(getRanking(), otherPlayer.getRanking());
     }
 
 }

File: core-java-modules/core-java-lang/src/main/java/com/baeldung/comparator/PlayerAgeComparator.java
Patch:
@@ -6,7 +6,7 @@ public class PlayerAgeComparator implements Comparator<Player> {
 
     @Override
     public int compare(Player firstPlayer, Player secondPlayer) {
-       return (firstPlayer.getAge() - secondPlayer.getAge());
+       return Integer.compare(firstPlayer.getAge(), secondPlayer.getAge());
     }
 
 }

File: core-java-modules/core-java-lang/src/main/java/com/baeldung/comparator/PlayerRankingComparator.java
Patch:
@@ -6,7 +6,7 @@ public class PlayerRankingComparator implements Comparator<Player> {
 
     @Override
     public int compare(Player firstPlayer, Player secondPlayer) {
-       return (firstPlayer.getRanking() - secondPlayer.getRanking());
+       return Integer.compare(firstPlayer.getRanking(), secondPlayer.getRanking());
     }
 
 }

File: persistence-modules/spring-data-jpa-enterprise/src/main/java/com/baeldung/boot/Application.java
Patch:
@@ -6,8 +6,8 @@
 import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 
 @SpringBootApplication
-@EnableJpaRepositories("com.baeldung")
-@EntityScan("com.baeldung")
+@EnableJpaRepositories("com.baeldung.boot")
+@EntityScan("com.baeldung.boot")
 public class Application {
 
     public static void main(String[] args) {

File: persistence-modules/spring-data-jpa-enterprise/src/main/java/com/baeldung/osiv/model/BasicUser.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.Set;
 
 @Entity
-@Table(name = "users")
+@Table(name = "basic_users")
 public class BasicUser {
 
     @Id

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/equality/EqualByJavaDefault.java
Patch:
@@ -30,9 +30,7 @@ public void setEmail(String email) {
         this.email = email;
     }
 
-    public Object clone() throws
-            CloneNotSupportedException
-    {
+    public Object clone() throws CloneNotSupportedException {
         return super.clone();
     }
 }

File: persistence-modules/java-jpa-3/src/test/java/com/baeldung/jpa/equality/EqualityUnitTest.java
Patch:
@@ -71,4 +71,4 @@ public void givenBusinessKeyBasedEquality_whenUsingEquals_thenEqualIsBasedOnBusi
         Assert.assertEquals(object1, object2);
         Assert.assertNotEquals(object1.getId(), object2.getId());
     }
-}
\ No newline at end of file
+}

File: persistence-modules/java-jpa-3/src/main/java/com/baeldung/jpa/equality/EqualByJavaDefault.java
Patch:
@@ -30,9 +30,7 @@ public void setEmail(String email) {
         this.email = email;
     }
 
-    public Object clone() throws
-            CloneNotSupportedException
-    {
+    public Object clone() throws CloneNotSupportedException {
         return super.clone();
     }
 }

File: persistence-modules/java-jpa-3/src/test/java/com/baeldung/jpa/equality/EqualityUnitTest.java
Patch:
@@ -71,4 +71,4 @@ public void givenBusinessKeyBasedEquality_whenUsingEquals_thenEqualIsBasedOnBusi
         Assert.assertEquals(object1, object2);
         Assert.assertNotEquals(object1.getId(), object2.getId());
     }
-}
\ No newline at end of file
+}

File: spring-boot-modules/spring-boot-basic-customization/src/main/java/com/baeldung/errorhandling/controllers/MyErrorController.java
Patch:
@@ -34,7 +34,7 @@ else if(statusCode == HttpStatus.INTERNAL_SERVER_ERROR.value()) {
 
     @Override
     public String getErrorPath() {
-        return "/error";
+        return null;
     }
 
 }

File: persistence-modules/spring-data-cosmosdb/src/main/java/com/baeldung/spring/data/cosmosdb/AzureCosmosDbApplication.java
Patch:
@@ -13,10 +13,10 @@
 
 @SpringBootApplication
 @EnableCosmosRepositories(basePackageClasses = ProductRepository.class)
-public class AzurecosmodbApplication extends AbstractCosmosConfiguration {
+public class AzureCosmosDbApplication extends AbstractCosmosConfiguration {
 
     public static void main(String[] args) {
-        SpringApplication.run(AzurecosmodbApplication.class, args);
+        SpringApplication.run(AzureCosmosDbApplication.class, args);
     }
 
     @Value("${azure.cosmosdb.uri}")

File: persistence-modules/spring-data-cosmosdb/src/test/java/com/baeldung/spring/data/cosmosdb/AzureCosmosDbApplicationManualTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.springframework.util.Assert;
 
 @SpringBootTest
-public class AzurecosmodbApplicationManualTest {
+public class AzureCosmosDbApplicationManualTest {
 
     @Autowired
     ProductRepository productRepository;

File: spring-boot-modules/spring-boot-basic-customization/src/main/java/com/baeldung/errorhandling/controllers/MyErrorController.java
Patch:
@@ -34,7 +34,7 @@ else if(statusCode == HttpStatus.INTERNAL_SERVER_ERROR.value()) {
 
     @Override
     public String getErrorPath() {
-        return "/error";
+        return null;
     }
 
 }

File: core-java-modules/core-java-lang-oop-types/src/main/java/com/baeldung/primitivetype/PrimitiveTypeUtil.java
Patch:
@@ -23,7 +23,7 @@ public class PrimitiveTypeUtil {
         WRAPPER_TYPE_MAP.put(Void.class, void.class);
     }
 
-    public boolean isPrimitiveTypeByCommansLang(Object source) {
+    public boolean isPrimitiveTypeByCommonsLang(Object source) {
         return ClassUtils.isPrimitiveOrWrapper(source.getClass());
     }
 

File: core-java-modules/core-java-lang-oop-types/src/test/java/com/baeldung/primitivetype/PrimitiveTypeUtilTest.java
Patch:
@@ -27,9 +27,9 @@ public void givenObjectWhenCheckWithGuavaShouldValidate() {
 
     @Test
     public void givenObjectWhenCheckWithCommonsLangShouldValidate() {
-        assertTrue(primitiveTypeUtil.isPrimitiveTypeByCommansLang(booleanVal));
-        assertTrue(primitiveTypeUtil.isPrimitiveTypeByCommansLang(longWrapper));
-        assertFalse(primitiveTypeUtil.isPrimitiveTypeByCommansLang(nonPrimitiveVal));
+        assertTrue(primitiveTypeUtil.isPrimitiveTypeByCommonsLang(booleanVal));
+        assertTrue(primitiveTypeUtil.isPrimitiveTypeByCommonsLang(longWrapper));
+        assertFalse(primitiveTypeUtil.isPrimitiveTypeByCommonsLang(nonPrimitiveVal));
     }
 
     @Test

File: core-java-modules/core-java-lang-oop-types/src/test/java/com/baeldung/primitivetype/PrimitiveTypeUtilTest.java
Patch:
@@ -26,7 +26,7 @@ public void givenObjectWhenCheckWithGuavaShouldValidate() {
     }
 
     @Test
-    public void givenObjectWhenCheckWithCommansLangShouldValidate() {
+    public void givenObjectWhenCheckWithCommonsLangShouldValidate() {
         assertTrue(primitiveTypeUtil.isPrimitiveTypeByCommansLang(booleanVal));
         assertTrue(primitiveTypeUtil.isPrimitiveTypeByCommansLang(longWrapper));
         assertFalse(primitiveTypeUtil.isPrimitiveTypeByCommansLang(nonPrimitiveVal));

File: core-java-modules/core-java-lang-oop-types/src/test/java/com/baeldung/primitivetype/PrimitiveTypeUtilTest.java
Patch:
@@ -11,7 +11,7 @@ public class PrimitiveTypeUtilTest {
     private PrimitiveTypeUtil primitiveTypeUtil;
     private boolean booleanVal = false;
     private Long longWrapper = 1L;
-    private String nonPrimitiveVal = "Test";
+    private String nonPrimitiveVal = "non primitive string";
 
     @Before
     public void setup() {

File: persistence-modules/hibernate-annotations/src/main/java/com/baeldung/hibernate/customtypes/PhoneNumberType.java
Patch:
@@ -57,6 +57,8 @@ public void nullSafeSet(PreparedStatement st, Object value, int index, SharedSes
 
         if (Objects.isNull(value)) {
             st.setNull(index, Types.INTEGER);
+            st.setNull(index+1, Types.INTEGER);
+            st.setNull(index+2, Types.INTEGER);
         } else {
             PhoneNumber employeeNumber = (PhoneNumber) value;
             st.setInt(index,employeeNumber.getCountryCode());

File: spring-resttemplate/src/test/java/com/baeldung/SpringContextTest.java
Patch:
@@ -5,12 +5,10 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.baeldung.produceimage.ImageApplication;
 import com.baeldung.responseheaders.ResponseHeadersApplication;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = { ImageApplication.class,
-		ResponseHeadersApplication.class,
+@SpringBootTest(classes = { ResponseHeadersApplication.class,
         com.baeldung.web.upload.app.UploadApplication.class,
 		})
 public class SpringContextTest {

File: json-2/src/test/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationUnitTest.java
Patch:
@@ -16,11 +16,11 @@
 public class JacksonDeserializationUnitTest {
 
     @Test
-    void givenAJsonLdObject_whenCompactIsUsedWithEmptyContext_thenItCanBeDeserializedIntoAJacksonAnnotatedJavaObject() throws IOException {
+    void givenAJsonLdObject_whenCompactIsUsedWithEmptyContext_thenItCanBeDeserializedWithJackson() throws IOException {
         String inputJsonLd = "{\"@context\":{\"@vocab\":\"http://schema.org/\",\"knows\":{\"@type\":\"@id\"}},\"@type\":\"Person\",\"@id\":\"http://example.com/person/1234\",\"name\":\"Example Name\",\"knows\":\"http://example.com/person/2345\"}";
 
         Object jsonObject = JsonUtils.fromString(inputJsonLd);
-        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap(), new JsonLdOptions());
+        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap<>(), new JsonLdOptions());
         String compactContent = JsonUtils.toString(compact);
 
         assertEquals("{\"@id\":\"http://example.com/person/1234\",\"@type\":\"http://schema.org/Person\",\"http://schema.org/knows\":{\"@id\":\"http://example.com/person/2345\"},\"http://schema.org/name\":\"Example Name\"}", compactContent);

File: core-java-modules/core-java-concurrency-collections-2/src/test/java/com/baeldung/concurrent/queue/ConcurrentLinkedQueueUnitTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.Test;
 
 @FixMethodOrder
-public class TestConcurrentLinkedQueue {
+public class ConcurrentLinkedQueueUnitTest {
 
     @Test
     public void givenThereIsExistingCollection_WhenAddedIntoQueue_ThenShouldContainElements() {

File: core-java-modules/core-java-concurrency-collections-2/src/test/java/com/baeldung/concurrent/queue/LinkedBlockingQueueUnitTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.Test;
 
 @FixMethodOrder
-public class TestLinkedBlockingQueue {
+public class LinkedBlockingQueueUnitTest {
 
     @Test
     public void givenThereIsExistingCollection_WhenAddedIntoQueue_ThenShouldContainElements() {

File: testing-modules/junit-4/src/test/java/com/baeldung/assume/ConditionallyIgnoreTestsUnitTest.java
Patch:
@@ -2,7 +2,9 @@
 
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assume.*;
+import static org.junit.Assume.assumeFalse;
+import static org.junit.Assume.assumeThat;
+import static org.junit.Assume.assumeTrue;
 
 import org.junit.Test;
 

File: spring-boot-modules/spring-boot-properties-2/src/test/java/com/baeldung/properties/yamllist/YamlSimpleListIntegrationTest.java
Patch:
@@ -23,8 +23,7 @@ public void whenYamlList_thenLoadSimpleList() {
             .get(0)).isEqualTo("dev");
         assertThat(applicationProps.getProfiles()
             .get(4)
-            .getClass()
-            .toString()).isEqualTo("class java.lang.Integer");
+            .getClass()).isEqualTo(Integer.class);
         assertThat(applicationProps.getProfiles()
             .size()).isEqualTo(5);
     }

File: testing-modules/junit-4/src/test/java/com/baeldung/assume/ConditionallyIgnoreTestsUnitTest.java
Patch:
@@ -11,7 +11,7 @@ public class ConditionallyIgnoreTestsUnitTest {
 
 
     @Test
-    public void whenAssumeThatCodeVersionIsNot1_thenIgnore() {
+    public void whenAssumeThatCodeVersionIsNot2_thenIgnore() {
         final int codeVersion = 1;
         assumeThat(codeVersion, is(2));
 

File: hexagonal-architecture/src/main/java/com/baeldung/hexagonal/architecture/repository/ProductRepository.java
Patch:
@@ -9,6 +9,6 @@
  *
  */
 
-public interface ProductRepository extends JpaRepository<Product,Long>{
+public interface ProductRepository extends JpaRepository<Product, Long> {
 
 }

File: libraries-testing/src/main/java/com/baeldung/serenity/spring/AdderService.java
Patch:
@@ -1,8 +1,10 @@
 package com.baeldung.serenity.spring;
 
+import org.springframework.context.annotation.Scope;
 import org.springframework.stereotype.Service;
 
 @Service
+@Scope("prototype")
 public class AdderService {
 
     private int num;

File: libraries-testing/src/main/java/com/baeldung/serenity/spring/AdderService.java
Patch:
@@ -1,8 +1,10 @@
 package com.baeldung.serenity.spring;
 
+import org.springframework.context.annotation.Scope;
 import org.springframework.stereotype.Service;
 
 @Service
+@Scope("prototype")
 public class AdderService {
 
     private int num;

File: logging-modules/log-mdc/src/main/java/com/baeldung/mdc/slf4j/Slf4jRunnable.java
Patch:
@@ -18,7 +18,7 @@ public void run() {
 
         new Slf4TransferService().transfer(tx.getAmount());
 
-        MDC.clear();
+        // MDC.clear(); We don't need this with MdcAwareThreadPoolExecutor
 
     }
 }
\ No newline at end of file

File: spring-remoting/remoting-hessian-burlap/remoting-hessian-burlap-client/src/main/java/com/baeldung/client/BurlapClient.java
Patch:
@@ -15,7 +15,7 @@ public class BurlapClient {
     @Bean
     public BurlapProxyFactoryBean burlapInvoker() {
         BurlapProxyFactoryBean invoker = new BurlapProxyFactoryBean();
-        invoker.setServiceUrl("http://localhost:8080/b_booking");
+        invoker.setServiceUrl("http://localhost:8032/b_booking");
         invoker.setServiceInterface(CabBookingService.class);
         return invoker;
     }

File: spring-remoting/remoting-hessian-burlap/remoting-hessian-burlap-client/src/main/java/com/baeldung/client/HessianClient.java
Patch:
@@ -15,7 +15,7 @@ public class HessianClient {
     @Bean
     public HessianProxyFactoryBean hessianInvoker() {
         HessianProxyFactoryBean invoker = new HessianProxyFactoryBean();
-        invoker.setServiceUrl("http://localhost:8080/booking");
+        invoker.setServiceUrl("http://localhost:8032/booking");
         invoker.setServiceInterface(CabBookingService.class);
         return invoker;
     }

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/models/BaeldungAbout.java
Patch:
@@ -1,7 +1,7 @@
-package main.java.com.baeldung.selenium.models;
+package com.baeldung.selenium.models;
 
-import main.java.com.baeldung.selenium.config.SeleniumConfig;
-import main.java.com.baeldung.selenium.pages.BaeldungAboutPage;
+import com.baeldung.selenium.config.SeleniumConfig;
+import com.baeldung.selenium.pages.BaeldungAboutPage;
 import org.openqa.selenium.support.PageFactory;
 
 public class BaeldungAbout {

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/pages/BaeldungAboutPage.java
Patch:
@@ -1,4 +1,4 @@
-package main.java.com.baeldung.selenium.pages;
+package com.baeldung.selenium.pages;
 
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.support.FindBy;

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/pages/BaeldungHomePage.java
Patch:
@@ -1,14 +1,14 @@
-package main.java.com.baeldung.selenium.pages;
+package com.baeldung.selenium.pages;
 
-import main.java.com.baeldung.selenium.config.SeleniumConfig;
+import com.baeldung.selenium.config.SeleniumConfig;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.support.FindBy;
 import org.openqa.selenium.support.PageFactory;
 
 public class BaeldungHomePage {
 
     private SeleniumConfig config;
-    @FindBy(css=".header--menu > a")
+    @FindBy(css = ".nav--logo_mobile")
     private WebElement title;
     @FindBy(css = ".menu-start-here > a")
     private WebElement startHere;

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/pages/StartHerePage.java
Patch:
@@ -1,6 +1,6 @@
-package main.java.com.baeldung.selenium.pages;
+package com.baeldung.selenium.pages;
 
-import main.java.com.baeldung.selenium.config.SeleniumConfig;
+import com.baeldung.selenium.config.SeleniumConfig;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.support.FindBy;
 

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/models/BaeldungAbout.java
Patch:
@@ -1,7 +1,7 @@
-package main.java.com.baeldung.selenium.models;
+package com.baeldung.selenium.models;
 
-import main.java.com.baeldung.selenium.config.SeleniumConfig;
-import main.java.com.baeldung.selenium.pages.BaeldungAboutPage;
+import com.baeldung.selenium.config.SeleniumConfig;
+import com.baeldung.selenium.pages.BaeldungAboutPage;
 import org.openqa.selenium.support.PageFactory;
 
 public class BaeldungAbout {

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/pages/BaeldungAboutPage.java
Patch:
@@ -1,4 +1,4 @@
-package main.java.com.baeldung.selenium.pages;
+package com.baeldung.selenium.pages;
 
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.support.FindBy;

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/pages/BaeldungHomePage.java
Patch:
@@ -1,14 +1,14 @@
-package main.java.com.baeldung.selenium.pages;
+package com.baeldung.selenium.pages;
 
-import main.java.com.baeldung.selenium.config.SeleniumConfig;
+import com.baeldung.selenium.config.SeleniumConfig;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.support.FindBy;
 import org.openqa.selenium.support.PageFactory;
 
 public class BaeldungHomePage {
 
     private SeleniumConfig config;
-    @FindBy(css=".header--menu > a")
+    @FindBy(css = ".nav--logo_mobile")
     private WebElement title;
     @FindBy(css = ".menu-start-here > a")
     private WebElement startHere;

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/pages/StartHerePage.java
Patch:
@@ -1,6 +1,6 @@
-package main.java.com.baeldung.selenium.pages;
+package com.baeldung.selenium.pages;
 
-import main.java.com.baeldung.selenium.config.SeleniumConfig;
+import com.baeldung.selenium.config.SeleniumConfig;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.support.FindBy;
 

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/models/BaeldungAbout.java
Patch:
@@ -1,7 +1,7 @@
-package main.java.com.baeldung.selenium.models;
+package com.baeldung.selenium.models;
 
-import main.java.com.baeldung.selenium.config.SeleniumConfig;
-import main.java.com.baeldung.selenium.pages.BaeldungAboutPage;
+import com.baeldung.selenium.config.SeleniumConfig;
+import com.baeldung.selenium.pages.BaeldungAboutPage;
 import org.openqa.selenium.support.PageFactory;
 
 public class BaeldungAbout {

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/pages/BaeldungAboutPage.java
Patch:
@@ -1,4 +1,4 @@
-package main.java.com.baeldung.selenium.pages;
+package com.baeldung.selenium.pages;
 
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.support.FindBy;

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/pages/BaeldungHomePage.java
Patch:
@@ -1,14 +1,14 @@
-package main.java.com.baeldung.selenium.pages;
+package com.baeldung.selenium.pages;
 
-import main.java.com.baeldung.selenium.config.SeleniumConfig;
+import com.baeldung.selenium.config.SeleniumConfig;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.support.FindBy;
 import org.openqa.selenium.support.PageFactory;
 
 public class BaeldungHomePage {
 
     private SeleniumConfig config;
-    @FindBy(css=".header--menu > a")
+    @FindBy(css = ".nav--logo_mobile")
     private WebElement title;
     @FindBy(css = ".menu-start-here > a")
     private WebElement startHere;

File: testing-modules/selenium-junit-testng/src/main/java/com/baeldung/selenium/pages/StartHerePage.java
Patch:
@@ -1,6 +1,6 @@
-package main.java.com.baeldung.selenium.pages;
+package com.baeldung.selenium.pages;
 
-import main.java.com.baeldung.selenium.config.SeleniumConfig;
+import com.baeldung.selenium.config.SeleniumConfig;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.support.FindBy;
 

File: core-java-modules/core-java-concurrency-basic-2/src/test/java/com/baeldung/concurrent/synchronize/BaeldungSychronizedBlockUnitTest.java
Patch:
@@ -35,7 +35,7 @@ public void givenMultiThread_whenStaticSyncBlock() throws InterruptedException {
     }
 
     @Test
-    public void givenHoldingTheLock_whenReentrant_thenCanAcquireItItAgain() {
+    public void givenHoldingTheLock_whenReentrant_thenCanAcquireItAgain() {
         Object lock = new Object();
         synchronized (lock) {
             System.out.println("First time acquiring it");

File: core-java-modules/core-java-jvm-2/src/test/java/com/baeldung/memlayout/MemoryLayoutUnitTest.java
Patch:
@@ -91,7 +91,7 @@ private static class FieldsArrangement {
         private boolean first;
         private char second;
         private double third;
-        private int forth;
+        private int fourth;
         private boolean fifth;
     }
 

File: persistence-modules/spring-persistence-simple-2/src/test/java/com/baeldung/jndi/datasource/SimpleNamingContextBuilderManualTest.java
Patch:
@@ -11,6 +11,9 @@
 import org.springframework.jdbc.datasource.DriverManagerDataSource;
 import org.springframework.mock.jndi.SimpleNamingContextBuilder;
 
+// marked as a manual test as the bindings in this test and
+// SimpleJNDIUnitTest conflict depending on the order they are run in
+
 @SuppressWarnings("deprecation")
 public class SimpleNamingContextBuilderManualTest {
 

File: persistence-modules/spring-persistence-simple-2/src/test/java/com/baeldung/jndi/datasource/SimpleNamingContextBuilderManualTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.springframework.mock.jndi.SimpleNamingContextBuilder;
 
 @SuppressWarnings("deprecation")
-public class SimpleNamingContextBuilderUnitTest {
+public class SimpleNamingContextBuilderManualTest {
 
     private InitialContext initContext;
 

File: spring-5-security/src/test/java/com/baeldung/loginextrafields/LoginFieldsFullIntegrationTest.java
Patch:
@@ -66,7 +66,7 @@ public void givenAccessSecuredResource_whenAuthenticated_thenAuthHasExtraFields(
 
     private User getUser() {
         Collection<? extends GrantedAuthority> authorities = new ArrayList<>();
-        return new User("myusername", "mydomain", "password", true, true, true, true, authorities);
+        return new User("myusername", "mydomain", "secret", true, true, true, true, authorities);
     }
 
 }

File: spring-5-security/src/test/java/com/baeldung/loginextrafields/LoginFieldsSimpleIntegrationTest.java
Patch:
@@ -66,7 +66,7 @@ public void givenAccessSecuredResource_whenAuthenticated_thenAuthHasExtraFields(
 
     private User getUser() {
         Collection<? extends GrantedAuthority> authorities = new ArrayList<>();
-        return new User("myusername", "mydomain", "password", true, true, true, true, authorities);
+        return new User("myusername", "mydomain", "secret", true, true, true, true, authorities);
     }
 
 }

File: image-processing/src/test/java/com/baeldung/image/resize/core/Graphics2DExampleUnitTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import org.junit.Test;
 
-public class Graphics2DExampleTest {
+public class Graphics2DExampleUnitTest {
 
     @Test(expected = Test.None.class)
     public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenImageGeneratedWithoutError() throws IOException {

File: image-processing/src/test/java/com/baeldung/image/resize/core/ImageScaledInstanceExampleUnitTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import org.junit.Test;
 
-public class ImageScaledInstanceExampleTest {
+public class ImageScaledInstanceExampleUnitTest {
 
     @Test(expected = Test.None.class)
     public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenImageGeneratedWithoutError() throws IOException {

File: image-processing/src/test/java/com/baeldung/image/resize/imgscalr/ImgscalrExampleUnitTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import org.junit.Test;
 
-public class ImgscalrExampleTest {
+public class ImgscalrExampleUnitTest {
 
     @Test(expected = Test.None.class)
     public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenImageGeneratedWithoutError() throws IOException {

File: image-processing/src/test/java/com/baeldung/image/resize/marvin/MarvinExampleUnitTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import org.junit.Test;
 
-public class MarvinExampleTest {
+public class MarvinExampleUnitTest {
     @Test(expected = Test.None.class)
     public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenImageGeneratedWithoutError() throws IOException {
         int targetWidth = 200;

File: image-processing/src/test/java/com/baeldung/image/resize/thumbnailator/ThumbnailatorExampleUnitTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import org.junit.Test;
 
-public class ThumbnailatorExampleTest {
+public class ThumbnailatorExampleUnitTest {
     @Test(expected = Test.None.class)
     public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenImageGeneratedWithoutError() throws IOException {
         int targetWidth = 200;

File: image-processing/src/main/java/com/baeldung/image/resize/core/Graphics2DExample.java
Patch:
@@ -9,7 +9,7 @@
 
 public class Graphics2DExample {
 
-    static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws IOException {
+    static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {
         BufferedImage resizedImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);
         Graphics2D graphics2D = resizedImage.createGraphics();
         graphics2D.drawImage(originalImage, 0, 0, targetWidth, targetHeight, null);

File: image-processing/src/main/java/com/baeldung/image/resize/core/ImageScaledInstanceExample.java
Patch:
@@ -8,7 +8,7 @@
 import javax.imageio.ImageIO;
 
 public class ImageScaledInstanceExample {
-    static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws IOException {
+    static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {
         Image resultingImage = originalImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_DEFAULT);
         BufferedImage bufferedImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);
         bufferedImage.getGraphics()

File: image-processing/src/main/java/com/baeldung/image/resize/imgscalr/ImgscalrExample.java
Patch:
@@ -8,11 +8,11 @@
 import org.imgscalr.Scalr;
 
 public class ImgscalrExample {
-    public static BufferedImage simpleResizeImage(BufferedImage originalImage, int targetWidth) throws Exception {
+    public static BufferedImage simpleResizeImage(BufferedImage originalImage, int targetWidth) {
         return Scalr.resize(originalImage, targetWidth);
     }
 
-    public static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws Exception {
+    public static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {
         return Scalr.resize(originalImage, Scalr.Method.AUTOMATIC, Scalr.Mode.AUTOMATIC, targetWidth, targetHeight, Scalr.OP_ANTIALIAS);
     }
 

File: image-processing/src/main/java/com/baeldung/image/resize/thumbnailator/ThumbnailatorExample.java
Patch:
@@ -4,13 +4,14 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
+import java.io.IOException;
 
 import javax.imageio.ImageIO;
 
 import net.coobird.thumbnailator.Thumbnails;
 
 public class ThumbnailatorExample {
-    static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws Exception {
+    static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws IOException {
         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
         Thumbnails.of(originalImage)
             .size(targetWidth, targetHeight)

File: image-processing/src/main/java/com/baeldung/image/resize/core/Graphics2DExample.java
Patch:
@@ -20,6 +20,6 @@ static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, i
     public static void main(String[] args) throws IOException {
         BufferedImage originalImage = ImageIO.read(new File("src/main/resources/images/sampleImage.jpg"));
         BufferedImage outputImage = resizeImage(originalImage, 200, 200);
-        ImageIO.write(outputImage, "jpg", new File("src/main/resources/images/sampleImage1.jpg"));
+        ImageIO.write(outputImage, "jpg", new File("src/main/resources/images/sampleImage-resized-graphics2d.jpg"));
     }
 }

File: image-processing/src/main/java/com/baeldung/image/resize/core/ImageScaledInstanceExample.java
Patch:
@@ -19,6 +19,6 @@ static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, i
     public static void main(String[] args) throws IOException {
         BufferedImage originalImage = ImageIO.read(new File("src/main/resources/images/sampleImage.jpg"));
         BufferedImage outputImage = resizeImage(originalImage, 200, 200);
-        ImageIO.write(outputImage, "jpg", new File("src/main/resources/images/sampleImage1.jpg"));
+        ImageIO.write(outputImage, "jpg", new File("src/main/resources/images/sampleImage-resized-scaledinstance.jpg"));
     }
 }

File: image-processing/src/main/java/com/baeldung/image/resize/thumbnailator/ThumbnailatorExample.java
Patch:
@@ -25,6 +25,6 @@ static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, i
     public static void main(String[] args) throws Exception {
         BufferedImage originalImage = ImageIO.read(new File("src/main/resources/images/sampleImage.jpg"));
         BufferedImage outputImage = resizeImage(originalImage, 200, 200);
-        ImageIO.write(outputImage, "jpg", new File("src/main/resources/images/sampleImage1.jpg"));
+        ImageIO.write(outputImage, "jpg", new File("src/main/resources/images/sampleImage-resized-thumbnailator.jpg"));
     }
 }

File: spring-boot-modules/spring-boot-properties/src/test/java/com/baeldung/yaml/YAMLIntegrationTest.java
Patch:
@@ -11,6 +11,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = MyApplication.class)
+@TestPropertySource(properties = {"spring.profiles.active = test"})
 class YAMLIntegrationTest {
 
     @Autowired
@@ -20,5 +21,6 @@ class YAMLIntegrationTest {
     void whenProfileTest_thenNameTesting() {
         assertTrue("testing".equalsIgnoreCase(config.getEnvironment()));
         assertTrue("test-YAML".equalsIgnoreCase(config.getName()));
+        assertTrue("myurl".equalsIgnoreCase(config.getComponent().getIdm().getUrl()));
     }
 }

File: spring-core-4/src/main/java/com/baeldung/beanpostprocessor/GlobalEventBus.java
Patch:
@@ -8,7 +8,7 @@
 @SuppressWarnings("ALL")
 public final class GlobalEventBus {
 
-    public static final String GLOBAL_EVENT_BUS_EXPRESSION = "T(com.baeldung.postprocessor.GlobalEventBus).getEventBus()";
+    public static final String GLOBAL_EVENT_BUS_EXPRESSION = "T(com.baeldung.beanpostprocessor.GlobalEventBus).getEventBus()";
 
     private static final String IDENTIFIER = "global-event-bus";
 

File: spring-boot-modules/spring-boot-crud/src/main/java/com/baeldung/crud/controllers/UserController.java
Patch:
@@ -36,7 +36,7 @@ public String addUser(@Valid User user, BindingResult result, Model model) {
         
         userRepository.save(user);
         model.addAttribute("users", userRepository.findAll());
-        return "index";
+        return "redirect:/index";
     }
     
     @GetMapping("/edit/{id}")
@@ -55,7 +55,7 @@ public String updateUser(@PathVariable("id") long id, @Valid User user, BindingR
         
         userRepository.save(user);
         model.addAttribute("users", userRepository.findAll());
-        return "index";
+        return "redirect:/index";
     }
     
     @GetMapping("/delete/{id}")

File: spring-boot-modules/spring-boot-crud/src/test/java/com/baeldung/crud/UserControllerUnitTest.java
Patch:
@@ -41,7 +41,7 @@ public void whenCalledaddUserAndValidUser_thenCorrect() {
 
         when(mockedBindingResult.hasErrors()).thenReturn(false);
 
-        assertThat(userController.addUser(user, mockedBindingResult, mockedModel)).isEqualTo("index");
+        assertThat(userController.addUser(user, mockedBindingResult, mockedModel)).isEqualTo("redirect:/index");
     }
 
     @Test
@@ -64,7 +64,7 @@ public void whenCalledupdateUserAndValidUser_thenCorrect() {
 
         when(mockedBindingResult.hasErrors()).thenReturn(false);
 
-        assertThat(userController.updateUser(1l, user, mockedBindingResult, mockedModel)).isEqualTo("index");
+        assertThat(userController.updateUser(1l, user, mockedBindingResult, mockedModel)).isEqualTo("redirect:/index");
     }
 
     @Test

File: core-java-modules/core-java-io-conversions-2/src/test/java/com/baeldung/arraystostring/JavaArraysToStringUnitTest.java
Patch:
@@ -15,8 +15,7 @@ public class JavaArraysToStringUnitTest {
     @Test
     public void givenInstanceOfArray_whenTryingToConvertToString_thenNameOfClassIsShown() {
         Object[] arrayOfObjects = { "John", 2, true };
-        assertTrue(arrayOfObjects.toString()
-            .startsWith("[Ljava.lang.Object;"));
+        assertTrue(arrayOfObjects.toString().startsWith("[Ljava.lang.Object;"));
     }
 
     @Test

File: spring-caching/src/main/java/com/baeldung/springdatacaching/repositories/BookRepository.java
Patch:
@@ -9,7 +9,7 @@
 
 public interface BookRepository extends CrudRepository<Book, UUID> {
 
-    @Cacheable(value = "books", unless="#a0=='Foundation'")
+    @Cacheable(value = "books", unless = "#a0=='Foundation'")
     Optional<Book> findFirstByTitle(String title);
 
 }

File: spring-boot-modules/spring-boot-properties/src/test/java/com/baeldung/properties/lists/ListsPropertiesUnitTest.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@ContextConfiguration(classes = {SpringListPropertiesApplication.class})
+@ContextConfiguration(classes = SpringListPropertiesApplication.class)
 public class ListsPropertiesUnitTest {
 
     @Value("${arrayOfStrings}")
@@ -78,7 +78,7 @@ public void whenContextIsInitialized_ThenInjectedListOfBasicTypesContainsExpecte
     }
 
     @Test
-    public void WhenReadingFromSpringEnvironment_ThenPropertiesHaveExpectedValues() {
+    public void whenReadingFromSpringEnvironment_ThenPropertiesHaveExpectedValues() {
         String[] arrayOfStrings = environment.getProperty("arrayOfStrings", String[].class);
         List<String> listOfStrings = (List<String>)environment.getProperty("arrayOfStrings", List.class);
 

File: spring-caching/src/test/java/com/baeldung/multiplecachemanager/MultipleCacheManagerIntegrationTest.java
Patch:
@@ -17,7 +17,7 @@
 
 @SpringBootApplication
 @SpringBootTest
-public class MultipleCacheManagerIntegrationUnitTest {
+public class MultipleCacheManagerIntegrationTest {
 
     @MockBean
     private OrderDetailRepository orderDetailRepository;

File: persistence-modules/spring-data-elasticsearch/src/test/java/com/baeldung/SpringContextManualTest.java
Patch:
@@ -8,10 +8,10 @@
 import com.baeldung.spring.data.es.config.Config;
 
 /**
+ * This Manual test requires: Elasticsearch instance running on localhost:9200.
  * 
- * This Manual test requires:
- * * Elasticsearch instance running on host
- *
+ * The following docker command can be used: docker run -d --name es762 -p
+ * 9200:9200 -e "discovery.type=single-node" elasticsearch:7.6.2
  */
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(classes = Config.class)

File: spring-thymeleaf-3/src/test/java/com/baeldung/thymeleaf/currencies/CurrenciesControllerIntegrationTest.java
Patch:
@@ -27,7 +27,7 @@ public void whenCallCurrencyWithSpanishLocale_ThenReturnProperCurrency() throws
           .header("Accept-Language", "es-ES")
           .param("amount", "10032.5"))
           .andExpect(status().isOk())
-          .andExpect(content().string(containsString("10.032,50 €")));
+          .andExpect(content().string(containsString("10.032,50")));
     }
 
     @Test
@@ -42,10 +42,10 @@ public void whenCallCurrencyWithUSALocale_ThenReturnProperCurrency() throws Exce
     @Test
     public void whenCallCurrencyWithRomanianLocaleWithArrays_ThenReturnLocaleCurrencies() throws Exception {
         mockMvc.perform(MockMvcRequestBuilders.get("/currency")
-          .header("Accept-Language", "ro-RO")
+          .header("Accept-Language", "en-GB")
           .param("amountList", "10", "20", "30"))
           .andExpect(status().isOk())
-          .andExpect(content().string(containsString("10,00 RON, 20,00 RON, 30,00 RON")));
+          .andExpect(content().string(containsString("£10.00, £20.00, £30.00")));
     }
 
     @Test

File: persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/tomcatconnectionpool/test/application/SpringBootTomcatConnectionPoolIntegrationTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import com.baeldung.tomcatconnectionpool.application.SpringBootConsoleApplication;
@@ -13,6 +14,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = {SpringBootConsoleApplication.class})
+@TestPropertySource(properties = "spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource")
 public class SpringBootTomcatConnectionPoolIntegrationTest {
     
     @Autowired

File: architecture/src/main/java/com/baeldung/architecture/application/task/AddNewDailyTask.java
Patch:
@@ -26,4 +26,4 @@ public void create(Task newTask) {
             addNewTask.create(task);
         }
     }
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/commands/task/CreateTask.java
Patch:
@@ -4,4 +4,4 @@
 
 public interface CreateTask {
     public void create(Task newTask);
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/commands/task/GetAllTasks.java
Patch:
@@ -4,4 +4,4 @@
 
 public interface GetAllTasks {
     public Iterable<Task> getAll();
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/domain/task/TaskService.java
Patch:
@@ -19,4 +19,4 @@ public Iterable<Task> getAllTasks() {
         return taskRepository.findAll();
     }
 
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/framework/cli/StartupRunner.java
Patch:
@@ -21,4 +21,4 @@ public void run(ApplicationArguments args) throws Exception {
         task.setDescription("Startup Task");
         addNewDailyTask.create(task);
     }
-}
\ No newline at end of file
+}

File: architecture/src/main/java/com/baeldung/architecture/framework/http/task/TaskApiController.java
Patch:
@@ -39,4 +39,4 @@ void createTask(@RequestBody TaskRequest taskRequest) {
         task.setDueDate(Instant.parse(taskRequest.getDueDate()));
         addNewTask.create(task);
     }
-}
\ No newline at end of file
+}

File: architecture/src/main/java/com/baeldung/architecture/framework/http/task/TaskRequest.java
Patch:
@@ -25,5 +25,4 @@ public String getDueDate() {
     public void setDueDate(String dueDate) {
         this.dueDate = dueDate;
     }
-
-} 
\ No newline at end of file
+} 

File: architecture/src/main/java/com/baeldung/architecture/HexagonalArchitectureTaskApplication.java
Patch:
@@ -5,8 +5,8 @@
 
 @SpringBootApplication
 public class HexagonalArchitectureTaskApplication {
-	public static void main(String[] args) {
-		SpringApplication.run(HexagonalArchitectureTaskApplication.class, args);
-	}
+    public static void main(String[] args) {
+        SpringApplication.run(HexagonalArchitectureTaskApplication.class, args);
+    }
 
 }

File: architecture/src/main/java/com/baeldung/architecture/application/task/AddNewTask.java
Patch:
@@ -19,4 +19,4 @@ public AddNewTask(TaskService taskService) {
     public void create(Task newTask) {
         taskService.createTask(newTask);
     }
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/application/task/GetTasks.java
Patch:
@@ -19,4 +19,4 @@ public GetTasks(TaskService taskService) {
     public Iterable<Task> getAll() {
         return taskService.getAllTasks();
     }
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/framework/cli/StartupRunner.java
Patch:
@@ -17,7 +17,6 @@ public StartupRunner(AddNewDailyTask addNewDailyTask) {
     }
     @Override
     public void run(ApplicationArguments args) throws Exception {
-        System.out.println("Adding daily tasks");
         Task task = new Task();
         task.setDescription("Startup Task");
         addNewDailyTask.create(task);

File: persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/tomcatconnectionpool/test/application/SpringBootTomcatConnectionPoolIntegrationTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import com.baeldung.tomcatconnectionpool.application.SpringBootConsoleApplication;
@@ -13,6 +14,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = {SpringBootConsoleApplication.class})
+@TestPropertySource(properties = "spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource")
 public class SpringBootTomcatConnectionPoolIntegrationTest {
     
     @Autowired

File: core-java-modules/core-java-9-new-features/src/test/java/com/baeldung/java9/httpclient/HttpClientIntegrationTest.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Created by adam.
  */
-public class HttpClientTest {
+public class HttpClientIntegrationTest {
 
     @Test
     public void shouldReturnSampleDataContentWhenConnectViaSystemProxy() throws IOException, InterruptedException, URISyntaxException {
@@ -55,7 +55,7 @@ public void shouldNotFollowRedirectWhenSetToDefaultNever() throws IOException, I
             .send(request, HttpResponse.BodyHandler.asString());
 
         assertThat(response.statusCode(), equalTo(HttpURLConnection.HTTP_MOVED_PERM));
-        assertThat(response.body(), containsString("https://stackoverflow.com/"));
+        assertThat(response.body(), containsString(""));
     }
 
     @Test

File: core-java-modules/core-java-9-new-features/src/test/java/com/baeldung/java9/httpclient/HttpRequestIntegrationTest.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Created by adam.
  */
-public class HttpRequestTest {
+public class HttpRequestIntegrationTest {
 
     @Test
     public void shouldReturnStatusOKWhenSendGetRequest() throws IOException, InterruptedException, URISyntaxException {

File: core-java-modules/core-java-9-new-features/src/test/java/com/baeldung/java9/httpclient/HttpResponseIntegrationTest.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * Created by adam.
  */
-public class HttpResponseTest {
+public class HttpResponseIntegrationTest {
 
     @Test
     public void shouldReturnStatusOKWhenSendGetRequest() throws IOException, InterruptedException, URISyntaxException {

File: rabbitmq/src/main/java/com/baeldung/consumer/Receiver.java
Patch:
@@ -17,7 +17,7 @@ public static void main (String[] args) throws IOException, TimeoutException {
 
         channel.queueDeclare(QUEUE_NAME, false, false, false, null);
 
-        Consumer consumer = new DefaultConsumer(channel) {
+        DefaultConsumer consumer = new DefaultConsumer(channel) {
             @Override
             public void handleDelivery(String consumerTag,
                                        Envelope envelope, AMQP.BasicProperties properties,

File: core-java-modules/core-java-lang-2/src/test/java/com/baeldung/comparing/EqualsMethodUnitTest.java
Patch:
@@ -66,8 +66,8 @@ void givenTwoPersonWithEqualsWithSameNames_whenEquals_thenTrue() {
     @Test
     void givenTwoPersonWittEqualsWithDifferentNames_whenEquals_thenFalse() {
         PersonWithEquals joe = new PersonWithEquals("Joe", "Portman");
-        PersonWithEquals nathalie = new PersonWithEquals("Nathalie", "Portman");
+        PersonWithEquals natalie = new PersonWithEquals("Natalie", "Portman");
 
-        assertThat(joe.equals(nathalie)).isFalse();
+        assertThat(joe.equals(natalie)).isFalse();
     }
 }

File: core-java-modules/core-java-lang-2/src/test/java/com/baeldung/comparing/ObjectsEqualsStaticMethodUnitTest.java
Patch:
@@ -19,9 +19,9 @@ void givenTwoPersonWithEqualsWithSameNames_whenObjectsEquals_thenTrue() {
     @Test
     void givenTwoPersonWithEqualsWithDifferentNames_whenObjectsEquals_thenFalse() {
         PersonWithEquals joe = new PersonWithEquals("Joe", "Portman");
-        PersonWithEquals nathalie = new PersonWithEquals("Nathalie", "Portman");
+        PersonWithEquals natalie = new PersonWithEquals("Natalie", "Portman");
 
-        assertThat(Objects.equals(joe, nathalie)).isFalse();
+        assertThat(Objects.equals(joe, natalie)).isFalse();
     }
 
     @Test

File: spring-boot-modules/spring-boot-properties/src/main/java/com/baeldung/properties/ConfigPropertiesDemoApplication.java
Patch:
@@ -9,7 +9,7 @@
 import com.baeldung.configurationproperties.ConfigProperties;
 
 @SpringBootApplication
-@ComponentScan(basePackageClasses = ConfigProperties.class)
+@ComponentScan(basePackageClasses = {ConfigProperties.class, AdditionalProperties.class})
 public class ConfigPropertiesDemoApplication {
     public static void main(String[] args) {
         SpringApplication.run(ConfigPropertiesDemoApplication.class, args);

File: persistence-modules/spring-data-elasticsearch/src/test/java/com/baeldung/SpringContextManualTest.java
Patch:
@@ -8,7 +8,9 @@
 import com.baeldung.spring.data.es.config.Config;
 
 /**
- * This Manual test requires: * Elasticsearch instance running on localhost:9200.
+ * This Manual test requires: 
+ * Elasticsearch instance running on localhost:9200.
+ * 
  * The following docker command can be used:
  * docker run -d --name es761 -p 9200:9200 -e "discovery.type=single-node" elasticsearch:7.6.1
  */

File: persistence-modules/spring-data-elasticsearch/src/test/java/com/baeldung/elasticsearch/ElasticSearchManualTest.java
Patch:
@@ -37,7 +37,9 @@
 import org.springframework.data.elasticsearch.client.RestClients;
 
 /**
- * This Manual test requires: * Elasticsearch instance running on localhost:9200.
+ * This Manual test requires: 
+ * Elasticsearch instance running on localhost:9200.
+ * 
  * The following docker command can be used:
  * docker run -d --name es761 -p 9200:9200 -e "discovery.type=single-node" elasticsearch:7.6.1
  */

File: persistence-modules/spring-data-elasticsearch/src/test/java/com/baeldung/elasticsearch/GeoQueriesManualTest.java
Patch:
@@ -39,7 +39,9 @@
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 /**
- * This Manual test requires: * Elasticsearch instance running on localhost:9200.
+ * This Manual test requires:
+ * Elasticsearch instance running on localhost:9200.
+ * 
  * The following docker command can be used:
  * docker run -d --name es761 -p 9200:9200 -e "discovery.type=single-node" elasticsearch:7.6.1
  */

File: persistence-modules/spring-data-elasticsearch/src/test/java/com/baeldung/SpringContextManualTest.java
Patch:
@@ -8,9 +8,9 @@
 import com.baeldung.spring.data.es.config.Config;
 
 /**
- * 
- * This Manual test requires: * Elasticsearch instance running on host
- *
+ * This Manual test requires: * Elasticsearch instance running on localhost:9200.
+ * The following docker command can be used:
+ * docker run -d --name es761 -p 9200:9200 -e "discovery.type=single-node" elasticsearch:7.6.1
  */
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(classes = Config.class)

File: persistence-modules/spring-data-elasticsearch/src/test/java/com/baeldung/SpringContextManualTest.java
Patch:
@@ -9,8 +9,7 @@
 
 /**
  * 
- * This Manual test requires:
- * * Elasticsearch instance running on host
+ * This Manual test requires: * Elasticsearch instance running on host
  *
  */
 @RunWith(SpringJUnit4ClassRunner.class)

File: persistence-modules/spring-data-elasticsearch/src/test/java/com/baeldung/elasticsearch/GeoQueriesManualTest.java
Patch:
@@ -79,8 +79,7 @@ public void givenGeoShapeData_whenExecutedGeoShapeQuery_thenResultNonEmpty() thr
         Coordinate topLeft = new Coordinate(74, 31.2);
         Coordinate bottomRight = new Coordinate(81.1, 24);
         QueryBuilder qb = QueryBuilders
-            .geoShapeQuery("region", new EnvelopeBuilder(topLeft, bottomRight).buildGeometry());
-            //.relation(ShapeRelation.WITHIN));
+            .geoShapeQuery("region", new EnvelopeBuilder(topLeft, bottomRight));
 
         SearchResponse searchResponse = client.prepareSearch(WONDERS_OF_WORLD)
           .setTypes(WONDERS)

File: core-java-modules/core-java-9-improvements/src/test/java/com/baeldung/java9/io/conversion/InputStreamToByteBufferUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.inputstreamtobytes;
+package com.baeldung.java9.io.conversion;
 
 import com.google.common.io.ByteSource;
 import com.google.common.io.ByteStreams;

File: language-interop/src/main/java/com/baeldung/language/interop/python/ScriptEngineManagerUtils.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.python.interop;
+package com.baeldung.language.interop.python;
 
 import java.util.List;
 

File: language-interop/src/test/java/com/baeldung/language/interop/python/JavaPythonInteropUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.python.interop;
+package com.baeldung.language.interop.python;
 
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.empty;

File: aws-app-sync/src/main/java/com/baeldung/awsappsync/AppSyncClientHelper.java
Patch:
@@ -10,8 +10,8 @@
 
 public class AppSyncClientHelper {
 
-    static String apiUrl = "https://m4i3b6icrrb7livfbypfspiifi.appsync-api.us-east-2.amazonaws.com";
-    static String apiKey = "da2-bm4rpatkkrc5jfyhvvq7itjeke";
+    static String apiUrl = "<INSERT API URL HERE>";
+    static String apiKey = "<INSERT API KEY HERE>";
     static String API_KEY_HEADER = "x-api-key";
 
     public static WebClient.ResponseSpec getResponseBodySpec(Map<String, Object> requestBody) {

File: aws-app-sync/src/test/java/com/baeldung/awsappsync/AwsAppSyncApplicationTests.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.awsappsync;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.web.reactive.function.client.WebClient;
@@ -10,6 +11,7 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 @SpringBootTest
+@Disabled
 class AwsAppSyncApplicationTests {
 
     @Test

File: persistence-modules/spring-data-jpa-5/src/main/java/com/baeldung/service/CustomerService.java
Patch:
@@ -38,7 +38,7 @@ public Customer addCustomer(CustomerDto dto) {
     }
 
     public Customer updateCustomer(CustomerDto dto) {
-        Customer myCustomer = repo.findById(dto.id);
+        Customer myCustomer = repo.findById(dto.getId());
         mapper.updateCustomerFromDto(dto, myCustomer);
         repo.save(myCustomer);
         return myCustomer;

File: aws-app-sync/src/main/java/com/baeldung/awsappsync/AppSyncClientHelper.java
Patch:
@@ -10,8 +10,8 @@
 
 public class AppSyncClientHelper {
 
-    static String apiUrl = "https://m4i3b6icrrb7livfbypfspiifi.appsync-api.us-east-2.amazonaws.com";
-    static String apiKey = "da2-bm4rpatkkrc5jfyhvvq7itjeke";
+    static String apiUrl = "<INSERT API URL HERE>";
+    static String apiKey = "<INSERT API KEY HERE>";
     static String API_KEY_HEADER = "x-api-key";
 
     public static WebClient.ResponseSpec getResponseBodySpec(Map<String, Object> requestBody) {

File: aws-app-sync/src/test/java/com/baeldung/awsappsync/AwsAppSyncApplicationTests.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.awsappsync;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.web.reactive.function.client.WebClient;
@@ -10,6 +11,7 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 @SpringBootTest
+@Disabled
 class AwsAppSyncApplicationTests {
 
     @Test

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/config/PersistenceConfig.java
Patch:
@@ -11,7 +11,6 @@
 import org.springframework.core.env.Environment;
 import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
 import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
-import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 import org.springframework.orm.hibernate5.HibernateTransactionManager;
 import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
 import org.springframework.orm.jpa.JpaTransactionManager;
@@ -26,7 +25,6 @@
 
 @Configuration
 @EnableTransactionManagement
-@EnableJpaRepositories(basePackages = { "com.baeldung.hibernate.dao" }, transactionManagerRef = "jpaTransactionManager")
 @EnableJpaAuditing
 @PropertySource({ "classpath:persistence-mysql.properties" })
 @ComponentScan(basePackages = { "com.baeldung.persistence.dao", "com.baeldung.jpa.dao" })
@@ -97,7 +95,7 @@ public FooService fooService() {
         return new FooService();
     }
 
-    private final Properties hibernateProperties() {
+    private Properties hibernateProperties() {
         final Properties hibernateProperties = new Properties();
         hibernateProperties.setProperty("hibernate.hbm2ddl.auto", env.getProperty("hibernate.hbm2ddl.auto"));
         hibernateProperties.setProperty("hibernate.dialect", env.getProperty("hibernate.dialect"));

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/config/PersistenceJPAConfig.java
Patch:
@@ -8,7 +8,6 @@
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.core.env.Environment;
 import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
-import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 import org.springframework.jdbc.datasource.DriverManagerDataSource;
 import org.springframework.orm.jpa.JpaTransactionManager;
 import org.springframework.orm.jpa.JpaVendorAdapter;
@@ -24,7 +23,6 @@
 @EnableTransactionManagement
 @PropertySource({ "classpath:persistence-h2.properties" })
 @ComponentScan({ "com.baeldung.persistence","com.baeldung.jpa.dao" })
-@EnableJpaRepositories(basePackages = "com.baeldung.jpa.dao")
 public class PersistenceJPAConfig {
 
     @Autowired

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/spring/data/persistence/repository/IFooDao.java
Patch:
@@ -1,11 +1,13 @@
-package com.baeldung.spring.data.persistence.dao;
+package com.baeldung.spring.data.persistence.repository;
 
 import com.baeldung.spring.data.persistence.model.Foo;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
+
 public interface IFooDao extends JpaRepository<Foo, Long> {
 
     @Query("SELECT f FROM Foo f WHERE LOWER(f.name) = LOWER(:name)")
     Foo retrieveByName(@Param("name") String name);
+
 }

File: persistence-modules/spring-persistence-simple/src/main/java/com/baeldung/spring/data/persistence/service/impl/FooService.java
Patch:
@@ -2,7 +2,7 @@
 
 
 import com.baeldung.spring.data.persistence.model.Foo;
-import com.baeldung.spring.data.persistence.dao.IFooDao;
+import com.baeldung.spring.data.persistence.repository.IFooDao;
 import com.baeldung.spring.data.persistence.service.IFooService;
 import com.baeldung.spring.data.persistence.service.common.AbstractService;
 import org.springframework.beans.factory.annotation.Autowired;

File: persistence-modules/spring-persistence-simple/src/test/java/com/baeldung/spring/data/persistence/repository/UserRepositoryCommon.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.spring.data.persistence.jpaquery;
+package com.baeldung.spring.data.persistence.repository;
 
 import com.baeldung.spring.data.persistence.config.PersistenceConfig;
 import com.baeldung.spring.data.persistence.model.User;

File: core-java-modules/core-java-lang-oop-methods/src/test/java/com/baeldung/hashcode/application/ApplicationUnitTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.hashcode.application;
 
-import com.baeldung.hashcode.entities.User;
+import com.baeldung.hashcode.standard.User;
 import org.junit.Test;
 
 import java.util.HashMap;

File: rabbitmq/src/main/java/com/baeldung/consumer/Receiver.java
Patch:
@@ -17,7 +17,7 @@ public static void main (String[] args) throws IOException, TimeoutException {
 
         channel.queueDeclare(QUEUE_NAME, false, false, false, null);
 
-        Consumer consumer = new DefaultConsumer(channel) {
+        DefaultConsumer consumer = new DefaultConsumer(channel) {
             @Override
             public void handleDelivery(String consumerTag,
                                        Envelope envelope, AMQP.BasicProperties properties,

File: spring-boot-modules/spring-boot-basic-customization/src/main/java/com/baeldung/favicon/config/FaviconConfiguration.java
Patch:
@@ -28,7 +28,7 @@ public SimpleUrlHandlerMapping myFaviconHandlerMapping() {
     @Bean
     protected ResourceHttpRequestHandler faviconRequestHandler() {
         ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();
-        ClassPathResource classPathResource = new ClassPathResource("com/baeldung/images");
+        ClassPathResource classPathResource = new ClassPathResource("com/baeldung/images/");
         List<Resource> locations = Arrays.asList(classPathResource);
         requestHandler.setLocations(locations);
         return requestHandler;

File: java-collections-conversions-2/src/main/java/com/baeldung/modelmapper/MapperUtil.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.stream.Collectors;
 
 /**
- * This is a helper class that contains method for generic mapping of the users list.
+ * This is a helper class that contains method for custom mapping of the users list.
  * Initially, an instance of ModelMapper was created.
  *
  * @author Sasa Milenkovic

File: core-java-modules/core-java-lang-oop-methods/src/test/java/com/baeldung/hashcode/UserUnitTest.java
Patch:
@@ -1,5 +1,6 @@
-package com.baeldung.hashcode.entities;
+package com.baeldung.hashcode;
 
+import com.baeldung.hashcode.standard.User;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: core-java-modules/core-java-lang-oop-types/src/test/java/com/baeldung/nestedclass/AnonymousInnerUnitTest.java
Patch:
@@ -6,7 +6,7 @@ abstract class SimpleAbstractClass {
     abstract void run();
 }
 
-public class AnonymousInnerTest {
+public class AnonymousInnerUnitTest {
 
     @Test
     public void run() {

File: core-java/src/test/java/com/baeldung/exceptions/RootCauseFinderUnitTest.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * Tests the {@link RootCauseFinder}.
  */
-public class RootCauseFinderTest {
+public class RootCauseFinderUnitTest {
 
     @Test
     public void givenBirthDate_whenCalculatingAge_thenAgeReturned() {

File: core-java-modules/core-java-14/src/main/java/com/baeldung/java14/npe/HelpfulNullPointerException.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.java14.helpfulnullpointerexceptions;
+package com.baeldung.java14.npe;
 
 public class HelpfulNullPointerException {
 

File: core-java-modules/core-java-14/src/test/java/com/baeldung/java14/npe/HelpfulNullPointerExceptionUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.java14.helpfulnullpointerexceptions;
+package com.baeldung.java14.npe;
 
 import org.junit.Test;
 

File: core-java-modules/core-java-concurrency-2/src/test/java/com/baeldung/concurrent/MyCounterMultithreadedTCUnitTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.concurrent;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
 import edu.umd.cs.mtc.MultithreadedTestCase;
@@ -25,9 +26,10 @@ public void thread2() throws InterruptedException {
     @SuppressWarnings("deprecation")
     @Override
     public void finish() {
-        assertEquals(2, counter.getCount());
+    	assertEquals(2, counter.getCount());
     }
 
+    @Ignore
     @Test
     public void testCounter() throws Throwable {
         TestFramework.runManyTimes(new MyCounterMultithreadedTCUnitTest(), 1000);

File: core-java-modules/core-java-concurrency-2/src/test/java/com/baeldung/concurrent/MyCounterTempusFugitUnitTest.java
Patch:
@@ -3,6 +3,7 @@
 import static org.junit.Assert.assertEquals;
 
 import org.junit.AfterClass;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -20,6 +21,7 @@ public class MyCounterTempusFugitUnitTest {
 
     private static MyCounter counter = new MyCounter();
 
+    @Ignore
     @Test
     @Concurrent(count = 2)
     @Repeating(repetition = 10)

File: core-java-modules/core-java-concurrency-2/src/test/java/com/baeldung/concurrent/MyCounterThreadWeaverUnitTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import static org.junit.Assert.assertEquals;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
 import com.google.testing.threadtester.AnnotatedTestRunner;
@@ -34,6 +35,7 @@ public void after() {
         assertEquals(2, counter.getCount());
     }
 
+    @Ignore
     @Test
     public void testCounter() {
         new AnnotatedTestRunner().runTests(this.getClass(), MyCounter.class);

File: jee-7/src/main/java/com/baeldung/soap/ws/client/generated/CountryServiceImplService.java
Patch:
@@ -12,11 +12,11 @@
 
 /**
  * This class was generated by the JAX-WS RI.
- * JAX-WS RI 2.3.2
+ * JAX-WS RI 2.2.9-b130926.1035
  * Generated source version: 2.2
  * 
  */
-@WebServiceClient(name = "CountryServiceImplService", targetNamespace = "http://server.ws.soap.baeldung.com/", wsdlLocation = "file:src/main/resources/country.wsdl")
+@WebServiceClient(name = "CountryServiceImplService", targetNamespace = "http://server.ws.soap.baeldung.com/", wsdlLocation = "http://localhost:8888/ws/country?wsdl")
 public class CountryServiceImplService extends Service {
 
     private final static URL COUNTRYSERVICEIMPLSERVICE_WSDL_LOCATION;
@@ -27,7 +27,7 @@ public class CountryServiceImplService extends Service {
         URL url = null;
         WebServiceException e = null;
         try {
-            url = new URL("file:src/main/resources/country.wsdl");
+            url = new URL("http://localhost:8888/ws/country?wsdl");
         } catch (MalformedURLException ex) {
             e = new WebServiceException(ex);
         }

File: jee-7/src/test/java/com/baeldung/batch/understanding/JobSequenceUnitTest.java
Patch:
@@ -1,6 +1,8 @@
 package com.baeldung.batch.understanding;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -13,9 +15,7 @@
 import javax.batch.runtime.StepExecution;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.Disabled;
 
-@Disabled("Should be fixed in BAEL-3812")
 class JobSequenceUnitTest {
     @Test
     public void givenTwoSteps_thenBatch_CompleteWithSuccess() throws Exception {

File: jee-7/src/test/java/com/baeldung/batch/understanding/SimpleChunkUnitTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.batch.understanding;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.util.List;
 import java.util.Map;
@@ -14,9 +15,7 @@
 import javax.batch.runtime.StepExecution;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.Disabled;
 
-@Disabled("Should be fixed in BAEL-3812")
 class SimpleChunkUnitTest {
     @Test
     public void givenChunk_thenBatch_CompletesWithSucess() throws Exception {

File: maven-java-11/multimodule-maven-project/daomodule/src/main/java/module-info.java
Patch:
@@ -1,3 +0,0 @@
-module com.baeldung.dao {
-    exports com.baeldung.dao;
-}

File: maven-java-11/multimodule-maven-project/entitiymodule/src/main/java/module-info.java
Patch:
@@ -1,3 +0,0 @@
-module com.baeldung.entity {
-    exports com.baeldung.entity;
-}

File: persistence-modules/spring-data-dynamodb/src/main/java/com/baeldung/spring/data/dynamodb/config/DynamoDBConfig.java
Patch:
@@ -44,8 +44,8 @@ public AWSCredentials amazonAWSCredentials() {
         return new BasicAWSCredentials(amazonAWSAccessKey, amazonAWSSecretKey);
     }
 
-    @Bean(name = "mvcHandlerMappingIntrospector")
-	public HandlerMappingIntrospector mvcHandlerMappingIntrospector() {
+    @Bean(name = "mvcHandlerMappingIntrospectorCustom")
+	public HandlerMappingIntrospector mvcHandlerMappingIntrospectorCustom() {
 		return new HandlerMappingIntrospector(context);
 	}
 }

File: core-java-modules/core-java-lang-oop-methods/src/main/java/com/baeldung/hashcode/standard/User.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.hashcode.entities;
+package com.baeldung.hashcode.standard;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -34,7 +34,6 @@ public int hashCode() {
         hash = 31 * hash + (int) id;
         hash = 31 * hash + (name == null ? 0 : name.hashCode());
         hash = 31 * hash + (email == null ? 0 : email.hashCode());
-        logger.info("hashCode() method called - Computed hash: " + hash);
         return hash;
     }
     // getters and setters here

File: core-java-modules/core-java-lang-oop-methods/src/test/java/com/baeldung/equalshashcode/TeamUnitTest.java
Patch:
@@ -38,7 +38,7 @@ public void givenMapKeyWithoutHashCode_whenSearched_thenReturnsWrongValue() {
     }
 
     @Test
-    public void equalsContract() {
+    public void equalsHashCodeContracts() {
         EqualsVerifier.forClass(Team.class).verify();
     }
 

File: core-java-modules/core-java-lang-oop-modifiers/src/main/java/com/baeldung/staticmodifier/StaticBlockDemo.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-public class StaticBlock {
+public class StaticBlockDemo {
     private static List<String> ranks = new LinkedList<>();
 
     static {
@@ -23,6 +23,6 @@ public static List<String> getRanks() {
     }
 
     public static void setRanks(List<String> ranks) {
-        StaticBlock.ranks = ranks;
+        StaticBlockDemo.ranks = ranks;
     }
 }

File: core-java-modules/core-java-lang-oop-modifiers/src/test/java/com/baeldung/staticmodifier/StaticBlockDemoUnitTest.java
Patch:
@@ -7,11 +7,11 @@
 
 import org.junit.Test;
 
-public class StaticBlockUnitTest {
+public class StaticBlockDemoUnitTest {
 
     @Test
     public void whenAddedListElementsThroughStaticBlock_thenEnsureCorrectOrder() {
-        List<String> actualList = StaticBlock.getRanks();
+        List<String> actualList = StaticBlockDemo.getRanks();
         assertThat(actualList, contains("Lieutenant", "Captain", "Major", "Colonel", "General"));
     }
 }

File: core-java-modules/core-java-lang-oop-types/src/test/java/com/baeldung/nestedclass/AnonymousInnerTest.java
Patch:
@@ -6,7 +6,7 @@ abstract class SimpleAbstractClass {
     abstract void run();
 }
 
-public class AnonymousInner {
+public class AnonymousInnerTest {
 
     @Test
     public void run() {

File: spring-boot-modules/spring-boot-crud/src/test/java/com/baeldung/crud/UserControllerUnitTest.java
Patch:
@@ -41,7 +41,7 @@ public void whenCalledaddUserAndValidUser_thenCorrect() {
 
         when(mockedBindingResult.hasErrors()).thenReturn(false);
 
-        assertThat(userController.addUser(user, mockedBindingResult, mockedModel)).isEqualTo("index");
+        assertThat(userController.addUser(user, mockedBindingResult, mockedModel)).isEqualTo("redirect:/index");
     }
 
     @Test
@@ -64,7 +64,7 @@ public void whenCalledupdateUserAndValidUser_thenCorrect() {
 
         when(mockedBindingResult.hasErrors()).thenReturn(false);
 
-        assertThat(userController.updateUser(1l, user, mockedBindingResult, mockedModel)).isEqualTo("index");
+        assertThat(userController.updateUser(1l, user, mockedBindingResult, mockedModel)).isEqualTo("redirect:/index");
     }
 
     @Test

File: core-java-modules/core-java-lang-oop-inheritance/src/main/java/com/baeldung/superkeyword/KeywordDemo.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.keyword.superkeyword;
+package com.baeldung.superkeyword;
 
 /**
  * Created by Gebruiker on 5/14/2018.

File: core-java-modules/core-java-lang-oop-inheritance/src/main/java/com/baeldung/superkeyword/SuperBase.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.keyword.superkeyword;
+package com.baeldung.superkeyword;
 
 /**
  * Created by Gebruiker on 5/14/2018.

File: core-java-modules/core-java-lang-oop-inheritance/src/main/java/com/baeldung/superkeyword/SuperSub.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.keyword.superkeyword;
+package com.baeldung.superkeyword;
 
 /**
  * Created by Gebruiker on 5/15/2018.

File: core-java-modules/core-java-lang-oop-inheritance/src/main/java/com/baeldung/variableandmethodhiding/method/BaseMethodClass.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.scope.method;
+package com.baeldung.variableandmethodhiding.method;
 
 
 public class BaseMethodClass {

File: core-java-modules/core-java-lang-oop-inheritance/src/main/java/com/baeldung/variableandmethodhiding/method/ChildMethodClass.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.scope.method;
+package com.baeldung.variableandmethodhiding.method;
 
 
 public class ChildMethodClass extends BaseMethodClass {

File: core-java-modules/core-java-lang-oop-inheritance/src/main/java/com/baeldung/variableandmethodhiding/method/MethodHidingDemo.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.scope.method;
+package com.baeldung.variableandmethodhiding.method;
 
 public class MethodHidingDemo {
 

File: core-java-modules/core-java-lang-oop-inheritance/src/main/java/com/baeldung/variableandmethodhiding/variable/ChildVariable.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.scope.variable;
+package com.baeldung.variableandmethodhiding.variable;
 
 /**
  * Created by Gebruiker on 5/7/2018.

File: core-java-modules/core-java-lang-oop-inheritance/src/main/java/com/baeldung/variableandmethodhiding/variable/HideVariable.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.scope.variable;
+package com.baeldung.variableandmethodhiding.variable;
 
 /**
  * Created by Gebruiker on 5/6/2018.

File: core-java-modules/core-java-lang-oop-inheritance/src/main/java/com/baeldung/variableandmethodhiding/variable/ParentVariable.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.scope.variable;
+package com.baeldung.variableandmethodhiding.variable;
 
 /**
  * Created by Gebruiker on 5/7/2018.

File: core-java-modules/core-java-lang-oop-inheritance/src/main/java/com/baeldung/variableandmethodhiding/variable/VariableHidingDemo.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.scope.variable;
+package com.baeldung.variableandmethodhiding.variable;
 
 /**
  * Created by Gebruiker on 5/6/2018.

File: core-java-modules/core-java-lang-oop-inheritance/src/test/java/com/baeldung/abstractclasses/LowercaseFileReaderUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.abstractclasses.test;
+package com.baeldung.abstractclasses;
 
 import com.baeldung.abstractclasses.filereaders.BaseFileReader;
 import com.baeldung.abstractclasses.filereaders.LowercaseFileReader;

File: core-java-modules/core-java-lang-oop-inheritance/src/test/java/com/baeldung/abstractclasses/UppercaseFileReaderUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.abstractclasses.test;
+package com.baeldung.abstractclasses;
 
 import com.baeldung.abstractclasses.filereaders.BaseFileReader;
 import com.baeldung.abstractclasses.filereaders.UppercaseFileReader;

File: core-java-modules/core-java-lang-oop-methods/src/main/java/com/baeldung/methods/PersonName.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.basicmethods;
+package com.baeldung.methods;
 
 import java.io.FileWriter;
 import java.io.IOException;

File: core-java-modules/core-java-lang-oop-methods/src/test/java/com/baeldung/methodoverloadingoverriding/MethodOverloadingUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.methodoverloadingoverriding.test;
+package com.baeldung.methodoverloadingoverriding;
 
 import com.baeldung.methodoverloadingoverriding.util.Multiplier;
 import org.junit.BeforeClass;

File: core-java-modules/core-java-lang-oop-methods/src/test/java/com/baeldung/methodoverloadingoverriding/MethodOverridingUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.methodoverloadingoverriding.test;
+package com.baeldung.methodoverloadingoverriding;
 
 import com.baeldung.methodoverloadingoverriding.model.Car;
 import com.baeldung.methodoverloadingoverriding.model.Vehicle;

File: core-java-modules/core-java-lang-oop-modifiers/src/main/java/com/baeldung/privatemodifier/Employee.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.core.privatemodifier;
+package com.baeldung.privatemodifier;
 
 public class Employee {
 

File: core-java-modules/core-java-lang-oop-modifiers/src/main/java/com/baeldung/privatemodifier/ExampleClass.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.core.privatemodifier;
+package com.baeldung.privatemodifier;
 
 public class ExampleClass {
 

File: core-java-modules/core-java-lang-oop-modifiers/src/main/java/com/baeldung/privatemodifier/PublicOuterClass.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.core.privatemodifier;
+package com.baeldung.privatemodifier;
 
 public class PublicOuterClass {
 

File: core-java-modules/core-java-lang-oop-modifiers/src/main/java/com/baeldung/publicmodifier/ListOfThree.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.accessmodifiers.publicmodifier;
+package com.baeldung.publicmodifier;
 
 import java.util.AbstractList;
 import java.util.Arrays;

File: core-java-modules/core-java-lang-oop-modifiers/src/main/java/com/baeldung/publicmodifier/SpecialCharacters.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.accessmodifiers.publicmodifier;
+package com.baeldung.publicmodifier;
 
 public class SpecialCharacters {
 

File: core-java-modules/core-java-lang-oop-modifiers/src/main/java/com/baeldung/publicmodifier/Student.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.accessmodifiers.publicmodifier;
+package com.baeldung.publicmodifier;
 
 import java.math.BigDecimal;
 import java.sql.Connection;

File: core-java-modules/core-java-lang-oop-modifiers/src/main/java/com/baeldung/staticmodifier/Car.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.staticdemo;
+package com.baeldung.staticmodifier;
 
 /**
  * This class demonstrates the use of static fields and static methods

File: core-java-modules/core-java-lang-oop-modifiers/src/main/java/com/baeldung/staticmodifier/Singleton.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.staticdemo;
+package com.baeldung.staticmodifier;
 
 public class Singleton  {    
     private Singleton() {}

File: core-java-modules/core-java-lang-oop-modifiers/src/main/java/com/baeldung/staticmodifier/StaticBlock.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.staticdemo;
+package com.baeldung.staticmodifier;
 
 import java.util.LinkedList;
 import java.util.List;

File: core-java-modules/core-java-lang-oop-modifiers/src/test/java/com/baeldung/defaultstaticinterfacemethods/StaticDefaulInterfaceMethodUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.defaultstaticinterfacemethods.test;
+package com.baeldung.defaultstaticinterfacemethods;
 
 import com.baeldung.defaultstaticinterfacemethods.model.Car;
 import com.baeldung.defaultstaticinterfacemethods.model.Motorbike;

File: core-java-modules/core-java-lang-oop-modifiers/src/test/java/com/baeldung/publicmodifier/PublicAccessModifierUnitTest.java
Patch:
@@ -1,7 +1,5 @@
-package com.baeldung.accessmodifiers.publicmodifier;
+package com.baeldung.publicmodifier;
 
-import com.baeldung.accessmodifiers.publicmodifier.ListOfThree;
-import com.baeldung.accessmodifiers.publicmodifier.Student;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.TestInstance.Lifecycle;

File: core-java-modules/core-java-lang-oop-modifiers/src/test/java/com/baeldung/staticmodifier/CarUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.staticdemo;
+package com.baeldung.staticmodifier;
 
 import static org.junit.Assert.*;
 

File: core-java-modules/core-java-lang-oop-modifiers/src/test/java/com/baeldung/staticmodifier/SingletonUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.staticdemo;
+package com.baeldung.staticmodifier;
 
 import org.junit.Assert;
 import org.junit.Test;

File: core-java-modules/core-java-lang-oop-modifiers/src/test/java/com/baeldung/staticmodifier/StaticBlockUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.staticdemo;
+package com.baeldung.staticmodifier;
 
 import static org.hamcrest.collection.IsIterableContainingInOrder.contains;
 import static org.junit.Assert.assertThat;

File: core-java-modules/core-java-lang-oop-types/src/main/java/com/baeldung/thiskeyword/Keyword.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.keyword.thiskeyword;
+package com.baeldung.thiskeyword;
 
 public class Keyword {
 

File: core-java-modules/core-java-lang-oop-modules/core-java-lang-oop-inheritance/src/main/java/com/baeldung/keyword/superkeyword/KeywordDemo.java
Patch:
@@ -1,6 +1,4 @@
-package com.baeldung.keyword;
-
-import com.baeldung.keyword.superkeyword.SuperSub;
+package com.baeldung.keyword.superkeyword;
 
 /**
  * Created by Gebruiker on 5/14/2018.

File: core-java-modules/core-java-lang-oop-3/src/main/java/com/baeldung/keyword/KeywordDemo.java
Patch:
@@ -1,16 +1,13 @@
 package com.baeldung.keyword;
 
 import com.baeldung.keyword.superkeyword.SuperSub;
-import com.baeldung.keyword.thiskeyword.KeywordUnitTest;
 
 /**
  * Created by Gebruiker on 5/14/2018.
  */
 public class KeywordDemo {
 
     public static void main(String[] args) {
-        KeywordUnitTest keyword = new KeywordUnitTest();
-
         SuperSub child = new SuperSub("message from the child class");
     }
 }

File: core-java-modules/core-java-lang-oop-modules/core-java-lang-oop-modifiers/src/test/java/com/baeldung/accessmodifiers/publicmodifier/PublicAccessModifierUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.accessmodifiers;
+package com.baeldung.accessmodifiers.publicmodifier;
 
 import com.baeldung.accessmodifiers.publicmodifier.ListOfThree;
 import com.baeldung.accessmodifiers.publicmodifier.Student;

File: core-java-modules/core-java-lang-oop-modules/core-java-lang-oop-modifiers/src/test/java/com/baeldung/defaultstaticinterfacemethods/test/StaticDefaulInterfaceMethodUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.defaultistaticinterfacemethods.test;
+package com.baeldung.defaultstaticinterfacemethods.test;
 
 import com.baeldung.defaultstaticinterfacemethods.model.Car;
 import com.baeldung.defaultstaticinterfacemethods.model.Motorbike;

File: core-java-modules/core-java-lang-oop-modules/core-java-lang-oop-modifiers/src/test/java/com/baeldung/staticdemo/CarUnitTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import org.junit.Test;
 
-public class CarIntegrationTest {
+public class CarUnitTest {
     @Test
     public void whenNumberOfCarObjectsInitialized_thenStaticCounterIncreases() {
         new Car("Jaguar", "V8");

File: core-java-modules/core-java-lang-oop-modules/core-java-lang-oop-modifiers/src/test/java/com/baeldung/staticdemo/SingletonUnitTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-public class SingletonIntegrationTest {
+public class SingletonUnitTest {
 
     @Test
     public void givenStaticInnerClass_whenMultipleTimesInstanceCalled_thenOnlyOneTimeInitialized() {

File: core-java-modules/core-java-lang-oop-modules/core-java-lang-oop-modifiers/src/test/java/com/baeldung/staticdemo/StaticBlockUnitTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.junit.Test;
 
-public class StaticBlockIntegrationTest {
+public class StaticBlockUnitTest {
 
     @Test
     public void whenAddedListElementsThroughStaticBlock_thenEnsureCorrectOrder() {

File: spring-boot-modules/spring-boot-crud/src/main/java/com/baeldung/crud/controllers/UserController.java
Patch:
@@ -36,7 +36,7 @@ public String addUser(@Valid User user, BindingResult result, Model model) {
         
         userRepository.save(user);
         model.addAttribute("users", userRepository.findAll());
-        return "index";
+        return "redirect:/index";
     }
     
     @GetMapping("/edit/{id}")
@@ -55,7 +55,7 @@ public String updateUser(@PathVariable("id") long id, @Valid User user, BindingR
         
         userRepository.save(user);
         model.addAttribute("users", userRepository.findAll());
-        return "index";
+        return "redirect:/index";
     }
     
     @GetMapping("/delete/{id}")

File: jee-7/src/test/java/com/baeldung/batch/understanding/JobSequenceUnitTest.java
Patch:
@@ -1,6 +1,8 @@
 package com.baeldung.batch.understanding;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -13,9 +15,7 @@
 import javax.batch.runtime.StepExecution;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.Disabled;
 
-@Disabled("Should be fixed in BAEL-3812")
 class JobSequenceUnitTest {
     @Test
     public void givenTwoSteps_thenBatch_CompleteWithSuccess() throws Exception {

File: jee-7/src/test/java/com/baeldung/batch/understanding/SimpleChunkUnitTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.batch.understanding;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.util.List;
 import java.util.Map;
@@ -14,9 +15,7 @@
 import javax.batch.runtime.StepExecution;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.Disabled;
 
-@Disabled("Should be fixed in BAEL-3812")
 class SimpleChunkUnitTest {
     @Test
     public void givenChunk_thenBatch_CompletesWithSucess() throws Exception {

File: jee-7/src/test/java/com/baeldung/batch/understanding/JobSequenceUnitTest.java
Patch:
@@ -1,6 +1,8 @@
 package com.baeldung.batch.understanding;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -13,9 +15,7 @@
 import javax.batch.runtime.StepExecution;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.Disabled;
 
-@Disabled("Should be fixed in BAEL-3812")
 class JobSequenceUnitTest {
     @Test
     public void givenTwoSteps_thenBatch_CompleteWithSuccess() throws Exception {

File: jee-7/src/test/java/com/baeldung/batch/understanding/SimpleChunkUnitTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.batch.understanding;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.util.List;
 import java.util.Map;
@@ -14,9 +15,7 @@
 import javax.batch.runtime.StepExecution;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.Disabled;
 
-@Disabled("Should be fixed in BAEL-3812")
 class SimpleChunkUnitTest {
     @Test
     public void givenChunk_thenBatch_CompletesWithSucess() throws Exception {

File: architecture/src/main/java/com/baeldung/architecture/HexagonalArchitectureTaskApplication.java
Patch:
@@ -5,8 +5,8 @@
 
 @SpringBootApplication
 public class HexagonalArchitectureTaskApplication {
-    public static void main(String[] args) {
-        SpringApplication.run(HexagonalArchitectureTaskApplication.class, args);
-    }
+	public static void main(String[] args) {
+		SpringApplication.run(HexagonalArchitectureTaskApplication.class, args);
+	}
 
 }

File: architecture/src/main/java/com/baeldung/architecture/application/task/AddNewTask.java
Patch:
@@ -19,4 +19,4 @@ public AddNewTask(TaskService taskService) {
     public void create(Task newTask) {
         taskService.createTask(newTask);
     }
-}
+};

File: architecture/src/main/java/com/baeldung/architecture/application/task/GetTasks.java
Patch:
@@ -19,4 +19,4 @@ public GetTasks(TaskService taskService) {
     public Iterable<Task> getAll() {
         return taskService.getAllTasks();
     }
-}
+};

File: architecture/src/main/java/com/baeldung/architecture/framework/cli/StartupRunner.java
Patch:
@@ -17,6 +17,7 @@ public StartupRunner(AddNewDailyTask addNewDailyTask) {
     }
     @Override
     public void run(ApplicationArguments args) throws Exception {
+        System.out.println("Adding daily tasks");
         Task task = new Task();
         task.setDescription("Startup Task");
         addNewDailyTask.create(task);

File: architecture/src/main/java/com/baeldung/architecture/application/task/AddNewDailyTask.java
Patch:
@@ -26,4 +26,4 @@ public void create(Task newTask) {
             addNewTask.create(task);
         }
     }
-}
+};

File: architecture/src/main/java/com/baeldung/architecture/commands/task/CreateTask.java
Patch:
@@ -4,4 +4,4 @@
 
 public interface CreateTask {
     public void create(Task newTask);
-}
+};

File: architecture/src/main/java/com/baeldung/architecture/commands/task/GetAllTasks.java
Patch:
@@ -4,4 +4,4 @@
 
 public interface GetAllTasks {
     public Iterable<Task> getAll();
-}
+};

File: architecture/src/main/java/com/baeldung/architecture/domain/task/TaskService.java
Patch:
@@ -19,4 +19,4 @@ public Iterable<Task> getAllTasks() {
         return taskRepository.findAll();
     }
 
-}
+};

File: architecture/src/main/java/com/baeldung/architecture/framework/cli/StartupRunner.java
Patch:
@@ -21,4 +21,4 @@ public void run(ApplicationArguments args) throws Exception {
         task.setDescription("Startup Task");
         addNewDailyTask.create(task);
     }
-}
+}
\ No newline at end of file

File: architecture/src/main/java/com/baeldung/architecture/framework/http/task/TaskApiController.java
Patch:
@@ -39,4 +39,4 @@ void createTask(@RequestBody TaskRequest taskRequest) {
         task.setDueDate(Instant.parse(taskRequest.getDueDate()));
         addNewTask.create(task);
     }
-}
+}
\ No newline at end of file

File: architecture/src/main/java/com/baeldung/architecture/framework/http/task/TaskRequest.java
Patch:
@@ -25,4 +25,5 @@ public String getDueDate() {
     public void setDueDate(String dueDate) {
         this.dueDate = dueDate;
     }
-} 
+
+} 
\ No newline at end of file

File: persistence-modules/hibernate-types/src/test/java/com/baeldung/hibernate/types/HibernateTypesIntegrationTest.java
Patch:
@@ -115,14 +115,14 @@ void whenSavingHibernateTypes_thenTheCorrectJsonIsStoredInTheDatabase() {
         assertThat(selectAlbumQueryResult.getSongs()).isNullOrEmpty();
 
         selectAlbumQueryResult = albumRepository.findById(superstarAlbum.getId()).get();
-        assertThat(selectAlbumQueryResult.getName()).isEqualTo("Album 0");
+        assertThat(selectAlbumQueryResult.getName()).isEqualTo("The Superstar Album");
         assertThat(selectAlbumQueryResult.getCoverArt().getFrontCoverArtUrl()).isEqualTo("http://fakeurl-0");
         assertThat(selectAlbumQueryResult.getCoverArt().getBackCoverArtUrl()).isEqualTo("http://fakeurl-1");
         assertThat(selectAlbumQueryResult.getSongs()).hasSize(3);
         assertThat(selectAlbumQueryResult.getSongs()).usingFieldByFieldElementComparator().containsExactlyInAnyOrder(aHappySong, aSadSong, anotherHappySong);
 
-        selectAlbumQueryResult = albumRepository.findById(superstarAlbum.getId()).get();
-        assertThat(selectAlbumQueryResult.getName()).isEqualTo("Album 1");
+        selectAlbumQueryResult = albumRepository.findById(newcomerAlbum.getId()).get();
+        assertThat(selectAlbumQueryResult.getName()).isEqualTo("The Newcomer Album");
         assertThat(selectAlbumQueryResult.getCoverArt().getFrontCoverArtUrl()).isEqualTo("http://fakeurl-2");
         assertThat(selectAlbumQueryResult.getCoverArt().getBackCoverArtUrl()).isEqualTo("http://fakeurl-3");
         assertThat(selectAlbumQueryResult.getSongs()).hasSize(1);

File: architecture/src/main/java/com/baeldung/architecture/application/task/AddNewDailyTask.java
Patch:
@@ -26,4 +26,4 @@ public void create(Task newTask) {
             addNewTask.create(task);
         }
     }
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/commands/task/CreateTask.java
Patch:
@@ -4,4 +4,4 @@
 
 public interface CreateTask {
     public void create(Task newTask);
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/commands/task/GetAllTasks.java
Patch:
@@ -4,4 +4,4 @@
 
 public interface GetAllTasks {
     public Iterable<Task> getAll();
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/domain/task/TaskService.java
Patch:
@@ -19,4 +19,4 @@ public Iterable<Task> getAllTasks() {
         return taskRepository.findAll();
     }
 
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/framework/cli/StartupRunner.java
Patch:
@@ -21,4 +21,4 @@ public void run(ApplicationArguments args) throws Exception {
         task.setDescription("Startup Task");
         addNewDailyTask.create(task);
     }
-}
\ No newline at end of file
+}

File: architecture/src/main/java/com/baeldung/architecture/framework/http/task/TaskApiController.java
Patch:
@@ -39,4 +39,4 @@ void createTask(@RequestBody TaskRequest taskRequest) {
         task.setDueDate(Instant.parse(taskRequest.getDueDate()));
         addNewTask.create(task);
     }
-}
\ No newline at end of file
+}

File: architecture/src/main/java/com/baeldung/architecture/framework/http/task/TaskRequest.java
Patch:
@@ -25,5 +25,4 @@ public String getDueDate() {
     public void setDueDate(String dueDate) {
         this.dueDate = dueDate;
     }
-
-} 
\ No newline at end of file
+} 

File: architecture/src/main/java/com/baeldung/architecture/HexagonalArchitectureTaskApplication.java
Patch:
@@ -5,8 +5,8 @@
 
 @SpringBootApplication
 public class HexagonalArchitectureTaskApplication {
-	public static void main(String[] args) {
-		SpringApplication.run(HexagonalArchitectureTaskApplication.class, args);
-	}
+    public static void main(String[] args) {
+        SpringApplication.run(HexagonalArchitectureTaskApplication.class, args);
+    }
 
 }

File: architecture/src/main/java/com/baeldung/architecture/application/task/AddNewTask.java
Patch:
@@ -19,4 +19,4 @@ public AddNewTask(TaskService taskService) {
     public void create(Task newTask) {
         taskService.createTask(newTask);
     }
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/application/task/GetTasks.java
Patch:
@@ -19,4 +19,4 @@ public GetTasks(TaskService taskService) {
     public Iterable<Task> getAll() {
         return taskService.getAllTasks();
     }
-};
+}

File: architecture/src/main/java/com/baeldung/architecture/framework/cli/StartupRunner.java
Patch:
@@ -17,7 +17,6 @@ public StartupRunner(AddNewDailyTask addNewDailyTask) {
     }
     @Override
     public void run(ApplicationArguments args) throws Exception {
-        System.out.println("Adding daily tasks");
         Task task = new Task();
         task.setDescription("Startup Task");
         addNewDailyTask.create(task);

File: spring-boot-modules/spring-boot-basic-customization/src/main/java/com/baeldung/favicon/config/FaviconConfiguration.java
Patch:
@@ -28,7 +28,7 @@ public SimpleUrlHandlerMapping myFaviconHandlerMapping() {
     @Bean
     protected ResourceHttpRequestHandler faviconRequestHandler() {
         ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();
-        ClassPathResource classPathResource = new ClassPathResource("com/baeldung/images");
+        ClassPathResource classPathResource = new ClassPathResource("com/baeldung/images/");
         List<Resource> locations = Arrays.asList(classPathResource);
         requestHandler.setLocations(locations);
         return requestHandler;

File: spring-caching/src/test/java/com/baeldung/multiplecachemanager/MultipleCacheManagerIntegrationUnitTest.java
Patch:
@@ -32,7 +32,7 @@ public class MultipleCacheManagerIntegrationUnitTest {
     private CacheManager alternateCacheManager;
 
     @Test
-    public void whenCallGetOrderDetail_thenDataShouldBeInCaffieneCacheManager() {
+    public void givenCacheResolverIsConfigured_whenCallGetOrderDetail_thenDataShouldBeInCaffieneCacheManager() {
         Integer key = 30001;
         cacheManager.getCache("orders")
             .evict(key);
@@ -50,7 +50,7 @@ public void whenCallGetOrderDetail_thenDataShouldBeInCaffieneCacheManager() {
     }
 
     @Test
-    public void whenCallGetOrderPrice_thenDataShouldBeInAlternateCacheManager() {
+    public void givenCacheResolverIsConfigured_whenCallGetOrderPrice_thenDataShouldBeInAlternateCacheManager() {
         Integer key = 30001;
         alternateCacheManager.getCache("orderprice")
             .evict(key);

File: persistence-modules/java-jpa-2/src/main/java/com/baeldung/jpa/unrelated/entities/Cocktail.java
Patch:
@@ -28,8 +28,7 @@ public class Cocktail {
         referencedColumnName = "cocktail", 
         insertable = false, updatable = false, 
         foreignKey = @javax.persistence
-        .ForeignKey(value = ConstraintMode.NO_CONSTRAINT)
-        )
+          .ForeignKey(value = ConstraintMode.NO_CONSTRAINT))
     private Recipe recipe;
 
     @OneToMany(fetch = FetchType.LAZY)
@@ -40,7 +39,7 @@ public class Cocktail {
         insertable = false, 
         updatable = false, 
         foreignKey = @javax.persistence
-        .ForeignKey(value = ConstraintMode.NO_CONSTRAINT))
+          .ForeignKey(value = ConstraintMode.NO_CONSTRAINT))
     private List<MultipleRecipe> recipeList;
 
     public Cocktail() {

File: data-structures/src/main/java/com/baeldung/tree/BinaryTree.java
Patch:
@@ -142,7 +142,7 @@ public void traverseLevelOrder() {
                 nodes.add(node.left);
             }
 
-            if (node.left != null) {
+            if (node.right != null) {
                 nodes.add(node.right);
             }
         }

File: data-structures/src/main/java/com/baeldung/tree/BinaryTree.java
Patch:
@@ -142,7 +142,7 @@ public void traverseLevelOrder() {
                 nodes.add(node.left);
             }
 
-            if (node.left != null) {
+            if (node.right != null) {
                 nodes.add(node.right);
             }
         }

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/customlogouthandler/user/UserUtils.java
Patch:
@@ -5,8 +5,9 @@
 
 public class UserUtils {
 
-    public static String getAuthenticatedUserLogin() {
-        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+    public static String getAuthenticatedUserName() {
+        Authentication auth = SecurityContextHolder.getContext()
+            .getAuthentication();
         return auth != null ? ((org.springframework.security.core.userdetails.User) auth.getPrincipal()).getUsername() : null;
     }
 

File: persistence-modules/spring-hibernate4/src/main/java/com/baeldung/hibernate/audit/AuditorAwareImpl.java
Patch:
@@ -5,9 +5,7 @@
 import org.springframework.data.domain.AuditorAware;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.stereotype.Component;
 
-@Component("auditorProvider")
 public class AuditorAwareImpl implements AuditorAware<String> {
 
     @Override

File: spring-boot-modules/spring-boot-libraries/src/main/java/com/baeldung/scheduling/shedlock/SpringBootShedlockApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung;
+package com.baeldung.scheduling.shedlock;
 
 import net.javacrumbs.shedlock.spring.annotation.EnableSchedulerLock;
 import org.springframework.boot.SpringApplication;
@@ -8,8 +8,8 @@
 @SpringBootApplication
 @EnableScheduling
 @EnableSchedulerLock(defaultLockAtMostFor = "PT30S")
-public class Application {
+public class SpringBootShedlockApplication {
     public static void main(String[] args) {
-        SpringApplication.run(Application.class, args);
+        SpringApplication.run(SpringBootShedlockApplication.class, args);
     }
 }

File: spring-security-modules/spring-security-mvc-login/src/test/java/com/baeldung/SpringContextTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.springframework.test.context.web.WebAppConfiguration;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@ContextConfiguration({ "/RedirectionWebSecurityConfig.xml", "/mvc-servlet.xml" })
+@ContextConfiguration({ "/RedirectionWebSecurityConfig.xml" })
 @WebAppConfiguration
 public class SpringContextTest {
 	@Test

File: spring-security-modules/spring-security-mvc-login/src/test/java/com/baeldung/security/RedirectionSecurityIntegrationTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@ContextConfiguration({ "/RedirectionWebSecurityConfig.xml", "/mvc-servlet.xml" })
+@ContextConfiguration({ "/RedirectionWebSecurityConfig.xml" })
 @WebAppConfiguration
 public class RedirectionSecurityIntegrationTest {
 

File: spring-boot-modules/spring-boot-libraries/src/main/java/com/baeldung/scheduling/shedlock/SpringBootShedlockApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung;
+package com.baeldung.scheduling.shedlock;
 
 import net.javacrumbs.shedlock.spring.annotation.EnableSchedulerLock;
 import org.springframework.boot.SpringApplication;
@@ -8,8 +8,8 @@
 @SpringBootApplication
 @EnableScheduling
 @EnableSchedulerLock(defaultLockAtMostFor = "PT30S")
-public class Application {
+public class SpringBootShedlockApplication {
     public static void main(String[] args) {
-        SpringApplication.run(Application.class, args);
+        SpringApplication.run(SpringBootShedlockApplication.class, args);
     }
 }

File: spring-security-modules/spring-security-mvc-login/src/test/java/com/baeldung/SpringContextTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.springframework.test.context.web.WebAppConfiguration;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@ContextConfiguration({ "/RedirectionWebSecurityConfig.xml", "/mvc-servlet.xml" })
+@ContextConfiguration({ "/RedirectionWebSecurityConfig.xml" })
 @WebAppConfiguration
 public class SpringContextTest {
 	@Test

File: spring-security-modules/spring-security-mvc-login/src/test/java/com/baeldung/security/RedirectionSecurityIntegrationTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@ContextConfiguration({ "/RedirectionWebSecurityConfig.xml", "/mvc-servlet.xml" })
+@ContextConfiguration({ "/RedirectionWebSecurityConfig.xml" })
 @WebAppConfiguration
 public class RedirectionSecurityIntegrationTest {
 

File: persistence-modules/java-jpa-2/src/test/java/com/baeldung/jpa/unrelated/entities/UnrelatedEntitiesUnitTest.java
Patch:
@@ -38,6 +38,7 @@ public static void closeSession() {
         entityManager.close();
     }
 
+
     @Test
     public void whenQueryingForCocktailThatHasRecipe_thenTheExpectedCocktailReturned() {
         // JPA

File: testing-modules/mocks/src/main/java/com/baeldung/jmockit/ExpectationsCollaborator.java
Patch:
@@ -15,5 +15,5 @@ public interface ExpectationsCollaborator {
     void methodForArgThat(Object o);
     String methodReturnsString();
     int methodReturnsInt();
-    Object methodForDelegate(int i);
+    int methodForDelegate(int i);
 }

File: testing-modules/mocks/src/main/java/com/baeldung/jmockit/ExpectationsCollaborator.java
Patch:
@@ -15,5 +15,5 @@ public interface ExpectationsCollaborator {
     void methodForArgThat(Object o);
     String methodReturnsString();
     int methodReturnsInt();
-    Object methodForDelegate(int i);
+    int methodForDelegate(int i);
 }

File: persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/namingstrategy/Person.java
Patch:
@@ -9,7 +9,6 @@ public class Person {
     @Id
     private Long id;
 
-    @Column(name = "FIRSTNAME")
     private String firstName;
 
     private String lastName;

File: persistence-modules/spring-hibernate-5/src/test/java/com/baeldung/hibernate/criteria/HibernateCriteriaIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 
 import org.hibernate.Session;
 import org.hibernate.Transaction;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import com.baeldung.hibernate.criteria.model.Item;
@@ -24,6 +25,7 @@ public class HibernateCriteriaIntegrationTest {
     final private ApplicationView av = new ApplicationView();
 
     @Test
+    @Ignore
     public void testPerformanceOfCriteria() {
         assertFalse(av.checkIfCriteriaTimeLower());
     }

File: spring-batch/src/main/java/org/baeldung/conditionalflow/step/NumberInfoClassifierWithDecider.java
Patch:
@@ -1,9 +1,6 @@
 package org.baeldung.conditionalflow.step;
 
 import org.baeldung.conditionalflow.model.NumberInfo;
-import org.springframework.batch.core.ExitStatus;
-import org.springframework.batch.core.StepExecution;
-import org.springframework.batch.core.annotation.BeforeStep;
 import org.springframework.batch.core.listener.ItemListenerSupport;
 import org.springframework.batch.item.ItemProcessor;
 

File: spring-batch/src/main/java/org/baeldung/conditionalflow/step/PrependingStdoutWriter.java
Patch:
@@ -7,11 +7,9 @@
 
 public class PrependingStdoutWriter<T> implements ItemWriter<T> {
     private String prependText;
-    private OutputStream writeTo;
 
-    public PrependingStdoutWriter(String prependText, OutputStream os) {
+    public PrependingStdoutWriter(String prependText) {
         this.prependText = prependText;
-        this.writeTo = os;
     }
 
     public PrependingStdoutWriter(String prependText) {

File: spring-batch/src/test/java/org/baeldung/conditionalflow/step/NumberInfoGeneratorUnitTest.java
Patch:
@@ -7,9 +7,10 @@
 import org.junit.jupiter.api.Test;
 
 public class NumberInfoGeneratorUnitTest {
+
     @Test
     public void givenArray_whenGenerator_correctOrderAndValue() {
-        int[] numbers = new int[]{1, -2, 4, -10};
+        int[] numbers = new int[] { 1, -2, 4, -10 };
         NumberInfoGenerator numberGenerator = new NumberInfoGenerator(numbers);
         assertEquals(new NumberInfo(numbers[0]), numberGenerator.read());
         assertEquals(new NumberInfo(numbers[1]), numberGenerator.read());

File: spring-boot-modules/spring-boot-testing/src/test/java/com/baeldung/prevent/commandline/application/runner/execution/LoadSpringContextIntegrationTest.java
Patch:
@@ -19,7 +19,7 @@
 
 @ExtendWith(SpringExtension.class)
 @ContextConfiguration(classes = { ApplicationCommandLineRunnerApp.class }, 
-                      initializers = ConfigFileApplicationContextInitializer.class)
+  initializers = ConfigFileApplicationContextInitializer.class)
 public class LoadSpringContextIntegrationTest {
     @SpyBean
     TaskService taskService;

File: spring-boot-modules/spring-boot-testing/src/test/java/com/baeldung/prevent/commandline/application/runner/execution/RunApplicationIntegrationTest.java
Patch:
@@ -19,7 +19,7 @@ class RunApplicationIntegrationTest {
     CommandLineTaskExecutor commandLineTaskExecutor;
 
     @Test
-    void whenContextLoads_thenTheCommandLineAndApplicationRunnerAreExecuted() throws Exception {
+    void whenContextLoads_thenRunnersRun() throws Exception {
         verify(applicationRunnerTaskExecutor, times(1)).run(any());
         verify(commandLineTaskExecutor, times(1)).run(any());
     }

File: spring-batch/src/main/java/org/baeldung/conditionalflow/step/NumberInfoClassifier.java
Patch:
@@ -10,7 +10,8 @@
 import static org.baeldung.conditionalflow.NumberInfoDecider.NOTIFY;
 import static org.baeldung.conditionalflow.NumberInfoDecider.QUIET;
 
-public class NumberInfoClassifier extends ItemListenerSupport<NumberInfo, Integer> implements ItemProcessor<NumberInfo, Integer> {
+public class NumberInfoClassifier extends ItemListenerSupport<NumberInfo, Integer>
+        implements ItemProcessor<NumberInfo, Integer> {
     private StepExecution stepExecution;
 
     @BeforeStep

File: spring-batch/src/main/java/org/baeldung/conditionalflow/step/NumberInfoClassifierWithDecider.java
Patch:
@@ -13,5 +13,4 @@ public class NumberInfoClassifierWithDecider extends ItemListenerSupport<NumberI
     public Integer process(NumberInfo numberInfo) throws Exception {
         return Integer.valueOf(numberInfo.getNumber());
     }
-
 }

File: spring-batch/src/test/java/org/baeldung/conditionalflow/step/NumberInfoClassifierUnitTest.java
Patch:
@@ -8,7 +8,7 @@
 class NumberInfoClassifierUnitTest {
 
     @Test
-    void process_convertsToInteger() throws Exception {
+    void givenNumberInfo_whenProcess_thenConvertsToInteger() throws Exception {
         NumberInfoClassifier nic = new NumberInfoClassifier();
         assertEquals(Integer.valueOf(4), nic.process(NumberInfo.from(4)));
         assertEquals(Integer.valueOf(-4), nic.process(NumberInfo.from(-4)));

File: spring-batch/src/test/java/org/baeldung/conditionalflow/step/NumberInfoGeneratorUnitTest.java
Patch:
@@ -8,7 +8,7 @@
 
 public class NumberInfoGeneratorUnitTest {
     @Test
-    public void testGenerateNumbers_correctOrderAndValue() {
+    public void givenArray_whenGenerator_correctOrderAndValue() {
         int[] numbers = new int[]{1, -2, 4, -10};
         NumberInfoGenerator numberGenerator = new NumberInfoGenerator(numbers);
         assertEquals(new NumberInfo(numbers[0]), numberGenerator.read());

File: spring-resttemplate/src/main/java/com/baeldung/resttemplate/lists/service/EmployeeService.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@Service
+@Service("EmployeeListService")
 public class EmployeeService
 {
     public List<Employee> getAllEmployees()

File: spring-resttemplate/src/main/java/com/baeldung/sampleapp/web/controller/MyFooController.java
Patch:
@@ -20,7 +20,7 @@
 import com.baeldung.sampleapp.web.exception.ResourceNotFoundException;
 
 @Controller
-@RequestMapping(value = "/foos")
+@RequestMapping(value = "/foo")
 public class MyFooController {
 
     private final Map<Long, Foo> myfoos;

File: spring-resttemplate/src/test/java/com/baeldung/web/service/EmployeeServiceMockRestServiceServerUnitTest.java
Patch:
@@ -16,6 +16,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
@@ -28,7 +29,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 @RunWith(SpringRunner.class)
-@ContextConfiguration(classes = SpringTestConfig.class)
+@SpringBootTest(classes = SpringTestConfig.class)
 public class EmployeeServiceMockRestServiceServerUnitTest {
 
     private static final Logger logger = LoggerFactory.getLogger(EmployeeServiceMockRestServiceServerUnitTest.class);

File: jee-7/src/test/java/com/baeldung/batch/understanding/CustomCheckPointUnitTest.java
Patch:
@@ -12,7 +12,9 @@
 import com.baeldung.batch.understanding.BatchTestHelper;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Disabled;
 
+@Disabled("Should be fixed in BAEL-3812")
 class CustomCheckPointUnitTest {
     @Test
     public void givenChunk_whenCustomCheckPoint_thenCommitCountIsThree() throws Exception {

File: jee-7/src/test/java/com/baeldung/batch/understanding/JobSequenceUnitTest.java
Patch:
@@ -13,7 +13,9 @@
 import javax.batch.runtime.StepExecution;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Disabled;
 
+@Disabled("Should be fixed in BAEL-3812")
 class JobSequenceUnitTest {
     @Test
     public void givenTwoSteps_thenBatch_CompleteWithSuccess() throws Exception {

File: jee-7/src/test/java/com/baeldung/batch/understanding/SimpleChunkUnitTest.java
Patch:
@@ -14,7 +14,9 @@
 import javax.batch.runtime.StepExecution;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Disabled;
 
+@Disabled("Should be fixed in BAEL-3812")
 class SimpleChunkUnitTest {
     @Test
     public void givenChunk_thenBatch_CompletesWithSucess() throws Exception {

File: jee-7/src/test/java/com/baeldung/batch/understanding/CustomCheckPointUnitTest.java
Patch:
@@ -12,7 +12,9 @@
 import com.baeldung.batch.understanding.BatchTestHelper;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Disabled;
 
+@Disabled("Should be fixed in BAEL-3812")
 class CustomCheckPointUnitTest {
     @Test
     public void givenChunk_whenCustomCheckPoint_thenCommitCountIsThree() throws Exception {

File: jee-7/src/test/java/com/baeldung/batch/understanding/JobSequenceUnitTest.java
Patch:
@@ -13,7 +13,9 @@
 import javax.batch.runtime.StepExecution;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Disabled;
 
+@Disabled("Should be fixed in BAEL-3812")
 class JobSequenceUnitTest {
     @Test
     public void givenTwoSteps_thenBatch_CompleteWithSuccess() throws Exception {

File: jee-7/src/test/java/com/baeldung/batch/understanding/SimpleChunkUnitTest.java
Patch:
@@ -14,7 +14,9 @@
 import javax.batch.runtime.StepExecution;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Disabled;
 
+@Disabled("Should be fixed in BAEL-3812")
 class SimpleChunkUnitTest {
     @Test
     public void givenChunk_thenBatch_CompletesWithSucess() throws Exception {

File: spring-boot-modules/spring-boot-basic-customization/src/main/java/com/baeldung/errorhandling/ErrorHandlingApplication.java
Patch:
@@ -2,10 +2,8 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.context.annotation.ComponentScan;
 
-@SpringBootApplication
-@ComponentScan(basePackages = "com.baeldung.errorhandling")
+@SpringBootApplication(scanBasePackages = "com.baeldung.errorhandling")
 public class ErrorHandlingApplication {
 
     public static void main(String [] args) {

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/jdbcauthentication/h2/H2JdbcAuthenticationApplication.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.h2;
+package com.baeldung.jdbcauthentication.h2;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/jdbcauthentication/h2/config/SecurityConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.h2.config;
+package com.baeldung.jdbcauthentication.h2.config;
 
 import javax.sql.DataSource;
 

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/jdbcauthentication/h2/web/UserController.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.h2.web;
+package com.baeldung.jdbcauthentication.h2.web;
 
 import java.security.Principal;
 

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/jdbcauthentication/mysql/MySqlJdbcAuthenticationApplication.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.mysql;
+package com.baeldung.jdbcauthentication.mysql;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/jdbcauthentication/mysql/config/SecurityConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.mysql.config;
+package com.baeldung.jdbcauthentication.mysql.config;
 
 import javax.sql.DataSource;
 

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/jdbcauthentication/mysql/web/UserController.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.mysql.web;
+package com.baeldung.jdbcauthentication.mysql.web;
 
 import java.security.Principal;
 

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/jdbcauthentication/postgre/PostgreJdbcAuthenticationApplication.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.postgre;
+package com.baeldung.jdbcauthentication.postgre;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/jdbcauthentication/postgre/config/SecurityConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.postgre.config;
+package com.baeldung.jdbcauthentication.postgre.config;
 
 import javax.sql.DataSource;
 

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/jdbcauthentication/postgre/web/UserController.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.postgre.web;
+package com.baeldung.jdbcauthentication.postgre.web;
 
 import java.security.Principal;
 

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/multipleauthproviders/CustomAuthenticationProvider.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.multipleauthproviders;
+package com.baeldung.multipleauthproviders;
 
 import java.util.Collections;
 

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/multipleauthproviders/MultipleAuthController.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.multipleauthproviders;
+package com.baeldung.multipleauthproviders;
 
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/multipleauthproviders/MultipleAuthProvidersApplication.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.multipleauthproviders;
+package com.baeldung.multipleauthproviders;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/multipleauthproviders/MultipleAuthProvidersSecurityConfig.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.multipleauthproviders;
+package com.baeldung.multipleauthproviders;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/multipleentrypoints/MultipleEntryPointsApplication.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.multipleentrypoints;
+package com.baeldung.multipleentrypoints;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/multipleentrypoints/MultipleEntryPointsSecurityConfig.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.multipleentrypoints;
+package com.baeldung.multipleentrypoints;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/multipleentrypoints/PagesController.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.multipleentrypoints;
+package com.baeldung.multipleentrypoints;
 
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/multiplelogin/MultipleLoginApplication.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.multiplelogin;
+package com.baeldung.multiplelogin;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -7,7 +7,6 @@
 
 @SpringBootApplication
 @PropertySource("classpath:application-defaults.properties")
-@ComponentScan("org.baeldung.multiplelogin")
 public class MultipleLoginApplication {
     public static void main(String[] args) {
         SpringApplication.run(MultipleLoginApplication.class, args);

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/multiplelogin/MultipleLoginMvcConfig.java
Patch:
@@ -1,19 +1,17 @@
-package org.baeldung.multiplelogin;
+package com.baeldung.multiplelogin;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.ViewResolver;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
-import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
 import org.springframework.web.servlet.view.InternalResourceViewResolver;
 import org.springframework.web.servlet.view.JstlView;
 import org.springframework.context.annotation.ComponentScan;
 
 @EnableWebMvc
 @Configuration
-@ComponentScan("org.baeldung.controller")
 public class MultipleLoginMvcConfig implements WebMvcConfigurer {
 
     public MultipleLoginMvcConfig() {

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/multiplelogin/MultipleLoginSecurityConfig.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.multiplelogin;
+package com.baeldung.multiplelogin;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/multiplelogin/UsersController.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.multiplelogin;
+package com.baeldung.multiplelogin;
 
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/ssl/HttpsEnabledApplication.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.ssl;
+package com.baeldung.ssl;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/ssl/SecurityConfig.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.ssl;
+package com.baeldung.ssl;
 
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

File: spring-security-modules/spring-security-mvc-boot-2/src/main/java/com/baeldung/ssl/WelcomeController.java
Patch:
@@ -1,8 +1,7 @@
-package org.baeldung.ssl;
+package com.baeldung.ssl;
 
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.ResponseBody;
 
 @Controller
 public class WelcomeController {

File: spring-security-modules/spring-security-mvc-boot-2/src/test/java/com/baeldung/jdbcauthentication/h2/SpringContextTest.java
Patch:
@@ -1,6 +1,5 @@
-package org.baeldung.jdbcauthentication.h2;
+package com.baeldung.jdbcauthentication.h2;
 
-import org.baeldung.jdbcauthentication.h2.H2JdbcAuthenticationApplication;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;

File: spring-security-modules/spring-security-mvc-boot-2/src/test/java/com/baeldung/jdbcauthentication/h2/web/UserControllerLiveTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.h2.web;
+package com.baeldung.jdbcauthentication.h2.web;
 
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.CoreMatchers.is;

File: spring-security-modules/spring-security-mvc-boot-2/src/test/java/com/baeldung/jdbcauthentication/mysql/web/UserControllerLiveTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.mysql.web;
+package com.baeldung.jdbcauthentication.mysql.web;
 
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.CoreMatchers.is;

File: spring-security-modules/spring-security-mvc-boot-2/src/test/java/com/baeldung/jdbcauthentication/postgre/web/UserControllerLiveTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.jdbcauthentication.postgre.web;
+package com.baeldung.jdbcauthentication.postgre.web;
 
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.CoreMatchers.is;

File: spring-security-modules/spring-security-mvc-boot-2/src/test/java/com/baeldung/web/HttpsApplicationIntegrationTest.java
Patch:
@@ -1,10 +1,10 @@
-package org.baeldung.web;
+package com.baeldung.web;
 
 import org.apache.http.client.HttpClient;
 import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.ssl.SSLContextBuilder;
-import org.baeldung.ssl.HttpsEnabledApplication;
+import com.baeldung.ssl.HttpsEnabledApplication;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Value;

File: spring-security-modules/spring-security-mvc-boot-2/src/test/java/com/baeldung/web/MultipleAuthProvidersApplicationIntegrationTest.java
Patch:
@@ -1,10 +1,10 @@
-package org.baeldung.web;
+package com.baeldung.web;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.Collections;
 
-import org.baeldung.multipleauthproviders.MultipleAuthProvidersApplication;
+import com.baeldung.multipleauthproviders.MultipleAuthProvidersApplication;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;

File: spring-security-modules/spring-security-mvc-boot-2/src/test/java/com/baeldung/web/MultipleEntryPointsIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.web;
+package com.baeldung.web;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -15,7 +15,7 @@
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
 
-import org.baeldung.multipleentrypoints.MultipleEntryPointsApplication;
+import com.baeldung.multipleentrypoints.MultipleEntryPointsApplication;
 
 import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;
 

File: spring-security-modules/spring-security-mvc-boot-1/src/test/java/org/baeldung/web/CustomUserDetailsServiceIntegrationTest.java
Patch:
@@ -59,7 +59,7 @@ public void givenUserWithReadPermissions_whenRequestFoo_thenRetrieveSampleFoo()
     @WithAnonymousUser
     public void givenAnonymous_whenRequestFoo_thenRetrieveUnauthorized() throws Exception {
         this.mvc.perform(get("/foos/1").with(csrf()))
-            .andExpect(status().isUnauthorized());
+            .andExpect(status().isFound());
     }
 
     @Test

File: spring-security-modules/spring-security-mvc-boot-1/src/test/java/org/baeldung/web/CustomUserDetailsServiceIntegrationTest.java
Patch:
@@ -59,7 +59,7 @@ public void givenUserWithReadPermissions_whenRequestFoo_thenRetrieveSampleFoo()
     @WithAnonymousUser
     public void givenAnonymous_whenRequestFoo_thenRetrieveUnauthorized() throws Exception {
         this.mvc.perform(get("/foos/1").with(csrf()))
-            .andExpect(status().isUnauthorized());
+            .andExpect(status().isFound());
     }
 
     @Test

File: spring-security-modules/spring-security-mvc-boot-1/src/main/java/org/baeldung/custom/Application.java
Patch:
@@ -3,9 +3,11 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
+import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.PropertySource;
 
 @SpringBootApplication
+@ComponentScan("org.baeldung.custom")
 @PropertySource("classpath:application-defaults.properties")
 public class Application extends SpringBootServletInitializer {
     public static void main(String[] args) {

File: spring-security-modules/spring-security-mvc-boot-1/src/main/java/org/baeldung/ip/IpApplication.java
Patch:
@@ -3,9 +3,11 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
+import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.PropertySource;
 
 @SpringBootApplication
+@ComponentScan("org.baeldung.ip")
 @PropertySource("classpath:application-defaults.properties")
 public class IpApplication extends SpringBootServletInitializer {
     public static void main(String[] args) {

File: spring-security-modules/spring-security-mvc-boot-1/src/test/java/org/baeldung/web/ApplicationLiveTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.Test;
 import org.springframework.http.MediaType;
 
-
+// In order to execute these tests, org.baeldung.custom.Application needs to be running.
 public class ApplicationLiveTest {
     
     @Test

File: spring-security-modules/spring-security-mvc-boot-1/src/test/java/org/baeldung/web/IpLiveTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.Test;
 
 
+// In order to execute these tests, org.baeldung.ip.IpApplication needs to be running.
 public class IpLiveTest {
 
     @Test

File: spring-security-modules/spring-security-mvc-boot-1/src/main/java/org/baeldung/custom/Application.java
Patch:
@@ -3,9 +3,11 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
+import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.PropertySource;
 
 @SpringBootApplication
+@ComponentScan("org.baeldung.custom")
 @PropertySource("classpath:application-defaults.properties")
 public class Application extends SpringBootServletInitializer {
     public static void main(String[] args) {

File: spring-security-modules/spring-security-mvc-boot-1/src/main/java/org/baeldung/ip/IpApplication.java
Patch:
@@ -3,9 +3,11 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
+import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.PropertySource;
 
 @SpringBootApplication
+@ComponentScan("org.baeldung.ip")
 @PropertySource("classpath:application-defaults.properties")
 public class IpApplication extends SpringBootServletInitializer {
     public static void main(String[] args) {

File: spring-rest-http/src/main/java/com/baeldung/config/MvcConfig.java
Patch:
@@ -21,7 +21,7 @@
  */
 @Configuration
 @EnableWebMvc
-@ComponentScan({ "com.baeldung.web", "com.baeldung.requestmapping" })
+@ComponentScan({ "com.baeldung.web.controller.status", "com.baeldung.requestmapping" })
 public class MvcConfig implements WebMvcConfigurer {
 
     public MvcConfig() {

File: spring-rest-http/src/main/java/com/baeldung/web/controller/customer/CustomerRestController.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.web.controller;
+package com.baeldung.web.controller.customer;
 
 import com.baeldung.model.Customer;
 import com.baeldung.service.CustomerService;

File: spring-rest-http/src/test/java/com/baeldung/web/controller/customer/CustomerRestControllerIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.web.controller;
+package com.baeldung.web.controller.customer;
 
 import com.baeldung.model.Customer;
 import com.baeldung.service.CustomerService;

File: spring-rest-http/src/test/java/com/baeldung/web/controller/customer/CustomerRestControllerUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.web.controller;
+package com.baeldung.web.controller.customer;
 
 import com.baeldung.model.Customer;
 import com.baeldung.service.CustomerService;

File: spring-rest-http/src/main/java/com/baeldung/config/MvcConfig.java
Patch:
@@ -21,7 +21,7 @@
  */
 @Configuration
 @EnableWebMvc
-@ComponentScan({ "com.baeldung.web", "com.baeldung.requestmapping" })
+@ComponentScan({ "com.baeldung.web.controller.status", "com.baeldung.requestmapping" })
 public class MvcConfig implements WebMvcConfigurer {
 
     public MvcConfig() {

File: spring-rest-http/src/main/java/com/baeldung/web/controller/customer/CustomerRestController.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.web.controller;
+package com.baeldung.web.controller.customer;
 
 import com.baeldung.model.Customer;
 import com.baeldung.service.CustomerService;

File: spring-rest-http/src/test/java/com/baeldung/web/controller/customer/CustomerRestControllerIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.web.controller;
+package com.baeldung.web.controller.customer;
 
 import com.baeldung.model.Customer;
 import com.baeldung.service.CustomerService;

File: spring-rest-http/src/test/java/com/baeldung/web/controller/customer/CustomerRestControllerUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.web.controller;
+package com.baeldung.web.controller.customer;
 
 import com.baeldung.model.Customer;
 import com.baeldung.service.CustomerService;

File: spring-kafka/src/main/java/com/baeldung/spring/kafka/KafkaConsumerConfig.java
Patch:
@@ -29,7 +29,7 @@ public ConsumerFactory<String, String> consumerFactory(String groupId) {
         props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
         return new DefaultKafkaConsumerFactory<>(props);
     }
-    
+
     public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory(String groupId) {
         ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>();
         factory.setConsumerFactory(consumerFactory(groupId));
@@ -50,12 +50,12 @@ public ConcurrentKafkaListenerContainerFactory<String, String> barKafkaListenerC
     public ConcurrentKafkaListenerContainerFactory<String, String> headersKafkaListenerContainerFactory() {
         return kafkaListenerContainerFactory("headers");
     }
-    
+
     @Bean
     public ConcurrentKafkaListenerContainerFactory<String, String> partitionsKafkaListenerContainerFactory() {
         return kafkaListenerContainerFactory("partitions");
     }
-    
+
     @Bean
     public ConcurrentKafkaListenerContainerFactory<String, String> filterKafkaListenerContainerFactory() {
         ConcurrentKafkaListenerContainerFactory<String, String> factory = kafkaListenerContainerFactory("filter");

File: spring-kafka/src/main/java/com/baeldung/spring/kafka/KafkaProducerConfig.java
Patch:
@@ -32,7 +32,7 @@ public ProducerFactory<String, String> producerFactory() {
     public KafkaTemplate<String, String> kafkaTemplate() {
         return new KafkaTemplate<>(producerFactory());
     }
-    
+
     @Bean
     public ProducerFactory<String, Greeting> greetingProducerFactory() {
         Map<String, Object> configProps = new HashMap<>();
@@ -41,10 +41,10 @@ public ProducerFactory<String, Greeting> greetingProducerFactory() {
         configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
         return new DefaultKafkaProducerFactory<>(configProps);
     }
-    
+
     @Bean
     public KafkaTemplate<String, Greeting> greetingKafkaTemplate() {
         return new KafkaTemplate<>(greetingProducerFactory());
     }
-    
+
 }

File: spring-kafka/src/main/java/com/baeldung/spring/kafka/KafkaApplication.java
Patch:
@@ -158,7 +158,7 @@ public void listenWithHeaders(@Payload String message, @Header(KafkaHeaders.RECE
             latch.countDown();
         }
 
-        @KafkaListener(topicPartitions = @TopicPartition(topic = "${partitioned.topic.name}", partitions = { "0", "3" }))
+        @KafkaListener(topicPartitions = @TopicPartition(topic = "${partitioned.topic.name}", partitions = { "0", "3" }), containerFactory = "partitionsKafkaListenerContainerFactory")
         public void listenToParition(@Payload String message, @Header(KafkaHeaders.RECEIVED_PARTITION_ID) int partition) {
             System.out.println("Received Message: " + message + " from partition: " + partition);
             this.partitionLatch.countDown();

File: spring-boot-rest/src/main/java/com/baeldung/persistence/model/Order.java
Patch:
@@ -1,8 +1,8 @@
 package com.baeldung.persistence.model;
 
-import org.springframework.hateoas.ResourceSupport;
+import org.springframework.hateoas.RepresentationModel;
 
-public class Order extends ResourceSupport {
+public class Order extends RepresentationModel<Order> {
     private String orderId;
     private double price;
     private int quantity;

File: spring-boot-rest/src/test/java/com/baeldung/test/JacksonMarshaller.java
Patch:
@@ -60,7 +60,7 @@ public final <T> List<T> decodeList(final String resourcesAsString, final Class<
         List<T> entities = null;
         try {
             if (clazz.equals(Foo.class)) {
-                entities = objectMapper.readValue(resourcesAsString, new TypeReference<List<Foo>>() {
+                entities = objectMapper.readValue(resourcesAsString, new TypeReference<List<T>>() {
                     // ...
                 });
             } else {

File: core-java-modules/core-java-exceptions-2/src/main/java/com/baeldung/suppressed/SuppressedExceptionsDemo.java
Patch:
@@ -10,7 +10,7 @@ public static void demoSuppressedException(String filePath) throws IOException {
         try {
             fileIn = new FileInputStream(filePath);
         } catch (IOException e) {
-            
+            throw new IOException(e.getMessage());
         } finally {
             fileIn.close();
         }

File: spring-boot-modules/spring-boot-properties/src/test/java/com/baeldung/buildproperties/BuildInfoServiceIntegrationTest.java
Patch:
@@ -18,7 +18,7 @@ class BuildInfoServiceIntegrationTest {
     
     @Test
     void whenGetApplicationDescription_thenSuccess() {
-        assertThat(service.getApplicationDescription(), Matchers.is("This is simple boot application for Spring boot actuator test"));
+        assertThat(service.getApplicationDescription(), Matchers.is("Spring Boot Properties Module"));
         assertThat(service.getApplicationVersion(), Matchers.is("0.0.1-SNAPSHOT"));
     }
 }

File: spring-boot-modules/spring-boot-properties/src/test/java/com/baeldung/buildproperties/BuildInfoServiceIntegrationTest.java
Patch:
@@ -18,7 +18,7 @@ class BuildInfoServiceIntegrationTest {
     
     @Test
     void whenGetApplicationDescription_thenSuccess() {
-        assertThat(service.getApplicationDescription(), Matchers.is("This is simple boot application for Spring boot actuator test"));
+        assertThat(service.getApplicationDescription(), Matchers.is("Spring Boot Properties Module"));
         assertThat(service.getApplicationVersion(), Matchers.is("0.0.1-SNAPSHOT"));
     }
 }

File: persistence-modules/redis/src/test/java/com/baeldung/redis_scan/NaiveApproachIntegrationTest.java
Patch:
@@ -25,13 +25,14 @@ public static void setUp() throws IOException {
         s.close();
 
         redisServer = new RedisServer(port);
-        redisServer.start();
     }
 
     @AfterClass
     public static void destroy() {
-        if (redisServer.isActive())
+        if (redisServer.isActive()) {
             redisServer.stop();
+            redisClient.destroyInstance();
+        }
     }
 
     @Before

File: persistence-modules/redis/src/test/java/com/baeldung/redis_scan/ScanStrategyIntegrationTest.java
Patch:
@@ -32,13 +32,14 @@ public static void setUp() throws IOException {
         s.close();
 
         redisServer = new RedisServer(port);
-        redisServer.start();
     }
 
     @AfterClass
     public static void destroy() {
-        if (redisServer.isActive())
+        if (redisServer.isActive()) {
             redisServer.stop();
+            redisClient.destroyInstance();
+        }
     }
 
     @Before

File: persistence-modules/redis/src/test/java/com/baeldung/redis_scan/NaiveApproachIntegrationTest.java
Patch:
@@ -25,13 +25,14 @@ public static void setUp() throws IOException {
         s.close();
 
         redisServer = new RedisServer(port);
-        redisServer.start();
     }
 
     @AfterClass
     public static void destroy() {
-        if (redisServer.isActive())
+        if (redisServer.isActive()) {
             redisServer.stop();
+            redisClient.destroyInstance();
+        }
     }
 
     @Before

File: persistence-modules/redis/src/test/java/com/baeldung/redis_scan/ScanStrategyIntegrationTest.java
Patch:
@@ -32,13 +32,14 @@ public static void setUp() throws IOException {
         s.close();
 
         redisServer = new RedisServer(port);
-        redisServer.start();
     }
 
     @AfterClass
     public static void destroy() {
-        if (redisServer.isActive())
+        if (redisServer.isActive()) {
             redisServer.stop();
+            redisClient.destroyInstance();
+        }
     }
 
     @Before

File: spring-threads/src/test/java/com/baeldung/threading/ThreadPoolTaskExecutorUnitTest.java
Patch:
@@ -55,7 +55,7 @@ public void whenCorePoolSizeFive_thenFiveThreads() {
     }
 
     @Test
-    public void whenCorePoolSizeFive_andMaxPoolSizeTen_thenFiveThreads() {
+    public void whenCorePoolSizeFiveAndMaxPoolSizeTen_thenFiveThreads() {
         ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();
         taskExecutor.setCorePoolSize(5);
         taskExecutor.setMaxPoolSize(10);
@@ -79,7 +79,7 @@ public void whenCorePoolSizeFive_andMaxPoolSizeTen_thenFiveThreads() {
     }
 
     @Test
-    public void whenCorePoolSizeFive_andMaxPoolSizeTen_andQueueCapacityZero_thenTenThreads() {
+    public void whenCorePoolSizeFiveAndMaxPoolSizeTenAndQueueCapacityZero_thenTenThreads() {
         ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();
         taskExecutor.setCorePoolSize(5);
         taskExecutor.setMaxPoolSize(10);
@@ -104,7 +104,7 @@ public void whenCorePoolSizeFive_andMaxPoolSizeTen_andQueueCapacityZero_thenTenT
     }
 
     @Test
-    public void whenCorePoolSizeFive_andMaxPoolSizeTen_andQueueCapacityTen_thenTenThreads() {
+    public void whenCorePoolSizeFiveAndMaxPoolSizeTenAndQueueCapacityTen_thenTenThreads() {
         ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();
         taskExecutor.setCorePoolSize(5);
         taskExecutor.setMaxPoolSize(10);

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/application/cli/CliOrderController.java
Patch:
@@ -28,7 +28,6 @@ public void addProduct(UUID orderId, Product product) {
 
     public void deleteProduct(UUID orderId, UUID productId) {
         orderService.deleteProduct(orderId, productId);
-
     }
 
     public void completeOrder(UUID orderId) {

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/repository/cassandra/CassandraDbOrderRepository.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.UUID;
 
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.Primary;
 import org.springframework.stereotype.Component;
 
 import com.baeldung.dddhexagonalspring.domain.Order;
@@ -24,7 +23,8 @@ public CassandraDbOrderRepository(SpringDataCassandraOrderRepository orderReposi
     public Optional<Order> findById(UUID id) {
         Optional<OrderEntity> orderEntity = orderRepository.findById(id);
         if (orderEntity.isPresent()) {
-            return Optional.of(orderEntity.get().toOrder());
+            return Optional.of(orderEntity.get()
+                .toOrder());
         } else {
             return Optional.empty();
         }

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/repository/cassandra/SpringDataCassandraOrderRepository.java
Patch:
@@ -6,6 +6,5 @@
 import org.springframework.stereotype.Repository;
 
 @Repository
-public interface SpringDataCassandraOrderRepository extends CassandraRepository<OrderEntity, UUID>{
-
+public interface SpringDataCassandraOrderRepository extends CassandraRepository<OrderEntity, UUID> {
 }

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/configuration/CassandraConfiguration.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.data.cassandra.repository.config.EnableCassandraRepositories;
 
-import com.baeldung.dddhexagonalspring.infrastracture.repository.SpringDataCassandraOrderRepository;
+import com.baeldung.dddhexagonalspring.infrastracture.repository.cassandra.SpringDataCassandraOrderRepository;
 
 @EnableCassandraRepositories(basePackageClasses = SpringDataCassandraOrderRepository.class)
 public class CassandraConfiguration {

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/configuration/MongoDBConfiguration.java
Patch:
@@ -1,8 +1,9 @@
 package com.baeldung.dddhexagonalspring.infrastracture.configuration;
 
-import com.baeldung.dddhexagonalspring.infrastracture.repository.SpringDataMongoOrderRepository;
 import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
+import com.baeldung.dddhexagonalspring.infrastracture.repository.mongo.SpringDataMongoOrderRepository;
+
 @EnableMongoRepositories(basePackageClasses = SpringDataMongoOrderRepository.class)
 public class MongoDBConfiguration {
 }

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/repository/cassandra/CassandraDbOrderRepository.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.dddhexagonalspring.infrastracture.repository;
+package com.baeldung.dddhexagonalspring.infrastracture.repository.cassandra;
 
 import java.util.Optional;
 import java.util.UUID;

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/repository/cassandra/OrderEntity.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.dddhexagonalspring.infrastracture.repository;
+package com.baeldung.dddhexagonalspring.infrastracture.repository.cassandra;
 
 import java.math.BigDecimal;
 import java.util.List;

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/repository/cassandra/OrderItemEntity.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.dddhexagonalspring.infrastracture.repository;
+package com.baeldung.dddhexagonalspring.infrastracture.repository.cassandra;
 
 import java.math.BigDecimal;
 import java.util.UUID;

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/repository/cassandra/SpringDataCassandraOrderRepository.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.dddhexagonalspring.infrastracture.repository;
+package com.baeldung.dddhexagonalspring.infrastracture.repository.cassandra;
 
 import java.util.UUID;
 

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/repository/mongo/MongoDbOrderRepository.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.dddhexagonalspring.infrastracture.repository;
+package com.baeldung.dddhexagonalspring.infrastracture.repository.mongo;
 
 import com.baeldung.dddhexagonalspring.domain.Order;
 import com.baeldung.dddhexagonalspring.domain.repository.OrderRepository;

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/repository/mongo/SpringDataMongoOrderRepository.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.dddhexagonalspring.infrastracture.repository;
+package com.baeldung.dddhexagonalspring.infrastracture.repository.mongo;
 
 import com.baeldung.dddhexagonalspring.domain.Order;
 import org.springframework.data.mongodb.repository.MongoRepository;

File: spring-boot-modules/spring-boot-security/src/main/java/com/baeldung/springbootsecurity/autoconfig/config/BasicConfiguration.java
Patch:
@@ -22,7 +22,7 @@ protected void configure(AuthenticationManagerBuilder auth) throws Exception {
           .roles("USER")
           .and()
           .withUser("admin")
-          .password(encoder.encode("admin"))cl
+          .password(encoder.encode("admin"))
           .roles("USER", "ADMIN");
     }
 

File: spring-security-modules/spring-security-react/src/test/java/org/baeldung/SpringContextTest.java
Patch:
@@ -6,8 +6,10 @@
 import org.junit.runner.RunWith;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.web.WebAppConfiguration;
 
 @RunWith(SpringJUnit4ClassRunner.class)
+@WebAppConfiguration
 @ContextConfiguration(classes = { MvcConfig.class, SecSecurityConfig.class })
 public class SpringContextTest {
 

File: open-liberty/src/main/java/com/baeldung/openliberty/servlet/AppServlet.java
Patch:
@@ -13,11 +13,13 @@ public class AppServlet extends HttpServlet {
 
     private static final long serialVersionUID = 1L;
 
+    @Override
     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         String htmlOutput = "<html><h2>Hello! Welcome to Open Liberty</h2></html>";
         response.getWriter().append(htmlOutput);
     }
 
+    @Override
     protected void doPost(HttpServletRequest request, HttpServletResponse response)
         throws ServletException, IOException {
         doGet(request, response);

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/repository/MongoDbOrderRepository.java
Patch:
@@ -3,12 +3,14 @@
 import com.baeldung.dddhexagonalspring.domain.Order;
 import com.baeldung.dddhexagonalspring.domain.repository.OrderRepository;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Primary;
 import org.springframework.stereotype.Component;
 
 import java.util.Optional;
 import java.util.UUID;
 
 @Component
+@Primary
 public class MongoDbOrderRepository implements OrderRepository {
 
     private final SpringDataMongoOrderRepository orderRepository;

File: ddd/src/main/java/com/baeldung/dddhexagonalspring/infrastracture/repository/SpringDataCassandraOrderRepository.java
Patch:
@@ -3,9 +3,11 @@
 import java.util.UUID;
 
 import org.springframework.data.cassandra.repository.CassandraRepository;
+import org.springframework.stereotype.Repository;
 
 import com.baeldung.dddhexagonalspring.domain.Order;
 
+@Repository
 public interface SpringDataCassandraOrderRepository extends CassandraRepository<Order, UUID>{
 
 }

File: spring-security-modules/spring-security-react/src/test/java/org/baeldung/SpringContextTest.java
Patch:
@@ -6,8 +6,10 @@
 import org.junit.runner.RunWith;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.web.WebAppConfiguration;
 
 @RunWith(SpringJUnit4ClassRunner.class)
+@WebAppConfiguration
 @ContextConfiguration(classes = { MvcConfig.class, SecSecurityConfig.class })
 public class SpringContextTest {
 

File: core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java
Patch:
@@ -17,7 +17,6 @@
 @TestMethodOrder(MethodOrderer.OrderAnnotation.class)
 public class JndiExceptionsUnitTest {
 
-    @Disabled
     @Test
     @Order(1)
     void givenNoContext_whenLookupObject_thenThrowNoInitialContext() {

File: akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java
Patch:
@@ -31,10 +31,10 @@ public void whenRequest_thenActorResponds() {
             .assertStatusCode(404);
 
     appRoute.run(HttpRequest.DELETE("/users/1"))
-            .assertStatusCode(200);
+            .assertStatusCode(405);
 
     appRoute.run(HttpRequest.DELETE("/users/42"))
-            .assertStatusCode(200);
+            .assertStatusCode(405);
 
     appRoute.run(HttpRequest.POST("/users")
             .withEntity(HttpEntities.create(ContentTypes.APPLICATION_JSON, zaphod())))

File: spring-boot-testing/src/test/java/com/baeldung/testloglevel/TestLogLevelWithProfileIntegrationTest.java
Patch:
@@ -11,12 +11,15 @@
 import org.springframework.boot.test.rule.OutputCapture;
 import org.springframework.boot.test.web.client.TestRestTemplate;
 import org.springframework.http.ResponseEntity;
+import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.springframework.test.annotation.DirtiesContext.ClassMode.AFTER_CLASS;
 
 @RunWith(SpringRunner.class)
+@DirtiesContext(classMode = AFTER_CLASS)
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, classes = TestLogLevelApplication.class)
 @EnableAutoConfiguration(exclude = SecurityAutoConfiguration.class)
 @ActiveProfiles("logging-test")

File: open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java
Patch:
@@ -32,9 +32,9 @@ public void whenConsumeWithJsonb_thenGetPerson() {
         String result = RestConsumer.consumeWithJsonb(url);        
 
         Person person = JsonbBuilder.create().fromJson(result, Person.class);
-        assertEquals(person.getId(), 1);
-        assertEquals(person.getUsername(), "normanlewis");
-        assertEquals(person.getEmail(), "normanlewis@email.com");
+        assertEquals(1, person.getId());
+        assertEquals("normanlewis", person.getUsername());
+        assertEquals("normanlewis@email.com", person.getEmail());
     }
 
 }

File: algorithms-miscellaneous-2/src/main/java/com/baeldung/algorithms/slope_one/SlopeOne.java
Patch:
@@ -98,7 +98,7 @@ private static void predict(Map<User, HashMap<Item, Double>> data) {
             for (Item j : InputData.items) {
                 if (e.getValue().containsKey(j)) {
                     clean.put(j, e.getValue().get(j));
-                } else {
+                } else if (!clean.containsKey(j)) {
                     clean.put(j, -1.0);
                 }
             }

File: akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java
Patch:
@@ -7,6 +7,8 @@
 import akka.http.javadsl.model.HttpRequest;
 import akka.http.javadsl.testkit.JUnitRouteTest;
 import akka.http.javadsl.testkit.TestRoute;
+
+import org.junit.Ignore;
 import org.junit.Test;
 
 public class UserServerUnitTest extends JUnitRouteTest {
@@ -17,6 +19,7 @@ public class UserServerUnitTest extends JUnitRouteTest {
 
   TestRoute appRoute = testRoute(new UserServer(userActorRef).routes());
 
+  @Ignore
   @Test
   public void whenRequest_thenActorResponds() {
 

File: core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.rejection;
 
 import org.junit.After;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.ArrayList;
@@ -28,6 +29,7 @@ public void shutdownExecutor() {
         }
     }
 
+    @Ignore
     @Test
     public void givenAbortPolicy_WhenSaturated_ThenShouldThrowRejectedExecutionException() {
         executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new AbortPolicy());
@@ -36,6 +38,7 @@ public void givenAbortPolicy_WhenSaturated_ThenShouldThrowRejectedExecutionExcep
         assertThatThrownBy(() -> executor.execute(() -> System.out.println("Will be rejected"))).isInstanceOf(RejectedExecutionException.class);
     }
 
+    @Ignore
     @Test
     public void givenCallerRunsPolicy_WhenSaturated_ThenTheCallerThreadRunsTheTask() {
         executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new CallerRunsPolicy());

File: core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.file;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.*;
@@ -73,6 +74,7 @@ public void givenReadOnlyFile_whenCreateNewFile_thenCantModFile() {
         assertFalse(writable);
     }
 
+    @Ignore
     @Test
     public void givenWriteOnlyFile_whenCreateNewFile_thenCantReadFile() {
         File parentDir = makeDir("writeDir");

File: core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoManualTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-public class JvmExitDemoUnitTest {
+public class JvmExitDemoManualTest {
 
     JvmExitAndHaltDemo jvmExitAndHaltDemo = new JvmExitAndHaltDemo();
 

File: core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoManualTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-public class JvmHaltDemoUnitTest {
+public class JvmHaltDemoManualTest {
 
     JvmExitAndHaltDemo jvmExitAndHaltDemo = new JvmExitAndHaltDemo();
 

File: persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/multipledb/dao/product/ProductRepository.java
Patch:
@@ -5,9 +5,9 @@
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.repository.PagingAndSortingRepository;
 
-import com.baeldung.multipledb.model.product.ProductMultipleDB;
+import com.baeldung.multipledb.model.product.Product;
 
-public interface ProductRepository extends PagingAndSortingRepository<ProductMultipleDB, Integer> {
+public interface ProductRepository extends PagingAndSortingRepository<Product, Integer> {
 
-    List<ProductMultipleDB> findAllByPrice(double price, Pageable pageable);
+    List<Product> findAllByPrice(double price, Pageable pageable);
 }

File: spring-cloud/spring-cloud-gateway/src/test/java/com/baeldung/springcloudgateway/customfilters/gatewayapp/CustomFiltersLiveTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.assertj.core.api.Condition;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.web.server.LocalServerPort;
@@ -27,6 +28,7 @@ public class CustomFiltersLiveTest {
     @LocalServerPort
     String port;
 
+    @Autowired
     private WebTestClient client;
 
     @BeforeEach

File: spring-security-modules/spring-security-cors/src/test/java/com/baeldung/springbootsecuritycors/ResourceControllerUnitTest.java
Patch:
@@ -18,7 +18,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = { SpringBootSecurityApplication.class })
-public class ResourceControllerTest {
+public class ResourceControllerUnitTest {
 
     private MockMvc mockMvc;
 

File: spring-boot-modules/spring-boot-rest/src/test/java/com/baeldung/springhateoas/CustomerControllerIntegrationTest.java
Patch:
@@ -70,7 +70,7 @@ public void givenExistingCustomerWithOrders_whenOrdersRequested_thenHalResourceR
 
         this.mvc.perform(get("/customers/" + DEFAULT_CUSTOMER_ID + "/orders").accept(MediaTypes.HAL_JSON_VALUE))
             .andExpect(status().isOk())
-            .andExpect(jsonPath("$._embedded.orderList[0]._links.self.href",
+            .andExpect(jsonPath("$._embedded.orders[0]._links.self.href",
                 is("http://localhost/customers/customer1/order1")))
             .andExpect(jsonPath("$._links.self.href", is("http://localhost/customers/customer1/orders")));
     }
@@ -89,8 +89,8 @@ public void givenExistingCustomer_whenAllCustomersRequested_thenHalResourceRetri
         this.mvc.perform(get("/customers/").accept(MediaTypes.HAL_JSON_VALUE))
             .andExpect(status().isOk())
             .andExpect(
-                jsonPath("$._embedded.customerList[0]._links.self.href", is("http://localhost/customers/customer1")))
-            .andExpect(jsonPath("$._embedded.customerList[0]._links.allOrders.href",
+                jsonPath("$._embedded.customers[0]._links.self.href", is("http://localhost/customers/customer1")))
+            .andExpect(jsonPath("$._embedded.customers[0]._links.allOrders.href",
                 is("http://localhost/customers/customer1/orders")))
             .andExpect(jsonPath("$._links.self.href", is("http://localhost/customers")));
     }

File: akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java
Patch:
@@ -28,10 +28,10 @@ public void whenRequest_thenActorResponds() {
             .assertStatusCode(404);
 
     appRoute.run(HttpRequest.DELETE("/users/1"))
-            .assertStatusCode(200);
+            .assertStatusCode(405);
 
     appRoute.run(HttpRequest.DELETE("/users/42"))
-            .assertStatusCode(200);
+            .assertStatusCode(405);
 
     appRoute.run(HttpRequest.POST("/users")
             .withEntity(HttpEntities.create(ContentTypes.APPLICATION_JSON, zaphod())))

File: core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/stringconcatenation/StringConcatenationUnitTest.java
Patch:
@@ -43,7 +43,7 @@ public void givenMultipleStrings_whenConcatUsingStringFormat_checkStringCorrect(
             "oops");
 
 
-    assertEquals("I ate 2,51 blueberry pies, oops...", myString);
+    assertEquals("I ate 2.51 blueberry pies, oops...", myString);
   }
 
   @Test

File: core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/stringconcatenation/StringConcatenationUnitTest.java
Patch:
@@ -43,7 +43,7 @@ public void givenMultipleStrings_whenConcatUsingStringFormat_checkStringCorrect(
             "oops");
 
 
-    assertEquals("I ate 2.51 blueberry pies, oops...", myString);
+    assertEquals("I ate 2,51 blueberry pies, oops...", myString);
   }
 
   @Test

File: spring-security-modules/spring-security-cors/src/test/java/com/baeldung/springbootsecuritycors/ResourceControllerUnitTest.java
Patch:
@@ -18,7 +18,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = { SpringBootSecurityApplication.class })
-public class ResourceControllerTest {
+public class ResourceControllerUnitTest {
 
     private MockMvc mockMvc;
 

File: akka-http/src/test/java/com/baeldung/akkahttp/UserServerUnitTest.java
Patch:
@@ -7,6 +7,8 @@
 import akka.http.javadsl.model.HttpRequest;
 import akka.http.javadsl.testkit.JUnitRouteTest;
 import akka.http.javadsl.testkit.TestRoute;
+
+import org.junit.Ignore;
 import org.junit.Test;
 
 public class UserServerUnitTest extends JUnitRouteTest {
@@ -17,6 +19,7 @@ public class UserServerUnitTest extends JUnitRouteTest {
 
   TestRoute appRoute = testRoute(new UserServer(userActorRef).routes());
 
+  @Ignore
   @Test
   public void whenRequest_thenActorResponds() {
 

File: core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/rejection/SaturationPolicyUnitTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.baeldung.rejection;
 
 import org.junit.After;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.ArrayList;
@@ -28,6 +29,7 @@ public void shutdownExecutor() {
         }
     }
 
+    @Ignore
     @Test
     public void givenAbortPolicy_WhenSaturated_ThenShouldThrowRejectedExecutionException() {
         executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new AbortPolicy());
@@ -36,6 +38,7 @@ public void givenAbortPolicy_WhenSaturated_ThenShouldThrowRejectedExecutionExcep
         assertThatThrownBy(() -> executor.execute(() -> System.out.println("Will be rejected"))).isInstanceOf(RejectedExecutionException.class);
     }
 
+    @Ignore
     @Test
     public void givenCallerRunsPolicy_WhenSaturated_ThenTheCallerThreadRunsTheTask() {
         executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new SynchronousQueue<>(), new CallerRunsPolicy());

File: core-java-modules/core-java-io-apis/src/test/java/com/baeldung/file/FileClassUnitTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.baeldung.file;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.*;
@@ -73,6 +74,7 @@ public void givenReadOnlyFile_whenCreateNewFile_thenCantModFile() {
         assertFalse(writable);
     }
 
+    @Ignore
     @Test
     public void givenWriteOnlyFile_whenCreateNewFile_thenCantReadFile() {
         File parentDir = makeDir("writeDir");

File: core-java-modules/core-java-jndi/src/test/java/com/baeldung/jndi/exceptions/JndiExceptionsUnitTest.java
Patch:
@@ -1,5 +1,7 @@
 package com.baeldung.jndi.exceptions;
 
+import org.junit.Ignore;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.Order;
 import org.junit.jupiter.api.Test;
@@ -16,6 +18,7 @@
 @TestMethodOrder(MethodOrderer.OrderAnnotation.class)
 public class JndiExceptionsUnitTest {
 
+	@Disabled
     @Test
     @Order(1)
     void givenNoContext_whenLookupObject_thenThrowNoInitialContext() {

File: core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmExitDemoManualTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-public class JvmExitDemoUnitTest {
+public class JvmExitDemoManualTest {
 
     JvmExitAndHaltDemo jvmExitAndHaltDemo = new JvmExitAndHaltDemo();
 

File: core-java-modules/core-java-jvm/src/test/java/com/baeldung/exitvshalt/JvmHaltDemoManualTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-public class JvmHaltDemoUnitTest {
+public class JvmHaltDemoManualTest {
 
     JvmExitAndHaltDemo jvmExitAndHaltDemo = new JvmExitAndHaltDemo();
 

File: persistence-modules/spring-data-keyvalue/src/main/java/com/baeldung/spring/data/keyvalue/services/impl/EmployeeServicesWithKeyValueTemplate.java
Patch:
@@ -49,7 +49,7 @@ public void delete(Integer id) {
 	@Override
 	public Iterable<Employee> getSortedListOfEmployeesBySalary() {
 		KeyValueQuery query = new KeyValueQuery();
-		query.setSort(new Sort(Sort.Direction.DESC, "salary"));
+		query.setSort(Sort.by(Sort.Direction.DESC, "salary"));
 		return keyValueTemplate.find(query, Employee.class);
 	}
 

File: persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/boot/daos/UserRepositoryCommon.java
Patch:
@@ -266,7 +266,7 @@ public void givenUsersInDB_WhenFindAllWithSortByName_ThenReturnUsersSorted() {
         userRepository.save(new User(USER_NAME_PETER, LocalDate.now(), USER_EMAIL2, ACTIVE_STATUS));
         userRepository.save(new User("SAMPLE", LocalDate.now(), USER_EMAIL3, INACTIVE_STATUS));
 
-        List<User> usersSortByName = userRepository.findAll(new Sort(Sort.Direction.ASC, "name"));
+        List<User> usersSortByName = userRepository.findAll(Sort.by(Sort.Direction.ASC, "name"));
 
         assertThat(usersSortByName.get(0)
           .getName()).isEqualTo(USER_NAME_ADAM);
@@ -278,7 +278,7 @@ public void givenUsersInDB_WhenFindAllSortWithFunction_ThenThrowException() {
         userRepository.save(new User(USER_NAME_PETER, LocalDate.now(), USER_EMAIL2, ACTIVE_STATUS));
         userRepository.save(new User("SAMPLE", LocalDate.now(), USER_EMAIL3, INACTIVE_STATUS));
 
-        userRepository.findAll(new Sort(Sort.Direction.ASC, "name"));
+        userRepository.findAll(Sort.by(Sort.Direction.ASC, "name"));
 
         List<User> usersSortByNameLength = userRepository.findAll(Sort.by("LENGTH(name)"));
 

File: persistence-modules/spring-data-jpa/src/test/java/com/baeldung/boot/daos/UserRepositoryCommon.java
Patch:
@@ -266,7 +266,7 @@ public void givenUsersInDB_WhenFindAllWithSortByName_ThenReturnUsersSorted() {
         userRepository.save(new User(USER_NAME_PETER, LocalDate.now(), USER_EMAIL2, ACTIVE_STATUS));
         userRepository.save(new User("SAMPLE", LocalDate.now(), USER_EMAIL3, INACTIVE_STATUS));
 
-        List<User> usersSortByName = userRepository.findAll(new Sort(Sort.Direction.ASC, "name"));
+        List<User> usersSortByName = userRepository.findAll(Sort.by(Sort.Direction.ASC, "name"));
 
         assertThat(usersSortByName.get(0)
           .getName()).isEqualTo(USER_NAME_ADAM);
@@ -278,7 +278,7 @@ public void givenUsersInDB_WhenFindAllSortWithFunction_ThenThrowException() {
         userRepository.save(new User(USER_NAME_PETER, LocalDate.now(), USER_EMAIL2, ACTIVE_STATUS));
         userRepository.save(new User("SAMPLE", LocalDate.now(), USER_EMAIL3, INACTIVE_STATUS));
 
-        userRepository.findAll(new Sort(Sort.Direction.ASC, "name"));
+        userRepository.findAll(Sort.by(Sort.Direction.ASC, "name"));
 
         List<User> usersSortByNameLength = userRepository.findAll(Sort.by("LENGTH(name)"));
 

File: persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/model/Phone.java
Patch:
@@ -51,9 +51,8 @@ public boolean equals(Object o) {
             return false;
         }
         Phone phone = (Phone) o;
-        return getType().equals(phone.getType()) &&
-                getAreaCode().equals(phone.getAreaCode()) &&
-                getNumber().equals(phone.getNumber());
+        return getType().equals(phone.getType()) && getAreaCode().equals(phone.getAreaCode())
+                && getNumber().equals(phone.getNumber());
     }
 
     @Override

File: persistence-modules/spring-data-jpa-4/src/main/java/com/baeldung/elementcollection/repository/EmployeeRepository.java
Patch:
@@ -32,7 +32,8 @@ public Employee findById(int id) {
     }
 
     public Employee findByJPQL(int id) {
-        return em.createQuery("SELECT u FROM Employee AS u JOIN FETCH u.phones WHERE u.id=:id", Employee.class).setParameter("id", id).getSingleResult();
+        return em.createQuery("SELECT u FROM Employee AS u JOIN FETCH u.phones WHERE u.id=:id", Employee.class)
+                .setParameter("id", id).getSingleResult();
     }
 
     public Employee findByEntityGraph(int id) {

File: persistence-modules/spring-data-jpa-4/src/test/java/com/baeldung/elementcollection/ElementCollectionIntegrationTest.java
Patch:
@@ -27,7 +27,8 @@ public class ElementCollectionIntegrationTest {
     @Before
     public void init() {
         Employee employee = new Employee(1, "Fred");
-        employee.setPhones(Arrays.asList(new Phone("work", "+55", "99999-9999"), new Phone("home", "+55", "98888-8888")));
+        employee.setPhones(
+                Arrays.asList(new Phone("work", "+55", "99999-9999"), new Phone("home", "+55", "98888-8888")));
         employeeRepository.save(employee);
     }
 

File: algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/NonGreedyAlgorithm.java
Patch:
@@ -13,9 +13,8 @@ public NonGreedyAlgorithm(SocialConnector tc, int level) {
         this.tc = tc;
         this.currentLevel = level;
     }
-    
-    
-    public long findMostFollowersPath(String account) throws Exception {        
+      
+    public long findMostFollowersPath(String account) {
         List<SocialUser> followers = tc.getFollowers(account);
         long total = currentLevel > 0 ? followers.size() : 0;
 

File: algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/greedy/SocialConnector.java
Patch:
@@ -20,9 +20,9 @@ public boolean switchCounter() {
         return this.isCounterEnabled;
     }
     
-    public List<SocialUser> getFollowers(String account) throws Exception {
+    public List<SocialUser> getFollowers(String account) {
         if (counter < 0)
-            throw new Exception ("API limit reached");
+            throw new IllegalStateException ("API limit reached");
         else {
             if(this.isCounterEnabled) counter--;
             for(SocialUser user : users) {

File: spring-security-modules/spring-security-rest-basic-auth/src/main/java/org/baeldung/basic/MyBasicAuthenticationEntryPoint.java
Patch:
@@ -14,15 +14,15 @@
 public class MyBasicAuthenticationEntryPoint extends BasicAuthenticationEntryPoint {
 
     @Override
-    public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException, ServletException {
+    public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException {
         response.addHeader("WWW-Authenticate", "Basic realm=\"" + getRealmName() + "\"");
         response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
         final PrintWriter writer = response.getWriter();
         writer.println("HTTP Status " + HttpServletResponse.SC_UNAUTHORIZED + " - " + authException.getMessage());
     }
 
     @Override
-    public void afterPropertiesSet() throws Exception {
+    public void afterPropertiesSet() {
         setRealmName("Baeldung");
         super.afterPropertiesSet();
     }

File: spring-5-data-reactive/src/test/java/com/baeldung/r2dbc/R2dbcApplicationIntegrationTest.java
Patch:
@@ -43,8 +43,7 @@ public void setup() {
                 "DROP TABLE IF EXISTS player;",
                 "CREATE table player (id INT AUTO_INCREMENT NOT NULL, name VARCHAR2, age INT NOT NULL);");
 
-        statements.forEach(it -> client.execute() //
-                .sql(it) //
+        statements.forEach(it -> client.execute(it) //
                 .fetch() //
                 .rowsUpdated() //
                 .as(StepVerifier::create) //

File: spring-vertx/src/main/java/com/baeldung/vertxspring/config/PortConfiguration.java
Patch:
@@ -12,7 +12,6 @@ public class PortConfiguration {
 
     private static final int DEFAULT_PORT = 8069;
 
-
     @Profile("default")
     @Bean
     public Integer defaultPort() {

File: ninja/src/test/java/controllers/ApiControllerDocTesterTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import ninja.NinjaDocTester;
 
-public class ApiControllerDocTesterUnitTest extends NinjaDocTester {
+public class ApiControllerDocTesterTest extends NinjaDocTester {
     
     String URL_INDEX = "/";
     String URL_HELLO = "/hello";

File: spring-5-reactive-security/src/main/java/com/baeldung/reactive/authresolver/CustomWebSecurityConfig.java
Patch:
@@ -44,8 +44,9 @@ public ReactiveAuthenticationManagerResolver<ServerHttpRequest> resolver() {
               .getPath()
               .subPath(0)
               .value()
-              .startsWith("/employee"))
+              .startsWith("/employee")) {
                 return Mono.just(employeesAuthenticationManager());
+            }
             return Mono.just(customersAuthenticationManager());
         };
     }

File: spring-di/src/test/java/com/baeldung/componentscan/filter/aspectj/ComponentScanAspectJFilterAppUnitTest.java
Patch:
@@ -16,7 +16,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = ComponentScanAspectJFilterApp.class)
-public class ComponentScanAspectJFilterAppIntegrationTest {
+public class ComponentScanAspectJFilterAppUnitTest {
 
     @Test
     public void whenAspectJFilterIsUsed_thenComponentScanShouldRegisterBeanMatchingAspectJCreteria() {

File: spring-di/src/test/java/com/baeldung/componentscan/filter/aspectj/ComponentScanAspectJFilterAppUnitTest.java
Patch:
@@ -16,7 +16,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = ComponentScanAspectJFilterApp.class)
-public class ComponentScanAspectJFilterAppIntegrationTest {
+public class ComponentScanAspectJFilterAppUnitTest {
 
     @Test
     public void whenAspectJFilterIsUsed_thenComponentScanShouldRegisterBeanMatchingAspectJCreteria() {

File: java-math/src/main/java/com/baeldung/matrices/benchmark/MatrixProvider.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.matrices;
+package com.baeldung.matrices.benchmark;
 
 import org.openjdk.jmh.annotations.Scope;
 import org.openjdk.jmh.annotations.State;

File: spring-5-reactive-security/src/test/java/com/baeldung/reactive/authresolver/AuthResolverIntegrationTest.java
Patch:
@@ -14,7 +14,8 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = AuthResolverApplication.class)
 @FixMethodOrder(MethodSorters.NAME_ASCENDING)
 public class AuthResolverIntegrationTest {
-    @Autowired private WebTestClient testClient;
+    @Autowired
+    private WebTestClient testClient;
 
     @Test
     public void givenCustomerCredential_whenWelcomeCustomer_thenExpectOk() {

File: testing-modules/testing-libraries/src/test/java/com/baeldung/calculator/CalculatorIntegrationTest.java
Patch:
@@ -9,7 +9,6 @@
 @CucumberOptions(
   features = {"classpath:features/calculator.feature", "classpath:features/calculator-scenario-outline.feature"}
   , plugin = {"pretty", "json:target/reports/json/calculator.json"}
-  , glue = {"com.baeldung.cucumber.calculator"}
 )
 public class CalculatorIntegrationTest {
 }

File: springfox/src/main/java/com/baeldung/springfox/SpringfoxApplication.java
Patch:
@@ -50,7 +50,8 @@ private Predicate<String> paths() {
     }
 
     private ApiInfo apiInfo() {
-        return new ApiInfo("Springfox API specification", 
+        return new ApiInfo(
+          "Springfox API specification", 
           "User REST and Spring Data APIs", 
           "", 
           "", 

File: testing-modules/testing-libraries/src/test/java/com/baeldung/calculator/CalculatorIntegrationTest.java
Patch:
@@ -9,7 +9,6 @@
 @CucumberOptions(
   features = {"classpath:features/calculator.feature", "classpath:features/calculator-scenario-outline.feature"}
   , plugin = {"pretty", "json:target/reports/json/calculator.json"}
-  , glue = {"com.baeldung.cucumber.calculator"}
 )
 public class CalculatorIntegrationTest {
 }

File: data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java
Patch:
@@ -5,8 +5,6 @@
 
 import org.junit.Test;
 
-import com.baeldung.circularlinkedlist.CircularLinkedList;
-
 public class CircularLinkedListUnitTest {
 
     @Test

File: data-structures/src/main/java/com/baeldung/circularlinkedlist/CircularLinkedList.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.list;
+package com.baeldung.circularlinkedlist;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -49,13 +49,11 @@ public void deleteNode(int valueToDelete) {
             if (currentNode.value == valueToDelete) {
                 head = head.nextNode;
                 tail.nextNode = head;
-                currentNode = null;
             } else {
                 do {
                     Node nextNode = currentNode.nextNode;
                     if (nextNode.value == valueToDelete) {
                         currentNode.nextNode = nextNode.nextNode;
-                        nextNode = null;
                         break;
                     }
                     currentNode = currentNode.nextNode;

File: data-structures/src/test/java/com/baeldung/circularlinkedlist/CircularLinkedListUnitTest.java
Patch:
@@ -1,10 +1,12 @@
-package com.baeldung.list;
+package com.baeldung.circularlinkedlist;
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
 
+import com.baeldung.circularlinkedlist.CircularLinkedList;
+
 public class CircularLinkedListUnitTest {
 
     @Test

File: spring-boot-springdoc/src/test/java/com/baeldung/springdoc/SpringContextTest.java
Patch:
@@ -7,7 +7,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest
-public class SpringContextIntegrationTest {
+public class SpringContextTest {
 
     @Test
     public void whenSpringContextIsBootstrapped_thenNoExceptions() {

File: spring-cloud-data-flow/spring-cloud-data-flow-stream-processing/data-flow-server/src/test/java/org/baeldung/SpringContextTest.java
Patch:
@@ -8,7 +8,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = DataFlowServerApplication.class)
-public class SpringContextIntegrationTest {
+public class SpringContextTest {
 
     @Test
     public void whenSpringContextIsBootstrapped_thenNoExceptions() {

File: spring-cloud/spring-cloud-gateway/src/main/java/com/baeldung/springcloudgateway/customfilters/filters/factories/LoggingGatewayFilterFactory.java
Patch:
@@ -40,7 +40,7 @@ public GatewayFilter apply(Config config) {
                     if (config.isPostLogger())
                         logger.info("Post GatewayFilter logging: " + config.getBaseMessage());
                 }));
-        }, -2);
+        }, 1);
     }
 
     public static class Config {

File: spring-cloud/spring-cloud-task/springcloudtaskbatch/src/test/java/org/baeldung/SpringContextTest.java
Patch:
@@ -13,7 +13,7 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @SpringBootApplication
 @ContextConfiguration(classes = { JobConfiguration.class, TaskDemo.class }, initializers = { ConfigFileApplicationContextInitializer.class })
-public class SpringContextIntegrationTest {
+public class SpringContextTest {
 
     @Test
     public void whenSpringContextIsBootstrapped_thenNoExceptions() {

File: spring-mvc-basics/src/test/java/com/baeldung/SpringContextTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest
-public class SpringContextIntegrationTest {
+public class SpringContextTest {
 
     @Test
     public void whenSpringContextIsBootstrapped_thenNoExceptions() {

File: spring-rest-simple/src/test/java/com/baeldung/SpringContextTest.java
Patch:
@@ -7,7 +7,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = Application.class)
-public class SpringContextIntegrationTest {
+public class SpringContextTest {
 
     @Test
     public void whenSpringContextIsBootstrapped_thenNoExceptions() {

File: spring-security-mvc-boot/src/test/java/org/baeldung/jdbcauthentication/h2/SpringContextTest.java
Patch:
@@ -7,7 +7,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = H2JdbcAuthenticationApplication.class)
-public class SpringContextIntegrationTest {
+public class SpringContextTest {
 
     @Test
     public void whenSpringContextIsBootstrapped_thenNoExceptions() {

File: algorithms-searching/src/main/java/com/baeldung/algorithms/dfs/Graph.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.graph;
+package com.baeldung.algorithms.dfs;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: algorithms-searching/src/test/java/com/baeldung/algorithms/dfs/GraphUnitTest.java
Patch:
@@ -1,7 +1,8 @@
-package com.baeldung.graph;
+package com.baeldung.algorithms.dfs;
 
 import java.util.List;
 
+import com.baeldung.algorithms.dfs.Graph;
 import org.junit.Test;
 
 public class GraphUnitTest {

File: algorithms-searching/src/test/java/com/baeldung/algorithms/interpolationsearch/InterpolationSearchUnitTest.java
Patch:
@@ -1,10 +1,10 @@
 package com.baeldung.algorithms.interpolationsearch;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
 import org.junit.Before;
 import org.junit.Test;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 public class InterpolationSearchUnitTest {
     
     private int[] myData;

File: aws/src/test/java/com/baeldung/dynamodb/rule/LocalDbCreationRule.java
Patch:
@@ -15,7 +15,7 @@ public LocalDbCreationRule() {
     @Override
     protected void before() throws Exception {
         String port = "8000";
-        this.server = ServerRunner.createServerFromCommandLineArgs(new String[]{"-inMemory", "-port", port});
+        this.server = ServerRunner.createServerFromCommandLineArgs(new String[]{"-inMemory","-sharedDb" ,"-port", port});
         server.start();
     }
 

File: core-java-modules/core-java-string-operations/src/main/java/com/baeldung/isnumeric/IsNumericDriver.java
Patch:
@@ -13,8 +13,8 @@ public static void main(String[] args) {
         boolean res = isNumeric.usingCoreJava("1001");
         LOG.info("Using Core Java : " + res);
 
-        res = isNumeric.usingRegularExpressions("1001");
-        LOG.info("Using Regular Expressions : " + res);
+        res = isNumeric.usingPreCompiledRegularExpressions("1001");
+        LOG.info("Using Pre-compiled Regular Expressions : " + res);
 
         res = isNumeric.usingNumberUtils_isCreatable("1001");
         LOG.info("Using NumberUtils.isCreatable : " + res);

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/bidirection/ItemWithIdentity.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.bidirection;
+package com.baeldung.jackson.annotation.bidirection;
 
 import com.fasterxml.jackson.annotation.JsonIdentityInfo;
 import com.fasterxml.jackson.annotation.ObjectIdGenerators;

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/bidirection/ItemWithIgnore.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.bidirection;
+package com.baeldung.jackson.annotation.bidirection;
 
 public class ItemWithIgnore {
     public int id;

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/bidirection/ItemWithRef.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.bidirection;
+package com.baeldung.jackson.annotation.bidirection;
 
 import com.fasterxml.jackson.annotation.JsonManagedReference;
 

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/bidirection/UserWithIdentity.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.bidirection;
+package com.baeldung.jackson.annotation.bidirection;
 
 import java.util.ArrayList;
 import java.util.List;

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/bidirection/UserWithIgnore.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.bidirection;
+package com.baeldung.jackson.annotation.bidirection;
 
 import java.util.ArrayList;
 import java.util.List;

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/bidirection/UserWithRef.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.bidirection;
+package com.baeldung.jackson.annotation.bidirection;
 
 import java.util.ArrayList;
 import java.util.List;

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/date/CustomDateDeserializer.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.date;
+package com.baeldung.jackson.annotation.date;
 
 import java.io.IOException;
 import java.text.ParseException;

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/date/CustomDateSerializer.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.date;
+package com.baeldung.jackson.annotation.date;
 
 import java.io.IOException;
 import java.text.SimpleDateFormat;

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/date/EventWithFormat.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.date;
+package com.baeldung.jackson.annotation.date;
 
 import java.util.Date;
 

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/date/EventWithSerializer.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.date;
+package com.baeldung.jackson.annotation.date;
 
 import java.util.Date;
 

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/exception/UserWithRoot.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.exception;
+package com.baeldung.jackson.annotation.exception;
 
 import com.fasterxml.jackson.annotation.JsonRootName;
 

File: jackson-annotations/src/main/java/com/baeldung/jackson/annotation/exception/UserWithRootNamespace.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.exception;
+package com.baeldung.jackson.annotation.exception;
 
 import com.fasterxml.jackson.annotation.JsonRootName;
 

File: jackson-annotations/src/main/java/com/baeldung/jackson/bidirection/ItemWithView.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.jackson.bidirection;
 
-import com.baeldung.jackson.jsonview.Views;
+import com.baeldung.jackson.bidirection.jsonview.Views;
 
 import com.fasterxml.jackson.annotation.JsonView;
 

File: jackson-annotations/src/main/java/com/baeldung/jackson/bidirection/UserWithView.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.baeldung.jackson.jsonview.Views;
+import com.baeldung.jackson.bidirection.jsonview.Views;
 
 import com.fasterxml.jackson.annotation.JsonView;
 

File: jackson-annotations/src/test/java/com/baeldung/jackson/advancedannotations/AppendBeans.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.annotation.extra;
+package com.baeldung.jackson.advancedannotations;
 
 import com.fasterxml.jackson.databind.annotation.JsonAppend;
 

File: jackson-annotations/src/test/java/com/baeldung/jackson/advancedannotations/IdentityReferenceBeans.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.annotation.extra;
+package com.baeldung.jackson.advancedannotations;
 
 import com.fasterxml.jackson.annotation.JsonIdentityInfo;
 import com.fasterxml.jackson.annotation.JsonIdentityReference;

File: jackson-annotations/src/test/java/com/baeldung/jackson/advancedannotations/NamingBean.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.annotation.extra;
+package com.baeldung.jackson.advancedannotations;
 
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;

File: jackson-annotations/src/test/java/com/baeldung/jackson/advancedannotations/POJOBuilderBean.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.annotation.extra;
+package com.baeldung.jackson.advancedannotations;
 
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;

File: jackson-annotations/src/test/java/com/baeldung/jackson/advancedannotations/PropertyDescriptionBean.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.annotation.extra;
+package com.baeldung.jackson.advancedannotations;
 
 import com.fasterxml.jackson.annotation.JsonPropertyDescription;
 

File: jackson-annotations/src/test/java/com/baeldung/jackson/advancedannotations/TypeIdBean.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.annotation.extra;
+package com.baeldung.jackson.advancedannotations;
 
 import com.fasterxml.jackson.annotation.JsonTypeId;
 

File: jackson-annotations/src/test/java/com/baeldung/jackson/advancedannotations/TypeIdResolverStructure.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.annotation.extra;
+package com.baeldung.jackson.advancedannotations;
 
 import java.util.List;
 

File: jackson-annotations/src/test/java/com/baeldung/jackson/jsonproperty/MyDtoFieldNameChanged.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.dtos;
+package com.baeldung.jackson.jsonproperty;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 

File: jackson-exceptions/src/main/java/com/baeldung/exceptions/UserWithConflict.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.exception;
+package com.baeldung.exceptions;
 
 public class UserWithConflict {
     public int id;

File: jackson-exceptions/src/main/java/com/baeldung/exceptions/UserWithPrivateFields.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.exception;
+package com.baeldung.exceptions;
 
 public class UserWithPrivateFields {
     int id;

File: jackson-exceptions/src/main/java/com/baeldung/exceptions/UserWithRoot.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.exception;
+package com.baeldung.exceptions;
 
 import com.fasterxml.jackson.annotation.JsonRootName;
 

File: jackson-exceptions/src/main/java/com/baeldung/exceptions/Zoo.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.exception;
+package com.baeldung.exceptions;
 
 public class Zoo {
     public Animal animal;

File: jackson-exceptions/src/main/java/com/baeldung/exceptions/ZooConfigured.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.exception;
+package com.baeldung.exceptions;
 
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 

File: jackson-exceptions/src/main/java/com/baeldung/mappingexception/MyDtoNoAccessors.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.dtos;
+package com.baeldung.mappingexception;
 
 public class MyDtoNoAccessors {
 

File: jackson-exceptions/src/main/java/com/baeldung/mappingexception/MyDtoNoAccessorsAndFieldVisibility.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.dtos;
+package com.baeldung.mappingexception;
 
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
 import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;

File: jackson-simple/src/test/java/com/baeldung/jackson/dtos/withEnum/DistanceEnumWithValue.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.dtos.withEnum;
+package com.baeldung.jackson.annotation.dtos.withEnum;
 
 import com.fasterxml.jackson.annotation.JsonValue;
 

File: javax-servlets/src/test/java/com/baeldung/test/FormServletLiveTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.servlets;
+package com.baeldung.test;
 
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;

File: javax-servlets/src/test/java/com/baeldung/test/UserServletUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.servlets;
+package com.baeldung.test;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;

File: spring-boot-di/src/test/java/com/baeldung/componentscan/filter/assignable/ComponentScanAssignableTypeFilterAppIntegrationTest.java
Patch:
@@ -19,7 +19,7 @@
 public class ComponentScanAssignableTypeFilterAppIntegrationTest {
 
     @Test
-    public void whenAssignableTypeFilterIsUsed_thenComponentScanShouldRegisterBeanOfAssignableTypeAndItsSubClass() {
+    public void whenAssignableTypeFilterIsUsed_thenComponentScanShouldRegisterBean() {
         ApplicationContext applicationContext = new AnnotationConfigApplicationContext(ComponentScanAssignableTypeFilterApp.class);
         List<String> beans = Arrays.stream(applicationContext.getBeanDefinitionNames())
             .filter(bean -> !bean.contains("org.springframework") && !bean.contains("componentScanAssignableTypeFilterApp"))

File: spring-boot-runtime/src/main/java/com/baeldung/sampleapp/web/dto/Item.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.jsonview;
+package com.baeldung.sampleapp.web.dto;
 
 import com.fasterxml.jackson.annotation.JsonView;
 
@@ -33,4 +33,4 @@ public String getItemName() {
     public String getOwnerName() {
         return ownerName;
     }
-}
+}
\ No newline at end of file

File: spring-boot-runtime/src/main/java/com/baeldung/sampleapp/web/dto/Views.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.jackson.jsonview;
+package com.baeldung.sampleapp.web.dto;
 
 public class Views {
     public static class Public {

File: spring-boot-runtime/src/main/java/com/baeldung/web/log/app/Application.java
Patch:
@@ -11,13 +11,15 @@
 import org.springframework.web.context.ContextLoaderListener;
 import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
 import org.springframework.web.servlet.DispatcherServlet;
+import org.springframework.context.annotation.PropertySource;
 
 import com.baeldung.web.log.config.CustomeRequestLoggingFilter;
 
 import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
 
 @EnableAutoConfiguration
 @ComponentScan("com.baeldung.web.log")
+@PropertySource("application-log.properties")
 @SpringBootApplication
 public class Application extends SpringBootServletInitializer {
 

File: algorithms-miscellaneous-5/src/main/java/com/baeldung/algorithms/prim/Edge.java
Patch:
@@ -6,7 +6,7 @@ public class Edge {
     private boolean isIncluded = false;
     private boolean isPrinted = false;
 
-    public Edge (int weight){
+    public Edge(int weight) {
         this.weight = weight;
     }
 
@@ -34,4 +34,3 @@ public void setPrinted(boolean printed) {
         isPrinted = printed;
     }
 }
-

File: algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java
Patch:
@@ -18,7 +18,7 @@ public void givenAGraph_whenPrimRuns_thenPrintMST() {
         System.out.println(prim.minimumSpanningTreeToString());
     }
 
-    public static List<Vertex> createGraph(){
+    public static List<Vertex> createGraph() {
         List<Vertex> graph = new ArrayList<>();
         Vertex a = new Vertex("A");
         Vertex b = new Vertex("B");
@@ -52,4 +52,3 @@ public static List<Vertex> createGraph(){
     }
 
 }
-

File: data-structures/src/main/java/com/baeldung/list/CircularLinkedList.java
Patch:
@@ -18,7 +18,7 @@ public void addNode(int value) {
             tail.nextNode = newNode;
         }
 
-        // Irrespective of whether or not elements are addNodeed, assign the
+        // Irrespective of whether or not elements are added, assign the
         // tail to newNode and the nextNode for tail as head
         tail = newNode;
         tail.nextNode = head;

File: persistence-modules/flyway/src/test/java/com/baeldung/flywaycallbacks/ManualFlywayMigrationIntegrationTest.java
Patch:
@@ -13,7 +13,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest
-public class ManualFlywayMigrationTest {
+public class ManualFlywayMigrationIntegrationTest {
 
     @Autowired
     private Flyway flyway;

File: spring-boot-di/src/test/java/com/baeldung/componentscan/filter/assignable/ComponentScanAssignableTypeFilterAppIntegrationTest.java
Patch:
@@ -19,7 +19,7 @@
 public class ComponentScanAssignableTypeFilterAppIntegrationTest {
 
     @Test
-    public void whenAssignableTypeFilterIsUsed_thenComponentScanShouldRegisterBeanOfAssignableTypeAndItsSubClass() {
+    public void whenAssignableTypeFilterIsUsed_thenComponentScanShouldRegisterBean() {
         ApplicationContext applicationContext = new AnnotationConfigApplicationContext(ComponentScanAssignableTypeFilterApp.class);
         List<String> beans = Arrays.stream(applicationContext.getBeanDefinitionNames())
             .filter(bean -> !bean.contains("org.springframework") && !bean.contains("componentScanAssignableTypeFilterApp"))

File: patterns/design-patterns-creational/src/main/java/com/baeldung/prototype/PineTree.java
Patch:
@@ -15,7 +15,9 @@ public String getType() {
 
     @Override
     public Tree copy() {
-        return new PineTree(this.getMass(), this.getHeight());
+        PineTree pineTreeClone = new PineTree(this.getMass(), this.getHeight());
+        pineTreeClone.setPosition(this.getPosition());
+        return pineTreeClone;
     }
 
 }

File: algorithms-miscellaneous-5/src/test/java/com/baeldung/algorithms/prim/PrimUnitTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import org.junit.Test;
 
-public class PrimTest {
+public class PrimUnitTest {
 
     @Test
     public void givenAGraph_whenPrimRuns_thenPrintMST() {

File: twitter4j/src/test/java/com/baeldung/ApplicationManualTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import twitter4j.TwitterException;
 
-public class ApplicationIntegrationTest {
+public class ApplicationManualTest {
 
 	/**
 	 * In order run this jUnit test you need to configure your API details in the twitter4j.properties

File: cloud-foundry-uaa/cf-uaa-oauth2-resource-server/src/main/java/com/baeldung/cfuaa/oauth2/resourceserver/CFUAAOAuth2ResourceServerRestController.java
Patch:
@@ -18,7 +18,7 @@ public String index(@AuthenticationPrincipal Jwt jwt) {
 
     @GetMapping("/read")
     public String read(JwtAuthenticationToken jwtAuthenticationToken) {
-        return "Hello write: " + jwtAuthenticationToken.getTokenAttributes();
+        return "Hello read: " + jwtAuthenticationToken.getTokenAttributes();
     }
 
     @GetMapping("/write")

File: twitter4j/src/test/java/com/baeldung/ApplicationManualTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import twitter4j.TwitterException;
 
-public class ApplicationIntegrationTest {
+public class ApplicationManualTest {
 
 	/**
 	 * In order run this jUnit test you need to configure your API details in the twitter4j.properties

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java
Patch:
@@ -3,8 +3,8 @@
 import java.math.BigDecimal;
 
 public class BasicAccount {
-    String name;
-    BigDecimal balance;
+    private String name;
+    private BigDecimal balance;
 
     public BigDecimal getBalance() {
         return this.balance;

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java
Patch:
@@ -10,6 +10,6 @@
 @Getter
 @Setter
 public class ChainedAccount {
-    String name;
-    BigDecimal balance;
+    private String name;
+    private BigDecimal balance;
 }

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java
Patch:
@@ -10,6 +10,6 @@
 @Getter
 @Setter
 public class ChainedFluentAccount {
-    String name;
-    BigDecimal balance;
+    private String name;
+    private BigDecimal balance;
 }

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java
Patch:
@@ -10,6 +10,6 @@
 @Getter
 @Setter
 public class FluentAccount {
-    String name;
-    BigDecimal balance;
+    private String name;
+    private BigDecimal balance;
 }

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java
Patch:
@@ -10,6 +10,6 @@
 @Getter
 @Setter
 public class PrefixedFluentAccount {
-    String sName;
-    BigDecimal bdBalance;
+    private String sName;
+    private BigDecimal bdBalance;
 }

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java
Patch:
@@ -8,6 +8,6 @@
 @Getter
 @Setter
 public class StandardAccount {
-    String name;
-    BigDecimal balance;
+    private String name;
+    private BigDecimal balance;
 }

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/BasicAccount.java
Patch:
@@ -3,8 +3,8 @@
 import java.math.BigDecimal;
 
 public class BasicAccount {
-    String name;
-    BigDecimal balance;
+    private String name;
+    private BigDecimal balance;
 
     public BigDecimal getBalance() {
         return this.balance;

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedAccount.java
Patch:
@@ -10,6 +10,6 @@
 @Getter
 @Setter
 public class ChainedAccount {
-    String name;
-    BigDecimal balance;
+    private String name;
+    private BigDecimal balance;
 }

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/ChainedFluentAccount.java
Patch:
@@ -10,6 +10,6 @@
 @Getter
 @Setter
 public class ChainedFluentAccount {
-    String name;
-    BigDecimal balance;
+    private String name;
+    private BigDecimal balance;
 }

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/FluentAccount.java
Patch:
@@ -10,6 +10,6 @@
 @Getter
 @Setter
 public class FluentAccount {
-    String name;
-    BigDecimal balance;
+    private String name;
+    private BigDecimal balance;
 }

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/PrefixedFluentAccount.java
Patch:
@@ -10,6 +10,6 @@
 @Getter
 @Setter
 public class PrefixedFluentAccount {
-    String sName;
-    BigDecimal bdBalance;
+    private String sName;
+    private BigDecimal bdBalance;
 }

File: lombok/src/main/java/com/baeldung/lombok/accessors/model/StandardAccount.java
Patch:
@@ -8,6 +8,6 @@
 @Getter
 @Setter
 public class StandardAccount {
-    String name;
-    BigDecimal balance;
+    private String name;
+    private BigDecimal balance;
 }

File: core-java-modules/core-java-strings/src/main/java/com/baeldung/localization/ICUFormat.java
Patch:
@@ -1,11 +1,11 @@
 package com.baeldung.localization;
 
+import com.ibm.icu.text.MessageFormat;
+
 import java.util.List;
 import java.util.Locale;
 import java.util.ResourceBundle;
 
-import com.ibm.icu.text.MessageFormat;
-
 public class ICUFormat {
 
     public static String getLabel(Locale locale, Object[] data) {

File: core-java-modules/core-java-strings/src/main/java/com/baeldung/stringperformance/StringPerformance.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string;
+package com.baeldung.stringperformance;
 
 import com.google.common.base.Splitter;
 import org.apache.commons.lang3.StringUtils;

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/interview/StringAnagramUnitTest.java
Patch:
@@ -1,10 +1,10 @@
-package com.baeldung.string.interview;
+package com.baeldung.interview;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import org.junit.Test;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class StringAnagramUnitTest {
     public boolean isAnagram(String s1, String s2) {

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/interview/StringChangeCaseUnitTest.java
Patch:
@@ -1,9 +1,9 @@
-package com.baeldung.string.interview;
-
-import static org.junit.Assert.assertEquals;
+package com.baeldung.interview;
 
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 public class StringChangeCaseUnitTest {
     @Test
     public void givenString_whenChangingToUppercase_thenCaseChanged() {

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/interview/StringCountOccurrencesUnitTest.java
Patch:
@@ -1,9 +1,9 @@
-package com.baeldung.string.interview;
-
-import static org.junit.Assert.assertEquals;
+package com.baeldung.interview;
 
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 public class StringCountOccurrencesUnitTest {
     public int countOccurrences(String s, char c) {
         int count = 0;

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/interview/StringFormatUnitTest.java
Patch:
@@ -1,9 +1,9 @@
-package com.baeldung.string.interview;
-
-import static org.junit.Assert.assertEquals;
+package com.baeldung.interview;
 
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 public class StringFormatUnitTest {
     @Test
     public void givenString_whenUsingStringFormat_thenStringFormatted() {

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/interview/StringInternUnitTest.java
Patch:
@@ -1,9 +1,9 @@
-package com.baeldung.string.interview;
-
-import static org.assertj.core.api.Assertions.assertThat;
+package com.baeldung.interview;
 
 import org.junit.Test;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 public class StringInternUnitTest {
     @Test
     public void whenCallingStringIntern_thenStringsInterned() {

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/interview/StringPalindromeUnitTest.java
Patch:
@@ -1,9 +1,9 @@
-package com.baeldung.string.interview;
-
-import static org.assertj.core.api.Assertions.assertThat;
+package com.baeldung.interview;
 
 import org.junit.Test;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 public class StringPalindromeUnitTest {
     
     public boolean isPalindrome(String text) {

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/interview/StringReverseUnitTest.java
Patch:
@@ -1,9 +1,9 @@
-package com.baeldung.string.interview;
-
-import static org.junit.Assert.assertEquals;
+package com.baeldung.interview;
 
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 public class StringReverseUnitTest {
     @Test
     public void whenUsingInbuildMethods_thenStringReversed() {

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/interview/StringSplitUnitTest.java
Patch:
@@ -1,7 +1,8 @@
-package com.baeldung.string.interview;
+package com.baeldung.interview;
 
 import org.apache.commons.lang3.StringUtils;
 import org.junit.Test;
+
 import static org.junit.Assert.assertArrayEquals;
 
 public class StringSplitUnitTest {

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/interview/StringToByteArrayUnitTest.java
Patch:
@@ -1,11 +1,11 @@
-package com.baeldung.string.interview;
+package com.baeldung.interview;
 
-import static org.junit.Assert.assertArrayEquals;
+import org.junit.Test;
 
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;
 
-import org.junit.Test;
+import static org.junit.Assert.assertArrayEquals;
 
 public class StringToByteArrayUnitTest {
     @Test

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/interview/StringToCharArrayUnitTest.java
Patch:
@@ -1,10 +1,10 @@
-package com.baeldung.string.interview;
+package com.baeldung.interview;
 
-import static org.junit.Assert.assertEquals;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
 
 public class StringToCharArrayUnitTest {
     @Test

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/interview/StringToIntegerUnitTest.java
Patch:
@@ -1,6 +1,7 @@
-package com.baeldung.string.interview;
+package com.baeldung.interview;
 
 import org.junit.Test;
+
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class StringToIntegerUnitTest {

File: core-java-modules/core-java-strings/src/test/java/com/baeldung/multiline/MultiLineStringUnitTest.java
Patch:
@@ -1,11 +1,10 @@
-package com.baeldung.string.multiline;
+package com.baeldung.multiline;
 
 import org.junit.Test;
-import static org.junit.Assert.assertEquals;
 
 import java.io.IOException;
 
-import com.baeldung.string.multiline.MultiLineString;
+import static org.junit.Assert.assertEquals;
 
 public class MultiLineStringUnitTest {
 

File: persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/model/Payment.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.tx;
+package com.baeldung.model;
 
 import javax.persistence.*;
 

File: persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/model/BasicUser.java
Patch:
@@ -5,7 +5,7 @@
 
 @Entity
 @Table(name = "users")
-public class User {
+public class BasicUser {
 
     @Id
     @GeneratedValue

File: persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/service/SimpleUserService.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.service;
 
-import com.baeldung.model.User;
+import com.baeldung.model.BasicUser;
 import com.baeldung.repository.UserRepository;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
@@ -18,7 +18,7 @@ public SimpleUserService(UserRepository userRepository) {
 
     @Override
     @Transactional(readOnly = true)
-    public Optional<User> findOne(String username) {
+    public Optional<BasicUser> findOne(String username) {
         return userRepository.findDetailedByUsername(username);
     }
 }

File: persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/service/UserService.java
Patch:
@@ -1,9 +1,9 @@
 package com.baeldung.service;
 
-import com.baeldung.model.User;
+import com.baeldung.model.BasicUser;
 
 import java.util.Optional;
 
 public interface UserService {
-    Optional<User> findOne(String username);
+    Optional<BasicUser> findOne(String username);
 }

File: persistence-modules/spring-data-jpa-3/src/main/java/com/baeldung/web/DetailedUserDto.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.web;
 
-import com.baeldung.model.User;
+import com.baeldung.model.BasicUser;
 
 import java.util.Set;
 
@@ -34,7 +34,7 @@ public void setPermissions(Set<String> permissions) {
         this.permissions = permissions;
     }
 
-    public static DetailedUserDto fromEntity(User user) {
+    public static DetailedUserDto fromEntity(BasicUser user) {
         DetailedUserDto detailed = new DetailedUserDto();
         detailed.setId(user.getId());
         detailed.setUsername(user.getUsername());

File: persistence-modules/spring-data-jpa-3/src/test/java/com/baeldung/osiv/UserControllerIntegrationTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.baeldung.osiv;
 
-import com.baeldung.model.User;
+import com.baeldung.model.BasicUser;
 import com.baeldung.repository.UserRepository;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -32,7 +32,7 @@ class UserControllerIntegrationTest {
 
     @BeforeEach
     void setUp() {
-        User user = new User();
+        BasicUser user = new BasicUser();
         user.setUsername("root");
         user.setPermissions(new HashSet<>(Arrays.asList("PERM_READ", "PERM_WRITE")));
 

File: spring-amqp/src/main/java/com/baeldung/springamqp/errorhandling/ErrorHandlingApp.java
Patch:
@@ -11,6 +11,7 @@
 @SpringBootApplication
 @EnableScheduling
 public class ErrorHandlingApp {
+
     @Autowired
     MessageProducer messageProducer;
 

File: spring-protobuf/src/test/java/org/baeldung/SpringContextIntegrationTest.java
Patch:
@@ -1,16 +1,15 @@
 package org.baeldung;
 
+import com.baeldung.protobuf.Application;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.baeldung.protobuf.Application;
-
 @DirtiesContext
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = Application.class)
+@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
 public class SpringContextIntegrationTest {
 
     @Test

File: spring-protobuf/src/test/java/org/baeldung/SpringContextTest.java
Patch:
@@ -1,16 +1,15 @@
 package org.baeldung;
 
+import com.baeldung.protobuf.Application;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.baeldung.protobuf.Application;
-
 @DirtiesContext
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = Application.class)
+@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
 public class SpringContextTest {
 
     @Test

File: hystrix/src/test/java/com/baeldung/hystrix/SpringAndHystrixIntegrationTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.hamcrest.Matchers.equalTo;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = AppConfig.class)
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = AppConfig.class)
 public class SpringAndHystrixIntegrationTest {
 
     @Autowired

File: spring-boot-properties/src/test/java/com/baeldung/properties/parentchild/config/ChildConfig2.java
Patch:
@@ -16,7 +16,7 @@ public ChildValueHolder childValueHolder() {
     }
 
     @Bean
-    public static PropertyPlaceholderConfigurer configurer() {
+    public static PropertyPlaceholderConfigurer properties() {
         final PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();
         ppc.setLocations(new ClassPathResource("child.properties"));
         return ppc;

File: spring-boot-properties/src/test/java/com/baeldung/properties/parentchild/config/ParentConfig2.java
Patch:
@@ -16,7 +16,7 @@ public ParentValueHolder parentValueHolder() {
     }
 
     @Bean
-    public static PropertyPlaceholderConfigurer configurer() {
+    public static PropertyPlaceholderConfigurer properties() {
         final PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();
         ppc.setLocations(new ClassPathResource("parent.properties"));
         return ppc;

File: spring-protobuf/src/test/java/org/baeldung/SpringContextIntegrationTest.java
Patch:
@@ -1,16 +1,15 @@
 package org.baeldung;
 
+import com.baeldung.protobuf.Application;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.baeldung.protobuf.Application;
-
 @DirtiesContext
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = Application.class)
+@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
 public class SpringContextIntegrationTest {
 
     @Test

File: spring-protobuf/src/test/java/org/baeldung/SpringContextTest.java
Patch:
@@ -1,16 +1,15 @@
 package org.baeldung;
 
+import com.baeldung.protobuf.Application;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.baeldung.protobuf.Application;
-
 @DirtiesContext
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = Application.class)
+@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
 public class SpringContextTest {
 
     @Test

File: hystrix/src/test/java/com/baeldung/hystrix/SpringAndHystrixIntegrationTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.hamcrest.Matchers.equalTo;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = AppConfig.class)
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = AppConfig.class)
 public class SpringAndHystrixIntegrationTest {
 
     @Autowired

File: algorithms-sorting/src/main/java/com/baeldung/algorithms/stringsort/AnagramValidator.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string.sorting;
+package com.baeldung.algorithms.stringsort;
 
 import java.util.Arrays;
 

File: algorithms-sorting/src/test/java/com/baeldung/algorithms/stringsort/SortStringUnitTest.java
Patch:
@@ -1,9 +1,9 @@
-package com.baeldung.string.sorting;
-
-import java.util.Arrays;
+package com.baeldung.algorithms.stringsort;
 
 import org.junit.jupiter.api.Test;
 
+import java.util.Arrays;
+
 import static org.assertj.core.api.Assertions.assertThat;
 
 class SortStringUnitTest {

File: core-java-modules/core-java-9-streams/src/main/java/com/baeldung/streams/breakforeach/CustomForEach.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.breakforeach;
+package com.baeldung.streams.breakforeach;
 
 import java.util.Spliterator;
 import java.util.function.BiConsumer;

File: core-java-modules/core-java-9-streams/src/main/java/com/baeldung/streams/breakforeach/CustomSpliterator.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.breakforeach;
+package com.baeldung.streams.breakforeach;
 
 import java.util.Spliterator;
 import java.util.Spliterators;

File: core-java-modules/core-java-9-streams/src/main/java/com/baeldung/streams/breakforeach/CustomTakeWhile.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.breakforeach;
+package com.baeldung.streams.breakforeach;
 
 import java.util.function.Predicate;
 import java.util.stream.Stream;

File: core-java-modules/core-java-9-streams/src/main/java/com/baeldung/streams/breakforeach/TakeWhileExample.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.breakforeach;
+package com.baeldung.streams.breakforeach;
 
 import java.util.List;
 import java.util.stream.Stream;

File: core-java-modules/core-java-9-streams/src/test/java/com/baeldung/streams/breakforeach/BreakFromStreamForEachUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.breakforeach;
+package com.baeldung.streams.breakforeach;
 
 import org.junit.Test;
 

File: core-java-modules/core-java-datetime-conversion/src/test/java/com/baeldung/datetime/ConvertInstantToTimestampUnitTest.java
Patch:
@@ -1,15 +1,14 @@
 package com.baeldung.datetime;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import org.junit.Test;
 
 import java.sql.Timestamp;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.time.Instant;
-import java.time.ZoneId;
 import java.util.TimeZone;
 
-import org.junit.Test;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ConvertInstantToTimestampUnitTest {
 

File: core-java-modules/core-java-datetime-string/src/main/java/com/baeldung/zonedatetime/OffsetDateTimeExample.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.zoneddatetime;
+package com.baeldung.zonedatetime;
 
 import java.time.OffsetDateTime;
 import java.time.ZoneOffset;

File: core-java-modules/core-java-datetime-string/src/main/java/com/baeldung/zonedatetime/OffsetTimeExample.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.zoneddatetime;
+package com.baeldung.zonedatetime;
 
 import java.time.OffsetTime;
 import java.time.ZoneOffset;

File: core-java-modules/core-java-datetime-string/src/main/java/com/baeldung/zonedatetime/ZoneDateTimeExample.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.zoneddatetime;
+package com.baeldung.zonedatetime;
 
 import java.time.ZoneId;
 import java.time.ZonedDateTime;

File: core-java-modules/core-java-datetime-string/src/test/java/com/baeldung/zonedatetime/OffsetDateTimeExampleUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.zoneddatetime;
+package com.baeldung.zonedatetime;
 
 import static org.junit.Assert.assertTrue;
 

File: core-java-modules/core-java-datetime-string/src/test/java/com/baeldung/zonedatetime/OffsetTimeExampleUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.zoneddatetime;
+package com.baeldung.zonedatetime;
 
 import static org.junit.Assert.assertTrue;
 

File: core-java-modules/core-java-datetime-string/src/test/java/com/baeldung/zonedatetime/ZoneDateTimeExampleUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.zoneddatetime;
+package com.baeldung.zonedatetime;
 
 import static org.junit.Assert.assertTrue;
 

File: core-java-modules/core-java-datetime-string/src/test/java/com/baeldung/zonedatetime/ZonedDateTimeUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.zoneddatetime;
+package com.baeldung.zonedatetime;
 
 import static org.junit.jupiter.api.Assertions.assertThrows;
 

File: core-java-modules/core-java-os/src/test/java/com/baeldung/shell/JavaProcessUnitIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.baeldung.java.shell;
+package com.baeldung.java.shell;
 
 import org.junit.Assert;
 import org.junit.Test;

File: core-java-modules/core-java-streams-2/src/main/java/com/baeldung/streams/MyImmutableListCollector.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.stream.mycollectors;
+package com.baeldung.streams;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: core-java-modules/core-java-streams-2/src/test/java/com/baeldung/streams/Detail.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.java_8_features;
+package com.baeldung.streams;
 
 import java.util.Arrays;
 import java.util.List;

File: core-java-modules/core-java-streams-2/src/test/java/com/baeldung/streams/Java8FindAnyFindFirstUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.java8.streams;
+package com.baeldung.streams;
 
 import org.junit.Test;
 

File: core-java-modules/core-java-streams-2/src/test/java/com/baeldung/streams/Java8StreamApiUnitTest.java
Patch:
@@ -1,6 +1,5 @@
-package com.baeldung.java8.streams;
+package com.baeldung.streams;
 
-import com.baeldung.stream.Product;
 import org.junit.Before;
 import org.junit.Test;
 import org.slf4j.Logger;

File: core-java-modules/core-java-streams-2/src/test/java/com/baeldung/streams/Java8StreamsUnitTest.java
Patch:
@@ -1,6 +1,5 @@
-package com.baeldung.java8;
+package com.baeldung.streams;
 
-import com.baeldung.java_8_features.Detail;
 import org.junit.Before;
 import org.junit.Test;
 

File: core-java-modules/core-java-streams-2/src/test/java/com/baeldung/streams/Product.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.stream;
+package com.baeldung.streams;
 
 import java.util.List;
 import java.util.stream.Stream;

File: core-java-modules/core-java-streams-2/src/test/java/com/baeldung/streams/StreamAddUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.stream;
+package com.baeldung.streams;
 
 import org.junit.Test;
 

File: core-java-modules/core-java-streams-3/src/main/java/com/baeldung/streams/forEach/ReverseList.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.forEach;
+package com.baeldung.streams.forEach;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: core-java-modules/core-java-streams-3/src/main/java/com/baeldung/streams/primitivestreams/PrimitiveStreams.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.stream;
+package com.baeldung.streams.primitivestreams;
 
 import java.util.Arrays;
 import java.util.stream.IntStream;

File: core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/collectors/Java8CollectorsUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.collectors;
+package com.baeldung.streams.collectors;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;

File: core-java-modules/core-java-streams-3/src/test/java/com/baeldung/streams/conditional/StreamForEachIfElseUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.stream.conditional;
+package com.baeldung.streams.conditional;
 
 import java.util.Arrays;
 import java.util.List;

File: core-java-modules/core-java-streams/src/test/java/com/baeldung/conversion/IterableStreamConversionUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.java.conversion;
+package com.baeldung.conversion;
 
 import org.junit.Assert;
 import org.junit.Test;

File: core-java-modules/core-java-string-algorithms-2/src/main/java/com/baeldung/padding/StringPaddingUtil.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string.padding;
+package com.baeldung.padding;
 
 public class StringPaddingUtil {
 

File: core-java-modules/core-java-string-algorithms-2/src/main/java/com/baeldung/removeleadingtrailingchar/RemoveLeadingAndTrailingZeroes.java
Patch:
@@ -1,9 +1,8 @@
-package com.baeldung.string.removeleadingtrailingchar;
+package com.baeldung.removeleadingtrailingchar;
 
 
-import org.apache.commons.lang3.StringUtils;
-
 import com.google.common.base.CharMatcher;
+import org.apache.commons.lang3.StringUtils;
 
 public class RemoveLeadingAndTrailingZeroes {
 

File: core-java-modules/core-java-string-algorithms-2/src/main/java/com/baeldung/replacechar/ReplaceCharacterInString.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string;
+package com.baeldung.replacechar;
 
 public class ReplaceCharacterInString {
 

File: core-java-modules/core-java-string-algorithms-2/src/main/java/com/baeldung/wordcount/WordCounter.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string.wordcount;
+package com.baeldung.wordcount;
 
 import java.util.StringTokenizer;
 

File: core-java-modules/core-java-string-algorithms-2/src/test/java/com/baeldung/containchar/StringContainingCharactersUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string;
+package com.baeldung.containchar;
 
 import org.junit.Test;
 

File: core-java-modules/core-java-string-algorithms-2/src/test/java/com/baeldung/join/StringFromPrimitiveArrayUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string;
+package com.baeldung.join;
 
 import com.google.common.base.Joiner;
 import com.google.common.primitives.Chars;

File: core-java-modules/core-java-string-algorithms-2/src/test/java/com/baeldung/padding/StringPaddingUtilUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string.padding;
+package com.baeldung.padding;
 
 import com.google.common.base.Strings;
 import org.apache.commons.lang3.StringUtils;

File: core-java-modules/core-java-string-algorithms-2/src/test/java/com/baeldung/removelastchar/RemoveLastCharUnitTest.java
Patch:
@@ -1,12 +1,12 @@
-package com.baeldung.string;
+package com.baeldung.removelastchar;
 
 import org.apache.commons.lang3.StringUtils;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
 
-public class StringHelperUnitTest {
+public class RemoveLastCharUnitTest {
 
     public static final String TEST_STRING = "abcdef";
     public static final String NULL_STRING = null;

File: core-java-modules/core-java-string-algorithms-2/src/test/java/com/baeldung/replacechar/ReplaceCharInStringUnitTest.java
Patch:
@@ -1,8 +1,9 @@
-package com.baeldung.string;
+package com.baeldung.replacechar;
 
 import org.junit.Test;
 
 import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 public class ReplaceCharInStringUnitTest {
     private ReplaceCharacterInString characterInString = new ReplaceCharacterInString();

File: core-java-modules/core-java-string-algorithms-2/src/test/java/com/baeldung/replaceremove/StringReplaceAndRemoveUnitTest.java
Patch:
@@ -1,7 +1,7 @@
-package com.baeldung.string;
+package com.baeldung.replaceremove;
 
-import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.RegExUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.junit.Test;
 
 import static org.junit.Assert.assertFalse;

File: core-java-modules/core-java-string-algorithms-2/src/test/java/com/baeldung/wordcount/WordCountUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string.wordcount;
+package com.baeldung.wordcount;
 
 import static org.junit.Assert.assertEquals;
 

File: core-java-modules/core-java-string-algorithms/src/main/java/com/baeldung/palindrom/Palindrome.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string;
+package com.baeldung.palindrom;
 
 import java.util.stream.IntStream;
 

File: core-java-modules/core-java-string-algorithms/src/main/java/com/baeldung/pangram/Pangram.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string;
+package com.baeldung.pangram;
 
 import java.util.Arrays;
 import java.util.Map;

File: core-java-modules/core-java-string-algorithms/src/main/java/com/baeldung/removeduplicates/RemoveDuplicateFromString.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.stringduplicates;
+package com.baeldung.removeduplicates;
 
 import java.util.Arrays;
 import java.util.HashSet;

File: core-java-modules/core-java-string-algorithms/src/main/java/com/baeldung/repetition/SubstringRepetition.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string.repetition;
+package com.baeldung.repetition;
 
 public class SubstringRepetition {
 

File: core-java-modules/core-java-string-algorithms/src/main/java/com/baeldung/reverse/ReverseStringExamples.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string.reverse;
+package com.baeldung.reverse;
 
 import org.apache.commons.lang3.StringUtils;
 

File: core-java-modules/core-java-string-algorithms/src/main/java/com/baeldung/searching/WordIndexer.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string.searching;
+package com.baeldung.searching;
 
 import java.util.ArrayList;
 import java.util.List;

File: core-java-modules/core-java-string-algorithms/src/test/java/com/baeldung/matchwords/MatchWordsUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.string;
+package com.baeldung.matchwords;
 
 import org.junit.Test;
 

File: core-java-modules/core-java-string-algorithms/src/test/java/com/baeldung/pangram/PangramUnitTest.java
Patch:
@@ -1,8 +1,9 @@
-package com.baeldung.string;
+package com.baeldung.pangram;
+
+import org.junit.Test;
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import org.junit.Test;
 
 public class PangramUnitTest {
 

File: core-java-modules/core-java-string-algorithms/src/test/java/com/baeldung/removeduplicates/RemoveDuplicateFromStringUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baeldung.stringduplicates;
+package com.baeldung.removeduplicates;
 
 import org.junit.Assert;
 import org.junit.Before;

